

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Jul 05 15:24:14 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    97                           	psect	pa_nodes,global,class=CODE,delta=1
    98  0000                     tblptrh	equ	0xFF7
    99                           tblptrl	equ	0xFF6
   100                           tablat	equ	0xFF5
   101                           prodh	equ	0xFF4
   102                           prodl	equ	0xFF3
   103                           intcon	equ	0xFF2
   104                           intcon2	equ	0xFF1
   105                           wreg	equ	0xFE8
   106                           indf1	equ	0xFE7
   107                           fsr1h	equ	0xFE2
   108                           fsr1l	equ	0xFE1
   109                           indf2	equ	0xFDF
   110                           postinc2	equ	0xFDE
   111                           postdec2	equ	0xFDD
   112                           plusw2	equ	0xFDB
   113                           fsr2h	equ	0xFDA
   114                           fsr2l	equ	0xFD9
   115                           status	equ	0xFD8
   116                           
   117                           	psect	smallconst
   118  000600                     __psmallconst:
   119                           	opt stack 0
   120  000600                     _vscp_deviceURL:
   121                           	opt stack 0
   122  000600  77                 	db	119
   123  000601  77                 	db	119
   124  000602  77                 	db	119
   125  000603  2E                 	db	46
   126  000604  65                 	db	101
   127  000605  75                 	db	117
   128  000606  72                 	db	114
   129  000607  6F                 	db	111
   130  000608  73                 	db	115
   131  000609  6F                 	db	111
   132  00060A  75                 	db	117
   133  00060B  72                 	db	114
   134  00060C  63                 	db	99
   135  00060D  65                 	db	101
   136  00060E  2E                 	db	46
   137  00060F  73                 	db	115
   138  000610  65                 	db	101
   139  000611  2F                 	db	47
   140  000612  62                 	db	98
   141  000613  65                 	db	101
   142  000614  69                 	db	105
   143  000615  6A                 	db	106
   144  000616  69                 	db	105
   145  000617  6E                 	db	110
   146  000618  67                 	db	103
   147  000619  5F                 	db	95
   148  00061A  32                 	db	50
   149  00061B  2E                 	db	46
   150  00061C  78                 	db	120
   151  00061D  6D                 	db	109
   152  00061E  6C                 	db	108
   153  00061F  00                 	db	0
   154  000620                     __end_of_vscp_deviceURL:
   155                           	opt stack 0
   156  0000                     _ADCON1	set	4033
   157  0000                     _BRGCON1	set	3952
   158  0000                     _BRGCON2	set	3953
   159  0000                     _BRGCON3	set	3954
   160  0000                     _BSEL0	set	3576
   161  0000                     _CANCON	set	3951
   162  0000                     _CIOCON	set	3955
   163  0000                     _ECANCON	set	3959
   164  0000                     _EEADR	set	4009
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EECON2	set	4007
   167  0000                     _EEDATA	set	4008
   168  0000                     _INTCON2bits	set	4081
   169  0000                     _INTCONbits	set	4082
   170  0000                     _MSEL0	set	3568
   171  0000                     _MSEL1	set	3569
   172  0000                     _MSEL2	set	3570
   173  0000                     _PORTA	set	3968
   174  0000                     _PORTAbits	set	3968
   175  0000                     _PORTB	set	3969
   176  0000                     _PORTBbits	set	3969
   177  0000                     _PORTC	set	3970
   178  0000                     _PORTCbits	set	3970
   179  0000                     _RXB1CONbits	set	3920
   180  0000                     _RXF0EIDH	set	3842
   181  0000                     _RXF0EIDL	set	3843
   182  0000                     _RXF0SIDH	set	3840
   183  0000                     _RXF0SIDL	set	3841
   184  0000                     _RXF1EIDH	set	3846
   185  0000                     _RXF1EIDL	set	3847
   186  0000                     _RXF1SIDL	set	3845
   187  0000                     _RXFBCON0	set	3552
   188  0000                     _RXFBCON1	set	3553
   189  0000                     _RXFBCON2	set	3554
   190  0000                     _RXFBCON3	set	3555
   191  0000                     _RXFBCON4	set	3556
   192  0000                     _RXFBCON5	set	3557
   193  0000                     _RXFBCON6	set	3558
   194  0000                     _RXFBCON7	set	3559
   195  0000                     _RXFCON0	set	3540
   196  0000                     _RXFCON1	set	3541
   197  0000                     _RXM0EIDH	set	3866
   198  0000                     _RXM0EIDL	set	3867
   199  0000                     _RXM0SIDH	set	3864
   200  0000                     _RXM0SIDL	set	3865
   201  0000                     _RXM1EIDH	set	3870
   202  0000                     _RXM1EIDL	set	3871
   203  0000                     _RXM1SIDL	set	3869
   204  0000                     _T0CON	set	4053
   205  0000                     _T0CONbits	set	4053
   206  0000                     _TMR0H	set	4055
   207  0000                     _TMR0L	set	4054
   208  0000                     _TRISA	set	3986
   209  0000                     _TRISAbits	set	3986
   210  0000                     _TRISB	set	3987
   211  0000                     _TRISBbits	set	3987
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISCbits	set	3988
   214  0000                     _B0RXFUL	set	28935
   215  0000                     _B0TXEN	set	28610
   216  0000                     _B1RXFUL	set	29063
   217  0000                     _B1TXEN	set	28611
   218  0000                     _B2RXFUL	set	29191
   219  0000                     _B2TXEN	set	28612
   220  0000                     _B3RXFUL	set	29319
   221  0000                     _B3TXEN	set	28613
   222  0000                     _B4RXFUL	set	29447
   223  0000                     _B4TXEN	set	28614
   224  0000                     _B5RXFUL	set	29575
   225  0000                     _B5TXEN	set	28615
   226  0000                     _FIFOEMPTY	set	31655
   227  0000                     _IRXIF	set	32039
   228  0000                     _MDSEL0	set	31678
   229  0000                     _MDSEL1	set	31679
   230  0000                     _RXB0FILHIT0	set	31488
   231  0000                     _RXB0FUL	set	31495
   232  0000                     _RXB0IF	set	32032
   233  0000                     _RXB0OVFL	set	31655
   234  0000                     _RXB1IF	set	32033
   235  0000                     _RXB1OVFL	set	31654
   236  0000                     _RXF1EN	set	28321
   237  0000                     _RXM0EXIDM	set	30923
   238  0000                     _RXM1EXIDEN	set	30955
   239  0000                     _B0CON	set	3616
   240  0000                     _B1CON	set	3632
   241  0000                     _B2CON	set	3648
   242  0000                     _B3CON	set	3664
   243  0000                     _B4CON	set	3680
   244  0000                     _B5CON	set	3696
   245  0000                     _RXB0CON	set	3936
   246  0000                     _RXB1CON	set	3920
   247  0000                     _RXF1SIDH	set	3844
   248  0000                     _RXM1SIDH	set	3868
   249  0000                     _TXB0CON	set	3904
   250  0000                     _TXB1CON	set	3888
   251  0000                     _TXB2CON	set	3872
   252  000620  00                 	db	0	; dummy byte at the end
   253  0000                     tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           prodh	equ	0xFF4
   257                           prodl	equ	0xFF3
   258                           intcon	equ	0xFF2
   259                           intcon2	equ	0xFF1
   260                           wreg	equ	0xFE8
   261                           indf1	equ	0xFE7
   262                           fsr1h	equ	0xFE2
   263                           fsr1l	equ	0xFE1
   264                           indf2	equ	0xFDF
   265                           postinc2	equ	0xFDE
   266                           postdec2	equ	0xFDD
   267                           plusw2	equ	0xFDB
   268                           fsr2h	equ	0xFDA
   269                           fsr2l	equ	0xFD9
   270                           status	equ	0xFD8
   271                           
   272                           	psect	nvBANK0
   273  0000FF                     __pnvBANK0:
   274                           	opt stack 0
   275  0000FF                     ___DCDelay:
   276                           	opt stack 0
   277  0000FF                     	ds	1
   278                           
   279                           ; #config settings
   280  0000                     tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           prodh	equ	0xFF4
   284                           prodl	equ	0xFF3
   285                           intcon	equ	0xFF2
   286                           intcon2	equ	0xFF1
   287                           wreg	equ	0xFE8
   288                           indf1	equ	0xFE7
   289                           fsr1h	equ	0xFE2
   290                           fsr1l	equ	0xFE1
   291                           indf2	equ	0xFDF
   292                           postinc2	equ	0xFDE
   293                           postdec2	equ	0xFDD
   294                           plusw2	equ	0xFDB
   295                           fsr2h	equ	0xFDA
   296                           fsr2l	equ	0xFD9
   297                           status	equ	0xFD8
   298                           
   299                           	psect	cinit
   300  0042B4                     __pcinit:
   301                           	opt stack 0
   302  0042B4                     start_initialization:
   303                           	opt stack 0
   304  0042B4                     __initialization:
   305                           	opt stack 0
   306                           
   307                           ; Clear objects allocated to BANK1 (20 bytes)
   308  0042B4  EE01  F000         	lfsr	0,__pbssBANK1
   309  0042B8  0E14               	movlw	20
   310  0042BA                     clear_0:
   311  0042BA  6AEE               	clrf	postinc0,c
   312  0042BC  06E8               	decf	wreg,f,c
   313  0042BE  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BANK0 (92 bytes)
   316  0042C0  EE00  F060         	lfsr	0,__pbssBANK0
   317  0042C4  0E5C               	movlw	92
   318  0042C6                     clear_1:
   319  0042C6  6AEE               	clrf	postinc0,c
   320  0042C8  06E8               	decf	wreg,f,c
   321  0042CA  E1FD               	bnz	clear_1
   322                           
   323                           ; Clear objects allocated to COMRAM (7 bytes)
   324  0042CC  EE00  F052         	lfsr	0,__pbssCOMRAM
   325  0042D0  0E07               	movlw	7
   326  0042D2                     clear_2:
   327  0042D2  6AEE               	clrf	postinc0,c
   328  0042D4  06E8               	decf	wreg,f,c
   329  0042D6  E1FD               	bnz	clear_2
   330  0042D8                     end_of_initialization:
   331                           	opt stack 0
   332  0042D8                     __end_of__initialization:
   333                           	opt stack 0
   334  0042D8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  0042DA  6EF8               	movwf	tblptru,c
   336  0042DC  0100               	movlb	0
   337  0042DE  EFE0  F00F         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           prodh	equ	0xFF4
   343                           prodl	equ	0xFF3
   344                           intcon	equ	0xFF2
   345                           intcon2	equ	0xFF1
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           indf1	equ	0xFE7
   349                           fsr1h	equ	0xFE2
   350                           fsr1l	equ	0xFE1
   351                           indf2	equ	0xFDF
   352                           postinc2	equ	0xFDE
   353                           postdec2	equ	0xFDD
   354                           plusw2	equ	0xFDB
   355                           fsr2h	equ	0xFDA
   356                           fsr2l	equ	0xFD9
   357                           status	equ	0xFD8
   358                           
   359                           	psect	bssCOMRAM
   360  000052                     __pbssCOMRAM:
   361                           	opt stack 0
   362  000052                     _vscp_page_select:
   363                           	opt stack 0
   364  000052                     	ds	2
   365  000054                     __ECANRxFilterHitInfo:
   366                           	opt stack 0
   367  000054                     	ds	1
   368  000055                     _vscp_alarmstatus:
   369                           	opt stack 0
   370  000055                     	ds	1
   371  000056                     _vscp_initledfunc:
   372                           	opt stack 0
   373  000056                     	ds	1
   374  000057                     _vscp_probe_address:
   375                           	opt stack 0
   376  000057                     	ds	1
   377  000058                     _vscp_statuscnt:
   378                           	opt stack 0
   379  000058                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           prodh	equ	0xFF4
   385                           prodl	equ	0xFF3
   386                           intcon	equ	0xFF2
   387                           intcon2	equ	0xFF1
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           indf1	equ	0xFE7
   391                           fsr1h	equ	0xFE2
   392                           fsr1l	equ	0xFE1
   393                           indf2	equ	0xFDF
   394                           postinc2	equ	0xFDE
   395                           postdec2	equ	0xFDD
   396                           plusw2	equ	0xFDB
   397                           fsr2h	equ	0xFDA
   398                           fsr2l	equ	0xFD9
   399                           status	equ	0xFD8
   400                           
   401                           	psect	bssBANK0
   402  000060                     __pbssBANK0:
   403                           	opt stack 0
   404  000060                     _measurement_clock_10ms:
   405                           	opt stack 0
   406  000060                     	ds	4
   407  000064                     _measurement_clock_sec:
   408                           	opt stack 0
   409  000064                     	ds	4
   410  000068                     _channel_pulse_flags:
   411                           	opt stack 0
   412  000068                     	ds	2
   413  00006A                     _current_iostate:
   414                           	opt stack 0
   415  00006A                     	ds	2
   416  00006C                     _vscp_configtimer:
   417                           	opt stack 0
   418  00006C                     	ds	2
   419  00006E                     _vscp_timer:
   420                           	opt stack 0
   421  00006E                     	ds	2
   422  000070                     __IT_INT_MASK:
   423                           	opt stack 0
   424  000070                     	ds	1
   425  000071                     __IT_SAVE_BSR:
   426                           	opt stack 0
   427  000071                     	ds	1
   428  000072                     __IT_SAVE_STATUS:
   429                           	opt stack 0
   430  000072                     	ds	1
   431  000073                     __IT_SAVE_WREG:
   432                           	opt stack 0
   433  000073                     	ds	1
   434  000074                     ___DCByte:
   435                           	opt stack 0
   436  000074                     	ds	1
   437  000075                     _current_debounce:
   438                           	opt stack 0
   439  000075                     	ds	1
   440  000076                     _hours:
   441                           	opt stack 0
   442  000076                     	ds	1
   443  000077                     _minutes:
   444                           	opt stack 0
   445  000077                     	ds	1
   446  000078                     _seconds:
   447                           	opt stack 0
   448  000078                     	ds	1
   449  000079                     _sendTimer:
   450                           	opt stack 0
   451  000079                     	ds	1
   452  00007A                     _vscp_guid_reset:
   453                           	opt stack 0
   454  00007A                     	ds	1
   455  00007B                     _vscp_hour:
   456                           	opt stack 0
   457  00007B                     	ds	1
   458  00007C                     _vscp_initbtncnt:
   459                           	opt stack 0
   460  00007C                     	ds	1
   461  00007D                     _vscp_minute:
   462                           	opt stack 0
   463  00007D                     	ds	1
   464  00007E                     _vscp_nickname:
   465                           	opt stack 0
   466  00007E                     	ds	1
   467  00007F                     _vscp_node_state:
   468                           	opt stack 0
   469  00007F                     	ds	1
   470  000080                     _vscp_node_substate:
   471                           	opt stack 0
   472  000080                     	ds	1
   473  000081                     _vscp_probe_cnt:
   474                           	opt stack 0
   475  000081                     	ds	1
   476  000082                     _vscp_second:
   477                           	opt stack 0
   478  000082                     	ds	1
   479  000083                     _channel_protection_timer:
   480                           	opt stack 0
   481  000083                     	ds	20
   482  000097                     _vscp_imsg:
   483                           	opt stack 0
   484  000097                     	ds	14
   485  0000A5                     _vscp_omsg:
   486                           	opt stack 0
   487  0000A5                     	ds	13
   488  0000B2                     _debounce_cnt:
   489                           	opt stack 0
   490  0000B2                     	ds	10
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           prodh	equ	0xFF4
   496                           prodl	equ	0xFF3
   497                           intcon	equ	0xFF2
   498                           intcon2	equ	0xFF1
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           indf1	equ	0xFE7
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           indf2	equ	0xFDF
   505                           postinc2	equ	0xFDE
   506                           postdec2	equ	0xFDD
   507                           plusw2	equ	0xFDB
   508                           fsr2h	equ	0xFDA
   509                           fsr2l	equ	0xFD9
   510                           status	equ	0xFD8
   511                           
   512                           	psect	bssBANK1
   513  000100                     __pbssBANK1:
   514                           	opt stack 0
   515  000100                     _channel_pulse_timer:
   516                           	opt stack 0
   517  000100                     	ds	20
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           prodh	equ	0xFF4
   523                           prodl	equ	0xFF3
   524                           intcon	equ	0xFF2
   525                           intcon2	equ	0xFF1
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           indf1	equ	0xFE7
   529                           fsr1h	equ	0xFE2
   530                           fsr1l	equ	0xFE1
   531                           indf2	equ	0xFDF
   532                           postinc2	equ	0xFDE
   533                           postdec2	equ	0xFDD
   534                           plusw2	equ	0xFDB
   535                           fsr2h	equ	0xFDA
   536                           fsr2l	equ	0xFD9
   537                           status	equ	0xFD8
   538                           
   539                           	psect	cstackBANK1
   540  000114                     __pcstackBANK1:
   541                           	opt stack 0
   542  000114                     ??_main:
   543                           
   544                           ; 0 bytes @ 0x0
   545  000114                     	ds	2
   546  000116                     main@dir:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x2
   550  000116                     	ds	1
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           prodh	equ	0xFF4
   556                           prodl	equ	0xFF3
   557                           intcon	equ	0xFF2
   558                           intcon2	equ	0xFF1
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           indf1	equ	0xFE7
   562                           fsr1h	equ	0xFE2
   563                           fsr1l	equ	0xFE1
   564                           indf2	equ	0xFDF
   565                           postinc2	equ	0xFDE
   566                           postdec2	equ	0xFDD
   567                           plusw2	equ	0xFDB
   568                           fsr2h	equ	0xFDA
   569                           fsr2l	equ	0xFD9
   570                           status	equ	0xFD8
   571                           
   572                           	psect	cstackBANK0
   573  0000BC                     __pcstackBANK0:
   574                           	opt stack 0
   575  0000BC                     ??_sendVSCPFrame:
   576                           
   577                           ; 0 bytes @ 0x0
   578  0000BC                     	ds	20
   579  0000D0                     ?_SendInformationEvent:
   580                           	opt stack 0
   581  0000D0                     ?_vscp_sendHeartBeat:
   582                           	opt stack 0
   583  0000D0                     SendInformationEvent@eventClass:
   584                           	opt stack 0
   585  0000D0                     vscp_sendHeartBeat@subzone:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x14
   589  0000D0                     	ds	1
   590  0000D1                     SendInformationEvent@eventTypeId:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x15
   594  0000D1                     	ds	1
   595  0000D2                     ??_doApplicationOneSecondWork:
   596  0000D2                     ??_doActionPulseOn:
   597  0000D2                     ??_doActionPulseOff:
   598  0000D2                     ?_doActionStatusAll:
   599                           	opt stack 0
   600  0000D2                     ??_vscp_writeAppReg:
   601  0000D2                     doActionOn@ctrlreg:
   602                           	opt stack 0
   603  0000D2                     
   604                           ; 1 bytes @ 0x16
   605  0000D2                     	ds	1
   606  0000D3                     doActionOn@bEvent:
   607                           	opt stack 0
   608  0000D3                     doActionStatusAll@dmflags:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x17
   612  0000D3                     	ds	1
   613  0000D4                     doActionStatusAll@i:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x18
   617  0000D4                     	ds	3
   618  0000D7                     ??_doDM:
   619                           
   620                           ; 0 bytes @ 0x1B
   621  0000D7                     	ds	2
   622  0000D9                     vscp_writeAppReg@val_1273:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x1D
   626  0000D9                     	ds	1
   627  0000DA                     vscp_writeAppReg@bInfoEvent:
   628                           	opt stack 0
   629  0000DA                     doDM@class_filter:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x1E
   633  0000DA                     	ds	1
   634  0000DB                     vscp_writeAppReg@rv:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x1F
   638  0000DB                     	ds	1
   639  0000DC                     vscp_writeAppReg@bOn:
   640                           	opt stack 0
   641  0000DC                     doDM@class_mask:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x20
   645  0000DC                     	ds	1
   646  0000DD                     vscp_writeAppReg@reg:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x21
   650  0000DD                     	ds	1
   651  0000DE                     ?_vscp_writeRegister:
   652                           	opt stack 0
   653  0000DE                     doDM@type_filter:
   654                           	opt stack 0
   655  0000DE                     vscp_writeRegister@value:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x22
   659  0000DE                     	ds	1
   660  0000DF                     ??_vscp_handleProtocolEvent:
   661  0000DF                     doDM@type_mask:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x23
   665  0000DF                     	ds	1
   666  0000E0                     _doDM$2393:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x24
   670  0000E0                     	ds	1
   671  0000E1                     _doDM$2394:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x25
   675  0000E1                     	ds	1
   676  0000E2                     _doDM$2395:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x26
   680  0000E2                     	ds	1
   681  0000E3                     _doDM$2396:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x27
   685  0000E3                     	ds	1
   686  0000E4                     _doDM$2397:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x28
   690  0000E4                     	ds	1
   691  0000E5                     _doDM$2398:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x29
   695  0000E5                     	ds	1
   696  0000E6                     _doDM$2399:
   697                           	opt stack 0
   698  0000E6                     vscp_handleProtocolEvent@page_save:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x2A
   702  0000E6                     	ds	1
   703  0000E7                     doDM@dmflags:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x2B
   707  0000E7                     	ds	1
   708  0000E8                     doDM@i:
   709                           	opt stack 0
   710  0000E8                     vscp_handleProtocolEvent@page_save_1513:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x2C
   714  0000E8                     	ds	2
   715  0000EA                     vscp_handleProtocolEvent@offset:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x2E
   719  0000EA                     	ds	1
   720  0000EB                     vscp_handleProtocolEvent@pos:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2F
   724  0000EB                     	ds	1
   725  0000EC                     vscp_handleProtocolEvent@bytes:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x30
   729  0000EC                     	ds	1
   730  0000ED                     vscp_handleProtocolEvent@len:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x31
   734  0000ED                     	ds	1
   735  0000EE                     vscp_handleProtocolEvent@pos_1502:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x32
   739  0000EE                     	ds	1
   740  0000EF                     vscp_handleProtocolEvent@len_1503:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x33
   744  0000EF                     	ds	1
   745  0000F0                     vscp_handleProtocolEvent@bytes_this_time:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x34
   749  0000F0                     	ds	1
   750  0000F1                     vscp_handleProtocolEvent@cb:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x35
   754  0000F1                     	ds	1
   755  0000F2                     vscp_handleProtocolEvent@i_1512:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x36
   759  0000F2                     	ds	1
   760  0000F3                     vscp_handleProtocolEvent@k:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x37
   764  0000F3                     	ds	1
   765  0000F4                     vscp_handleProtocolEvent@i_1501:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x38
   769  0000F4                     	ds	1
   770  0000F5                     vscp_handleProtocolEvent@byte:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x39
   774  0000F5                     	ds	1
   775  0000F6                     doApplicationOneSecondWork@iodirections:
   776                           	opt stack 0
   777  0000F6                     vscp_handleProtocolEvent@bytes_1508:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x3A
   781  0000F6                     	ds	2
   782  0000F8                     vscp_handleProtocolEvent@i_1504:
   783                           	opt stack 0
   784  0000F8                     doApplicationOneSecondWork@data:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x3C
   788  0000F8                     	ds	1
   789  0000F9                     vscp_handleProtocolEvent@i:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x3D
   793  0000F9                     	ds	1
   794  0000FA                     vscp_handleProtocolEvent@j:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3E
   798  0000FA                     	ds	1
   799  0000FB                     doApplicationOneSecondWork@bInput:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3F
   803  0000FB                     	ds	1
   804  0000FC                     doApplicationOneSecondWork@bOn:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x40
   808  0000FC                     	ds	1
   809  0000FD                     doApplicationOneSecondWork@ctrlreg:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x41
   813  0000FD                     	ds	1
   814  0000FE                     doApplicationOneSecondWork@i:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x42
   818  0000FE                     	ds	1
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           prodh	equ	0xFF4
   824                           prodl	equ	0xFF3
   825                           intcon	equ	0xFF2
   826                           intcon2	equ	0xFF1
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           indf1	equ	0xFE7
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           indf2	equ	0xFDF
   833                           postinc2	equ	0xFDE
   834                           postdec2	equ	0xFDD
   835                           plusw2	equ	0xFDB
   836                           fsr2h	equ	0xFDA
   837                           fsr2l	equ	0xFD9
   838                           status	equ	0xFD8
   839                           
   840                           	psect	cstackCOMRAM
   841  000001                     __pcstackCOMRAM:
   842                           	opt stack 0
   843  000001                     ?i1_WriteTimer0:
   844                           	opt stack 0
   845  000001                     i1WriteTimer0@timer0:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x0
   849  000001                     	ds	2
   850  000003                     i1WriteTimer0@timer:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x2
   854  000003                     	ds	2
   855  000005                     ??_interrupt_at_low_vector:
   856                           
   857                           ; 0 bytes @ 0x4
   858  000005                     	ds	3
   859  000008                     ?__CANIDToRegs:
   860                           	opt stack 0
   861  000008                     ?__RegsToCANID:
   862                           	opt stack 0
   863  000008                     ?_WriteTimer0:
   864                           	opt stack 0
   865  000008                     ?_Write_b_eep:
   866                           	opt stack 0
   867  000008                     ??_vscp_getMDF_URL:
   868  000008                     ?_Read_b_eep:
   869                           	opt stack 0
   870  000008                     ?___lbmod:
   871                           	opt stack 0
   872  000008                     ?__ECANPointBuffer:
   873                           	opt stack 0
   874  000008                     ?_memset:
   875                           	opt stack 0
   876  000008                     ?_vscp_getFamilyCode:
   877                           	opt stack 0
   878  000008                     ?_vscp_getFamilyType:
   879                           	opt stack 0
   880  000008                     ECANSetOperationMode@mode:
   881                           	opt stack 0
   882  000008                     vscp_getMatrixInfo@i:
   883                           	opt stack 0
   884  000008                     OpenTimer0@config:
   885                           	opt stack 0
   886  000008                     ___lbmod@divisor:
   887                           	opt stack 0
   888  000008                     __CANIDToRegs@ptr:
   889                           	opt stack 0
   890  000008                     __RegsToCANID@ptr:
   891                           	opt stack 0
   892  000008                     Read_b_eep@badd:
   893                           	opt stack 0
   894  000008                     Write_b_eep@badd:
   895                           	opt stack 0
   896  000008                     WriteTimer0@timer0:
   897                           	opt stack 0
   898  000008                     memset@p1:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x7
   902  000008                     	ds	1
   903  000009                     vscp_getMDF_URL@idx:
   904                           	opt stack 0
   905  000009                     ___lbmod@dividend:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x8
   909  000009                     	ds	1
   910  00000A                     ??_vscp_readAppReg:
   911  00000A                     __RegsToCANID@val:
   912                           	opt stack 0
   913  00000A                     vscp_getGUID@idx:
   914                           	opt stack 0
   915  00000A                     vscp_getUserID@idx:
   916                           	opt stack 0
   917  00000A                     vscp_getManufacturerId@idx:
   918                           	opt stack 0
   919  00000A                     Write_b_eep@bdat:
   920                           	opt stack 0
   921  00000A                     ___lbmod@counter:
   922                           	opt stack 0
   923  00000A                     WriteTimer0@timer:
   924                           	opt stack 0
   925  00000A                     memset@c:
   926                           	opt stack 0
   927  00000A                     __CANIDToRegs@val:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x9
   931  00000A                     	ds	1
   932  00000B                     __RegsToCANID@type:
   933                           	opt stack 0
   934  00000B                     __ECANPointBuffer@b:
   935                           	opt stack 0
   936  00000B                     Write_b_eep@GIE_BIT_VAL:
   937                           	opt stack 0
   938  00000B                     ___lbmod@rem:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0xA
   942  00000B                     	ds	1
   943  00000C                     ??__RegsToCANID:
   944  00000C                     ??_init_app_eeprom:
   945  00000C                     ??_vscp_readStdReg:
   946  00000C                     ?_vscp_setGUID:
   947                           	opt stack 0
   948  00000C                     ?_vscp_setManufacturerId:
   949                           	opt stack 0
   950  00000C                     ?_vscp_setUserID:
   951                           	opt stack 0
   952  00000C                     vscp_setGUID@data:
   953                           	opt stack 0
   954  00000C                     vscp_setManufacturerId@data:
   955                           	opt stack 0
   956  00000C                     vscp_writeNicknamePermanent@nickname:
   957                           	opt stack 0
   958  00000C                     vscp_setUserID@data:
   959                           	opt stack 0
   960  00000C                     vscp_setSegmentCRC@crc:
   961                           	opt stack 0
   962  00000C                     vscp_setControlByte@ctrl:
   963                           	opt stack 0
   964  00000C                     vscp_goBootloaderMode@algorithm:
   965                           	opt stack 0
   966  00000C                     __ECANPointBuffer@pt:
   967                           	opt stack 0
   968  00000C                     memset@n:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0xB
   972  00000C                     	ds	1
   973  00000D                     vscp_setGUID@idx:
   974                           	opt stack 0
   975  00000D                     vscp_setManufacturerId@idx:
   976                           	opt stack 0
   977  00000D                     vscp_setUserID@idx:
   978                           	opt stack 0
   979  00000D                     vscp_handleDropNickname@bytes:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0xC
   983  00000D                     	ds	1
   984  00000E                     __CANIDToRegs@type:
   985                           	opt stack 0
   986  00000E                     __RegsToCANID@Value:
   987                           	opt stack 0
   988  00000E                     init_app_eeprom@j:
   989                           	opt stack 0
   990  00000E                     memset@p:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xD
   994  00000E                     	ds	1
   995  00000F                     ??__CANIDToRegs:
   996  00000F                     ?_ECANReceiveMessage:
   997                           	opt stack 0
   998  00000F                     ECANReceiveMessage@data:
   999                           	opt stack 0
  1000  00000F                     init_app_eeprom@i:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0xE
  1004  00000F                     	ds	1
  1005  000010                     ??_init_app_ram:
  1006  000010                     ECANReceiveMessage@dataLen:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0xF
  1010  000010                     	ds	1
  1011  000011                     ECANReceiveMessage@msgFlags:
  1012                           	opt stack 0
  1013  000011                     __CANIDToRegs@Value:
  1014                           	opt stack 0
  1015  000011                     vscp_readAppReg@rv:
  1016                           	opt stack 0
  1017  000011                     vscp_readStdReg@code:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x10
  1021  000011                     	ds	1
  1022  000012                     ??_calculateSetFilterMask:
  1023  000012                     ?_ECANSendMessage:
  1024                           	opt stack 0
  1025  000012                     ECANReceiveMessage@id:
  1026                           	opt stack 0
  1027  000012                     vscp_readAppReg@reg:
  1028                           	opt stack 0
  1029  000012                     ECANSendMessage@id:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x11
  1033  000012                     	ds	1
  1034  000013                     ECANReceiveMessage@savedPtr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x12
  1038  000013                     	ds	2
  1039  000015                     ECANReceiveMessage@i:
  1040                           	opt stack 0
  1041  000015                     vscp_readStdReg@code_1486:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x14
  1045  000015                     	ds	1
  1046  000016                     ECANReceiveMessage@mode:
  1047                           	opt stack 0
  1048  000016                     ECANSendMessage@data:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x15
  1052  000016                     	ds	1
  1053  000017                     ECANReceiveMessage@temp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x16
  1057  000017                     	ds	1
  1058  000018                     ECANSendMessage@dataLen:
  1059                           	opt stack 0
  1060  000018                     ECANReceiveMessage@ptr:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x17
  1064  000018                     	ds	1
  1065  000019                     ECANSendMessage@msgFlags:
  1066                           	opt stack 0
  1067  000019                     vscp_readStdReg@idx:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x18
  1071  000019                     	ds	1
  1072  00001A                     ??_ECANSendMessage:
  1073  00001A                     ?_getCANFrame:
  1074                           	opt stack 0
  1075  00001A                     getCANFrame@pdlc:
  1076                           	opt stack 0
  1077  00001A                     vscp_readStdReg@idx_1487:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x19
  1081  00001A                     	ds	1
  1082  00001B                     getCANFrame@pdata:
  1083                           	opt stack 0
  1084  00001B                     vscp_readStdReg@rv:
  1085                           	opt stack 0
  1086  00001B                     ECANSendMessage@pb:
  1087                           	opt stack 0
  1088                           
  1089                           ; 18 bytes @ 0x1A
  1090  00001B                     	ds	1
  1091  00001C                     getCANFrame@pid:
  1092                           	opt stack 0
  1093  00001C                     vscp_readStdReg@reg:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x1B
  1097  00001C                     	ds	1
  1098  00001D                     getCANFrame@flags:
  1099                           	opt stack 0
  1100  00001D                     vscp_readRegister@reg:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x1C
  1104  00001D                     	ds	1
  1105  00001E                     ?_getVSCPFrame:
  1106                           	opt stack 0
  1107  00001E                     getVSCPFrame@pvscptype:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x1D
  1111  00001E                     	ds	1
  1112  00001F                     getVSCPFrame@pNodeId:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x1E
  1116  00001F                     	ds	1
  1117  000020                     getVSCPFrame@pPriority:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x1F
  1121  000020                     	ds	1
  1122  000021                     getVSCPFrame@pSize:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x20
  1126  000021                     	ds	1
  1127  000022                     getVSCPFrame@pData:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x21
  1131  000022                     	ds	1
  1132  000023                     ??_getVSCPFrame:
  1133                           
  1134                           ; 0 bytes @ 0x22
  1135  000023                     	ds	4
  1136  000027                     getVSCPFrame@pvscpclass:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x26
  1140  000027                     	ds	1
  1141  000028                     getVSCPFrame@id:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x27
  1145  000028                     	ds	4
  1146  00002C                     vscp_getEvent@rv:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x2B
  1150  00002C                     	ds	1
  1151  00002D                     ECANSendMessage@mode:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x2C
  1155  00002D                     	ds	1
  1156  00002E                     ECANSendMessage@buffers:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x2D
  1160  00002E                     	ds	1
  1161  00002F                     ECANSendMessage@j:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x2E
  1165  00002F                     	ds	1
  1166  000030                     ECANSendMessage@tempBSEL0:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x2F
  1170  000030                     	ds	1
  1171  000031                     ECANSendMessage@tempPtr:
  1172                           	opt stack 0
  1173  000031                     calculateSetFilterMask@rowmask:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x30
  1177  000031                     	ds	2
  1178  000033                     ECANSendMessage@temp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x32
  1182  000033                     	ds	1
  1183  000034                     ECANSendMessage@i:
  1184                           	opt stack 0
  1185  000034                     init_app_ram@dir:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x33
  1189  000034                     	ds	1
  1190  000035                     init_app_ram@i:
  1191                           	opt stack 0
  1192  000035                     calculateSetFilterMask@lastOID:
  1193                           	opt stack 0
  1194  000035                     ECANSendMessage@ptr:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x34
  1198  000035                     	ds	1
  1199  000036                     ?_vscp_writeStdReg:
  1200                           	opt stack 0
  1201  000036                     vscp_writeStdReg@value:
  1202                           	opt stack 0
  1203  000036                     calculateSetFilterMask@mask:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x35
  1207  000036                     	ds	1
  1208  000037                     ??_vscp_writeStdReg:
  1209  000037                     ?_sendCANFrame:
  1210                           	opt stack 0
  1211  000037                     sendCANFrame@id:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x36
  1215  000037                     	ds	3
  1216  00003A                     calculateSetFilterMask@filter:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x39
  1220  00003A                     	ds	1
  1221  00003B                     sendCANFrame@dlc:
  1222                           	opt stack 0
  1223  00003B                     vscp_writeStdReg@rv:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x3A
  1227  00003B                     	ds	1
  1228  00003C                     vscp_writeStdReg@reg:
  1229                           	opt stack 0
  1230  00003C                     sendCANFrame@pdata:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x3B
  1234  00003C                     	ds	2
  1235  00003E                     sendCANFrame@rv:
  1236                           	opt stack 0
  1237  00003E                     calculateSetFilterMask@rowfilter:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x3D
  1241  00003E                     	ds	1
  1242  00003F                     ?_sendVSCPFrame:
  1243                           	opt stack 0
  1244  00003F                     sendVSCPFrame@vscpclass:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x3E
  1248  00003F                     	ds	2
  1249  000041                     sendVSCPFrame@vscptype:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x40
  1253  000041                     	ds	1
  1254  000042                     sendVSCPFrame@nodeid:
  1255                           	opt stack 0
  1256  000042                     calculateSetFilterMask@j:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x41
  1260  000042                     	ds	1
  1261  000043                     sendVSCPFrame@priority:
  1262                           	opt stack 0
  1263  000043                     calculateSetFilterMask@i:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x42
  1267  000043                     	ds	1
  1268  000044                     sendVSCPFrame@size:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x43
  1272  000044                     	ds	1
  1273  000045                     sendVSCPFrame@pData:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x44
  1277  000045                     	ds	2
  1278  000047                     sendVSCPFrame@id:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x46
  1282  000047                     	ds	4
  1283  00004B                     SendInformationEvent@data:
  1284                           	opt stack 0
  1285                           
  1286                           ; 3 bytes @ 0x4A
  1287  00004B                     	ds	1
  1288  00004C                     ??_vscp_newNodeOnline:
  1289  00004C                     vscp_sendHeartBeat@zone:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x4B
  1293  00004C                     	ds	1
  1294  00004D                     ??_vscp_doOneSecondWork:
  1295                           
  1296                           ; 0 bytes @ 0x4C
  1297  00004D                     	ds	1
  1298  00004E                     SendInformationEvent@idx:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x4D
  1302  00004E                     	ds	1
  1303  00004F                     ?_doActionOff:
  1304                           	opt stack 0
  1305  00004F                     ?_doActionOn:
  1306                           	opt stack 0
  1307  00004F                     ?_doActionPulseOn:
  1308                           	opt stack 0
  1309  00004F                     ?_doActionPulseOff:
  1310                           	opt stack 0
  1311  00004F                     ?_doActionStatus:
  1312                           	opt stack 0
  1313  00004F                     ?_doActionToggle:
  1314                           	opt stack 0
  1315  00004F                     ?_vscp_writeAppReg:
  1316                           	opt stack 0
  1317  00004F                     vscp_writeAppReg@val:
  1318                           	opt stack 0
  1319  00004F                     doActionOn@arg:
  1320                           	opt stack 0
  1321  00004F                     doActionOff@arg:
  1322                           	opt stack 0
  1323  00004F                     doActionPulseOn@arg:
  1324                           	opt stack 0
  1325  00004F                     doActionPulseOff@arg:
  1326                           	opt stack 0
  1327  00004F                     doActionToggle@arg:
  1328                           	opt stack 0
  1329  00004F                     doActionStatus@arg:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x4E
  1333  00004F                     	ds	1
  1334  000050                     ??_doActionOn:
  1335  000050                     doActionOff@ctrlreg:
  1336                           	opt stack 0
  1337  000050                     doActionPulseOn@ctrlreg:
  1338                           	opt stack 0
  1339  000050                     doActionPulseOff@ctrlreg:
  1340                           	opt stack 0
  1341  000050                     doActionToggle@ctrlreg:
  1342                           	opt stack 0
  1343  000050                     doActionStatus@ctrlreg:
  1344                           	opt stack 0
  1345  000050                     vscp_writeRegister@reg:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x4F
  1349  000050                     	ds	1
  1350  000051                     doActionOff@bEvent:
  1351                           	opt stack 0
  1352  000051                     doActionPulseOn@bEvent:
  1353                           	opt stack 0
  1354  000051                     doActionPulseOff@bEvent:
  1355                           	opt stack 0
  1356  000051                     doActionToggle@bOn:
  1357                           	opt stack 0
  1358  000051                     doActionStatus@bOn:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x50
  1362  000051                     	ds	1
  1363  000052                     tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           intcon	equ	0xFF2
  1370                           intcon2	equ	0xFF1
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           indf1	equ	0xFE7
  1374                           fsr1h	equ	0xFE2
  1375                           fsr1l	equ	0xFE1
  1376                           indf2	equ	0xFDF
  1377                           postinc2	equ	0xFDE
  1378                           postdec2	equ	0xFDD
  1379                           plusw2	equ	0xFDB
  1380                           fsr2h	equ	0xFDA
  1381                           fsr2l	equ	0xFD9
  1382                           status	equ	0xFD8
  1383                           
  1384                           ; 0 bytes @ 0x51
  1385 ;;
  1386 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1387 ;;
  1388 ;; *************** function _main *****************
  1389 ;; Defined at:
  1390 ;;		line 199 in file "../main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  dir             1    2[BANK1 ] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;		None               void
  1397 ;; Registers used:
  1398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : F/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1404 ;;      Params:         0       0       0       0       0       0       0
  1405 ;;      Locals:         0       0       1       0       0       0       0
  1406 ;;      Temps:          0       0       2       0       0       0       0
  1407 ;;      Totals:         0       0       3       0       0       0       0
  1408 ;;Total ram usage:        3 bytes
  1409 ;; Hardware stack levels required when called:   10
  1410 ;; This function calls:
  1411 ;;		_init
  1412 ;;		_vscp_check_pstorage
  1413 ;;		_init_app_eeprom
  1414 ;;		_init_app_ram
  1415 ;;		_vscp_init
  1416 ;;		_Busy_eep
  1417 ;;		_Write_b_eep
  1418 ;;		_vscp_getEvent
  1419 ;;		_vscp_goActiveState
  1420 ;;		_vscp_handleProbeState
  1421 ;;		_vscp_handleProtocolEvent
  1422 ;;		_doDM
  1423 ;;		_Read_b_eep
  1424 ;;		_SendInformationEvent
  1425 ;;		_vscp_error
  1426 ;;		_vscp_doOneSecondWork
  1427 ;;		_doApplicationOneSecondWork
  1428 ;;		_doWork
  1429 ;; This function is called by:
  1430 ;;		Startup code after reset
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text0
  1435  001FC0                     __ptext0:
  1436                           	opt stack 0
  1437  001FC0                     _main:
  1438                           	opt stack 20
  1439                           
  1440                           ;main.c: 201: init();
  1441                           
  1442                           ;incstack = 0
  1443                           ;incstack = 0
  1444  001FC0  ECC6  F020         	call	_init	;wreg free
  1445                           
  1446                           ;main.c: 205: if ( !vscp_check_pstorage() ) {
  1447  001FC4  EC39  F022         	call	_vscp_check_pstorage	;wreg free
  1448  001FC8  0900               	iorlw	0
  1449  001FCA  B4D8               	btfsc	status,2,c
  1450                           
  1451                           ;main.c: 208: init_app_eeprom();
  1452  001FCC  EC91  F019         	call	_init_app_eeprom	;wreg free
  1453                           
  1454                           ;main.c: 210: }
  1455                           ;main.c: 213: init_app_ram();
  1456  001FD0  ECBD  F013         	call	_init_app_ram	;wreg free
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 216: vscp_init();
  1460  001FD4  ECA4  F020         	call	_vscp_init	;wreg free
  1461  001FD8                     l425:
  1462                           
  1463                           ; BSR set to: 0
  1464  001FD8  0004               	clrwdt		;# 
  1465                           
  1466                           ;main.c: 222: if ( ( vscp_initbtncnt > 250 ) &&
  1467                           ;main.c: 223: ( 0x01 != vscp_node_state ) ) {
  1468  001FDA  0EFA               	movlw	250
  1469  001FDC  0100               	movlb	0	; () banked
  1470  001FDE  657C               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1471  001FE0  D00E               	goto	l12458
  1472                           
  1473                           ; BSR set to: 0
  1474  001FE2  057F               	decf	_vscp_node_state& (0+255),w,b
  1475  001FE4  E00C               	bz	l12458
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;main.c: 226: vscp_nickname = 0xff;
  1479  001FE6  697E               	setf	_vscp_nickname& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;main.c: 227: (Busy_eep(), Write_b_eep(0x01,0xff));
  1483  001FE8  EC55  F023         	call	_Busy_eep	;wreg free
  1484  001FEC  6A09               	clrf	?_Write_b_eep+1,c
  1485  001FEE  0E01               	movlw	1
  1486  001FF0  6E08               	movwf	?_Write_b_eep,c
  1487  001FF2  0EFF               	movlw	255
  1488  001FF4  680A               	setf	?_Write_b_eep+2,c
  1489  001FF6  EC28  F021         	call	_Write_b_eep	;wreg free
  1490                           
  1491                           ;main.c: 228: vscp_init();
  1492  001FFA  ECA4  F020         	call	_vscp_init	;wreg free
  1493  001FFE                     l12458:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 230: }
  1497                           ;main.c: 233: vscp_imsg.flags = 0;
  1498  001FFE  6B97               	clrf	_vscp_imsg& (0+255),b
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 234: vscp_getEvent();
  1502  002000  ECB2  F021         	call	_vscp_getEvent	;wreg free
  1503                           
  1504                           ;main.c: 236: switch ( vscp_node_state ) {
  1505  002004  D193               	goto	l12628
  1506  002006                     l12462:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 241: if (0xff == vscp_nickname) {
  1510  002006  297E               	incf	_vscp_nickname& (0+255),w,b
  1511  002008  E103               	bnz	l12466
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 243: vscp_node_state = 0x01;
  1515  00200A  0E01               	movlw	1
  1516  00200C  6F7F               	movwf	_vscp_node_state& (0+255),b
  1517                           
  1518                           ;main.c: 244: }
  1519  00200E  D19E               	goto	l12630
  1520  002010                     l12466:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;main.c: 245: else {
  1524                           ;main.c: 247: vscp_node_state = 0x03;
  1525  002010  0E03               	movlw	3
  1526  002012  6F7F               	movwf	_vscp_node_state& (0+255),b
  1527  002014                     l12468:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 248: vscp_goActiveState();
  1531  002014  EC6C  F022         	call	_vscp_goActiveState	;wreg free
  1532  002018  D199               	goto	l12630
  1533  00201A                     l12470:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 253: vscp_handleProbeState();
  1537  00201A  ECDA  F01E         	call	_vscp_handleProbeState	;wreg free
  1538                           
  1539                           ;main.c: 254: break;
  1540  00201E  D196               	goto	l12630
  1541  002020                     l434:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 263: if (vscp_imsg.flags & 0x80) {
  1545  002020  AF97               	btfss	_vscp_imsg& (0+255),7,b
  1546  002022  D008               	goto	l12480
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 265: if ( 0 == vscp_imsg.vscp_class ) {
  1550  002024  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  1551  002026  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1552  002028  E103               	bnz	l12478
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;main.c: 268: vscp_handleProtocolEvent();
  1556  00202A  ECD4  F00C         	call	_vscp_handleProtocolEvent	;wreg free
  1557                           
  1558                           ;main.c: 270: }
  1559  00202E  D002               	goto	l12480
  1560  002030                     l12478:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 271: else {
  1564                           ;main.c: 272: doDM();
  1565  002030  EC14  F015         	call	_doDM	;wreg free
  1566  002034                     l12480:
  1567                           
  1568                           ;main.c: 273: }
  1569                           ;main.c: 275: }
  1570                           ;main.c: 277: if ( measurement_clock_10ms >= 10 ) {
  1571  002034  0E0A               	movlw	10
  1572  002036  0100               	movlb	0	; () banked
  1573  002038  5D60               	subwf	_measurement_clock_10ms& (0+255),w,b	;volatile
  1574  00203A  0E00               	movlw	0
  1575  00203C  5961               	subwfb	(_measurement_clock_10ms+1)& (0+255),w,b	;volatile
  1576  00203E  0E00               	movlw	0
  1577  002040  5962               	subwfb	(_measurement_clock_10ms+2)& (0+255),w,b	;volatile
  1578  002042  0E00               	movlw	0
  1579  002044  5963               	subwfb	(_measurement_clock_10ms+3)& (0+255),w,b	;volatile
  1580  002046  E201 D181          	bnc	l12630
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 279: uint8_t dir =
  1584                           ;main.c: 280: ( Read_b_eep(0x43 + 12) << 8 ) +
  1585                           ;main.c: 282: Read_b_eep(0x43 + 13);
  1586  00204A  6A09               	clrf	?_Read_b_eep+1,c
  1587  00204C  0E4F               	movlw	79
  1588  00204E  6E08               	movwf	?_Read_b_eep,c
  1589  002050  EC21  F023         	call	_Read_b_eep	;wreg free
  1590  002054  6A09               	clrf	?_Read_b_eep+1,c
  1591  002056  0E50               	movlw	80
  1592  002058  6E08               	movwf	?_Read_b_eep,c
  1593  00205A  EC21  F023         	call	_Read_b_eep	;wreg free
  1594  00205E  0101               	movlb	1	; () banked
  1595  002060  6F16               	movwf	main@dir& (0+255),b
  1596                           
  1597                           ; BSR set to: 1
  1598                           ;main.c: 285: measurement_clock_10ms = 0;
  1599  002062  0100               	movlb	0	; () banked
  1600  002064  6B60               	clrf	_measurement_clock_10ms& (0+255),b	;volatile
  1601  002066  6B61               	clrf	(_measurement_clock_10ms+1)& (0+255),b	;volatile
  1602  002068  6B62               	clrf	(_measurement_clock_10ms+2)& (0+255),b	;volatile
  1603  00206A  6B63               	clrf	(_measurement_clock_10ms+3)& (0+255),b	;volatile
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 287: if ( ( dir & ( 1 << current_debounce ) ) &&
  1607                           ;main.c: 288: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1608                           ;main.c: 291: 0x40 ) &&
  1609                           ;main.c: 292: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1610                           ;main.c: 295: 0x80 ) ) {
  1611  00206C  C075  F114         	movff	_current_debounce,??_main
  1612  002070  0E01               	movlw	1
  1613  002072  0101               	movlb	1	; () banked
  1614  002074  6F15               	movwf	(??_main+1)& (0+255),b
  1615  002076  2B14               	incf	??_main& (0+255),f,b
  1616  002078  D002               	goto	u16084
  1617  00207A                     u16085:
  1618  00207A  90D8               	bcf	status,0,c
  1619  00207C  3715               	rlcf	(??_main+1)& (0+255),f,b
  1620  00207E                     u16084:
  1621  00207E  2F14               	decfsz	??_main& (0+255),f,b
  1622  002080  D7FC               	goto	u16085
  1623  002082  5115               	movf	(??_main+1)& (0+255),w,b
  1624  002084  1516               	andwf	main@dir& (0+255),w,b
  1625  002086  E101 D145          	bz	l12618
  1626                           
  1627                           ; BSR set to: 1
  1628  00208A  0E65               	movlw	101
  1629  00208C  D9A1               	call	PL98	;call to abstracted procedure
  1630  00208E  EC21  F023         	call	_Read_b_eep	;wreg free
  1631  002092  0101               	movlb	1	; () banked
  1632  002094  6F14               	movwf	??_main& (0+255),b
  1633  002096  AD14               	btfss	??_main& (0+255),6,b
  1634  002098  D13D               	goto	l12618
  1635                           
  1636                           ; BSR set to: 1
  1637  00209A  0E65               	movlw	101
  1638  00209C  D999               	call	PL98	;call to abstracted procedure
  1639  00209E  EC21  F023         	call	_Read_b_eep	;wreg free
  1640  0020A2  0101               	movlb	1	; () banked
  1641  0020A4  6F14               	movwf	??_main& (0+255),b
  1642  0020A6  AF14               	btfss	??_main& (0+255),7,b
  1643  0020A8  D135               	goto	l12618
  1644                           
  1645                           ; BSR set to: 1
  1646  0020AA  F000               	nop		;# 
  1647                           
  1648                           ;main.c: 297: switch (current_debounce) {
  1649  0020AC  D116               	goto	l12616
  1650  0020AE                     l441:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 300: if (!PORTBbits.RB0) {
  1654  0020AE  B081               	btfsc	3969,0,c	;volatile
  1655  0020B0  D019               	goto	l12504
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 301: debounce_cnt[ current_debounce ]++;
  1659  0020B2  5175               	movf	_current_debounce& (0+255),w,b
  1660                           
  1661                           ;main.c: 302: if (debounce_cnt[ current_debounce ] > 3) {
  1662  0020B4  D97D               	call	PL8	;call to abstracted procedure
  1663  0020B6  64DF               	cpfsgt	indf2,c
  1664  0020B8  D12D               	goto	l12618
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 304: debounce_cnt[ current_debounce ] = 0;
  1668  0020BA  5175               	movf	_current_debounce& (0+255),w,b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 307: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1672                           ;main.c: 310: 0x04) {
  1673  0020BC  D96E               	call	PL4	;call to abstracted procedure
  1674  0020BE  EC21  F023         	call	_Read_b_eep	;wreg free
  1675  0020C2  0101               	movlb	1	; () banked
  1676  0020C4  6F14               	movwf	??_main& (0+255),b
  1677  0020C6  A514               	btfss	??_main& (0+255),2,b
  1678  0020C8  D009               	goto	l12502
  1679                           
  1680                           ; BSR set to: 1
  1681                           ;main.c: 311: SendInformationEvent(current_debounce,
  1682                           ;main.c: 312: 20,
  1683                           ;main.c: 313: 3);
  1684  0020CA  0E14               	movlw	20
  1685  0020CC  0100               	movlb	0	; () banked
  1686  0020CE  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1687  0020D0  0E03               	movlw	3
  1688  0020D2  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1689  0020D4  5175               	movf	_current_debounce& (0+255),w,b
  1690  0020D6  EC54  F020         	call	_SendInformationEvent
  1691                           
  1692                           ;main.c: 314: } else {
  1693  0020DA  D11C               	goto	l12618
  1694  0020DC                     l12502:
  1695                           
  1696                           ; BSR set to: 1
  1697                           ;main.c: 315: SendInformationEvent(current_debounce,
  1698                           ;main.c: 316: 30,
  1699                           ;main.c: 317: 5);
  1700  0020DC  D972               	call	PL18	;call to abstracted procedure
  1701  0020DE  EC54  F020         	call	_SendInformationEvent
  1702  0020E2  D118               	goto	l12618
  1703  0020E4                     l12504:
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 321: debounce_cnt[ current_debounce ] = 0;
  1707  0020E4  5175               	movf	_current_debounce& (0+255),w,b
  1708  0020E6  0FB2               	addlw	low _debounce_cnt
  1709  0020E8  6ED9               	movwf	fsr2l,c
  1710  0020EA  6ADA               	clrf	fsr2h,c
  1711  0020EC  6ADF               	clrf	indf2,c
  1712  0020EE  D112               	goto	l12618
  1713  0020F0                     l448:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 326: if (!PORTBbits.RB1) {
  1717  0020F0  B281               	btfsc	3969,1,c	;volatile
  1718  0020F2  D7F8               	goto	l12504
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 327: debounce_cnt[ current_debounce ]++;
  1722  0020F4  5175               	movf	_current_debounce& (0+255),w,b
  1723                           
  1724                           ;main.c: 328: if (debounce_cnt[ current_debounce ] > 3) {
  1725  0020F6  D95C               	call	PL8	;call to abstracted procedure
  1726  0020F8  64DF               	cpfsgt	indf2,c
  1727  0020FA  D10C               	goto	l12618
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 330: debounce_cnt[ current_debounce ] = 0;
  1731  0020FC  5175               	movf	_current_debounce& (0+255),w,b
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 333: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1735                           ;main.c: 336: 0x04) {
  1736  0020FE  D94D               	call	PL4	;call to abstracted procedure
  1737  002100  EC21  F023         	call	_Read_b_eep	;wreg free
  1738  002104  0101               	movlb	1	; () banked
  1739  002106  6F14               	movwf	??_main& (0+255),b
  1740  002108  A514               	btfss	??_main& (0+255),2,b
  1741  00210A  D009               	goto	l12514
  1742                           
  1743                           ; BSR set to: 1
  1744                           ;main.c: 337: SendInformationEvent(current_debounce,
  1745                           ;main.c: 338: 20,
  1746                           ;main.c: 339: 3);
  1747  00210C  0E14               	movlw	20
  1748  00210E  0100               	movlb	0	; () banked
  1749  002110  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1750  002112  0E03               	movlw	3
  1751  002114  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1752  002116  5175               	movf	_current_debounce& (0+255),w,b
  1753  002118  EC54  F020         	call	_SendInformationEvent
  1754                           
  1755                           ;main.c: 340: } else {
  1756  00211C  D0FB               	goto	l12618
  1757  00211E                     l12514:
  1758                           
  1759                           ; BSR set to: 1
  1760                           ;main.c: 341: SendInformationEvent(current_debounce,
  1761                           ;main.c: 342: 30,
  1762                           ;main.c: 343: 5);
  1763  00211E  D951               	call	PL18	;call to abstracted procedure
  1764  002120  EC54  F020         	call	_SendInformationEvent
  1765  002124  D0F7               	goto	l12618
  1766  002126                     l454:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 352: if (!PORTCbits.RC3) {
  1770  002126  B682               	btfsc	3970,3,c	;volatile
  1771  002128  D7DD               	goto	l12504
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 353: debounce_cnt[ current_debounce ]++;
  1775  00212A  5175               	movf	_current_debounce& (0+255),w,b
  1776                           
  1777                           ;main.c: 354: if (debounce_cnt[ current_debounce ] > 3) {
  1778  00212C  D941               	call	PL8	;call to abstracted procedure
  1779  00212E  64DF               	cpfsgt	indf2,c
  1780  002130  D0F1               	goto	l12618
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 356: debounce_cnt[ current_debounce ] = 0;
  1784  002132  5175               	movf	_current_debounce& (0+255),w,b
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 359: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1788                           ;main.c: 362: 0x04) {
  1789  002134  D932               	call	PL4	;call to abstracted procedure
  1790  002136  EC21  F023         	call	_Read_b_eep	;wreg free
  1791  00213A  0101               	movlb	1	; () banked
  1792  00213C  6F14               	movwf	??_main& (0+255),b
  1793  00213E  A514               	btfss	??_main& (0+255),2,b
  1794  002140  D009               	goto	l12526
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main.c: 363: SendInformationEvent(current_debounce,
  1798                           ;main.c: 364: 20,
  1799                           ;main.c: 365: 3);
  1800  002142  0E14               	movlw	20
  1801  002144  0100               	movlb	0	; () banked
  1802  002146  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1803  002148  0E03               	movlw	3
  1804  00214A  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1805  00214C  5175               	movf	_current_debounce& (0+255),w,b
  1806  00214E  EC54  F020         	call	_SendInformationEvent
  1807                           
  1808                           ;main.c: 366: } else {
  1809  002152  D0E0               	goto	l12618
  1810  002154                     l12526:
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;main.c: 367: SendInformationEvent(current_debounce,
  1814                           ;main.c: 368: 30,
  1815                           ;main.c: 369: 5);
  1816  002154  D936               	call	PL18	;call to abstracted procedure
  1817  002156  EC54  F020         	call	_SendInformationEvent
  1818  00215A  D0DC               	goto	l12618
  1819  00215C                     l460:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 378: if (!PORTCbits.RC4) {
  1823  00215C  B882               	btfsc	3970,4,c	;volatile
  1824  00215E  D7C2               	goto	l12504
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 379: debounce_cnt[ current_debounce ]++;
  1828  002160  5175               	movf	_current_debounce& (0+255),w,b
  1829                           
  1830                           ;main.c: 380: if (debounce_cnt[ current_debounce ] > 3) {
  1831  002162  D926               	call	PL8	;call to abstracted procedure
  1832  002164  64DF               	cpfsgt	indf2,c
  1833  002166  D0D6               	goto	l12618
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 382: debounce_cnt[ current_debounce ] = 0;
  1837  002168  5175               	movf	_current_debounce& (0+255),w,b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 385: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1841                           ;main.c: 388: 0x04) {
  1842  00216A  D917               	call	PL4	;call to abstracted procedure
  1843  00216C  EC21  F023         	call	_Read_b_eep	;wreg free
  1844  002170  0101               	movlb	1	; () banked
  1845  002172  6F14               	movwf	??_main& (0+255),b
  1846  002174  A514               	btfss	??_main& (0+255),2,b
  1847  002176  D009               	goto	l12538
  1848                           
  1849                           ; BSR set to: 1
  1850                           ;main.c: 389: SendInformationEvent(current_debounce,
  1851                           ;main.c: 390: 20,
  1852                           ;main.c: 391: 3);
  1853  002178  0E14               	movlw	20
  1854  00217A  0100               	movlb	0	; () banked
  1855  00217C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1856  00217E  0E03               	movlw	3
  1857  002180  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1858  002182  5175               	movf	_current_debounce& (0+255),w,b
  1859  002184  EC54  F020         	call	_SendInformationEvent
  1860                           
  1861                           ;main.c: 392: } else {
  1862  002188  D0C5               	goto	l12618
  1863  00218A                     l12538:
  1864                           
  1865                           ; BSR set to: 1
  1866                           ;main.c: 393: SendInformationEvent(current_debounce,
  1867                           ;main.c: 394: 30,
  1868                           ;main.c: 395: 5);
  1869  00218A  D91B               	call	PL18	;call to abstracted procedure
  1870  00218C  EC54  F020         	call	_SendInformationEvent
  1871  002190  D0C1               	goto	l12618
  1872  002192                     l466:
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;main.c: 404: if (!PORTCbits.RC5) {
  1876  002192  BA82               	btfsc	3970,5,c	;volatile
  1877  002194  D7A7               	goto	l12504
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 405: debounce_cnt[ current_debounce ]++;
  1881  002196  5175               	movf	_current_debounce& (0+255),w,b
  1882                           
  1883                           ;main.c: 406: if (debounce_cnt[ current_debounce ] > 3) {
  1884  002198  D90B               	call	PL8	;call to abstracted procedure
  1885  00219A  64DF               	cpfsgt	indf2,c
  1886  00219C  D0BB               	goto	l12618
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 408: debounce_cnt[ current_debounce ] = 0;
  1890  00219E  5175               	movf	_current_debounce& (0+255),w,b
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 411: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1894                           ;main.c: 414: 0x04) {
  1895  0021A0  D8FC               	call	PL4	;call to abstracted procedure
  1896  0021A2  EC21  F023         	call	_Read_b_eep	;wreg free
  1897  0021A6  0101               	movlb	1	; () banked
  1898  0021A8  6F14               	movwf	??_main& (0+255),b
  1899  0021AA  A514               	btfss	??_main& (0+255),2,b
  1900  0021AC  D009               	goto	l12550
  1901                           
  1902                           ; BSR set to: 1
  1903                           ;main.c: 415: SendInformationEvent(current_debounce,
  1904                           ;main.c: 416: 20,
  1905                           ;main.c: 417: 3);
  1906  0021AE  0E14               	movlw	20
  1907  0021B0  0100               	movlb	0	; () banked
  1908  0021B2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1909  0021B4  0E03               	movlw	3
  1910  0021B6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1911  0021B8  5175               	movf	_current_debounce& (0+255),w,b
  1912  0021BA  EC54  F020         	call	_SendInformationEvent
  1913                           
  1914                           ;main.c: 418: } else {
  1915  0021BE  D0AA               	goto	l12618
  1916  0021C0                     l12550:
  1917                           
  1918                           ; BSR set to: 1
  1919                           ;main.c: 419: SendInformationEvent(current_debounce,
  1920                           ;main.c: 420: 30,
  1921                           ;main.c: 421: 5);
  1922  0021C0  D900               	call	PL18	;call to abstracted procedure
  1923  0021C2  EC54  F020         	call	_SendInformationEvent
  1924  0021C6  D0A6               	goto	l12618
  1925  0021C8                     l472:
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 430: if (!PORTCbits.RC6) {
  1929  0021C8  BC82               	btfsc	3970,6,c	;volatile
  1930  0021CA  D78C               	goto	l12504
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 431: debounce_cnt[ current_debounce ]++;
  1934  0021CC  5175               	movf	_current_debounce& (0+255),w,b
  1935                           
  1936                           ;main.c: 432: if (debounce_cnt[ current_debounce ] > 3) {
  1937  0021CE  D8F0               	call	PL8	;call to abstracted procedure
  1938  0021D0  64DF               	cpfsgt	indf2,c
  1939  0021D2  D0A0               	goto	l12618
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;main.c: 434: debounce_cnt[ current_debounce ] = 0;
  1943  0021D4  5175               	movf	_current_debounce& (0+255),w,b
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 437: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1947                           ;main.c: 440: 0x04) {
  1948  0021D6  D8E1               	call	PL4	;call to abstracted procedure
  1949  0021D8  EC21  F023         	call	_Read_b_eep	;wreg free
  1950  0021DC  0101               	movlb	1	; () banked
  1951  0021DE  6F14               	movwf	??_main& (0+255),b
  1952  0021E0  A514               	btfss	??_main& (0+255),2,b
  1953  0021E2  D009               	goto	l12562
  1954                           
  1955                           ; BSR set to: 1
  1956                           ;main.c: 441: SendInformationEvent(current_debounce,
  1957                           ;main.c: 442: 20,
  1958                           ;main.c: 443: 3);
  1959  0021E4  0E14               	movlw	20
  1960  0021E6  0100               	movlb	0	; () banked
  1961  0021E8  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1962  0021EA  0E03               	movlw	3
  1963  0021EC  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1964  0021EE  5175               	movf	_current_debounce& (0+255),w,b
  1965  0021F0  EC54  F020         	call	_SendInformationEvent
  1966                           
  1967                           ;main.c: 444: } else {
  1968  0021F4  D08F               	goto	l12618
  1969  0021F6                     l12562:
  1970                           
  1971                           ; BSR set to: 1
  1972                           ;main.c: 445: SendInformationEvent(current_debounce,
  1973                           ;main.c: 446: 30,
  1974                           ;main.c: 447: 5);
  1975  0021F6  D8E5               	call	PL18	;call to abstracted procedure
  1976  0021F8  EC54  F020         	call	_SendInformationEvent
  1977  0021FC  D08B               	goto	l12618
  1978  0021FE                     l478:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 456: if (!PORTCbits.RC7) {
  1982  0021FE  BE82               	btfsc	3970,7,c	;volatile
  1983  002200  D771               	goto	l12504
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 457: debounce_cnt[ current_debounce ]++;
  1987  002202  5175               	movf	_current_debounce& (0+255),w,b
  1988                           
  1989                           ;main.c: 458: if (debounce_cnt[ current_debounce ] > 3) {
  1990  002204  D8D5               	call	PL8	;call to abstracted procedure
  1991  002206  64DF               	cpfsgt	indf2,c
  1992  002208  D085               	goto	l12618
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 460: debounce_cnt[ current_debounce ] = 0;
  1996  00220A  5175               	movf	_current_debounce& (0+255),w,b
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;main.c: 463: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2000                           ;main.c: 466: 0x04) {
  2001  00220C  D8C6               	call	PL4	;call to abstracted procedure
  2002  00220E  EC21  F023         	call	_Read_b_eep	;wreg free
  2003  002212  0101               	movlb	1	; () banked
  2004  002214  6F14               	movwf	??_main& (0+255),b
  2005  002216  A514               	btfss	??_main& (0+255),2,b
  2006  002218  D009               	goto	l12574
  2007                           
  2008                           ; BSR set to: 1
  2009                           ;main.c: 467: SendInformationEvent(current_debounce,
  2010                           ;main.c: 468: 20,
  2011                           ;main.c: 469: 3);
  2012  00221A  0E14               	movlw	20
  2013  00221C  0100               	movlb	0	; () banked
  2014  00221E  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2015  002220  0E03               	movlw	3
  2016  002222  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2017  002224  5175               	movf	_current_debounce& (0+255),w,b
  2018  002226  EC54  F020         	call	_SendInformationEvent
  2019                           
  2020                           ;main.c: 470: } else {
  2021  00222A  D074               	goto	l12618
  2022  00222C                     l12574:
  2023                           
  2024                           ; BSR set to: 1
  2025                           ;main.c: 471: SendInformationEvent(current_debounce,
  2026                           ;main.c: 472: 30,
  2027                           ;main.c: 473: 5);
  2028  00222C  D8CA               	call	PL18	;call to abstracted procedure
  2029  00222E  EC54  F020         	call	_SendInformationEvent
  2030  002232  D070               	goto	l12618
  2031  002234                     l484:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;main.c: 482: if (!PORTAbits.RA2) {
  2035  002234  B480               	btfsc	3968,2,c	;volatile
  2036  002236  D756               	goto	l12504
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;main.c: 483: debounce_cnt[ current_debounce ]++;
  2040  002238  5175               	movf	_current_debounce& (0+255),w,b
  2041                           
  2042                           ;main.c: 484: if (debounce_cnt[ current_debounce ] > 3) {
  2043  00223A  D8BA               	call	PL8	;call to abstracted procedure
  2044  00223C  64DF               	cpfsgt	indf2,c
  2045  00223E  D06A               	goto	l12618
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 486: debounce_cnt[ current_debounce ] = 0;
  2049  002240  5175               	movf	_current_debounce& (0+255),w,b
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 489: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2053                           ;main.c: 492: 0x04) {
  2054  002242  D8AB               	call	PL4	;call to abstracted procedure
  2055  002244  EC21  F023         	call	_Read_b_eep	;wreg free
  2056  002248  0101               	movlb	1	; () banked
  2057  00224A  6F14               	movwf	??_main& (0+255),b
  2058  00224C  A514               	btfss	??_main& (0+255),2,b
  2059  00224E  D009               	goto	l12586
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;main.c: 493: SendInformationEvent(current_debounce,
  2063                           ;main.c: 494: 20,
  2064                           ;main.c: 495: 3);
  2065  002250  0E14               	movlw	20
  2066  002252  0100               	movlb	0	; () banked
  2067  002254  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2068  002256  0E03               	movlw	3
  2069  002258  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2070  00225A  5175               	movf	_current_debounce& (0+255),w,b
  2071  00225C  EC54  F020         	call	_SendInformationEvent
  2072                           
  2073                           ;main.c: 496: } else {
  2074  002260  D059               	goto	l12618
  2075  002262                     l12586:
  2076                           
  2077                           ; BSR set to: 1
  2078                           ;main.c: 497: SendInformationEvent(current_debounce,
  2079                           ;main.c: 498: 30,
  2080                           ;main.c: 499: 5);
  2081  002262  D8AF               	call	PL18	;call to abstracted procedure
  2082  002264  EC54  F020         	call	_SendInformationEvent
  2083  002268  D055               	goto	l12618
  2084  00226A                     l490:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 508: if (!PORTAbits.RA1) {
  2088  00226A  B280               	btfsc	3968,1,c	;volatile
  2089  00226C  D73B               	goto	l12504
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 509: debounce_cnt[ current_debounce ]++;
  2093  00226E  5175               	movf	_current_debounce& (0+255),w,b
  2094                           
  2095                           ;main.c: 510: if (debounce_cnt[ current_debounce ] > 3) {
  2096  002270  D89F               	call	PL8	;call to abstracted procedure
  2097  002272  64DF               	cpfsgt	indf2,c
  2098  002274  D04F               	goto	l12618
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;main.c: 512: debounce_cnt[ current_debounce ] = 0;
  2102  002276  5175               	movf	_current_debounce& (0+255),w,b
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 515: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2106                           ;main.c: 518: 0x04) {
  2107  002278  D890               	call	PL4	;call to abstracted procedure
  2108  00227A  EC21  F023         	call	_Read_b_eep	;wreg free
  2109  00227E  0101               	movlb	1	; () banked
  2110  002280  6F14               	movwf	??_main& (0+255),b
  2111  002282  A514               	btfss	??_main& (0+255),2,b
  2112  002284  D009               	goto	l12598
  2113                           
  2114                           ; BSR set to: 1
  2115                           ;main.c: 519: SendInformationEvent(current_debounce,
  2116                           ;main.c: 520: 20,
  2117                           ;main.c: 521: 3);
  2118  002286  0E14               	movlw	20
  2119  002288  0100               	movlb	0	; () banked
  2120  00228A  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2121  00228C  0E03               	movlw	3
  2122  00228E  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2123  002290  5175               	movf	_current_debounce& (0+255),w,b
  2124  002292  EC54  F020         	call	_SendInformationEvent
  2125                           
  2126                           ;main.c: 522: } else {
  2127  002296  D03E               	goto	l12618
  2128  002298                     l12598:
  2129                           
  2130                           ; BSR set to: 1
  2131                           ;main.c: 523: SendInformationEvent(current_debounce,
  2132                           ;main.c: 524: 30,
  2133                           ;main.c: 525: 5);
  2134  002298  D894               	call	PL18	;call to abstracted procedure
  2135  00229A  EC54  F020         	call	_SendInformationEvent
  2136  00229E  D03A               	goto	l12618
  2137  0022A0                     l496:
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 534: if (!PORTAbits.RA0) {
  2141  0022A0  B080               	btfsc	3968,0,c	;volatile
  2142  0022A2  D720               	goto	l12504
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;main.c: 535: debounce_cnt[ current_debounce ]++;
  2146  0022A4  5175               	movf	_current_debounce& (0+255),w,b
  2147                           
  2148                           ;main.c: 536: if (debounce_cnt[ current_debounce ] > 3) {
  2149  0022A6  D884               	call	PL8	;call to abstracted procedure
  2150  0022A8  64DF               	cpfsgt	indf2,c
  2151  0022AA  D034               	goto	l12618
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;main.c: 538: debounce_cnt[ current_debounce ] = 0;
  2155  0022AC  5175               	movf	_current_debounce& (0+255),w,b
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 541: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2159                           ;main.c: 544: 0x04) {
  2160  0022AE  D875               	call	PL4	;call to abstracted procedure
  2161  0022B0  EC21  F023         	call	_Read_b_eep	;wreg free
  2162  0022B4  0101               	movlb	1	; () banked
  2163  0022B6  6F14               	movwf	??_main& (0+255),b
  2164  0022B8  A514               	btfss	??_main& (0+255),2,b
  2165  0022BA  D009               	goto	l12610
  2166                           
  2167                           ; BSR set to: 1
  2168                           ;main.c: 545: SendInformationEvent(current_debounce,
  2169                           ;main.c: 546: 20,
  2170                           ;main.c: 547: 3);
  2171  0022BC  0E14               	movlw	20
  2172  0022BE  0100               	movlb	0	; () banked
  2173  0022C0  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2174  0022C2  0E03               	movlw	3
  2175  0022C4  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2176  0022C6  5175               	movf	_current_debounce& (0+255),w,b
  2177  0022C8  EC54  F020         	call	_SendInformationEvent
  2178                           
  2179                           ;main.c: 548: } else {
  2180  0022CC  D023               	goto	l12618
  2181  0022CE                     l12610:
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;main.c: 549: SendInformationEvent(current_debounce,
  2185                           ;main.c: 550: 30,
  2186                           ;main.c: 551: 5);
  2187  0022CE  D879               	call	PL18	;call to abstracted procedure
  2188  0022D0  EC54  F020         	call	_SendInformationEvent
  2189  0022D4  D01F               	goto	l12618
  2190  0022D6                     l502:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 560: current_debounce = 0;
  2194  0022D6  6B75               	clrf	_current_debounce& (0+255),b
  2195                           
  2196                           ;main.c: 561: break;
  2197  0022D8  D01D               	goto	l12618
  2198  0022DA                     l12616:
  2199  0022DA  0100               	movlb	0	; () banked
  2200  0022DC  5175               	movf	_current_debounce& (0+255),w,b
  2201                           
  2202                           ; Switch size 1, requested type "space"
  2203                           ; Number of cases is 10, Range of values is 0 to 9
  2204                           ; switch strategies available:
  2205                           ; Name         Instructions Cycles
  2206                           ; simple_byte           31    16 (average)
  2207                           ;	Chosen strategy is simple_byte
  2208  0022DE  E101 D6E6          	bz	l441
  2209  0022E2  0A01               	xorlw	1	; case 1
  2210  0022E4  E101 D704          	bz	l448
  2211  0022E8  0A03               	xorlw	3	; case 2
  2212  0022EA  E101 D71C          	bz	l454
  2213  0022EE  0A01               	xorlw	1	; case 3
  2214  0022F0  E101 D734          	bz	l460
  2215  0022F4  0A07               	xorlw	7	; case 4
  2216  0022F6  E101 D74C          	bz	l466
  2217  0022FA  0A01               	xorlw	1	; case 5
  2218  0022FC  E101 D764          	bz	l472
  2219  002300  0A03               	xorlw	3	; case 6
  2220  002302  E101 D77C          	bz	l478
  2221  002306  0A01               	xorlw	1	; case 7
  2222  002308  E095               	bz	l484
  2223  00230A  0A0F               	xorlw	15	; case 8
  2224  00230C  E0AE               	bz	l490
  2225  00230E  0A01               	xorlw	1	; case 9
  2226  002310  E0C7               	bz	l496
  2227  002312  D7E1               	goto	l502
  2228  002314                     l12618:
  2229                           
  2230                           ;main.c: 564: }
  2231                           ;main.c: 566: current_debounce++;
  2232  002314  0100               	movlb	0	; () banked
  2233  002316  2B75               	incf	_current_debounce& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 567: if ( current_debounce > 9 ) current_debounce = 0;
  2237  002318  0E09               	movlw	9
  2238  00231A  6575               	cpfsgt	_current_debounce& (0+255),b
  2239  00231C  D017               	goto	l12630
  2240                           
  2241                           ; BSR set to: 0
  2242  00231E  6B75               	clrf	_current_debounce& (0+255),b
  2243  002320  D015               	goto	l12630
  2244  002322                     l12624:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;main.c: 574: vscp_error();
  2248  002322  EC58  F023         	call	_vscp_error	;wreg free
  2249                           
  2250                           ;main.c: 575: break;
  2251  002326  D012               	goto	l12630
  2252  002328                     l505:
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;main.c: 578: vscp_node_state = 0x00;
  2256  002328  6B7F               	clrf	_vscp_node_state& (0+255),b
  2257                           
  2258                           ;main.c: 579: break;
  2259  00232A  D010               	goto	l12630
  2260  00232C                     l12628:
  2261  00232C  0100               	movlb	0	; () banked
  2262  00232E  517F               	movf	_vscp_node_state& (0+255),w,b
  2263                           
  2264                           ; Switch size 1, requested type "space"
  2265                           ; Number of cases is 5, Range of values is 0 to 4
  2266                           ; switch strategies available:
  2267                           ; Name         Instructions Cycles
  2268                           ; simple_byte           16     9 (average)
  2269                           ;	Chosen strategy is simple_byte
  2270  002330  E101 D669          	bz	l12462
  2271  002334  0A01               	xorlw	1	; case 1
  2272  002336  E101 D670          	bz	l12470
  2273  00233A  0A03               	xorlw	3	; case 2
  2274  00233C  E101 D66A          	bz	l12468
  2275  002340  0A01               	xorlw	1	; case 3
  2276  002342  E101 D66D          	bz	l434
  2277  002346  0A07               	xorlw	7	; case 4
  2278  002348  E0EC               	bz	l12624
  2279  00234A  D7EE               	goto	l505
  2280  00234C                     l12630:
  2281                           
  2282                           ;main.c: 584: if ( measurement_clock_sec > 1000 ) {
  2283  00234C  0EE9               	movlw	233
  2284  00234E  0100               	movlb	0	; () banked
  2285  002350  5D64               	subwf	_measurement_clock_sec& (0+255),w,b	;volatile
  2286  002352  0E03               	movlw	3
  2287  002354  5965               	subwfb	(_measurement_clock_sec+1)& (0+255),w,b	;volatile
  2288  002356  0E00               	movlw	0
  2289  002358  5966               	subwfb	(_measurement_clock_sec+2)& (0+255),w,b	;volatile
  2290  00235A  0E00               	movlw	0
  2291  00235C  5967               	subwfb	(_measurement_clock_sec+3)& (0+255),w,b	;volatile
  2292  00235E  E30C               	bnc	l12642
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;main.c: 586: measurement_clock_sec = 0;
  2296  002360  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  2297  002362  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  2298  002364  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  2299  002366  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 587: sendTimer++;
  2303  002368  2B79               	incf	_sendTimer& (0+255),f,b
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;main.c: 590: vscp_doOneSecondWork();
  2307  00236A  EC7D  F020         	call	_vscp_doOneSecondWork	;wreg free
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 594: if ( 0x03 == vscp_node_state ) {
  2311  00236E  517F               	movf	_vscp_node_state& (0+255),w,b
  2312  002370  0A03               	xorlw	3
  2313  002372  B4D8               	btfsc	status,2,c
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;main.c: 596: doApplicationOneSecondWork();
  2317  002374  ECA6  F009         	call	_doApplicationOneSecondWork	;wreg free
  2318  002378                     l12642:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;main.c: 597: }
  2322                           ;main.c: 599: }
  2323                           ;main.c: 602: if ( seconds > 59 ) {
  2324  002378  0E3B               	movlw	59
  2325  00237A  6578               	cpfsgt	_seconds& (0+255),b
  2326  00237C  D00B               	goto	l12658
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;main.c: 604: seconds = 0;
  2330  00237E  6B78               	clrf	_seconds& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;main.c: 605: minutes++;
  2334  002380  2B77               	incf	_minutes& (0+255),f,b
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 607: if ( minutes > 59 ) {
  2338  002382  0E3B               	movlw	59
  2339  002384  6577               	cpfsgt	_minutes& (0+255),b
  2340  002386  D002               	goto	l12654
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 608: minutes = 0;
  2344  002388  6B77               	clrf	_minutes& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;main.c: 609: hours++;
  2348  00238A  2B76               	incf	_hours& (0+255),f,b
  2349  00238C                     l12654:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;main.c: 610: }
  2353                           ;main.c: 612: if ( hours > 23 ) hours = 0;
  2354  00238C  0E17               	movlw	23
  2355  00238E  6576               	cpfsgt	_hours& (0+255),b
  2356  002390  D001               	goto	l12658
  2357                           
  2358                           ; BSR set to: 0
  2359  002392  6B76               	clrf	_hours& (0+255),b
  2360  002394                     l12658:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 614: }
  2364                           ;main.c: 616: doWork();
  2365  002394  EC5A  F023         	call	_doWork	;wreg free
  2366  002398  D61F               	goto	l425
  2367  00239A                     __end_of_main:
  2368                           	opt stack 0
  2369  00239A                     PL4:
  2370                           	opt stack 20
  2371  00239A  0FB2               	addlw	low _debounce_cnt
  2372  00239C  6ED9               	movwf	fsr2l,c
  2373  00239E  6ADA               	clrf	fsr2h,c
  2374  0023A0  6ADF               	clrf	indf2,c
  2375  0023A2  0E5B               	movlw	91
  2376  0023A4  2575               	addwf	_current_debounce& (0+255),w,b
  2377  0023A6  6E08               	movwf	?_Read_b_eep,c
  2378  0023A8  6A09               	clrf	?_Read_b_eep+1,c
  2379  0023AA  0E00               	movlw	0
  2380  0023AC  2209               	addwfc	?_Read_b_eep+1,f,c
  2381  0023AE  0C00               	retlw	0
  2382  0023B0                     __end_ofPL4:
  2383                           	opt stack 0
  2384  0023B0                     PL8:
  2385                           	opt stack 20
  2386  0023B0  0FB2               	addlw	low _debounce_cnt
  2387  0023B2  6ED9               	movwf	fsr2l,c
  2388  0023B4  6ADA               	clrf	fsr2h,c
  2389  0023B6  2ADF               	incf	indf2,f,c
  2390  0023B8  5175               	movf	_current_debounce& (0+255),w,b
  2391  0023BA  0FB2               	addlw	low _debounce_cnt
  2392  0023BC  6ED9               	movwf	fsr2l,c
  2393  0023BE  6ADA               	clrf	fsr2h,c
  2394  0023C0  0C03               	retlw	3
  2395  0023C2                     __end_ofPL8:
  2396                           	opt stack 0
  2397  0023C2                     PL18:
  2398                           	opt stack 20
  2399  0023C2  0E1E               	movlw	30
  2400  0023C4  0100               	movlb	0	; () banked
  2401  0023C6  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2402  0023C8  0E05               	movlw	5
  2403  0023CA  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2404  0023CC  5175               	movf	_current_debounce& (0+255),w,b
  2405  0023CE  0012               	return	
  2406  0023D0                     __end_ofPL18:
  2407                           	opt stack 0
  2408  0023D0                     PL98:
  2409                           	opt stack 20
  2410  0023D0  0100               	movlb	0	; () banked
  2411  0023D2  2575               	addwf	_current_debounce& (0+255),w,b
  2412  0023D4  6E08               	movwf	?_Read_b_eep,c
  2413  0023D6  6A09               	clrf	?_Read_b_eep+1,c
  2414  0023D8  0E00               	movlw	0
  2415  0023DA  2209               	addwfc	?_Read_b_eep+1,f,c
  2416  0023DC  0C00               	retlw	0
  2417  0023DE                     __end_ofPL98:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           intcon2	equ	0xFF1
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           indf1	equ	0xFE7
  2430                           fsr1h	equ	0xFE2
  2431                           fsr1l	equ	0xFE1
  2432                           indf2	equ	0xFDF
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           plusw2	equ	0xFDB
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _doWork *****************
  2441 ;; Defined at:
  2442 ;;		line 1396 in file "../main.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;		None               void
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : F/0
  2453 ;;		On exit  : F/0
  2454 ;;		Unchanged: F/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2456 ;;      Params:         0       0       0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0
  2459 ;;      Totals:         0       0       0       0       0       0       0
  2460 ;;Total ram usage:        0 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    2
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text1
  2471  0046B4                     __ptext1:
  2472                           	opt stack 0
  2473  0046B4                     _doWork:
  2474                           	opt stack 27
  2475                           
  2476                           ; BSR set to: 0
  2477                           
  2478                           ; BSR set to: 0
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;incstack = 0
  2482                           ;incstack = 0
  2483  0046B4  0012               	return	
  2484  0046B6                     __end_of_doWork:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           intcon2	equ	0xFF1
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           indf1	equ	0xFE7
  2497                           fsr1h	equ	0xFE2
  2498                           fsr1l	equ	0xFE1
  2499                           indf2	equ	0xFDF
  2500                           postinc2	equ	0xFDE
  2501                           postdec2	equ	0xFDD
  2502                           plusw2	equ	0xFDB
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function _doApplicationOneSecondWork *****************
  2508 ;; Defined at:
  2509 ;;		line 877 in file "../main.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  data            3   60[BANK0 ] unsigned char [3]
  2514 ;;  iodirections    2   58[BANK0 ] unsigned short 
  2515 ;;  i               1   66[BANK0 ] unsigned char 
  2516 ;;  ctrlreg         1   65[BANK0 ] unsigned char 
  2517 ;;  bOn             1   64[BANK0 ] enum E15660
  2518 ;;  bInput          1   63[BANK0 ] enum E15660
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : F/0
  2525 ;;		On exit  : F/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2528 ;;      Params:         0       0       0       0       0       0       0
  2529 ;;      Locals:         0       9       0       0       0       0       0
  2530 ;;      Temps:          0      36       0       0       0       0       0
  2531 ;;      Totals:         0      45       0       0       0       0       0
  2532 ;;Total ram usage:       45 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    8
  2535 ;; This function calls:
  2536 ;;		_Read_b_eep
  2537 ;;		_SendInformationEvent
  2538 ;;		_doActionOff
  2539 ;;		_sendVSCPFrame
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text2
  2546  00134C                     __ptext2:
  2547                           	opt stack 0
  2548  00134C                     _doApplicationOneSecondWork:
  2549                           	opt stack 21
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;main.c: 879: uint8_t i;
  2553                           ;main.c: 880: uint16_t iodirections;
  2554                           ;main.c: 881: uint8_t ctrlreg;
  2555                           ;main.c: 882: BOOL bOn = 0;
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;incstack = 0
  2559                           ;incstack = 0
  2560  00134C  6BFC               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 883: BOOL bInput;
  2564                           ;main.c: 886: iodirections = ( Read_b_eep(0x43 + 12) << 8 ) +
  2565                           ;main.c: 887: Read_b_eep(0x43 + 13);
  2566  00134E  6A09               	clrf	?_Read_b_eep+1,c
  2567  001350  0E50               	movlw	80
  2568  001352  6E08               	movwf	?_Read_b_eep,c
  2569  001354  EC21  F023         	call	_Read_b_eep	;wreg free
  2570  001358  0100               	movlb	0	; () banked
  2571  00135A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2572  00135C  6A09               	clrf	?_Read_b_eep+1,c
  2573  00135E  0E4F               	movlw	79
  2574  001360  6E08               	movwf	?_Read_b_eep,c
  2575  001362  EC21  F023         	call	_Read_b_eep	;wreg free
  2576  001366  0100               	movlb	0	; () banked
  2577  001368  6FD4               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2578  00136A  6BD3               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2579  00136C  51D2               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2580  00136E  25D3               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2581  001370  6FF6               	movwf	doApplicationOneSecondWork@iodirections& (0+255),b
  2582  001372  0E00               	movlw	0
  2583  001374  21D4               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2584  001376  6FF7               	movwf	(doApplicationOneSecondWork@iodirections+1)& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;main.c: 889: for ( i = 0; i < 10; i++ ) {
  2588  001378  6BFE               	clrf	doApplicationOneSecondWork@i& (0+255),b
  2589  00137A                     l13512:
  2590                           
  2591                           ; BSR set to: 0
  2592  00137A  0E09               	movlw	9
  2593  00137C  65FE               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  2594  00137E  D001               	goto	l13516
  2595  001380  D1D9               	goto	l13688
  2596  001382                     l13516:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 891: if ( iodirections & ( 1 << i ) ) {
  2600  001382  DB00               	call	PL38	;call to abstracted procedure
  2601  001384  D001               	goto	u17584
  2602  001386                     u17585:
  2603  001386  DB0C               	call	PL104	;call to abstracted procedure
  2604  001388                     u17584:
  2605  001388  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  2606  00138A  D7FD               	goto	u17585
  2607  00138C  51F6               	movf	doApplicationOneSecondWork@iodirections& (0+255),w,b
  2608  00138E  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2609  001390  51F7               	movf	(doApplicationOneSecondWork@iodirections+1)& (0+255),w,b
  2610  001392  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  2611  001394  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2612  001396  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2613  001398  E101 D0A8          	bz	l13594
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 896: ctrlreg = Read_b_eep(0x43 + 34 + i);
  2617  00139C  0E65               	movlw	101
  2618  00139E  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2619  0013A0  6E08               	movwf	?_Read_b_eep,c
  2620  0013A2  6A09               	clrf	?_Read_b_eep+1,c
  2621  0013A4  0E00               	movlw	0
  2622  0013A6  2209               	addwfc	?_Read_b_eep+1,f,c
  2623  0013A8  EC21  F023         	call	_Read_b_eep	;wreg free
  2624  0013AC  0100               	movlb	0	; () banked
  2625  0013AE  6FFD               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;main.c: 899: if ( !( ctrlreg & 0x80 ) ) continue;
  2629  0013B0  AFFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2630  0013B2  D1BD               	goto	l13684
  2631  0013B4  D032               	goto	l13546
  2632  0013B6                     l13524:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 904: bInput = PORTBbits.RB0;
  2636  0013B6  0E00               	movlw	0
  2637  0013B8  B081               	btfsc	3969,0,c	;volatile
  2638  0013BA  0E01               	movlw	1
  2639  0013BC  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2640                           
  2641                           ;main.c: 905: break;
  2642  0013BE  D041               	goto	l551
  2643  0013C0                     l13526:
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;main.c: 908: bInput = PORTBbits.RB1;
  2647  0013C0  0E00               	movlw	0
  2648  0013C2  B281               	btfsc	3969,1,c	;volatile
  2649  0013C4  0E01               	movlw	1
  2650  0013C6  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2651                           
  2652                           ;main.c: 909: break;
  2653  0013C8  D03C               	goto	l551
  2654  0013CA                     l13528:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 912: bInput = PORTCbits.RC3;
  2658  0013CA  0E00               	movlw	0
  2659  0013CC  B682               	btfsc	3970,3,c	;volatile
  2660  0013CE  0E01               	movlw	1
  2661  0013D0  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2662                           
  2663                           ;main.c: 913: break;
  2664  0013D2  D037               	goto	l551
  2665  0013D4                     l13530:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;main.c: 916: bInput = PORTCbits.RC4;
  2669  0013D4  0E00               	movlw	0
  2670  0013D6  B882               	btfsc	3970,4,c	;volatile
  2671  0013D8  0E01               	movlw	1
  2672  0013DA  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2673                           
  2674                           ;main.c: 917: break;
  2675  0013DC  D032               	goto	l551
  2676  0013DE                     l13532:
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 920: bInput = PORTCbits.RC5;
  2680  0013DE  0E00               	movlw	0
  2681  0013E0  BA82               	btfsc	3970,5,c	;volatile
  2682  0013E2  0E01               	movlw	1
  2683  0013E4  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2684                           
  2685                           ;main.c: 921: break;
  2686  0013E6  D02D               	goto	l551
  2687  0013E8                     l13534:
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 924: bInput = PORTCbits.RC6;
  2691  0013E8  0E00               	movlw	0
  2692  0013EA  BC82               	btfsc	3970,6,c	;volatile
  2693  0013EC  0E01               	movlw	1
  2694  0013EE  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2695                           
  2696                           ;main.c: 925: break;
  2697  0013F0  D028               	goto	l551
  2698  0013F2                     l13536:
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;main.c: 928: bInput = PORTCbits.RC7;
  2702  0013F2  0E00               	movlw	0
  2703  0013F4  BE82               	btfsc	3970,7,c	;volatile
  2704  0013F6  0E01               	movlw	1
  2705  0013F8  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2706                           
  2707                           ;main.c: 929: break;
  2708  0013FA  D023               	goto	l551
  2709  0013FC                     l13538:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 932: bInput = PORTAbits.RA2;
  2713  0013FC  0E00               	movlw	0
  2714  0013FE  B480               	btfsc	3968,2,c	;volatile
  2715  001400  0E01               	movlw	1
  2716  001402  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2717                           
  2718                           ;main.c: 933: break;
  2719  001404  D01E               	goto	l551
  2720  001406                     l13540:
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;main.c: 936: bInput = PORTAbits.RA1;
  2724  001406  0E00               	movlw	0
  2725  001408  B280               	btfsc	3968,1,c	;volatile
  2726  00140A  0E01               	movlw	1
  2727  00140C  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2728                           
  2729                           ;main.c: 937: break;
  2730  00140E  D019               	goto	l551
  2731  001410                     l13542:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;main.c: 940: bInput = PORTAbits.RA0;
  2735  001410  0E00               	movlw	0
  2736  001412  B080               	btfsc	3968,0,c	;volatile
  2737  001414  0E01               	movlw	1
  2738  001416  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2739                           
  2740                           ;main.c: 941: break;
  2741  001418  D014               	goto	l551
  2742  00141A                     l13546:
  2743                           
  2744                           ; BSR set to: 0
  2745  00141A  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2746                           
  2747                           ; Switch size 1, requested type "space"
  2748                           ; Number of cases is 10, Range of values is 0 to 9
  2749                           ; switch strategies available:
  2750                           ; Name         Instructions Cycles
  2751                           ; simple_byte           31    16 (average)
  2752                           ;	Chosen strategy is simple_byte
  2753  00141C  E0CC               	bz	l13524
  2754  00141E  0A01               	xorlw	1	; case 1
  2755  001420  E0CF               	bz	l13526
  2756  001422  0A03               	xorlw	3	; case 2
  2757  001424  E0D2               	bz	l13528
  2758  001426  0A01               	xorlw	1	; case 3
  2759  001428  E0D5               	bz	l13530
  2760  00142A  0A07               	xorlw	7	; case 4
  2761  00142C  E0D8               	bz	l13532
  2762  00142E  0A01               	xorlw	1	; case 5
  2763  001430  E0DB               	bz	l13534
  2764  001432  0A03               	xorlw	3	; case 6
  2765  001434  E0DE               	bz	l13536
  2766  001436  0A01               	xorlw	1	; case 7
  2767  001438  E0E1               	bz	l13538
  2768  00143A  0A0F               	xorlw	15	; case 8
  2769  00143C  E0E4               	bz	l13540
  2770  00143E  0A01               	xorlw	1	; case 9
  2771  001440  E0E7               	bz	l13542
  2772  001442                     l551:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 945: if ( ctrlreg & 0x01 ) {
  2776  001442  A1FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),0,b
  2777  001444  D017               	goto	l13558
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;main.c: 947: if ( bInput ) {
  2781  001446  51FB               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2782  001448  E015               	bz	l13558
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 950: if ( !( current_iostate & ( 1 << i ) ) ) {
  2786  00144A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2787  00144E  DA62               	call	PL14	;call to abstracted procedure
  2788  001450  E111               	bnz	l13558
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 951: if ( ctrlreg & 0x04 ) {
  2792  001452  A5FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2793  001454  D008               	goto	l13556
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 952: SendInformationEvent( i,
  2797                           ;main.c: 953: 30,
  2798                           ;main.c: 954: 5 );
  2799  001456  0E1E               	movlw	30
  2800  001458  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2801  00145A  0E05               	movlw	5
  2802  00145C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2803  00145E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2804  001460  EC54  F020         	call	_SendInformationEvent
  2805                           
  2806                           ;main.c: 955: }
  2807  001464  D007               	goto	l13558
  2808  001466                     l13556:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 956: else {
  2812                           ;main.c: 957: SendInformationEvent( i,
  2813                           ;main.c: 958: 20,
  2814                           ;main.c: 959: 3 );
  2815  001466  0E14               	movlw	20
  2816  001468  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2817  00146A  0E03               	movlw	3
  2818  00146C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2819  00146E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2820  001470  EC54  F020         	call	_SendInformationEvent
  2821  001474                     l13558:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 960: }
  2825                           ;main.c: 961: }
  2826                           ;main.c: 962: }
  2827                           ;main.c: 963: }
  2828                           ;main.c: 966: if ( ctrlreg & 0x02 ) {
  2829  001474  B3FD               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 968: if ( !bInput ) {
  2833  001476  67FB               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2834  001478  D015               	goto	l13570
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 971: if ( current_iostate & ( 1 << i ) ) {
  2838  00147A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2839  00147E  DA4A               	call	PL14	;call to abstracted procedure
  2840  001480  E011               	bz	l13570
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 972: if ( ctrlreg & 0x04 ) {
  2844  001482  A5FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2845  001484  D008               	goto	l13568
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;main.c: 973: SendInformationEvent( i,
  2849                           ;main.c: 974: 30,
  2850                           ;main.c: 975: 6 );
  2851  001486  0E1E               	movlw	30
  2852  001488  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2853  00148A  0E06               	movlw	6
  2854  00148C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2855  00148E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2856  001490  EC54  F020         	call	_SendInformationEvent
  2857                           
  2858                           ;main.c: 976: }
  2859  001494  D007               	goto	l13570
  2860  001496                     l13568:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 977: else {
  2864                           ;main.c: 978: SendInformationEvent( i,
  2865                           ;main.c: 979: 20,
  2866                           ;main.c: 980: 4 );
  2867  001496  0E14               	movlw	20
  2868  001498  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2869  00149A  0E04               	movlw	4
  2870  00149C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2871  00149E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2872  0014A0  EC54  F020         	call	_SendInformationEvent
  2873  0014A4                     l13570:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 981: }
  2877                           ;main.c: 982: }
  2878                           ;main.c: 983: }
  2879                           ;main.c: 984: }
  2880                           ;main.c: 987: if ( ctrlreg & 0x10 ) {
  2881  0014A4  A9FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2882  0014A6  D010               	goto	l13582
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;main.c: 989: if ( bInput ) {
  2886  0014A8  51FB               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2887  0014AA  E00E               	bz	l13582
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 992: if ( !( current_iostate & ( 1 << i ) ) ||
  2891                           ;main.c: 993: ( ctrlreg & 0x20 ) ) {
  2892  0014AC  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2893  0014B0  DA31               	call	PL14	;call to abstracted procedure
  2894  0014B2  E002               	bz	l13578
  2895                           
  2896                           ; BSR set to: 0
  2897  0014B4  ABFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2898  0014B6  D008               	goto	l13582
  2899  0014B8                     l13578:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 994: SendInformationEvent( i,
  2903                           ;main.c: 995: 1,
  2904                           ;main.c: 996: 2 );
  2905  0014B8  0E01               	movlw	1
  2906  0014BA  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2907  0014BC  0E02               	movlw	2
  2908  0014BE  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2909  0014C0  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2910  0014C2  EC54  F020         	call	_SendInformationEvent
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;main.c: 997: vscp_alarmstatus |= 0x02;
  2914  0014C6  8255               	bsf	_vscp_alarmstatus,1,c
  2915  0014C8                     l13582:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 998: }
  2919                           ;main.c: 1000: }
  2920                           ;main.c: 1002: }
  2921                           ;main.c: 1005: if ( ctrlreg & 0x08 ) {
  2922  0014C8  B7FD               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 1007: if (!bInput ) {
  2926  0014CA  67FB               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2927  0014CC  D130               	goto	l13684
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;main.c: 1010: if ( current_iostate & ( 1 << i ) ||
  2931                           ;main.c: 1011: ( ctrlreg & 0x20 ) ) {
  2932  0014CE  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2933  0014D2  DA20               	call	PL14	;call to abstracted procedure
  2934  0014D4  E102               	bnz	l13590
  2935                           
  2936                           ; BSR set to: 0
  2937  0014D6  ABFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2938  0014D8  D12A               	goto	l13684
  2939  0014DA                     l13590:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;main.c: 1012: SendInformationEvent( i,
  2943                           ;main.c: 1013: 1,
  2944                           ;main.c: 1014: 2 );
  2945  0014DA  0E01               	movlw	1
  2946  0014DC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2947  0014DE  0E02               	movlw	2
  2948  0014E0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2949  0014E2  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2950  0014E4  EC54  F020         	call	_SendInformationEvent
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 1015: vscp_alarmstatus |= 0x04;
  2954  0014E8  8455               	bsf	_vscp_alarmstatus,2,c
  2955  0014EA  D121               	goto	l13684
  2956  0014EC                     l13594:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 1023: else {
  2960                           ;main.c: 1028: ctrlreg = Read_b_eep(0x43 + 24 + i);
  2961  0014EC  DA52               	call	PL50	;call to abstracted procedure
  2962  0014EE  EC21  F023         	call	_Read_b_eep	;wreg free
  2963  0014F2  0100               	movlb	0	; () banked
  2964  0014F4  6FFD               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 1031: if ( !( ctrlreg & 0x80 ) ) continue;
  2968  0014F6  AFFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2969  0014F8  D11A               	goto	l13684
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 1035: if ( channel_protection_timer[ i ] ) {
  2973  0014FA  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2974  0014FC  0D02               	mullw	2
  2975  0014FE  50F3               	movf	prodl,w,c
  2976  001500  0F83               	addlw	low _channel_protection_timer
  2977  001502  6ED9               	movwf	fsr2l,c
  2978  001504  6ADA               	clrf	fsr2h,c
  2979  001506  50DE               	movf	postinc2,w,c
  2980  001508  10DD               	iorwf	postdec2,w,c
  2981  00150A  E02A               	bz	l13614
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;main.c: 1037: channel_protection_timer[ i ]--;
  2985  00150C  DA34               	call	PL36	;call to abstracted procedure
  2986  00150E  06DE               	decf	postinc2,f,c
  2987  001510  0E00               	movlw	0
  2988  001512  5ADD               	subwfb	postdec2,f,c
  2989                           
  2990                           ;main.c: 1040: if (!channel_protection_timer[ i ] &&
  2991                           ;main.c: 1041: ( Read_b_eep(0x43 + 24 + i) &
  2992                           ;main.c: 1042: 0x04 ) ) {
  2993  001514  DA30               	call	PL36	;call to abstracted procedure
  2994  001516  50DE               	movf	postinc2,w,c
  2995  001518  10DD               	iorwf	postdec2,w,c
  2996  00151A  E137               	bnz	l13616
  2997                           
  2998                           ; BSR set to: 0
  2999  00151C  DA3A               	call	PL50	;call to abstracted procedure
  3000  00151E  EC21  F023         	call	_Read_b_eep	;wreg free
  3001  001522  0100               	movlb	0	; () banked
  3002  001524  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3003  001526  A5D2               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3004  001528  D030               	goto	l13616
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;main.c: 1045: doActionOff(0, (1 << i));
  3008  00152A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3009  00152E  0E01               	movlw	1
  3010  001530  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3011  001532  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3012  001534  D002               	goto	u17854
  3013  001536                     u17855:
  3014  001536  90D8               	bcf	status,0,c
  3015  001538  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3016  00153A                     u17854:
  3017  00153A  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3018  00153C  D7FC               	goto	u17855
  3019  00153E  51D3               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3020  001540  6E4F               	movwf	?_doActionOff,c
  3021  001542  0E00               	movlw	0
  3022  001544  EC6F  F01E         	call	_doActionOff
  3023                           
  3024                           ;main.c: 1048: if (ctrlreg & 0x02) {
  3025  001548  0100               	movlb	0	; () banked
  3026  00154A  A3FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  3027  00154C  D007               	goto	l13612
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 1049: SendInformationEvent( i,
  3031                           ;main.c: 1050: 1,
  3032                           ;main.c: 1051: 2);
  3033  00154E  0E01               	movlw	1
  3034  001550  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3035  001552  0E02               	movlw	2
  3036  001554  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3037  001556  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3038  001558  EC54  F020         	call	_SendInformationEvent
  3039  00155C                     l13612:
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;main.c: 1052: }
  3043                           ;main.c: 1054: vscp_alarmstatus |= 0x01;
  3044  00155C  8055               	bsf	_vscp_alarmstatus,0,c
  3045  00155E  D015               	goto	l13616
  3046  001560                     l13614:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 1058: else {
  3050                           ;main.c: 1060: channel_protection_timer[ i ] =
  3051                           ;main.c: 1061: Read_b_eep(0x43 + 46 + 20u + i) * 256 +
  3052                           ;main.c: 1063: Read_b_eep(0x43 + 46 + 21u + i);
  3053  001560  0E85               	movlw	133
  3054  001562  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3055  001564  6E08               	movwf	?_Read_b_eep,c
  3056  001566  6A09               	clrf	?_Read_b_eep+1,c
  3057  001568  0E00               	movlw	0
  3058  00156A  2209               	addwfc	?_Read_b_eep+1,f,c
  3059  00156C  EC21  F023         	call	_Read_b_eep	;wreg free
  3060  001570  0100               	movlb	0	; () banked
  3061  001572  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3062  001574  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3063  001576  0E86               	movlw	134
  3064  001578  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3065  00157A  6E08               	movwf	?_Read_b_eep,c
  3066  00157C  6A09               	clrf	?_Read_b_eep+1,c
  3067  00157E  0E00               	movlw	0
  3068  001580  2209               	addwfc	?_Read_b_eep+1,f,c
  3069  001582  EC21  F023         	call	_Read_b_eep	;wreg free
  3070  001586  0100               	movlb	0	; () banked
  3071  001588  D9DF               	call	PL32	;call to abstracted procedure
  3072  00158A                     l13616:
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;main.c: 1065: }
  3076                           ;main.c: 1068: if ( channel_pulse_flags & (1 << i) ) {
  3077  00158A  D9FC               	call	PL38	;call to abstracted procedure
  3078  00158C  D001               	goto	u17874
  3079  00158E                     u17875:
  3080  00158E  DA08               	call	PL104	;call to abstracted procedure
  3081  001590                     u17874:
  3082  001590  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3083  001592  D7FD               	goto	u17875
  3084  001594  5168               	movf	_channel_pulse_flags& (0+255),w,b
  3085  001596  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3086  001598  5169               	movf	(_channel_pulse_flags+1)& (0+255),w,b
  3087  00159A  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3088  00159C  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3089  00159E  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3090  0015A0  E101 D0C5          	bz	l13684
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 1070: if ( channel_pulse_timer[ i ] ) {
  3094  0015A4  D9C8               	call	PL26	;call to abstracted procedure
  3095  0015A6  50DE               	movf	postinc2,w,c
  3096  0015A8  10DD               	iorwf	postdec2,w,c
  3097  0015AA  E101 D0A6          	bz	l13682
  3098                           
  3099                           ; BSR set to: 1
  3100                           ;main.c: 1072: channel_pulse_timer[ i ]--;
  3101  0015AE  0100               	movlb	0	; () banked
  3102  0015B0  D9C2               	call	PL26	;call to abstracted procedure
  3103  0015B2  06DE               	decf	postinc2,f,c
  3104  0015B4  0E00               	movlw	0
  3105  0015B6  5ADD               	subwfb	postdec2,f,c
  3106                           
  3107                           ;main.c: 1075: if ( !channel_pulse_timer[ i ] ) {
  3108  0015B8  D9BE               	call	PL26	;call to abstracted procedure
  3109  0015BA  50DE               	movf	postinc2,w,c
  3110  0015BC  10DD               	iorwf	postdec2,w,c
  3111  0015BE  E040               	bz	l13666
  3112  0015C0  D0B6               	goto	l13684
  3113  0015C2                     l591:
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 1080: if ( PORTBbits.RB0 ) {
  3117  0015C2  A081               	btfss	3969,0,c	;volatile
  3118  0015C4  D002               	goto	l592
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;main.c: 1081: PORTBbits.RB0 = 0;
  3122  0015C6  9081               	bcf	3969,0,c	;volatile
  3123  0015C8  D037               	goto	L9
  3124  0015CA                     l592:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 1084: else {
  3128                           ;main.c: 1085: PORTBbits.RB0 = 1;
  3129  0015CA  8081               	bsf	3969,0,c	;volatile
  3130  0015CC                     l13626:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 1086: bOn = 1;
  3134  0015CC  0E01               	movlw	1
  3135  0015CE  6FFC               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  3136  0015D0  D04C               	goto	l13668
  3137  0015D2                     l595:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 1091: if ( PORTBbits.RB1 ) {
  3141  0015D2  A281               	btfss	3969,1,c	;volatile
  3142  0015D4  D002               	goto	l596
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;main.c: 1092: PORTBbits.RB1 = 0;
  3146  0015D6  9281               	bcf	3969,1,c	;volatile
  3147  0015D8  D02F               	goto	L9
  3148  0015DA                     l596:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 1095: else {
  3152                           ;main.c: 1096: PORTBbits.RB1 = 1;
  3153  0015DA  8281               	bsf	3969,1,c	;volatile
  3154  0015DC  D7F7               	goto	l13626
  3155  0015DE                     l598:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 1102: if ( PORTCbits.RC3 ) {
  3159  0015DE  A682               	btfss	3970,3,c	;volatile
  3160  0015E0  D002               	goto	l599
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 1103: PORTCbits.RC3 = 0;
  3164  0015E2  9682               	bcf	3970,3,c	;volatile
  3165  0015E4  D029               	goto	L9
  3166  0015E6                     l599:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 1106: else {
  3170                           ;main.c: 1107: PORTCbits.RC3 = 1;
  3171  0015E6  8682               	bsf	3970,3,c	;volatile
  3172  0015E8  D7F1               	goto	l13626
  3173  0015EA                     l601:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 1113: if ( PORTCbits.RC4 ) {
  3177  0015EA  A882               	btfss	3970,4,c	;volatile
  3178  0015EC  D002               	goto	l602
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 1114: PORTCbits.RC4 = 0;
  3182  0015EE  9882               	bcf	3970,4,c	;volatile
  3183  0015F0  D023               	goto	L9
  3184  0015F2                     l602:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 1117: else {
  3188                           ;main.c: 1118: PORTCbits.RC4 = 1;
  3189  0015F2  8882               	bsf	3970,4,c	;volatile
  3190  0015F4  D7EB               	goto	l13626
  3191  0015F6                     l604:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 1124: if ( PORTCbits.RC5 ) {
  3195  0015F6  AA82               	btfss	3970,5,c	;volatile
  3196  0015F8  D002               	goto	l605
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 1125: PORTCbits.RC5 = 0;
  3200  0015FA  9A82               	bcf	3970,5,c	;volatile
  3201  0015FC  D01D               	goto	L9
  3202  0015FE                     l605:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 1128: else {
  3206                           ;main.c: 1129: PORTCbits.RC5 = 1;
  3207  0015FE  8A82               	bsf	3970,5,c	;volatile
  3208  001600  D7E5               	goto	l13626
  3209  001602                     l607:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 1135: if ( PORTCbits.RC6 ) {
  3213  001602  AC82               	btfss	3970,6,c	;volatile
  3214  001604  D002               	goto	l608
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;main.c: 1136: PORTCbits.RC6 = 0;
  3218  001606  9C82               	bcf	3970,6,c	;volatile
  3219  001608  D017               	goto	L9
  3220  00160A                     l608:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 1139: else {
  3224                           ;main.c: 1140: PORTCbits.RC6 = 1;
  3225  00160A  8C82               	bsf	3970,6,c	;volatile
  3226  00160C  D7DF               	goto	l13626
  3227  00160E                     l610:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 1146: if ( PORTCbits.RC7 ) {
  3231  00160E  AE82               	btfss	3970,7,c	;volatile
  3232  001610  D002               	goto	l611
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 1147: PORTCbits.RC7 = 0;
  3236  001612  9E82               	bcf	3970,7,c	;volatile
  3237  001614  D011               	goto	L9
  3238  001616                     l611:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 1150: else {
  3242                           ;main.c: 1151: PORTCbits.RC7 = 1;
  3243  001616  8E82               	bsf	3970,7,c	;volatile
  3244  001618  D7D9               	goto	l13626
  3245  00161A                     l613:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 1157: if ( PORTAbits.RA2 ) {
  3249  00161A  A480               	btfss	3968,2,c	;volatile
  3250  00161C  D002               	goto	l614
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 1158: PORTAbits.RA2 = 0;
  3254  00161E  9480               	bcf	3968,2,c	;volatile
  3255  001620  D00B               	goto	L9
  3256  001622                     l614:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 1161: else {
  3260                           ;main.c: 1162: PORTAbits.RA2 = 1;
  3261  001622  8480               	bsf	3968,2,c	;volatile
  3262  001624  D7D3               	goto	l13626
  3263  001626                     l616:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 1168: if ( PORTAbits.RA1 ) {
  3267  001626  A280               	btfss	3968,1,c	;volatile
  3268  001628  D002               	goto	l617
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 1169: PORTAbits.RA1 = 0;
  3272  00162A  9280               	bcf	3968,1,c	;volatile
  3273  00162C  D005               	goto	L9
  3274  00162E                     l617:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 1172: else {
  3278                           ;main.c: 1173: PORTAbits.RA1 = 1;
  3279  00162E  8280               	bsf	3968,1,c	;volatile
  3280  001630  D7CD               	goto	l13626
  3281  001632                     l619:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 1179: if ( PORTAbits.RA0 ) {
  3285  001632  A080               	btfss	3968,0,c	;volatile
  3286  001634  D003               	goto	l620
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 1180: PORTAbits.RA0 = 0;
  3290  001636  9080               	bcf	3968,0,c	;volatile
  3291  001638                     L9:
  3292                           
  3293                           ;main.c: 1181: bOn = 0;
  3294  001638  6BFC               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  3295                           
  3296                           ;main.c: 1182: }
  3297  00163A  D017               	goto	l13668
  3298  00163C                     l620:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 1183: else {
  3302                           ;main.c: 1184: PORTAbits.RA0 = 1;
  3303  00163C  8080               	bsf	3968,0,c	;volatile
  3304  00163E  D7C6               	goto	l13626
  3305  001640                     l13666:
  3306                           
  3307                           ; BSR set to: 1
  3308  001640  0100               	movlb	0	; () banked
  3309  001642  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3310                           
  3311                           ; Switch size 1, requested type "space"
  3312                           ; Number of cases is 10, Range of values is 0 to 9
  3313                           ; switch strategies available:
  3314                           ; Name         Instructions Cycles
  3315                           ; simple_byte           31    16 (average)
  3316                           ;	Chosen strategy is simple_byte
  3317  001644  E0BE               	bz	l591
  3318  001646  0A01               	xorlw	1	; case 1
  3319  001648  E0C4               	bz	l595
  3320  00164A  0A03               	xorlw	3	; case 2
  3321  00164C  E0C8               	bz	l598
  3322  00164E  0A01               	xorlw	1	; case 3
  3323  001650  E0CC               	bz	l601
  3324  001652  0A07               	xorlw	7	; case 4
  3325  001654  E0D0               	bz	l604
  3326  001656  0A01               	xorlw	1	; case 5
  3327  001658  E0D4               	bz	l607
  3328  00165A  0A03               	xorlw	3	; case 6
  3329  00165C  E0D8               	bz	l610
  3330  00165E  0A01               	xorlw	1	; case 7
  3331  001660  E0DC               	bz	l613
  3332  001662  0A0F               	xorlw	15	; case 8
  3333  001664  E0E0               	bz	l616
  3334  001666  0A01               	xorlw	1	; case 9
  3335  001668  E0E4               	bz	l619
  3336  00166A                     l13668:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 1191: channel_pulse_timer[ i ] =
  3340                           ;main.c: 1192: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3341                           ;main.c: 1194: Read_b_eep(0x43 + 46 + 0u + 2 * i);
  3342  00166A  D97C               	call	PL34	;call to abstracted procedure
  3343  00166C  EC21  F023         	call	_Read_b_eep	;wreg free
  3344  001670  0100               	movlb	0	; () banked
  3345  001672  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3346  001674  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3347  001676  D976               	call	PL34	;call to abstracted procedure
  3348  001678  EC21  F023         	call	_Read_b_eep	;wreg free
  3349  00167C  0100               	movlb	0	; () banked
  3350  00167E  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3351  001680  0E00               	movlw	0
  3352  001682  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3353  001684  D958               	call	PL26	;call to abstracted procedure
  3354  001686  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3355  00168A  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3356                           
  3357                           ; BSR set to: 1
  3358                           ;main.c: 1197: if ( bOn ) {
  3359  00168E  51FC               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  3360  001690  E02A               	bz	l622
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 1200: if ( Read_b_eep(0x43 + 24 + i) &
  3364                           ;main.c: 1201: 0x04) {
  3365  001692  D97F               	call	PL50	;call to abstracted procedure
  3366  001694  EC21  F023         	call	_Read_b_eep	;wreg free
  3367  001698  0100               	movlb	0	; () banked
  3368  00169A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3369  00169C  A5D2               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3370  00169E  D019               	goto	l13676
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 1202: channel_protection_timer[ i ] =
  3374                           ;main.c: 1203: Read_b_eep(0x43 + 46 + 20u + 2 * i) * 256 +
  3375                           ;main.c: 1205: Read_b_eep(0x43 + 46 + 21u + 2 * i);
  3376  0016A0  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3377  0016A2  0D02               	mullw	2
  3378  0016A4  0E85               	movlw	133
  3379  0016A6  24F3               	addwf	prodl,w,c
  3380  0016A8  6E08               	movwf	?_Read_b_eep,c
  3381  0016AA  0E00               	movlw	0
  3382  0016AC  20F4               	addwfc	prodh,w,c
  3383  0016AE  6E09               	movwf	?_Read_b_eep+1,c
  3384  0016B0  EC21  F023         	call	_Read_b_eep	;wreg free
  3385  0016B4  0100               	movlb	0	; () banked
  3386  0016B6  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3387  0016B8  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3388  0016BA  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3389  0016BC  0D02               	mullw	2
  3390  0016BE  0E86               	movlw	134
  3391  0016C0  24F3               	addwf	prodl,w,c
  3392  0016C2  6E08               	movwf	?_Read_b_eep,c
  3393  0016C4  0E00               	movlw	0
  3394  0016C6  20F4               	addwfc	prodh,w,c
  3395  0016C8  6E09               	movwf	?_Read_b_eep+1,c
  3396  0016CA  EC21  F023         	call	_Read_b_eep	;wreg free
  3397  0016CE  0100               	movlb	0	; () banked
  3398  0016D0  D93B               	call	PL32	;call to abstracted procedure
  3399  0016D2                     l13676:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 1207: }
  3403                           ;main.c: 1209: if ( ctrlreg & 0x08 ) {
  3404  0016D2  A7FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  3405  0016D4  D02C               	goto	l13684
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 1210: SendInformationEvent( i,
  3409                           ;main.c: 1211: 20,
  3410                           ;main.c: 1212: 3);
  3411  0016D6  0E14               	movlw	20
  3412  0016D8  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3413  0016DA  0E03               	movlw	3
  3414  0016DC  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3415  0016DE  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3416  0016E0  EC54  F020         	call	_SendInformationEvent
  3417  0016E4  D024               	goto	l13684
  3418  0016E6                     l622:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 1217: else {
  3422                           ;main.c: 1219: if ( ctrlreg & 0x10 ) {
  3423  0016E6  A9FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  3424  0016E8  D022               	goto	l13684
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 1220: SendInformationEvent( i, 20,
  3428                           ;main.c: 1221: 4);
  3429  0016EA  0E14               	movlw	20
  3430  0016EC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3431  0016EE  0E04               	movlw	4
  3432  0016F0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3433  0016F2  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3434  0016F4  EC54  F020         	call	_SendInformationEvent
  3435  0016F8  D01A               	goto	l13684
  3436  0016FA                     l13682:
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 1229: else {
  3440                           ;main.c: 1231: channel_pulse_timer[ i ] =
  3441                           ;main.c: 1232: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3442                           ;main.c: 1234: Read_b_eep(0x43 + 46 + 1u + 2 * i);
  3443  0016FA  0100               	movlb	0	; () banked
  3444  0016FC  D933               	call	PL34	;call to abstracted procedure
  3445  0016FE  EC21  F023         	call	_Read_b_eep	;wreg free
  3446  001702  0100               	movlb	0	; () banked
  3447  001704  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3448  001706  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3449  001708  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3450  00170A  0D02               	mullw	2
  3451  00170C  0E72               	movlw	114
  3452  00170E  24F3               	addwf	prodl,w,c
  3453  001710  6E08               	movwf	?_Read_b_eep,c
  3454  001712  0E00               	movlw	0
  3455  001714  20F4               	addwfc	prodh,w,c
  3456  001716  6E09               	movwf	?_Read_b_eep+1,c
  3457  001718  EC21  F023         	call	_Read_b_eep	;wreg free
  3458  00171C  0100               	movlb	0	; () banked
  3459  00171E  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3460  001720  0E00               	movlw	0
  3461  001722  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3462  001724  D908               	call	PL26	;call to abstracted procedure
  3463  001726  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3464  00172A  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3465  00172E                     l13684:
  3466  00172E  0100               	movlb	0	; () banked
  3467  001730  2BFE               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  3468  001732  D623               	goto	l13512
  3469  001734                     l13688:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 1236: }
  3473                           ;main.c: 1238: }
  3474                           ;main.c: 1240: }
  3475                           ;main.c: 1242: }
  3476                           ;main.c: 1246: if ( Read_b_eep(0x43 + 45) ) {
  3477  001734  6A09               	clrf	?_Read_b_eep+1,c
  3478  001736  0E70               	movlw	112
  3479  001738  6E08               	movwf	?_Read_b_eep,c
  3480  00173A  EC21  F023         	call	_Read_b_eep	;wreg free
  3481  00173E  0900               	iorlw	0
  3482  001740  E04F               	bz	l13696
  3483                           
  3484                           ;main.c: 1248: uint8_t data[ 3 ];
  3485                           ;main.c: 1250: data[ 0 ] = 0;
  3486  001742  0100               	movlb	0	; () banked
  3487  001744  6BF8               	clrf	doApplicationOneSecondWork@data& (0+255),b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 1251: data[ 1 ] = ( PORTAbits.RA0 << 1 ) +
  3491                           ;main.c: 1252: PORTAbits.RA1;
  3492  001746  3080               	rrcf	3968,w,c	;volatile
  3493  001748  0B01               	andlw	1
  3494  00174A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3495  00174C  5080               	movf	3968,w,c	;volatile
  3496  00174E  0B01               	andlw	1
  3497  001750  0D02               	mullw	2
  3498  001752  50F3               	movf	prodl,w,c
  3499  001754  25D2               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3500  001756  6FF9               	movwf	(doApplicationOneSecondWork@data+1)& (0+255),b
  3501                           
  3502                           ;main.c: 1253: data[ 2 ] = ( PORTAbits.RA2 << 7 ) +
  3503                           ;main.c: 1254: ( PORTCbits.RC7 << 6 ) +
  3504                           ;main.c: 1255: ( PORTCbits.RC6 << 5 ) +
  3505                           ;main.c: 1256: ( PORTCbits.RC5 << 4 ) +
  3506                           ;main.c: 1257: ( PORTCbits.RC4 << 3 ) +
  3507                           ;main.c: 1258: ( PORTCbits.RC3 << 2 ) +
  3508                           ;main.c: 1259: ( PORTBbits.RB1 << 1 ) +
  3509                           ;main.c: 1260: PORTBbits.RB0;
  3510  001758  5081               	movf	3969,w,c	;volatile
  3511  00175A  0B01               	andlw	1
  3512  00175C  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3513  00175E  3081               	rrcf	3969,w,c	;volatile
  3514  001760  0B01               	andlw	1
  3515  001762  0D02               	mullw	2
  3516  001764  CFF3 F0D3          	movff	prodl,??_doApplicationOneSecondWork+1
  3517  001768  3082               	rrcf	3970,w,c	;volatile
  3518  00176A  32E8               	rrcf	wreg,f,c
  3519  00176C  32E8               	rrcf	wreg,f,c
  3520  00176E  0B01               	andlw	1
  3521  001770  0D04               	mullw	4
  3522  001772  CFF3 F0D4          	movff	prodl,??_doApplicationOneSecondWork+2
  3523  001776  3882               	swapf	3970,w,c	;volatile
  3524  001778  0B01               	andlw	1
  3525  00177A  0D08               	mullw	8
  3526  00177C  CFF3 F0D5          	movff	prodl,??_doApplicationOneSecondWork+3
  3527  001780  3882               	swapf	3970,w,c	;volatile
  3528  001782  32E8               	rrcf	wreg,f,c
  3529  001784  0B01               	andlw	1
  3530  001786  0D10               	mullw	16
  3531  001788  CFF3 F0D6          	movff	prodl,??_doApplicationOneSecondWork+4
  3532  00178C  3882               	swapf	3970,w,c	;volatile
  3533  00178E  32E8               	rrcf	wreg,f,c
  3534  001790  32E8               	rrcf	wreg,f,c
  3535  001792  0B01               	andlw	1
  3536  001794  0D20               	mullw	32
  3537  001796  CFF3 F0D7          	movff	prodl,??_doApplicationOneSecondWork+5
  3538  00179A  3482               	rlcf	3970,w,c	;volatile
  3539  00179C  36E8               	rlcf	wreg,f,c
  3540  00179E  0B01               	andlw	1
  3541  0017A0  0D40               	mullw	64
  3542  0017A2  CFF3 F0D8          	movff	prodl,??_doApplicationOneSecondWork+6
  3543  0017A6  3080               	rrcf	3968,w,c	;volatile
  3544  0017A8  32E8               	rrcf	wreg,f,c
  3545  0017AA  0B01               	andlw	1
  3546  0017AC  0D80               	mullw	128
  3547  0017AE  50F3               	movf	prodl,w,c
  3548  0017B0  25D8               	addwf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3549  0017B2  25D7               	addwf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3550  0017B4  25D6               	addwf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3551  0017B6  25D5               	addwf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3552  0017B8  25D4               	addwf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3553  0017BA  25D3               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3554  0017BC  25D2               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3555  0017BE  6FFA               	movwf	(doApplicationOneSecondWork@data+2)& (0+255),b
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;main.c: 1263: sendVSCPFrame( 15,
  3559                           ;main.c: 1264: 1,
  3560                           ;main.c: 1265: vscp_nickname,
  3561                           ;main.c: 1266: 0x03,
  3562                           ;main.c: 1267: 3,
  3563                           ;main.c: 1268: data );
  3564  0017C0  6A40               	clrf	?_sendVSCPFrame+1,c
  3565  0017C2  0E0F               	movlw	15
  3566  0017C4  6E3F               	movwf	?_sendVSCPFrame,c
  3567  0017C6  0E01               	movlw	1
  3568  0017C8  6E41               	movwf	?_sendVSCPFrame+2,c
  3569  0017CA  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3570  0017CE  0E03               	movlw	3
  3571  0017D0  6E43               	movwf	?_sendVSCPFrame+4,c
  3572  0017D2  6E44               	movwf	?_sendVSCPFrame+5,c
  3573  0017D4  0E00               	movlw	high doApplicationOneSecondWork@data
  3574  0017D6  6E46               	movwf	?_sendVSCPFrame+7,c
  3575  0017D8  0EF8               	movlw	low doApplicationOneSecondWork@data
  3576  0017DA  6E45               	movwf	?_sendVSCPFrame+6,c
  3577  0017DC  EC37  F01F         	call	_sendVSCPFrame	;wreg free
  3578  0017E0                     l13696:
  3579                           
  3580                           ;main.c: 1269: }
  3581                           ;main.c: 1272: current_iostate = ( PORTAbits.RA0 << 9 ) +
  3582                           ;main.c: 1273: ( PORTAbits.RA1 << 8 ) +
  3583                           ;main.c: 1274: ( PORTAbits.RA2 << 7 ) +
  3584                           ;main.c: 1275: ( PORTCbits.RC7 << 6 ) +
  3585                           ;main.c: 1276: ( PORTCbits.RC6 << 5 ) +
  3586                           ;main.c: 1277: ( PORTCbits.RC5 << 4 ) +
  3587                           ;main.c: 1278: ( PORTCbits.RC4 << 3 ) +
  3588                           ;main.c: 1279: ( PORTCbits.RC3 << 2 ) +
  3589                           ;main.c: 1280: ( PORTBbits.RB1 << 1 ) +
  3590                           ;main.c: 1281: PORTBbits.RB0;
  3591  0017E0  5081               	movf	3969,w,c	;volatile
  3592  0017E2  0B01               	andlw	1
  3593  0017E4  0100               	movlb	0	; () banked
  3594  0017E6  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3595  0017E8  3081               	rrcf	3969,w,c	;volatile
  3596  0017EA  0B01               	andlw	1
  3597  0017EC  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3598  0017EE  90D8               	bcf	status,0,c
  3599  0017F0  35D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3600  0017F2  6FD4               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3601  0017F4  6BD5               	clrf	(??_doApplicationOneSecondWork+3)& (0+255),b
  3602  0017F6  37D5               	rlcf	(??_doApplicationOneSecondWork+3)& (0+255),f,b
  3603  0017F8  3082               	rrcf	3970,w,c	;volatile
  3604  0017FA  32E8               	rrcf	wreg,f,c
  3605  0017FC  32E8               	rrcf	wreg,f,c
  3606  0017FE  0B01               	andlw	1
  3607  001800  6FD6               	movwf	(??_doApplicationOneSecondWork+4)& (0+255),b
  3608  001802  6BD7               	clrf	(??_doApplicationOneSecondWork+5)& (0+255),b
  3609  001804  90D8               	bcf	status,0,c
  3610  001806  37D6               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3611  001808  37D7               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3612  00180A  90D8               	bcf	status,0,c
  3613  00180C  37D6               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3614  00180E  37D7               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3615  001810  3882               	swapf	3970,w,c	;volatile
  3616  001812  0B01               	andlw	1
  3617  001814  6FD8               	movwf	(??_doApplicationOneSecondWork+6)& (0+255),b
  3618  001816  6BD9               	clrf	(??_doApplicationOneSecondWork+7)& (0+255),b
  3619  001818  90D8               	bcf	status,0,c
  3620  00181A  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3621  00181C  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3622  00181E  90D8               	bcf	status,0,c
  3623  001820  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3624  001822  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3625  001824  90D8               	bcf	status,0,c
  3626  001826  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3627  001828  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3628  00182A  3882               	swapf	3970,w,c	;volatile
  3629  00182C  32E8               	rrcf	wreg,f,c
  3630  00182E  0B01               	andlw	1
  3631  001830  6FDA               	movwf	(??_doApplicationOneSecondWork+8)& (0+255),b
  3632  001832  6BDB               	clrf	(??_doApplicationOneSecondWork+9)& (0+255),b
  3633  001834  3BDA               	swapf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3634  001836  3BDB               	swapf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3635  001838  0EF0               	movlw	240
  3636  00183A  17DB               	andwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3637  00183C  51DA               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3638  00183E  0B0F               	andlw	15
  3639  001840  13DB               	iorwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3640  001842  0EF0               	movlw	240
  3641  001844  17DA               	andwf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3642  001846  3882               	swapf	3970,w,c	;volatile
  3643  001848  32E8               	rrcf	wreg,f,c
  3644  00184A  32E8               	rrcf	wreg,f,c
  3645  00184C  0B01               	andlw	1
  3646  00184E  6FDC               	movwf	(??_doApplicationOneSecondWork+10)& (0+255),b
  3647  001850  6BDD               	clrf	(??_doApplicationOneSecondWork+11)& (0+255),b
  3648  001852  0E05               	movlw	5
  3649  001854                     u18065:
  3650  001854  90D8               	bcf	status,0,c
  3651  001856  37DC               	rlcf	(??_doApplicationOneSecondWork+10)& (0+255),f,b
  3652  001858  37DD               	rlcf	(??_doApplicationOneSecondWork+11)& (0+255),f,b
  3653  00185A  2EE8               	decfsz	wreg,f,c
  3654  00185C  D7FB               	goto	u18065
  3655  00185E  3482               	rlcf	3970,w,c	;volatile
  3656  001860  36E8               	rlcf	wreg,f,c
  3657  001862  0B01               	andlw	1
  3658  001864  6FDE               	movwf	(??_doApplicationOneSecondWork+12)& (0+255),b
  3659  001866  6BDF               	clrf	(??_doApplicationOneSecondWork+13)& (0+255),b
  3660  001868  0E06               	movlw	6
  3661  00186A                     u18075:
  3662  00186A  90D8               	bcf	status,0,c
  3663  00186C  37DE               	rlcf	(??_doApplicationOneSecondWork+12)& (0+255),f,b
  3664  00186E  37DF               	rlcf	(??_doApplicationOneSecondWork+13)& (0+255),f,b
  3665  001870  2EE8               	decfsz	wreg,f,c
  3666  001872  D7FB               	goto	u18075
  3667  001874  3080               	rrcf	3968,w,c	;volatile
  3668  001876  32E8               	rrcf	wreg,f,c
  3669  001878  0B01               	andlw	1
  3670  00187A  6FE0               	movwf	(??_doApplicationOneSecondWork+14)& (0+255),b
  3671  00187C  6BE1               	clrf	(??_doApplicationOneSecondWork+15)& (0+255),b
  3672  00187E  0E07               	movlw	7
  3673  001880                     u18085:
  3674  001880  90D8               	bcf	status,0,c
  3675  001882  37E0               	rlcf	(??_doApplicationOneSecondWork+14)& (0+255),f,b
  3676  001884  37E1               	rlcf	(??_doApplicationOneSecondWork+15)& (0+255),f,b
  3677  001886  2EE8               	decfsz	wreg,f,c
  3678  001888  D7FB               	goto	u18085
  3679  00188A  3080               	rrcf	3968,w,c	;volatile
  3680  00188C  0B01               	andlw	1
  3681  00188E  6FE3               	movwf	(??_doApplicationOneSecondWork+17)& (0+255),b
  3682  001890  6BE2               	clrf	(??_doApplicationOneSecondWork+16)& (0+255),b
  3683  001892  5080               	movf	3968,w,c	;volatile
  3684  001894  0B01               	andlw	1
  3685  001896  6FE4               	movwf	(??_doApplicationOneSecondWork+18)& (0+255),b
  3686  001898  6BE5               	clrf	(??_doApplicationOneSecondWork+19)& (0+255),b
  3687  00189A  0E09               	movlw	9
  3688  00189C                     u18095:
  3689  00189C  90D8               	bcf	status,0,c
  3690  00189E  37E4               	rlcf	(??_doApplicationOneSecondWork+18)& (0+255),f,b
  3691  0018A0  37E5               	rlcf	(??_doApplicationOneSecondWork+19)& (0+255),f,b
  3692  0018A2  2EE8               	decfsz	wreg,f,c
  3693  0018A4  D7FB               	goto	u18095
  3694  0018A6  51E2               	movf	(??_doApplicationOneSecondWork+16)& (0+255),w,b
  3695  0018A8  25E4               	addwf	(??_doApplicationOneSecondWork+18)& (0+255),w,b
  3696  0018AA  6FE6               	movwf	(??_doApplicationOneSecondWork+20)& (0+255),b
  3697  0018AC  51E3               	movf	(??_doApplicationOneSecondWork+17)& (0+255),w,b
  3698  0018AE  21E5               	addwfc	(??_doApplicationOneSecondWork+19)& (0+255),w,b
  3699  0018B0  6FE7               	movwf	(??_doApplicationOneSecondWork+21)& (0+255),b
  3700  0018B2  51E0               	movf	(??_doApplicationOneSecondWork+14)& (0+255),w,b
  3701  0018B4  25E6               	addwf	(??_doApplicationOneSecondWork+20)& (0+255),w,b
  3702  0018B6  6FE8               	movwf	(??_doApplicationOneSecondWork+22)& (0+255),b
  3703  0018B8  51E1               	movf	(??_doApplicationOneSecondWork+15)& (0+255),w,b
  3704  0018BA  21E7               	addwfc	(??_doApplicationOneSecondWork+21)& (0+255),w,b
  3705  0018BC  6FE9               	movwf	(??_doApplicationOneSecondWork+23)& (0+255),b
  3706  0018BE  51DE               	movf	(??_doApplicationOneSecondWork+12)& (0+255),w,b
  3707  0018C0  25E8               	addwf	(??_doApplicationOneSecondWork+22)& (0+255),w,b
  3708  0018C2  6FEA               	movwf	(??_doApplicationOneSecondWork+24)& (0+255),b
  3709  0018C4  51DF               	movf	(??_doApplicationOneSecondWork+13)& (0+255),w,b
  3710  0018C6  21E9               	addwfc	(??_doApplicationOneSecondWork+23)& (0+255),w,b
  3711  0018C8  6FEB               	movwf	(??_doApplicationOneSecondWork+25)& (0+255),b
  3712  0018CA  51DC               	movf	(??_doApplicationOneSecondWork+10)& (0+255),w,b
  3713  0018CC  25EA               	addwf	(??_doApplicationOneSecondWork+24)& (0+255),w,b
  3714  0018CE  6FEC               	movwf	(??_doApplicationOneSecondWork+26)& (0+255),b
  3715  0018D0  51DD               	movf	(??_doApplicationOneSecondWork+11)& (0+255),w,b
  3716  0018D2  21EB               	addwfc	(??_doApplicationOneSecondWork+25)& (0+255),w,b
  3717  0018D4  6FED               	movwf	(??_doApplicationOneSecondWork+27)& (0+255),b
  3718  0018D6  51DA               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3719  0018D8  25EC               	addwf	(??_doApplicationOneSecondWork+26)& (0+255),w,b
  3720  0018DA  6FEE               	movwf	(??_doApplicationOneSecondWork+28)& (0+255),b
  3721  0018DC  51DB               	movf	(??_doApplicationOneSecondWork+9)& (0+255),w,b
  3722  0018DE  21ED               	addwfc	(??_doApplicationOneSecondWork+27)& (0+255),w,b
  3723  0018E0  6FEF               	movwf	(??_doApplicationOneSecondWork+29)& (0+255),b
  3724  0018E2  51D8               	movf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3725  0018E4  25EE               	addwf	(??_doApplicationOneSecondWork+28)& (0+255),w,b
  3726  0018E6  6FF0               	movwf	(??_doApplicationOneSecondWork+30)& (0+255),b
  3727  0018E8  51D9               	movf	(??_doApplicationOneSecondWork+7)& (0+255),w,b
  3728  0018EA  21EF               	addwfc	(??_doApplicationOneSecondWork+29)& (0+255),w,b
  3729  0018EC  6FF1               	movwf	(??_doApplicationOneSecondWork+31)& (0+255),b
  3730  0018EE  51D6               	movf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3731  0018F0  25F0               	addwf	(??_doApplicationOneSecondWork+30)& (0+255),w,b
  3732  0018F2  6FF2               	movwf	(??_doApplicationOneSecondWork+32)& (0+255),b
  3733  0018F4  51D7               	movf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3734  0018F6  21F1               	addwfc	(??_doApplicationOneSecondWork+31)& (0+255),w,b
  3735  0018F8  6FF3               	movwf	(??_doApplicationOneSecondWork+33)& (0+255),b
  3736  0018FA  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3737  0018FC  25F2               	addwf	(??_doApplicationOneSecondWork+32)& (0+255),w,b
  3738  0018FE  6FF4               	movwf	(??_doApplicationOneSecondWork+34)& (0+255),b
  3739  001900  51D5               	movf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3740  001902  21F3               	addwfc	(??_doApplicationOneSecondWork+33)& (0+255),w,b
  3741  001904  6FF5               	movwf	(??_doApplicationOneSecondWork+35)& (0+255),b
  3742  001906  51D2               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  3743  001908  25F4               	addwf	(??_doApplicationOneSecondWork+34)& (0+255),w,b
  3744  00190A  6F6A               	movwf	_current_iostate& (0+255),b
  3745  00190C  0E00               	movlw	0
  3746  00190E  21F5               	addwfc	(??_doApplicationOneSecondWork+35)& (0+255),w,b
  3747  001910  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750  001912  0012               	return	
  3751  001914                     __end_of_doApplicationOneSecondWork:
  3752                           	opt stack 0
  3753  001914                     PL14:
  3754                           	opt stack 21
  3755  001914  0E01               	movlw	1
  3756  001916  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3757  001918  6BD4               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3758  00191A  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3759  00191C  D003               	goto	u17634
  3760  00191E                     u17635:
  3761  00191E  90D8               	bcf	status,0,c
  3762  001920  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3763  001922  37D4               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3764  001924                     u17634:
  3765  001924  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3766  001926  D7FB               	goto	u17635
  3767  001928  516A               	movf	_current_iostate& (0+255),w,b
  3768  00192A  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3769  00192C  516B               	movf	(_current_iostate+1)& (0+255),w,b
  3770  00192E  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3771  001930  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3772  001932  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3773  001934  0012               	return	
  3774  001936                     __end_ofPL14:
  3775                           	opt stack 0
  3776  001936                     PL26:
  3777                           	opt stack 21
  3778  001936  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3779  001938  0D02               	mullw	2
  3780  00193A  0E00               	movlw	low _channel_pulse_timer
  3781  00193C  24F3               	addwf	prodl,w,c
  3782  00193E  6ED9               	movwf	fsr2l,c
  3783  001940  0E01               	movlw	high _channel_pulse_timer
  3784  001942  20F4               	addwfc	prodh,w,c
  3785  001944  6EDA               	movwf	fsr2h,c
  3786  001946  0012               	return	
  3787  001948                     __end_ofPL26:
  3788                           	opt stack 0
  3789  001948                     PL32:
  3790                           	opt stack 21
  3791  001948  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3792  00194A  0E00               	movlw	0
  3793  00194C  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3794  00194E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3795  001950  0D02               	mullw	2
  3796  001952  50F3               	movf	prodl,w,c
  3797  001954  0F83               	addlw	low _channel_protection_timer
  3798  001956  6ED9               	movwf	fsr2l,c
  3799  001958  6ADA               	clrf	fsr2h,c
  3800  00195A  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3801  00195E  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3802  001962  0012               	return	
  3803  001964                     __end_ofPL32:
  3804                           	opt stack 0
  3805  001964                     PL34:
  3806                           	opt stack 21
  3807  001964  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3808  001966  0D02               	mullw	2
  3809  001968  0E71               	movlw	113
  3810  00196A  24F3               	addwf	prodl,w,c
  3811  00196C  6E08               	movwf	?_Read_b_eep,c
  3812  00196E  0E00               	movlw	0
  3813  001970  20F4               	addwfc	prodh,w,c
  3814  001972  6E09               	movwf	?_Read_b_eep+1,c
  3815  001974  0012               	return	
  3816  001976                     __end_ofPL34:
  3817                           	opt stack 0
  3818  001976                     PL36:
  3819                           	opt stack 21
  3820  001976  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3821  001978  0D02               	mullw	2
  3822  00197A  50F3               	movf	prodl,w,c
  3823  00197C  0F83               	addlw	low _channel_protection_timer
  3824  00197E  6ED9               	movwf	fsr2l,c
  3825  001980  6ADA               	clrf	fsr2h,c
  3826  001982  0012               	return	
  3827  001984                     __end_ofPL36:
  3828                           	opt stack 0
  3829  001984                     PL38:
  3830                           	opt stack 21
  3831  001984  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3832  001988  0E01               	movlw	1
  3833  00198A  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3834  00198C  6BD4               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3835  00198E  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3836  001990  0012               	return	
  3837  001992                     __end_ofPL38:
  3838                           	opt stack 0
  3839  001992                     PL50:
  3840                           	opt stack 21
  3841  001992  0E5B               	movlw	91
  3842  001994  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3843  001996  6E08               	movwf	?_Read_b_eep,c
  3844  001998  6A09               	clrf	?_Read_b_eep+1,c
  3845  00199A  0E00               	movlw	0
  3846  00199C  2209               	addwfc	?_Read_b_eep+1,f,c
  3847  00199E  0C00               	retlw	0
  3848  0019A0                     __end_ofPL50:
  3849                           	opt stack 0
  3850  0019A0                     PL104:
  3851                           	opt stack 21
  3852  0019A0  90D8               	bcf	status,0,c
  3853  0019A2  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3854  0019A4  37D4               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3855  0019A6  0012               	return	
  3856  0019A8                     __end_ofPL104:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           tblptrh	equ	0xFF7
  3860                           tblptrl	equ	0xFF6
  3861                           tablat	equ	0xFF5
  3862                           prodh	equ	0xFF4
  3863                           prodl	equ	0xFF3
  3864                           intcon	equ	0xFF2
  3865                           intcon2	equ	0xFF1
  3866                           postinc0	equ	0xFEE
  3867                           wreg	equ	0xFE8
  3868                           indf1	equ	0xFE7
  3869                           fsr1h	equ	0xFE2
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           plusw2	equ	0xFDB
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _vscp_doOneSecondWork *****************
  3880 ;; Defined at:
  3881 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;		None               void
  3888 ;; Registers used:
  3889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : F/0
  3892 ;;		On exit  : F/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3895 ;;      Params:         0       0       0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0
  3897 ;;      Temps:          1       0       0       0       0       0       0
  3898 ;;      Totals:         1       0       0       0       0       0       0
  3899 ;;Total ram usage:        1 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    8
  3902 ;; This function calls:
  3903 ;;		_vscp_getZone
  3904 ;;		_vscp_getSubzone
  3905 ;;		_vscp_sendHeartBeat
  3906 ;; This function is called by:
  3907 ;;		_main
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text3
  3912  0040FA                     __ptext3:
  3913                           	opt stack 0
  3914  0040FA                     _vscp_doOneSecondWork:
  3915                           	opt stack 21
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;vscp_firmware.c: 526: ++vscp_second;
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;incstack = 0
  3922                           ;incstack = 0
  3923  0040FA  2B82               	incf	_vscp_second& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  3927  0040FC  0E3B               	movlw	59
  3928  0040FE  6582               	cpfsgt	_vscp_second& (0+255),b
  3929  004100  D00D               	goto	l13488
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;vscp_firmware.c: 529: vscp_second = 0;
  3933  004102  6B82               	clrf	_vscp_second& (0+255),b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;vscp_firmware.c: 530: vscp_minute++;
  3937  004104  2B7D               	incf	_vscp_minute& (0+255),f,b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  3941  004106  517F               	movf	_vscp_node_state& (0+255),w,b
  3942  004108  0A03               	xorlw	3
  3943  00410A  E108               	bnz	l13488
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  3947                           ;vscp_firmware.c: 535: vscp_getSubzone());
  3948  00410C  EC33  F023         	call	_vscp_getSubzone	;wreg free
  3949  004110  0100               	movlb	0	; () banked
  3950  004112  6FD0               	movwf	?_vscp_sendHeartBeat& (0+255),b
  3951  004114  EC38  F023         	call	_vscp_getZone	;wreg free
  3952  004118  ECDB  F021         	call	_vscp_sendHeartBeat
  3953  00411C                     l13488:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;vscp_firmware.c: 536: }
  3957                           ;vscp_firmware.c: 537: }
  3958                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  3959  00411C  0E3B               	movlw	59
  3960  00411E  657D               	cpfsgt	_vscp_minute& (0+255),b
  3961  004120  D002               	goto	l13494
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;vscp_firmware.c: 540: vscp_minute = 0;
  3965  004122  6B7D               	clrf	_vscp_minute& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;vscp_firmware.c: 541: vscp_hour++;
  3969  004124  2B7B               	incf	_vscp_hour& (0+255),f,b
  3970  004126                     l13494:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;vscp_firmware.c: 542: }
  3974                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  3975  004126  0E17               	movlw	23
  3976  004128  657B               	cpfsgt	_vscp_hour& (0+255),b
  3977  00412A  D001               	goto	l13498
  3978                           
  3979                           ; BSR set to: 0
  3980  00412C  6B7B               	clrf	_vscp_hour& (0+255),b
  3981  00412E                     l13498:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  3985  00412E  517F               	movf	_vscp_node_state& (0+255),w,b
  3986  004130  0A03               	xorlw	3
  3987  004132  E109               	bnz	l1357
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  3991  004134  2B7A               	incf	_vscp_guid_reset& (0+255),f,b
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  3995  004136  C07A  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  3996  00413A  0E0F               	movlw	15
  3997  00413C  164D               	andwf	??_vscp_doOneSecondWork,f,c
  3998  00413E  0E02               	movlw	2
  3999  004140  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  4000  004142  B0D8               	btfsc	status,0,c
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  4004  004144  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  4005  004146                     l1357:
  4006                           
  4007                           ; BSR set to: 0
  4008  004146  0012               	return	
  4009  004148                     __end_of_vscp_doOneSecondWork:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           prodh	equ	0xFF4
  4016                           prodl	equ	0xFF3
  4017                           intcon	equ	0xFF2
  4018                           intcon2	equ	0xFF1
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           indf1	equ	0xFE7
  4022                           fsr1h	equ	0xFE2
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           plusw2	equ	0xFDB
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _vscp_sendHeartBeat *****************
  4033 ;; Defined at:
  4034 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  zone            1    wreg     unsigned char 
  4037 ;;  subzone         1   20[BANK0 ] unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  zone            1   75[COMRAM] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;		None               void
  4042 ;; Registers used:
  4043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : F/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4049 ;;      Params:         0       1       0       0       0       0       0
  4050 ;;      Locals:         1       0       0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0
  4052 ;;      Totals:         1       1       0       0       0       0       0
  4053 ;;Total ram usage:        2 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    7
  4056 ;; This function calls:
  4057 ;;		_vscp_sendEvent
  4058 ;; This function is called by:
  4059 ;;		_vscp_doOneSecondWork
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text4
  4064  0043B6                     __ptext4:
  4065                           	opt stack 0
  4066  0043B6                     _vscp_sendHeartBeat:
  4067                           	opt stack 21
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;incstack = 0
  4071                           ;incstack = 0
  4072                           ;vscp_sendHeartBeat@zone stored from wreg
  4073  0043B6  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  4074                           
  4075                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4076  0043BA  0E83               	movlw	131
  4077  0043BC  0100               	movlb	0	; () banked
  4078  0043BE  6FA5               	movwf	_vscp_omsg& (0+255),b
  4079                           
  4080                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4081  0043C0  0E07               	movlw	7
  4082  0043C2  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  4083                           
  4084                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4085  0043C4  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  4086  0043C6  0E14               	movlw	20
  4087  0043C8  6FA7               	movwf	(_vscp_omsg+2)& (0+255),b
  4088                           
  4089                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4090  0043CA  0E09               	movlw	9
  4091  0043CC  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4095  0043CE  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  4099  0043D0  C04C  F0AB         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  4103  0043D4  C0D0  F0AC         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;vscp_firmware.c: 388: vscp_sendEvent();
  4107  0043D8  EF14  F022         	goto	_vscp_sendEvent	;wreg free
  4108  0043DC                     __end_of_vscp_sendHeartBeat:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           intcon2	equ	0xFF1
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           indf1	equ	0xFE7
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           plusw2	equ	0xFDB
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _vscp_getSubzone *****************
  4132 ;; Defined at:
  4133 ;;		line 1385 in file "../main.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      unsigned char 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : F/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4147 ;;      Params:         0       0       0       0       0       0       0
  4148 ;;      Locals:         0       0       0       0       0       0       0
  4149 ;;      Temps:          0       0       0       0       0       0       0
  4150 ;;      Totals:         0       0       0       0       0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    3
  4154 ;; This function calls:
  4155 ;;		_Read_b_eep
  4156 ;; This function is called by:
  4157 ;;		_vscp_doOneSecondWork
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text5
  4162  004666                     __ptext5:
  4163                           	opt stack 0
  4164  004666                     _vscp_getSubzone:
  4165                           	opt stack 25
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;main.c: 1386: return Read_b_eep(0x43 + 1);
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;incstack = 0
  4172                           ;incstack = 0
  4173  004666  6A09               	clrf	?_Read_b_eep+1,c
  4174  004668  0E44               	movlw	68
  4175  00466A  6E08               	movwf	?_Read_b_eep,c
  4176  00466C  EF21  F023         	goto	_Read_b_eep	;wreg free
  4177  004670                     __end_of_vscp_getSubzone:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           intcon2	equ	0xFF1
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           indf1	equ	0xFE7
  4190                           fsr1h	equ	0xFE2
  4191                           fsr1l	equ	0xFE1
  4192                           indf2	equ	0xFDF
  4193                           postinc2	equ	0xFDE
  4194                           postdec2	equ	0xFDD
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _vscp_getZone *****************
  4201 ;; Defined at:
  4202 ;;		line 1376 in file "../main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      unsigned char 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : F/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4216 ;;      Params:         0       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		_Read_b_eep
  4225 ;; This function is called by:
  4226 ;;		_vscp_doOneSecondWork
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text6
  4231  004670                     __ptext6:
  4232                           	opt stack 0
  4233  004670                     _vscp_getZone:
  4234                           	opt stack 25
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;main.c: 1377: return Read_b_eep(0x43 + 0);
  4238                           
  4239                           ;incstack = 0
  4240                           ;incstack = 0
  4241  004670  6A09               	clrf	?_Read_b_eep+1,c
  4242  004672  0E43               	movlw	67
  4243  004674  6E08               	movwf	?_Read_b_eep,c
  4244  004676  EF21  F023         	goto	_Read_b_eep	;wreg free
  4245  00467A                     __end_of_vscp_getZone:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           intcon2	equ	0xFF1
  4255                           postinc0	equ	0xFEE
  4256                           wreg	equ	0xFE8
  4257                           indf1	equ	0xFE7
  4258                           fsr1h	equ	0xFE2
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           plusw2	equ	0xFDB
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _vscp_error *****************
  4269 ;; Defined at:
  4270 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;		None               void
  4277 ;; Registers used:
  4278 ;;		None
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4284 ;;      Params:         0       0       0       0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0
  4287 ;;      Totals:         0       0       0       0       0       0       0
  4288 ;;Total ram usage:        0 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    2
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text7
  4299  0046B0                     __ptext7:
  4300                           	opt stack 0
  4301  0046B0                     _vscp_error:
  4302                           	opt stack 27
  4303                           
  4304                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  4305                           
  4306                           ;incstack = 0
  4307                           ;incstack = 0
  4308  0046B0  6A56               	clrf	_vscp_initledfunc,c
  4309  0046B2  0012               	return	
  4310  0046B4                     __end_of_vscp_error:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           intcon2	equ	0xFF1
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           indf1	equ	0xFE7
  4323                           fsr1h	equ	0xFE2
  4324                           fsr1l	equ	0xFE1
  4325                           indf2	equ	0xFDF
  4326                           postinc2	equ	0xFDE
  4327                           postdec2	equ	0xFDD
  4328                           plusw2	equ	0xFDB
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _doDM *****************
  4334 ;; Defined at:
  4335 ;;		line 2523 in file "../main.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  class_mask      2   32[BANK0 ] unsigned short 
  4340 ;;  class_filter    2   30[BANK0 ] unsigned short 
  4341 ;;  i               1   44[BANK0 ] unsigned char 
  4342 ;;  dmflags         1   43[BANK0 ] unsigned char 
  4343 ;;  type_mask       1   35[BANK0 ] unsigned char 
  4344 ;;  type_filter     1   34[BANK0 ] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;		None               void
  4347 ;; Registers used:
  4348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : F/0
  4351 ;;		On exit  : F/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4354 ;;      Params:         0       0       0       0       0       0       0
  4355 ;;      Locals:         0      15       0       0       0       0       0
  4356 ;;      Temps:          0       3       0       0       0       0       0
  4357 ;;      Totals:         0      18       0       0       0       0       0
  4358 ;;Total ram usage:       18 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    9
  4361 ;; This function calls:
  4362 ;;		_Read_b_eep
  4363 ;;		_doActionOff
  4364 ;;		_doActionOn
  4365 ;;		_doActionPulseOn
  4366 ;;		_doActionPulseOff
  4367 ;;		_doActionStatus
  4368 ;;		_doActionStatusAll
  4369 ;;		_doActionToggle
  4370 ;; This function is called by:
  4371 ;;		_main
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text8
  4376  002A28                     __ptext8:
  4377                           	opt stack 0
  4378  002A28                     _doDM:
  4379                           	opt stack 20
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;main.c: 2524: unsigned char i;
  4383                           ;main.c: 2525: unsigned char dmflags;
  4384                           ;main.c: 2526: unsigned short class_filter;
  4385                           ;main.c: 2527: unsigned short class_mask;
  4386                           ;main.c: 2528: unsigned char type_filter;
  4387                           ;main.c: 2529: unsigned char type_mask;
  4388                           ;main.c: 2532: if ( 0 == vscp_imsg.vscp_class ) return;
  4389                           
  4390                           ;incstack = 0
  4391                           ;incstack = 0
  4392  002A28  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  4393  002A2A  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  4394  002A2C  E101 D105          	bz	l866
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;main.c: 2534: for (i = 0; i<8; i++) {
  4398  002A30  6BE8               	clrf	doDM@i& (0+255),b
  4399  002A32                     l13396:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 2537: dmflags = Read_b_eep(0x43 + 46 + 40u + 0 + 1 + (8 * i));
  4403  002A32  51E8               	movf	doDM@i& (0+255),w,b
  4404  002A34  D90D               	call	PL44	;call to abstracted procedure
  4405  002A36  0E9A               	movlw	154
  4406  002A38  25D7               	addwf	??_doDM& (0+255),w,b
  4407  002A3A  6E08               	movwf	?_Read_b_eep,c
  4408  002A3C  0E00               	movlw	0
  4409  002A3E  21D8               	addwfc	(??_doDM+1)& (0+255),w,b
  4410  002A40  6E09               	movwf	?_Read_b_eep+1,c
  4411  002A42  EC21  F023         	call	_Read_b_eep	;wreg free
  4412  002A46  0100               	movlb	0	; () banked
  4413  002A48  6FE7               	movwf	doDM@dmflags& (0+255),b
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;main.c: 2545: if ( dmflags & 0x80 ) {
  4417  002A4A  AFE7               	btfss	doDM@dmflags& (0+255),7,b
  4418  002A4C  D0F1               	goto	l13458
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 2548: if ( ( dmflags & 0x40 ) &&
  4422                           ;main.c: 2549: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i)) ) ) {
  4423  002A4E  ADE7               	btfss	doDM@dmflags& (0+255),6,b
  4424  002A50  D00E               	goto	l870
  4425                           
  4426                           ; BSR set to: 0
  4427  002A52  51E8               	movf	doDM@i& (0+255),w,b
  4428  002A54  D8FD               	call	PL44	;call to abstracted procedure
  4429  002A56  0E99               	movlw	153
  4430  002A58  25D7               	addwf	??_doDM& (0+255),w,b
  4431  002A5A  6E08               	movwf	?_Read_b_eep,c
  4432  002A5C  0E00               	movlw	0
  4433  002A5E  21D8               	addwfc	(??_doDM+1)& (0+255),w,b
  4434  002A60  6E09               	movwf	?_Read_b_eep+1,c
  4435  002A62  EC21  F023         	call	_Read_b_eep	;wreg free
  4436  002A66  0100               	movlb	0	; () banked
  4437  002A68  199C               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  4438  002A6A  E001 D0E1          	bnz	l13458
  4439  002A6E                     l870:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;main.c: 2551: }
  4443                           ;main.c: 2554: if ( dmflags & 0x10 ) {
  4444  002A6E  A9E7               	btfss	doDM@dmflags& (0+255),4,b
  4445  002A70  D00B               	goto	l872
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 2555: if ( 255 != vscp_imsg.data[ 1 ] ) {
  4449  002A72  299E               	incf	(_vscp_imsg+7)& (0+255),w,b
  4450  002A74  E009               	bz	l872
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;main.c: 2556: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 0) ) {
  4454  002A76  6A09               	clrf	?_Read_b_eep+1,c
  4455  002A78  0E43               	movlw	67
  4456  002A7A  6E08               	movwf	?_Read_b_eep,c
  4457  002A7C  EC21  F023         	call	_Read_b_eep	;wreg free
  4458  002A80  0100               	movlb	0	; () banked
  4459  002A82  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4460  002A84  E001 D0D4          	bnz	l13458
  4461  002A88                     l872:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 2558: }
  4465                           ;main.c: 2559: }
  4466                           ;main.c: 2560: }
  4467                           ;main.c: 2563: if ( dmflags & 0x08 ) {
  4468  002A88  A7E7               	btfss	doDM@dmflags& (0+255),3,b
  4469  002A8A  D00B               	goto	l13418
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;main.c: 2564: if ( 255 != vscp_imsg.data[ 2 ] ) {
  4473  002A8C  299F               	incf	(_vscp_imsg+8)& (0+255),w,b
  4474  002A8E  E009               	bz	l13418
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;main.c: 2565: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 1) ) {
  4478  002A90  6A09               	clrf	?_Read_b_eep+1,c
  4479  002A92  0E44               	movlw	68
  4480  002A94  6E08               	movwf	?_Read_b_eep,c
  4481  002A96  EC21  F023         	call	_Read_b_eep	;wreg free
  4482  002A9A  0100               	movlb	0	; () banked
  4483  002A9C  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4484  002A9E  E001 D0C7          	bnz	l13458
  4485  002AA2                     l13418:
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;main.c: 2567: }
  4489                           ;main.c: 2568: }
  4490                           ;main.c: 2569: }
  4491                           ;main.c: 2571: class_filter = ( ( dmflags & 0x01) << 8 ) +
  4492                           ;main.c: 2572: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 3);
  4493  002AA2  51E8               	movf	doDM@i& (0+255),w,b
  4494  002AA4  0D08               	mullw	8
  4495  002AA6  0E9C               	movlw	156
  4496  002AA8  24F3               	addwf	prodl,w,c
  4497  002AAA  6E08               	movwf	?_Read_b_eep,c
  4498  002AAC  0E00               	movlw	0
  4499  002AAE  20F4               	addwfc	prodh,w,c
  4500  002AB0  6E09               	movwf	?_Read_b_eep+1,c
  4501  002AB2  EC21  F023         	call	_Read_b_eep	;wreg free
  4502  002AB6  0100               	movlb	0	; () banked
  4503  002AB8  6FD7               	movwf	??_doDM& (0+255),b
  4504  002ABA  51E7               	movf	doDM@dmflags& (0+255),w,b
  4505  002ABC  0B01               	andlw	1
  4506  002ABE  6FD9               	movwf	(??_doDM+2)& (0+255),b
  4507  002AC0  6BD8               	clrf	(??_doDM+1)& (0+255),b
  4508  002AC2  51D7               	movf	??_doDM& (0+255),w,b
  4509  002AC4  25D8               	addwf	(??_doDM+1)& (0+255),w,b
  4510  002AC6  6FDA               	movwf	doDM@class_filter& (0+255),b
  4511  002AC8  0E00               	movlw	0
  4512  002ACA  21D9               	addwfc	(??_doDM+2)& (0+255),w,b
  4513  002ACC  6FDB               	movwf	(doDM@class_filter+1)& (0+255),b
  4514                           
  4515                           ;main.c: 2578: class_mask = ( ( dmflags & 0x02 ) << 7 ) +
  4516                           ;main.c: 2579: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 2);
  4517  002ACE  51E8               	movf	doDM@i& (0+255),w,b
  4518  002AD0  0D08               	mullw	8
  4519  002AD2  0E9B               	movlw	155
  4520  002AD4  24F3               	addwf	prodl,w,c
  4521  002AD6  6E08               	movwf	?_Read_b_eep,c
  4522  002AD8  0E00               	movlw	0
  4523  002ADA  20F4               	addwfc	prodh,w,c
  4524  002ADC  6E09               	movwf	?_Read_b_eep+1,c
  4525  002ADE  EC21  F023         	call	_Read_b_eep	;wreg free
  4526  002AE2  0100               	movlb	0	; () banked
  4527  002AE4  6FD7               	movwf	??_doDM& (0+255),b
  4528  002AE6  51E7               	movf	doDM@dmflags& (0+255),w,b
  4529  002AE8  0B02               	andlw	2
  4530  002AEA  6FD8               	movwf	(??_doDM+1)& (0+255),b
  4531  002AEC  6BD9               	clrf	(??_doDM+2)& (0+255),b
  4532  002AEE  0E07               	movlw	7
  4533  002AF0                     u17475:
  4534  002AF0  90D8               	bcf	status,0,c
  4535  002AF2  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4536  002AF4  37D9               	rlcf	(??_doDM+2)& (0+255),f,b
  4537  002AF6  2EE8               	decfsz	wreg,f,c
  4538  002AF8  D7FB               	goto	u17475
  4539  002AFA  51D7               	movf	??_doDM& (0+255),w,b
  4540  002AFC  25D8               	addwf	(??_doDM+1)& (0+255),w,b
  4541  002AFE  6FDC               	movwf	doDM@class_mask& (0+255),b
  4542  002B00  0E00               	movlw	0
  4543  002B02  21D9               	addwfc	(??_doDM+2)& (0+255),w,b
  4544  002B04  6FDD               	movwf	(doDM@class_mask+1)& (0+255),b
  4545                           
  4546                           ;main.c: 2585: type_filter = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 5);
  4547  002B06  51E8               	movf	doDM@i& (0+255),w,b
  4548  002B08  0D08               	mullw	8
  4549  002B0A  0E9E               	movlw	158
  4550  002B0C  24F3               	addwf	prodl,w,c
  4551  002B0E  6E08               	movwf	?_Read_b_eep,c
  4552  002B10  0E00               	movlw	0
  4553  002B12  20F4               	addwfc	prodh,w,c
  4554  002B14  6E09               	movwf	?_Read_b_eep+1,c
  4555  002B16  EC21  F023         	call	_Read_b_eep	;wreg free
  4556  002B1A  0100               	movlb	0	; () banked
  4557  002B1C  6FDE               	movwf	doDM@type_filter& (0+255),b
  4558                           
  4559                           ;main.c: 2591: type_mask = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 4);
  4560  002B1E  51E8               	movf	doDM@i& (0+255),w,b
  4561  002B20  0D08               	mullw	8
  4562  002B22  0E9D               	movlw	157
  4563  002B24  24F3               	addwf	prodl,w,c
  4564  002B26  6E08               	movwf	?_Read_b_eep,c
  4565  002B28  0E00               	movlw	0
  4566  002B2A  20F4               	addwfc	prodh,w,c
  4567  002B2C  6E09               	movwf	?_Read_b_eep+1,c
  4568  002B2E  EC21  F023         	call	_Read_b_eep	;wreg free
  4569  002B32  0100               	movlb	0	; () banked
  4570  002B34  6FDF               	movwf	doDM@type_mask& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;main.c: 2597: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  4574                           ;main.c: 2598: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  4575  002B36  EE20  F099         	lfsr	2,_vscp_imsg+2
  4576  002B3A  CFDE F0D7          	movff	postinc2,??_doDM
  4577  002B3E  CFDD F0D8          	movff	postdec2,??_doDM+1
  4578  002B42  51DA               	movf	doDM@class_filter& (0+255),w,b
  4579  002B44  1BD7               	xorwf	??_doDM& (0+255),f,b
  4580  002B46  51DB               	movf	(doDM@class_filter+1)& (0+255),w,b
  4581  002B48  1BD8               	xorwf	(??_doDM+1)& (0+255),f,b
  4582  002B4A  51DC               	movf	doDM@class_mask& (0+255),w,b
  4583  002B4C  17D7               	andwf	??_doDM& (0+255),f,b
  4584  002B4E  51DD               	movf	(doDM@class_mask+1)& (0+255),w,b
  4585  002B50  17D8               	andwf	(??_doDM+1)& (0+255),f,b
  4586  002B52  51D8               	movf	(??_doDM+1)& (0+255),w,b
  4587  002B54  11D7               	iorwf	??_doDM& (0+255),w,b
  4588  002B56  E16C               	bnz	l13458
  4589                           
  4590                           ; BSR set to: 0
  4591  002B58  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  4592  002B5A  19DE               	xorwf	doDM@type_filter& (0+255),w,b
  4593  002B5C  15DF               	andwf	doDM@type_mask& (0+255),w,b
  4594  002B5E  E04E               	bz	l13456
  4595  002B60  D067               	goto	l13458
  4596  002B62                     l13426:
  4597                           
  4598                           ;main.c: 2609: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4599  002B62  D86C               	call	PL16	;call to abstracted procedure
  4600  002B64  EC21  F023         	call	_Read_b_eep	;wreg free
  4601  002B68  0100               	movlb	0	; () banked
  4602  002B6A  6FE0               	movwf	_doDM$2393& (0+255),b
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;main.c: 2609: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4606  002B6C  C0E0  F04F         	movff	_doDM$2393,?_doActionOn
  4607  002B70  51E7               	movf	doDM@dmflags& (0+255),w,b
  4608  002B72  ECD7  F01A         	call	_doActionOn
  4609                           
  4610                           ;main.c: 2612: break;
  4611  002B76  D05C               	goto	l13458
  4612  002B78                     l13430:
  4613                           
  4614                           ;main.c: 2615: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4615  002B78  D861               	call	PL16	;call to abstracted procedure
  4616  002B7A  EC21  F023         	call	_Read_b_eep	;wreg free
  4617  002B7E  0100               	movlb	0	; () banked
  4618  002B80  6FE1               	movwf	_doDM$2394& (0+255),b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;main.c: 2615: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4622  002B82  C0E1  F04F         	movff	_doDM$2394,?_doActionOff
  4623  002B86  51E7               	movf	doDM@dmflags& (0+255),w,b
  4624  002B88  EC6F  F01E         	call	_doActionOff
  4625                           
  4626                           ;main.c: 2618: break;
  4627  002B8C  D051               	goto	l13458
  4628  002B8E                     l13434:
  4629                           
  4630                           ;main.c: 2621: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4631  002B8E  D856               	call	PL16	;call to abstracted procedure
  4632  002B90  EC21  F023         	call	_Read_b_eep	;wreg free
  4633  002B94  0100               	movlb	0	; () banked
  4634  002B96  6FE2               	movwf	_doDM$2395& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;main.c: 2621: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4638  002B98  C0E2  F04F         	movff	_doDM$2395,?_doActionPulseOn
  4639  002B9C  51E7               	movf	doDM@dmflags& (0+255),w,b
  4640  002B9E  EC3D  F01A         	call	_doActionPulseOn
  4641                           
  4642                           ;main.c: 2624: break;
  4643  002BA2  D046               	goto	l13458
  4644  002BA4                     l13438:
  4645                           
  4646                           ;main.c: 2627: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4647  002BA4  D84B               	call	PL16	;call to abstracted procedure
  4648  002BA6  EC21  F023         	call	_Read_b_eep	;wreg free
  4649  002BAA  0100               	movlb	0	; () banked
  4650  002BAC  6FE3               	movwf	_doDM$2396& (0+255),b
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;main.c: 2627: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4654  002BAE  C0E3  F04F         	movff	_doDM$2396,?_doActionPulseOff
  4655  002BB2  51E7               	movf	doDM@dmflags& (0+255),w,b
  4656  002BB4  EC04  F01D         	call	_doActionPulseOff
  4657                           
  4658                           ;main.c: 2630: break;
  4659  002BB8  D03B               	goto	l13458
  4660  002BBA                     l13442:
  4661                           
  4662                           ;main.c: 2633: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4663  002BBA  D840               	call	PL16	;call to abstracted procedure
  4664  002BBC  EC21  F023         	call	_Read_b_eep	;wreg free
  4665  002BC0  0100               	movlb	0	; () banked
  4666  002BC2  6FE4               	movwf	_doDM$2397& (0+255),b
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 2633: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4670  002BC4  C0E4  F04F         	movff	_doDM$2397,?_doActionStatus
  4671  002BC8  51E7               	movf	doDM@dmflags& (0+255),w,b
  4672  002BCA  EC00  F01E         	call	_doActionStatus
  4673                           
  4674                           ;main.c: 2636: break;
  4675  002BCE  D030               	goto	l13458
  4676  002BD0                     l13446:
  4677                           
  4678                           ;main.c: 2639: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4679  002BD0  D835               	call	PL16	;call to abstracted procedure
  4680  002BD2  EC21  F023         	call	_Read_b_eep	;wreg free
  4681  002BD6  0100               	movlb	0	; () banked
  4682  002BD8  6FE5               	movwf	_doDM$2398& (0+255),b
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;main.c: 2639: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4686  002BDA  C0E5  F0D2         	movff	_doDM$2398,?_doActionStatusAll
  4687  002BDE  51E7               	movf	doDM@dmflags& (0+255),w,b
  4688  002BE0  EC8A  F022         	call	_doActionStatusAll
  4689                           
  4690                           ;main.c: 2642: break;
  4691  002BE4  D025               	goto	l13458
  4692  002BE6                     l13450:
  4693                           
  4694                           ;main.c: 2645: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4695  002BE6  D82A               	call	PL16	;call to abstracted procedure
  4696  002BE8  EC21  F023         	call	_Read_b_eep	;wreg free
  4697  002BEC  0100               	movlb	0	; () banked
  4698  002BEE  6FE6               	movwf	_doDM$2399& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;main.c: 2645: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4702  002BF0  C0E6  F04F         	movff	_doDM$2399,?_doActionToggle
  4703  002BF4  51E7               	movf	doDM@dmflags& (0+255),w,b
  4704  002BF6  EC84  F01D         	call	_doActionToggle
  4705                           
  4706                           ;main.c: 2648: break;
  4707  002BFA  D01A               	goto	l13458
  4708  002BFC                     l13456:
  4709                           
  4710                           ; BSR set to: 0
  4711  002BFC  51E8               	movf	doDM@i& (0+255),w,b
  4712  002BFE  0D08               	mullw	8
  4713  002C00  0E9F               	movlw	159
  4714  002C02  24F3               	addwf	prodl,w,c
  4715  002C04  6E08               	movwf	?_Read_b_eep,c
  4716  002C06  0E00               	movlw	0
  4717  002C08  20F4               	addwfc	prodh,w,c
  4718  002C0A  6E09               	movwf	?_Read_b_eep+1,c
  4719  002C0C  EC21  F023         	call	_Read_b_eep	;wreg free
  4720                           
  4721                           ; Switch size 1, requested type "space"
  4722                           ; Number of cases is 8, Range of values is 0 to 7
  4723                           ; switch strategies available:
  4724                           ; Name         Instructions Cycles
  4725                           ; simple_byte           25    13 (average)
  4726                           ;	Chosen strategy is simple_byte
  4727  002C10  0A00               	xorlw	0	; case 0
  4728  002C12  E00E               	bz	l13458
  4729  002C14  0A01               	xorlw	1	; case 1
  4730  002C16  E0A5               	bz	l13426
  4731  002C18  0A03               	xorlw	3	; case 2
  4732  002C1A  E0AE               	bz	l13430
  4733  002C1C  0A01               	xorlw	1	; case 3
  4734  002C1E  E0B7               	bz	l13434
  4735  002C20  0A07               	xorlw	7	; case 4
  4736  002C22  E0C0               	bz	l13438
  4737  002C24  0A01               	xorlw	1	; case 5
  4738  002C26  E0DF               	bz	l13450
  4739  002C28  0A03               	xorlw	3	; case 6
  4740  002C2A  E0C7               	bz	l13442
  4741  002C2C  0A01               	xorlw	1	; case 7
  4742  002C2E  E0D0               	bz	l13446
  4743  002C30                     l13458:
  4744  002C30  0100               	movlb	0	; () banked
  4745  002C32  2BE8               	incf	doDM@i& (0+255),f,b
  4746                           
  4747                           ; BSR set to: 0
  4748  002C34  0E07               	movlw	7
  4749  002C36  65E8               	cpfsgt	doDM@i& (0+255),b
  4750  002C38  D6FC               	goto	l13396
  4751  002C3A                     l866:
  4752                           
  4753                           ; BSR set to: 0
  4754  002C3A  0012               	return	
  4755  002C3C                     __end_of_doDM:
  4756                           	opt stack 0
  4757  002C3C                     PL16:
  4758                           	opt stack 20
  4759  002C3C  0100               	movlb	0	; () banked
  4760  002C3E  51E8               	movf	doDM@i& (0+255),w,b
  4761  002C40  0D08               	mullw	8
  4762  002C42  0EA0               	movlw	160
  4763  002C44  24F3               	addwf	prodl,w,c
  4764  002C46  6E08               	movwf	?_Read_b_eep,c
  4765  002C48  0E00               	movlw	0
  4766  002C4A  20F4               	addwfc	prodh,w,c
  4767  002C4C  6E09               	movwf	?_Read_b_eep+1,c
  4768  002C4E  0012               	return	
  4769  002C50                     __end_ofPL16:
  4770                           	opt stack 0
  4771  002C50                     PL44:
  4772                           	opt stack 20
  4773  002C50  6FD7               	movwf	??_doDM& (0+255),b
  4774  002C52  6BD8               	clrf	(??_doDM+1)& (0+255),b
  4775  002C54  90D8               	bcf	status,0,c
  4776  002C56  37D7               	rlcf	??_doDM& (0+255),f,b
  4777  002C58  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4778  002C5A  90D8               	bcf	status,0,c
  4779  002C5C  37D7               	rlcf	??_doDM& (0+255),f,b
  4780  002C5E  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4781  002C60  90D8               	bcf	status,0,c
  4782  002C62  37D7               	rlcf	??_doDM& (0+255),f,b
  4783  002C64  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4784  002C66  0012               	return	
  4785  002C68                     __end_ofPL44:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           indf1	equ	0xFE7
  4798                           fsr1h	equ	0xFE2
  4799                           fsr1l	equ	0xFE1
  4800                           indf2	equ	0xFDF
  4801                           postinc2	equ	0xFDE
  4802                           postdec2	equ	0xFDD
  4803                           plusw2	equ	0xFDB
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _doActionToggle *****************
  4809 ;; Defined at:
  4810 ;;		line 2996 in file "../main.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  dmflags         1    wreg     unsigned char 
  4813 ;;  arg             1   78[COMRAM] unsigned char 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  dmflags         1    0[COMRAM] unsigned char 
  4816 ;;  bOn             1   80[COMRAM] enum E15660
  4817 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;		None               void
  4820 ;; Registers used:
  4821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : F/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4827 ;;      Params:         1       0       0       0       0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0
  4830 ;;      Totals:         3       0       0       0       0       0       0
  4831 ;;Total ram usage:        3 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    7
  4834 ;; This function calls:
  4835 ;;		_Read_b_eep
  4836 ;;		_SendInformationEvent
  4837 ;; This function is called by:
  4838 ;;		_doDM
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text9
  4843  003B08                     __ptext9:
  4844                           	opt stack 0
  4845  003B08                     _doActionToggle:
  4846                           	opt stack 21
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;main.c: 2997: unsigned char ctrlreg;
  4850                           ;main.c: 2998: BOOL bOn = 0;
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854                           ;incstack = 0
  4855  003B08  6A51               	clrf	doActionToggle@bOn,c
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 3001: if ( arg > 9 ) return;
  4859  003B0A  0E09               	movlw	9
  4860  003B0C  644F               	cpfsgt	doActionToggle@arg,c
  4861  003B0E  D001               	goto	l14840
  4862  003B10  D076               	goto	l1005
  4863  003B12                     l14840:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 3003: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  4867  003B12  0E5B               	movlw	91
  4868  003B14  244F               	addwf	doActionToggle@arg,w,c
  4869  003B16  6E08               	movwf	?_Read_b_eep,c
  4870  003B18  6A09               	clrf	?_Read_b_eep+1,c
  4871  003B1A  0E00               	movlw	0
  4872  003B1C  2209               	addwfc	?_Read_b_eep+1,f,c
  4873  003B1E  EC21  F023         	call	_Read_b_eep	;wreg free
  4874  003B22  6E50               	movwf	doActionToggle@ctrlreg,c
  4875                           
  4876                           ;main.c: 3006: if ( !( ctrlreg & 0x80 ) ) return;
  4877  003B24  AE50               	btfss	doActionToggle@ctrlreg,7,c
  4878  003B26  D06B               	goto	l1005
  4879  003B28  D03F               	goto	l14888
  4880  003B2A                     l1008:
  4881                           
  4882                           ;main.c: 3011: if ( PORTBbits.RB0 ) {
  4883  003B2A  A081               	btfss	3969,0,c	;volatile
  4884  003B2C  D002               	goto	l1009
  4885                           
  4886                           ;main.c: 3012: PORTBbits.RB0 = 0;
  4887  003B2E  9081               	bcf	3969,0,c	;volatile
  4888  003B30  D037               	goto	L18
  4889  003B32                     l1009:
  4890                           
  4891                           ;main.c: 3015: else {
  4892                           ;main.c: 3016: PORTBbits.RB0 = 1;
  4893  003B32  8081               	bsf	3969,0,c	;volatile
  4894  003B34                     l14848:
  4895                           
  4896                           ;main.c: 3017: bOn = 1;
  4897  003B34  0E01               	movlw	1
  4898  003B36  6E51               	movwf	doActionToggle@bOn,c
  4899  003B38  D04B               	goto	l14890
  4900  003B3A                     l1012:
  4901                           
  4902                           ;main.c: 3022: if ( PORTBbits.RB1 ) {
  4903  003B3A  A281               	btfss	3969,1,c	;volatile
  4904  003B3C  D002               	goto	l1013
  4905                           
  4906                           ;main.c: 3023: PORTBbits.RB1 = 0;
  4907  003B3E  9281               	bcf	3969,1,c	;volatile
  4908  003B40  D02F               	goto	L18
  4909  003B42                     l1013:
  4910                           
  4911                           ;main.c: 3026: else {
  4912                           ;main.c: 3027: PORTBbits.RB1 = 1;
  4913  003B42  8281               	bsf	3969,1,c	;volatile
  4914  003B44  D7F7               	goto	l14848
  4915  003B46                     l1015:
  4916                           
  4917                           ;main.c: 3033: if ( PORTCbits.RC3 ) {
  4918  003B46  A682               	btfss	3970,3,c	;volatile
  4919  003B48  D002               	goto	l1016
  4920                           
  4921                           ;main.c: 3034: PORTCbits.RC3 = 0;
  4922  003B4A  9682               	bcf	3970,3,c	;volatile
  4923  003B4C  D029               	goto	L18
  4924  003B4E                     l1016:
  4925                           
  4926                           ;main.c: 3037: else {
  4927                           ;main.c: 3038: PORTCbits.RC3 = 1;
  4928  003B4E  8682               	bsf	3970,3,c	;volatile
  4929  003B50  D7F1               	goto	l14848
  4930  003B52                     l1018:
  4931                           
  4932                           ;main.c: 3044: if ( PORTCbits.RC4 ) {
  4933  003B52  A882               	btfss	3970,4,c	;volatile
  4934  003B54  D002               	goto	l1019
  4935                           
  4936                           ;main.c: 3045: PORTCbits.RC4 = 0;
  4937  003B56  9882               	bcf	3970,4,c	;volatile
  4938  003B58  D023               	goto	L18
  4939  003B5A                     l1019:
  4940                           
  4941                           ;main.c: 3048: else {
  4942                           ;main.c: 3049: PORTCbits.RC4 = 1;
  4943  003B5A  8882               	bsf	3970,4,c	;volatile
  4944  003B5C  D7EB               	goto	l14848
  4945  003B5E                     l1021:
  4946                           
  4947                           ;main.c: 3055: if ( PORTCbits.RC5 ) {
  4948  003B5E  AA82               	btfss	3970,5,c	;volatile
  4949  003B60  D002               	goto	l1022
  4950                           
  4951                           ;main.c: 3056: PORTCbits.RC5 = 0;
  4952  003B62  9A82               	bcf	3970,5,c	;volatile
  4953  003B64  D01D               	goto	L18
  4954  003B66                     l1022:
  4955                           
  4956                           ;main.c: 3059: else {
  4957                           ;main.c: 3060: PORTCbits.RC5 = 1;
  4958  003B66  8A82               	bsf	3970,5,c	;volatile
  4959  003B68  D7E5               	goto	l14848
  4960  003B6A                     l1024:
  4961                           
  4962                           ;main.c: 3066: if ( PORTCbits.RC6 ) {
  4963  003B6A  AC82               	btfss	3970,6,c	;volatile
  4964  003B6C  D002               	goto	l1025
  4965                           
  4966                           ;main.c: 3067: PORTCbits.RC6 = 0;
  4967  003B6E  9C82               	bcf	3970,6,c	;volatile
  4968  003B70  D017               	goto	L18
  4969  003B72                     l1025:
  4970                           
  4971                           ;main.c: 3070: else {
  4972                           ;main.c: 3071: PORTCbits.RC6 = 1;
  4973  003B72  8C82               	bsf	3970,6,c	;volatile
  4974  003B74  D7DF               	goto	l14848
  4975  003B76                     l1027:
  4976                           
  4977                           ;main.c: 3077: if ( PORTCbits.RC7 ) {
  4978  003B76  AE82               	btfss	3970,7,c	;volatile
  4979  003B78  D002               	goto	l1028
  4980                           
  4981                           ;main.c: 3078: PORTCbits.RC7 = 0;
  4982  003B7A  9E82               	bcf	3970,7,c	;volatile
  4983  003B7C  D011               	goto	L18
  4984  003B7E                     l1028:
  4985                           
  4986                           ;main.c: 3081: else {
  4987                           ;main.c: 3082: PORTCbits.RC7 = 1;
  4988  003B7E  8E82               	bsf	3970,7,c	;volatile
  4989  003B80  D7D9               	goto	l14848
  4990  003B82                     l1030:
  4991                           
  4992                           ;main.c: 3088: if ( PORTAbits.RA2 ) {
  4993  003B82  A480               	btfss	3968,2,c	;volatile
  4994  003B84  D002               	goto	l1031
  4995                           
  4996                           ;main.c: 3089: PORTAbits.RA2 = 0;
  4997  003B86  9480               	bcf	3968,2,c	;volatile
  4998  003B88  D00B               	goto	L18
  4999  003B8A                     l1031:
  5000                           
  5001                           ;main.c: 3092: else {
  5002                           ;main.c: 3093: PORTAbits.RA2 = 1;
  5003  003B8A  8480               	bsf	3968,2,c	;volatile
  5004  003B8C  D7D3               	goto	l14848
  5005  003B8E                     l1033:
  5006                           
  5007                           ;main.c: 3099: if ( PORTAbits.RA1 ) {
  5008  003B8E  A280               	btfss	3968,1,c	;volatile
  5009  003B90  D002               	goto	l1034
  5010                           
  5011                           ;main.c: 3100: PORTAbits.RA1 = 0;
  5012  003B92  9280               	bcf	3968,1,c	;volatile
  5013  003B94  D005               	goto	L18
  5014  003B96                     l1034:
  5015                           
  5016                           ;main.c: 3103: else {
  5017                           ;main.c: 3104: PORTAbits.RA1 = 1;
  5018  003B96  8280               	bsf	3968,1,c	;volatile
  5019  003B98  D7CD               	goto	l14848
  5020  003B9A                     l1036:
  5021                           
  5022                           ;main.c: 3110: if ( PORTAbits.RA0 ) {
  5023  003B9A  A080               	btfss	3968,0,c	;volatile
  5024  003B9C  D003               	goto	l1037
  5025                           
  5026                           ;main.c: 3111: PORTAbits.RA0 = 0;
  5027  003B9E  9080               	bcf	3968,0,c	;volatile
  5028  003BA0                     L18:
  5029                           
  5030                           ;main.c: 3112: bOn = 0;
  5031  003BA0  6A51               	clrf	doActionToggle@bOn,c
  5032                           
  5033                           ;main.c: 3113: }
  5034  003BA2  D016               	goto	l14890
  5035  003BA4                     l1037:
  5036                           
  5037                           ;main.c: 3114: else {
  5038                           ;main.c: 3115: PORTAbits.RA0 = 1;
  5039  003BA4  8080               	bsf	3968,0,c	;volatile
  5040  003BA6  D7C6               	goto	l14848
  5041  003BA8                     l14888:
  5042  003BA8  504F               	movf	doActionToggle@arg,w,c
  5043                           
  5044                           ; Switch size 1, requested type "space"
  5045                           ; Number of cases is 10, Range of values is 0 to 9
  5046                           ; switch strategies available:
  5047                           ; Name         Instructions Cycles
  5048                           ; simple_byte           31    16 (average)
  5049                           ;	Chosen strategy is simple_byte
  5050  003BAA  E0BF               	bz	l1008
  5051  003BAC  0A01               	xorlw	1	; case 1
  5052  003BAE  E0C5               	bz	l1012
  5053  003BB0  0A03               	xorlw	3	; case 2
  5054  003BB2  E0C9               	bz	l1015
  5055  003BB4  0A01               	xorlw	1	; case 3
  5056  003BB6  E0CD               	bz	l1018
  5057  003BB8  0A07               	xorlw	7	; case 4
  5058  003BBA  E0D1               	bz	l1021
  5059  003BBC  0A01               	xorlw	1	; case 5
  5060  003BBE  E0D5               	bz	l1024
  5061  003BC0  0A03               	xorlw	3	; case 6
  5062  003BC2  E0D9               	bz	l1027
  5063  003BC4  0A01               	xorlw	1	; case 7
  5064  003BC6  E0DD               	bz	l1030
  5065  003BC8  0A0F               	xorlw	15	; case 8
  5066  003BCA  E0E1               	bz	l1033
  5067  003BCC  0A01               	xorlw	1	; case 9
  5068  003BCE  E0E5               	bz	l1036
  5069  003BD0                     l14890:
  5070                           
  5071                           ;main.c: 3121: if ( bOn ) {
  5072  003BD0  5051               	movf	doActionToggle@bOn,w,c
  5073  003BD2  E00B               	bz	l1039
  5074                           
  5075                           ;main.c: 3124: if ( ctrlreg & 0x08 ) {
  5076  003BD4  A650               	btfss	doActionToggle@ctrlreg,3,c
  5077  003BD6  D013               	goto	l1005
  5078                           
  5079                           ;main.c: 3125: SendInformationEvent( arg,
  5080                           ;main.c: 3126: 20,
  5081                           ;main.c: 3127: 3 );
  5082  003BD8  0E14               	movlw	20
  5083  003BDA  0100               	movlb	0	; () banked
  5084  003BDC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5085  003BDE  0E03               	movlw	3
  5086  003BE0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5087  003BE2  504F               	movf	doActionToggle@arg,w,c
  5088  003BE4  EC54  F020         	call	_SendInformationEvent
  5089  003BE8  D00A               	goto	l1005
  5090  003BEA                     l1039:
  5091                           
  5092                           ;main.c: 3131: else {
  5093                           ;main.c: 3134: if ( ctrlreg & 0x10 ) {
  5094  003BEA  A850               	btfss	doActionToggle@ctrlreg,4,c
  5095  003BEC  D008               	goto	l1005
  5096                           
  5097                           ;main.c: 3135: SendInformationEvent( arg,
  5098                           ;main.c: 3136: 20,
  5099                           ;main.c: 3137: 4 );
  5100  003BEE  0E14               	movlw	20
  5101  003BF0  0100               	movlb	0	; () banked
  5102  003BF2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5103  003BF4  0E04               	movlw	4
  5104  003BF6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5105  003BF8  504F               	movf	doActionToggle@arg,w,c
  5106  003BFA  EC54  F020         	call	_SendInformationEvent
  5107  003BFE                     l1005:
  5108  003BFE  0012               	return	
  5109  003C00                     __end_of_doActionToggle:
  5110                           	opt stack 0
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           prodh	equ	0xFF4
  5116                           prodl	equ	0xFF3
  5117                           intcon	equ	0xFF2
  5118                           intcon2	equ	0xFF1
  5119                           postinc0	equ	0xFEE
  5120                           wreg	equ	0xFE8
  5121                           indf1	equ	0xFE7
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           plusw2	equ	0xFDB
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _doActionStatusAll *****************
  5133 ;; Defined at:
  5134 ;;		line 3232 in file "../main.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  dmflags         1    wreg     unsigned char 
  5137 ;;  arg             1   22[BANK0 ] unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  dmflags         1   23[BANK0 ] unsigned char 
  5140 ;;  i               1   24[BANK0 ] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : F/0
  5147 ;;		On exit  : F/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5150 ;;      Params:         0       1       0       0       0       0       0
  5151 ;;      Locals:         0       2       0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0
  5153 ;;      Totals:         0       3       0       0       0       0       0
  5154 ;;Total ram usage:        3 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    8
  5157 ;; This function calls:
  5158 ;;		_doActionStatus
  5159 ;; This function is called by:
  5160 ;;		_doDM
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text10
  5165  004514                     __ptext10:
  5166                           	opt stack 0
  5167  004514                     _doActionStatusAll:
  5168                           	opt stack 20
  5169                           
  5170                           ;incstack = 0
  5171                           ;incstack = 0
  5172                           ;doActionStatusAll@dmflags stored from wreg
  5173  004514  CFE8 F0D3          	movff	wreg,doActionStatusAll@dmflags
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;main.c: 3233: uint8_t i;
  5177                           ;main.c: 3235: for ( i=0; i<9; i++ ) {
  5178  004518  6BD4               	clrf	doActionStatusAll@i& (0+255),b
  5179  00451A                     l14828:
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;main.c: 3236: doActionStatus( dmflags, i );
  5183  00451A  C0D4  F04F         	movff	doActionStatusAll@i,?_doActionStatus
  5184  00451E  51D3               	movf	doActionStatusAll@dmflags& (0+255),w,b
  5185  004520  EC00  F01E         	call	_doActionStatus
  5186  004524  0100               	movlb	0	; () banked
  5187  004526  2BD4               	incf	doActionStatusAll@i& (0+255),f,b
  5188                           
  5189                           ; BSR set to: 0
  5190  004528  0E08               	movlw	8
  5191  00452A  65D4               	cpfsgt	doActionStatusAll@i& (0+255),b
  5192  00452C  D7F6               	goto	l14828
  5193                           
  5194                           ; BSR set to: 0
  5195  00452E  0C08               	retlw	8
  5196  004530                     __end_of_doActionStatusAll:
  5197                           	opt stack 0
  5198                           tblptru	equ	0xFF8
  5199                           tblptrh	equ	0xFF7
  5200                           tblptrl	equ	0xFF6
  5201                           tablat	equ	0xFF5
  5202                           prodh	equ	0xFF4
  5203                           prodl	equ	0xFF3
  5204                           intcon	equ	0xFF2
  5205                           intcon2	equ	0xFF1
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           plusw2	equ	0xFDB
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _doActionStatus *****************
  5220 ;; Defined at:
  5221 ;;		line 3150 in file "../main.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  dmflags         1    wreg     unsigned char 
  5224 ;;  arg             1   78[COMRAM] unsigned char 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  dmflags         1    0[COMRAM] unsigned char 
  5227 ;;  bOn             1   80[COMRAM] enum E15660
  5228 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;		None               void
  5231 ;; Registers used:
  5232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : F/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5238 ;;      Params:         1       0       0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0
  5241 ;;      Totals:         3       0       0       0       0       0       0
  5242 ;;Total ram usage:        3 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    7
  5245 ;; This function calls:
  5246 ;;		_Read_b_eep
  5247 ;;		_SendInformationEvent
  5248 ;; This function is called by:
  5249 ;;		_doDM
  5250 ;;		_doActionStatusAll
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text11
  5255  003C00                     __ptext11:
  5256                           	opt stack 0
  5257  003C00                     _doActionStatus:
  5258                           	opt stack 20
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;main.c: 3151: unsigned char ctrlreg;
  5262                           ;main.c: 3152: BOOL bOn = 0;
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;incstack = 0
  5266                           ;incstack = 0
  5267  003C00  6A51               	clrf	doActionStatus@bOn,c
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;main.c: 3155: if ( arg > 9 ) return;
  5271  003C02  0E09               	movlw	9
  5272  003C04  644F               	cpfsgt	doActionStatus@arg,c
  5273  003C06  D001               	goto	l14784
  5274  003C08  D069               	goto	l1046
  5275  003C0A                     l14784:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;main.c: 3157: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5279  003C0A  0E5B               	movlw	91
  5280  003C0C  244F               	addwf	doActionStatus@arg,w,c
  5281  003C0E  6E08               	movwf	?_Read_b_eep,c
  5282  003C10  6A09               	clrf	?_Read_b_eep+1,c
  5283  003C12  0E00               	movlw	0
  5284  003C14  2209               	addwfc	?_Read_b_eep+1,f,c
  5285  003C16  EC21  F023         	call	_Read_b_eep	;wreg free
  5286  003C1A  6E50               	movwf	doActionStatus@ctrlreg,c
  5287                           
  5288                           ;main.c: 3160: if ( !( ctrlreg & 0x80 ) ) return;
  5289  003C1C  AE50               	btfss	doActionStatus@ctrlreg,7,c
  5290  003C1E  D05E               	goto	l1046
  5291  003C20  D032               	goto	l14812
  5292  003C22                     l14790:
  5293                           
  5294                           ;main.c: 3165: bOn = PORTBbits.RB0;
  5295  003C22  0E00               	movlw	0
  5296  003C24  B081               	btfsc	3969,0,c	;volatile
  5297  003C26  0E01               	movlw	1
  5298  003C28  6E51               	movwf	doActionStatus@bOn,c
  5299                           
  5300                           ;main.c: 3166: break;
  5301  003C2A  D041               	goto	l14814
  5302  003C2C                     l14792:
  5303                           
  5304                           ;main.c: 3169: bOn = PORTBbits.RB1;
  5305  003C2C  0E00               	movlw	0
  5306  003C2E  B281               	btfsc	3969,1,c	;volatile
  5307  003C30  0E01               	movlw	1
  5308  003C32  6E51               	movwf	doActionStatus@bOn,c
  5309                           
  5310                           ;main.c: 3170: break;
  5311  003C34  D03C               	goto	l14814
  5312  003C36                     l14794:
  5313                           
  5314                           ;main.c: 3173: bOn = PORTCbits.RC3;
  5315  003C36  0E00               	movlw	0
  5316  003C38  B682               	btfsc	3970,3,c	;volatile
  5317  003C3A  0E01               	movlw	1
  5318  003C3C  6E51               	movwf	doActionStatus@bOn,c
  5319                           
  5320                           ;main.c: 3174: break;
  5321  003C3E  D037               	goto	l14814
  5322  003C40                     l14796:
  5323                           
  5324                           ;main.c: 3177: bOn = PORTCbits.RC4;
  5325  003C40  0E00               	movlw	0
  5326  003C42  B882               	btfsc	3970,4,c	;volatile
  5327  003C44  0E01               	movlw	1
  5328  003C46  6E51               	movwf	doActionStatus@bOn,c
  5329                           
  5330                           ;main.c: 3178: break;
  5331  003C48  D032               	goto	l14814
  5332  003C4A                     l14798:
  5333                           
  5334                           ;main.c: 3181: bOn = PORTCbits.RC5;
  5335  003C4A  0E00               	movlw	0
  5336  003C4C  BA82               	btfsc	3970,5,c	;volatile
  5337  003C4E  0E01               	movlw	1
  5338  003C50  6E51               	movwf	doActionStatus@bOn,c
  5339                           
  5340                           ;main.c: 3182: break;
  5341  003C52  D02D               	goto	l14814
  5342  003C54                     l14800:
  5343                           
  5344                           ;main.c: 3185: bOn = PORTCbits.RC6;
  5345  003C54  0E00               	movlw	0
  5346  003C56  BC82               	btfsc	3970,6,c	;volatile
  5347  003C58  0E01               	movlw	1
  5348  003C5A  6E51               	movwf	doActionStatus@bOn,c
  5349                           
  5350                           ;main.c: 3186: break;
  5351  003C5C  D028               	goto	l14814
  5352  003C5E                     l14802:
  5353                           
  5354                           ;main.c: 3189: bOn = PORTCbits.RC7;
  5355  003C5E  0E00               	movlw	0
  5356  003C60  BE82               	btfsc	3970,7,c	;volatile
  5357  003C62  0E01               	movlw	1
  5358  003C64  6E51               	movwf	doActionStatus@bOn,c
  5359                           
  5360                           ;main.c: 3190: break;
  5361  003C66  D023               	goto	l14814
  5362  003C68                     l14804:
  5363                           
  5364                           ;main.c: 3193: bOn = PORTAbits.RA2;
  5365  003C68  0E00               	movlw	0
  5366  003C6A  B480               	btfsc	3968,2,c	;volatile
  5367  003C6C  0E01               	movlw	1
  5368  003C6E  6E51               	movwf	doActionStatus@bOn,c
  5369                           
  5370                           ;main.c: 3194: break;
  5371  003C70  D01E               	goto	l14814
  5372  003C72                     l14806:
  5373                           
  5374                           ;main.c: 3197: bOn = PORTAbits.RA1;
  5375  003C72  0E00               	movlw	0
  5376  003C74  B280               	btfsc	3968,1,c	;volatile
  5377  003C76  0E01               	movlw	1
  5378  003C78  6E51               	movwf	doActionStatus@bOn,c
  5379                           
  5380                           ;main.c: 3198: break;
  5381  003C7A  D019               	goto	l14814
  5382  003C7C                     l14808:
  5383                           
  5384                           ;main.c: 3201: bOn = PORTAbits.RA0;
  5385  003C7C  0E00               	movlw	0
  5386  003C7E  B080               	btfsc	3968,0,c	;volatile
  5387  003C80  0E01               	movlw	1
  5388  003C82  6E51               	movwf	doActionStatus@bOn,c
  5389                           
  5390                           ;main.c: 3202: break;
  5391  003C84  D014               	goto	l14814
  5392  003C86                     l14812:
  5393  003C86  504F               	movf	doActionStatus@arg,w,c
  5394                           
  5395                           ; Switch size 1, requested type "space"
  5396                           ; Number of cases is 10, Range of values is 0 to 9
  5397                           ; switch strategies available:
  5398                           ; Name         Instructions Cycles
  5399                           ; simple_byte           31    16 (average)
  5400                           ;	Chosen strategy is simple_byte
  5401  003C88  E0CC               	bz	l14790
  5402  003C8A  0A01               	xorlw	1	; case 1
  5403  003C8C  E0CF               	bz	l14792
  5404  003C8E  0A03               	xorlw	3	; case 2
  5405  003C90  E0D2               	bz	l14794
  5406  003C92  0A01               	xorlw	1	; case 3
  5407  003C94  E0D5               	bz	l14796
  5408  003C96  0A07               	xorlw	7	; case 4
  5409  003C98  E0D8               	bz	l14798
  5410  003C9A  0A01               	xorlw	1	; case 5
  5411  003C9C  E0DB               	bz	l14800
  5412  003C9E  0A03               	xorlw	3	; case 6
  5413  003CA0  E0DE               	bz	l14802
  5414  003CA2  0A01               	xorlw	1	; case 7
  5415  003CA4  E0E1               	bz	l14804
  5416  003CA6  0A0F               	xorlw	15	; case 8
  5417  003CA8  E0E4               	bz	l14806
  5418  003CAA  0A01               	xorlw	1	; case 9
  5419  003CAC  E0E7               	bz	l14808
  5420  003CAE                     l14814:
  5421                           
  5422                           ;main.c: 3206: if ( bOn ) {
  5423  003CAE  5051               	movf	doActionStatus@bOn,w,c
  5424  003CB0  E00B               	bz	l1060
  5425                           
  5426                           ;main.c: 3209: if ( ctrlreg & 0x10 ) {
  5427  003CB2  A850               	btfss	doActionStatus@ctrlreg,4,c
  5428  003CB4  D013               	goto	l1046
  5429                           
  5430                           ;main.c: 3210: SendInformationEvent( arg,
  5431                           ;main.c: 3211: 20,
  5432                           ;main.c: 3212: 4 );
  5433  003CB6  0E14               	movlw	20
  5434  003CB8  0100               	movlb	0	; () banked
  5435  003CBA  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5436  003CBC  0E04               	movlw	4
  5437  003CBE  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5438  003CC0  504F               	movf	doActionStatus@arg,w,c
  5439  003CC2  EC54  F020         	call	_SendInformationEvent
  5440  003CC6  D00A               	goto	l1046
  5441  003CC8                     l1060:
  5442                           
  5443                           ;main.c: 3216: else {
  5444                           ;main.c: 3218: if ( ctrlreg & 0x10 ) {
  5445  003CC8  A850               	btfss	doActionStatus@ctrlreg,4,c
  5446  003CCA  D008               	goto	l1046
  5447                           
  5448                           ;main.c: 3219: SendInformationEvent( arg,
  5449                           ;main.c: 3220: 20,
  5450                           ;main.c: 3221: 4 );
  5451  003CCC  0E14               	movlw	20
  5452  003CCE  0100               	movlb	0	; () banked
  5453  003CD0  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5454  003CD2  0E04               	movlw	4
  5455  003CD4  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5456  003CD6  504F               	movf	doActionStatus@arg,w,c
  5457  003CD8  EC54  F020         	call	_SendInformationEvent
  5458  003CDC                     l1046:
  5459  003CDC  0012               	return	
  5460  003CDE                     __end_of_doActionStatus:
  5461                           	opt stack 0
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           intcon2	equ	0xFF1
  5470                           postinc0	equ	0xFEE
  5471                           wreg	equ	0xFE8
  5472                           indf1	equ	0xFE7
  5473                           fsr1h	equ	0xFE2
  5474                           fsr1l	equ	0xFE1
  5475                           indf2	equ	0xFDF
  5476                           postinc2	equ	0xFDE
  5477                           postdec2	equ	0xFDD
  5478                           plusw2	equ	0xFDB
  5479                           fsr2h	equ	0xFDA
  5480                           fsr2l	equ	0xFD9
  5481                           status	equ	0xFD8
  5482                           
  5483 ;; *************** function _doActionPulseOff *****************
  5484 ;; Defined at:
  5485 ;;		line 2916 in file "../main.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  dmflags         1    wreg     unsigned char 
  5488 ;;  arg             1   78[COMRAM] unsigned char 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  dmflags         1    0[COMRAM] unsigned char 
  5491 ;;  bEvent          1   80[COMRAM] enum E15660
  5492 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;		None               void
  5495 ;; Registers used:
  5496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : F/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5502 ;;      Params:         1       0       0       0       0       0       0
  5503 ;;      Locals:         2       0       0       0       0       0       0
  5504 ;;      Temps:          0       5       0       0       0       0       0
  5505 ;;      Totals:         3       5       0       0       0       0       0
  5506 ;;Total ram usage:        8 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    7
  5509 ;; This function calls:
  5510 ;;		_Read_b_eep
  5511 ;;		_SendInformationEvent
  5512 ;; This function is called by:
  5513 ;;		_doDM
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text12
  5518  003A08                     __ptext12:
  5519                           	opt stack 0
  5520  003A08                     _doActionPulseOff:
  5521                           	opt stack 21
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;main.c: 2917: unsigned char ctrlreg;
  5525                           ;main.c: 2918: BOOL bEvent = 0;
  5526                           
  5527                           ;incstack = 0
  5528                           ;incstack = 0
  5529  003A08  6A51               	clrf	doActionPulseOff@bEvent,c
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;main.c: 2921: if ( arg > 9 ) return;
  5533  003A0A  0E09               	movlw	9
  5534  003A0C  644F               	cpfsgt	doActionPulseOff@arg,c
  5535  003A0E  D001               	goto	l14720
  5536  003A10  D07A               	goto	l977
  5537  003A12                     l14720:
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;main.c: 2923: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5541  003A12  0E5B               	movlw	91
  5542  003A14  244F               	addwf	doActionPulseOff@arg,w,c
  5543  003A16  6E08               	movwf	?_Read_b_eep,c
  5544  003A18  6A09               	clrf	?_Read_b_eep+1,c
  5545  003A1A  0E00               	movlw	0
  5546  003A1C  2209               	addwfc	?_Read_b_eep+1,f,c
  5547  003A1E  EC21  F023         	call	_Read_b_eep	;wreg free
  5548  003A22  6E50               	movwf	doActionPulseOff@ctrlreg,c
  5549                           
  5550                           ;main.c: 2926: if ( !( ctrlreg & 0x80 ) ) return;
  5551  003A24  AE50               	btfss	doActionPulseOff@ctrlreg,7,c
  5552  003A26  D06F               	goto	l977
  5553  003A28  D039               	goto	l14768
  5554  003A2A                     l980:
  5555                           
  5556                           ;main.c: 2931: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5557  003A2A  A081               	btfss	3969,0,c	;volatile
  5558  003A2C  D002               	goto	l14728
  5559  003A2E  0E01               	movlw	1
  5560  003A30  6E51               	movwf	doActionPulseOff@bEvent,c
  5561  003A32                     l14728:
  5562                           
  5563                           ;main.c: 2932: PORTBbits.RB0 = 0;
  5564  003A32  9081               	bcf	3969,0,c	;volatile
  5565                           
  5566                           ;main.c: 2933: break;
  5567  003A34  D047               	goto	l14770
  5568  003A36                     l983:
  5569                           
  5570                           ;main.c: 2936: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5571  003A36  A281               	btfss	3969,1,c	;volatile
  5572  003A38  D002               	goto	l14732
  5573  003A3A  0E01               	movlw	1
  5574  003A3C  6E51               	movwf	doActionPulseOff@bEvent,c
  5575  003A3E                     l14732:
  5576                           
  5577                           ;main.c: 2937: PORTBbits.RB1 = 0;
  5578  003A3E  9281               	bcf	3969,1,c	;volatile
  5579                           
  5580                           ;main.c: 2938: break;
  5581  003A40  D041               	goto	l14770
  5582  003A42                     l985:
  5583                           
  5584                           ;main.c: 2941: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5585  003A42  A682               	btfss	3970,3,c	;volatile
  5586  003A44  D002               	goto	l14736
  5587  003A46  0E01               	movlw	1
  5588  003A48  6E51               	movwf	doActionPulseOff@bEvent,c
  5589  003A4A                     l14736:
  5590                           
  5591                           ;main.c: 2942: PORTCbits.RC3 = 0;
  5592  003A4A  9682               	bcf	3970,3,c	;volatile
  5593                           
  5594                           ;main.c: 2943: break;
  5595  003A4C  D03B               	goto	l14770
  5596  003A4E                     l987:
  5597                           
  5598                           ;main.c: 2946: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5599  003A4E  A882               	btfss	3970,4,c	;volatile
  5600  003A50  D002               	goto	l14740
  5601  003A52  0E01               	movlw	1
  5602  003A54  6E51               	movwf	doActionPulseOff@bEvent,c
  5603  003A56                     l14740:
  5604                           
  5605                           ;main.c: 2947: PORTCbits.RC4 = 0;
  5606  003A56  9882               	bcf	3970,4,c	;volatile
  5607                           
  5608                           ;main.c: 2948: break;
  5609  003A58  D035               	goto	l14770
  5610  003A5A                     l989:
  5611                           
  5612                           ;main.c: 2951: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5613  003A5A  AA82               	btfss	3970,5,c	;volatile
  5614  003A5C  D002               	goto	l14744
  5615  003A5E  0E01               	movlw	1
  5616  003A60  6E51               	movwf	doActionPulseOff@bEvent,c
  5617  003A62                     l14744:
  5618                           
  5619                           ;main.c: 2952: PORTCbits.RC5 = 0;
  5620  003A62  9A82               	bcf	3970,5,c	;volatile
  5621                           
  5622                           ;main.c: 2953: break;
  5623  003A64  D02F               	goto	l14770
  5624  003A66                     l991:
  5625                           
  5626                           ;main.c: 2956: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5627  003A66  AC82               	btfss	3970,6,c	;volatile
  5628  003A68  D002               	goto	l14748
  5629  003A6A  0E01               	movlw	1
  5630  003A6C  6E51               	movwf	doActionPulseOff@bEvent,c
  5631  003A6E                     l14748:
  5632                           
  5633                           ;main.c: 2957: PORTCbits.RC6 = 0;
  5634  003A6E  9C82               	bcf	3970,6,c	;volatile
  5635                           
  5636                           ;main.c: 2958: break;
  5637  003A70  D029               	goto	l14770
  5638  003A72                     l993:
  5639                           
  5640                           ;main.c: 2961: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5641  003A72  AE82               	btfss	3970,7,c	;volatile
  5642  003A74  D002               	goto	l14752
  5643  003A76  0E01               	movlw	1
  5644  003A78  6E51               	movwf	doActionPulseOff@bEvent,c
  5645  003A7A                     l14752:
  5646                           
  5647                           ;main.c: 2962: PORTCbits.RC7 = 0;
  5648  003A7A  9E82               	bcf	3970,7,c	;volatile
  5649                           
  5650                           ;main.c: 2963: break;
  5651  003A7C  D023               	goto	l14770
  5652  003A7E                     l995:
  5653                           
  5654                           ;main.c: 2966: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5655  003A7E  A480               	btfss	3968,2,c	;volatile
  5656  003A80  D002               	goto	l14756
  5657  003A82                     l14754:
  5658  003A82  0E01               	movlw	1
  5659  003A84  6E51               	movwf	doActionPulseOff@bEvent,c
  5660  003A86                     l14756:
  5661                           
  5662                           ;main.c: 2967: PORTAbits.RA2 = 0;
  5663  003A86  9480               	bcf	3968,2,c	;volatile
  5664                           
  5665                           ;main.c: 2968: break;
  5666  003A88  D01D               	goto	l14770
  5667  003A8A                     l997:
  5668                           
  5669                           ;main.c: 2971: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5670  003A8A  A280               	btfss	3968,1,c	;volatile
  5671  003A8C  D002               	goto	l14760
  5672  003A8E  0E01               	movlw	1
  5673  003A90  6E51               	movwf	doActionPulseOff@bEvent,c
  5674  003A92                     l14760:
  5675                           
  5676                           ;main.c: 2972: PORTAbits.RA1 = 0;
  5677  003A92  9280               	bcf	3968,1,c	;volatile
  5678                           
  5679                           ;main.c: 2973: break;
  5680  003A94  D017               	goto	l14770
  5681  003A96                     l999:
  5682                           
  5683                           ;main.c: 2976: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5684  003A96  B080               	btfsc	3968,0,c	;volatile
  5685  003A98  D7F4               	goto	l14754
  5686  003A9A  D7F5               	goto	l14756
  5687  003A9C                     l14768:
  5688  003A9C  504F               	movf	doActionPulseOff@arg,w,c
  5689                           
  5690                           ; Switch size 1, requested type "space"
  5691                           ; Number of cases is 10, Range of values is 0 to 9
  5692                           ; switch strategies available:
  5693                           ; Name         Instructions Cycles
  5694                           ; simple_byte           31    16 (average)
  5695                           ;	Chosen strategy is simple_byte
  5696  003A9E  E0C5               	bz	l980
  5697  003AA0  0A01               	xorlw	1	; case 1
  5698  003AA2  E0C9               	bz	l983
  5699  003AA4  0A03               	xorlw	3	; case 2
  5700  003AA6  E0CD               	bz	l985
  5701  003AA8  0A01               	xorlw	1	; case 3
  5702  003AAA  E0D1               	bz	l987
  5703  003AAC  0A07               	xorlw	7	; case 4
  5704  003AAE  E0D5               	bz	l989
  5705  003AB0  0A01               	xorlw	1	; case 5
  5706  003AB2  E0D9               	bz	l991
  5707  003AB4  0A03               	xorlw	3	; case 6
  5708  003AB6  E0DD               	bz	l993
  5709  003AB8  0A01               	xorlw	1	; case 7
  5710  003ABA  E0E1               	bz	l995
  5711  003ABC  0A0F               	xorlw	15	; case 8
  5712  003ABE  E0E5               	bz	l997
  5713  003AC0  0A01               	xorlw	1	; case 9
  5714  003AC2  E0E9               	bz	l999
  5715  003AC4                     l14770:
  5716                           
  5717                           ;main.c: 2983: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  5718  003AC4  5051               	movf	doActionPulseOff@bEvent,w,c
  5719  003AC6  A4D8               	btfss	status,2,c
  5720  003AC8  A850               	btfss	doActionPulseOff@ctrlreg,4,c
  5721  003ACA  D008               	goto	l14776
  5722                           
  5723                           ;main.c: 2984: SendInformationEvent( arg, 20, 4 );
  5724  003ACC  0E14               	movlw	20
  5725  003ACE  0100               	movlb	0	; () banked
  5726  003AD0  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5727  003AD2  0E04               	movlw	4
  5728  003AD4  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5729  003AD6  504F               	movf	doActionPulseOff@arg,w,c
  5730  003AD8  EC54  F020         	call	_SendInformationEvent
  5731  003ADC                     l14776:
  5732                           
  5733                           ;main.c: 2985: }
  5734                           ;main.c: 2987: channel_pulse_flags &= ~( 1 << arg );
  5735  003ADC  C04F  F0D2         	movff	doActionPulseOff@arg,??_doActionPulseOff
  5736  003AE0  0E01               	movlw	1
  5737  003AE2  0100               	movlb	0	; () banked
  5738  003AE4  6FD3               	movwf	(??_doActionPulseOff+1)& (0+255),b
  5739  003AE6  6BD4               	clrf	(??_doActionPulseOff+2)& (0+255),b
  5740  003AE8  2BD2               	incf	??_doActionPulseOff& (0+255),f,b
  5741  003AEA  D003               	goto	u19874
  5742  003AEC                     u19875:
  5743  003AEC  90D8               	bcf	status,0,c
  5744  003AEE  37D3               	rlcf	(??_doActionPulseOff+1)& (0+255),f,b
  5745  003AF0  37D4               	rlcf	(??_doActionPulseOff+2)& (0+255),f,b
  5746  003AF2                     u19874:
  5747  003AF2  2FD2               	decfsz	??_doActionPulseOff& (0+255),f,b
  5748  003AF4  D7FB               	goto	u19875
  5749  003AF6  1DD3               	comf	(??_doActionPulseOff+1)& (0+255),w,b
  5750  003AF8  6FD5               	movwf	(??_doActionPulseOff+3)& (0+255),b
  5751  003AFA  1DD4               	comf	(??_doActionPulseOff+2)& (0+255),w,b
  5752  003AFC  6FD6               	movwf	(??_doActionPulseOff+4)& (0+255),b
  5753  003AFE  51D5               	movf	(??_doActionPulseOff+3)& (0+255),w,b
  5754  003B00  1768               	andwf	_channel_pulse_flags& (0+255),f,b
  5755  003B02  51D6               	movf	(??_doActionPulseOff+4)& (0+255),w,b
  5756  003B04  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
  5757  003B06                     l977:
  5758  003B06  0012               	return	
  5759  003B08                     __end_of_doActionPulseOff:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           intcon2	equ	0xFF1
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           indf1	equ	0xFE7
  5772                           fsr1h	equ	0xFE2
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           plusw2	equ	0xFDB
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _doActionPulseOn *****************
  5783 ;; Defined at:
  5784 ;;		line 2832 in file "../main.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  dmflags         1    wreg     unsigned char 
  5787 ;;  arg             1   78[COMRAM] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  dmflags         1    0[COMRAM] unsigned char 
  5790 ;;  bEvent          1   80[COMRAM] enum E15660
  5791 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;		None               void
  5794 ;; Registers used:
  5795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : F/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5801 ;;      Params:         1       0       0       0       0       0       0
  5802 ;;      Locals:         2       0       0       0       0       0       0
  5803 ;;      Temps:          0       3       0       0       0       0       0
  5804 ;;      Totals:         3       3       0       0       0       0       0
  5805 ;;Total ram usage:        6 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    7
  5808 ;; This function calls:
  5809 ;;		_Read_b_eep
  5810 ;;		_SendInformationEvent
  5811 ;; This function is called by:
  5812 ;;		_doDM
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text13
  5817  00347A                     __ptext13:
  5818                           	opt stack 0
  5819  00347A                     _doActionPulseOn:
  5820                           	opt stack 21
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;main.c: 2833: unsigned char ctrlreg;
  5824                           ;main.c: 2834: BOOL bEvent = 0;
  5825                           
  5826                           ;incstack = 0
  5827                           ;incstack = 0
  5828  00347A  6A51               	clrf	doActionPulseOn@bEvent,c
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;main.c: 2837: if ( arg > 9 ) return;
  5832  00347C  0E09               	movlw	9
  5833  00347E  644F               	cpfsgt	doActionPulseOn@arg,c
  5834  003480  D001               	goto	l14654
  5835  003482  D094               	goto	l949
  5836  003484                     l14654:
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;main.c: 2839: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5840  003484  0E5B               	movlw	91
  5841  003486  244F               	addwf	doActionPulseOn@arg,w,c
  5842  003488  6E08               	movwf	?_Read_b_eep,c
  5843  00348A  6A09               	clrf	?_Read_b_eep+1,c
  5844  00348C  0E00               	movlw	0
  5845  00348E  2209               	addwfc	?_Read_b_eep+1,f,c
  5846  003490  EC21  F023         	call	_Read_b_eep	;wreg free
  5847  003494  6E50               	movwf	doActionPulseOn@ctrlreg,c
  5848                           
  5849                           ;main.c: 2842: if ( !( ctrlreg & 0x80 ) ) return;
  5850  003496  AE50               	btfss	doActionPulseOn@ctrlreg,7,c
  5851  003498  D089               	goto	l949
  5852  00349A  D039               	goto	l14702
  5853  00349C                     l952:
  5854                           
  5855                           ;main.c: 2847: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5856  00349C  A081               	btfss	3969,0,c	;volatile
  5857  00349E  D002               	goto	l14662
  5858  0034A0  0E01               	movlw	1
  5859  0034A2  6E51               	movwf	doActionPulseOn@bEvent,c
  5860  0034A4                     l14662:
  5861                           
  5862                           ;main.c: 2848: PORTBbits.RB0 = 0;
  5863  0034A4  9081               	bcf	3969,0,c	;volatile
  5864                           
  5865                           ;main.c: 2849: break;
  5866  0034A6  D047               	goto	l14704
  5867  0034A8                     l955:
  5868                           
  5869                           ;main.c: 2852: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5870  0034A8  A281               	btfss	3969,1,c	;volatile
  5871  0034AA  D002               	goto	l14666
  5872  0034AC  0E01               	movlw	1
  5873  0034AE  6E51               	movwf	doActionPulseOn@bEvent,c
  5874  0034B0                     l14666:
  5875                           
  5876                           ;main.c: 2853: PORTBbits.RB1 = 0;
  5877  0034B0  9281               	bcf	3969,1,c	;volatile
  5878                           
  5879                           ;main.c: 2854: break;
  5880  0034B2  D041               	goto	l14704
  5881  0034B4                     l957:
  5882                           
  5883                           ;main.c: 2857: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5884  0034B4  A682               	btfss	3970,3,c	;volatile
  5885  0034B6  D002               	goto	l14670
  5886  0034B8  0E01               	movlw	1
  5887  0034BA  6E51               	movwf	doActionPulseOn@bEvent,c
  5888  0034BC                     l14670:
  5889                           
  5890                           ;main.c: 2858: PORTCbits.RC3 = 0;
  5891  0034BC  9682               	bcf	3970,3,c	;volatile
  5892                           
  5893                           ;main.c: 2859: break;
  5894  0034BE  D03B               	goto	l14704
  5895  0034C0                     l959:
  5896                           
  5897                           ;main.c: 2862: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5898  0034C0  A882               	btfss	3970,4,c	;volatile
  5899  0034C2  D002               	goto	l14674
  5900  0034C4  0E01               	movlw	1
  5901  0034C6  6E51               	movwf	doActionPulseOn@bEvent,c
  5902  0034C8                     l14674:
  5903                           
  5904                           ;main.c: 2863: PORTCbits.RC4 = 0;
  5905  0034C8  9882               	bcf	3970,4,c	;volatile
  5906                           
  5907                           ;main.c: 2864: break;
  5908  0034CA  D035               	goto	l14704
  5909  0034CC                     l961:
  5910                           
  5911                           ;main.c: 2867: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5912  0034CC  AA82               	btfss	3970,5,c	;volatile
  5913  0034CE  D002               	goto	l14678
  5914  0034D0  0E01               	movlw	1
  5915  0034D2  6E51               	movwf	doActionPulseOn@bEvent,c
  5916  0034D4                     l14678:
  5917                           
  5918                           ;main.c: 2868: PORTCbits.RC5 = 0;
  5919  0034D4  9A82               	bcf	3970,5,c	;volatile
  5920                           
  5921                           ;main.c: 2869: break;
  5922  0034D6  D02F               	goto	l14704
  5923  0034D8                     l963:
  5924                           
  5925                           ;main.c: 2872: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5926  0034D8  AC82               	btfss	3970,6,c	;volatile
  5927  0034DA  D002               	goto	l14682
  5928  0034DC  0E01               	movlw	1
  5929  0034DE  6E51               	movwf	doActionPulseOn@bEvent,c
  5930  0034E0                     l14682:
  5931                           
  5932                           ;main.c: 2873: PORTCbits.RC6 = 0;
  5933  0034E0  9C82               	bcf	3970,6,c	;volatile
  5934                           
  5935                           ;main.c: 2874: break;
  5936  0034E2  D029               	goto	l14704
  5937  0034E4                     l965:
  5938                           
  5939                           ;main.c: 2877: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5940  0034E4  AE82               	btfss	3970,7,c	;volatile
  5941  0034E6  D002               	goto	l14686
  5942  0034E8  0E01               	movlw	1
  5943  0034EA  6E51               	movwf	doActionPulseOn@bEvent,c
  5944  0034EC                     l14686:
  5945                           
  5946                           ;main.c: 2878: PORTCbits.RC7 = 0;
  5947  0034EC  9E82               	bcf	3970,7,c	;volatile
  5948                           
  5949                           ;main.c: 2879: break;
  5950  0034EE  D023               	goto	l14704
  5951  0034F0                     l967:
  5952                           
  5953                           ;main.c: 2882: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5954  0034F0  A480               	btfss	3968,2,c	;volatile
  5955  0034F2  D002               	goto	l14690
  5956  0034F4                     l14688:
  5957  0034F4  0E01               	movlw	1
  5958  0034F6  6E51               	movwf	doActionPulseOn@bEvent,c
  5959  0034F8                     l14690:
  5960                           
  5961                           ;main.c: 2883: PORTAbits.RA2 = 0;
  5962  0034F8  9480               	bcf	3968,2,c	;volatile
  5963                           
  5964                           ;main.c: 2884: break;
  5965  0034FA  D01D               	goto	l14704
  5966  0034FC                     l969:
  5967                           
  5968                           ;main.c: 2887: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5969  0034FC  A280               	btfss	3968,1,c	;volatile
  5970  0034FE  D002               	goto	l14694
  5971  003500  0E01               	movlw	1
  5972  003502  6E51               	movwf	doActionPulseOn@bEvent,c
  5973  003504                     l14694:
  5974                           
  5975                           ;main.c: 2888: PORTAbits.RA1 = 0;
  5976  003504  9280               	bcf	3968,1,c	;volatile
  5977                           
  5978                           ;main.c: 2889: break;
  5979  003506  D017               	goto	l14704
  5980  003508                     l971:
  5981                           
  5982                           ;main.c: 2892: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5983  003508  B080               	btfsc	3968,0,c	;volatile
  5984  00350A  D7F4               	goto	l14688
  5985  00350C  D7F5               	goto	l14690
  5986  00350E                     l14702:
  5987  00350E  504F               	movf	doActionPulseOn@arg,w,c
  5988                           
  5989                           ; Switch size 1, requested type "space"
  5990                           ; Number of cases is 10, Range of values is 0 to 9
  5991                           ; switch strategies available:
  5992                           ; Name         Instructions Cycles
  5993                           ; simple_byte           31    16 (average)
  5994                           ;	Chosen strategy is simple_byte
  5995  003510  E0C5               	bz	l952
  5996  003512  0A01               	xorlw	1	; case 1
  5997  003514  E0C9               	bz	l955
  5998  003516  0A03               	xorlw	3	; case 2
  5999  003518  E0CD               	bz	l957
  6000  00351A  0A01               	xorlw	1	; case 3
  6001  00351C  E0D1               	bz	l959
  6002  00351E  0A07               	xorlw	7	; case 4
  6003  003520  E0D5               	bz	l961
  6004  003522  0A01               	xorlw	1	; case 5
  6005  003524  E0D9               	bz	l963
  6006  003526  0A03               	xorlw	3	; case 6
  6007  003528  E0DD               	bz	l965
  6008  00352A  0A01               	xorlw	1	; case 7
  6009  00352C  E0E1               	bz	l967
  6010  00352E  0A0F               	xorlw	15	; case 8
  6011  003530  E0E5               	bz	l969
  6012  003532  0A01               	xorlw	1	; case 9
  6013  003534  E0E9               	bz	l971
  6014  003536                     l14704:
  6015                           
  6016                           ;main.c: 2899: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6017  003536  5051               	movf	doActionPulseOn@bEvent,w,c
  6018  003538  A4D8               	btfss	status,2,c
  6019  00353A  A850               	btfss	doActionPulseOn@ctrlreg,4,c
  6020  00353C  D008               	goto	l14710
  6021                           
  6022                           ;main.c: 2900: SendInformationEvent( arg, 20, 4 );
  6023  00353E  0E14               	movlw	20
  6024  003540  0100               	movlb	0	; () banked
  6025  003542  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6026  003544  0E04               	movlw	4
  6027  003546  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6028  003548  504F               	movf	doActionPulseOn@arg,w,c
  6029  00354A  EC54  F020         	call	_SendInformationEvent
  6030  00354E                     l14710:
  6031                           
  6032                           ;main.c: 2901: }
  6033                           ;main.c: 2903: channel_pulse_flags |= ( 1 << arg );
  6034  00354E  C04F  F0D2         	movff	doActionPulseOn@arg,??_doActionPulseOn
  6035  003552  0E01               	movlw	1
  6036  003554  0100               	movlb	0	; () banked
  6037  003556  6FD3               	movwf	(??_doActionPulseOn+1)& (0+255),b
  6038  003558  6BD4               	clrf	(??_doActionPulseOn+2)& (0+255),b
  6039  00355A  2BD2               	incf	??_doActionPulseOn& (0+255),f,b
  6040  00355C  D003               	goto	u19724
  6041  00355E                     u19725:
  6042  00355E  90D8               	bcf	status,0,c
  6043  003560  37D3               	rlcf	(??_doActionPulseOn+1)& (0+255),f,b
  6044  003562  37D4               	rlcf	(??_doActionPulseOn+2)& (0+255),f,b
  6045  003564                     u19724:
  6046  003564  2FD2               	decfsz	??_doActionPulseOn& (0+255),f,b
  6047  003566  D7FB               	goto	u19725
  6048  003568  51D3               	movf	(??_doActionPulseOn+1)& (0+255),w,b
  6049  00356A  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  6050  00356C  51D4               	movf	(??_doActionPulseOn+2)& (0+255),w,b
  6051  00356E  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;main.c: 2904: channel_pulse_timer[ 0 ] =
  6055                           ;main.c: 2905: Read_b_eep(0x43 + 46 + 0u + arg) * 256 +
  6056                           ;main.c: 2907: Read_b_eep(0x43 + 46 + 1u + arg);
  6057  003570  0E72               	movlw	114
  6058  003572  244F               	addwf	doActionPulseOn@arg,w,c
  6059  003574  6E08               	movwf	?_Read_b_eep,c
  6060  003576  6A09               	clrf	?_Read_b_eep+1,c
  6061  003578  0E00               	movlw	0
  6062  00357A  2209               	addwfc	?_Read_b_eep+1,f,c
  6063  00357C  EC21  F023         	call	_Read_b_eep	;wreg free
  6064  003580  0100               	movlb	0	; () banked
  6065  003582  6FD2               	movwf	??_doActionPulseOn& (0+255),b
  6066  003584  0E71               	movlw	113
  6067  003586  244F               	addwf	doActionPulseOn@arg,w,c
  6068  003588  6E08               	movwf	?_Read_b_eep,c
  6069  00358A  6A09               	clrf	?_Read_b_eep+1,c
  6070  00358C  0E00               	movlw	0
  6071  00358E  2209               	addwfc	?_Read_b_eep+1,f,c
  6072  003590  EC21  F023         	call	_Read_b_eep	;wreg free
  6073  003594  0100               	movlb	0	; () banked
  6074  003596  6FD4               	movwf	(??_doActionPulseOn+2)& (0+255),b
  6075  003598  6BD3               	clrf	(??_doActionPulseOn+1)& (0+255),b
  6076  00359A  51D2               	movf	??_doActionPulseOn& (0+255),w,b
  6077  00359C  25D3               	addwf	(??_doActionPulseOn+1)& (0+255),w,b
  6078  00359E  0101               	movlb	1	; () banked
  6079  0035A0  6F00               	movwf	_channel_pulse_timer& (0+255),b
  6080  0035A2  0100               	movlb	0	; () banked
  6081  0035A4  0E00               	movlw	0
  6082  0035A6  21D4               	addwfc	(??_doActionPulseOn+2)& (0+255),w,b
  6083  0035A8  0101               	movlb	1	; () banked
  6084  0035AA  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
  6085  0035AC                     l949:
  6086  0035AC  0012               	return	
  6087  0035AE                     __end_of_doActionPulseOn:
  6088                           	opt stack 0
  6089                           tblptru	equ	0xFF8
  6090                           tblptrh	equ	0xFF7
  6091                           tblptrl	equ	0xFF6
  6092                           tablat	equ	0xFF5
  6093                           prodh	equ	0xFF4
  6094                           prodl	equ	0xFF3
  6095                           intcon	equ	0xFF2
  6096                           intcon2	equ	0xFF1
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           indf1	equ	0xFE7
  6100                           fsr1h	equ	0xFE2
  6101                           fsr1l	equ	0xFE1
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           plusw2	equ	0xFDB
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _doActionOn *****************
  6111 ;; Defined at:
  6112 ;;		line 2665 in file "../main.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  dmflags         1    wreg     unsigned char 
  6115 ;;  arg             1   78[COMRAM] unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  dmflags         1    0[COMRAM] unsigned char 
  6118 ;;  bEvent          1   23[BANK0 ] enum E15660
  6119 ;;  ctrlreg         1   22[BANK0 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;		None               void
  6122 ;; Registers used:
  6123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : F/0
  6126 ;;		On exit  : F/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6129 ;;      Params:         1       0       0       0       0       0       0
  6130 ;;      Locals:         0       2       0       0       0       0       0
  6131 ;;      Temps:          2       0       0       0       0       0       0
  6132 ;;      Totals:         3       2       0       0       0       0       0
  6133 ;;Total ram usage:        5 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    7
  6136 ;; This function calls:
  6137 ;;		_Read_b_eep
  6138 ;;		_SendInformationEvent
  6139 ;; This function is called by:
  6140 ;;		_doDM
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text14
  6145  0035AE                     __ptext14:
  6146                           	opt stack 0
  6147  0035AE                     _doActionOn:
  6148                           	opt stack 21
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;main.c: 2666: unsigned char ctrlreg;
  6152                           ;main.c: 2667: BOOL bEvent = 0;
  6153                           
  6154                           ;incstack = 0
  6155                           ;incstack = 0
  6156  0035AE  6BD3               	clrf	doActionOn@bEvent& (0+255),b
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;main.c: 2670: if ( arg > 9 ) return;
  6160  0035B0  0E09               	movlw	9
  6161  0035B2  644F               	cpfsgt	doActionOn@arg,c
  6162  0035B4  D001               	goto	l14590
  6163  0035B6  D08B               	goto	l892
  6164  0035B8                     l14590:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 2672: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6168  0035B8  0E5B               	movlw	91
  6169  0035BA  244F               	addwf	doActionOn@arg,w,c
  6170  0035BC  6E08               	movwf	?_Read_b_eep,c
  6171  0035BE  6A09               	clrf	?_Read_b_eep+1,c
  6172  0035C0  0E00               	movlw	0
  6173  0035C2  2209               	addwfc	?_Read_b_eep+1,f,c
  6174  0035C4  EC21  F023         	call	_Read_b_eep	;wreg free
  6175  0035C8  0100               	movlb	0	; () banked
  6176  0035CA  6FD2               	movwf	doActionOn@ctrlreg& (0+255),b
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;main.c: 2675: if ( !( ctrlreg & 0x80 ) ) return;
  6180  0035CC  AFD2               	btfss	doActionOn@ctrlreg& (0+255),7,b
  6181  0035CE  D07F               	goto	l892
  6182  0035D0  D039               	goto	l14638
  6183  0035D2                     l895:
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;main.c: 2680: if ( 0 == PORTBbits.RB0 ) bEvent = 1;
  6187  0035D2  B081               	btfsc	3969,0,c	;volatile
  6188  0035D4  D002               	goto	l14598
  6189                           
  6190                           ; BSR set to: 0
  6191  0035D6  0E01               	movlw	1
  6192  0035D8  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6193  0035DA                     l14598:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;main.c: 2681: PORTBbits.RB0 = 1;
  6197  0035DA  8081               	bsf	3969,0,c	;volatile
  6198                           
  6199                           ;main.c: 2682: break;
  6200  0035DC  D047               	goto	l897
  6201  0035DE                     l898:
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;main.c: 2685: if ( 0 == PORTBbits.RB1 ) bEvent = 1;
  6205  0035DE  B281               	btfsc	3969,1,c	;volatile
  6206  0035E0  D002               	goto	l14602
  6207                           
  6208                           ; BSR set to: 0
  6209  0035E2  0E01               	movlw	1
  6210  0035E4  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6211  0035E6                     l14602:
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;main.c: 2686: PORTBbits.RB1 = 1;
  6215  0035E6  8281               	bsf	3969,1,c	;volatile
  6216                           
  6217                           ;main.c: 2687: break;
  6218  0035E8  D041               	goto	l897
  6219  0035EA                     l900:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;main.c: 2690: if ( 0 == PORTCbits.RC3 ) bEvent = 1;
  6223  0035EA  B682               	btfsc	3970,3,c	;volatile
  6224  0035EC  D002               	goto	l14606
  6225                           
  6226                           ; BSR set to: 0
  6227  0035EE  0E01               	movlw	1
  6228  0035F0  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6229  0035F2                     l14606:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;main.c: 2691: PORTCbits.RC3 = 1;
  6233  0035F2  8682               	bsf	3970,3,c	;volatile
  6234                           
  6235                           ;main.c: 2692: break;
  6236  0035F4  D03B               	goto	l897
  6237  0035F6                     l902:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;main.c: 2695: if ( 0 == PORTCbits.RC4 ) bEvent = 1;
  6241  0035F6  B882               	btfsc	3970,4,c	;volatile
  6242  0035F8  D002               	goto	l14610
  6243                           
  6244                           ; BSR set to: 0
  6245  0035FA  0E01               	movlw	1
  6246  0035FC  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6247  0035FE                     l14610:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 2696: PORTCbits.RC4 = 1;
  6251  0035FE  8882               	bsf	3970,4,c	;volatile
  6252                           
  6253                           ;main.c: 2697: break;
  6254  003600  D035               	goto	l897
  6255  003602                     l904:
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 2700: if ( 0 == PORTCbits.RC5 ) bEvent = 1;
  6259  003602  BA82               	btfsc	3970,5,c	;volatile
  6260  003604  D002               	goto	l14614
  6261                           
  6262                           ; BSR set to: 0
  6263  003606  0E01               	movlw	1
  6264  003608  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6265  00360A                     l14614:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;main.c: 2701: PORTCbits.RC5 = 1;
  6269  00360A  8A82               	bsf	3970,5,c	;volatile
  6270                           
  6271                           ;main.c: 2702: break;
  6272  00360C  D02F               	goto	l897
  6273  00360E                     l906:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;main.c: 2705: if ( 0 == PORTCbits.RC6 ) bEvent = 1;
  6277  00360E  BC82               	btfsc	3970,6,c	;volatile
  6278  003610  D002               	goto	l14618
  6279                           
  6280                           ; BSR set to: 0
  6281  003612  0E01               	movlw	1
  6282  003614  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6283  003616                     l14618:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;main.c: 2706: PORTCbits.RC6 = 1;
  6287  003616  8C82               	bsf	3970,6,c	;volatile
  6288                           
  6289                           ;main.c: 2707: break;
  6290  003618  D029               	goto	l897
  6291  00361A                     l908:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;main.c: 2710: if ( 0 == PORTCbits.RC7 ) bEvent = 1;
  6295  00361A  BE82               	btfsc	3970,7,c	;volatile
  6296  00361C  D002               	goto	l14622
  6297                           
  6298                           ; BSR set to: 0
  6299  00361E  0E01               	movlw	1
  6300  003620  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6301  003622                     l14622:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;main.c: 2711: PORTCbits.RC7 = 1;
  6305  003622  8E82               	bsf	3970,7,c	;volatile
  6306                           
  6307                           ;main.c: 2712: break;
  6308  003624  D023               	goto	l897
  6309  003626                     l910:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 2715: if ( 0 == PORTAbits.RA2 ) bEvent = 1;
  6313  003626  B480               	btfsc	3968,2,c	;volatile
  6314  003628  D002               	goto	l14626
  6315  00362A                     l14624:
  6316                           
  6317                           ; BSR set to: 0
  6318  00362A  0E01               	movlw	1
  6319  00362C  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6320  00362E                     l14626:
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;main.c: 2716: PORTAbits.RA2 = 1;
  6324  00362E  8480               	bsf	3968,2,c	;volatile
  6325                           
  6326                           ;main.c: 2717: break;
  6327  003630  D01D               	goto	l897
  6328  003632                     l912:
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;main.c: 2720: if ( 0 == PORTAbits.RA1 ) bEvent = 1;
  6332  003632  B280               	btfsc	3968,1,c	;volatile
  6333  003634  D002               	goto	l14630
  6334                           
  6335                           ; BSR set to: 0
  6336  003636  0E01               	movlw	1
  6337  003638  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6338  00363A                     l14630:
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;main.c: 2721: PORTAbits.RA1 = 1;
  6342  00363A  8280               	bsf	3968,1,c	;volatile
  6343                           
  6344                           ;main.c: 2722: break;
  6345  00363C  D017               	goto	l897
  6346  00363E                     l914:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;main.c: 2725: if ( 0 == PORTAbits.RA0 ) bEvent = 1;
  6350  00363E  A080               	btfss	3968,0,c	;volatile
  6351  003640  D7F4               	goto	l14624
  6352  003642  D7F5               	goto	l14626
  6353  003644                     l14638:
  6354                           
  6355                           ; BSR set to: 0
  6356  003644  504F               	movf	doActionOn@arg,w,c
  6357                           
  6358                           ; Switch size 1, requested type "space"
  6359                           ; Number of cases is 10, Range of values is 0 to 9
  6360                           ; switch strategies available:
  6361                           ; Name         Instructions Cycles
  6362                           ; simple_byte           31    16 (average)
  6363                           ;	Chosen strategy is simple_byte
  6364  003646  E0C5               	bz	l895
  6365  003648  0A01               	xorlw	1	; case 1
  6366  00364A  E0C9               	bz	l898
  6367  00364C  0A03               	xorlw	3	; case 2
  6368  00364E  E0CD               	bz	l900
  6369  003650  0A01               	xorlw	1	; case 3
  6370  003652  E0D1               	bz	l902
  6371  003654  0A07               	xorlw	7	; case 4
  6372  003656  E0D5               	bz	l904
  6373  003658  0A01               	xorlw	1	; case 5
  6374  00365A  E0D9               	bz	l906
  6375  00365C  0A03               	xorlw	3	; case 6
  6376  00365E  E0DD               	bz	l908
  6377  003660  0A01               	xorlw	1	; case 7
  6378  003662  E0E1               	bz	l910
  6379  003664  0A0F               	xorlw	15	; case 8
  6380  003666  E0E5               	bz	l912
  6381  003668  0A01               	xorlw	1	; case 9
  6382  00366A  E0E9               	bz	l914
  6383  00366C                     l897:
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;main.c: 2731: if ( ctrlreg & 0x04 ) {
  6387  00366C  A5D2               	btfss	doActionOn@ctrlreg& (0+255),2,b
  6388  00366E  D024               	goto	l14642
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;main.c: 2732: channel_protection_timer[ arg ] =
  6392                           ;main.c: 2733: Read_b_eep(0x43 + 46 + 20u + 2 * arg) * 256 +
  6393                           ;main.c: 2737: Read_b_eep(0x43 + 46 + 21u + 2 * arg);
  6394  003670  504F               	movf	doActionOn@arg,w,c
  6395  003672  0D02               	mullw	2
  6396  003674  0E85               	movlw	133
  6397  003676  24F3               	addwf	prodl,w,c
  6398  003678  6E08               	movwf	?_Read_b_eep,c
  6399  00367A  0E00               	movlw	0
  6400  00367C  20F4               	addwfc	prodh,w,c
  6401  00367E  6E09               	movwf	?_Read_b_eep+1,c
  6402  003680  EC21  F023         	call	_Read_b_eep	;wreg free
  6403  003684  6E51               	movwf	(??_doActionOn+1)& (0+255),c
  6404  003686  6A50               	clrf	??_doActionOn& (0+255),c
  6405  003688  504F               	movf	doActionOn@arg,w,c
  6406  00368A  0D02               	mullw	2
  6407  00368C  0E86               	movlw	134
  6408  00368E  24F3               	addwf	prodl,w,c
  6409  003690  6E08               	movwf	?_Read_b_eep,c
  6410  003692  0E00               	movlw	0
  6411  003694  20F4               	addwfc	prodh,w,c
  6412  003696  6E09               	movwf	?_Read_b_eep+1,c
  6413  003698  EC21  F023         	call	_Read_b_eep	;wreg free
  6414  00369C  2650               	addwf	??_doActionOn,f,c
  6415  00369E  0E00               	movlw	0
  6416  0036A0  2251               	addwfc	??_doActionOn+1,f,c
  6417  0036A2  504F               	movf	doActionOn@arg,w,c
  6418  0036A4  0D02               	mullw	2
  6419  0036A6  50F3               	movf	prodl,w,c
  6420  0036A8  0100               	movlb	0	; () banked
  6421  0036AA  0F83               	addlw	low _channel_protection_timer
  6422  0036AC  6ED9               	movwf	fsr2l,c
  6423  0036AE  6ADA               	clrf	fsr2h,c
  6424  0036B0  C050  FFDE         	movff	??_doActionOn,postinc2
  6425  0036B4  C051  FFDD         	movff	??_doActionOn+1,postdec2
  6426  0036B8                     l14642:
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;main.c: 2741: }
  6430                           ;main.c: 2744: if ( bEvent && ( ctrlreg & 0x08 ) ) {
  6431  0036B8  51D3               	movf	doActionOn@bEvent& (0+255),w,b
  6432  0036BA  A4D8               	btfss	status,2,c
  6433                           
  6434                           ; BSR set to: 0
  6435  0036BC  A7D2               	btfss	doActionOn@ctrlreg& (0+255),3,b
  6436  0036BE  D007               	goto	l892
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;main.c: 2745: SendInformationEvent( arg, 20, 3 );
  6440  0036C0  0E14               	movlw	20
  6441  0036C2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6442  0036C4  0E03               	movlw	3
  6443  0036C6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6444  0036C8  504F               	movf	doActionOn@arg,w,c
  6445  0036CA  EC54  F020         	call	_SendInformationEvent
  6446  0036CE                     l892:
  6447                           
  6448                           ; BSR set to: 0
  6449  0036CE  0012               	return	
  6450  0036D0                     __end_of_doActionOn:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           intcon2	equ	0xFF1
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           indf1	equ	0xFE7
  6463                           fsr1h	equ	0xFE2
  6464                           fsr1l	equ	0xFE1
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _doActionOff *****************
  6474 ;; Defined at:
  6475 ;;		line 2755 in file "../main.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  dmflags         1    wreg     unsigned char 
  6478 ;;  arg             1   78[COMRAM] unsigned char 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  dmflags         1    0[COMRAM] unsigned char 
  6481 ;;  bEvent          1   80[COMRAM] enum E15660
  6482 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  6483 ;; Return value:  Size  Location     Type
  6484 ;;		None               void
  6485 ;; Registers used:
  6486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : F/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6492 ;;      Params:         1       0       0       0       0       0       0
  6493 ;;      Locals:         2       0       0       0       0       0       0
  6494 ;;      Temps:          0       0       0       0       0       0       0
  6495 ;;      Totals:         3       0       0       0       0       0       0
  6496 ;;Total ram usage:        3 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    7
  6499 ;; This function calls:
  6500 ;;		_Read_b_eep
  6501 ;;		_SendInformationEvent
  6502 ;; This function is called by:
  6503 ;;		_doApplicationOneSecondWork
  6504 ;;		_doDM
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text15
  6509  003CDE                     __ptext15:
  6510                           	opt stack 0
  6511  003CDE                     _doActionOff:
  6512                           	opt stack 21
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;main.c: 2756: unsigned char ctrlreg;
  6516                           ;main.c: 2757: BOOL bEvent = 0;
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;incstack = 0
  6520                           ;incstack = 0
  6521  003CDE  6A51               	clrf	doActionOff@bEvent,c
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;main.c: 2760: if ( arg > 9 ) return;
  6525  003CE0  0E09               	movlw	9
  6526  003CE2  644F               	cpfsgt	doActionOff@arg,c
  6527  003CE4  D001               	goto	l13712
  6528  003CE6  D065               	goto	l921
  6529  003CE8                     l13712:
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;main.c: 2762: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6533  003CE8  0E5B               	movlw	91
  6534  003CEA  244F               	addwf	doActionOff@arg,w,c
  6535  003CEC  6E08               	movwf	?_Read_b_eep,c
  6536  003CEE  6A09               	clrf	?_Read_b_eep+1,c
  6537  003CF0  0E00               	movlw	0
  6538  003CF2  2209               	addwfc	?_Read_b_eep+1,f,c
  6539  003CF4  EC21  F023         	call	_Read_b_eep	;wreg free
  6540  003CF8  6E50               	movwf	doActionOff@ctrlreg,c
  6541                           
  6542                           ;main.c: 2765: if ( !( ctrlreg & 0x80 ) ) return;
  6543  003CFA  AE50               	btfss	doActionOff@ctrlreg,7,c
  6544  003CFC  D05A               	goto	l921
  6545  003CFE  D039               	goto	l13760
  6546  003D00                     l924:
  6547                           
  6548                           ;main.c: 2770: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  6549  003D00  A081               	btfss	3969,0,c	;volatile
  6550  003D02  D002               	goto	l13720
  6551  003D04  0E01               	movlw	1
  6552  003D06  6E51               	movwf	doActionOff@bEvent,c
  6553  003D08                     l13720:
  6554                           
  6555                           ;main.c: 2771: PORTBbits.RB0 = 0;
  6556  003D08  9081               	bcf	3969,0,c	;volatile
  6557                           
  6558                           ;main.c: 2772: break;
  6559  003D0A  D047               	goto	l13762
  6560  003D0C                     l927:
  6561                           
  6562                           ;main.c: 2775: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  6563  003D0C  A281               	btfss	3969,1,c	;volatile
  6564  003D0E  D002               	goto	l13724
  6565  003D10  0E01               	movlw	1
  6566  003D12  6E51               	movwf	doActionOff@bEvent,c
  6567  003D14                     l13724:
  6568                           
  6569                           ;main.c: 2776: PORTBbits.RB1 = 0;
  6570  003D14  9281               	bcf	3969,1,c	;volatile
  6571                           
  6572                           ;main.c: 2777: break;
  6573  003D16  D041               	goto	l13762
  6574  003D18                     l929:
  6575                           
  6576                           ;main.c: 2780: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  6577  003D18  A682               	btfss	3970,3,c	;volatile
  6578  003D1A  D002               	goto	l13728
  6579  003D1C  0E01               	movlw	1
  6580  003D1E  6E51               	movwf	doActionOff@bEvent,c
  6581  003D20                     l13728:
  6582                           
  6583                           ;main.c: 2781: PORTCbits.RC3 = 0;
  6584  003D20  9682               	bcf	3970,3,c	;volatile
  6585                           
  6586                           ;main.c: 2782: break;
  6587  003D22  D03B               	goto	l13762
  6588  003D24                     l931:
  6589                           
  6590                           ;main.c: 2785: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  6591  003D24  A882               	btfss	3970,4,c	;volatile
  6592  003D26  D002               	goto	l13732
  6593  003D28  0E01               	movlw	1
  6594  003D2A  6E51               	movwf	doActionOff@bEvent,c
  6595  003D2C                     l13732:
  6596                           
  6597                           ;main.c: 2786: PORTCbits.RC4 = 0;
  6598  003D2C  9882               	bcf	3970,4,c	;volatile
  6599                           
  6600                           ;main.c: 2787: break;
  6601  003D2E  D035               	goto	l13762
  6602  003D30                     l933:
  6603                           
  6604                           ;main.c: 2790: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  6605  003D30  AA82               	btfss	3970,5,c	;volatile
  6606  003D32  D002               	goto	l13736
  6607  003D34  0E01               	movlw	1
  6608  003D36  6E51               	movwf	doActionOff@bEvent,c
  6609  003D38                     l13736:
  6610                           
  6611                           ;main.c: 2791: PORTCbits.RC5 = 0;
  6612  003D38  9A82               	bcf	3970,5,c	;volatile
  6613                           
  6614                           ;main.c: 2792: break;
  6615  003D3A  D02F               	goto	l13762
  6616  003D3C                     l935:
  6617                           
  6618                           ;main.c: 2795: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  6619  003D3C  AC82               	btfss	3970,6,c	;volatile
  6620  003D3E  D002               	goto	l13740
  6621  003D40  0E01               	movlw	1
  6622  003D42  6E51               	movwf	doActionOff@bEvent,c
  6623  003D44                     l13740:
  6624                           
  6625                           ;main.c: 2796: PORTCbits.RC6 = 0;
  6626  003D44  9C82               	bcf	3970,6,c	;volatile
  6627                           
  6628                           ;main.c: 2797: break;
  6629  003D46  D029               	goto	l13762
  6630  003D48                     l937:
  6631                           
  6632                           ;main.c: 2800: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  6633  003D48  AE82               	btfss	3970,7,c	;volatile
  6634  003D4A  D002               	goto	l13744
  6635  003D4C  0E01               	movlw	1
  6636  003D4E  6E51               	movwf	doActionOff@bEvent,c
  6637  003D50                     l13744:
  6638                           
  6639                           ;main.c: 2801: PORTCbits.RC7 = 0;
  6640  003D50  9E82               	bcf	3970,7,c	;volatile
  6641                           
  6642                           ;main.c: 2802: break;
  6643  003D52  D023               	goto	l13762
  6644  003D54                     l939:
  6645                           
  6646                           ;main.c: 2805: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  6647  003D54  A480               	btfss	3968,2,c	;volatile
  6648  003D56  D002               	goto	l13748
  6649  003D58                     l13746:
  6650  003D58  0E01               	movlw	1
  6651  003D5A  6E51               	movwf	doActionOff@bEvent,c
  6652  003D5C                     l13748:
  6653                           
  6654                           ;main.c: 2806: PORTAbits.RA2 = 0;
  6655  003D5C  9480               	bcf	3968,2,c	;volatile
  6656                           
  6657                           ;main.c: 2807: break;
  6658  003D5E  D01D               	goto	l13762
  6659  003D60                     l941:
  6660                           
  6661                           ;main.c: 2810: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  6662  003D60  A280               	btfss	3968,1,c	;volatile
  6663  003D62  D002               	goto	l13752
  6664  003D64  0E01               	movlw	1
  6665  003D66  6E51               	movwf	doActionOff@bEvent,c
  6666  003D68                     l13752:
  6667                           
  6668                           ;main.c: 2811: PORTAbits.RA1 = 0;
  6669  003D68  9280               	bcf	3968,1,c	;volatile
  6670                           
  6671                           ;main.c: 2812: break;
  6672  003D6A  D017               	goto	l13762
  6673  003D6C                     l943:
  6674                           
  6675                           ;main.c: 2815: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  6676  003D6C  B080               	btfsc	3968,0,c	;volatile
  6677  003D6E  D7F4               	goto	l13746
  6678  003D70  D7F5               	goto	l13748
  6679  003D72                     l13760:
  6680  003D72  504F               	movf	doActionOff@arg,w,c
  6681                           
  6682                           ; Switch size 1, requested type "space"
  6683                           ; Number of cases is 10, Range of values is 0 to 9
  6684                           ; switch strategies available:
  6685                           ; Name         Instructions Cycles
  6686                           ; simple_byte           31    16 (average)
  6687                           ;	Chosen strategy is simple_byte
  6688  003D74  E0C5               	bz	l924
  6689  003D76  0A01               	xorlw	1	; case 1
  6690  003D78  E0C9               	bz	l927
  6691  003D7A  0A03               	xorlw	3	; case 2
  6692  003D7C  E0CD               	bz	l929
  6693  003D7E  0A01               	xorlw	1	; case 3
  6694  003D80  E0D1               	bz	l931
  6695  003D82  0A07               	xorlw	7	; case 4
  6696  003D84  E0D5               	bz	l933
  6697  003D86  0A01               	xorlw	1	; case 5
  6698  003D88  E0D9               	bz	l935
  6699  003D8A  0A03               	xorlw	3	; case 6
  6700  003D8C  E0DD               	bz	l937
  6701  003D8E  0A01               	xorlw	1	; case 7
  6702  003D90  E0E1               	bz	l939
  6703  003D92  0A0F               	xorlw	15	; case 8
  6704  003D94  E0E5               	bz	l941
  6705  003D96  0A01               	xorlw	1	; case 9
  6706  003D98  E0E9               	bz	l943
  6707  003D9A                     l13762:
  6708                           
  6709                           ;main.c: 2822: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6710  003D9A  5051               	movf	doActionOff@bEvent,w,c
  6711  003D9C  A4D8               	btfss	status,2,c
  6712  003D9E  A850               	btfss	doActionOff@ctrlreg,4,c
  6713  003DA0  D008               	goto	l921
  6714                           
  6715                           ;main.c: 2823: SendInformationEvent( arg, 20, 4 );
  6716  003DA2  0E14               	movlw	20
  6717  003DA4  0100               	movlb	0	; () banked
  6718  003DA6  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6719  003DA8  0E04               	movlw	4
  6720  003DAA  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6721  003DAC  504F               	movf	doActionOff@arg,w,c
  6722  003DAE  EC54  F020         	call	_SendInformationEvent
  6723  003DB2                     l921:
  6724  003DB2  0012               	return	
  6725  003DB4                     __end_of_doActionOff:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           intcon2	equ	0xFF1
  6735                           postinc0	equ	0xFEE
  6736                           wreg	equ	0xFE8
  6737                           indf1	equ	0xFE7
  6738                           fsr1h	equ	0xFE2
  6739                           fsr1l	equ	0xFE1
  6740                           indf2	equ	0xFDF
  6741                           postinc2	equ	0xFDE
  6742                           postdec2	equ	0xFDD
  6743                           plusw2	equ	0xFDB
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function _vscp_handleProtocolEvent *****************
  6749 ;; Defined at:
  6750 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  bytes           1   48[BANK0 ] unsigned char 
  6755 ;;  page_save       2   44[BANK0 ] unsigned short 
  6756 ;;  i               1   54[BANK0 ] unsigned char 
  6757 ;;  bytes           2   58[BANK0 ] unsigned short 
  6758 ;;  page_save       2   42[BANK0 ] unsigned short 
  6759 ;;  byte            1   57[BANK0 ] unsigned char 
  6760 ;;  cb              1   53[BANK0 ] unsigned char 
  6761 ;;  bytes_this_t    1   52[BANK0 ] unsigned char 
  6762 ;;  j               1   62[BANK0 ] unsigned char 
  6763 ;;  i               1   60[BANK0 ] unsigned char 
  6764 ;;  k               1   55[BANK0 ] unsigned char 
  6765 ;;  i               1   56[BANK0 ] unsigned char 
  6766 ;;  len             1   51[BANK0 ] unsigned char 
  6767 ;;  pos             1   50[BANK0 ] unsigned char 
  6768 ;;  i               1   61[BANK0 ] unsigned char 
  6769 ;;  len             1   49[BANK0 ] unsigned char 
  6770 ;;  pos             1   47[BANK0 ] unsigned char 
  6771 ;;  offset          1   46[BANK0 ] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;		None               void
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : F/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6781 ;;      Params:         0       0       0       0       0       0       0
  6782 ;;      Locals:         0      21       0       0       0       0       0
  6783 ;;      Temps:          0       7       0       0       0       0       0
  6784 ;;      Totals:         0      28       0       0       0       0       0
  6785 ;;Total ram usage:       28 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    9
  6788 ;; This function calls:
  6789 ;;		_vscp_init
  6790 ;;		_vscp_readAppReg
  6791 ;;		_vscp_writeAppReg
  6792 ;;		_vscp_sendEvent
  6793 ;;		_vscp_getGUID
  6794 ;;		_vscp_getMDF_URL
  6795 ;;		_vscp_goBootloaderMode
  6796 ;;		_vscp_getMatrixInfo
  6797 ;;		_vscp_handleHeartbeat
  6798 ;;		_vscp_handleSetNickname
  6799 ;;		_vscp_handleDropNickname
  6800 ;;		_vscp_newNodeOnline
  6801 ;;		_vscp_readRegister
  6802 ;;		_vscp_readStdReg
  6803 ;;		_vscp_writeRegister
  6804 ;;		_vscp_writeStdReg
  6805 ;;		___lbmod
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text16
  6812  0019A8                     __ptext16:
  6813                           	opt stack 0
  6814  0019A8                     _vscp_handleProtocolEvent:
  6815                           	opt stack 20
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  6819                           
  6820                           ;incstack = 0
  6821                           ;incstack = 0
  6822  0019A8  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  6823  0019AA  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  6824  0019AC  E101 D2B5          	bz	l13380
  6825  0019B0  D2E4               	goto	l1526
  6826  0019B2                     l12962:
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  6830  0019B2  EC09  F021         	call	_vscp_handleHeartbeat	;wreg free
  6831                           
  6832                           ;vscp_firmware.c: 807: break;
  6833  0019B6  D2E1               	goto	l1526
  6834  0019B8                     l12964:
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  6838  0019B8  EC9D  F021         	call	_vscp_newNodeOnline	;wreg free
  6839                           
  6840                           ;vscp_firmware.c: 812: break;
  6841  0019BC  D2DE               	goto	l1526
  6842  0019BE                     l12966:
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  6846  0019BE  EC27  F022         	call	_vscp_handleSetNickname	;wreg free
  6847                           
  6848                           ;vscp_firmware.c: 817: break;
  6849  0019C2  D2DB               	goto	l1526
  6850  0019C4                     l12968:
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  6854  0019C4  EC42  F021         	call	_vscp_handleDropNickname	;wreg free
  6855                           
  6856                           ;vscp_firmware.c: 822: break;
  6857  0019C8  D2D8               	goto	l1526
  6858  0019CA                     l12970:
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  6862                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6863  0019CA  5197               	movf	_vscp_imsg& (0+255),w,b
  6864  0019CC  0B0F               	andlw	15
  6865  0019CE  0A02               	xorlw	2
  6866  0019D0  E001 D2D3          	bnz	l1526
  6867                           
  6868                           ; BSR set to: 0
  6869  0019D4  517E               	movf	_vscp_nickname& (0+255),w,b
  6870  0019D6  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6871  0019DA  62DF               	cpfseq	indf2,c
  6872  0019DC  D2CE               	goto	l1526
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  6876  0019DE  0E80               	movlw	128
  6877  0019E0  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6878  0019E2  D012               	goto	l12990
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  6882  0019E4  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6883  0019E6  EC38  F017         	call	_vscp_readAppReg
  6884  0019EA                     L19:
  6885  0019EA  0100               	movlb	0	; () banked
  6886  0019EC                     L20:
  6887  0019EC  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  6891  0019EE  C09E  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+5
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  6895  0019F2  0E03               	movlw	3
  6896  0019F4  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  6900  0019F6  0E82               	movlw	130
  6901  0019F8  6FA5               	movwf	_vscp_omsg& (0+255),b
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  6905  0019FA  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  6906  0019FC  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  6910  0019FE  0E0A               	movlw	10
  6911  001A00  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  6912  001A02                     l12988:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;vscp_firmware.c: 843: vscp_sendEvent();
  6916  001A02  EC14  F022         	call	_vscp_sendEvent	;wreg free
  6917                           
  6918                           ;vscp_firmware.c: 844: }
  6919  001A06  D2B9               	goto	l1526
  6920  001A08                     l12990:
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;vscp_firmware.c: 845: else {
  6924                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  6925                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  6926  001A08  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6927  001A0A  EC0D  F018         	call	_vscp_readStdReg
  6928  001A0E  D7ED               	goto	L19
  6929  001A10                     l13004:
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  6933                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6934  001A10  5197               	movf	_vscp_imsg& (0+255),w,b
  6935  001A12  0B0F               	andlw	15
  6936  001A14  0A03               	xorlw	3
  6937  001A16  E001 D2B0          	bnz	l1526
  6938                           
  6939                           ; BSR set to: 0
  6940  001A1A  517E               	movf	_vscp_nickname& (0+255),w,b
  6941  001A1C  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6942  001A20  62DF               	cpfseq	indf2,c
  6943  001A22  D2AB               	goto	l1526
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  6947  001A24  0E80               	movlw	128
  6948  001A26  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6949  001A28  D006               	goto	l13024
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  6953                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6954  001A2A  C09F  F04F         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  6955  001A2E  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6956  001A30  EC11  F003         	call	_vscp_writeAppReg
  6957  001A34  D7DB               	goto	L20
  6958  001A36                     l13024:
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;vscp_firmware.c: 888: else {
  6962                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  6963                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6964  001A36  C09F  F036         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  6965  001A3A  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6966  001A3C  EC81  F01C         	call	_vscp_writeStdReg
  6967  001A40  D7D4               	goto	L19
  6968  001A42                     l13038:
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  6972                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  6973                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  6974                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  6975                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  6976                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  6977                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  6978  001A42  517E               	movf	_vscp_nickname& (0+255),w,b
  6979  001A44  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6980  001A48  62DF               	cpfseq	indf2,c
  6981  001A4A  D297               	goto	l1526
  6982                           
  6983                           ; BSR set to: 0
  6984  001A4C  0E00               	movlw	0
  6985  001A4E  EC0E  F023         	call	_vscp_getGUID
  6986  001A52  0100               	movlb	0	; () banked
  6987  001A54  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6988  001A56  E001 D290          	bnz	l1526
  6989                           
  6990                           ; BSR set to: 0
  6991  001A5A  0E03               	movlw	3
  6992  001A5C  EC0E  F023         	call	_vscp_getGUID
  6993  001A60  0100               	movlb	0	; () banked
  6994  001A62  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  6995  001A64  E001 D289          	bnz	l1526
  6996                           
  6997                           ; BSR set to: 0
  6998  001A68  0E05               	movlw	5
  6999  001A6A  EC0E  F023         	call	_vscp_getGUID
  7000  001A6E  0100               	movlb	0	; () banked
  7001  001A70  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7002  001A72  E001 D282          	bnz	l1526
  7003                           
  7004                           ; BSR set to: 0
  7005  001A76  0E07               	movlw	7
  7006  001A78  EC0E  F023         	call	_vscp_getGUID
  7007  001A7C  0100               	movlb	0	; () banked
  7008  001A7E  19A2               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7009  001A80  E001 D27B          	bnz	l1526
  7010                           
  7011                           ; BSR set to: 0
  7012  001A84  5053               	movf	_vscp_page_select+1,w,c
  7013  001A86  19A3               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7014  001A88  E001 D277          	bnz	l1526
  7015                           
  7016                           ; BSR set to: 0
  7017  001A8C  5052               	movf	_vscp_page_select,w,c
  7018  001A8E  EE20  F0A4         	lfsr	2,_vscp_imsg+13
  7019  001A92  62DF               	cpfseq	indf2,c
  7020  001A94  D272               	goto	l1526
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7024  001A96  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7025  001A98  ECA6  F022         	call	_vscp_goBootloaderMode
  7026  001A9C  D26E               	goto	l1526
  7027  001A9E                     l13054:
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7031                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7032                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7033                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7034  001A9E  0E00               	movlw	0
  7035  001AA0  EC0E  F023         	call	_vscp_getGUID
  7036  001AA4  0100               	movlb	0	; () banked
  7037  001AA6  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7038  001AA8  E173               	bnz	l13098
  7039                           
  7040                           ; BSR set to: 0
  7041  001AAA  0E01               	movlw	1
  7042  001AAC  EC0E  F023         	call	_vscp_getGUID
  7043  001AB0  0100               	movlb	0	; () banked
  7044  001AB2  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7045  001AB4  E16D               	bnz	l13098
  7046                           
  7047                           ; BSR set to: 0
  7048  001AB6  0E02               	movlw	2
  7049  001AB8  EC0E  F023         	call	_vscp_getGUID
  7050  001ABC  0100               	movlb	0	; () banked
  7051  001ABE  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7052  001AC0  E167               	bnz	l13098
  7053                           
  7054                           ; BSR set to: 0
  7055  001AC2  0E03               	movlw	3
  7056  001AC4  EC0E  F023         	call	_vscp_getGUID
  7057  001AC8  0100               	movlb	0	; () banked
  7058  001ACA  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7059  001ACC  E161               	bnz	l13098
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7063  001ACE  897A               	bsf	_vscp_guid_reset& (0+255),4,b
  7064  001AD0  D05F               	goto	l13098
  7065  001AD2                     l13064:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7069                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7070                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7071                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7072  001AD2  0E04               	movlw	4
  7073  001AD4  EC0E  F023         	call	_vscp_getGUID
  7074  001AD8  0100               	movlb	0	; () banked
  7075  001ADA  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7076  001ADC  E159               	bnz	l13098
  7077                           
  7078                           ; BSR set to: 0
  7079  001ADE  0E05               	movlw	5
  7080  001AE0  EC0E  F023         	call	_vscp_getGUID
  7081  001AE4  0100               	movlb	0	; () banked
  7082  001AE6  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7083  001AE8  E153               	bnz	l13098
  7084                           
  7085                           ; BSR set to: 0
  7086  001AEA  0E06               	movlw	6
  7087  001AEC  EC0E  F023         	call	_vscp_getGUID
  7088  001AF0  0100               	movlb	0	; () banked
  7089  001AF2  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7090  001AF4  E14D               	bnz	l13098
  7091                           
  7092                           ; BSR set to: 0
  7093  001AF6  0E07               	movlw	7
  7094  001AF8  EC0E  F023         	call	_vscp_getGUID
  7095  001AFC  0100               	movlb	0	; () banked
  7096  001AFE  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7097  001B00  E147               	bnz	l13098
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7101  001B02  8B7A               	bsf	_vscp_guid_reset& (0+255),5,b
  7102  001B04  D045               	goto	l13098
  7103  001B06                     l13074:
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7107                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7108                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7109                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7110  001B06  0E08               	movlw	8
  7111  001B08  EC0E  F023         	call	_vscp_getGUID
  7112  001B0C  0100               	movlb	0	; () banked
  7113  001B0E  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7114  001B10  E13F               	bnz	l13098
  7115                           
  7116                           ; BSR set to: 0
  7117  001B12  0E09               	movlw	9
  7118  001B14  EC0E  F023         	call	_vscp_getGUID
  7119  001B18  0100               	movlb	0	; () banked
  7120  001B1A  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7121  001B1C  E139               	bnz	l13098
  7122                           
  7123                           ; BSR set to: 0
  7124  001B1E  0E0A               	movlw	10
  7125  001B20  EC0E  F023         	call	_vscp_getGUID
  7126  001B24  0100               	movlb	0	; () banked
  7127  001B26  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7128  001B28  E133               	bnz	l13098
  7129                           
  7130                           ; BSR set to: 0
  7131  001B2A  0E0B               	movlw	11
  7132  001B2C  EC0E  F023         	call	_vscp_getGUID
  7133  001B30  0100               	movlb	0	; () banked
  7134  001B32  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7135  001B34  E12D               	bnz	l13098
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7139  001B36  8D7A               	bsf	_vscp_guid_reset& (0+255),6,b
  7140  001B38  D02B               	goto	l13098
  7141  001B3A                     l13084:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7145                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7146                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7147                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7148  001B3A  0E0C               	movlw	12
  7149  001B3C  EC0E  F023         	call	_vscp_getGUID
  7150  001B40  0100               	movlb	0	; () banked
  7151  001B42  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7152  001B44  E125               	bnz	l13098
  7153                           
  7154                           ; BSR set to: 0
  7155  001B46  0E0D               	movlw	13
  7156  001B48  EC0E  F023         	call	_vscp_getGUID
  7157  001B4C  0100               	movlb	0	; () banked
  7158  001B4E  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7159  001B50  E11F               	bnz	l13098
  7160                           
  7161                           ; BSR set to: 0
  7162  001B52  0E0E               	movlw	14
  7163  001B54  EC0E  F023         	call	_vscp_getGUID
  7164  001B58  0100               	movlb	0	; () banked
  7165  001B5A  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7166  001B5C  E119               	bnz	l13098
  7167                           
  7168                           ; BSR set to: 0
  7169  001B5E  0E0F               	movlw	15
  7170  001B60  EC0E  F023         	call	_vscp_getGUID
  7171  001B64  0100               	movlb	0	; () banked
  7172  001B66  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7173  001B68  E113               	bnz	l13098
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7177  001B6A  8F7A               	bsf	_vscp_guid_reset& (0+255),7,b
  7178  001B6C  D011               	goto	l13098
  7179  001B6E                     l1466:
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7183  001B6E  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  7184                           
  7185                           ;vscp_firmware.c: 965: break;
  7186  001B70  D00F               	goto	l13098
  7187  001B72                     l13096:
  7188                           
  7189                           ; BSR set to: 0
  7190  001B72  399D               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7191  001B74  0B0F               	andlw	15
  7192  001B76  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7193  001B78  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7194                           
  7195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7196                           ; Switch size 1, requested type "space"
  7197                           ; Number of cases is 1, Range of values is 0 to 0
  7198                           ; switch strategies available:
  7199                           ; Name         Instructions Cycles
  7200                           ; simple_byte            4     3 (average)
  7201                           ;	Chosen strategy is simple_byte
  7202  001B7A  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7203  001B7C  E1F8               	bnz	l1466
  7204                           
  7205                           ; BSR set to: 0
  7206                           ; Switch size 1, requested type "space"
  7207                           ; Number of cases is 4, Range of values is 0 to 3
  7208                           ; switch strategies available:
  7209                           ; Name         Instructions Cycles
  7210                           ; simple_byte           13     7 (average)
  7211                           ;	Chosen strategy is simple_byte
  7212  001B7E  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7213  001B80  E08E               	bz	l13054
  7214  001B82  0A01               	xorlw	1	; case 1
  7215  001B84  E0A6               	bz	l13064
  7216  001B86  0A03               	xorlw	3	; case 2
  7217  001B88  E0BE               	bz	l13074
  7218  001B8A  0A01               	xorlw	1	; case 3
  7219  001B8C  E0D6               	bz	l13084
  7220  001B8E  D7EF               	goto	l1466
  7221  001B90                     l13098:
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7225  001B90  517A               	movf	_vscp_guid_reset& (0+255),w,b
  7226  001B92  0BF0               	andlw	240
  7227  001B94  0AF0               	xorlw	240
  7228  001B96  E001 D1F0          	bnz	l1526
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;vscp_firmware.c: 970: vscp_init();
  7232  001B9A  ECA4  F020         	call	_vscp_init	;wreg free
  7233  001B9E  D1ED               	goto	l1526
  7234  001BA0                     l13102:
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7238  001BA0  517E               	movf	_vscp_nickname& (0+255),w,b
  7239  001BA2  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7240  001BA6  62DF               	cpfseq	indf2,c
  7241  001BA8  D1E8               	goto	l1526
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;vscp_firmware.c: 978: uint8_t i;
  7245                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7246  001BAA  6BEB               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7247                           
  7248                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7249  001BAC  C09E  F0EA         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7250                           
  7251                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7252  001BB0  C09F  F0ED         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7253                           
  7254                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7255  001BB4  6BF9               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7256  001BB6  D042               	goto	l13134
  7257  001BB8                     l13106:
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7261  001BB8  0E07               	movlw	7
  7262  001BBA  6E08               	movwf	?___lbmod,c
  7263  001BBC  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7264  001BBE  ECC7  F021         	call	___lbmod
  7265  001BC2  0100               	movlb	0	; () banked
  7266  001BC4  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7267  001BC6  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7268  001BC8  0FAB               	addlw	low (_vscp_omsg+6)
  7269  001BCA  6ED9               	movwf	fsr2l,c
  7270  001BCC  6ADA               	clrf	fsr2h,c
  7271  001BCE  51EA               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7272  001BD0  25F9               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7273  001BD2  ECB4  F022         	call	_vscp_readRegister
  7274  001BD6  6EDF               	movwf	indf2,c
  7275                           
  7276                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7277  001BD8  0E07               	movlw	7
  7278  001BDA  6E08               	movwf	?___lbmod,c
  7279  001BDC  0100               	movlb	0	; () banked
  7280  001BDE  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7281  001BE0  ECC7  F021         	call	___lbmod
  7282  001BE4  0A06               	xorlw	6
  7283  001BE6  E00B               	bz	l13112
  7284  001BE8  0EFF               	movlw	255
  7285  001BEA  0100               	movlb	0	; () banked
  7286  001BEC  25ED               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7287  001BEE  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7288  001BF0  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7289  001BF2  0EFF               	movlw	255
  7290  001BF4  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7291  001BF6  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7292  001BF8  19DF               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7293  001BFA  11E0               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7294  001BFC  E11E               	bnz	l13132
  7295  001BFE                     l13112:
  7296                           
  7297                           ;vscp_firmware.c: 988: uint8_t bytes;
  7298                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7299  001BFE  0E07               	movlw	7
  7300  001C00  6E08               	movwf	?___lbmod,c
  7301  001C02  0100               	movlb	0	; () banked
  7302  001C04  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7303  001C06  ECC7  F021         	call	___lbmod
  7304  001C0A  0A06               	xorlw	6
  7305  001C0C  E103               	bnz	l13116
  7306                           
  7307                           ;vscp_firmware.c: 991: bytes = 7;
  7308  001C0E  0E07               	movlw	7
  7309  001C10  0100               	movlb	0	; () banked
  7310  001C12  D009               	goto	L21
  7311  001C14                     l13116:
  7312                           
  7313                           ;vscp_firmware.c: 993: else {
  7314                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7315  001C14  0E07               	movlw	7
  7316  001C16  6E08               	movwf	?___lbmod,c
  7317  001C18  0100               	movlb	0	; () banked
  7318  001C1A  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7319  001C1C  ECC7  F021         	call	___lbmod
  7320  001C20  0100               	movlb	0	; () banked
  7321  001C22  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7322  001C24  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7323  001C26                     L21:
  7324  001C26  6FEC               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;vscp_firmware.c: 995: }
  7328                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7329  001C28  51EC               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7330  001C2A  0F81               	addlw	129
  7331  001C2C  6FA5               	movwf	_vscp_omsg& (0+255),b
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7341  001C2E  D9BC               	call	PL92	;call to abstracted procedure
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7345  001C30  C0EB  F0AA         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  7349  001C34  EC14  F022         	call	_vscp_sendEvent	;wreg free
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;vscp_firmware.c: 1005: pos++;
  7353  001C38  2BEB               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  7354  001C3A                     l13132:
  7355                           
  7356                           ; BSR set to: 0
  7357  001C3A  2BF9               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  7358  001C3C                     l13134:
  7359                           
  7360                           ; BSR set to: 0
  7361  001C3C  51ED               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  7362  001C3E  5DF9               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7363  001C40  E301 D19B          	bc	l1526
  7364  001C44  D7B9               	goto	l13106
  7365  001C46                     l13136:
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7369  001C46  517E               	movf	_vscp_nickname& (0+255),w,b
  7370  001C48  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7371  001C4C  62DF               	cpfseq	indf2,c
  7372  001C4E  D195               	goto	l1526
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;vscp_firmware.c: 1014: uint8_t i;
  7376                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  7377  001C50  C09E  F0EE         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1502
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  7381  001C54  5197               	movf	_vscp_imsg& (0+255),w,b
  7382  001C56  0FFE               	addlw	254
  7383  001C58  0B07               	andlw	7
  7384  001C5A  6FEF               	movwf	vscp_handleProtocolEvent@len_1503& (0+255),b
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  7388  001C5C  6BF4               	clrf	vscp_handleProtocolEvent@i_1501& (0+255),b
  7389  001C5E  D016               	goto	l13150
  7390  001C60                     l13144:
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  7394  001C60  51F4               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7395  001C62  0F9F               	addlw	low (_vscp_imsg+8)
  7396  001C64  6ED9               	movwf	fsr2l,c
  7397  001C66  6ADA               	clrf	fsr2h,c
  7398  001C68  50DF               	movf	indf2,w,c
  7399  001C6A  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  7400  001C6C  51EE               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7401  001C6E  25F4               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7402  001C70  EC4B  F022         	call	_vscp_writeRegister
  7403                           
  7404                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  7405  001C74  0100               	movlb	0	; () banked
  7406  001C76  51F4               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7407  001C78  0FAB               	addlw	low (_vscp_omsg+6)
  7408  001C7A  6ED9               	movwf	fsr2l,c
  7409  001C7C  6ADA               	clrf	fsr2h,c
  7410  001C7E  51EE               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7411  001C80  25F4               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7412  001C82  ECB4  F022         	call	_vscp_readRegister
  7413  001C86  6EDF               	movwf	indf2,c
  7414  001C88  0100               	movlb	0	; () banked
  7415  001C8A  2BF4               	incf	vscp_handleProtocolEvent@i_1501& (0+255),f,b
  7416  001C8C                     l13150:
  7417                           
  7418                           ; BSR set to: 0
  7419  001C8C  51EF               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7420  001C8E  5DF4               	subwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7421  001C90  E3E7               	bnc	l13144
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;vscp_firmware.c: 1022: }
  7425                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  7429                           
  7430                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  7431  001C92  D98A               	call	PL92	;call to abstracted procedure
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  7435  001C94  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  7439  001C96  51EF               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7440  001C98  0F81               	addlw	129
  7441  001C9A  6FA5               	movwf	_vscp_omsg& (0+255),b
  7442  001C9C  D6B2               	goto	l12988
  7443  001C9E                     l13162:
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7447  001C9E  517E               	movf	_vscp_nickname& (0+255),w,b
  7448  001CA0  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7449  001CA4  62DF               	cpfseq	indf2,c
  7450  001CA6  D169               	goto	l1526
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7454                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  7455                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  7456  001CA8  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7457  001CAA  EC38  F017         	call	_vscp_readAppReg
  7458  001CAE  0100               	movlb	0	; () banked
  7459  001CB0  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7460  001CB2  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7461  001CB4  6E4F               	movwf	?_vscp_writeAppReg,c
  7462  001CB6  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7463  001CB8  EC11  F003         	call	_vscp_writeAppReg
  7464  001CBC  D697               	goto	L20
  7465  001CBE                     l13178:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7469  001CBE  517E               	movf	_vscp_nickname& (0+255),w,b
  7470  001CC0  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7471  001CC4  62DF               	cpfseq	indf2,c
  7472  001CC6  D159               	goto	l1526
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7476                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  7477                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  7478  001CC8  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7479  001CCA  EC38  F017         	call	_vscp_readAppReg
  7480  001CCE  0100               	movlb	0	; () banked
  7481  001CD0  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7482  001CD2  05DF               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  7483  001CD4  6E4F               	movwf	?_vscp_writeAppReg,c
  7484  001CD6  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7485  001CD8  EC11  F003         	call	_vscp_writeAppReg
  7486  001CDC  D687               	goto	L20
  7487  001CDE                     l13194:
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  7491                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  7492  001CDE  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
  7493  001CE0  197E               	xorwf	_vscp_nickname& (0+255),w,b
  7494  001CE2  E003               	bz	l1490
  7495                           
  7496                           ; BSR set to: 0
  7497  001CE4  299D               	incf	(_vscp_imsg+6)& (0+255),w,b
  7498  001CE6  E001 D148          	bnz	l1526
  7499  001CEA                     l1490:
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  7503  001CEA  6BF3               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  7507  001CEC  0E03               	movlw	3
  7508  001CEE  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7509                           
  7510                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  7511  001CF0  0E88               	movlw	136
  7512  001CF2  6FA5               	movwf	_vscp_omsg& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  7516  001CF4  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7517  001CF6  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7518                           
  7519                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  7520  001CF8  0E20               	movlw	32
  7521  001CFA  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  7525  001CFC  6BF8               	clrf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7526  001CFE                     l1491:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;vscp_firmware.c: 1091: {
  7530                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  7534  001CFE  D95B               	call	PL108	;call to abstracted procedure
  7535  001D00                     l13214:
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  7539  001D00  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7540  001D02  0FAA               	addlw	low (_vscp_omsg+5)
  7541  001D04  6ED9               	movwf	fsr2l,c
  7542  001D06  6ADA               	clrf	fsr2h,c
  7543  001D08  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7544  001D0A  080F               	sublw	15
  7545  001D0C  EC0E  F023         	call	_vscp_getGUID
  7546  001D10  6EDF               	movwf	indf2,c
  7547  001D12  0100               	movlb	0	; () banked
  7548  001D14  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;vscp_firmware.c: 1096: if (k > 16)
  7552  001D16  0E10               	movlw	16
  7553  001D18  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7554  001D1A  D001               	goto	l13222
  7555  001D1C  D004               	goto	l13226
  7556  001D1E                     l13222:
  7557                           
  7558                           ; BSR set to: 0
  7559  001D1E  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7560                           
  7561                           ; BSR set to: 0
  7562  001D20  0E07               	movlw	7
  7563  001D22  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7564  001D24  D7ED               	goto	l13214
  7565  001D26                     l13226:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;vscp_firmware.c: 1098: }
  7569                           ;vscp_firmware.c: 1100: if (k > 16)
  7570  001D26  0E10               	movlw	16
  7571  001D28  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7572  001D2A  D001               	goto	l13230
  7573  001D2C  D006               	goto	l1492
  7574  001D2E                     l13230:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  7578  001D2E  EC14  F022         	call	_vscp_sendEvent	;wreg free
  7579                           
  7580                           ; BSR set to: 0
  7581  001D32  2BF8               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7582                           
  7583                           ; BSR set to: 0
  7584  001D34  0E02               	movlw	2
  7585  001D36  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7586  001D38  D7E2               	goto	l1491
  7587  001D3A                     l1492:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;vscp_firmware.c: 1104: }
  7591                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  7592  001D3A  6BFA               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  7593  001D3C                     l13240:
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;vscp_firmware.c: 1107: {
  7597                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  7598  001D3C  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7599  001D3E  ECC1  F022         	call	_vscp_getMDF_URL
  7600  001D42  0900               	iorlw	0
  7601  001D44  E008               	bz	l13244
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  7605  001D46  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7606  001D48  0FAD               	addlw	low (_vscp_omsg+8)
  7607  001D4A  6ED9               	movwf	fsr2l,c
  7608  001D4C  6ADA               	clrf	fsr2h,c
  7609  001D4E  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7610  001D50  ECC1  F022         	call	_vscp_getMDF_URL
  7611  001D54  D005               	goto	L22
  7612  001D56                     l13244:
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;vscp_firmware.c: 1110: else
  7616                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  7617  001D56  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7618  001D58  0FAD               	addlw	low (_vscp_omsg+8)
  7619  001D5A  6ED9               	movwf	fsr2l,c
  7620  001D5C  6ADA               	clrf	fsr2h,c
  7621  001D5E  0E00               	movlw	0
  7622  001D60                     L22:
  7623  001D60  6EDF               	movwf	indf2,c
  7624                           
  7625                           ; BSR set to: 0
  7626  001D62  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7627                           
  7628                           ; BSR set to: 0
  7629  001D64  0E04               	movlw	4
  7630  001D66  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7631  001D68  D7E9               	goto	l13240
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;vscp_firmware.c: 1112: }
  7635                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  7636  001D6A  EC14  F022         	call	_vscp_sendEvent	;wreg free
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;vscp_firmware.c: 1116: k = 5;
  7640  001D6E  0E05               	movlw	5
  7641  001D70  6FF3               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  7645  001D72  0E03               	movlw	3
  7646  001D74  6FF8               	movwf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7647  001D76                     l1501:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;vscp_firmware.c: 1118: {
  7651                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  7655  001D76  D91F               	call	PL108	;call to abstracted procedure
  7656  001D78                     l13266:
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  7660  001D78  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7661  001D7A  0FAA               	addlw	low (_vscp_omsg+5)
  7662  001D7C  6ED9               	movwf	fsr2l,c
  7663  001D7E  6ADA               	clrf	fsr2h,c
  7664  001D80  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7665  001D82  ECC1  F022         	call	_vscp_getMDF_URL
  7666  001D86  6EDF               	movwf	indf2,c
  7667                           
  7668                           ; BSR set to: 0
  7669  001D88  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7670                           
  7671                           ; BSR set to: 0
  7672  001D8A  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7673                           
  7674                           ; BSR set to: 0
  7675  001D8C  0E07               	movlw	7
  7676  001D8E  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7677  001D90  D7F3               	goto	l13266
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;vscp_firmware.c: 1123: }
  7681                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  7682  001D92  EC14  F022         	call	_vscp_sendEvent	;wreg free
  7683                           
  7684                           ; BSR set to: 0
  7685  001D96  2BF8               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7686                           
  7687                           ; BSR set to: 0
  7688  001D98  0E06               	movlw	6
  7689  001D9A  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7690  001D9C  D7EC               	goto	l1501
  7691  001D9E  D0ED               	goto	l1526
  7692  001DA0                     l13280:
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7696  001DA0  517E               	movf	_vscp_nickname& (0+255),w,b
  7697  001DA2  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7698  001DA6  62DF               	cpfseq	indf2,c
  7699  001DA8  D0E8               	goto	l1526
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  7703  001DAA  0E03               	movlw	3
  7704  001DAC  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7705                           
  7706                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  7707  001DAE  0E87               	movlw	135
  7708  001DB0  6FA5               	movwf	_vscp_omsg& (0+255),b
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  7712  001DB2  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7713  001DB4  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7714                           
  7715                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  7716  001DB6  0E22               	movlw	34
  7717  001DB8  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  7721  001DBA  0EAA               	movlw	(_vscp_omsg+5)& (0+255)
  7722  001DBC  EC5C  F022         	call	_vscp_getMatrixInfo
  7723  001DC0  D620               	goto	l12988
  7724  001DC2                     l13290:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  7728  001DC2  517E               	movf	_vscp_nickname& (0+255),w,b
  7729  001DC4  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7730  001DC8  62DF               	cpfseq	indf2,c
  7731  001DCA  D0D7               	goto	l1526
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  7735  001DCC  6BF5               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  7739                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  7740  001DCE  C097  F0DF         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  7741  001DD2  0E0F               	movlw	15
  7742  001DD4  17DF               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7743  001DD6  0E04               	movlw	4
  7744  001DD8  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7745  001DDA  E312               	bnc	l13306
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  7749  001DDC  C0A1  F0F6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1508
  7750  001DE0  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  7754  001DE2  51F7               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7755  001DE4  11F6               	iorwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7756  001DE6  E103               	bnz	l13302
  7757                           
  7758                           ; BSR set to: 0
  7759  001DE8  0E01               	movlw	1
  7760  001DEA  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7761  001DEC  6BF6               	clrf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7762  001DEE                     l13302:
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  7766  001DEE  0E01               	movlw	1
  7767  001DF0  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7768  001DF2  0E01               	movlw	1
  7769  001DF4  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7770  001DF6  E307               	bnc	l13308
  7771                           
  7772                           ; BSR set to: 0
  7773  001DF8  0E01               	movlw	1
  7774  001DFA  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7775  001DFC  0E00               	movlw	0
  7776  001DFE  D002               	goto	L24
  7777  001E00                     l13306:
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;vscp_firmware.c: 1173: else {
  7781                           ;vscp_firmware.c: 1174: bytes = 1;
  7782  001E00  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7783  001E02  0E01               	movlw	1
  7784  001E04                     L24:
  7785  001E04  6FF6               	movwf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7786  001E06                     l13308:
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;vscp_firmware.c: 1175: }
  7790                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  7791  001E06  C052  F0E6         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  7792  001E0A  C053  F0E7         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  7796  001E0E  D8B6               	call	PL46	;call to abstracted procedure
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  7800  001E10  0E07               	movlw	7
  7801  001E12  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  7817  001E14  D8BF               	call	PL54	;call to abstracted procedure
  7818  001E16                     l13324:
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  7822  001E16  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7823  001E18  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7824  001E1A  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7825  001E1C  0E00               	movlw	0
  7826  001E1E  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7827  001E20  6FE0               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7828  001E22  0E04               	movlw	4
  7829  001E24  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7830  001E26  0E00               	movlw	0
  7831  001E28  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7832  001E2A  E302               	bnc	l13328
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  7836  001E2C  0E04               	movlw	4
  7837  001E2E  D002               	goto	L25
  7838  001E30                     l13328:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 1198: else {
  7842                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  7843  001E30  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7844  001E32  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7845  001E34                     L25:
  7846  001E34  6FF0               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;vscp_firmware.c: 1200: }
  7850                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  7851  001E36  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7852  001E38  0F84               	addlw	132
  7853  001E3A  6FA5               	movwf	_vscp_omsg& (0+255),b
  7854                           
  7855                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  7856                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  7857  001E3C  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7858  001E3E  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7859  001E40  6FAD               	movwf	(_vscp_omsg+8)& (0+255),b
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  7863  001E42  6BF1               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  7864  001E44  D00C               	goto	l13336
  7865  001E46                     l13332:
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  7869                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  7870  001E46  51F1               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7871  001E48  0FAE               	addlw	low (_vscp_omsg+9)
  7872  001E4A  6ED9               	movwf	fsr2l,c
  7873  001E4C  6ADA               	clrf	fsr2h,c
  7874  001E4E  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7875  001E50  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7876  001E52  25F1               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7877  001E54  ECB4  F022         	call	_vscp_readRegister
  7878  001E58  6EDF               	movwf	indf2,c
  7879  001E5A  0100               	movlb	0	; () banked
  7880  001E5C  2BF1               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  7881  001E5E                     l13336:
  7882                           
  7883                           ; BSR set to: 0
  7884  001E5E  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7885  001E60  5DF1               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7886  001E62  E3F1               	bnc	l13332
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;vscp_firmware.c: 1211: }
  7890                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  7891  001E64  EC14  F022         	call	_vscp_sendEvent	;wreg free
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  7895  001E68  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7896  001E6A  27F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  7900  001E6C  2BAA               	incf	(_vscp_omsg+5)& (0+255),f,b
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  7904  001E6E  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7905  001E70  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7906  001E72  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7907  001E74  51F6               	movf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7908  001E76  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7909  001E78  51F7               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7910  001E7A  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7911  001E7C  E3CC               	bnc	l13324
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  7915  001E7E  C0E6  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  7916  001E82  C0E7  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  7917  001E86  D079               	goto	l1526
  7918  001E88                     l13346:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  7922  001E88  517E               	movf	_vscp_nickname& (0+255),w,b
  7923  001E8A  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7924  001E8E  62DF               	cpfseq	indf2,c
  7925  001E90  D074               	goto	l1526
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;vscp_firmware.c: 1234: uint8_t i;
  7929                           ;vscp_firmware.c: 1235: uint16_t page_save;
  7930                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  7931  001E92  C052  F0E8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1513
  7932  001E96  C053  F0E9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1513+1
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  7936  001E9A  D870               	call	PL46	;call to abstracted procedure
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  7940  001E9C  C0A0  F0F2         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1512
  7941                           
  7942                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  7943                           ;vscp_firmware.c: 1248: i++) {
  7944  001EA0  D014               	goto	l13358
  7945  001EA2                     l13354:
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  7949                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  7950  001EA2  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7951  001EA4  08A1               	sublw	low (_vscp_imsg+10)
  7952  001EA6  25F2               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7953  001EA8  6ED9               	movwf	fsr2l,c
  7954  001EAA  6ADA               	clrf	fsr2h,c
  7955  001EAC  50DF               	movf	indf2,w,c
  7956  001EAE  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  7957  001EB0  51F2               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7958  001EB2  EC4B  F022         	call	_vscp_writeRegister
  7959  001EB6  0100               	movlb	0	; () banked
  7960  001EB8  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7961  001EBA  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7962  001EBC  08AE               	sublw	low (_vscp_omsg+9)
  7963  001EBE  25F2               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7964  001EC0  6ED9               	movwf	fsr2l,c
  7965  001EC2  6ADA               	clrf	fsr2h,c
  7966  001EC4  C0DF  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7967                           
  7968                           ; BSR set to: 0
  7969  001EC8  2BF2               	incf	vscp_handleProtocolEvent@i_1512& (0+255),f,b
  7970  001ECA                     l13358:
  7971                           
  7972                           ; BSR set to: 0
  7973  001ECA  5197               	movf	_vscp_imsg& (0+255),w,b
  7974  001ECC  0B0F               	andlw	15
  7975  001ECE  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7976  001ED0  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7977  001ED2  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7978  001ED4  27DF               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7979  001ED6  0E00               	movlw	0
  7980  001ED8  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7981  001EDA  0EFC               	movlw	252
  7982  001EDC  25DF               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7983  001EDE  6FE1               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  7984  001EE0  0EFF               	movlw	255
  7985  001EE2  21E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7986  001EE4  6FE2               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  7987  001EE6  51F2               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7988  001EE8  6FE3               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  7989  001EEA  6BE4               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  7990  001EEC  51E4               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  7991  001EEE  0A80               	xorlw	128
  7992  001EF0  6FE5               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  7993  001EF2  51E1               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  7994  001EF4  5DE3               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  7995  001EF6  51E2               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  7996  001EF8  0A80               	xorlw	128
  7997  001EFA  59E5               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  7998  001EFC  E3D2               	bnc	l13354
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;vscp_firmware.c: 1251: }
  8002                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8003  001EFE  C0E8  F052         	movff	vscp_handleProtocolEvent@page_save_1513,_vscp_page_select
  8004  001F02  C0E9  F053         	movff	vscp_handleProtocolEvent@page_save_1513+1,_vscp_page_select+1
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8008  001F06  0E07               	movlw	7
  8009  001F08  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8013  001F0A  5197               	movf	_vscp_imsg& (0+255),w,b
  8014  001F0C  0B0F               	andlw	15
  8015  001F0E  0F80               	addlw	128
  8016  001F10  6FA5               	movwf	_vscp_omsg& (0+255),b
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8032  001F12  D840               	call	PL54	;call to abstracted procedure
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8036  001F14  C0A0  F0AD         	movff	_vscp_imsg+9,_vscp_omsg+8
  8037  001F18  D574               	goto	l12988
  8038  001F1A                     l13380:
  8039                           
  8040                           ; BSR set to: 0
  8041  001F1A  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  8042                           
  8043                           ; Switch size 1, requested type "space"
  8044                           ; Number of cases is 16, Range of values is 1 to 38
  8045                           ; switch strategies available:
  8046                           ; Name         Instructions Cycles
  8047                           ; simple_byte           49    25 (average)
  8048                           ;	Chosen strategy is simple_byte
  8049  001F1C  0A01               	xorlw	1	; case 1
  8050  001F1E  E101 D548          	bz	l12962
  8051  001F22  0A03               	xorlw	3	; case 2
  8052  001F24  E101 D548          	bz	l12964
  8053  001F28  0A04               	xorlw	4	; case 6
  8054  001F2A  E101 D548          	bz	l12966
  8055  001F2E  0A0E               	xorlw	14	; case 8
  8056  001F30  E101 D548          	bz	l12968
  8057  001F34  0A01               	xorlw	1	; case 9
  8058  001F36  E101 D548          	bz	l12970
  8059  001F3A  0A02               	xorlw	2	; case 11
  8060  001F3C  E101 D568          	bz	l13004
  8061  001F40  0A07               	xorlw	7	; case 12
  8062  001F42  E101 D57E          	bz	l13038
  8063  001F46  0A1B               	xorlw	27	; case 23
  8064  001F48  E101 D613          	bz	l13096
  8065  001F4C  0A0F               	xorlw	15	; case 24
  8066  001F4E  E101 D627          	bz	l13102
  8067  001F52  0A01               	xorlw	1	; case 25
  8068  001F54  E101 D677          	bz	l13136
  8069  001F58  0A04               	xorlw	4	; case 29
  8070  001F5A  E101 D6A0          	bz	l13162
  8071  001F5E  0A03               	xorlw	3	; case 30
  8072  001F60  E101 D6AD          	bz	l13178
  8073  001F64  0A01               	xorlw	1	; case 31
  8074  001F66  E101 D6BA          	bz	l13194
  8075  001F6A  0A3E               	xorlw	62	; case 33
  8076  001F6C  E101 D718          	bz	l13280
  8077  001F70  0A04               	xorlw	4	; case 37
  8078  001F72  E101 D726          	bz	l13290
  8079  001F76  0A03               	xorlw	3	; case 38
  8080  001F78  E087               	bz	l13346
  8081  001F7A                     l1526:
  8082  001F7A  0012               	return	
  8083  001F7C                     __end_of_vscp_handleProtocolEvent:
  8084                           	opt stack 0
  8085  001F7C                     PL46:
  8086                           	opt stack 20
  8087  001F7C  519F               	movf	(_vscp_imsg+8)& (0+255),w,b
  8088  001F7E  C09E  F0DF         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8089  001F82  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8090  001F84  C0DF  F0E0         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8091  001F88  6BDF               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8092  001F8A  11DF               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8093  001F8C  6E52               	movwf	_vscp_page_select,c
  8094  001F8E  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8095  001F90  6E53               	movwf	_vscp_page_select+1,c
  8096  001F92  0012               	return	
  8097  001F94                     __end_ofPL46:
  8098                           	opt stack 0
  8099  001F94                     PL54:
  8100                           	opt stack 20
  8101  001F94  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8102  001F96  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8103  001F98  0E27               	movlw	39
  8104  001F9A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8105  001F9C  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  8106  001F9E  C09E  F0AB         	movff	_vscp_imsg+7,_vscp_omsg+6
  8107  001FA2  C09F  F0AC         	movff	_vscp_imsg+8,_vscp_omsg+7
  8108  001FA6  0012               	return	
  8109  001FA8                     __end_ofPL54:
  8110                           	opt stack 0
  8111  001FA8                     PL92:
  8112                           	opt stack 20
  8113  001FA8  0E07               	movlw	7
  8114  001FAA  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8115  001FAC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8116  001FAE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8117  001FB0  0E1A               	movlw	26
  8118  001FB2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8119  001FB4  0C1A               	retlw	26
  8120  001FB6                     __end_ofPL92:
  8121                           	opt stack 0
  8122  001FB6                     PL108:
  8123                           	opt stack 20
  8124  001FB6  C0F8  F0AA         	movff	vscp_handleProtocolEvent@i_1504,_vscp_omsg+5
  8125  001FBA  0E01               	movlw	1
  8126  001FBC  6FFA               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8127  001FBE  0C01               	retlw	1
  8128  001FC0                     __end_ofPL108:
  8129                           	opt stack 0
  8130                           tblptru	equ	0xFF8
  8131                           tblptrh	equ	0xFF7
  8132                           tblptrl	equ	0xFF6
  8133                           tablat	equ	0xFF5
  8134                           prodh	equ	0xFF4
  8135                           prodl	equ	0xFF3
  8136                           intcon	equ	0xFF2
  8137                           intcon2	equ	0xFF1
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           indf1	equ	0xFE7
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function ___lbmod *****************
  8152 ;; Defined at:
  8153 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  dividend        1    wreg     unsigned char 
  8156 ;;  divisor         1    7[COMRAM] unsigned char 
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;  dividend        1    8[COMRAM] unsigned char 
  8159 ;;  rem             1   10[COMRAM] unsigned char 
  8160 ;;  counter         1    9[COMRAM] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      unsigned char 
  8163 ;; Registers used:
  8164 ;;		wreg, status,2, status,0
  8165 ;; Tracked objects:
  8166 ;;		On entry : F/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8170 ;;      Params:         1       0       0       0       0       0       0
  8171 ;;      Locals:         3       0       0       0       0       0       0
  8172 ;;      Temps:          0       0       0       0       0       0       0
  8173 ;;      Totals:         4       0       0       0       0       0       0
  8174 ;;Total ram usage:        4 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    2
  8177 ;; This function calls:
  8178 ;;		Nothing
  8179 ;; This function is called by:
  8180 ;;		_vscp_handleProtocolEvent
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text17
  8185  00438E                     __ptext17:
  8186                           	opt stack 0
  8187  00438E                     ___lbmod:
  8188                           	opt stack 26
  8189                           
  8190                           ;incstack = 0
  8191                           ;incstack = 0
  8192                           ;___lbmod@dividend stored from wreg
  8193  00438E  CFE8 F009          	movff	wreg,___lbmod@dividend
  8194                           
  8195                           ; BSR set to: 0
  8196  004392  0E08               	movlw	8
  8197  004394  6E0A               	movwf	___lbmod@counter,c
  8198                           
  8199                           ; BSR set to: 0
  8200  004396  6A0B               	clrf	___lbmod@rem,c
  8201  004398                     l12194:
  8202  004398  90D8               	bcf	status,0,c
  8203  00439A  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  8204  00439C  340B               	rlcf	___lbmod@rem& (0+255),w,c
  8205  00439E  6E0B               	movwf	___lbmod@rem,c
  8206  0043A0  90D8               	bcf	status,0,c
  8207  0043A2  3609               	rlcf	___lbmod@dividend,f,c
  8208  0043A4  5008               	movf	___lbmod@divisor,w,c
  8209  0043A6  5C0B               	subwf	___lbmod@rem,w,c
  8210  0043A8  E302               	bnc	l12202
  8211  0043AA  5008               	movf	___lbmod@divisor,w,c
  8212  0043AC  5E0B               	subwf	___lbmod@rem,f,c
  8213  0043AE                     l12202:
  8214  0043AE  2E0A               	decfsz	___lbmod@counter,f,c
  8215  0043B0  D7F3               	goto	l12194
  8216  0043B2  500B               	movf	___lbmod@rem,w,c
  8217  0043B4  0012               	return	
  8218  0043B6                     __end_of___lbmod:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           intcon2	equ	0xFF1
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           indf1	equ	0xFE7
  8231                           fsr1h	equ	0xFE2
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           plusw2	equ	0xFDB
  8237                           fsr2h	equ	0xFDA
  8238                           fsr2l	equ	0xFD9
  8239                           status	equ	0xFD8
  8240                           
  8241 ;; *************** function _vscp_writeRegister *****************
  8242 ;; Defined at:
  8243 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  reg             1    wreg     unsigned char 
  8246 ;;  value           1   34[BANK0 ] unsigned char 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  reg             1   79[COMRAM] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      unsigned char 
  8251 ;; Registers used:
  8252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : F/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8258 ;;      Params:         0       1       0       0       0       0       0
  8259 ;;      Locals:         1       0       0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0
  8261 ;;      Totals:         1       1       0       0       0       0       0
  8262 ;;Total ram usage:        2 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    8
  8265 ;; This function calls:
  8266 ;;		_vscp_writeAppReg
  8267 ;;		_vscp_writeStdReg
  8268 ;; This function is called by:
  8269 ;;		_vscp_handleProtocolEvent
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text18
  8274  004496                     __ptext18:
  8275                           	opt stack 0
  8276  004496                     _vscp_writeRegister:
  8277                           	opt stack 20
  8278                           
  8279                           ;incstack = 0
  8280                           ;incstack = 0
  8281                           ;vscp_writeRegister@reg stored from wreg
  8282  004496  CFE8 F050          	movff	wreg,vscp_writeRegister@reg
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8286  00449A  0E7F               	movlw	127
  8287  00449C  6450               	cpfsgt	vscp_writeRegister@reg,c
  8288  00449E  D006               	goto	l15126
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8292  0044A0  C0DE  F036         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8293  0044A4  5050               	movf	vscp_writeRegister@reg,w,c
  8294  0044A6  EC81  F01C         	call	_vscp_writeStdReg
  8295  0044AA  D005               	goto	l1406
  8296  0044AC                     l15126:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;vscp_firmware.c: 705: else {
  8300                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8301  0044AC  C0DE  F04F         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8302  0044B0  5050               	movf	vscp_writeRegister@reg,w,c
  8303  0044B2  EC11  F003         	call	_vscp_writeAppReg
  8304  0044B6                     l1406:
  8305  0044B6  0012               	return	
  8306  0044B8                     __end_of_vscp_writeRegister:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           indf1	equ	0xFE7
  8319                           fsr1h	equ	0xFE2
  8320                           fsr1l	equ	0xFE1
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           plusw2	equ	0xFDB
  8325                           fsr2h	equ	0xFDA
  8326                           fsr2l	equ	0xFD9
  8327                           status	equ	0xFD8
  8328                           
  8329 ;; *************** function _vscp_writeStdReg *****************
  8330 ;; Defined at:
  8331 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  reg             1    wreg     unsigned char 
  8334 ;;  value           1   53[COMRAM] unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  reg             1   59[COMRAM] unsigned char 
  8337 ;;  rv              1   58[COMRAM] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      unsigned char 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : F/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8347 ;;      Params:         1       0       0       0       0       0       0
  8348 ;;      Locals:         2       0       0       0       0       0       0
  8349 ;;      Temps:          4       0       0       0       0       0       0
  8350 ;;      Totals:         7       0       0       0       0       0       0
  8351 ;;Total ram usage:        7 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    5
  8354 ;; This function calls:
  8355 ;;		_vscp_setGUID
  8356 ;;		_vscp_setManufacturerId
  8357 ;;		_vscp_getGUID
  8358 ;;		_vscp_getUserID
  8359 ;;		_vscp_setUserID
  8360 ;;		_vscp_getManufacturerId
  8361 ;;		_vscp_restoreDefaults
  8362 ;; This function is called by:
  8363 ;;		_vscp_writeRegister
  8364 ;;		_vscp_handleProtocolEvent
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           	psect	text19
  8369  003902                     __ptext19:
  8370                           	opt stack 0
  8371  003902                     _vscp_writeStdReg:
  8372                           	opt stack 23
  8373                           
  8374                           ;incstack = 0
  8375                           ;incstack = 0
  8376                           ;vscp_writeStdReg@reg stored from wreg
  8377  003902  CFE8 F03C          	movff	wreg,vscp_writeStdReg@reg
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  8381  003906  1C36               	comf	vscp_writeStdReg@value,w,c
  8382  003908  6E3B               	movwf	vscp_writeStdReg@rv,c
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  8386                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  8387  00390A  0E83               	movlw	131
  8388  00390C  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8389  00390E  D00E               	goto	l15138
  8390                           
  8391                           ; BSR set to: 0
  8392  003910  0E89               	movlw	137
  8393  003912  603C               	cpfslt	vscp_writeStdReg@reg,c
  8394  003914  D00B               	goto	l15138
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  8398  003916  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  8399  00391A  503C               	movf	vscp_writeStdReg@reg,w,c
  8400  00391C  0F7C               	addlw	124
  8401  00391E  EC98  F022         	call	_vscp_setUserID
  8402                           
  8403                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  8404  003922  503C               	movf	vscp_writeStdReg@reg,w,c
  8405  003924  0F7C               	addlw	124
  8406  003926  EC04  F023         	call	_vscp_getUserID
  8407  00392A  D069               	goto	L31
  8408  00392C                     l15138:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  8412  00392C  503C               	movf	vscp_writeStdReg@reg,w,c
  8413  00392E  0A92               	xorlw	146
  8414  003930  E10D               	bnz	l15144
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  8418  003932  5036               	movf	vscp_writeStdReg@value,w,c
  8419  003934  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8420  003936  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8421  003938  5052               	movf	_vscp_page_select,w,c
  8422  00393A  6E39               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  8423  00393C  6A3A               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  8424  00393E  1037               	iorwf	??_vscp_writeStdReg,w,c
  8425  003940  6E52               	movwf	_vscp_page_select,c
  8426  003942  5038               	movf	??_vscp_writeStdReg+1,w,c
  8427  003944  103A               	iorwf	??_vscp_writeStdReg+3,w,c
  8428  003946  6E53               	movwf	_vscp_page_select+1,c
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  8432  003948  5053               	movf	_vscp_page_select+1,w,c
  8433  00394A  D059               	goto	L31
  8434  00394C                     l15144:
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  8438  00394C  503C               	movf	vscp_writeStdReg@reg,w,c
  8439  00394E  0A93               	xorlw	147
  8440  003950  E10B               	bnz	l15150
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  8444  003952  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8445  003954  5053               	movf	_vscp_page_select+1,w,c
  8446  003956  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8447  003958  5036               	movf	vscp_writeStdReg@value,w,c
  8448  00395A  1037               	iorwf	??_vscp_writeStdReg,w,c
  8449  00395C  6E52               	movwf	_vscp_page_select,c
  8450  00395E  5038               	movf	??_vscp_writeStdReg+1,w,c
  8451  003960  6E53               	movwf	_vscp_page_select+1,c
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  8455  003962  C052  F03B         	movff	_vscp_page_select,vscp_writeStdReg@rv
  8456                           
  8457                           ;vscp_firmware.c: 737: }
  8458  003966  D04E               	goto	l15192
  8459  003968                     l15150:
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  8463  003968  0E88               	movlw	136
  8464  00396A  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8465  00396C  D019               	goto	l15162
  8466                           
  8467                           ; BSR set to: 0
  8468  00396E  0E91               	movlw	145
  8469  003970  603C               	cpfslt	vscp_writeStdReg@reg,c
  8470  003972  D016               	goto	l15162
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8474                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  8475  003974  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8476  003978  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8477  00397C  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8478  00397E  2838               	incf	??_vscp_writeStdReg+1,w,c
  8479  003980  E102               	bnz	l15158
  8480                           
  8481                           ; BSR set to: 0
  8482  003982  2852               	incf	_vscp_page_select,w,c
  8483  003984  E002               	bz	l15160
  8484  003986                     l15158:
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;vscp_firmware.c: 747: rv = ~value;
  8488  003986  1C36               	comf	vscp_writeStdReg@value,w,c
  8489  003988  D03A               	goto	L31
  8490  00398A                     l15160:
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;vscp_firmware.c: 749: else {
  8494                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  8495  00398A  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  8496  00398E  503C               	movf	vscp_writeStdReg@reg,w,c
  8497  003990  0F77               	addlw	119
  8498  003992  ECEE  F021         	call	_vscp_setManufacturerId
  8499                           
  8500                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  8501  003996  503C               	movf	vscp_writeStdReg@reg,w,c
  8502  003998  0F77               	addlw	119
  8503  00399A  ECFA  F022         	call	_vscp_getManufacturerId
  8504  00399E  D02F               	goto	L31
  8505  0039A0                     l15162:
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  8509  0039A0  0ECF               	movlw	207
  8510  0039A2  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8511  0039A4  D017               	goto	l15174
  8512                           
  8513                           ; BSR set to: 0
  8514  0039A6  0EE0               	movlw	224
  8515  0039A8  603C               	cpfslt	vscp_writeStdReg@reg,c
  8516  0039AA  D014               	goto	l15174
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8520                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  8521  0039AC  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8522  0039B0  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8523  0039B4  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8524  0039B6  2838               	incf	??_vscp_writeStdReg+1,w,c
  8525  0039B8  E1E6               	bnz	l15158
  8526                           
  8527                           ; BSR set to: 0
  8528  0039BA  2852               	incf	_vscp_page_select,w,c
  8529  0039BC  E1E4               	bnz	l15158
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;vscp_firmware.c: 762: else {
  8533                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  8534  0039BE  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  8535  0039C2  503C               	movf	vscp_writeStdReg@reg,w,c
  8536  0039C4  0F30               	addlw	48
  8537  0039C6  EC01  F022         	call	_vscp_setGUID
  8538                           
  8539                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  8540  0039CA  503C               	movf	vscp_writeStdReg@reg,w,c
  8541  0039CC  0F30               	addlw	48
  8542  0039CE  EC0E  F023         	call	_vscp_getGUID
  8543  0039D2  D015               	goto	L31
  8544  0039D4                     l15174:
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  8548  0039D4  503C               	movf	vscp_writeStdReg@reg,w,c
  8549  0039D6  0AA2               	xorlw	162
  8550  0039D8  E1D6               	bnz	l15158
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  8554  0039DA  5036               	movf	vscp_writeStdReg@value,w,c
  8555  0039DC  0A55               	xorlw	85
  8556  0039DE  E104               	bnz	l15182
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  8560  0039E0  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  8561  0039E2  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 771: rv = 0x55;
  8565  0039E4  0E55               	movlw	85
  8566  0039E6  D00B               	goto	L31
  8567  0039E8                     l15182:
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  8571  0039E8  5036               	movf	vscp_writeStdReg@value,w,c
  8572  0039EA  0AAA               	xorlw	170
  8573  0039EC  E10B               	bnz	l15192
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  8577  0039EE  0EE8               	movlw	232
  8578  0039F0  5D6C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  8579  0039F2  0E03               	movlw	3
  8580  0039F4  596D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  8581  0039F6  E205               	bc	l1432
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  8585  0039F8  EC51  F023         	call	_vscp_restoreDefaults	;wreg free
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;vscp_firmware.c: 776: rv = 0xaa;
  8589  0039FC  0EAA               	movlw	170
  8590  0039FE                     L31:
  8591  0039FE  6E3B               	movwf	vscp_writeStdReg@rv,c
  8592                           
  8593                           ;vscp_firmware.c: 777: }
  8594  003A00  D001               	goto	l15192
  8595  003A02                     l1432:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;vscp_firmware.c: 778: else {
  8599                           ;vscp_firmware.c: 779: rv = 0;
  8600  003A02  6A3B               	clrf	vscp_writeStdReg@rv,c
  8601  003A04                     l15192:
  8602                           
  8603                           ;vscp_firmware.c: 787: }
  8604                           ;vscp_firmware.c: 789: return rv;
  8605  003A04  503B               	movf	vscp_writeStdReg@rv,w,c
  8606  003A06  0012               	return	
  8607  003A08                     __end_of_vscp_writeStdReg:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           postinc0	equ	0xFEE
  8618                           wreg	equ	0xFE8
  8619                           indf1	equ	0xFE7
  8620                           fsr1h	equ	0xFE2
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           plusw2	equ	0xFDB
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           
  8630 ;; *************** function _vscp_restoreDefaults *****************
  8631 ;; Defined at:
  8632 ;;		line 3497 in file "../main.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;		None               void
  8639 ;; Registers used:
  8640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : F/0
  8643 ;;		On exit  : F/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8646 ;;      Params:         0       0       0       0       0       0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    4
  8653 ;; This function calls:
  8654 ;;		_init_app_eeprom
  8655 ;;		_init_app_ram
  8656 ;; This function is called by:
  8657 ;;		_vscp_writeStdReg
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text20
  8662  0046A2                     __ptext20:
  8663                           	opt stack 0
  8664  0046A2                     _vscp_restoreDefaults:
  8665                           	opt stack 23
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 3498: init_app_eeprom();
  8669                           
  8670                           ;incstack = 0
  8671                           ;incstack = 0
  8672  0046A2  EC91  F019         	call	_init_app_eeprom	;wreg free
  8673                           
  8674                           ;main.c: 3499: init_app_ram();
  8675  0046A6  EFBD  F013         	goto	_init_app_ram	;wreg free
  8676  0046AA                     __end_of_vscp_restoreDefaults:
  8677                           	opt stack 0
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           intcon2	equ	0xFF1
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           indf1	equ	0xFE7
  8689                           fsr1h	equ	0xFE2
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _init_app_ram *****************
  8700 ;; Defined at:
  8701 ;;		line 744 in file "../main.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  i               1   52[COMRAM] unsigned char 
  8706 ;;  dir             1   51[COMRAM] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;		None               void
  8709 ;; Registers used:
  8710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : F/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8716 ;;      Params:         0       0       0       0       0       0       0
  8717 ;;      Locals:         2       0       0       0       0       0       0
  8718 ;;      Temps:         36       0       0       0       0       0       0
  8719 ;;      Totals:        38       0       0       0       0       0       0
  8720 ;;Total ram usage:       38 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    3
  8723 ;; This function calls:
  8724 ;;		_Read_b_eep
  8725 ;;		_memset
  8726 ;; This function is called by:
  8727 ;;		_main
  8728 ;;		_vscp_restoreDefaults
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text21
  8733  00277A                     __ptext21:
  8734                           	opt stack 0
  8735  00277A                     _init_app_ram:
  8736                           	opt stack 23
  8737                           
  8738                           ;main.c: 745: uint8_t i;
  8739                           ;main.c: 746: uint8_t dir;
  8740                           ;main.c: 748: measurement_clock_sec = 0;
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;incstack = 0
  8744                           ;incstack = 0
  8745  00277A  0100               	movlb	0	; () banked
  8746  00277C  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  8747  00277E  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  8748  002780  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  8749  002782  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  8750                           
  8751                           ;main.c: 750: seconds = 0;
  8752  002784  6B78               	clrf	_seconds& (0+255),b
  8753                           
  8754                           ;main.c: 751: minutes = 0;
  8755  002786  6B77               	clrf	_minutes& (0+255),b
  8756                           
  8757                           ;main.c: 752: hours = 0;
  8758  002788  6B76               	clrf	_hours& (0+255),b
  8759                           
  8760                           ;main.c: 754: channel_pulse_flags = 0;
  8761  00278A  6B68               	clrf	_channel_pulse_flags& (0+255),b
  8762  00278C  6B69               	clrf	(_channel_pulse_flags+1)& (0+255),b
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;main.c: 757: memset( channel_pulse_timer, 0, sizeof( channel_pulse_timer ) );
  8766  00278E  0101               	movlb	1	; () banked
  8767  002790  0E01               	movlw	high _channel_pulse_timer
  8768  002792  6E09               	movwf	?_memset+1,c
  8769  002794  0E00               	movlw	low _channel_pulse_timer
  8770  002796  D941               	call	PL80	;call to abstracted procedure
  8771  002798  EC71  F021         	call	_memset	;wreg free
  8772                           
  8773                           ;main.c: 758: memset( channel_protection_timer, 0, sizeof( channel_protection_timer ) );
  8774  00279C  0100               	movlb	0	; () banked
  8775  00279E  0E00               	movlw	high _channel_protection_timer
  8776  0027A0  6E09               	movwf	?_memset+1,c
  8777  0027A2  0E83               	movlw	low _channel_protection_timer
  8778  0027A4  D93A               	call	PL80	;call to abstracted procedure
  8779  0027A6  EC71  F021         	call	_memset	;wreg free
  8780                           
  8781                           ;main.c: 760: for ( i=0; i<10; i++ ) {
  8782  0027AA  6A35               	clrf	init_app_ram@i,c
  8783  0027AC                     l12816:
  8784                           
  8785                           ;main.c: 763: if ( Read_b_eep(0x43 + 24 + i) &
  8786                           ;main.c: 764: 0x01 ) {
  8787  0027AC  0E5B               	movlw	91
  8788  0027AE  2435               	addwf	init_app_ram@i,w,c
  8789  0027B0  6E08               	movwf	?_Read_b_eep,c
  8790  0027B2  6A09               	clrf	?_Read_b_eep+1,c
  8791  0027B4  0E00               	movlw	0
  8792  0027B6  2209               	addwfc	?_Read_b_eep+1,f,c
  8793  0027B8  EC21  F023         	call	_Read_b_eep	;wreg free
  8794  0027BC  6E10               	movwf	??_init_app_ram& (0+255),c
  8795  0027BE  A010               	btfss	??_init_app_ram,0,c
  8796  0027C0  D02C               	goto	l12822
  8797                           
  8798                           ;main.c: 766: channel_pulse_flags |= (1<<i);
  8799  0027C2  C035  F010         	movff	init_app_ram@i,??_init_app_ram
  8800  0027C6  0E01               	movlw	1
  8801  0027C8  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8802  0027CA  6A12               	clrf	(??_init_app_ram+2)& (0+255),c
  8803  0027CC  2A10               	incf	??_init_app_ram,f,c
  8804  0027CE  D003               	goto	u16574
  8805  0027D0                     u16575:
  8806  0027D0  90D8               	bcf	status,0,c
  8807  0027D2  3611               	rlcf	??_init_app_ram+1,f,c
  8808  0027D4  3612               	rlcf	??_init_app_ram+2,f,c
  8809  0027D6                     u16574:
  8810  0027D6  2E10               	decfsz	??_init_app_ram,f,c
  8811  0027D8  D7FB               	goto	u16575
  8812  0027DA  5011               	movf	??_init_app_ram+1,w,c
  8813  0027DC  0100               	movlb	0	; () banked
  8814  0027DE  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  8815  0027E0  5012               	movf	??_init_app_ram+2,w,c
  8816  0027E2  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 767: channel_pulse_timer[ i ] =
  8820                           ;main.c: 768: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8821                           ;main.c: 769: Read_b_eep(0x43 + 46 + 1u + i);
  8822  0027E4  0E71               	movlw	113
  8823  0027E6  2435               	addwf	init_app_ram@i,w,c
  8824  0027E8  6E08               	movwf	?_Read_b_eep,c
  8825  0027EA  6A09               	clrf	?_Read_b_eep+1,c
  8826  0027EC  0E00               	movlw	0
  8827  0027EE  2209               	addwfc	?_Read_b_eep+1,f,c
  8828  0027F0  EC21  F023         	call	_Read_b_eep	;wreg free
  8829  0027F4  D909               	call	PL68	;call to abstracted procedure
  8830  0027F6  EC21  F023         	call	_Read_b_eep	;wreg free
  8831  0027FA  2610               	addwf	??_init_app_ram,f,c
  8832  0027FC  0E00               	movlw	0
  8833  0027FE  2211               	addwfc	??_init_app_ram+1,f,c
  8834  002800  5035               	movf	init_app_ram@i,w,c
  8835  002802  0D02               	mullw	2
  8836  002804  0101               	movlb	1	; () banked
  8837  002806  0E00               	movlw	low _channel_pulse_timer
  8838  002808  24F3               	addwf	prodl,w,c
  8839  00280A  6ED9               	movwf	fsr2l,c
  8840  00280C  0E01               	movlw	high _channel_pulse_timer
  8841  00280E  20F4               	addwfc	prodh,w,c
  8842  002810  6EDA               	movwf	fsr2h,c
  8843  002812  C010  FFDE         	movff	??_init_app_ram,postinc2
  8844  002816  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8845  00281A                     l12822:
  8846                           
  8847                           ;main.c: 770: }
  8848                           ;main.c: 773: if ( Read_b_eep(0x43 + 29 + i) & 0x04) {
  8849  00281A  0E60               	movlw	96
  8850  00281C  2435               	addwf	init_app_ram@i,w,c
  8851  00281E  6E08               	movwf	?_Read_b_eep,c
  8852  002820  6A09               	clrf	?_Read_b_eep+1,c
  8853  002822  0E00               	movlw	0
  8854  002824  2209               	addwfc	?_Read_b_eep+1,f,c
  8855  002826  EC21  F023         	call	_Read_b_eep	;wreg free
  8856  00282A  6E10               	movwf	??_init_app_ram& (0+255),c
  8857  00282C  A410               	btfss	??_init_app_ram,2,c
  8858  00282E  D019               	goto	l12826
  8859                           
  8860                           ;main.c: 774: channel_protection_timer[ i ] =
  8861                           ;main.c: 775: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8862                           ;main.c: 776: Read_b_eep(0x43 + 46 + 1u + i);
  8863  002830  0E71               	movlw	113
  8864  002832  2435               	addwf	init_app_ram@i,w,c
  8865  002834  6E08               	movwf	?_Read_b_eep,c
  8866  002836  6A09               	clrf	?_Read_b_eep+1,c
  8867  002838  0E00               	movlw	0
  8868  00283A  2209               	addwfc	?_Read_b_eep+1,f,c
  8869  00283C  EC21  F023         	call	_Read_b_eep	;wreg free
  8870  002840  D8E3               	call	PL68	;call to abstracted procedure
  8871  002842  EC21  F023         	call	_Read_b_eep	;wreg free
  8872  002846  2610               	addwf	??_init_app_ram,f,c
  8873  002848  0E00               	movlw	0
  8874  00284A  2211               	addwfc	??_init_app_ram+1,f,c
  8875  00284C  5035               	movf	init_app_ram@i,w,c
  8876  00284E  0D02               	mullw	2
  8877  002850  50F3               	movf	prodl,w,c
  8878  002852  0100               	movlb	0	; () banked
  8879  002854  0F83               	addlw	low _channel_protection_timer
  8880  002856  6ED9               	movwf	fsr2l,c
  8881  002858  6ADA               	clrf	fsr2h,c
  8882  00285A  C010  FFDE         	movff	??_init_app_ram,postinc2
  8883  00285E  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8884  002862                     l12826:
  8885  002862  2A35               	incf	init_app_ram@i,f,c
  8886  002864  0E09               	movlw	9
  8887  002866  6435               	cpfsgt	init_app_ram@i,c
  8888  002868  D7A1               	goto	l12816
  8889                           
  8890                           ;main.c: 777: }
  8891                           ;main.c: 779: }
  8892                           ;main.c: 781: dir = Read_b_eep(0x43 + 12);
  8893  00286A  6A09               	clrf	?_Read_b_eep+1,c
  8894  00286C  0E4F               	movlw	79
  8895  00286E  6E08               	movwf	?_Read_b_eep,c
  8896  002870  EC21  F023         	call	_Read_b_eep	;wreg free
  8897  002874  6E34               	movwf	init_app_ram@dir,c
  8898                           
  8899                           ;main.c: 782: TRISA = ( dir & 0x03 ) | 0b00000000;
  8900  002876  5034               	movf	init_app_ram@dir,w,c
  8901  002878  0B03               	andlw	3
  8902  00287A  6E92               	movwf	3986,c	;volatile
  8903                           
  8904                           ;main.c: 784: dir = Read_b_eep(0x43 + 13);
  8905  00287C  6A09               	clrf	?_Read_b_eep+1,c
  8906  00287E  0E50               	movlw	80
  8907  002880  6E08               	movwf	?_Read_b_eep,c
  8908  002882  EC21  F023         	call	_Read_b_eep	;wreg free
  8909  002886  6E34               	movwf	init_app_ram@dir,c
  8910                           
  8911                           ;main.c: 785: TRISB = ( dir & 0x03 ) | 0b00001000;
  8912  002888  5034               	movf	init_app_ram@dir,w,c
  8913  00288A  0B03               	andlw	3
  8914  00288C  0908               	iorlw	8
  8915  00288E  6E93               	movwf	3987,c	;volatile
  8916                           
  8917                           ;main.c: 788: if ( Read_b_eep(0x43 + 44) & 0x01 ) {
  8918  002890  6A09               	clrf	?_Read_b_eep+1,c
  8919  002892  0E6F               	movlw	111
  8920  002894  6E08               	movwf	?_Read_b_eep,c
  8921  002896  EC21  F023         	call	_Read_b_eep	;wreg free
  8922  00289A  6E10               	movwf	??_init_app_ram& (0+255),c
  8923  00289C  B010               	btfsc	??_init_app_ram,0,c
  8924                           
  8925                           ;main.c: 789: INTCON2bits.RBPU = 0;
  8926  00289E  9EF1               	bcf	intcon2,7,c	;volatile
  8927                           
  8928                           ;main.c: 790: }
  8929                           ;main.c: 792: dir = ( Read_b_eep(0x43 + 13) << 1 ) & 0b11111000;
  8930  0028A0  6A09               	clrf	?_Read_b_eep+1,c
  8931  0028A2  0E50               	movlw	80
  8932  0028A4  6E08               	movwf	?_Read_b_eep,c
  8933  0028A6  EC21  F023         	call	_Read_b_eep	;wreg free
  8934  0028AA  6E10               	movwf	??_init_app_ram& (0+255),c
  8935  0028AC  90D8               	bcf	status,0,c
  8936  0028AE  3410               	rlcf	??_init_app_ram,w,c
  8937  0028B0  0BF8               	andlw	248
  8938  0028B2  6E34               	movwf	init_app_ram@dir,c
  8939                           
  8940                           ;main.c: 793: TRISC = dir | 0b00000001;
  8941  0028B4  5034               	movf	init_app_ram@dir,w,c
  8942  0028B6  0901               	iorlw	1
  8943  0028B8  6E94               	movwf	3988,c	;volatile
  8944                           
  8945                           ;main.c: 795: memset( debounce_cnt, 0, sizeof( debounce_cnt ) );
  8946  0028BA  0100               	movlb	0	; () banked
  8947  0028BC  0E00               	movlw	high _debounce_cnt
  8948  0028BE  6E09               	movwf	?_memset+1,c
  8949  0028C0  0EB2               	movlw	low _debounce_cnt
  8950  0028C2  6E08               	movwf	?_memset,c
  8951  0028C4  6A0B               	clrf	?_memset+3,c
  8952  0028C6  6A0A               	clrf	?_memset+2,c
  8953  0028C8  6A0D               	clrf	?_memset+5,c
  8954  0028CA  0E0A               	movlw	10
  8955  0028CC  6E0C               	movwf	?_memset+4,c
  8956  0028CE  EC71  F021         	call	_memset	;wreg free
  8957                           
  8958                           ;main.c: 796: current_debounce = 0;
  8959  0028D2  0100               	movlb	0	; () banked
  8960  0028D4  6B75               	clrf	_current_debounce& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;main.c: 799: current_iostate = ( PORTAbits.RA0 << 9 ) +
  8964                           ;main.c: 800: ( PORTAbits.RA1 << 8 ) +
  8965                           ;main.c: 801: ( PORTAbits.RA2 << 7 ) +
  8966                           ;main.c: 802: ( PORTCbits.RC7 << 6 ) +
  8967                           ;main.c: 803: ( PORTCbits.RC6 << 5 ) +
  8968                           ;main.c: 804: ( PORTCbits.RC5 << 4 ) +
  8969                           ;main.c: 805: ( PORTCbits.RC4 << 3 ) +
  8970                           ;main.c: 806: ( PORTCbits.RC3 << 2 ) +
  8971                           ;main.c: 807: ( PORTBbits.RB1 << 1 ) +
  8972                           ;main.c: 808: PORTBbits.RB0;
  8973  0028D6  5081               	movf	3969,w,c	;volatile
  8974  0028D8  0B01               	andlw	1
  8975  0028DA  6E10               	movwf	??_init_app_ram& (0+255),c
  8976  0028DC  3081               	rrcf	3969,w,c	;volatile
  8977  0028DE  0B01               	andlw	1
  8978  0028E0  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8979  0028E2  90D8               	bcf	status,0,c
  8980  0028E4  3411               	rlcf	??_init_app_ram+1,w,c
  8981  0028E6  6E12               	movwf	(??_init_app_ram+2)& (0+255),c
  8982  0028E8  6A13               	clrf	(??_init_app_ram+3)& (0+255),c
  8983  0028EA  3613               	rlcf	(??_init_app_ram+3)& (0+255),f,c
  8984  0028EC  3082               	rrcf	3970,w,c	;volatile
  8985  0028EE  32E8               	rrcf	wreg,f,c
  8986  0028F0  32E8               	rrcf	wreg,f,c
  8987  0028F2  0B01               	andlw	1
  8988  0028F4  6E14               	movwf	(??_init_app_ram+4)& (0+255),c
  8989  0028F6  6A15               	clrf	(??_init_app_ram+5)& (0+255),c
  8990  0028F8  90D8               	bcf	status,0,c
  8991  0028FA  3614               	rlcf	??_init_app_ram+4,f,c
  8992  0028FC  3615               	rlcf	??_init_app_ram+5,f,c
  8993  0028FE  90D8               	bcf	status,0,c
  8994  002900  3614               	rlcf	??_init_app_ram+4,f,c
  8995  002902  3615               	rlcf	??_init_app_ram+5,f,c
  8996  002904  3882               	swapf	3970,w,c	;volatile
  8997  002906  0B01               	andlw	1
  8998  002908  6E16               	movwf	(??_init_app_ram+6)& (0+255),c
  8999  00290A  6A17               	clrf	(??_init_app_ram+7)& (0+255),c
  9000  00290C  90D8               	bcf	status,0,c
  9001  00290E  3616               	rlcf	??_init_app_ram+6,f,c
  9002  002910  3617               	rlcf	??_init_app_ram+7,f,c
  9003  002912  90D8               	bcf	status,0,c
  9004  002914  3616               	rlcf	??_init_app_ram+6,f,c
  9005  002916  3617               	rlcf	??_init_app_ram+7,f,c
  9006  002918  90D8               	bcf	status,0,c
  9007  00291A  3616               	rlcf	??_init_app_ram+6,f,c
  9008  00291C  3617               	rlcf	??_init_app_ram+7,f,c
  9009  00291E  3882               	swapf	3970,w,c	;volatile
  9010  002920  32E8               	rrcf	wreg,f,c
  9011  002922  0B01               	andlw	1
  9012  002924  6E18               	movwf	(??_init_app_ram+8)& (0+255),c
  9013  002926  6A19               	clrf	(??_init_app_ram+9)& (0+255),c
  9014  002928  3A18               	swapf	??_init_app_ram+8,f,c
  9015  00292A  3A19               	swapf	??_init_app_ram+9,f,c
  9016  00292C  0EF0               	movlw	240
  9017  00292E  1619               	andwf	??_init_app_ram+9,f,c
  9018  002930  5018               	movf	??_init_app_ram+8,w,c
  9019  002932  0B0F               	andlw	15
  9020  002934  1219               	iorwf	??_init_app_ram+9,f,c
  9021  002936  0EF0               	movlw	240
  9022  002938  1618               	andwf	??_init_app_ram+8,f,c
  9023  00293A  3882               	swapf	3970,w,c	;volatile
  9024  00293C  32E8               	rrcf	wreg,f,c
  9025  00293E  32E8               	rrcf	wreg,f,c
  9026  002940  0B01               	andlw	1
  9027  002942  6E1A               	movwf	(??_init_app_ram+10)& (0+255),c
  9028  002944  6A1B               	clrf	(??_init_app_ram+11)& (0+255),c
  9029  002946  0E05               	movlw	5
  9030  002948                     u16615:
  9031  002948  90D8               	bcf	status,0,c
  9032  00294A  361A               	rlcf	??_init_app_ram+10,f,c
  9033  00294C  361B               	rlcf	??_init_app_ram+11,f,c
  9034  00294E  2EE8               	decfsz	wreg,f,c
  9035  002950  D7FB               	goto	u16615
  9036  002952  3482               	rlcf	3970,w,c	;volatile
  9037  002954  36E8               	rlcf	wreg,f,c
  9038  002956  0B01               	andlw	1
  9039  002958  6E1C               	movwf	(??_init_app_ram+12)& (0+255),c
  9040  00295A  6A1D               	clrf	(??_init_app_ram+13)& (0+255),c
  9041  00295C  0E06               	movlw	6
  9042  00295E                     u16625:
  9043  00295E  90D8               	bcf	status,0,c
  9044  002960  361C               	rlcf	??_init_app_ram+12,f,c
  9045  002962  361D               	rlcf	??_init_app_ram+13,f,c
  9046  002964  2EE8               	decfsz	wreg,f,c
  9047  002966  D7FB               	goto	u16625
  9048  002968  3080               	rrcf	3968,w,c	;volatile
  9049  00296A  32E8               	rrcf	wreg,f,c
  9050  00296C  0B01               	andlw	1
  9051  00296E  6E1E               	movwf	(??_init_app_ram+14)& (0+255),c
  9052  002970  6A1F               	clrf	(??_init_app_ram+15)& (0+255),c
  9053  002972  0E07               	movlw	7
  9054  002974                     u16635:
  9055  002974  90D8               	bcf	status,0,c
  9056  002976  361E               	rlcf	??_init_app_ram+14,f,c
  9057  002978  361F               	rlcf	??_init_app_ram+15,f,c
  9058  00297A  2EE8               	decfsz	wreg,f,c
  9059  00297C  D7FB               	goto	u16635
  9060  00297E  3080               	rrcf	3968,w,c	;volatile
  9061  002980  0B01               	andlw	1
  9062  002982  6E21               	movwf	(??_init_app_ram+17)& (0+255),c
  9063  002984  6A20               	clrf	(??_init_app_ram+16)& (0+255),c
  9064  002986  5080               	movf	3968,w,c	;volatile
  9065  002988  0B01               	andlw	1
  9066  00298A  6E22               	movwf	(??_init_app_ram+18)& (0+255),c
  9067  00298C  6A23               	clrf	(??_init_app_ram+19)& (0+255),c
  9068  00298E  0E09               	movlw	9
  9069  002990                     u16645:
  9070  002990  90D8               	bcf	status,0,c
  9071  002992  3622               	rlcf	??_init_app_ram+18,f,c
  9072  002994  3623               	rlcf	??_init_app_ram+19,f,c
  9073  002996  2EE8               	decfsz	wreg,f,c
  9074  002998  D7FB               	goto	u16645
  9075  00299A  5020               	movf	??_init_app_ram+16,w,c
  9076  00299C  2422               	addwf	??_init_app_ram+18,w,c
  9077  00299E  6E24               	movwf	(??_init_app_ram+20)& (0+255),c
  9078  0029A0  5021               	movf	??_init_app_ram+17,w,c
  9079  0029A2  2023               	addwfc	??_init_app_ram+19,w,c
  9080  0029A4  6E25               	movwf	(??_init_app_ram+21)& (0+255),c
  9081  0029A6  501E               	movf	??_init_app_ram+14,w,c
  9082  0029A8  2424               	addwf	??_init_app_ram+20,w,c
  9083  0029AA  6E26               	movwf	(??_init_app_ram+22)& (0+255),c
  9084  0029AC  501F               	movf	??_init_app_ram+15,w,c
  9085  0029AE  2025               	addwfc	??_init_app_ram+21,w,c
  9086  0029B0  6E27               	movwf	(??_init_app_ram+23)& (0+255),c
  9087  0029B2  501C               	movf	??_init_app_ram+12,w,c
  9088  0029B4  2426               	addwf	??_init_app_ram+22,w,c
  9089  0029B6  6E28               	movwf	(??_init_app_ram+24)& (0+255),c
  9090  0029B8  501D               	movf	??_init_app_ram+13,w,c
  9091  0029BA  2027               	addwfc	??_init_app_ram+23,w,c
  9092  0029BC  6E29               	movwf	(??_init_app_ram+25)& (0+255),c
  9093  0029BE  501A               	movf	??_init_app_ram+10,w,c
  9094  0029C0  2428               	addwf	??_init_app_ram+24,w,c
  9095  0029C2  6E2A               	movwf	(??_init_app_ram+26)& (0+255),c
  9096  0029C4  501B               	movf	??_init_app_ram+11,w,c
  9097  0029C6  2029               	addwfc	??_init_app_ram+25,w,c
  9098  0029C8  6E2B               	movwf	(??_init_app_ram+27)& (0+255),c
  9099  0029CA  5018               	movf	??_init_app_ram+8,w,c
  9100  0029CC  242A               	addwf	??_init_app_ram+26,w,c
  9101  0029CE  6E2C               	movwf	(??_init_app_ram+28)& (0+255),c
  9102  0029D0  5019               	movf	??_init_app_ram+9,w,c
  9103  0029D2  202B               	addwfc	??_init_app_ram+27,w,c
  9104  0029D4  6E2D               	movwf	(??_init_app_ram+29)& (0+255),c
  9105  0029D6  5016               	movf	??_init_app_ram+6,w,c
  9106  0029D8  242C               	addwf	??_init_app_ram+28,w,c
  9107  0029DA  6E2E               	movwf	(??_init_app_ram+30)& (0+255),c
  9108  0029DC  5017               	movf	??_init_app_ram+7,w,c
  9109  0029DE  202D               	addwfc	??_init_app_ram+29,w,c
  9110  0029E0  6E2F               	movwf	(??_init_app_ram+31)& (0+255),c
  9111  0029E2  5014               	movf	??_init_app_ram+4,w,c
  9112  0029E4  242E               	addwf	??_init_app_ram+30,w,c
  9113  0029E6  6E30               	movwf	(??_init_app_ram+32)& (0+255),c
  9114  0029E8  5015               	movf	??_init_app_ram+5,w,c
  9115  0029EA  202F               	addwfc	??_init_app_ram+31,w,c
  9116  0029EC  6E31               	movwf	(??_init_app_ram+33)& (0+255),c
  9117  0029EE  5012               	movf	??_init_app_ram+2,w,c
  9118  0029F0  2430               	addwf	??_init_app_ram+32,w,c
  9119  0029F2  6E32               	movwf	(??_init_app_ram+34)& (0+255),c
  9120  0029F4  5013               	movf	??_init_app_ram+3,w,c
  9121  0029F6  2031               	addwfc	??_init_app_ram+33,w,c
  9122  0029F8  6E33               	movwf	(??_init_app_ram+35)& (0+255),c
  9123  0029FA  5010               	movf	??_init_app_ram,w,c
  9124  0029FC  2432               	addwf	??_init_app_ram+34,w,c
  9125  0029FE  6F6A               	movwf	_current_iostate& (0+255),b
  9126  002A00  0E00               	movlw	0
  9127  002A02  2033               	addwfc	??_init_app_ram+35,w,c
  9128  002A04  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  9129                           
  9130                           ; BSR set to: 0
  9131  002A06  0012               	return	
  9132  002A08                     __end_of_init_app_ram:
  9133                           	opt stack 0
  9134  002A08                     PL68:
  9135                           	opt stack 23
  9136  002A08  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  9137  002A0A  6A10               	clrf	??_init_app_ram& (0+255),c
  9138  002A0C  0E72               	movlw	114
  9139  002A0E  2435               	addwf	init_app_ram@i,w,c
  9140  002A10  6E08               	movwf	?_Read_b_eep,c
  9141  002A12  6A09               	clrf	?_Read_b_eep+1,c
  9142  002A14  0E00               	movlw	0
  9143  002A16  2209               	addwfc	?_Read_b_eep+1,f,c
  9144  002A18  0C00               	retlw	0
  9145  002A1A                     __end_ofPL68:
  9146                           	opt stack 0
  9147  002A1A                     PL80:
  9148                           	opt stack 23
  9149  002A1A  6E08               	movwf	?_memset,c
  9150  002A1C  6A0B               	clrf	?_memset+3,c
  9151  002A1E  6A0A               	clrf	?_memset+2,c
  9152  002A20  6A0D               	clrf	?_memset+5,c
  9153  002A22  0E14               	movlw	20
  9154  002A24  6E0C               	movwf	?_memset+4,c
  9155  002A26  0C14               	retlw	20
  9156  002A28                     __end_ofPL80:
  9157                           	opt stack 0
  9158                           tblptru	equ	0xFF8
  9159                           tblptrh	equ	0xFF7
  9160                           tblptrl	equ	0xFF6
  9161                           tablat	equ	0xFF5
  9162                           prodh	equ	0xFF4
  9163                           prodl	equ	0xFF3
  9164                           intcon	equ	0xFF2
  9165                           intcon2	equ	0xFF1
  9166                           postinc0	equ	0xFEE
  9167                           wreg	equ	0xFE8
  9168                           indf1	equ	0xFE7
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _memset *****************
  9180 ;; Defined at:
  9181 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  p1              2    7[COMRAM] PTR void 
  9184 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9185 ;;  c               2    9[COMRAM] int 
  9186 ;;  n               2   11[COMRAM] unsigned int 
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;  p               2   13[COMRAM] PTR unsigned char 
  9189 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  2    7[COMRAM] PTR void 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9194 ;; Tracked objects:
  9195 ;;		On entry : E/1
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9199 ;;      Params:         6       0       0       0       0       0       0
  9200 ;;      Locals:         2       0       0       0       0       0       0
  9201 ;;      Temps:          0       0       0       0       0       0       0
  9202 ;;      Totals:         8       0       0       0       0       0       0
  9203 ;;Total ram usage:        8 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    2
  9206 ;; This function calls:
  9207 ;;		Nothing
  9208 ;; This function is called by:
  9209 ;;		_init_app_ram
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text22
  9214  0042E2                     __ptext22:
  9215                           	opt stack 0
  9216  0042E2                     _memset:
  9217                           	opt stack 23
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;incstack = 0
  9221                           ;incstack = 0
  9222  0042E2  C008  F00E         	movff	memset@p1,memset@p
  9223  0042E6  C009  F00F         	movff	memset@p1+1,memset@p+1
  9224  0042EA  D008               	goto	l13704
  9225  0042EC                     l13700:
  9226  0042EC  C00E  FFD9         	movff	memset@p,fsr2l
  9227  0042F0  C00F  FFDA         	movff	memset@p+1,fsr2h
  9228  0042F4  C00A  FFDF         	movff	memset@c,indf2
  9229  0042F8  4A0E               	infsnz	memset@p,f,c
  9230  0042FA  2A0F               	incf	memset@p+1,f,c
  9231  0042FC                     l13704:
  9232  0042FC  060C               	decf	memset@n,f,c
  9233  0042FE  A0D8               	btfss	status,0,c
  9234  004300  060D               	decf	memset@n+1,f,c
  9235  004302  280C               	incf	memset@n& (0+255),w,c
  9236  004304  B4D8               	btfsc	status,2,c
  9237  004306  280D               	incf	(memset@n+1)& (0+255),w,c
  9238  004308  B4D8               	btfsc	status,2,c
  9239  00430A  0012               	return	
  9240  00430C  D7EF               	goto	l13700
  9241  00430E                     __end_of_memset:
  9242                           	opt stack 0
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           intcon2	equ	0xFF1
  9251                           postinc0	equ	0xFEE
  9252                           wreg	equ	0xFE8
  9253                           indf1	equ	0xFE7
  9254                           fsr1h	equ	0xFE2
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           plusw2	equ	0xFDB
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _init_app_eeprom *****************
  9265 ;; Defined at:
  9266 ;;		line 817 in file "../main.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  i               1   14[COMRAM] unsigned char 
  9271 ;;  j               1   13[COMRAM] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;		None               void
  9274 ;; Registers used:
  9275 ;;		wreg, status,2, status,0, cstack
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9281 ;;      Params:         0       0       0       0       0       0       0
  9282 ;;      Locals:         2       0       0       0       0       0       0
  9283 ;;      Temps:          2       0       0       0       0       0       0
  9284 ;;      Totals:         4       0       0       0       0       0       0
  9285 ;;Total ram usage:        4 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    3
  9288 ;; This function calls:
  9289 ;;		_Busy_eep
  9290 ;;		_Write_b_eep
  9291 ;; This function is called by:
  9292 ;;		_main
  9293 ;;		_vscp_restoreDefaults
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text23
  9298  003322                     __ptext23:
  9299                           	opt stack 0
  9300  003322                     _init_app_eeprom:
  9301                           	opt stack 23
  9302                           
  9303                           ;main.c: 818: unsigned char i, j;
  9304                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  9305                           
  9306                           ;incstack = 0
  9307                           ;incstack = 0
  9308  003322  EC55  F023         	call	_Busy_eep	;wreg free
  9309  003326  6A09               	clrf	?_Write_b_eep+1,c
  9310  003328  0E43               	movlw	67
  9311  00332A  6E08               	movwf	?_Write_b_eep,c
  9312  00332C  0E00               	movlw	0
  9313  00332E  6A0A               	clrf	?_Write_b_eep+2,c
  9314  003330  EC28  F021         	call	_Write_b_eep	;wreg free
  9315                           
  9316                           ;main.c: 821: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  9317  003334  EC55  F023         	call	_Busy_eep	;wreg free
  9318  003338  6A09               	clrf	?_Write_b_eep+1,c
  9319  00333A  0E44               	movlw	68
  9320  00333C  6E08               	movwf	?_Write_b_eep,c
  9321  00333E  0E00               	movlw	0
  9322  003340  6A0A               	clrf	?_Write_b_eep+2,c
  9323  003342  EC28  F021         	call	_Write_b_eep	;wreg free
  9324                           
  9325                           ;main.c: 823: for ( i=0; i<10; i++ ) {
  9326  003346  6A0F               	clrf	init_app_eeprom@i,c
  9327  003348                     l12726:
  9328                           
  9329                           ;main.c: 824: (Busy_eep(), Write_b_eep(0x43 + 2 + i,i));
  9330  003348  EC55  F023         	call	_Busy_eep	;wreg free
  9331  00334C  0E45               	movlw	69
  9332  00334E  240F               	addwf	init_app_eeprom@i,w,c
  9333  003350  6E08               	movwf	?_Write_b_eep,c
  9334  003352  6A09               	clrf	?_Write_b_eep+1,c
  9335  003354  0E00               	movlw	0
  9336  003356  2209               	addwfc	?_Write_b_eep+1,f,c
  9337  003358  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  9338  00335C  EC28  F021         	call	_Write_b_eep	;wreg free
  9339  003360  2A0F               	incf	init_app_eeprom@i,f,c
  9340  003362  0E09               	movlw	9
  9341  003364  640F               	cpfsgt	init_app_eeprom@i,c
  9342  003366  D7F0               	goto	l12726
  9343                           
  9344                           ;main.c: 825: }
  9345                           ;main.c: 827: (Busy_eep(), Write_b_eep(0x43 + 12,0x00));
  9346  003368  EC55  F023         	call	_Busy_eep	;wreg free
  9347  00336C  6A09               	clrf	?_Write_b_eep+1,c
  9348  00336E  0E4F               	movlw	79
  9349  003370  6E08               	movwf	?_Write_b_eep,c
  9350  003372  0E00               	movlw	0
  9351  003374  6A0A               	clrf	?_Write_b_eep+2,c
  9352  003376  EC28  F021         	call	_Write_b_eep	;wreg free
  9353                           
  9354                           ;main.c: 828: (Busy_eep(), Write_b_eep(0x43 + 13,0x00));
  9355  00337A  EC55  F023         	call	_Busy_eep	;wreg free
  9356  00337E  6A09               	clrf	?_Write_b_eep+1,c
  9357  003380  0E50               	movlw	80
  9358  003382  6E08               	movwf	?_Write_b_eep,c
  9359  003384  0E00               	movlw	0
  9360  003386  6A0A               	clrf	?_Write_b_eep+2,c
  9361  003388  EC28  F021         	call	_Write_b_eep	;wreg free
  9362                           
  9363                           ;main.c: 830: for ( i=0; i<10; i++ ) {
  9364  00338C  6A0F               	clrf	init_app_eeprom@i,c
  9365  00338E                     l12744:
  9366                           
  9367                           ;main.c: 831: (Busy_eep(), Write_b_eep(0x43 + 24 + i,0x08 | 0x10 | 0x80));
  9368  00338E  EC55  F023         	call	_Busy_eep	;wreg free
  9369  003392  0E5B               	movlw	91
  9370  003394  240F               	addwf	init_app_eeprom@i,w,c
  9371  003396  6E08               	movwf	?_Write_b_eep,c
  9372  003398  6A09               	clrf	?_Write_b_eep+1,c
  9373  00339A  0E00               	movlw	0
  9374  00339C  2209               	addwfc	?_Write_b_eep+1,f,c
  9375  00339E  0E98               	movlw	152
  9376  0033A0  6E0A               	movwf	?_Write_b_eep+2,c
  9377  0033A2  EC28  F021         	call	_Write_b_eep	;wreg free
  9378  0033A6  2A0F               	incf	init_app_eeprom@i,f,c
  9379  0033A8  0E09               	movlw	9
  9380  0033AA  640F               	cpfsgt	init_app_eeprom@i,c
  9381  0033AC  D7F0               	goto	l12744
  9382                           
  9383                           ;main.c: 835: }
  9384                           ;main.c: 837: for ( i=0; i<10; i++ ) {
  9385  0033AE  6A0F               	clrf	init_app_eeprom@i,c
  9386  0033B0                     l12754:
  9387                           
  9388                           ;main.c: 838: (Busy_eep(), Write_b_eep(0x43 + 34 + i,0x01 | 0x02 | 0x80));
  9389  0033B0  EC55  F023         	call	_Busy_eep	;wreg free
  9390  0033B4  0E65               	movlw	101
  9391  0033B6  240F               	addwf	init_app_eeprom@i,w,c
  9392  0033B8  6E08               	movwf	?_Write_b_eep,c
  9393  0033BA  6A09               	clrf	?_Write_b_eep+1,c
  9394  0033BC  0E00               	movlw	0
  9395  0033BE  2209               	addwfc	?_Write_b_eep+1,f,c
  9396  0033C0  0E83               	movlw	131
  9397  0033C2  6E0A               	movwf	?_Write_b_eep+2,c
  9398  0033C4  EC28  F021         	call	_Write_b_eep	;wreg free
  9399  0033C8  2A0F               	incf	init_app_eeprom@i,f,c
  9400  0033CA  0E09               	movlw	9
  9401  0033CC  640F               	cpfsgt	init_app_eeprom@i,c
  9402  0033CE  D7F0               	goto	l12754
  9403                           
  9404                           ;main.c: 842: }
  9405                           ;main.c: 844: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  9406  0033D0  EC55  F023         	call	_Busy_eep	;wreg free
  9407  0033D4  6A09               	clrf	?_Write_b_eep+1,c
  9408  0033D6  0E6F               	movlw	111
  9409  0033D8  6E08               	movwf	?_Write_b_eep,c
  9410  0033DA  0E00               	movlw	0
  9411  0033DC  6A0A               	clrf	?_Write_b_eep+2,c
  9412  0033DE  EC28  F021         	call	_Write_b_eep	;wreg free
  9413                           
  9414                           ;main.c: 846: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  9415  0033E2  EC55  F023         	call	_Busy_eep	;wreg free
  9416  0033E6  6A09               	clrf	?_Write_b_eep+1,c
  9417  0033E8  0E70               	movlw	112
  9418  0033EA  6E08               	movwf	?_Write_b_eep,c
  9419  0033EC  0E00               	movlw	0
  9420  0033EE  6A0A               	clrf	?_Write_b_eep+2,c
  9421  0033F0  EC28  F021         	call	_Write_b_eep	;wreg free
  9422                           
  9423                           ;main.c: 848: for ( i=0; i<20; i++ ) {
  9424  0033F4  6A0F               	clrf	init_app_eeprom@i,c
  9425  0033F6                     l12772:
  9426                           
  9427                           ;main.c: 849: (Busy_eep(), Write_b_eep(0x43 + 46 + 0u + i,0));
  9428  0033F6  EC55  F023         	call	_Busy_eep	;wreg free
  9429  0033FA  0E71               	movlw	113
  9430  0033FC  D837               	call	PL76	;call to abstracted procedure
  9431  0033FE  EC28  F021         	call	_Write_b_eep	;wreg free
  9432  003402  2A0F               	incf	init_app_eeprom@i,f,c
  9433  003404  0E13               	movlw	19
  9434  003406  640F               	cpfsgt	init_app_eeprom@i,c
  9435  003408  D7F6               	goto	l12772
  9436                           
  9437                           ;main.c: 852: }
  9438                           ;main.c: 854: for ( i=0; i<20; i++ ) {
  9439  00340A  6A0F               	clrf	init_app_eeprom@i,c
  9440  00340C                     l12782:
  9441                           
  9442                           ;main.c: 855: (Busy_eep(), Write_b_eep(0x43 + 46 + 20u + i,0));
  9443  00340C  EC55  F023         	call	_Busy_eep	;wreg free
  9444  003410  0E85               	movlw	133
  9445  003412  D82C               	call	PL76	;call to abstracted procedure
  9446  003414  EC28  F021         	call	_Write_b_eep	;wreg free
  9447  003418  2A0F               	incf	init_app_eeprom@i,f,c
  9448  00341A  0E13               	movlw	19
  9449  00341C  640F               	cpfsgt	init_app_eeprom@i,c
  9450  00341E  D7F6               	goto	l12782
  9451                           
  9452                           ;main.c: 858: }
  9453                           ;main.c: 862: for ( i = 0; i < 8; i++ ) {
  9454  003420  6A0F               	clrf	init_app_eeprom@i,c
  9455  003422                     l537:
  9456                           
  9457                           ;main.c: 863: for ( j = 0; j < 8; j++ ) {
  9458  003422  6A0E               	clrf	init_app_eeprom@j,c
  9459  003424                     l12796:
  9460                           
  9461                           ;main.c: 864: (Busy_eep(), Write_b_eep(0x43 + 46 + 40u + 0 + i * 8 + j,0));
  9462  003424  EC55  F023         	call	_Busy_eep	;wreg free
  9463  003428  500E               	movf	init_app_eeprom@j,w,c
  9464  00342A  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  9465  00342E  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  9466  003430  90D8               	bcf	status,0,c
  9467  003432  360C               	rlcf	??_init_app_eeprom,f,c
  9468  003434  360D               	rlcf	??_init_app_eeprom+1,f,c
  9469  003436  90D8               	bcf	status,0,c
  9470  003438  360C               	rlcf	??_init_app_eeprom,f,c
  9471  00343A  360D               	rlcf	??_init_app_eeprom+1,f,c
  9472  00343C  90D8               	bcf	status,0,c
  9473  00343E  360C               	rlcf	??_init_app_eeprom,f,c
  9474  003440  360D               	rlcf	??_init_app_eeprom+1,f,c
  9475  003442  260C               	addwf	??_init_app_eeprom,f,c
  9476  003444  0E00               	movlw	0
  9477  003446  220D               	addwfc	??_init_app_eeprom+1,f,c
  9478  003448  0E99               	movlw	153
  9479  00344A  240C               	addwf	??_init_app_eeprom,w,c
  9480  00344C  6E08               	movwf	?_Write_b_eep,c
  9481  00344E  0E00               	movlw	0
  9482  003450  200D               	addwfc	??_init_app_eeprom+1,w,c
  9483  003452  6E09               	movwf	?_Write_b_eep+1,c
  9484  003454  0E00               	movlw	0
  9485  003456  6A0A               	clrf	?_Write_b_eep+2,c
  9486  003458  EC28  F021         	call	_Write_b_eep	;wreg free
  9487  00345C  2A0E               	incf	init_app_eeprom@j,f,c
  9488  00345E  0E07               	movlw	7
  9489  003460  640E               	cpfsgt	init_app_eeprom@j,c
  9490  003462  D7E0               	goto	l12796
  9491  003464  2A0F               	incf	init_app_eeprom@i,f,c
  9492  003466  640F               	cpfsgt	init_app_eeprom@i,c
  9493  003468  D7DC               	goto	l537
  9494  00346A  0C07               	retlw	7
  9495  00346C                     __end_of_init_app_eeprom:
  9496                           	opt stack 0
  9497  00346C                     PL76:
  9498                           	opt stack 23
  9499  00346C  240F               	addwf	init_app_eeprom@i,w,c
  9500  00346E  6E08               	movwf	?_Write_b_eep,c
  9501  003470  6A09               	clrf	?_Write_b_eep+1,c
  9502  003472  0E00               	movlw	0
  9503  003474  2209               	addwfc	?_Write_b_eep+1,f,c
  9504  003476  6A0A               	clrf	?_Write_b_eep+2,c
  9505  003478  0C00               	retlw	0
  9506  00347A                     __end_ofPL76:
  9507                           	opt stack 0
  9508                           tblptru	equ	0xFF8
  9509                           tblptrh	equ	0xFF7
  9510                           tblptrl	equ	0xFF6
  9511                           tablat	equ	0xFF5
  9512                           prodh	equ	0xFF4
  9513                           prodl	equ	0xFF3
  9514                           intcon	equ	0xFF2
  9515                           intcon2	equ	0xFF1
  9516                           postinc0	equ	0xFEE
  9517                           wreg	equ	0xFE8
  9518                           indf1	equ	0xFE7
  9519                           fsr1h	equ	0xFE2
  9520                           fsr1l	equ	0xFE1
  9521                           indf2	equ	0xFDF
  9522                           postinc2	equ	0xFDE
  9523                           postdec2	equ	0xFDD
  9524                           plusw2	equ	0xFDB
  9525                           fsr2h	equ	0xFDA
  9526                           fsr2l	equ	0xFD9
  9527                           status	equ	0xFD8
  9528                           
  9529 ;; *************** function _vscp_setUserID *****************
  9530 ;; Defined at:
  9531 ;;		line 3312 in file "../main.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  idx             1    wreg     unsigned char 
  9534 ;;  data            1   11[COMRAM] unsigned char 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  idx             1   12[COMRAM] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : F/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9546 ;;      Params:         1       0       0       0       0       0       0
  9547 ;;      Locals:         1       0       0       0       0       0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0
  9549 ;;      Totals:         2       0       0       0       0       0       0
  9550 ;;Total ram usage:        2 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    3
  9553 ;; This function calls:
  9554 ;;		_Busy_eep
  9555 ;;		_Write_b_eep
  9556 ;; This function is called by:
  9557 ;;		_vscp_writeStdReg
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text24
  9562  004530                     __ptext24:
  9563                           	opt stack 0
  9564  004530                     _vscp_setUserID:
  9565                           	opt stack 24
  9566                           
  9567                           ;incstack = 0
  9568                           ;incstack = 0
  9569                           ;vscp_setUserID@idx stored from wreg
  9570  004530  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;main.c: 3313: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  9574  004534  EC55  F023         	call	_Busy_eep	;wreg free
  9575  004538  0E06               	movlw	6
  9576  00453A  240D               	addwf	vscp_setUserID@idx,w,c
  9577  00453C  6E08               	movwf	?_Write_b_eep,c
  9578  00453E  6A09               	clrf	?_Write_b_eep+1,c
  9579  004540  0E00               	movlw	0
  9580  004542  2209               	addwfc	?_Write_b_eep+1,f,c
  9581  004544  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9582  004548  EF28  F021         	goto	_Write_b_eep	;wreg free
  9583  00454C                     __end_of_vscp_setUserID:
  9584                           	opt stack 0
  9585                           tblptru	equ	0xFF8
  9586                           tblptrh	equ	0xFF7
  9587                           tblptrl	equ	0xFF6
  9588                           tablat	equ	0xFF5
  9589                           prodh	equ	0xFF4
  9590                           prodl	equ	0xFF3
  9591                           intcon	equ	0xFF2
  9592                           intcon2	equ	0xFF1
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           indf1	equ	0xFE7
  9596                           fsr1h	equ	0xFE2
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           plusw2	equ	0xFDB
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _vscp_setManufacturerId *****************
  9607 ;; Defined at:
  9608 ;;		line 1329 in file "../main.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  idx             1    wreg     unsigned char 
  9611 ;;  data            1   11[COMRAM] unsigned char 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  idx             1   12[COMRAM] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;		None               void
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : F/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         1       0       0       0       0       0       0
  9624 ;;      Locals:         1       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0
  9626 ;;      Totals:         2       0       0       0       0       0       0
  9627 ;;Total ram usage:        2 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    3
  9630 ;; This function calls:
  9631 ;;		_Busy_eep
  9632 ;;		_Write_b_eep
  9633 ;; This function is called by:
  9634 ;;		_vscp_writeStdReg
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text25
  9639  0043DC                     __ptext25:
  9640                           	opt stack 0
  9641  0043DC                     _vscp_setManufacturerId:
  9642                           	opt stack 24
  9643                           
  9644                           ;incstack = 0
  9645                           ;incstack = 0
  9646                           ;vscp_setManufacturerId@idx stored from wreg
  9647  0043DC  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;main.c: 1330: if ( idx>7 ) return;
  9651  0043E0  0E07               	movlw	7
  9652  0043E2  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  9653  0043E4  D001               	goto	l13792
  9654  0043E6  D00C               	goto	l646
  9655  0043E8                     l13792:
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;main.c: 1331: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  9659  0043E8  EC55  F023         	call	_Busy_eep	;wreg free
  9660  0043EC  0E0B               	movlw	11
  9661  0043EE  240D               	addwf	vscp_setManufacturerId@idx,w,c
  9662  0043F0  6E08               	movwf	?_Write_b_eep,c
  9663  0043F2  6A09               	clrf	?_Write_b_eep+1,c
  9664  0043F4  0E00               	movlw	0
  9665  0043F6  2209               	addwfc	?_Write_b_eep+1,f,c
  9666  0043F8  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9667  0043FC  EC28  F021         	call	_Write_b_eep	;wreg free
  9668  004400                     l646:
  9669  004400  0012               	return	
  9670  004402                     __end_of_vscp_setManufacturerId:
  9671                           	opt stack 0
  9672                           tblptru	equ	0xFF8
  9673                           tblptrh	equ	0xFF7
  9674                           tblptrl	equ	0xFF6
  9675                           tablat	equ	0xFF5
  9676                           prodh	equ	0xFF4
  9677                           prodl	equ	0xFF3
  9678                           intcon	equ	0xFF2
  9679                           intcon2	equ	0xFF1
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           indf1	equ	0xFE7
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           plusw2	equ	0xFDB
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _vscp_setGUID *****************
  9694 ;; Defined at:
  9695 ;;		line 1317 in file "../main.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  idx             1    wreg     unsigned char 
  9698 ;;  data            1   11[COMRAM] unsigned char 
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;  idx             1   12[COMRAM] unsigned char 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;		None               void
  9703 ;; Registers used:
  9704 ;;		wreg, status,2, status,0, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : F/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9710 ;;      Params:         1       0       0       0       0       0       0
  9711 ;;      Locals:         1       0       0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0
  9713 ;;      Totals:         2       0       0       0       0       0       0
  9714 ;;Total ram usage:        2 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    3
  9717 ;; This function calls:
  9718 ;;		_Busy_eep
  9719 ;;		_Write_b_eep
  9720 ;; This function is called by:
  9721 ;;		_vscp_writeStdReg
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text26
  9726  004402                     __ptext26:
  9727                           	opt stack 0
  9728  004402                     _vscp_setGUID:
  9729                           	opt stack 24
  9730                           
  9731                           ;incstack = 0
  9732                           ;incstack = 0
  9733                           ;vscp_setGUID@idx stored from wreg
  9734  004402  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 1318: if ( idx>15 ) return;
  9738  004406  0E0F               	movlw	15
  9739  004408  640D               	cpfsgt	vscp_setGUID@idx,c
  9740  00440A  D001               	goto	l13784
  9741  00440C  D00C               	goto	l642
  9742  00440E                     l13784:
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;main.c: 1319: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  9746  00440E  EC55  F023         	call	_Busy_eep	;wreg free
  9747  004412  0E13               	movlw	19
  9748  004414  240D               	addwf	vscp_setGUID@idx,w,c
  9749  004416  6E08               	movwf	?_Write_b_eep,c
  9750  004418  6A09               	clrf	?_Write_b_eep+1,c
  9751  00441A  0E00               	movlw	0
  9752  00441C  2209               	addwfc	?_Write_b_eep+1,f,c
  9753  00441E  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9754  004422  EC28  F021         	call	_Write_b_eep	;wreg free
  9755  004426                     l642:
  9756  004426  0012               	return	
  9757  004428                     __end_of_vscp_setGUID:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           intcon	equ	0xFF2
  9766                           intcon2	equ	0xFF1
  9767                           postinc0	equ	0xFEE
  9768                           wreg	equ	0xFE8
  9769                           indf1	equ	0xFE7
  9770                           fsr1h	equ	0xFE2
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           plusw2	equ	0xFDB
  9776                           fsr2h	equ	0xFDA
  9777                           fsr2l	equ	0xFD9
  9778                           status	equ	0xFD8
  9779                           
  9780 ;; *************** function _vscp_writeAppReg *****************
  9781 ;; Defined at:
  9782 ;;		line 1532 in file "../main.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;  reg             1    wreg     unsigned char 
  9785 ;;  val             1   78[COMRAM] unsigned char 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  reg             1   33[BANK0 ] unsigned char 
  9788 ;;  val             1   29[BANK0 ] unsigned char 
  9789 ;;  bOn             1   32[BANK0 ] enum E15660
  9790 ;;  rv              1   31[BANK0 ] unsigned char 
  9791 ;;  bInfoEvent      1   30[BANK0 ] enum E15660
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  1    wreg      unsigned char 
  9794 ;; Registers used:
  9795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9796 ;; Tracked objects:
  9797 ;;		On entry : F/0
  9798 ;;		On exit  : F/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9801 ;;      Params:         1       0       0       0       0       0       0
  9802 ;;      Locals:         0       5       0       0       0       0       0
  9803 ;;      Temps:          0       7       0       0       0       0       0
  9804 ;;      Totals:         1      12       0       0       0       0       0
  9805 ;;Total ram usage:       13 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    7
  9808 ;; This function calls:
  9809 ;;		_Busy_eep
  9810 ;;		_Write_b_eep
  9811 ;;		_Read_b_eep
  9812 ;;		_SendInformationEvent
  9813 ;;		_calculateSetFilterMask
  9814 ;; This function is called by:
  9815 ;;		_vscp_writeRegister
  9816 ;;		_vscp_handleProtocolEvent
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text27
  9821  000622                     __ptext27:
  9822                           	opt stack 0
  9823  000622                     _vscp_writeAppReg:
  9824                           	opt stack 20
  9825                           
  9826                           ;incstack = 0
  9827                           ;incstack = 0
  9828                           ;vscp_writeAppReg@reg stored from wreg
  9829  000622  CFE8 F0DD          	movff	wreg,vscp_writeAppReg@reg
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;main.c: 1533: uint8_t rv;
  9833                           ;main.c: 1534: BOOL bInfoEvent = 0;
  9834  000626  6BDA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  9835                           
  9836                           ;main.c: 1535: BOOL bOn = 0;
  9837  000628  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;main.c: 1537: rv = ~val;
  9841  00062A  1C4F               	comf	vscp_writeAppReg@val,w,c
  9842  00062C  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9843                           
  9844                           ;main.c: 1540: if ( 0 == vscp_page_select ) {
  9845  00062E  5053               	movf	_vscp_page_select+1,w,c
  9846  000630  1052               	iorwf	_vscp_page_select,w,c
  9847  000632  E002 EF0F  F008    	bnz	l14424
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;main.c: 1543: if ( reg == 0 ) {
  9851  000638  67DD               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  9852  00063A  D010               	goto	l13902
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;main.c: 1544: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  9856  00063C  EC55  F023         	call	_Busy_eep	;wreg free
  9857  000640  6A09               	clrf	?_Write_b_eep+1,c
  9858  000642  0E43               	movlw	67
  9859  000644  6E08               	movwf	?_Write_b_eep,c
  9860  000646  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9861  00064A  EC28  F021         	call	_Write_b_eep	;wreg free
  9862                           
  9863                           ;main.c: 1545: rv = Read_b_eep(0x43 + 0);
  9864  00064E  6A09               	clrf	?_Read_b_eep+1,c
  9865  000650  0E43               	movlw	67
  9866  000652  6E08               	movwf	?_Read_b_eep,c
  9867  000654  EC21  F023         	call	_Read_b_eep	;wreg free
  9868  000658  EF19  F009         	goto	L32
  9869  00065C                     l13902:
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;main.c: 1547: else if ( reg == 1 ) {
  9873  00065C  05DD               	decf	vscp_writeAppReg@reg& (0+255),w,b
  9874  00065E  E110               	bnz	l13910
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;main.c: 1549: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  9878  000660  EC55  F023         	call	_Busy_eep	;wreg free
  9879  000664  6A09               	clrf	?_Write_b_eep+1,c
  9880  000666  0E44               	movlw	68
  9881  000668  6E08               	movwf	?_Write_b_eep,c
  9882  00066A  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9883  00066E  EC28  F021         	call	_Write_b_eep	;wreg free
  9884                           
  9885                           ;main.c: 1550: rv = Read_b_eep(0x43 + 1);
  9886  000672  6A09               	clrf	?_Read_b_eep+1,c
  9887  000674  0E44               	movlw	68
  9888  000676  6E08               	movwf	?_Read_b_eep,c
  9889  000678  EC21  F023         	call	_Read_b_eep	;wreg free
  9890  00067C  EF19  F009         	goto	L32
  9891  000680                     l13910:
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;main.c: 1553: else if ( ( reg >= 2 ) &&
  9895                           ;main.c: 1554: ( reg <= 11 ) ) {
  9896  000680  0E01               	movlw	1
  9897  000682  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9898  000684  D011               	goto	l13920
  9899                           
  9900                           ; BSR set to: 0
  9901  000686  0E0C               	movlw	12
  9902  000688  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9903  00068A  D00E               	goto	l13920
  9904  00068C                     
  9905                           ; BSR set to: 0
  9906                           ;main.c: 1555: (Busy_eep(), Write_b_eep(0x43 + 2 + ( reg - 2 ),val));
  9907  00068C  EC55  F023         	call	_Busy_eep	;wreg free
  9908  000690  0E43               	movlw	67
  9909  000692  EC41  F009         	call	PL2	;call to abstracted procedure
  9910  000696  EC28  F021         	call	_Write_b_eep	;wreg free
  9911                           
  9912                           ;main.c: 1558: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
  9913  00069A  0E43               	movlw	67
  9914  00069C  EC59  F009         	call	PL12	;call to abstracted procedure
  9915  0006A0  EC21  F023         	call	_Read_b_eep	;wreg free
  9916  0006A4  EF19  F009         	goto	L32
  9917  0006A8                     l13920:
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;main.c: 1562: else if ( reg == 12 ) {
  9921  0006A8  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9922  0006AA  0A0C               	xorlw	12
  9923  0006AC  E126               	bnz	l13928
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;main.c: 1564: (Busy_eep(), Write_b_eep(0x43 + 12,( val & 0x03 )));
  9927  0006AE  EC55  F023         	call	_Busy_eep	;wreg free
  9928  0006B2  6A09               	clrf	?_Write_b_eep+1,c
  9929  0006B4  0E4F               	movlw	79
  9930  0006B6  6E08               	movwf	?_Write_b_eep,c
  9931  0006B8  504F               	movf	vscp_writeAppReg@val,w,c
  9932  0006BA  0B03               	andlw	3
  9933  0006BC  6E0A               	movwf	?_Write_b_eep+2,c
  9934  0006BE  EC28  F021         	call	_Write_b_eep	;wreg free
  9935  0006C2  0E01               	movlw	1
  9936                           
  9937                           ;main.c: 1568: TRISAbits.TRISA0 = ( val & 0x02 ) ? 1 : 0;
  9938  0006C4  A24F               	btfss	vscp_writeAppReg@val,1,c
  9939  0006C6  0E00               	movlw	0
  9940  0006C8  0100               	movlb	0	; () banked
  9941  0006CA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9942  0006CC  5092               	movf	3986,w,c	;volatile
  9943  0006CE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9944  0006D0  0BFE               	andlw	-2
  9945  0006D2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9946  0006D4  6E92               	movwf	3986,c	;volatile
  9947  0006D6  0E01               	movlw	1
  9948                           
  9949                           ;main.c: 1569: TRISAbits.TRISA1 = ( val & 0x01 ) ? 1 : 0;
  9950  0006D8  A04F               	btfss	vscp_writeAppReg@val,0,c
  9951  0006DA  0E00               	movlw	0
  9952  0006DC  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9953  0006DE  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9954  0006E0  5092               	movf	3986,w,c	;volatile
  9955  0006E2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9956  0006E4  0BFD               	andlw	-3
  9957  0006E6  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9958  0006E8  6E92               	movwf	3986,c	;volatile
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;main.c: 1571: rv = ( TRISAbits.TRISA0 << 1 ) +
  9962                           ;main.c: 1572: TRISAbits.TRISA1;
  9963  0006EA  3092               	rrcf	3986,w,c	;volatile
  9964  0006EC  0B01               	andlw	1
  9965  0006EE  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9966  0006F0  5092               	movf	3986,w,c	;volatile
  9967  0006F2  0B01               	andlw	1
  9968  0006F4  0D02               	mullw	2
  9969  0006F6  50F3               	movf	prodl,w,c
  9970  0006F8  D096               	goto	L36
  9971  0006FA                     l13928:
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;main.c: 1574: else if ( reg == 13 ) {
  9975  0006FA  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9976  0006FC  0A0D               	xorlw	13
  9977  0006FE  E001 D095          	bnz	l13952
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;main.c: 1576: (Busy_eep(), Write_b_eep(0x43 + 13,val));
  9981  000702  EC55  F023         	call	_Busy_eep	;wreg free
  9982  000706  6A09               	clrf	?_Write_b_eep+1,c
  9983  000708  0E50               	movlw	80
  9984  00070A  6E08               	movwf	?_Write_b_eep,c
  9985  00070C  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9986  000710  EC28  F021         	call	_Write_b_eep	;wreg free
  9987  000714  0E01               	movlw	1
  9988                           
  9989                           ;main.c: 1580: TRISAbits.TRISA2 = ( val & 0x80 ) ? 1 : 0;
  9990  000716  AE4F               	btfss	vscp_writeAppReg@val,7,c
  9991  000718  0E00               	movlw	0
  9992  00071A  0100               	movlb	0	; () banked
  9993  00071C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9994  00071E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9995  000720  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9996  000722  5092               	movf	3986,w,c	;volatile
  9997  000724  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9998  000726  0BFB               	andlw	-5
  9999  000728  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10000  00072A  6E92               	movwf	3986,c	;volatile
 10001  00072C  0E01               	movlw	1
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;main.c: 1581: TRISCbits.TRISC7 = ( val & 0x40 ) ? 1 : 0;
 10005  00072E  AC4F               	btfss	vscp_writeAppReg@val,6,c
 10006  000730  0E00               	movlw	0
 10007  000732  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10008  000734  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10009  000736  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10010  000738  5094               	movf	3988,w,c	;volatile
 10011  00073A  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10012  00073C  0B7F               	andlw	-129
 10013  00073E  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10014  000740  6E94               	movwf	3988,c	;volatile
 10015  000742  0E01               	movlw	1
 10016                           
 10017                           ; BSR set to: 0
 10018                           ;main.c: 1582: TRISCbits.TRISC6 = ( val & 0x20 ) ? 1 : 0;
 10019  000744  AA4F               	btfss	vscp_writeAppReg@val,5,c
 10020  000746  0E00               	movlw	0
 10021  000748  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10022  00074A  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10023  00074C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10024  00074E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10025  000750  5094               	movf	3988,w,c	;volatile
 10026  000752  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10027  000754  0BBF               	andlw	-65
 10028  000756  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10029  000758  6E94               	movwf	3988,c	;volatile
 10030  00075A  0E01               	movlw	1
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;main.c: 1583: TRISCbits.TRISC5 = ( val & 0x10 ) ? 1 : 0;
 10034  00075C  A84F               	btfss	vscp_writeAppReg@val,4,c
 10035  00075E  0E00               	movlw	0
 10036  000760  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10037  000762  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10038  000764  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10039  000766  5094               	movf	3988,w,c	;volatile
 10040  000768  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10041  00076A  0BDF               	andlw	-33
 10042  00076C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10043  00076E  6E94               	movwf	3988,c	;volatile
 10044  000770  0E01               	movlw	1
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;main.c: 1584: TRISCbits.TRISC4 = ( val & 0x08 ) ? 1 : 0;
 10048  000772  A64F               	btfss	vscp_writeAppReg@val,3,c
 10049  000774  0E00               	movlw	0
 10050  000776  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10051  000778  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10052  00077A  5094               	movf	3988,w,c	;volatile
 10053  00077C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10054  00077E  0BEF               	andlw	-17
 10055  000780  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10056  000782  6E94               	movwf	3988,c	;volatile
 10057  000784  0E01               	movlw	1
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;main.c: 1585: TRISCbits.TRISC3 = ( val & 0x04 ) ? 1 : 0;
 10061  000786  A44F               	btfss	vscp_writeAppReg@val,2,c
 10062  000788  0E00               	movlw	0
 10063  00078A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10064  00078C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10065  00078E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10066  000790  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10067  000792  5094               	movf	3988,w,c	;volatile
 10068  000794  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10069  000796  0BF7               	andlw	-9
 10070  000798  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10071  00079A  6E94               	movwf	3988,c	;volatile
 10072  00079C  0E01               	movlw	1
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;main.c: 1586: TRISBbits.TRISB1 = ( val & 0x02 ) ? 1 : 0;
 10076  00079E  A24F               	btfss	vscp_writeAppReg@val,1,c
 10077  0007A0  0E00               	movlw	0
 10078  0007A2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10079  0007A4  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10080  0007A6  5093               	movf	3987,w,c	;volatile
 10081  0007A8  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10082  0007AA  0BFD               	andlw	-3
 10083  0007AC  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10084  0007AE  6E93               	movwf	3987,c	;volatile
 10085  0007B0  0E01               	movlw	1
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;main.c: 1587: TRISBbits.TRISB0 = ( val & 0x01 ) ? 1 : 0;
 10089  0007B2  A04F               	btfss	vscp_writeAppReg@val,0,c
 10090  0007B4  0E00               	movlw	0
 10091  0007B6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10092  0007B8  5093               	movf	3987,w,c	;volatile
 10093  0007BA  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10094  0007BC  0BFE               	andlw	-2
 10095  0007BE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10096  0007C0  6E93               	movwf	3987,c	;volatile
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;main.c: 1589: rv = ( TRISAbits.TRISA2 << 7 ) +
 10100                           ;main.c: 1590: ( TRISCbits.TRISC7 << 6 ) +
 10101                           ;main.c: 1591: ( TRISCbits.TRISC6 << 5 ) +
 10102                           ;main.c: 1592: ( TRISCbits.TRISC5 << 4 ) +
 10103                           ;main.c: 1593: ( TRISCbits.TRISC4 << 3 ) +
 10104                           ;main.c: 1594: ( TRISCbits.TRISC3 << 2 ) +
 10105                           ;main.c: 1595: ( TRISBbits.TRISB1 << 1 ) +
 10106                           ;main.c: 1596: TRISBbits.TRISB0;
 10107  0007C2  5093               	movf	3987,w,c	;volatile
 10108  0007C4  0B01               	andlw	1
 10109  0007C6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10110  0007C8  3093               	rrcf	3987,w,c	;volatile
 10111  0007CA  0B01               	andlw	1
 10112  0007CC  0D02               	mullw	2
 10113  0007CE  CFF3 F0D3          	movff	prodl,??_vscp_writeAppReg+1
 10114  0007D2  3094               	rrcf	3988,w,c	;volatile
 10115  0007D4  32E8               	rrcf	wreg,f,c
 10116  0007D6  32E8               	rrcf	wreg,f,c
 10117  0007D8  0B01               	andlw	1
 10118  0007DA  0D04               	mullw	4
 10119  0007DC  CFF3 F0D4          	movff	prodl,??_vscp_writeAppReg+2
 10120  0007E0  3894               	swapf	3988,w,c	;volatile
 10121  0007E2  0B01               	andlw	1
 10122  0007E4  0D08               	mullw	8
 10123  0007E6  CFF3 F0D5          	movff	prodl,??_vscp_writeAppReg+3
 10124  0007EA  3894               	swapf	3988,w,c	;volatile
 10125  0007EC  32E8               	rrcf	wreg,f,c
 10126  0007EE  0B01               	andlw	1
 10127  0007F0  0D10               	mullw	16
 10128  0007F2  CFF3 F0D6          	movff	prodl,??_vscp_writeAppReg+4
 10129  0007F6  3894               	swapf	3988,w,c	;volatile
 10130  0007F8  32E8               	rrcf	wreg,f,c
 10131  0007FA  32E8               	rrcf	wreg,f,c
 10132  0007FC  0B01               	andlw	1
 10133  0007FE  0D20               	mullw	32
 10134  000800  CFF3 F0D7          	movff	prodl,??_vscp_writeAppReg+5
 10135  000804  3494               	rlcf	3988,w,c	;volatile
 10136  000806  36E8               	rlcf	wreg,f,c
 10137  000808  0B01               	andlw	1
 10138  00080A  0D40               	mullw	64
 10139  00080C  CFF3 F0D8          	movff	prodl,??_vscp_writeAppReg+6
 10140  000810  3092               	rrcf	3986,w,c	;volatile
 10141  000812  32E8               	rrcf	wreg,f,c
 10142  000814  0B01               	andlw	1
 10143  000816  0D80               	mullw	128
 10144  000818  50F3               	movf	prodl,w,c
 10145  00081A  25D8               	addwf	(??_vscp_writeAppReg+6)& (0+255),w,b
 10146  00081C  25D7               	addwf	(??_vscp_writeAppReg+5)& (0+255),w,b
 10147  00081E  25D6               	addwf	(??_vscp_writeAppReg+4)& (0+255),w,b
 10148  000820  25D5               	addwf	(??_vscp_writeAppReg+3)& (0+255),w,b
 10149  000822  25D4               	addwf	(??_vscp_writeAppReg+2)& (0+255),w,b
 10150  000824  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10151  000826                     L36:
 10152  000826  25D2               	addwf	??_vscp_writeAppReg& (0+255),w,b
 10153  000828  EF1A  F009         	goto	L33
 10154  00082C                     l13952:
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;main.c: 1600: else if ( (reg >= 14) && (reg <= 23) ) {
 10158  00082C  0E0D               	movlw	13
 10159  00082E  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 10160  000830  D228               	goto	l14164
 10161                           
 10162                           ; BSR set to: 0
 10163  000832  0E18               	movlw	24
 10164  000834  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 10165  000836  D225               	goto	l14164
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;main.c: 1603: if ( Read_b_eep(0x43 + 24 + ( reg - 14 )) &
 10169                           ;main.c: 1606: 0x80 ) {
 10170  000838  0E4D               	movlw	77
 10171  00083A  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 10172  00083C  6E08               	movwf	?_Read_b_eep,c
 10173  00083E  6A09               	clrf	?_Read_b_eep+1,c
 10174  000840  0E00               	movlw	0
 10175  000842  2209               	addwfc	?_Read_b_eep+1,f,c
 10176  000844  EC21  F023         	call	_Read_b_eep	;wreg free
 10177  000848  0100               	movlb	0	; () banked
 10178  00084A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10179  00084C  BFD2               	btfsc	??_vscp_writeAppReg& (0+255),7,b
 10180  00084E  D1FB               	goto	l14162
 10181  000850  EF1B  F009         	goto	l14504
 10182  000854                     l13960:
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;main.c: 1613: bInfoEvent = 1;
 10186  000854  0E01               	movlw	1
 10187  000856  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;main.c: 1615: if ( 1 == val ) {
 10191  000858  044F               	decf	vscp_writeAppReg@val,w,c
 10192  00085A  E128               	bnz	l721
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;main.c: 1617: PORTBbits.RB0 = 1;
 10196  00085C  8081               	bsf	3969,0,c	;volatile
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;main.c: 1618: rv = PORTBbits.RB0;
 10200  00085E  0E00               	movlw	0
 10201  000860  B081               	btfsc	3969,0,c	;volatile
 10202  000862  0E01               	movlw	1
 10203  000864  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;main.c: 1619: bOn = 1;
 10207  000866  0E01               	movlw	1
 10208  000868  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;main.c: 1622: if ( Read_b_eep(0x43 + 24) & 0x04 ) {
 10212  00086A  6A09               	clrf	?_Read_b_eep+1,c
 10213  00086C  0E5B               	movlw	91
 10214  00086E  6E08               	movwf	?_Read_b_eep,c
 10215  000870  EC21  F023         	call	_Read_b_eep	;wreg free
 10216  000874  0100               	movlb	0	; () banked
 10217  000876  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10218  000878  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10219  00087A  EF1B  F009         	goto	l14504
 10220  00087E                     l13972:
 10221                           
 10222                           ;main.c: 1623: channel_protection_timer[ 0 ] =
 10223                           ;main.c: 1624: Read_b_eep(0x43 + 46 + 20u) * 256 +
 10224                           ;main.c: 1626: Read_b_eep(0x43 + 46 + 21u);
 10225  00087E  6A09               	clrf	?_Read_b_eep+1,c
 10226  000880  0E86               	movlw	134
 10227  000882  6E08               	movwf	?_Read_b_eep,c
 10228  000884  EC21  F023         	call	_Read_b_eep	;wreg free
 10229  000888  0100               	movlb	0	; () banked
 10230  00088A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10231  00088C  6A09               	clrf	?_Read_b_eep+1,c
 10232  00088E  0E85               	movlw	133
 10233  000890  6E08               	movwf	?_Read_b_eep,c
 10234  000892  EC21  F023         	call	_Read_b_eep	;wreg free
 10235  000896  0100               	movlb	0	; () banked
 10236  000898  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10237  00089A  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10238  00089C  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10239  00089E  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10240  0008A0  6F83               	movwf	_channel_protection_timer& (0+255),b
 10241  0008A2  0E00               	movlw	0
 10242  0008A4  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10243  0008A6  6F84               	movwf	(_channel_protection_timer+1)& (0+255),b
 10244  0008A8  EF1B  F009         	goto	l14504
 10245  0008AC                     l721:
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;main.c: 1631: else if (0 == val) {
 10249  0008AC  664F               	tstfsz	vscp_writeAppReg@val,c
 10250  0008AE  EF1B  F009         	goto	l14504
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;main.c: 1632: PORTBbits.RB0 = 0;
 10254  0008B2  9081               	bcf	3969,0,c	;volatile
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;main.c: 1633: rv = PORTBbits.RB0;
 10258  0008B4  0E00               	movlw	0
 10259  0008B6  B081               	btfsc	3969,0,c	;volatile
 10260  0008B8  0E01               	movlw	1
 10261  0008BA  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10262  0008BC                     l13978:
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;main.c: 1634: bOn = 0;
 10266  0008BC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 10267  0008BE  EF1B  F009         	goto	l14504
 10268  0008C2                     l13980:
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;main.c: 1641: bInfoEvent = 1;
 10272  0008C2  0E01               	movlw	1
 10273  0008C4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;main.c: 1643: if (1 == val) {
 10277  0008C6  044F               	decf	vscp_writeAppReg@val,w,c
 10278  0008C8  E11E               	bnz	l727
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;main.c: 1645: PORTBbits.RB1 = 1;
 10282  0008CA  8281               	bsf	3969,1,c	;volatile
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;main.c: 1646: rv = PORTBbits.RB1;
 10286  0008CC  0E00               	movlw	0
 10287  0008CE  B281               	btfsc	3969,1,c	;volatile
 10288  0008D0  0E01               	movlw	1
 10289  0008D2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;main.c: 1647: bOn = 1;
 10293  0008D4  0E01               	movlw	1
 10294  0008D6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;main.c: 1649: if (Read_b_eep(0x43 + 25) & 0x04) {
 10298  0008D8  6A09               	clrf	?_Read_b_eep+1,c
 10299  0008DA  0E5C               	movlw	92
 10300  0008DC  6E08               	movwf	?_Read_b_eep,c
 10301  0008DE  EC21  F023         	call	_Read_b_eep	;wreg free
 10302  0008E2  0100               	movlb	0	; () banked
 10303  0008E4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10304  0008E6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10305  0008E8  EF1B  F009         	goto	l14504
 10306  0008EC                     l13992:
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;main.c: 1650: channel_protection_timer[ 1 ] =
 10310                           ;main.c: 1651: Read_b_eep(0x43 + 46 + 22u) * 256 +
 10311                           ;main.c: 1653: Read_b_eep(0x43 + 46 + 23u);
 10312  0008EC  6A09               	clrf	?_Read_b_eep+1,c
 10313  0008EE  0E88               	movlw	136
 10314  0008F0  6E08               	movwf	?_Read_b_eep,c
 10315  0008F2  EC21  F023         	call	_Read_b_eep	;wreg free
 10316  0008F6  0100               	movlb	0	; () banked
 10317  0008F8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10318  0008FA  6A09               	clrf	?_Read_b_eep+1,c
 10319  0008FC  0E87               	movlw	135
 10320  0008FE  6E08               	movwf	?_Read_b_eep,c
 10321  000900  EC21  F023         	call	_Read_b_eep	;wreg free
 10322  000904  D220               	goto	L34
 10323  000906                     l727:
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;main.c: 1658: else if (0 == val) {
 10327  000906  664F               	tstfsz	vscp_writeAppReg@val,c
 10328  000908  EF1B  F009         	goto	l14504
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;main.c: 1659: PORTBbits.RB1 = 0;
 10332  00090C  9281               	bcf	3969,1,c	;volatile
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;main.c: 1660: rv = PORTBbits.RB1;
 10336  00090E  0E00               	movlw	0
 10337  000910  B281               	btfsc	3969,1,c	;volatile
 10338  000912  0E01               	movlw	1
 10339  000914  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10340  000916  D7D2               	goto	l13978
 10341  000918                     l14000:
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;main.c: 1668: bInfoEvent = 1;
 10345  000918  0E01               	movlw	1
 10346  00091A  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;main.c: 1670: if (1 == val) {
 10350  00091C  044F               	decf	vscp_writeAppReg@val,w,c
 10351  00091E  E128               	bnz	l732
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;main.c: 1672: PORTCbits.RC3 = 1;
 10355  000920  8682               	bsf	3970,3,c	;volatile
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;main.c: 1673: rv = PORTCbits.RC3;
 10359  000922  0E00               	movlw	0
 10360  000924  B682               	btfsc	3970,3,c	;volatile
 10361  000926  0E01               	movlw	1
 10362  000928  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;main.c: 1674: bOn = 1;
 10366  00092A  0E01               	movlw	1
 10367  00092C  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;main.c: 1676: if ( Read_b_eep(0x43 + 26) & 0x04) {
 10371  00092E  6A09               	clrf	?_Read_b_eep+1,c
 10372  000930  0E5D               	movlw	93
 10373  000932  6E08               	movwf	?_Read_b_eep,c
 10374  000934  EC21  F023         	call	_Read_b_eep	;wreg free
 10375  000938  0100               	movlb	0	; () banked
 10376  00093A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10377  00093C  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10378  00093E  EF1B  F009         	goto	l14504
 10379  000942                     l14012:
 10380                           
 10381                           ;main.c: 1677: channel_protection_timer[ 2 ] =
 10382                           ;main.c: 1678: Read_b_eep(0x43 + 46 + 24u) * 256 +
 10383                           ;main.c: 1680: Read_b_eep(0x43 + 46 + 25u);
 10384  000942  6A09               	clrf	?_Read_b_eep+1,c
 10385  000944  0E8A               	movlw	138
 10386  000946  6E08               	movwf	?_Read_b_eep,c
 10387  000948  EC21  F023         	call	_Read_b_eep	;wreg free
 10388  00094C  0100               	movlb	0	; () banked
 10389  00094E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10390  000950  6A09               	clrf	?_Read_b_eep+1,c
 10391  000952  0E89               	movlw	137
 10392  000954  6E08               	movwf	?_Read_b_eep,c
 10393  000956  EC21  F023         	call	_Read_b_eep	;wreg free
 10394  00095A  0100               	movlb	0	; () banked
 10395  00095C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10396  00095E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10397  000960  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10398  000962  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10399  000964  6F87               	movwf	(_channel_protection_timer+4)& (0+255),b
 10400  000966  0E00               	movlw	0
 10401  000968  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10402  00096A  6F88               	movwf	(_channel_protection_timer+5)& (0+255),b
 10403  00096C  EF1B  F009         	goto	l14504
 10404  000970                     l732:
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;main.c: 1685: else if (0 == val) {
 10408  000970  664F               	tstfsz	vscp_writeAppReg@val,c
 10409  000972  EF1B  F009         	goto	l14504
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;main.c: 1686: PORTCbits.RC3 = 0;
 10413  000976  9682               	bcf	3970,3,c	;volatile
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;main.c: 1687: rv = PORTCbits.RC3;
 10417  000978  0E00               	movlw	0
 10418  00097A  B682               	btfsc	3970,3,c	;volatile
 10419  00097C  0E01               	movlw	1
 10420  00097E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10421  000980  D79D               	goto	l13978
 10422  000982                     l14020:
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;main.c: 1696: bInfoEvent = 1;
 10426  000982  0E01               	movlw	1
 10427  000984  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;main.c: 1698: if (1 == val) {
 10431  000986  044F               	decf	vscp_writeAppReg@val,w,c
 10432  000988  E128               	bnz	l737
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;main.c: 1700: PORTCbits.RC4 = 1;
 10436  00098A  8882               	bsf	3970,4,c	;volatile
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;main.c: 1701: rv = PORTCbits.RC4;
 10440  00098C  0E00               	movlw	0
 10441  00098E  B882               	btfsc	3970,4,c	;volatile
 10442  000990  0E01               	movlw	1
 10443  000992  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;main.c: 1702: bOn = 1;
 10447  000994  0E01               	movlw	1
 10448  000996  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;main.c: 1704: if (Read_b_eep(0x43 + 27) & 0x04) {
 10452  000998  6A09               	clrf	?_Read_b_eep+1,c
 10453  00099A  0E5E               	movlw	94
 10454  00099C  6E08               	movwf	?_Read_b_eep,c
 10455  00099E  EC21  F023         	call	_Read_b_eep	;wreg free
 10456  0009A2  0100               	movlb	0	; () banked
 10457  0009A4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10458  0009A6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10459  0009A8  EF1B  F009         	goto	l14504
 10460  0009AC                     l14032:
 10461                           
 10462                           ;main.c: 1705: channel_protection_timer[ 3 ] =
 10463                           ;main.c: 1706: Read_b_eep(0x43 + 46 + 26u) * 256 +
 10464                           ;main.c: 1708: Read_b_eep(0x43 + 46 + 27u);
 10465  0009AC  6A09               	clrf	?_Read_b_eep+1,c
 10466  0009AE  0E8C               	movlw	140
 10467  0009B0  6E08               	movwf	?_Read_b_eep,c
 10468  0009B2  EC21  F023         	call	_Read_b_eep	;wreg free
 10469  0009B6  0100               	movlb	0	; () banked
 10470  0009B8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10471  0009BA  6A09               	clrf	?_Read_b_eep+1,c
 10472  0009BC  0E8B               	movlw	139
 10473  0009BE  6E08               	movwf	?_Read_b_eep,c
 10474  0009C0  EC21  F023         	call	_Read_b_eep	;wreg free
 10475  0009C4  0100               	movlb	0	; () banked
 10476  0009C6  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10477  0009C8  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10478  0009CA  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10479  0009CC  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10480  0009CE  6F89               	movwf	(_channel_protection_timer+6)& (0+255),b
 10481  0009D0  0E00               	movlw	0
 10482  0009D2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10483  0009D4  6F8A               	movwf	(_channel_protection_timer+7)& (0+255),b
 10484  0009D6  EF1B  F009         	goto	l14504
 10485  0009DA                     l737:
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;main.c: 1713: else if (0 == val) {
 10489  0009DA  664F               	tstfsz	vscp_writeAppReg@val,c
 10490  0009DC  EF1B  F009         	goto	l14504
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;main.c: 1714: PORTCbits.RC4 = 0;
 10494  0009E0  9882               	bcf	3970,4,c	;volatile
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;main.c: 1715: rv = PORTCbits.RC4;
 10498  0009E2  0E00               	movlw	0
 10499  0009E4  B882               	btfsc	3970,4,c	;volatile
 10500  0009E6  0E01               	movlw	1
 10501  0009E8  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10502  0009EA  D768               	goto	l13978
 10503  0009EC                     l14040:
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;main.c: 1724: bInfoEvent = 1;
 10507  0009EC  0E01               	movlw	1
 10508  0009EE  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;main.c: 1726: if (1 == val) {
 10512  0009F0  044F               	decf	vscp_writeAppReg@val,w,c
 10513  0009F2  E127               	bnz	l742
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;main.c: 1728: PORTCbits.RC5 = 1;
 10517  0009F4  8A82               	bsf	3970,5,c	;volatile
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;main.c: 1729: rv = PORTCbits.RC5;
 10521  0009F6  0E00               	movlw	0
 10522  0009F8  BA82               	btfsc	3970,5,c	;volatile
 10523  0009FA  0E01               	movlw	1
 10524  0009FC  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;main.c: 1730: bOn = 1;
 10528  0009FE  0E01               	movlw	1
 10529  000A00  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;main.c: 1732: if (Read_b_eep(0x43 + 28) & 0x04) {
 10533  000A02  6A09               	clrf	?_Read_b_eep+1,c
 10534  000A04  0E5F               	movlw	95
 10535  000A06  6E08               	movwf	?_Read_b_eep,c
 10536  000A08  EC21  F023         	call	_Read_b_eep	;wreg free
 10537  000A0C  0100               	movlb	0	; () banked
 10538  000A0E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10539  000A10  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10540  000A12  EF1B  F009         	goto	l14504
 10541  000A16                     l14052:
 10542                           
 10543                           ;main.c: 1733: channel_protection_timer[ 4 ] =
 10544                           ;main.c: 1734: Read_b_eep(0x43 + 46 + 28u) * 256 +
 10545                           ;main.c: 1736: Read_b_eep(0x43 + 46 + 29u);
 10546  000A16  6A09               	clrf	?_Read_b_eep+1,c
 10547  000A18  0E8E               	movlw	142
 10548  000A1A  6E08               	movwf	?_Read_b_eep,c
 10549  000A1C  EC21  F023         	call	_Read_b_eep	;wreg free
 10550  000A20  0100               	movlb	0	; () banked
 10551  000A22  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10552  000A24  6A09               	clrf	?_Read_b_eep+1,c
 10553  000A26  0E8D               	movlw	141
 10554  000A28  6E08               	movwf	?_Read_b_eep,c
 10555  000A2A  EC21  F023         	call	_Read_b_eep	;wreg free
 10556  000A2E  0100               	movlb	0	; () banked
 10557  000A30  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10558  000A32  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10559  000A34  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10560  000A36  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10561  000A38  6F8B               	movwf	(_channel_protection_timer+8)& (0+255),b
 10562  000A3A  0E00               	movlw	0
 10563  000A3C  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10564  000A3E  6F8C               	movwf	(_channel_protection_timer+9)& (0+255),b
 10565  000A40  D3FA               	goto	l14504
 10566  000A42                     l742:
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;main.c: 1741: else if (0 == val) {
 10570  000A42  664F               	tstfsz	vscp_writeAppReg@val,c
 10571  000A44  D3F8               	goto	l14504
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 1742: PORTCbits.RC5 = 0;
 10575  000A46  9A82               	bcf	3970,5,c	;volatile
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;main.c: 1743: rv = PORTCbits.RC5;
 10579  000A48  0E00               	movlw	0
 10580  000A4A  BA82               	btfsc	3970,5,c	;volatile
 10581  000A4C  0E01               	movlw	1
 10582  000A4E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10583  000A50  D735               	goto	l13978
 10584  000A52                     l14060:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;main.c: 1752: bInfoEvent = 1;
 10588  000A52  0E01               	movlw	1
 10589  000A54  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;main.c: 1754: if (1 == val) {
 10593  000A56  044F               	decf	vscp_writeAppReg@val,w,c
 10594  000A58  E126               	bnz	l747
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;main.c: 1756: PORTCbits.RC6 = 1;
 10598  000A5A  8C82               	bsf	3970,6,c	;volatile
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;main.c: 1757: rv = PORTCbits.RC6;
 10602  000A5C  0E00               	movlw	0
 10603  000A5E  BC82               	btfsc	3970,6,c	;volatile
 10604  000A60  0E01               	movlw	1
 10605  000A62  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;main.c: 1758: bOn = 1;
 10609  000A64  0E01               	movlw	1
 10610  000A66  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;main.c: 1760: if (Read_b_eep(0x43 + 29) & 0x04) {
 10614  000A68  6A09               	clrf	?_Read_b_eep+1,c
 10615  000A6A  0E60               	movlw	96
 10616  000A6C  6E08               	movwf	?_Read_b_eep,c
 10617  000A6E  EC21  F023         	call	_Read_b_eep	;wreg free
 10618  000A72  0100               	movlb	0	; () banked
 10619  000A74  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10620  000A76  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10621  000A78  D3DE               	goto	l14504
 10622  000A7A                     l14072:
 10623                           
 10624                           ;main.c: 1761: channel_protection_timer[ 5 ] =
 10625                           ;main.c: 1762: Read_b_eep(0x43 + 46 + 30u) * 256 +
 10626                           ;main.c: 1764: Read_b_eep(0x43 + 46 + 31u);
 10627  000A7A  6A09               	clrf	?_Read_b_eep+1,c
 10628  000A7C  0E90               	movlw	144
 10629  000A7E  6E08               	movwf	?_Read_b_eep,c
 10630  000A80  EC21  F023         	call	_Read_b_eep	;wreg free
 10631  000A84  0100               	movlb	0	; () banked
 10632  000A86  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10633  000A88  6A09               	clrf	?_Read_b_eep+1,c
 10634  000A8A  0E8F               	movlw	143
 10635  000A8C  6E08               	movwf	?_Read_b_eep,c
 10636  000A8E  EC21  F023         	call	_Read_b_eep	;wreg free
 10637  000A92  0100               	movlb	0	; () banked
 10638  000A94  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10639  000A96  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10640  000A98  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10641  000A9A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10642  000A9C  6F8D               	movwf	(_channel_protection_timer+10)& (0+255),b
 10643  000A9E  0E00               	movlw	0
 10644  000AA0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10645  000AA2  6F8E               	movwf	(_channel_protection_timer+11)& (0+255),b
 10646  000AA4  D3C8               	goto	l14504
 10647  000AA6                     l747:
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;main.c: 1769: else if (0 == val) {
 10651  000AA6  664F               	tstfsz	vscp_writeAppReg@val,c
 10652  000AA8  D3C6               	goto	l14504
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;main.c: 1770: PORTCbits.RC6 = 0;
 10656  000AAA  9C82               	bcf	3970,6,c	;volatile
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;main.c: 1771: rv = PORTCbits.RC6;
 10660  000AAC  0E00               	movlw	0
 10661  000AAE  BC82               	btfsc	3970,6,c	;volatile
 10662  000AB0  0E01               	movlw	1
 10663  000AB2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10664  000AB4  D703               	goto	l13978
 10665  000AB6                     l14080:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;main.c: 1779: bInfoEvent = 1;
 10669  000AB6  0E01               	movlw	1
 10670  000AB8  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;main.c: 1781: if (1 == val) {
 10674  000ABA  044F               	decf	vscp_writeAppReg@val,w,c
 10675  000ABC  E126               	bnz	l752
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;main.c: 1783: PORTCbits.RC7 = 1;
 10679  000ABE  8E82               	bsf	3970,7,c	;volatile
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;main.c: 1784: rv = PORTCbits.RC7;
 10683  000AC0  0E00               	movlw	0
 10684  000AC2  BE82               	btfsc	3970,7,c	;volatile
 10685  000AC4  0E01               	movlw	1
 10686  000AC6  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;main.c: 1785: bOn = 1;
 10690  000AC8  0E01               	movlw	1
 10691  000ACA  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;main.c: 1787: if (Read_b_eep(0x43 + 30) & 0x04) {
 10695  000ACC  6A09               	clrf	?_Read_b_eep+1,c
 10696  000ACE  0E61               	movlw	97
 10697  000AD0  6E08               	movwf	?_Read_b_eep,c
 10698  000AD2  EC21  F023         	call	_Read_b_eep	;wreg free
 10699  000AD6  0100               	movlb	0	; () banked
 10700  000AD8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10701  000ADA  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10702  000ADC  D3AC               	goto	l14504
 10703  000ADE                     l14092:
 10704                           
 10705                           ;main.c: 1788: channel_protection_timer[ 6 ] =
 10706                           ;main.c: 1789: Read_b_eep(0x43 + 46 + 32u) * 256 +
 10707                           ;main.c: 1791: Read_b_eep(0x43 + 46 + 33u);
 10708  000ADE  6A09               	clrf	?_Read_b_eep+1,c
 10709  000AE0  0E92               	movlw	146
 10710  000AE2  6E08               	movwf	?_Read_b_eep,c
 10711  000AE4  EC21  F023         	call	_Read_b_eep	;wreg free
 10712  000AE8  0100               	movlb	0	; () banked
 10713  000AEA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10714  000AEC  6A09               	clrf	?_Read_b_eep+1,c
 10715  000AEE  0E91               	movlw	145
 10716  000AF0  6E08               	movwf	?_Read_b_eep,c
 10717  000AF2  EC21  F023         	call	_Read_b_eep	;wreg free
 10718  000AF6  0100               	movlb	0	; () banked
 10719  000AF8  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10720  000AFA  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10721  000AFC  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10722  000AFE  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10723  000B00  6F8F               	movwf	(_channel_protection_timer+12)& (0+255),b
 10724  000B02  0E00               	movlw	0
 10725  000B04  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10726  000B06  6F90               	movwf	(_channel_protection_timer+13)& (0+255),b
 10727  000B08  D396               	goto	l14504
 10728  000B0A                     l752:
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;main.c: 1796: else if (0 == val) {
 10732  000B0A  664F               	tstfsz	vscp_writeAppReg@val,c
 10733  000B0C  D394               	goto	l14504
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;main.c: 1797: PORTCbits.RC7 = 0;
 10737  000B0E  9E82               	bcf	3970,7,c	;volatile
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;main.c: 1798: rv = PORTCbits.RC7;
 10741  000B10  0E00               	movlw	0
 10742  000B12  BE82               	btfsc	3970,7,c	;volatile
 10743  000B14  0E01               	movlw	1
 10744  000B16  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10745  000B18  D6D1               	goto	l13978
 10746  000B1A                     l14100:
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;main.c: 1806: bInfoEvent = 1;
 10750  000B1A  0E01               	movlw	1
 10751  000B1C  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;main.c: 1808: if (1 == val) {
 10755  000B1E  044F               	decf	vscp_writeAppReg@val,w,c
 10756  000B20  E126               	bnz	l757
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 1810: PORTAbits.RA2 = 1;
 10760  000B22  8480               	bsf	3968,2,c	;volatile
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;main.c: 1811: rv = PORTAbits.RA2;
 10764  000B24  0E00               	movlw	0
 10765  000B26  B480               	btfsc	3968,2,c	;volatile
 10766  000B28  0E01               	movlw	1
 10767  000B2A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;main.c: 1812: bOn = 1;
 10771  000B2C  0E01               	movlw	1
 10772  000B2E  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;main.c: 1814: if (Read_b_eep(0x43 + 31) & 0x04) {
 10776  000B30  6A09               	clrf	?_Read_b_eep+1,c
 10777  000B32  0E62               	movlw	98
 10778  000B34  6E08               	movwf	?_Read_b_eep,c
 10779  000B36  EC21  F023         	call	_Read_b_eep	;wreg free
 10780  000B3A  0100               	movlb	0	; () banked
 10781  000B3C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10782  000B3E  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10783  000B40  D37A               	goto	l14504
 10784  000B42                     l14112:
 10785                           
 10786                           ;main.c: 1815: channel_protection_timer[ 7 ] =
 10787                           ;main.c: 1816: Read_b_eep(0x43 + 46 + 34u) * 256 +
 10788                           ;main.c: 1818: Read_b_eep(0x43 + 46 + 35u);
 10789  000B42  6A09               	clrf	?_Read_b_eep+1,c
 10790  000B44  0E94               	movlw	148
 10791  000B46  6E08               	movwf	?_Read_b_eep,c
 10792  000B48  EC21  F023         	call	_Read_b_eep	;wreg free
 10793  000B4C  0100               	movlb	0	; () banked
 10794  000B4E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10795  000B50  6A09               	clrf	?_Read_b_eep+1,c
 10796  000B52  0E93               	movlw	147
 10797  000B54  6E08               	movwf	?_Read_b_eep,c
 10798  000B56  EC21  F023         	call	_Read_b_eep	;wreg free
 10799  000B5A  0100               	movlb	0	; () banked
 10800  000B5C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10801  000B5E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10802  000B60  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10803  000B62  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10804  000B64  6F91               	movwf	(_channel_protection_timer+14)& (0+255),b
 10805  000B66  0E00               	movlw	0
 10806  000B68  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10807  000B6A  6F92               	movwf	(_channel_protection_timer+15)& (0+255),b
 10808  000B6C  D364               	goto	l14504
 10809  000B6E                     l757:
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;main.c: 1823: else if (0 == val) {
 10813  000B6E  664F               	tstfsz	vscp_writeAppReg@val,c
 10814  000B70  D362               	goto	l14504
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;main.c: 1824: PORTAbits.RA2 = 0;
 10818  000B72  9480               	bcf	3968,2,c	;volatile
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;main.c: 1825: rv = PORTAbits.RA2;
 10822  000B74  0E00               	movlw	0
 10823  000B76  B480               	btfsc	3968,2,c	;volatile
 10824  000B78  0E01               	movlw	1
 10825  000B7A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10826  000B7C  D69F               	goto	l13978
 10827  000B7E                     l14120:
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;main.c: 1833: bInfoEvent = 1;
 10831  000B7E  0E01               	movlw	1
 10832  000B80  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;main.c: 1835: if (1 == val) {
 10836  000B82  044F               	decf	vscp_writeAppReg@val,w,c
 10837  000B84  E126               	bnz	l762
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1837: PORTAbits.RA1 = 1;
 10841  000B86  8280               	bsf	3968,1,c	;volatile
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;main.c: 1838: rv = PORTAbits.RA1;
 10845  000B88  0E00               	movlw	0
 10846  000B8A  B280               	btfsc	3968,1,c	;volatile
 10847  000B8C  0E01               	movlw	1
 10848  000B8E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;main.c: 1839: bOn = 1;
 10852  000B90  0E01               	movlw	1
 10853  000B92  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;main.c: 1841: if ( Read_b_eep(0x43 + 32) & 0x04 ) {
 10857  000B94  6A09               	clrf	?_Read_b_eep+1,c
 10858  000B96  0E63               	movlw	99
 10859  000B98  6E08               	movwf	?_Read_b_eep,c
 10860  000B9A  EC21  F023         	call	_Read_b_eep	;wreg free
 10861  000B9E  0100               	movlb	0	; () banked
 10862  000BA0  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10863  000BA2  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10864  000BA4  D348               	goto	l14504
 10865  000BA6                     l14132:
 10866                           
 10867                           ;main.c: 1842: channel_protection_timer[ 8 ] =
 10868                           ;main.c: 1843: Read_b_eep(0x43 + 46 + 36u) * 256 +
 10869                           ;main.c: 1845: Read_b_eep(0x43 + 46 + 37u);
 10870  000BA6  6A09               	clrf	?_Read_b_eep+1,c
 10871  000BA8  0E96               	movlw	150
 10872  000BAA  6E08               	movwf	?_Read_b_eep,c
 10873  000BAC  EC21  F023         	call	_Read_b_eep	;wreg free
 10874  000BB0  0100               	movlb	0	; () banked
 10875  000BB2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10876  000BB4  6A09               	clrf	?_Read_b_eep+1,c
 10877  000BB6  0E95               	movlw	149
 10878  000BB8  6E08               	movwf	?_Read_b_eep,c
 10879  000BBA  EC21  F023         	call	_Read_b_eep	;wreg free
 10880  000BBE  0100               	movlb	0	; () banked
 10881  000BC0  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10882  000BC2  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10883  000BC4  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10884  000BC6  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10885  000BC8  6F93               	movwf	(_channel_protection_timer+16)& (0+255),b
 10886  000BCA  0E00               	movlw	0
 10887  000BCC  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10888  000BCE  6F94               	movwf	(_channel_protection_timer+17)& (0+255),b
 10889  000BD0  D332               	goto	l14504
 10890  000BD2                     l762:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;main.c: 1850: else if ( 0 == val ) {
 10894  000BD2  664F               	tstfsz	vscp_writeAppReg@val,c
 10895  000BD4  D330               	goto	l14504
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;main.c: 1851: PORTAbits.RA1 = 0;
 10899  000BD6  9280               	bcf	3968,1,c	;volatile
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;main.c: 1852: rv = PORTAbits.RA1;
 10903  000BD8  0E00               	movlw	0
 10904  000BDA  B280               	btfsc	3968,1,c	;volatile
 10905  000BDC  0E01               	movlw	1
 10906  000BDE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10907  000BE0  D66D               	goto	l13978
 10908  000BE2                     l14140:
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;main.c: 1860: bInfoEvent = 1;
 10912  000BE2  0E01               	movlw	1
 10913  000BE4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;main.c: 1862: if ( 1 == val ) {
 10917  000BE6  044F               	decf	vscp_writeAppReg@val,w,c
 10918  000BE8  E126               	bnz	l767
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;main.c: 1864: PORTAbits.RA0 = 1;
 10922  000BEA  8080               	bsf	3968,0,c	;volatile
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 1865: rv = PORTAbits.RA0;
 10926  000BEC  0E00               	movlw	0
 10927  000BEE  B080               	btfsc	3968,0,c	;volatile
 10928  000BF0  0E01               	movlw	1
 10929  000BF2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;main.c: 1866: bOn = 1;
 10933  000BF4  0E01               	movlw	1
 10934  000BF6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;main.c: 1868: if ( Read_b_eep(0x43 + 33) & 0x04 ) {
 10938  000BF8  6A09               	clrf	?_Read_b_eep+1,c
 10939  000BFA  0E64               	movlw	100
 10940  000BFC  6E08               	movwf	?_Read_b_eep,c
 10941  000BFE  EC21  F023         	call	_Read_b_eep	;wreg free
 10942  000C02  0100               	movlb	0	; () banked
 10943  000C04  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10944  000C06  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10945  000C08  D316               	goto	l14504
 10946  000C0A                     l14152:
 10947                           
 10948                           ;main.c: 1869: channel_protection_timer[ 9 ] =
 10949                           ;main.c: 1870: Read_b_eep(0x43 + 46 + 38u) * 256 +
 10950                           ;main.c: 1872: Read_b_eep(0x43 + 46 + 39u);
 10951  000C0A  6A09               	clrf	?_Read_b_eep+1,c
 10952  000C0C  0E98               	movlw	152
 10953  000C0E  6E08               	movwf	?_Read_b_eep,c
 10954  000C10  EC21  F023         	call	_Read_b_eep	;wreg free
 10955  000C14  0100               	movlb	0	; () banked
 10956  000C16  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10957  000C18  6A09               	clrf	?_Read_b_eep+1,c
 10958  000C1A  0E97               	movlw	151
 10959  000C1C  6E08               	movwf	?_Read_b_eep,c
 10960  000C1E  EC21  F023         	call	_Read_b_eep	;wreg free
 10961  000C22  0100               	movlb	0	; () banked
 10962  000C24  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10963  000C26  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10964  000C28  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10965  000C2A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10966  000C2C  6F95               	movwf	(_channel_protection_timer+18)& (0+255),b
 10967  000C2E  0E00               	movlw	0
 10968  000C30  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10969  000C32  6F96               	movwf	(_channel_protection_timer+19)& (0+255),b
 10970  000C34  D300               	goto	l14504
 10971  000C36                     l767:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 1877: else if ( 0 == val ) {
 10975  000C36  664F               	tstfsz	vscp_writeAppReg@val,c
 10976  000C38  D2FE               	goto	l14504
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;main.c: 1878: PORTAbits.RA0 = 0;
 10980  000C3A  9080               	bcf	3968,0,c	;volatile
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;main.c: 1879: rv = PORTAbits.RA0;
 10984  000C3C  0E00               	movlw	0
 10985  000C3E  B080               	btfsc	3968,0,c	;volatile
 10986  000C40  0E01               	movlw	1
 10987  000C42  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10988  000C44  D63B               	goto	l13978
 10989  000C46                     l14162:
 10990                           
 10991                           ; BSR set to: 0
 10992  000C46  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 10993                           
 10994                           ; Switch size 1, requested type "space"
 10995                           ; Number of cases is 10, Range of values is 14 to 23
 10996                           ; switch strategies available:
 10997                           ; Name         Instructions Cycles
 10998                           ; simple_byte           31    16 (average)
 10999                           ;	Chosen strategy is simple_byte
 11000  000C48  0A0E               	xorlw	14	; case 14
 11001  000C4A  E101 D603          	bz	l13960
 11002  000C4E  0A01               	xorlw	1	; case 15
 11003  000C50  E101 D637          	bz	l13980
 11004  000C54  0A1F               	xorlw	31	; case 16
 11005  000C56  E101 D65F          	bz	l14000
 11006  000C5A  0A01               	xorlw	1	; case 17
 11007  000C5C  E101 D691          	bz	l14020
 11008  000C60  0A03               	xorlw	3	; case 18
 11009  000C62  E101 D6C3          	bz	l14040
 11010  000C66  0A01               	xorlw	1	; case 19
 11011  000C68  E101 D6F3          	bz	l14060
 11012  000C6C  0A07               	xorlw	7	; case 20
 11013  000C6E  E101 D722          	bz	l14080
 11014  000C72  0A01               	xorlw	1	; case 21
 11015  000C74  E101 D751          	bz	l14100
 11016  000C78  0A03               	xorlw	3	; case 22
 11017  000C7A  E081               	bz	l14120
 11018  000C7C  0A01               	xorlw	1	; case 23
 11019  000C7E  E0B1               	bz	l14140
 11020                           
 11021                           ;main.c: 1885: }
 11022                           ;main.c: 1886: }
 11023  000C80  D2DA               	goto	l14504
 11024  000C82                     l14164:
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;main.c: 1889: else if ( (reg >= 24 ) &&
 11028                           ;main.c: 1890: (reg <= 33) ) {
 11029  000C82  0E17               	movlw	23
 11030  000C84  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11031  000C86  D1C3               	goto	l14414
 11032                           
 11033                           ; BSR set to: 0
 11034  000C88  0E22               	movlw	34
 11035  000C8A  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11036  000C8C  D1C0               	goto	l14414
 11037  000C8E  D1A1               	goto	l14412
 11038  000C90                     l14170:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;main.c: 1896: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11042  000C90  EC55  F023         	call	_Busy_eep	;wreg free
 11043  000C94  0E71               	movlw	113
 11044  000C96  DAF5               	call	PL2	;call to abstracted procedure
 11045  000C98  EC28  F021         	call	_Write_b_eep	;wreg free
 11046                           
 11047                           ;main.c: 1897: rv = Read_b_eep(0x43 + 46 + reg);
 11048  000C9C  DB02               	call	PL10	;call to abstracted procedure
 11049  000C9E  EC21  F023         	call	_Read_b_eep	;wreg free
 11050  000CA2  0100               	movlb	0	; () banked
 11051  000CA4  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 1899: if ( val & 0x01 ) {
 11055  000CA6  A04F               	btfss	vscp_writeAppReg@val,0,c
 11056  000CA8  D012               	goto	l14184
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;main.c: 1901: PORTBbits.RB0 = 0;
 11060  000CAA  9081               	bcf	3969,0,c	;volatile
 11061                           
 11062                           ;main.c: 1902: bOn = 0;
 11063  000CAC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;main.c: 1904: channel_pulse_flags |= 0b0000000001;
 11067  000CAE  8168               	bsf	_channel_pulse_flags& (0+255),0,b
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;main.c: 1905: channel_pulse_timer[ 0 ] =
 11071                           ;main.c: 1906: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11072                           ;main.c: 1908: Read_b_eep(0x43 + 46 + 0u);
 11073  000CB0  6A09               	clrf	?_Read_b_eep+1,c
 11074  000CB2  0E71               	movlw	113
 11075  000CB4  6E08               	movwf	?_Read_b_eep,c
 11076  000CB6  EC21  F023         	call	_Read_b_eep	;wreg free
 11077  000CBA  0100               	movlb	0	; () banked
 11078  000CBC  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11079  000CBE  6A09               	clrf	?_Read_b_eep+1,c
 11080  000CC0  0E71               	movlw	113
 11081  000CC2  6E08               	movwf	?_Read_b_eep,c
 11082  000CC4  EC21  F023         	call	_Read_b_eep	;wreg free
 11083  000CC8  DAE5               	call	PL6	;call to abstracted procedure
 11084  000CCA  DB0F               	call	PL82	;call to abstracted procedure
 11085                           
 11086                           ;main.c: 1910: }
 11087  000CCC  D006               	goto	l14190
 11088  000CCE                     l14184:
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;main.c: 1911: else {
 11092                           ;main.c: 1912: channel_pulse_flags &= 0b1111111110;
 11093  000CCE  0EFE               	movlw	254
 11094  000CD0  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11095  000CD2  0E03               	movlw	3
 11096  000CD4  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;main.c: 1913: PORTBbits.RB0 = 0;
 11100  000CD6  9081               	bcf	3969,0,c	;volatile
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;main.c: 1914: bOn = 0;
 11104  000CD8  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11105  000CDA                     l14190:
 11106                           
 11107                           ;main.c: 1915: }
 11108                           ;main.c: 1917: if ( val & 0x04 ) {
 11109  000CDA  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11110  000CDC  D5D0               	goto	l13972
 11111  000CDE  D2AB               	goto	l14504
 11112  000CE0                     l14194:
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;main.c: 1928: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11116  000CE0  EC55  F023         	call	_Busy_eep	;wreg free
 11117  000CE4  0E71               	movlw	113
 11118  000CE6  DACD               	call	PL2	;call to abstracted procedure
 11119  000CE8  EC28  F021         	call	_Write_b_eep	;wreg free
 11120                           
 11121                           ;main.c: 1929: rv = Read_b_eep(0x43 + 46 + reg);
 11122  000CEC  DADA               	call	PL10	;call to abstracted procedure
 11123  000CEE  EC21  F023         	call	_Read_b_eep	;wreg free
 11124  000CF2  0100               	movlb	0	; () banked
 11125  000CF4  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;main.c: 1931: if ( val & 0x02 ) {
 11129  000CF6  A24F               	btfss	vscp_writeAppReg@val,1,c
 11130  000CF8  D012               	goto	l14208
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;main.c: 1933: PORTBbits.RB1 = 0;
 11134  000CFA  9281               	bcf	3969,1,c	;volatile
 11135                           
 11136                           ;main.c: 1934: bOn = 0;
 11137  000CFC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;main.c: 1936: channel_pulse_flags |= 0b0000000010;
 11141  000CFE  8368               	bsf	_channel_pulse_flags& (0+255),1,b
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;main.c: 1937: channel_pulse_timer[ 1 ] =
 11145                           ;main.c: 1938: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11146                           ;main.c: 1940: Read_b_eep(0x43 + 46 + 1u);
 11147  000D00  6A09               	clrf	?_Read_b_eep+1,c
 11148  000D02  0E72               	movlw	114
 11149  000D04  6E08               	movwf	?_Read_b_eep,c
 11150  000D06  EC21  F023         	call	_Read_b_eep	;wreg free
 11151  000D0A  0100               	movlb	0	; () banked
 11152  000D0C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11153  000D0E  6A09               	clrf	?_Read_b_eep+1,c
 11154  000D10  0E71               	movlw	113
 11155  000D12  6E08               	movwf	?_Read_b_eep,c
 11156  000D14  EC21  F023         	call	_Read_b_eep	;wreg free
 11157  000D18  DABD               	call	PL6	;call to abstracted procedure
 11158  000D1A  DAD9               	call	PL72	;call to abstracted procedure
 11159                           
 11160                           ;main.c: 1942: }
 11161  000D1C  D006               	goto	l14214
 11162  000D1E                     l14208:
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;main.c: 1943: else {
 11166                           ;main.c: 1944: channel_pulse_flags &= 0b1111111101;
 11167  000D1E  0EFD               	movlw	253
 11168  000D20  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11169  000D22  0E03               	movlw	3
 11170  000D24  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;main.c: 1945: PORTBbits.RB1 = 0;
 11174  000D26  9281               	bcf	3969,1,c	;volatile
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;main.c: 1946: bOn = 0;
 11178  000D28  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11179  000D2A                     l14214:
 11180                           
 11181                           ;main.c: 1947: }
 11182                           ;main.c: 1949: if ( val & 0x04 ) {
 11183  000D2A  A44F               	btfss	vscp_writeAppReg@val,2,c
 11184  000D2C  D284               	goto	l14504
 11185                           
 11186                           ;main.c: 1950: channel_protection_timer[ 1 ] =
 11187                           ;main.c: 1951: Read_b_eep(0x43 + 46 + 20u) * 256 +
 11188                           ;main.c: 1953: Read_b_eep(0x43 + 46 + 21u);
 11189  000D2E  6A09               	clrf	?_Read_b_eep+1,c
 11190  000D30  0E86               	movlw	134
 11191  000D32  6E08               	movwf	?_Read_b_eep,c
 11192  000D34  EC21  F023         	call	_Read_b_eep	;wreg free
 11193  000D38  0100               	movlb	0	; () banked
 11194  000D3A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11195  000D3C  6A09               	clrf	?_Read_b_eep+1,c
 11196  000D3E  0E85               	movlw	133
 11197  000D40  6E08               	movwf	?_Read_b_eep,c
 11198  000D42  EC21  F023         	call	_Read_b_eep	;wreg free
 11199  000D46                     L34:
 11200  000D46  0100               	movlb	0	; () banked
 11201  000D48  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11202  000D4A  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11203  000D4C  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 11204  000D4E  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11205  000D50  6F85               	movwf	(_channel_protection_timer+2)& (0+255),b
 11206  000D52  0E00               	movlw	0
 11207  000D54  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11208  000D56  6F86               	movwf	(_channel_protection_timer+3)& (0+255),b
 11209  000D58  D26E               	goto	l14504
 11210  000D5A                     l14218:
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;main.c: 1960: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11214  000D5A  EC55  F023         	call	_Busy_eep	;wreg free
 11215  000D5E  0E71               	movlw	113
 11216  000D60  DA90               	call	PL2	;call to abstracted procedure
 11217  000D62  EC28  F021         	call	_Write_b_eep	;wreg free
 11218                           
 11219                           ;main.c: 1961: rv = Read_b_eep(0x43 + 46 + reg);
 11220  000D66  DA9D               	call	PL10	;call to abstracted procedure
 11221  000D68  EC21  F023         	call	_Read_b_eep	;wreg free
 11222  000D6C  0100               	movlb	0	; () banked
 11223  000D6E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;main.c: 1963: if ( val & 0x01 ) {
 11227  000D70  A04F               	btfss	vscp_writeAppReg@val,0,c
 11228  000D72  D012               	goto	l14232
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;main.c: 1965: PORTCbits.RC3 = 0;
 11232  000D74  9682               	bcf	3970,3,c	;volatile
 11233                           
 11234                           ;main.c: 1966: bOn = 0;
 11235  000D76  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;main.c: 1968: channel_pulse_flags |= 0b0000000100;
 11239  000D78  8568               	bsf	_channel_pulse_flags& (0+255),2,b
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;main.c: 1969: channel_pulse_timer[ 2 ] =
 11243                           ;main.c: 1970: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11244                           ;main.c: 1972: Read_b_eep(0x43 + 46 + 5u);
 11245  000D7A  6A09               	clrf	?_Read_b_eep+1,c
 11246  000D7C  0E76               	movlw	118
 11247  000D7E  6E08               	movwf	?_Read_b_eep,c
 11248  000D80  EC21  F023         	call	_Read_b_eep	;wreg free
 11249  000D84  0100               	movlb	0	; () banked
 11250  000D86  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11251  000D88  6A09               	clrf	?_Read_b_eep+1,c
 11252  000D8A  0E75               	movlw	117
 11253  000D8C  6E08               	movwf	?_Read_b_eep,c
 11254  000D8E  EC21  F023         	call	_Read_b_eep	;wreg free
 11255  000D92  DA80               	call	PL6	;call to abstracted procedure
 11256  000D94  DAB8               	call	PL86	;call to abstracted procedure
 11257                           
 11258                           ;main.c: 1974: }
 11259  000D96  D006               	goto	l14238
 11260  000D98                     l14232:
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;main.c: 1975: else {
 11264                           ;main.c: 1976: channel_pulse_flags &= 0b1111111011;
 11265  000D98  0EFB               	movlw	251
 11266  000D9A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11267  000D9C  0E03               	movlw	3
 11268  000D9E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11269                           
 11270                           ; BSR set to: 0
 11271                           ;main.c: 1977: PORTCbits.RC3 = 0;
 11272  000DA0  9682               	bcf	3970,3,c	;volatile
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;main.c: 1978: bOn = 0;
 11276  000DA2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11277  000DA4                     l14238:
 11278                           
 11279                           ;main.c: 1979: }
 11280                           ;main.c: 1981: if ( val & 0x04 ) {
 11281  000DA4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11282  000DA6  D5CD               	goto	l14012
 11283  000DA8  D246               	goto	l14504
 11284  000DAA                     l14242:
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;main.c: 1992: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11288  000DAA  EC55  F023         	call	_Busy_eep	;wreg free
 11289  000DAE  0E71               	movlw	113
 11290  000DB0  DA68               	call	PL2	;call to abstracted procedure
 11291  000DB2  EC28  F021         	call	_Write_b_eep	;wreg free
 11292                           
 11293                           ;main.c: 1993: rv = Read_b_eep(0x43 + 46 + reg);
 11294  000DB6  DA75               	call	PL10	;call to abstracted procedure
 11295  000DB8  EC21  F023         	call	_Read_b_eep	;wreg free
 11296  000DBC  0100               	movlb	0	; () banked
 11297  000DBE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;main.c: 1995: if ( val & 0x01 ) {
 11301  000DC0  A04F               	btfss	vscp_writeAppReg@val,0,c
 11302  000DC2  D012               	goto	l14256
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;main.c: 1997: PORTCbits.RC4 = 0;
 11306  000DC4  9882               	bcf	3970,4,c	;volatile
 11307                           
 11308                           ;main.c: 1998: bOn = 0;
 11309  000DC6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;main.c: 2000: channel_pulse_flags |= 0b0000001000;
 11313  000DC8  8768               	bsf	_channel_pulse_flags& (0+255),3,b
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;main.c: 2001: channel_pulse_timer[ 3 ] =
 11317                           ;main.c: 2002: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11318                           ;main.c: 2004: Read_b_eep(0x43 + 46 + 7u);
 11319  000DCA  6A09               	clrf	?_Read_b_eep+1,c
 11320  000DCC  0E78               	movlw	120
 11321  000DCE  6E08               	movwf	?_Read_b_eep,c
 11322  000DD0  EC21  F023         	call	_Read_b_eep	;wreg free
 11323  000DD4  0100               	movlb	0	; () banked
 11324  000DD6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11325  000DD8  6A09               	clrf	?_Read_b_eep+1,c
 11326  000DDA  0E77               	movlw	119
 11327  000DDC  6E08               	movwf	?_Read_b_eep,c
 11328  000DDE  EC21  F023         	call	_Read_b_eep	;wreg free
 11329  000DE2  DA58               	call	PL6	;call to abstracted procedure
 11330  000DE4  DA7B               	call	PL74	;call to abstracted procedure
 11331                           
 11332                           ;main.c: 2006: }
 11333  000DE6  D006               	goto	l14262
 11334  000DE8                     l14256:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;main.c: 2007: else {
 11338                           ;main.c: 2008: channel_pulse_flags &= 0b1111110111;
 11339  000DE8  0EF7               	movlw	247
 11340  000DEA  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11341  000DEC  0E03               	movlw	3
 11342  000DEE  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;main.c: 2009: PORTCbits.RC4 = 0;
 11346  000DF0  9882               	bcf	3970,4,c	;volatile
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;main.c: 2010: bOn = 0;
 11350  000DF2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11351  000DF4                     l14262:
 11352                           
 11353                           ;main.c: 2011: }
 11354                           ;main.c: 2013: if ( val & 0x04 ) {
 11355  000DF4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11356  000DF6  D5DA               	goto	l14032
 11357  000DF8  D21E               	goto	l14504
 11358  000DFA                     l14266:
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;main.c: 2024: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11362  000DFA  EC55  F023         	call	_Busy_eep	;wreg free
 11363  000DFE  0E71               	movlw	113
 11364  000E00  DA40               	call	PL2	;call to abstracted procedure
 11365  000E02  EC28  F021         	call	_Write_b_eep	;wreg free
 11366                           
 11367                           ;main.c: 2025: rv = Read_b_eep(0x43 + 46 + reg);
 11368  000E06  DA4D               	call	PL10	;call to abstracted procedure
 11369  000E08  EC21  F023         	call	_Read_b_eep	;wreg free
 11370  000E0C  0100               	movlb	0	; () banked
 11371  000E0E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;main.c: 2027: if ( val & 0x04 ) {
 11375  000E10  A44F               	btfss	vscp_writeAppReg@val,2,c
 11376  000E12  D012               	goto	l14280
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;main.c: 2029: PORTCbits.RC5 = 0;
 11380  000E14  9A82               	bcf	3970,5,c	;volatile
 11381                           
 11382                           ;main.c: 2030: bOn = 0;
 11383  000E16  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;main.c: 2032: channel_pulse_flags |= 0b0000010000;
 11387  000E18  8968               	bsf	_channel_pulse_flags& (0+255),4,b
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;main.c: 2033: channel_pulse_timer[ 4 ] =
 11391                           ;main.c: 2034: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11392                           ;main.c: 2036: Read_b_eep(0x43 + 46 + 9u);
 11393  000E1A  6A09               	clrf	?_Read_b_eep+1,c
 11394  000E1C  0E7A               	movlw	122
 11395  000E1E  6E08               	movwf	?_Read_b_eep,c
 11396  000E20  EC21  F023         	call	_Read_b_eep	;wreg free
 11397  000E24  0100               	movlb	0	; () banked
 11398  000E26  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11399  000E28  6A09               	clrf	?_Read_b_eep+1,c
 11400  000E2A  0E79               	movlw	121
 11401  000E2C  6E08               	movwf	?_Read_b_eep,c
 11402  000E2E  EC21  F023         	call	_Read_b_eep	;wreg free
 11403  000E32  DA30               	call	PL6	;call to abstracted procedure
 11404  000E34  DA61               	call	PL84	;call to abstracted procedure
 11405                           
 11406                           ;main.c: 2038: }
 11407  000E36  D006               	goto	l14286
 11408  000E38                     l14280:
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;main.c: 2039: else {
 11412                           ;main.c: 2040: channel_pulse_flags &= 0b1111101111;
 11413  000E38  0EEF               	movlw	239
 11414  000E3A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11415  000E3C  0E03               	movlw	3
 11416  000E3E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;main.c: 2041: PORTCbits.RC5 = 0;
 11420  000E40  9A82               	bcf	3970,5,c	;volatile
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;main.c: 2042: bOn = 0;
 11424  000E42  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11425  000E44                     l14286:
 11426                           
 11427                           ;main.c: 2043: }
 11428                           ;main.c: 2045: if ( val & 0x04 ) {
 11429  000E44  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11430  000E46  D5E7               	goto	l14052
 11431  000E48  D1F6               	goto	l14504
 11432  000E4A                     l14290:
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;main.c: 2056: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11436  000E4A  EC55  F023         	call	_Busy_eep	;wreg free
 11437  000E4E  0E71               	movlw	113
 11438  000E50  DA18               	call	PL2	;call to abstracted procedure
 11439  000E52  EC28  F021         	call	_Write_b_eep	;wreg free
 11440                           
 11441                           ;main.c: 2057: rv = Read_b_eep(0x43 + 46 + reg);
 11442  000E56  DA25               	call	PL10	;call to abstracted procedure
 11443  000E58  EC21  F023         	call	_Read_b_eep	;wreg free
 11444  000E5C  0100               	movlb	0	; () banked
 11445  000E5E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;main.c: 2059: if ( val & 0x01 ) {
 11449  000E60  A04F               	btfss	vscp_writeAppReg@val,0,c
 11450  000E62  D012               	goto	l14304
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;main.c: 2061: PORTCbits.RC6 = 0;
 11454  000E64  9C82               	bcf	3970,6,c	;volatile
 11455                           
 11456                           ;main.c: 2062: bOn = 0;
 11457  000E66  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;main.c: 2064: channel_pulse_flags |= 0b0000100000;
 11461  000E68  8B68               	bsf	_channel_pulse_flags& (0+255),5,b
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;main.c: 2065: channel_pulse_timer[ 5 ] =
 11465                           ;main.c: 2066: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11466                           ;main.c: 2068: Read_b_eep(0x43 + 46 + 11u);
 11467  000E6A  6A09               	clrf	?_Read_b_eep+1,c
 11468  000E6C  0E7C               	movlw	124
 11469  000E6E  6E08               	movwf	?_Read_b_eep,c
 11470  000E70  EC21  F023         	call	_Read_b_eep	;wreg free
 11471  000E74  0100               	movlb	0	; () banked
 11472  000E76  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11473  000E78  6A09               	clrf	?_Read_b_eep+1,c
 11474  000E7A  0E7B               	movlw	123
 11475  000E7C  6E08               	movwf	?_Read_b_eep,c
 11476  000E7E  EC21  F023         	call	_Read_b_eep	;wreg free
 11477  000E82  DA08               	call	PL6	;call to abstracted procedure
 11478  000E84  DA4E               	call	PL90	;call to abstracted procedure
 11479                           
 11480                           ;main.c: 2070: }
 11481  000E86  D006               	goto	l14310
 11482  000E88                     l14304:
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;main.c: 2071: else {
 11486                           ;main.c: 2072: channel_pulse_flags &= 0b1111011111;
 11487  000E88  0EDF               	movlw	223
 11488  000E8A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11489  000E8C  0E03               	movlw	3
 11490  000E8E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;main.c: 2073: PORTCbits.RC6 = 0;
 11494  000E90  9C82               	bcf	3970,6,c	;volatile
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;main.c: 2074: bOn = 0;
 11498  000E92  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11499  000E94                     l14310:
 11500                           
 11501                           ;main.c: 2075: }
 11502                           ;main.c: 2077: if ( val & 0x04 ) {
 11503  000E94  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11504  000E96  D5F1               	goto	l14072
 11505  000E98  D1CE               	goto	l14504
 11506  000E9A                     l14314:
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;main.c: 2088: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11510  000E9A  EC55  F023         	call	_Busy_eep	;wreg free
 11511  000E9E  0E71               	movlw	113
 11512  000EA0  D9F0               	call	PL2	;call to abstracted procedure
 11513  000EA2  EC28  F021         	call	_Write_b_eep	;wreg free
 11514                           
 11515                           ;main.c: 2089: rv = Read_b_eep(0x43 + 46 + reg);
 11516  000EA6  D9FD               	call	PL10	;call to abstracted procedure
 11517  000EA8  EC21  F023         	call	_Read_b_eep	;wreg free
 11518  000EAC  0100               	movlb	0	; () banked
 11519  000EAE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;main.c: 2091: if ( val & 0x01 ) {
 11523  000EB0  A04F               	btfss	vscp_writeAppReg@val,0,c
 11524  000EB2  D012               	goto	l14328
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;main.c: 2093: PORTCbits.RC7 = 0;
 11528  000EB4  9E82               	bcf	3970,7,c	;volatile
 11529                           
 11530                           ;main.c: 2094: bOn = 0;
 11531  000EB6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;main.c: 2096: channel_pulse_flags |= 0b0001000000;
 11535  000EB8  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;main.c: 2097: channel_pulse_timer[ 6 ] =
 11539                           ;main.c: 2098: Read_b_eep(0x43 + 46 + 12u) * 256 +
 11540                           ;main.c: 2100: Read_b_eep(0x43 + 46 + 13u);
 11541  000EBA  6A09               	clrf	?_Read_b_eep+1,c
 11542  000EBC  0E7E               	movlw	126
 11543  000EBE  6E08               	movwf	?_Read_b_eep,c
 11544  000EC0  EC21  F023         	call	_Read_b_eep	;wreg free
 11545  000EC4  0100               	movlb	0	; () banked
 11546  000EC6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11547  000EC8  6A09               	clrf	?_Read_b_eep+1,c
 11548  000ECA  0E7D               	movlw	125
 11549  000ECC  6E08               	movwf	?_Read_b_eep,c
 11550  000ECE  EC21  F023         	call	_Read_b_eep	;wreg free
 11551  000ED2  D9E0               	call	PL6	;call to abstracted procedure
 11552  000ED4  D9F5               	call	PL70	;call to abstracted procedure
 11553                           
 11554                           ;main.c: 2102: }
 11555  000ED6  D006               	goto	l14334
 11556  000ED8                     l14328:
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;main.c: 2103: else {
 11560                           ;main.c: 2104: channel_pulse_flags &= 0b1110111111;
 11561  000ED8  0EBF               	movlw	191
 11562  000EDA  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11563  000EDC  0E03               	movlw	3
 11564  000EDE  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;main.c: 2105: PORTCbits.RC7 = 0;
 11568  000EE0  9E82               	bcf	3970,7,c	;volatile
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;main.c: 2106: bOn = 0;
 11572  000EE2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11573  000EE4                     l14334:
 11574                           
 11575                           ;main.c: 2107: }
 11576                           ;main.c: 2109: if ( val & 0x04 ) {
 11577  000EE4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11578  000EE6  D5FB               	goto	l14092
 11579  000EE8  D1A6               	goto	l14504
 11580  000EEA                     l14338:
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;main.c: 2120: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11584  000EEA  EC55  F023         	call	_Busy_eep	;wreg free
 11585  000EEE  0E71               	movlw	113
 11586  000EF0  D9C8               	call	PL2	;call to abstracted procedure
 11587  000EF2  EC28  F021         	call	_Write_b_eep	;wreg free
 11588                           
 11589                           ;main.c: 2121: rv = Read_b_eep(0x43 + 46 + reg);
 11590  000EF6  D9D5               	call	PL10	;call to abstracted procedure
 11591  000EF8  EC21  F023         	call	_Read_b_eep	;wreg free
 11592  000EFC  0100               	movlb	0	; () banked
 11593  000EFE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;main.c: 2123: if ( val & 0x01 ) {
 11597  000F00  A04F               	btfss	vscp_writeAppReg@val,0,c
 11598  000F02  D012               	goto	l14352
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;main.c: 2125: PORTAbits.RA2 = 0;
 11602  000F04  9480               	bcf	3968,2,c	;volatile
 11603                           
 11604                           ;main.c: 2126: bOn = 0;
 11605  000F06  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;main.c: 2128: channel_pulse_flags |= 0b0010000000;
 11609  000F08  8F68               	bsf	_channel_pulse_flags& (0+255),7,b
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;main.c: 2129: channel_pulse_timer[ 7 ] =
 11613                           ;main.c: 2130: Read_b_eep(0x43 + 46 + 14u) * 256 +
 11614                           ;main.c: 2132: Read_b_eep(0x43 + 46 + 15u);
 11615  000F0A  6A09               	clrf	?_Read_b_eep+1,c
 11616  000F0C  0E80               	movlw	128
 11617  000F0E  6E08               	movwf	?_Read_b_eep,c
 11618  000F10  EC21  F023         	call	_Read_b_eep	;wreg free
 11619  000F14  0100               	movlb	0	; () banked
 11620  000F16  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11621  000F18  6A09               	clrf	?_Read_b_eep+1,c
 11622  000F1A  0E7F               	movlw	127
 11623  000F1C  6E08               	movwf	?_Read_b_eep,c
 11624  000F1E  EC21  F023         	call	_Read_b_eep	;wreg free
 11625  000F22  D9B8               	call	PL6	;call to abstracted procedure
 11626  000F24  D9F7               	call	PL88	;call to abstracted procedure
 11627                           
 11628                           ;main.c: 2134: }
 11629  000F26  D006               	goto	l14358
 11630  000F28                     l14352:
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;main.c: 2135: else {
 11634                           ;main.c: 2136: channel_pulse_flags &= 0b1101111111;
 11635  000F28  0E7F               	movlw	127
 11636  000F2A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11637  000F2C  0E03               	movlw	3
 11638  000F2E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;main.c: 2137: PORTAbits.RA2 = 0;
 11642  000F30  9480               	bcf	3968,2,c	;volatile
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;main.c: 2138: bOn = 0;
 11646  000F32  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11647  000F34                     l14358:
 11648                           
 11649                           ;main.c: 2139: }
 11650                           ;main.c: 2141: if ( val & 0x04 ) {
 11651  000F34  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11652  000F36  D605               	goto	l14112
 11653  000F38  D17E               	goto	l14504
 11654  000F3A                     l14362:
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;main.c: 2152: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11658  000F3A  EC55  F023         	call	_Busy_eep	;wreg free
 11659  000F3E  0E71               	movlw	113
 11660  000F40  D9A0               	call	PL2	;call to abstracted procedure
 11661  000F42  EC28  F021         	call	_Write_b_eep	;wreg free
 11662                           
 11663                           ;main.c: 2153: rv = Read_b_eep(0x43 + 46 + reg);
 11664  000F46  D9AD               	call	PL10	;call to abstracted procedure
 11665  000F48  EC21  F023         	call	_Read_b_eep	;wreg free
 11666  000F4C  0100               	movlb	0	; () banked
 11667  000F4E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;main.c: 2155: if ( val & 0x01 ) {
 11671  000F50  A04F               	btfss	vscp_writeAppReg@val,0,c
 11672  000F52  D012               	goto	l14376
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;main.c: 2157: PORTAbits.RA1 = 0;
 11676  000F54  9280               	bcf	3968,1,c	;volatile
 11677                           
 11678                           ;main.c: 2158: bOn = 0;
 11679  000F56  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;main.c: 2160: channel_pulse_flags |= 0b0100000000;
 11683  000F58  8169               	bsf	(_channel_pulse_flags+1)& (0+255),0,b
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;main.c: 2161: channel_pulse_timer[ 8 ] =
 11687                           ;main.c: 2162: Read_b_eep(0x43 + 46 + 16u) * 256 +
 11688                           ;main.c: 2164: Read_b_eep(0x43 + 46 + 17u);
 11689  000F5A  6A09               	clrf	?_Read_b_eep+1,c
 11690  000F5C  0E82               	movlw	130
 11691  000F5E  6E08               	movwf	?_Read_b_eep,c
 11692  000F60  EC21  F023         	call	_Read_b_eep	;wreg free
 11693  000F64  0100               	movlb	0	; () banked
 11694  000F66  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11695  000F68  6A09               	clrf	?_Read_b_eep+1,c
 11696  000F6A  0E81               	movlw	129
 11697  000F6C  6E08               	movwf	?_Read_b_eep,c
 11698  000F6E  EC21  F023         	call	_Read_b_eep	;wreg free
 11699  000F72  D990               	call	PL6	;call to abstracted procedure
 11700  000F74  D9E4               	call	PL96	;call to abstracted procedure
 11701                           
 11702                           ;main.c: 2166: }
 11703  000F76  D004               	goto	l14382
 11704  000F78                     l14376:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;main.c: 2167: else {
 11708                           ;main.c: 2168: channel_pulse_flags &= 0b1011111111;
 11709  000F78  0E02               	movlw	2
 11710  000F7A  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 2169: PORTAbits.RA1 = 0;
 11714  000F7C  9280               	bcf	3968,1,c	;volatile
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;main.c: 2170: bOn = 0;
 11718  000F7E  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11719  000F80                     l14382:
 11720                           
 11721                           ;main.c: 2171: }
 11722                           ;main.c: 2173: if ( val & 0x04 ) {
 11723  000F80  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11724  000F82  D611               	goto	l14132
 11725  000F84  D158               	goto	l14504
 11726  000F86                     l14386:
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;main.c: 2184: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11730  000F86  EC55  F023         	call	_Busy_eep	;wreg free
 11731  000F8A  0E71               	movlw	113
 11732  000F8C  D97A               	call	PL2	;call to abstracted procedure
 11733  000F8E  EC28  F021         	call	_Write_b_eep	;wreg free
 11734                           
 11735                           ;main.c: 2185: rv = Read_b_eep(0x43 + 46 + reg);
 11736  000F92  D987               	call	PL10	;call to abstracted procedure
 11737  000F94  EC21  F023         	call	_Read_b_eep	;wreg free
 11738  000F98  0100               	movlb	0	; () banked
 11739  000F9A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;main.c: 2187: if ( val & 0x01 ) {
 11743  000F9C  A04F               	btfss	vscp_writeAppReg@val,0,c
 11744  000F9E  D012               	goto	l14400
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;main.c: 2189: PORTAbits.RA0 = 0;
 11748  000FA0  9080               	bcf	3968,0,c	;volatile
 11749                           
 11750                           ;main.c: 2190: bOn = 0;
 11751  000FA2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;main.c: 2192: channel_pulse_flags |= 0b1000000000;
 11755  000FA4  8369               	bsf	(_channel_pulse_flags+1)& (0+255),1,b
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 2193: channel_pulse_timer[ 9 ] =
 11759                           ;main.c: 2194: Read_b_eep(0x43 + 46 + 18u) * 256 +
 11760                           ;main.c: 2196: Read_b_eep(0x43 + 46 + 19u);
 11761  000FA6  6A09               	clrf	?_Read_b_eep+1,c
 11762  000FA8  0E84               	movlw	132
 11763  000FAA  6E08               	movwf	?_Read_b_eep,c
 11764  000FAC  EC21  F023         	call	_Read_b_eep	;wreg free
 11765  000FB0  0100               	movlb	0	; () banked
 11766  000FB2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11767  000FB4  6A09               	clrf	?_Read_b_eep+1,c
 11768  000FB6  0E83               	movlw	131
 11769  000FB8  6E08               	movwf	?_Read_b_eep,c
 11770  000FBA  EC21  F023         	call	_Read_b_eep	;wreg free
 11771  000FBE  D96A               	call	PL6	;call to abstracted procedure
 11772  000FC0  D9B7               	call	PL94	;call to abstracted procedure
 11773                           
 11774                           ;main.c: 2198: }
 11775  000FC2  D004               	goto	l14406
 11776  000FC4                     l14400:
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;main.c: 2199: else {
 11780                           ;main.c: 2200: channel_pulse_flags &= 0b0111111111;
 11781  000FC4  0E01               	movlw	1
 11782  000FC6  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;main.c: 2201: PORTAbits.RA0 = 0;
 11786  000FC8  9080               	bcf	3968,0,c	;volatile
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;main.c: 2202: bOn = 0;
 11790  000FCA  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11791  000FCC                     l14406:
 11792                           
 11793                           ;main.c: 2203: }
 11794                           ;main.c: 2205: if ( val & 0x04 ) {
 11795  000FCC  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11796  000FCE  D61D               	goto	l14152
 11797  000FD0  D132               	goto	l14504
 11798  000FD2                     l14412:
 11799                           
 11800                           ; BSR set to: 0
 11801  000FD2  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 11802                           
 11803                           ; Switch size 1, requested type "space"
 11804                           ; Number of cases is 10, Range of values is 24 to 33
 11805                           ; switch strategies available:
 11806                           ; Name         Instructions Cycles
 11807                           ; simple_byte           31    16 (average)
 11808                           ;	Chosen strategy is simple_byte
 11809  000FD4  0A18               	xorlw	24	; case 24
 11810  000FD6  E101 D65B          	bz	l14170
 11811  000FDA  0A01               	xorlw	1	; case 25
 11812  000FDC  E101 D680          	bz	l14194
 11813  000FE0  0A03               	xorlw	3	; case 26
 11814  000FE2  E101 D6BA          	bz	l14218
 11815  000FE6  0A01               	xorlw	1	; case 27
 11816  000FE8  E101 D6DF          	bz	l14242
 11817  000FEC  0A07               	xorlw	7	; case 28
 11818  000FEE  E101 D704          	bz	l14266
 11819  000FF2  0A01               	xorlw	1	; case 29
 11820  000FF4  E101 D729          	bz	l14290
 11821  000FF8  0A03               	xorlw	3	; case 30
 11822  000FFA  E101 D74E          	bz	l14314
 11823  000FFE  0A01               	xorlw	1	; case 31
 11824  001000  E101 D773          	bz	l14338
 11825  001004  0A3F               	xorlw	63	; case 32
 11826  001006  E099               	bz	l14362
 11827  001008  0A01               	xorlw	1	; case 33
 11828  00100A  E0BD               	bz	l14386
 11829  00100C  D114               	goto	l14504
 11830  00100E                     l14414:
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;main.c: 2217: else if ( ( reg >= 34 ) &&
 11834                           ;main.c: 2218: ( reg <= 45 ) ) {
 11835  00100E  0E21               	movlw	33
 11836  001010  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11837  001012  D111               	goto	l14504
 11838                           
 11839                           ; BSR set to: 0
 11840  001014  0E2E               	movlw	46
 11841  001016  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11842  001018  D10E               	goto	l14504
 11843  00101A  EF46  F003         	goto	L35
 11844  00101E                     l14424:
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;main.c: 2226: else if ( 1 == vscp_page_select ) {
 11848  00101E  0452               	decf	_vscp_page_select,w,c
 11849  001020  1053               	iorwf	_vscp_page_select+1,w,c
 11850  001022  E001 D0F3          	bnz	l14492
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;main.c: 2229: if ( (reg >= 0u ) &&
 11854                           ;main.c: 2230: (reg <= 19u ) ) {
 11855  001026  0E14               	movlw	20
 11856  001028  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11857  00102A  D0BB               	goto	l14458
 11858                           
 11859                           ; BSR set to: 0
 11860                           ;main.c: 2233: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11861  00102C  EC55  F023         	call	_Busy_eep	;wreg free
 11862  001030  0E71               	movlw	113
 11863  001032  D927               	call	PL2	;call to abstracted procedure
 11864  001034  EC28  F021         	call	_Write_b_eep	;wreg free
 11865                           
 11866                           ;main.c: 2234: rv = Read_b_eep(0x43 + 46 + reg);
 11867  001038  D934               	call	PL10	;call to abstracted procedure
 11868  00103A  EC21  F023         	call	_Read_b_eep	;wreg free
 11869  00103E  0100               	movlb	0	; () banked
 11870  001040  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11871                           
 11872                           ;main.c: 2238: switch ( reg ) {
 11873  001042  D096               	goto	l14456
 11874  001044                     l14434:
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 2241: channel_pulse_timer[ 0 ] =
 11878                           ;main.c: 2242: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11879                           ;main.c: 2244: Read_b_eep(0x43 + 46 + 1u);
 11880  001044  6A09               	clrf	?_Read_b_eep+1,c
 11881  001046  0E72               	movlw	114
 11882  001048  6E08               	movwf	?_Read_b_eep,c
 11883  00104A  EC21  F023         	call	_Read_b_eep	;wreg free
 11884  00104E  0100               	movlb	0	; () banked
 11885  001050  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11886  001052  6A09               	clrf	?_Read_b_eep+1,c
 11887  001054  0E71               	movlw	113
 11888  001056  6E08               	movwf	?_Read_b_eep,c
 11889  001058  EC21  F023         	call	_Read_b_eep	;wreg free
 11890  00105C  D91B               	call	PL6	;call to abstracted procedure
 11891  00105E  D945               	call	PL82	;call to abstracted procedure
 11892                           
 11893                           ;main.c: 2246: break;
 11894  001060  D0EA               	goto	l14504
 11895  001062                     l14436:
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 2249: channel_pulse_timer[ 1 ] =
 11899                           ;main.c: 2250: Read_b_eep(0x43 + 46 + 2u) * 256 +
 11900                           ;main.c: 2252: Read_b_eep(0x43 + 46 + 3u);
 11901  001062  6A09               	clrf	?_Read_b_eep+1,c
 11902  001064  0E74               	movlw	116
 11903  001066  6E08               	movwf	?_Read_b_eep,c
 11904  001068  EC21  F023         	call	_Read_b_eep	;wreg free
 11905  00106C  0100               	movlb	0	; () banked
 11906  00106E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11907  001070  6A09               	clrf	?_Read_b_eep+1,c
 11908  001072  0E73               	movlw	115
 11909  001074  6E08               	movwf	?_Read_b_eep,c
 11910  001076  EC21  F023         	call	_Read_b_eep	;wreg free
 11911  00107A  D90C               	call	PL6	;call to abstracted procedure
 11912  00107C  D928               	call	PL72	;call to abstracted procedure
 11913                           
 11914                           ;main.c: 2254: break;
 11915  00107E  D0DB               	goto	l14504
 11916  001080                     l14438:
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;main.c: 2257: channel_pulse_timer[ 2 ] =
 11920                           ;main.c: 2258: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11921                           ;main.c: 2260: Read_b_eep(0x43 + 46 + 5u);
 11922  001080  6A09               	clrf	?_Read_b_eep+1,c
 11923  001082  0E76               	movlw	118
 11924  001084  6E08               	movwf	?_Read_b_eep,c
 11925  001086  EC21  F023         	call	_Read_b_eep	;wreg free
 11926  00108A  0100               	movlb	0	; () banked
 11927  00108C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11928  00108E  6A09               	clrf	?_Read_b_eep+1,c
 11929  001090  0E75               	movlw	117
 11930  001092  6E08               	movwf	?_Read_b_eep,c
 11931  001094  EC21  F023         	call	_Read_b_eep	;wreg free
 11932  001098  D8FD               	call	PL6	;call to abstracted procedure
 11933  00109A  D935               	call	PL86	;call to abstracted procedure
 11934                           
 11935                           ;main.c: 2262: break;
 11936  00109C  D0CC               	goto	l14504
 11937  00109E                     l14440:
 11938                           
 11939                           ; BSR set to: 0
 11940                           ;main.c: 2265: channel_pulse_timer[ 3 ] =
 11941                           ;main.c: 2266: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11942                           ;main.c: 2268: Read_b_eep(0x43 + 46 + 7u);
 11943  00109E  6A09               	clrf	?_Read_b_eep+1,c
 11944  0010A0  0E78               	movlw	120
 11945  0010A2  6E08               	movwf	?_Read_b_eep,c
 11946  0010A4  EC21  F023         	call	_Read_b_eep	;wreg free
 11947  0010A8  0100               	movlb	0	; () banked
 11948  0010AA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11949  0010AC  6A09               	clrf	?_Read_b_eep+1,c
 11950  0010AE  0E77               	movlw	119
 11951  0010B0  6E08               	movwf	?_Read_b_eep,c
 11952  0010B2  EC21  F023         	call	_Read_b_eep	;wreg free
 11953  0010B6  D8EE               	call	PL6	;call to abstracted procedure
 11954  0010B8  D911               	call	PL74	;call to abstracted procedure
 11955                           
 11956                           ;main.c: 2270: break;
 11957  0010BA  D0BD               	goto	l14504
 11958  0010BC                     l14442:
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;main.c: 2273: channel_pulse_timer[ 4 ] =
 11962                           ;main.c: 2274: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11963                           ;main.c: 2276: Read_b_eep(0x43 + 46 + 9u);
 11964  0010BC  6A09               	clrf	?_Read_b_eep+1,c
 11965  0010BE  0E7A               	movlw	122
 11966  0010C0  6E08               	movwf	?_Read_b_eep,c
 11967  0010C2  EC21  F023         	call	_Read_b_eep	;wreg free
 11968  0010C6  0100               	movlb	0	; () banked
 11969  0010C8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11970  0010CA  6A09               	clrf	?_Read_b_eep+1,c
 11971  0010CC  0E79               	movlw	121
 11972  0010CE  6E08               	movwf	?_Read_b_eep,c
 11973  0010D0  EC21  F023         	call	_Read_b_eep	;wreg free
 11974  0010D4  D8DF               	call	PL6	;call to abstracted procedure
 11975  0010D6  D910               	call	PL84	;call to abstracted procedure
 11976                           
 11977                           ;main.c: 2278: break;
 11978  0010D8  D0AE               	goto	l14504
 11979  0010DA                     l14444:
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;main.c: 2281: channel_pulse_timer[ 5 ] =
 11983                           ;main.c: 2282: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11984                           ;main.c: 2284: Read_b_eep(0x43 + 46 + 11u);
 11985  0010DA  6A09               	clrf	?_Read_b_eep+1,c
 11986  0010DC  0E7C               	movlw	124
 11987  0010DE  6E08               	movwf	?_Read_b_eep,c
 11988  0010E0  EC21  F023         	call	_Read_b_eep	;wreg free
 11989  0010E4  0100               	movlb	0	; () banked
 11990  0010E6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11991  0010E8  6A09               	clrf	?_Read_b_eep+1,c
 11992  0010EA  0E7B               	movlw	123
 11993  0010EC  6E08               	movwf	?_Read_b_eep,c
 11994  0010EE  EC21  F023         	call	_Read_b_eep	;wreg free
 11995  0010F2  D8D0               	call	PL6	;call to abstracted procedure
 11996  0010F4  D916               	call	PL90	;call to abstracted procedure
 11997                           
 11998                           ;main.c: 2286: break;
 11999  0010F6  D09F               	goto	l14504
 12000  0010F8                     l14446:
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;main.c: 2289: channel_pulse_timer[ 6 ] =
 12004                           ;main.c: 2290: Read_b_eep(0x43 + 46 + 12u) * 256 +
 12005                           ;main.c: 2292: Read_b_eep(0x43 + 46 + 13u);
 12006  0010F8  6A09               	clrf	?_Read_b_eep+1,c
 12007  0010FA  0E7E               	movlw	126
 12008  0010FC  6E08               	movwf	?_Read_b_eep,c
 12009  0010FE  EC21  F023         	call	_Read_b_eep	;wreg free
 12010  001102  0100               	movlb	0	; () banked
 12011  001104  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12012  001106  6A09               	clrf	?_Read_b_eep+1,c
 12013  001108  0E7D               	movlw	125
 12014  00110A  6E08               	movwf	?_Read_b_eep,c
 12015  00110C  EC21  F023         	call	_Read_b_eep	;wreg free
 12016  001110  D8C1               	call	PL6	;call to abstracted procedure
 12017  001112  D8D6               	call	PL70	;call to abstracted procedure
 12018                           
 12019                           ;main.c: 2294: break;
 12020  001114  D090               	goto	l14504
 12021  001116                     l14448:
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;main.c: 2297: channel_pulse_timer[ 7 ] =
 12025                           ;main.c: 2298: Read_b_eep(0x43 + 46 + 14u) * 256 +
 12026                           ;main.c: 2300: Read_b_eep(0x43 + 46 + 15u);
 12027  001116  6A09               	clrf	?_Read_b_eep+1,c
 12028  001118  0E80               	movlw	128
 12029  00111A  6E08               	movwf	?_Read_b_eep,c
 12030  00111C  EC21  F023         	call	_Read_b_eep	;wreg free
 12031  001120  0100               	movlb	0	; () banked
 12032  001122  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12033  001124  6A09               	clrf	?_Read_b_eep+1,c
 12034  001126  0E7F               	movlw	127
 12035  001128  6E08               	movwf	?_Read_b_eep,c
 12036  00112A  EC21  F023         	call	_Read_b_eep	;wreg free
 12037  00112E  D8B2               	call	PL6	;call to abstracted procedure
 12038  001130  D8F1               	call	PL88	;call to abstracted procedure
 12039                           
 12040                           ;main.c: 2302: break;
 12041  001132  D081               	goto	l14504
 12042  001134                     l14450:
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;main.c: 2305: channel_pulse_timer[ 8 ] =
 12046                           ;main.c: 2306: Read_b_eep(0x43 + 46 + 16u) * 256 +
 12047                           ;main.c: 2308: Read_b_eep(0x43 + 46 + 17u);
 12048  001134  6A09               	clrf	?_Read_b_eep+1,c
 12049  001136  0E82               	movlw	130
 12050  001138  6E08               	movwf	?_Read_b_eep,c
 12051  00113A  EC21  F023         	call	_Read_b_eep	;wreg free
 12052  00113E  0100               	movlb	0	; () banked
 12053  001140  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12054  001142  6A09               	clrf	?_Read_b_eep+1,c
 12055  001144  0E81               	movlw	129
 12056  001146  6E08               	movwf	?_Read_b_eep,c
 12057  001148  EC21  F023         	call	_Read_b_eep	;wreg free
 12058  00114C  D8A3               	call	PL6	;call to abstracted procedure
 12059  00114E  D8F7               	call	PL96	;call to abstracted procedure
 12060                           
 12061                           ;main.c: 2310: break;
 12062  001150  D072               	goto	l14504
 12063  001152                     l14452:
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;main.c: 2313: channel_pulse_timer[ 9 ] =
 12067                           ;main.c: 2314: Read_b_eep(0x43 + 46 + 18u) * 256 +
 12068                           ;main.c: 2316: Read_b_eep(0x43 + 46 + 19u);
 12069  001152  6A09               	clrf	?_Read_b_eep+1,c
 12070  001154  0E84               	movlw	132
 12071  001156  6E08               	movwf	?_Read_b_eep,c
 12072  001158  EC21  F023         	call	_Read_b_eep	;wreg free
 12073  00115C  0100               	movlb	0	; () banked
 12074  00115E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12075  001160  6A09               	clrf	?_Read_b_eep+1,c
 12076  001162  0E83               	movlw	131
 12077  001164  6E08               	movwf	?_Read_b_eep,c
 12078  001166  EC21  F023         	call	_Read_b_eep	;wreg free
 12079  00116A  D894               	call	PL6	;call to abstracted procedure
 12080  00116C  D8E1               	call	PL94	;call to abstracted procedure
 12081                           
 12082                           ;main.c: 2318: break;
 12083  00116E  D063               	goto	l14504
 12084  001170                     l14456:
 12085                           
 12086                           ; BSR set to: 0
 12087  001170  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12088                           
 12089                           ; Switch size 1, requested type "space"
 12090                           ; Number of cases is 10, Range of values is 1 to 19
 12091                           ; switch strategies available:
 12092                           ; Name         Instructions Cycles
 12093                           ; simple_byte           31    16 (average)
 12094                           ;	Chosen strategy is simple_byte
 12095  001172  0A01               	xorlw	1	; case 1
 12096  001174  E101 D766          	bz	l14434
 12097  001178  0A02               	xorlw	2	; case 3
 12098  00117A  E101 D772          	bz	l14436
 12099  00117E  0A06               	xorlw	6	; case 5
 12100  001180  E101 D77E          	bz	l14438
 12101  001184  0A02               	xorlw	2	; case 7
 12102  001186  E08B               	bz	l14440
 12103  001188  0A0E               	xorlw	14	; case 9
 12104  00118A  E098               	bz	l14442
 12105  00118C  0A02               	xorlw	2	; case 11
 12106  00118E  E0A5               	bz	l14444
 12107  001190  0A06               	xorlw	6	; case 13
 12108  001192  E0B2               	bz	l14446
 12109  001194  0A02               	xorlw	2	; case 15
 12110  001196  E0BF               	bz	l14448
 12111  001198  0A1E               	xorlw	30	; case 17
 12112  00119A  E0CC               	bz	l14450
 12113  00119C  0A02               	xorlw	2	; case 19
 12114  00119E  E0D9               	bz	l14452
 12115  0011A0  D04A               	goto	l14504
 12116  0011A2                     l14458:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;main.c: 2326: else if ( ( reg >= 20u ) &&
 12120                           ;main.c: 2327: ( reg <= 39u ) ) {
 12121  0011A2  0E13               	movlw	19
 12122  0011A4  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 12123  0011A6  D047               	goto	l14504
 12124                           
 12125                           ; BSR set to: 0
 12126  0011A8  0E28               	movlw	40
 12127  0011AA  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12128  0011AC  D044               	goto	l14504
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;main.c: 2330: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 12132  0011AE  EC55  F023         	call	_Busy_eep	;wreg free
 12133  0011B2  0E71               	movlw	113
 12134  0011B4  D866               	call	PL2	;call to abstracted procedure
 12135  0011B6  EC28  F021         	call	_Write_b_eep	;wreg free
 12136                           
 12137                           ;main.c: 2331: rv = Read_b_eep(0x43 + 46 + reg);
 12138  0011BA  D873               	call	PL10	;call to abstracted procedure
 12139  0011BC  EC21  F023         	call	_Read_b_eep	;wreg free
 12140  0011C0  0100               	movlb	0	; () banked
 12141  0011C2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12142                           
 12143                           ; BSR set to: 0
 12144                           
 12145                           ;main.c: 2333: switch ( reg ) {
 12146  0011C4  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12147                           
 12148                           ; Switch size 1, requested type "space"
 12149                           ; Number of cases is 10, Range of values is 21 to 39
 12150                           ; switch strategies available:
 12151                           ; Name         Instructions Cycles
 12152                           ; simple_byte           31    16 (average)
 12153                           ;	Chosen strategy is simple_byte
 12154  0011C6  0A15               	xorlw	21	; case 21
 12155  0011C8  E102 EF3F  F004    	bz	l13972
 12156  0011CE  0A02               	xorlw	2	; case 23
 12157  0011D0  E102 EF76  F004    	bz	l13992
 12158  0011D6  0A0E               	xorlw	14	; case 25
 12159  0011D8  E102 EFA1  F004    	bz	l14012
 12160  0011DE  0A02               	xorlw	2	; case 27
 12161  0011E0  E102 EFD6  F004    	bz	l14032
 12162  0011E6  0A06               	xorlw	6	; case 29
 12163  0011E8  E101 D415          	bz	l14052
 12164  0011EC  0A02               	xorlw	2	; case 31
 12165  0011EE  E101 D444          	bz	l14072
 12166  0011F2  0A3E               	xorlw	62	; case 33
 12167  0011F4  E101 D473          	bz	l14092
 12168  0011F8  0A02               	xorlw	2	; case 35
 12169  0011FA  E101 D4A2          	bz	l14112
 12170  0011FE  0A06               	xorlw	6	; case 37
 12171  001200  E101 D4D1          	bz	l14132
 12172  001204  0A02               	xorlw	2	; case 39
 12173  001206  E101 D500          	bz	l14152
 12174  00120A  D015               	goto	l14504
 12175  00120C                     l14492:
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;main.c: 2424: else if ( 2 == vscp_page_select ) {
 12179  00120C  5052               	movf	_vscp_page_select,w,c
 12180  00120E  0A02               	xorlw	2
 12181  001210  1053               	iorwf	_vscp_page_select+1,w,c
 12182  001212  E111               	bnz	l14504
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;main.c: 2426: if ( reg < (0 + 8 * 8) ) {
 12186  001214  0E40               	movlw	64
 12187  001216  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12188  001218  D00E               	goto	l14504
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;main.c: 2427: (Busy_eep(), Write_b_eep(0x43 + 0 + 46 + 40u + reg,val));
 12192  00121A  EC55  F023         	call	_Busy_eep	;wreg free
 12193  00121E  0E99               	movlw	153
 12194  001220  D830               	call	PL2	;call to abstracted procedure
 12195  001222  EC28  F021         	call	_Write_b_eep	;wreg free
 12196                           
 12197                           ;main.c: 2432: calculateSetFilterMask();
 12198  001226  ECEF  F011         	call	_calculateSetFilterMask	;wreg free
 12199                           
 12200                           ;main.c: 2433: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 12201  00122A  0E99               	movlw	153
 12202  00122C  D842               	call	PL12	;call to abstracted procedure
 12203  00122E  EC21  F023         	call	_Read_b_eep	;wreg free
 12204  001232                     L32:
 12205  001232  0100               	movlb	0	; () banked
 12206  001234                     L33:
 12207  001234  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12208  001236                     l14504:
 12209                           
 12210                           ;main.c: 2438: }
 12211                           ;main.c: 2440: }
 12212                           ;main.c: 2446: if ( bInfoEvent ) {
 12213  001236  0100               	movlb	0	; () banked
 12214  001238  51DA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
 12215  00123A  E021               	bz	l14516
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;main.c: 2448: unsigned char val;
 12219                           ;main.c: 2449: val = Read_b_eep(0x43 + 14 + ( reg - 14 ));
 12220  00123C  0E43               	movlw	67
 12221  00123E  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12222  001240  6E08               	movwf	?_Read_b_eep,c
 12223  001242  6A09               	clrf	?_Read_b_eep+1,c
 12224  001244  0E00               	movlw	0
 12225  001246  2209               	addwfc	?_Read_b_eep+1,f,c
 12226  001248  EC21  F023         	call	_Read_b_eep	;wreg free
 12227  00124C  0100               	movlb	0	; () banked
 12228  00124E  6FD9               	movwf	vscp_writeAppReg@val_1273& (0+255),b
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;main.c: 2453: if ( bOn ) {
 12232  001250  51DC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
 12233  001252  E00B               	bz	l852
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;main.c: 2455: if ( val & 0x08 ) {
 12237  001254  A7D9               	btfss	vscp_writeAppReg@val_1273& (0+255),3,b
 12238  001256  D013               	goto	l14516
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;main.c: 2456: SendInformationEvent( reg - 14,
 12242                           ;main.c: 2457: 20,
 12243                           ;main.c: 2458: 3 );
 12244  001258  0E14               	movlw	20
 12245  00125A  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12246  00125C  0E03               	movlw	3
 12247  00125E  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12248  001260  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12249  001262  0FF2               	addlw	242
 12250  001264  EC54  F020         	call	_SendInformationEvent
 12251  001268  D00A               	goto	l14516
 12252  00126A                     l852:
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;main.c: 2462: else {
 12256                           ;main.c: 2464: if ( val & 0x10 ) {
 12257  00126A  A9D9               	btfss	vscp_writeAppReg@val_1273& (0+255),4,b
 12258  00126C  D008               	goto	l14516
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 2465: SendInformationEvent( reg - 14,
 12262                           ;main.c: 2466: 20,
 12263                           ;main.c: 2467: 4 );
 12264  00126E  0E14               	movlw	20
 12265  001270  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12266  001272  0E04               	movlw	4
 12267  001274  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12268  001276  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12269  001278  0FF2               	addlw	242
 12270  00127A  EC54  F020         	call	_SendInformationEvent
 12271  00127E                     l14516:
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;main.c: 2468: }
 12275                           ;main.c: 2470: }
 12276                           ;main.c: 2471: }
 12277                           ;main.c: 2473: return rv;
 12278  00127E  51DB               	movf	vscp_writeAppReg@rv& (0+255),w,b
 12279                           
 12280                           ; BSR set to: 0
 12281  001280  0012               	return	
 12282  001282                     __end_of_vscp_writeAppReg:
 12283                           	opt stack 0
 12284  001282                     PL2:
 12285                           	opt stack 20
 12286  001282  0100               	movlb	0	; () banked
 12287  001284  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12288  001286  6E08               	movwf	?_Write_b_eep,c
 12289  001288  6A09               	clrf	?_Write_b_eep+1,c
 12290  00128A  0E00               	movlw	0
 12291  00128C  2209               	addwfc	?_Write_b_eep+1,f,c
 12292  00128E  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 12293  001292  0C00               	retlw	0
 12294  001294                     __end_ofPL2:
 12295                           	opt stack 0
 12296  001294                     PL6:
 12297                           	opt stack 20
 12298  001294  0100               	movlb	0	; () banked
 12299  001296  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 12300  001298  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 12301  00129A  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 12302  00129C  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 12303  00129E  0101               	movlb	1	; () banked
 12304  0012A0  0012               	return	
 12305  0012A2                     __end_ofPL6:
 12306                           	opt stack 0
 12307  0012A2                     PL10:
 12308                           	opt stack 20
 12309  0012A2  0E71               	movlw	113
 12310  0012A4  0100               	movlb	0	; () banked
 12311  0012A6  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12312  0012A8  6E08               	movwf	?_Read_b_eep,c
 12313  0012AA  6A09               	clrf	?_Read_b_eep+1,c
 12314  0012AC  0E00               	movlw	0
 12315  0012AE  2209               	addwfc	?_Read_b_eep+1,f,c
 12316  0012B0  0C00               	retlw	0
 12317  0012B2                     __end_ofPL10:
 12318                           	opt stack 0
 12319  0012B2                     PL12:
 12320                           	opt stack 20
 12321  0012B2  0100               	movlb	0	; () banked
 12322  0012B4  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12323  0012B6  6E08               	movwf	?_Read_b_eep,c
 12324  0012B8  6A09               	clrf	?_Read_b_eep+1,c
 12325  0012BA  0E00               	movlw	0
 12326  0012BC  2209               	addwfc	?_Read_b_eep+1,f,c
 12327  0012BE  0C00               	retlw	0
 12328  0012C0                     __end_ofPL12:
 12329                           	opt stack 0
 12330  0012C0                     PL70:
 12331                           	opt stack 20
 12332  0012C0  6F0C               	movwf	(_channel_pulse_timer+12)& (0+255),b
 12333  0012C2  0100               	movlb	0	; () banked
 12334  0012C4  0E00               	movlw	0
 12335  0012C6  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12336  0012C8  0101               	movlb	1	; () banked
 12337  0012CA  6F0D               	movwf	(_channel_pulse_timer+13)& (0+255),b
 12338  0012CC  0012               	return	
 12339  0012CE                     __end_ofPL70:
 12340                           	opt stack 0
 12341  0012CE                     PL72:
 12342                           	opt stack 20
 12343  0012CE  6F02               	movwf	(_channel_pulse_timer+2)& (0+255),b
 12344  0012D0  0100               	movlb	0	; () banked
 12345  0012D2  0E00               	movlw	0
 12346  0012D4  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12347  0012D6  0101               	movlb	1	; () banked
 12348  0012D8  6F03               	movwf	(_channel_pulse_timer+3)& (0+255),b
 12349  0012DA  0012               	return	
 12350  0012DC                     __end_ofPL72:
 12351                           	opt stack 0
 12352  0012DC                     PL74:
 12353                           	opt stack 20
 12354  0012DC  6F06               	movwf	(_channel_pulse_timer+6)& (0+255),b
 12355  0012DE  0100               	movlb	0	; () banked
 12356  0012E0  0E00               	movlw	0
 12357  0012E2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12358  0012E4  0101               	movlb	1	; () banked
 12359  0012E6  6F07               	movwf	(_channel_pulse_timer+7)& (0+255),b
 12360  0012E8  0012               	return	
 12361  0012EA                     __end_ofPL74:
 12362                           	opt stack 0
 12363  0012EA                     PL82:
 12364                           	opt stack 20
 12365  0012EA  6F00               	movwf	_channel_pulse_timer& (0+255),b
 12366  0012EC  0100               	movlb	0	; () banked
 12367  0012EE  0E00               	movlw	0
 12368  0012F0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12369  0012F2  0101               	movlb	1	; () banked
 12370  0012F4  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
 12371  0012F6  0012               	return	
 12372  0012F8                     __end_ofPL82:
 12373                           	opt stack 0
 12374  0012F8                     PL84:
 12375                           	opt stack 20
 12376  0012F8  6F08               	movwf	(_channel_pulse_timer+8)& (0+255),b
 12377  0012FA  0100               	movlb	0	; () banked
 12378  0012FC  0E00               	movlw	0
 12379  0012FE  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12380  001300  0101               	movlb	1	; () banked
 12381  001302  6F09               	movwf	(_channel_pulse_timer+9)& (0+255),b
 12382  001304  0012               	return	
 12383  001306                     __end_ofPL84:
 12384                           	opt stack 0
 12385  001306                     PL86:
 12386                           	opt stack 20
 12387  001306  6F04               	movwf	(_channel_pulse_timer+4)& (0+255),b
 12388  001308  0100               	movlb	0	; () banked
 12389  00130A  0E00               	movlw	0
 12390  00130C  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12391  00130E  0101               	movlb	1	; () banked
 12392  001310  6F05               	movwf	(_channel_pulse_timer+5)& (0+255),b
 12393  001312  0012               	return	
 12394  001314                     __end_ofPL86:
 12395                           	opt stack 0
 12396  001314                     PL88:
 12397                           	opt stack 20
 12398  001314  6F0E               	movwf	(_channel_pulse_timer+14)& (0+255),b
 12399  001316  0100               	movlb	0	; () banked
 12400  001318  0E00               	movlw	0
 12401  00131A  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12402  00131C  0101               	movlb	1	; () banked
 12403  00131E  6F0F               	movwf	(_channel_pulse_timer+15)& (0+255),b
 12404  001320  0012               	return	
 12405  001322                     __end_ofPL88:
 12406                           	opt stack 0
 12407  001322                     PL90:
 12408                           	opt stack 20
 12409  001322  6F0A               	movwf	(_channel_pulse_timer+10)& (0+255),b
 12410  001324  0100               	movlb	0	; () banked
 12411  001326  0E00               	movlw	0
 12412  001328  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12413  00132A  0101               	movlb	1	; () banked
 12414  00132C  6F0B               	movwf	(_channel_pulse_timer+11)& (0+255),b
 12415  00132E  0012               	return	
 12416  001330                     __end_ofPL90:
 12417                           	opt stack 0
 12418  001330                     PL94:
 12419                           	opt stack 20
 12420  001330  6F12               	movwf	(_channel_pulse_timer+18)& (0+255),b
 12421  001332  0100               	movlb	0	; () banked
 12422  001334  0E00               	movlw	0
 12423  001336  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12424  001338  0101               	movlb	1	; () banked
 12425  00133A  6F13               	movwf	(_channel_pulse_timer+19)& (0+255),b
 12426  00133C  0012               	return	
 12427  00133E                     __end_ofPL94:
 12428                           	opt stack 0
 12429  00133E                     PL96:
 12430                           	opt stack 20
 12431  00133E  6F10               	movwf	(_channel_pulse_timer+16)& (0+255),b
 12432  001340  0100               	movlb	0	; () banked
 12433  001342  0E00               	movlw	0
 12434  001344  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12435  001346  0101               	movlb	1	; () banked
 12436  001348  6F11               	movwf	(_channel_pulse_timer+17)& (0+255),b
 12437  00134A  0012               	return	
 12438  00134C                     __end_ofPL96:
 12439                           	opt stack 0
 12440                           tblptru	equ	0xFF8
 12441                           tblptrh	equ	0xFF7
 12442                           tblptrl	equ	0xFF6
 12443                           tablat	equ	0xFF5
 12444                           prodh	equ	0xFF4
 12445                           prodl	equ	0xFF3
 12446                           intcon	equ	0xFF2
 12447                           intcon2	equ	0xFF1
 12448                           postinc0	equ	0xFEE
 12449                           wreg	equ	0xFE8
 12450                           indf1	equ	0xFE7
 12451                           fsr1h	equ	0xFE2
 12452                           fsr1l	equ	0xFE1
 12453                           indf2	equ	0xFDF
 12454                           postinc2	equ	0xFDE
 12455                           postdec2	equ	0xFDD
 12456                           plusw2	equ	0xFDB
 12457                           fsr2h	equ	0xFDA
 12458                           fsr2l	equ	0xFD9
 12459                           status	equ	0xFD8
 12460                           
 12461 ;; *************** function _calculateSetFilterMask *****************
 12462 ;; Defined at:
 12463 ;;		line 3618 in file "../main.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;		None
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;  rowfilter       4   61[COMRAM] unsigned long 
 12468 ;;  filter          4   57[COMRAM] unsigned long 
 12469 ;;  mask            4   53[COMRAM] unsigned long 
 12470 ;;  rowmask         4   48[COMRAM] unsigned long 
 12471 ;;  i               1   66[COMRAM] unsigned char 
 12472 ;;  j               1   65[COMRAM] unsigned char 
 12473 ;;  lastOID         1   52[COMRAM] unsigned char 
 12474 ;; Return value:  Size  Location     Type
 12475 ;;		None               void
 12476 ;; Registers used:
 12477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12483 ;;      Params:         0       0       0       0       0       0       0
 12484 ;;      Locals:        19       0       0       0       0       0       0
 12485 ;;      Temps:         31       0       0       0       0       0       0
 12486 ;;      Totals:        50       0       0       0       0       0       0
 12487 ;;Total ram usage:       50 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    3
 12490 ;; This function calls:
 12491 ;;		_ECANSetOperationMode
 12492 ;;		__CANIDToRegs
 12493 ;;		_Read_b_eep
 12494 ;; This function is called by:
 12495 ;;		_vscp_writeAppReg
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text28
 12500  0023DE                     __ptext28:
 12501                           	opt stack 0
 12502  0023DE                     _calculateSetFilterMask:
 12503                           	opt stack 23
 12504                           
 12505                           ;main.c: 3619: uint8_t i,j;
 12506                           ;main.c: 3620: uint8_t lastOID;
 12507                           ;main.c: 3621: uint32_t rowmask;
 12508                           ;main.c: 3622: uint32_t rowfilter;
 12509                           ;main.c: 3625: uint32_t mask = 0xffffffff;
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;incstack = 0
 12513                           ;incstack = 0
 12514  0023DE  6836               	setf	calculateSetFilterMask@mask,c
 12515  0023E0  6837               	setf	calculateSetFilterMask@mask+1,c
 12516  0023E2  6838               	setf	calculateSetFilterMask@mask+2,c
 12517  0023E4  6839               	setf	calculateSetFilterMask@mask+3,c
 12518                           
 12519                           ;main.c: 3626: uint32_t filter = 0;
 12520  0023E6  6A3A               	clrf	calculateSetFilterMask@filter,c
 12521  0023E8  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 12522  0023EA  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 12523  0023EC  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 12524                           
 12525                           ;main.c: 3629: for ( i=0; i < 8; i++ ) {
 12526  0023EE  6A43               	clrf	calculateSetFilterMask@i,c
 12527  0023F0                     l14526:
 12528                           
 12529                           ;main.c: 3632: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 12530  0023F0  5043               	movf	calculateSetFilterMask@i,w,c
 12531  0023F2  D972               	call	PL22	;call to abstracted procedure
 12532  0023F4  0E44               	movlw	68
 12533  0023F6  2412               	addwf	??_calculateSetFilterMask,w,c
 12534  0023F8  6E08               	movwf	?_Read_b_eep,c
 12535  0023FA  0E00               	movlw	0
 12536  0023FC  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12537  0023FE  6E09               	movwf	?_Read_b_eep+1,c
 12538  002400  EC21  F023         	call	_Read_b_eep	;wreg free
 12539  002404  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12540  002406  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 12541  002408  D11A               	goto	l14570
 12542                           
 12543                           ;main.c: 3641: rowmask =
 12544                           ;main.c: 3643: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 12545                           ;main.c: 3645: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 12546                           ;main.c: 3647: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 12547                           ;main.c: 3649: 0xff;
 12548  00240A  5043               	movf	calculateSetFilterMask@i,w,c
 12549  00240C  D965               	call	PL22	;call to abstracted procedure
 12550  00240E  0E47               	movlw	71
 12551  002410  2412               	addwf	??_calculateSetFilterMask,w,c
 12552  002412  6E08               	movwf	?_Read_b_eep,c
 12553  002414  0E00               	movlw	0
 12554  002416  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12555  002418  6E09               	movwf	?_Read_b_eep+1,c
 12556  00241A  EC21  F023         	call	_Read_b_eep	;wreg free
 12557  00241E  D968               	call	PL24	;call to abstracted procedure
 12558  002420  0E45               	movlw	69
 12559  002422  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12560  002424  6E08               	movwf	?_Read_b_eep,c
 12561  002426  0E00               	movlw	0
 12562  002428  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12563  00242A  6E09               	movwf	?_Read_b_eep+1,c
 12564  00242C  EC21  F023         	call	_Read_b_eep	;wreg free
 12565  002430  D934               	call	PL20	;call to abstracted procedure
 12566  002432  EC21  F023         	call	_Read_b_eep	;wreg free
 12567  002436  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12568  002438  0E02               	movlw	2
 12569  00243A  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12570  00243C  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12571  002440  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12572  002442  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12573  002444  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12574  002446  0E17               	movlw	23
 12575  002448                     u19295:
 12576  002448  90D8               	bcf	status,0,c
 12577  00244A  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 12578  00244C  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 12579  00244E  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 12580  002450  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 12581  002452  2EE8               	decfsz	wreg,f,c
 12582  002454  D7F9               	goto	u19295
 12583  002456  501C               	movf	??_calculateSetFilterMask+10,w,c
 12584  002458  D965               	call	PL28	;call to abstracted procedure
 12585  00245A  0EFF               	movlw	255
 12586  00245C  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12587  00245E  6E31               	movwf	calculateSetFilterMask@rowmask,c
 12588  002460  502C               	movf	??_calculateSetFilterMask+26,w,c
 12589  002462  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 12590  002464  502D               	movf	??_calculateSetFilterMask+27,w,c
 12591  002466  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 12592  002468  502E               	movf	??_calculateSetFilterMask+28,w,c
 12593  00246A  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 12594                           
 12595                           ;main.c: 3650: ;
 12596                           ;main.c: 3655: rowfilter =
 12597                           ;main.c: 3657: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 12598                           ;main.c: 3659: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 12599                           ;main.c: 3661: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 12600                           ;main.c: 3664: Read_b_eep(0x43 + 8*i);
 12601  00246C  5043               	movf	calculateSetFilterMask@i,w,c
 12602  00246E  D934               	call	PL22	;call to abstracted procedure
 12603  002470  0E48               	movlw	72
 12604  002472  2412               	addwf	??_calculateSetFilterMask,w,c
 12605  002474  6E08               	movwf	?_Read_b_eep,c
 12606  002476  0E00               	movlw	0
 12607  002478  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12608  00247A  6E09               	movwf	?_Read_b_eep+1,c
 12609  00247C  EC21  F023         	call	_Read_b_eep	;wreg free
 12610  002480  D937               	call	PL24	;call to abstracted procedure
 12611  002482  0E46               	movlw	70
 12612  002484  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12613  002486  6E08               	movwf	?_Read_b_eep,c
 12614  002488  0E00               	movlw	0
 12615  00248A  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12616  00248C  6E09               	movwf	?_Read_b_eep+1,c
 12617  00248E  EC21  F023         	call	_Read_b_eep	;wreg free
 12618  002492  D903               	call	PL20	;call to abstracted procedure
 12619  002494  EC21  F023         	call	_Read_b_eep	;wreg free
 12620  002498  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12621  00249A  0E01               	movlw	1
 12622  00249C  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12623  00249E  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12624  0024A2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12625  0024A4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12626  0024A6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12627  0024A8  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 12628  0024AC  6A25               	clrf	??_calculateSetFilterMask+19,c
 12629  0024AE  6A24               	clrf	??_calculateSetFilterMask+18,c
 12630  0024B0  6A23               	clrf	??_calculateSetFilterMask+17,c
 12631  0024B2  501C               	movf	??_calculateSetFilterMask+10,w,c
 12632  0024B4  D937               	call	PL28	;call to abstracted procedure
 12633  0024B6  5043               	movf	calculateSetFilterMask@i,w,c
 12634  0024B8  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 12635  0024BA  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 12636  0024BC  90D8               	bcf	status,0,c
 12637  0024BE  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12638  0024C0  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12639  0024C2  90D8               	bcf	status,0,c
 12640  0024C4  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12641  0024C6  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12642  0024C8  90D8               	bcf	status,0,c
 12643  0024CA  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12644  0024CC  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12645  0024CE  0E43               	movlw	67
 12646  0024D0  242F               	addwf	??_calculateSetFilterMask+29,w,c
 12647  0024D2  6E08               	movwf	?_Read_b_eep,c
 12648  0024D4  0E00               	movlw	0
 12649  0024D6  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 12650  0024D8  6E09               	movwf	?_Read_b_eep+1,c
 12651  0024DA  EC21  F023         	call	_Read_b_eep	;wreg free
 12652  0024DE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12653  0024E0  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 12654  0024E2  502C               	movf	??_calculateSetFilterMask+26,w,c
 12655  0024E4  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 12656  0024E6  502D               	movf	??_calculateSetFilterMask+27,w,c
 12657  0024E8  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 12658  0024EA  502E               	movf	??_calculateSetFilterMask+28,w,c
 12659  0024EC  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 12660                           
 12661                           ;main.c: 3666: if ( 0 == i ) filter = rowfilter;
 12662  0024EE  6643               	tstfsz	calculateSetFilterMask@i,c
 12663  0024F0  D008               	goto	l14534
 12664  0024F2  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 12665  0024F6  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 12666  0024FA  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 12667  0024FE  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 12668  002502                     l14534:
 12669                           
 12670                           ;main.c: 3670: mask &= rowmask;
 12671  002502  5031               	movf	calculateSetFilterMask@rowmask,w,c
 12672  002504  1636               	andwf	calculateSetFilterMask@mask,f,c
 12673  002506  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 12674  002508  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 12675  00250A  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 12676  00250C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 12677  00250E  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 12678  002510  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 12679                           
 12680                           ;main.c: 3675: for ( j=0; j<32; j++ ) {
 12681  002512  6A42               	clrf	calculateSetFilterMask@j,c
 12682  002514                     l14542:
 12683                           
 12684                           ;main.c: 3677: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 12685  002514  5042               	movf	calculateSetFilterMask@j,w,c
 12686  002516  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 12687  00251A  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 12688  00251E  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 12689  002522  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 12690  002526  2AE8               	incf	wreg,f,c
 12691  002528  D005               	goto	u19310
 12692  00252A                     u19315:
 12693  00252A  90D8               	bcf	status,0,c
 12694  00252C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12695  00252E  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 12696  002530  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 12697  002532  3212               	rrcf	??_calculateSetFilterMask,f,c
 12698  002534                     u19310:
 12699  002534  2EE8               	decfsz	wreg,f,c
 12700  002536  D7F9               	goto	u19315
 12701  002538  0E01               	movlw	1
 12702  00253A  1612               	andwf	??_calculateSetFilterMask,f,c
 12703  00253C  5042               	movf	calculateSetFilterMask@j,w,c
 12704  00253E  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 12705  002542  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 12706  002546  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 12707  00254A  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 12708  00254E  2AE8               	incf	wreg,f,c
 12709  002550  D005               	goto	u19320
 12710  002552                     u19325:
 12711  002552  90D8               	bcf	status,0,c
 12712  002554  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 12713  002556  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 12714  002558  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12715  00255A  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 12716  00255C                     u19320:
 12717  00255C  2EE8               	decfsz	wreg,f,c
 12718  00255E  D7F9               	goto	u19325
 12719  002560  5016               	movf	??_calculateSetFilterMask+4,w,c
 12720  002562  0B01               	andlw	1
 12721  002564  1812               	xorwf	??_calculateSetFilterMask,w,c
 12722  002566  E010               	bz	l14546
 12723                           
 12724                           ;main.c: 3678: mask &= ~(1<<j);
 12725  002568  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 12726  00256C  D8FD               	call	PL106	;call to abstracted procedure
 12727  00256E  D001               	goto	u19344
 12728  002570                     u19345:
 12729  002570  D900               	call	PL110	;call to abstracted procedure
 12730  002572                     u19344:
 12731  002572  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12732  002574  D7FD               	goto	u19345
 12733  002576  1C13               	comf	??_calculateSetFilterMask+1,w,c
 12734  002578  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12735  00257A  1C14               	comf	??_calculateSetFilterMask+2,w,c
 12736  00257C  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 12737  00257E  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12738  002580  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12739  002582  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 12740  002584  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 12741  002586  D8E6               	call	PL60	;call to abstracted procedure
 12742  002588                     l14546:
 12743  002588  2A42               	incf	calculateSetFilterMask@j,f,c
 12744  00258A  0E1F               	movlw	31
 12745  00258C  6442               	cpfsgt	calculateSetFilterMask@j,c
 12746  00258E  D7C2               	goto	l14542
 12747                           
 12748                           ;main.c: 3679: }
 12749                           ;main.c: 3680: }
 12750                           ;main.c: 3686: filter &= rowfilter;
 12751  002590  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 12752  002592  163A               	andwf	calculateSetFilterMask@filter,f,c
 12753  002594  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 12754  002596  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 12755  002598  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 12756  00259A  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 12757  00259C  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 12758  00259E  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 12759                           
 12760                           ;main.c: 3694: }
 12761                           ;main.c: 3696: if (i) {
 12762                           
 12763                           ;main.c: 3689: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 12764  0025A0  5043               	movf	calculateSetFilterMask@i,w,c
 12765  0025A2  E042               	bz	l14566
 12766                           
 12767                           ;main.c: 3699: for (j = 0; j < 8; j++) {
 12768  0025A4  6A42               	clrf	calculateSetFilterMask@j,c
 12769  0025A6                     l14560:
 12770                           
 12771                           ;main.c: 3700: if ((lastOID >> i & 1)
 12772                           ;main.c: 3701: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 12773  0025A6  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12774  0025AA  5043               	movf	calculateSetFilterMask@i,w,c
 12775  0025AC  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 12776  0025AE  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 12777  0025B0  90D8               	bcf	status,0,c
 12778  0025B2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12779  0025B4  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12780  0025B6  90D8               	bcf	status,0,c
 12781  0025B8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12782  0025BA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12783  0025BC  90D8               	bcf	status,0,c
 12784  0025BE  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12785  0025C0  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12786  0025C2  0E43               	movlw	67
 12787  0025C4  2413               	addwf	??_calculateSetFilterMask+1,w,c
 12788  0025C6  6E08               	movwf	?_Read_b_eep,c
 12789  0025C8  0E00               	movlw	0
 12790  0025CA  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 12791  0025CC  6E09               	movwf	?_Read_b_eep+1,c
 12792  0025CE  EC21  F023         	call	_Read_b_eep	;wreg free
 12793  0025D2  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12794  0025D4  2A12               	incf	??_calculateSetFilterMask,f,c
 12795  0025D6  D002               	goto	u19374
 12796  0025D8                     u19375:
 12797  0025D8  90D8               	bcf	status,0,c
 12798  0025DA  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12799  0025DC                     u19374:
 12800  0025DC  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12801  0025DE  D7FC               	goto	u19375
 12802  0025E0  0E01               	movlw	1
 12803  0025E2  1615               	andwf	??_calculateSetFilterMask+3,f,c
 12804  0025E4  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 12805  0025E8  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 12806  0025EC  2A16               	incf	??_calculateSetFilterMask+4,f,c
 12807  0025EE  D002               	goto	u19384
 12808  0025F0                     u19385:
 12809  0025F0  90D8               	bcf	status,0,c
 12810  0025F2  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12811  0025F4                     u19384:
 12812  0025F4  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 12813  0025F6  D7FC               	goto	u19385
 12814  0025F8  5017               	movf	??_calculateSetFilterMask+5,w,c
 12815  0025FA  0B01               	andlw	1
 12816  0025FC  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 12817  0025FE  E010               	bz	l14564
 12818                           
 12819                           ;main.c: 3702: mask &= (1 << i);
 12820  002600  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12821  002604  D8B1               	call	PL106	;call to abstracted procedure
 12822  002606  D001               	goto	u19404
 12823  002608                     u19405:
 12824  002608  D8B4               	call	PL110	;call to abstracted procedure
 12825  00260A                     u19404:
 12826  00260A  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12827  00260C  D7FD               	goto	u19405
 12828  00260E  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 12829  002612  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 12830  002616  0E00               	movlw	0
 12831  002618  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12832  00261A  0EFF               	movlw	255
 12833  00261C  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 12834  00261E  D89A               	call	PL60	;call to abstracted procedure
 12835  002620                     l14564:
 12836  002620  2A42               	incf	calculateSetFilterMask@j,f,c
 12837  002622  0E07               	movlw	7
 12838  002624  6442               	cpfsgt	calculateSetFilterMask@j,c
 12839  002626  D7BF               	goto	l14560
 12840  002628                     l14566:
 12841                           
 12842                           ;main.c: 3703: }
 12843                           ;main.c: 3704: }
 12844                           ;main.c: 3706: lastOID = Read_b_eep(0x43 + 8 * i);
 12845  002628  5043               	movf	calculateSetFilterMask@i,w,c
 12846  00262A  D856               	call	PL22	;call to abstracted procedure
 12847  00262C  0E43               	movlw	67
 12848  00262E  2412               	addwf	??_calculateSetFilterMask,w,c
 12849  002630  6E08               	movwf	?_Read_b_eep,c
 12850  002632  0E00               	movlw	0
 12851  002634  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12852  002636  6E09               	movwf	?_Read_b_eep+1,c
 12853  002638  EC21  F023         	call	_Read_b_eep	;wreg free
 12854  00263C  6E35               	movwf	calculateSetFilterMask@lastOID,c
 12855  00263E                     l14570:
 12856  00263E  2A43               	incf	calculateSetFilterMask@i,f,c
 12857  002640  0E07               	movlw	7
 12858  002642  6443               	cpfsgt	calculateSetFilterMask@i,c
 12859  002644  D6D5               	goto	l14526
 12860                           
 12861                           ;main.c: 3712: }
 12862                           ;main.c: 3714: }
 12863                           ;main.c: 3715: }
 12864                           ;main.c: 3718: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12865  002646  0E80               	movlw	128
 12866  002648  ECCD  F022         	call	_ECANSetOperationMode
 12867                           
 12868                           ;main.c: 3721: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 12869  00264C  010F               	movlb	15	; () banked
 12870  00264E  0E0F               	movlw	15	;volatile
 12871  002650  6E09               	movwf	?__CANIDToRegs+1,c
 12872  002652  0E1C               	movlw	28	;volatile
 12873  002654  6E08               	movwf	?__CANIDToRegs,c
 12874  002656  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 12875  00265A  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 12876  00265E  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 12877  002662  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 12878  002666  0E01               	movlw	1
 12879  002668  6E0E               	movwf	?__CANIDToRegs+6,c
 12880  00266A  ECF7  F01B         	call	__CANIDToRegs	;wreg free
 12881                           
 12882                           ;main.c: 3724: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 12883  00266E  010D               	movlb	13	; () banked
 12884  002670  83D4               	bsf	212,1,b	;volatile
 12885                           
 12886                           ; BSR set to: 13
 12887  002672  010F               	movlb	15	; () banked
 12888  002674  0E0F               	movlw	15	;volatile
 12889  002676  6E09               	movwf	?__CANIDToRegs+1,c
 12890  002678  0E04               	movlw	4	;volatile
 12891  00267A  6E08               	movwf	?__CANIDToRegs,c
 12892  00267C  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 12893  002680  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 12894  002684  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 12895  002688  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 12896  00268C  0E01               	movlw	1
 12897  00268E  6E0E               	movwf	?__CANIDToRegs+6,c
 12898  002690  ECF7  F01B         	call	__CANIDToRegs	;wreg free
 12899                           
 12900                           ;main.c: 3727: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 12901  002694  0E00               	movlw	0
 12902  002696  EFCD  F022         	goto	_ECANSetOperationMode
 12903  00269A                     __end_of_calculateSetFilterMask:
 12904                           	opt stack 0
 12905  00269A                     PL20:
 12906                           	opt stack 23
 12907  00269A  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 12908  00269C  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 12909  0026A0  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 12910  0026A2  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 12911  0026A4  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 12912  0026A6  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 12913  0026AA  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 12914  0026AE  6A1D               	clrf	??_calculateSetFilterMask+11,c
 12915  0026B0  6A1C               	clrf	??_calculateSetFilterMask+10,c
 12916  0026B2  5043               	movf	calculateSetFilterMask@i,w,c
 12917  0026B4  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 12918  0026B6  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 12919  0026B8  90D8               	bcf	status,0,c
 12920  0026BA  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12921  0026BC  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12922  0026BE  90D8               	bcf	status,0,c
 12923  0026C0  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12924  0026C2  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12925  0026C4  90D8               	bcf	status,0,c
 12926  0026C6  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12927  0026C8  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12928  0026CA  0E44               	movlw	68
 12929  0026CC  2420               	addwf	??_calculateSetFilterMask+14,w,c
 12930  0026CE  6E08               	movwf	?_Read_b_eep,c
 12931  0026D0  0E00               	movlw	0
 12932  0026D2  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 12933  0026D4  6E09               	movwf	?_Read_b_eep+1,c
 12934  0026D6  0012               	return	
 12935  0026D8                     __end_ofPL20:
 12936                           	opt stack 0
 12937  0026D8                     PL22:
 12938                           	opt stack 23
 12939  0026D8  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 12940  0026DA  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 12941  0026DC  90D8               	bcf	status,0,c
 12942  0026DE  3612               	rlcf	??_calculateSetFilterMask,f,c
 12943  0026E0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12944  0026E2  90D8               	bcf	status,0,c
 12945  0026E4  3612               	rlcf	??_calculateSetFilterMask,f,c
 12946  0026E6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12947  0026E8  90D8               	bcf	status,0,c
 12948  0026EA  3612               	rlcf	??_calculateSetFilterMask,f,c
 12949  0026EC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12950  0026EE  0012               	return	
 12951  0026F0                     __end_ofPL22:
 12952                           	opt stack 0
 12953  0026F0                     PL24:
 12954                           	opt stack 23
 12955  0026F0  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12956  0026F2  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 12957  0026F6  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 12958  0026F8  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12959  0026FA  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 12960  0026FC  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 12961  002700  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 12962  002704  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 12963  002708  6A15               	clrf	??_calculateSetFilterMask+3,c
 12964  00270A  5043               	movf	calculateSetFilterMask@i,w,c
 12965  00270C  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 12966  00270E  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 12967  002710  90D8               	bcf	status,0,c
 12968  002712  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12969  002714  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12970  002716  90D8               	bcf	status,0,c
 12971  002718  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12972  00271A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12973  00271C  90D8               	bcf	status,0,c
 12974  00271E  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12975  002720  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12976  002722  0012               	return	
 12977  002724                     __end_ofPL24:
 12978                           	opt stack 0
 12979  002724                     PL28:
 12980                           	opt stack 23
 12981  002724  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 12982  002726  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 12983  002728  501D               	movf	??_calculateSetFilterMask+11,w,c
 12984  00272A  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 12985  00272C  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 12986  00272E  501E               	movf	??_calculateSetFilterMask+12,w,c
 12987  002730  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 12988  002732  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 12989  002734  501F               	movf	??_calculateSetFilterMask+13,w,c
 12990  002736  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 12991  002738  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 12992  00273A  5015               	movf	??_calculateSetFilterMask+3,w,c
 12993  00273C  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 12994  00273E  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 12995  002740  5016               	movf	??_calculateSetFilterMask+4,w,c
 12996  002742  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 12997  002744  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 12998  002746  5017               	movf	??_calculateSetFilterMask+5,w,c
 12999  002748  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 13000  00274A  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 13001  00274C  5018               	movf	??_calculateSetFilterMask+6,w,c
 13002  00274E  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 13003  002750  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 13004  002752  0012               	return	
 13005  002754                     __end_ofPL28:
 13006                           	opt stack 0
 13007  002754                     PL60:
 13008                           	opt stack 23
 13009  002754  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 13010  002756  5015               	movf	??_calculateSetFilterMask+3,w,c
 13011  002758  1636               	andwf	calculateSetFilterMask@mask,f,c
 13012  00275A  5016               	movf	??_calculateSetFilterMask+4,w,c
 13013  00275C  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 13014  00275E  5017               	movf	??_calculateSetFilterMask+5,w,c
 13015  002760  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 13016  002762  5018               	movf	??_calculateSetFilterMask+6,w,c
 13017  002764  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 13018  002766  0012               	return	
 13019  002768                     __end_ofPL60:
 13020                           	opt stack 0
 13021  002768                     PL106:
 13022                           	opt stack 23
 13023  002768  0E01               	movlw	1
 13024  00276A  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 13025  00276C  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 13026  00276E  2A12               	incf	??_calculateSetFilterMask,f,c
 13027  002770  0012               	return	
 13028  002772                     __end_ofPL106:
 13029                           	opt stack 0
 13030  002772                     PL110:
 13031                           	opt stack 23
 13032  002772  90D8               	bcf	status,0,c
 13033  002774  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13034  002776  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 13035  002778  0012               	return	
 13036  00277A                     __end_ofPL110:
 13037                           	opt stack 0
 13038                           tblptru	equ	0xFF8
 13039                           tblptrh	equ	0xFF7
 13040                           tblptrl	equ	0xFF6
 13041                           tablat	equ	0xFF5
 13042                           prodh	equ	0xFF4
 13043                           prodl	equ	0xFF3
 13044                           intcon	equ	0xFF2
 13045                           intcon2	equ	0xFF1
 13046                           postinc0	equ	0xFEE
 13047                           wreg	equ	0xFE8
 13048                           indf1	equ	0xFE7
 13049                           fsr1h	equ	0xFE2
 13050                           fsr1l	equ	0xFE1
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           plusw2	equ	0xFDB
 13055                           fsr2h	equ	0xFDA
 13056                           fsr2l	equ	0xFD9
 13057                           status	equ	0xFD8
 13058                           
 13059 ;; *************** function _SendInformationEvent *****************
 13060 ;; Defined at:
 13061 ;;		line 2502 in file "../main.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  idx             1    wreg     unsigned char 
 13064 ;;  eventClass      1   20[BANK0 ] unsigned char 
 13065 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;  idx             1   77[COMRAM] unsigned char 
 13068 ;;  data            3   74[COMRAM] unsigned char [3]
 13069 ;; Return value:  Size  Location     Type
 13070 ;;		None               void
 13071 ;; Registers used:
 13072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : F/0
 13075 ;;		On exit  : F/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13078 ;;      Params:         0       2       0       0       0       0       0
 13079 ;;      Locals:         4       0       0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0
 13081 ;;      Totals:         4       2       0       0       0       0       0
 13082 ;;Total ram usage:        6 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    6
 13085 ;; This function calls:
 13086 ;;		_Read_b_eep
 13087 ;;		_sendVSCPFrame
 13088 ;; This function is called by:
 13089 ;;		_main
 13090 ;;		_doApplicationOneSecondWork
 13091 ;;		_vscp_writeAppReg
 13092 ;;		_doActionOn
 13093 ;;		_doActionOff
 13094 ;;		_doActionPulseOn
 13095 ;;		_doActionPulseOff
 13096 ;;		_doActionToggle
 13097 ;;		_doActionStatus
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           	psect	text29
 13102  0040A8                     __ptext29:
 13103                           	opt stack 0
 13104  0040A8                     _SendInformationEvent:
 13105                           	opt stack 21
 13106                           
 13107                           ;incstack = 0
 13108                           ;incstack = 0
 13109                           ;SendInformationEvent@idx stored from wreg
 13110  0040A8  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;main.c: 2503: uint8_t data[3];
 13114                           ;main.c: 2505: data[ 0 ] = idx;
 13115  0040AC  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;main.c: 2506: data[ 1 ] = Read_b_eep(0x43 + 0);
 13119  0040B0  6A09               	clrf	?_Read_b_eep+1,c
 13120  0040B2  0E43               	movlw	67
 13121  0040B4  6E08               	movwf	?_Read_b_eep,c
 13122  0040B6  EC21  F023         	call	_Read_b_eep	;wreg free
 13123  0040BA  6E4C               	movwf	SendInformationEvent@data+1,c
 13124                           
 13125                           ;main.c: 2507: data[ 2 ] = Read_b_eep(0x43 + 2 + idx);
 13126  0040BC  0E45               	movlw	69
 13127  0040BE  244E               	addwf	SendInformationEvent@idx,w,c
 13128  0040C0  6E08               	movwf	?_Read_b_eep,c
 13129  0040C2  6A09               	clrf	?_Read_b_eep+1,c
 13130  0040C4  0E00               	movlw	0
 13131  0040C6  2209               	addwfc	?_Read_b_eep+1,f,c
 13132  0040C8  EC21  F023         	call	_Read_b_eep	;wreg free
 13133  0040CC  6E4D               	movwf	SendInformationEvent@data+2,c
 13134                           
 13135                           ;main.c: 2508: sendVSCPFrame( eventClass,
 13136                           ;main.c: 2509: eventTypeId,
 13137                           ;main.c: 2510: vscp_nickname,
 13138                           ;main.c: 2511: 0x03,
 13139                           ;main.c: 2512: 3,
 13140                           ;main.c: 2513: data );
 13141  0040CE  0100               	movlb	0	; () banked
 13142  0040D0  C0D0  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 13143  0040D4  6A40               	clrf	?_sendVSCPFrame+1,c
 13144  0040D6  C0D1  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 13145  0040DA  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13146  0040DE  0E03               	movlw	3
 13147  0040E0  6E43               	movwf	?_sendVSCPFrame+4,c
 13148  0040E2  6E44               	movwf	?_sendVSCPFrame+5,c
 13149  0040E4  0E4B               	movlw	low SendInformationEvent@data
 13150  0040E6  6E45               	movwf	?_sendVSCPFrame+6,c
 13151  0040E8  0E00               	movlw	high SendInformationEvent@data
 13152  0040EA  6E46               	movwf	?_sendVSCPFrame+7,c
 13153  0040EC  0E0F               	movlw	15
 13154  0040EE  6E46               	movwf	?_sendVSCPFrame+7,c
 13155  0040F0  0E5F               	movlw	__accesstop+-1
 13156  0040F2  6445               	cpfsgt	?_sendVSCPFrame+6,c
 13157  0040F4  6A46               	clrf	?_sendVSCPFrame+7,c
 13158  0040F6  EF37  F01F         	goto	_sendVSCPFrame	;wreg free
 13159  0040FA                     __end_of_SendInformationEvent:
 13160                           	opt stack 0
 13161                           tblptru	equ	0xFF8
 13162                           tblptrh	equ	0xFF7
 13163                           tblptrl	equ	0xFF6
 13164                           tablat	equ	0xFF5
 13165                           prodh	equ	0xFF4
 13166                           prodl	equ	0xFF3
 13167                           intcon	equ	0xFF2
 13168                           intcon2	equ	0xFF1
 13169                           postinc0	equ	0xFEE
 13170                           wreg	equ	0xFE8
 13171                           indf1	equ	0xFE7
 13172                           fsr1h	equ	0xFE2
 13173                           fsr1l	equ	0xFE1
 13174                           indf2	equ	0xFDF
 13175                           postinc2	equ	0xFDE
 13176                           postdec2	equ	0xFDD
 13177                           plusw2	equ	0xFDB
 13178                           fsr2h	equ	0xFDA
 13179                           fsr2l	equ	0xFD9
 13180                           status	equ	0xFD8
 13181                           
 13182 ;; *************** function _vscp_readRegister *****************
 13183 ;; Defined at:
 13184 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 13185 ;; Parameters:    Size  Location     Type
 13186 ;;  reg             1    wreg     unsigned char 
 13187 ;; Auto vars:     Size  Location     Type
 13188 ;;  reg             1   28[COMRAM] unsigned char 
 13189 ;; Return value:  Size  Location     Type
 13190 ;;                  1    wreg      unsigned char 
 13191 ;; Registers used:
 13192 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13193 ;; Tracked objects:
 13194 ;;		On entry : F/0
 13195 ;;		On exit  : 0/0
 13196 ;;		Unchanged: 0/0
 13197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13198 ;;      Params:         0       0       0       0       0       0       0
 13199 ;;      Locals:         1       0       0       0       0       0       0
 13200 ;;      Temps:          0       0       0       0       0       0       0
 13201 ;;      Totals:         1       0       0       0       0       0       0
 13202 ;;Total ram usage:        1 bytes
 13203 ;; Hardware stack levels used:    1
 13204 ;; Hardware stack levels required when called:    5
 13205 ;; This function calls:
 13206 ;;		_vscp_readAppReg
 13207 ;;		_vscp_readStdReg
 13208 ;; This function is called by:
 13209 ;;		_vscp_handleProtocolEvent
 13210 ;; This function uses a non-reentrant model
 13211 ;;
 13212                           
 13213                           	psect	text30
 13214  004568                     __ptext30:
 13215                           	opt stack 0
 13216  004568                     _vscp_readRegister:
 13217                           	opt stack 23
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;incstack = 0
 13221                           ;incstack = 0
 13222                           ;vscp_readRegister@reg stored from wreg
 13223  004568  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 13227  00456C  0E7F               	movlw	127
 13228  00456E  641D               	cpfsgt	vscp_readRegister@reg,c
 13229  004570  D004               	goto	l15016
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 13233  004572  501D               	movf	vscp_readRegister@reg,w,c
 13234  004574  EC0D  F018         	call	_vscp_readStdReg
 13235  004578  D003               	goto	l1361
 13236  00457A                     l15016:
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;vscp_firmware.c: 565: else {
 13240                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 13241  00457A  501D               	movf	vscp_readRegister@reg,w,c
 13242  00457C  EC38  F017         	call	_vscp_readAppReg
 13243  004580                     l1361:
 13244  004580  0012               	return	
 13245  004582                     __end_of_vscp_readRegister:
 13246                           	opt stack 0
 13247                           tblptru	equ	0xFF8
 13248                           tblptrh	equ	0xFF7
 13249                           tblptrl	equ	0xFF6
 13250                           tablat	equ	0xFF5
 13251                           prodh	equ	0xFF4
 13252                           prodl	equ	0xFF3
 13253                           intcon	equ	0xFF2
 13254                           intcon2	equ	0xFF1
 13255                           postinc0	equ	0xFEE
 13256                           wreg	equ	0xFE8
 13257                           indf1	equ	0xFE7
 13258                           fsr1h	equ	0xFE2
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           postdec2	equ	0xFDD
 13263                           plusw2	equ	0xFDB
 13264                           fsr2h	equ	0xFDA
 13265                           fsr2l	equ	0xFD9
 13266                           status	equ	0xFD8
 13267                           
 13268 ;; *************** function _vscp_readStdReg *****************
 13269 ;; Defined at:
 13270 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;  reg             1    wreg     unsigned char 
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;  reg             1   27[COMRAM] unsigned char 
 13275 ;;  code            4   20[COMRAM] unsigned long 
 13276 ;;  idx             1   25[COMRAM] unsigned char 
 13277 ;;  code            4   16[COMRAM] unsigned long 
 13278 ;;  idx             1   24[COMRAM] unsigned char 
 13279 ;;  rv              1   26[COMRAM] unsigned char 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      unsigned char 
 13282 ;; Registers used:
 13283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : F/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13289 ;;      Params:         0       0       0       0       0       0       0
 13290 ;;      Locals:        12       0       0       0       0       0       0
 13291 ;;      Temps:          5       0       0       0       0       0       0
 13292 ;;      Totals:        17       0       0       0       0       0       0
 13293 ;;Total ram usage:       17 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    4
 13296 ;; This function calls:
 13297 ;;		_vscp_getMajorVersion
 13298 ;;		_vscp_getMinorVersion
 13299 ;;		_vscp_getSubMinorVersion
 13300 ;;		_vscp_getGUID
 13301 ;;		_vscp_getMDF_URL
 13302 ;;		_vscp_getUserID
 13303 ;;		_vscp_getManufacturerId
 13304 ;;		_vscp_getBootLoaderAlgorithm
 13305 ;;		_vscp_getBufferSize
 13306 ;;		_vscp_getFamilyCode
 13307 ;;		_vscp_getFamilyType
 13308 ;;		_vscp_getRegisterPagesUsed
 13309 ;; This function is called by:
 13310 ;;		_vscp_readRegister
 13311 ;;		_vscp_handleProtocolEvent
 13312 ;; This function uses a non-reentrant model
 13313 ;;
 13314                           
 13315                           	psect	text31
 13316  00301A                     __ptext31:
 13317                           	opt stack 0
 13318  00301A                     _vscp_readStdReg:
 13319                           	opt stack 24
 13320                           
 13321                           ;incstack = 0
 13322                           ;incstack = 0
 13323                           ;vscp_readStdReg@reg stored from wreg
 13324  00301A  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 13328  00301E  6A1B               	clrf	vscp_readStdReg@rv,c
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 13332  003020  501C               	movf	vscp_readStdReg@reg,w,c
 13333  003022  0A80               	xorlw	128
 13334  003024  E104               	bnz	l15026
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 13338  003026  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13339                           
 13340                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 13341  00302A  6A55               	clrf	_vscp_alarmstatus,c
 13342                           
 13343                           ;vscp_firmware.c: 584: }
 13344  00302C  D0B3               	goto	l15114
 13345  00302E                     l15026:
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 13349  00302E  501C               	movf	vscp_readStdReg@reg,w,c
 13350  003030  0A81               	xorlw	129
 13351  003032  E102               	bnz	l15030
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;vscp_firmware.c: 588: rv = 1;
 13355  003034  0E01               	movlw	1
 13356  003036  D075               	goto	L47
 13357  003038                     l15030:
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 13361  003038  501C               	movf	vscp_readStdReg@reg,w,c
 13362  00303A  0A82               	xorlw	130
 13363  00303C  E102               	bnz	l15034
 13364                           
 13365                           ; BSR set to: 0
 13366                           ;vscp_firmware.c: 594: rv = 5;
 13367  00303E  0E05               	movlw	5
 13368  003040  D070               	goto	L47
 13369  003042                     l15034:
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13373  003042  501C               	movf	vscp_readStdReg@reg,w,c
 13374  003044  0A83               	xorlw	131
 13375  003046  E102               	bnz	l15038
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;vscp_firmware.c: 600: rv = 0;
 13379  003048  6A1B               	clrf	vscp_readStdReg@rv,c
 13380                           
 13381                           ;vscp_firmware.c: 602: }
 13382  00304A  D0A4               	goto	l15114
 13383  00304C                     l15038:
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13387  00304C  501C               	movf	vscp_readStdReg@reg,w,c
 13388  00304E  0A94               	xorlw	148
 13389  003050  E103               	bnz	l15042
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13393  003052  EC60  F023         	call	_vscp_getMajorVersion	;wreg free
 13394  003056  D065               	goto	L47
 13395  003058                     l15042:
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13399  003058  501C               	movf	vscp_readStdReg@reg,w,c
 13400  00305A  0A95               	xorlw	149
 13401  00305C  E103               	bnz	l15046
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13405  00305E  EC5F  F023         	call	_vscp_getMinorVersion	;wreg free
 13406  003062  D05F               	goto	L47
 13407  003064                     l15046:
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13411  003064  501C               	movf	vscp_readStdReg@reg,w,c
 13412  003066  0A96               	xorlw	150
 13413  003068  E103               	bnz	l15050
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13417  00306A  EC5E  F023         	call	_vscp_getSubMinorVersion	;wreg free
 13418  00306E  D059               	goto	L47
 13419  003070                     l15050:
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13423  003070  0E89               	movlw	137
 13424  003072  601C               	cpfslt	vscp_readStdReg@reg,c
 13425  003074  D005               	goto	l15054
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13429  003076  501C               	movf	vscp_readStdReg@reg,w,c
 13430  003078  0F7C               	addlw	124
 13431  00307A  EC04  F023         	call	_vscp_getUserID
 13432  00307E  D051               	goto	L47
 13433  003080                     l15054:
 13434                           
 13435                           ; BSR set to: 0
 13436                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13437                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13438  003080  0E88               	movlw	136
 13439  003082  641C               	cpfsgt	vscp_readStdReg@reg,c
 13440  003084  D008               	goto	l15060
 13441                           
 13442                           ; BSR set to: 0
 13443  003086  0E91               	movlw	145
 13444  003088  601C               	cpfslt	vscp_readStdReg@reg,c
 13445  00308A  D005               	goto	l15060
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13449  00308C  501C               	movf	vscp_readStdReg@reg,w,c
 13450  00308E  0F77               	addlw	119
 13451  003090  ECFA  F022         	call	_vscp_getManufacturerId
 13452  003094  D046               	goto	L47
 13453  003096                     l15060:
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13457  003096  501C               	movf	vscp_readStdReg@reg,w,c
 13458  003098  0A91               	xorlw	145
 13459  00309A  E103               	bnz	l15064
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13463  00309C  C07E  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 13464                           
 13465                           ;vscp_firmware.c: 639: }
 13466  0030A0  D079               	goto	l15114
 13467  0030A2                     l15064:
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13471  0030A2  501C               	movf	vscp_readStdReg@reg,w,c
 13472  0030A4  0A93               	xorlw	147
 13473  0030A6  E103               	bnz	l15068
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13477  0030A8  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 13478                           
 13479                           ;vscp_firmware.c: 645: }
 13480  0030AC  D073               	goto	l15114
 13481  0030AE                     l15068:
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13485  0030AE  501C               	movf	vscp_readStdReg@reg,w,c
 13486  0030B0  0A92               	xorlw	146
 13487  0030B2  E102               	bnz	l15072
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13491  0030B4  5053               	movf	_vscp_page_select+1,w,c
 13492  0030B6  D035               	goto	L47
 13493  0030B8                     l15072:
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13497  0030B8  501C               	movf	vscp_readStdReg@reg,w,c
 13498  0030BA  0A97               	xorlw	151
 13499  0030BC  E103               	bnz	l15076
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13503  0030BE  EC5D  F023         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13504  0030C2  D02F               	goto	L47
 13505  0030C4                     l15076:
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13509  0030C4  501C               	movf	vscp_readStdReg@reg,w,c
 13510  0030C6  0A98               	xorlw	152
 13511  0030C8  E103               	bnz	l15080
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13515  0030CA  EC5C  F023         	call	_vscp_getBufferSize	;wreg free
 13516  0030CE  D029               	goto	L47
 13517  0030D0                     l15080:
 13518                           
 13519                           ; BSR set to: 0
 13520                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13521  0030D0  501C               	movf	vscp_readStdReg@reg,w,c
 13522  0030D2  0A99               	xorlw	153
 13523  0030D4  E103               	bnz	l15084
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13527  0030D6  EC5B  F023         	call	_vscp_getRegisterPagesUsed	;wreg free
 13528  0030DA  D023               	goto	L47
 13529  0030DC                     l15084:
 13530                           
 13531                           ; BSR set to: 0
 13532                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13533                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13534  0030DC  0E99               	movlw	153
 13535  0030DE  641C               	cpfsgt	vscp_readStdReg@reg,c
 13536  0030E0  D022               	goto	l15094
 13537                           
 13538                           ; BSR set to: 0
 13539  0030E2  0E9E               	movlw	158
 13540  0030E4  601C               	cpfslt	vscp_readStdReg@reg,c
 13541  0030E6  D01F               	goto	l15094
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13545  0030E8  EC42  F023         	call	_vscp_getFamilyCode	;wreg free
 13546  0030EC  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13547  0030F0  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13548  0030F4  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13549  0030F8  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13553  0030FC  501C               	movf	vscp_readStdReg@reg,w,c
 13554  0030FE  0F66               	addlw	102
 13555  003100  6E19               	movwf	vscp_readStdReg@idx,c
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13559  003102  5019               	movf	vscp_readStdReg@idx,w,c
 13560  003104  D849               	call	PL64	;call to abstracted procedure
 13561  003106  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13562  00310A  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13563  00310E  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13564  003112  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13565  003116  2AE8               	incf	wreg,f,c
 13566  003118  D001               	goto	u20430
 13567  00311A                     u20435:
 13568  00311A  D848               	call	PL102	;call to abstracted procedure
 13569  00311C                     u20430:
 13570  00311C  2EE8               	decfsz	wreg,f,c
 13571  00311E  D7FD               	goto	u20435
 13572  003120  D024               	goto	L48
 13573  003122                     L47:
 13574  003122  6E1B               	movwf	vscp_readStdReg@rv,c
 13575                           
 13576                           ;vscp_firmware.c: 671: }
 13577  003124  D037               	goto	l15114
 13578  003126                     l15094:
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13582                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13583  003126  0E9D               	movlw	157
 13584  003128  641C               	cpfsgt	vscp_readStdReg@reg,c
 13585  00312A  D021               	goto	l15104
 13586                           
 13587                           ; BSR set to: 0
 13588  00312C  0EA2               	movlw	162
 13589  00312E  601C               	cpfslt	vscp_readStdReg@reg,c
 13590  003130  D01E               	goto	l15104
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13594  003132  EC3D  F023         	call	_vscp_getFamilyType	;wreg free
 13595  003136  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1486+3
 13596  00313A  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1486+2
 13597  00313E  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1486+1
 13598  003142  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1486
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13602  003146  501C               	movf	vscp_readStdReg@reg,w,c
 13603  003148  0F62               	addlw	98
 13604  00314A  6E1A               	movwf	vscp_readStdReg@idx_1487,c
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13608  00314C  501A               	movf	vscp_readStdReg@idx_1487,w,c
 13609  00314E  D824               	call	PL64	;call to abstracted procedure
 13610  003150  C015  F00D         	movff	vscp_readStdReg@code_1486,??_vscp_readStdReg+1
 13611  003154  C016  F00E         	movff	vscp_readStdReg@code_1486+1,??_vscp_readStdReg+2
 13612  003158  C017  F00F         	movff	vscp_readStdReg@code_1486+2,??_vscp_readStdReg+3
 13613  00315C  C018  F010         	movff	vscp_readStdReg@code_1486+3,??_vscp_readStdReg+4
 13614  003160  2AE8               	incf	wreg,f,c
 13615  003162  D001               	goto	u20460
 13616  003164                     u20465:
 13617  003164  D823               	call	PL102	;call to abstracted procedure
 13618  003166                     u20460:
 13619  003166  2EE8               	decfsz	wreg,f,c
 13620  003168  D7FD               	goto	u20465
 13621  00316A                     L48:
 13622  00316A  500D               	movf	??_vscp_readStdReg+1,w,c
 13623  00316C  D7DA               	goto	L47
 13624  00316E                     l15104:
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13628                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13629  00316E  0ECF               	movlw	207
 13630  003170  641C               	cpfsgt	vscp_readStdReg@reg,c
 13631  003172  D008               	goto	l15110
 13632                           
 13633                           ; BSR set to: 0
 13634  003174  0EE0               	movlw	224
 13635  003176  601C               	cpfslt	vscp_readStdReg@reg,c
 13636  003178  D005               	goto	l15110
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13640  00317A  501C               	movf	vscp_readStdReg@reg,w,c
 13641  00317C  0F30               	addlw	48
 13642  00317E  EC0E  F023         	call	_vscp_getGUID
 13643  003182  D7CF               	goto	L47
 13644  003184                     l15110:
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13648  003184  0EDF               	movlw	223
 13649  003186  641C               	cpfsgt	vscp_readStdReg@reg,c
 13650  003188  D005               	goto	l15114
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13654  00318A  501C               	movf	vscp_readStdReg@reg,w,c
 13655  00318C  0F20               	addlw	32
 13656  00318E  ECC1  F022         	call	_vscp_getMDF_URL
 13657  003192  D7C7               	goto	L47
 13658  003194                     l15114:
 13659                           
 13660                           ;vscp_firmware.c: 691: }
 13661                           ;vscp_firmware.c: 693: return rv;
 13662  003194  501B               	movf	vscp_readStdReg@rv,w,c
 13663  003196  0012               	return	
 13664  003198                     __end_of_vscp_readStdReg:
 13665                           	opt stack 0
 13666  003198                     PL64:
 13667                           	opt stack 24
 13668  003198  0803               	sublw	3
 13669  00319A  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 13670  00319C  90D8               	bcf	status,0,c
 13671  00319E  360C               	rlcf	??_vscp_readStdReg,f,c
 13672  0031A0  90D8               	bcf	status,0,c
 13673  0031A2  360C               	rlcf	??_vscp_readStdReg,f,c
 13674  0031A4  90D8               	bcf	status,0,c
 13675  0031A6  360C               	rlcf	??_vscp_readStdReg,f,c
 13676  0031A8  500C               	movf	??_vscp_readStdReg,w,c
 13677  0031AA  0012               	return	
 13678  0031AC                     __end_ofPL64:
 13679                           	opt stack 0
 13680  0031AC                     PL102:
 13681                           	opt stack 24
 13682  0031AC  90D8               	bcf	status,0,c
 13683  0031AE  3210               	rrcf	??_vscp_readStdReg+4,f,c
 13684  0031B0  320F               	rrcf	??_vscp_readStdReg+3,f,c
 13685  0031B2  320E               	rrcf	??_vscp_readStdReg+2,f,c
 13686  0031B4  320D               	rrcf	??_vscp_readStdReg+1,f,c
 13687  0031B6  0012               	return	
 13688  0031B8                     __end_ofPL102:
 13689                           	opt stack 0
 13690                           tblptru	equ	0xFF8
 13691                           tblptrh	equ	0xFF7
 13692                           tblptrl	equ	0xFF6
 13693                           tablat	equ	0xFF5
 13694                           prodh	equ	0xFF4
 13695                           prodl	equ	0xFF3
 13696                           intcon	equ	0xFF2
 13697                           intcon2	equ	0xFF1
 13698                           postinc0	equ	0xFEE
 13699                           wreg	equ	0xFE8
 13700                           indf1	equ	0xFE7
 13701                           fsr1h	equ	0xFE2
 13702                           fsr1l	equ	0xFE1
 13703                           indf2	equ	0xFDF
 13704                           postinc2	equ	0xFDE
 13705                           postdec2	equ	0xFDD
 13706                           plusw2	equ	0xFDB
 13707                           fsr2h	equ	0xFDA
 13708                           fsr2l	equ	0xFD9
 13709                           status	equ	0xFD8
 13710                           
 13711 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13712 ;; Defined at:
 13713 ;;		line 3508 in file "../main.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;		None
 13716 ;; Auto vars:     Size  Location     Type
 13717 ;;		None
 13718 ;; Return value:  Size  Location     Type
 13719 ;;                  1    wreg      unsigned char 
 13720 ;; Registers used:
 13721 ;;		wreg
 13722 ;; Tracked objects:
 13723 ;;		On entry : F/0
 13724 ;;		On exit  : F/0
 13725 ;;		Unchanged: F/0
 13726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13727 ;;      Params:         0       0       0       0       0       0       0
 13728 ;;      Locals:         0       0       0       0       0       0       0
 13729 ;;      Temps:          0       0       0       0       0       0       0
 13730 ;;      Totals:         0       0       0       0       0       0       0
 13731 ;;Total ram usage:        0 bytes
 13732 ;; Hardware stack levels used:    1
 13733 ;; Hardware stack levels required when called:    2
 13734 ;; This function calls:
 13735 ;;		Nothing
 13736 ;; This function is called by:
 13737 ;;		_vscp_readStdReg
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           	psect	text32
 13742  0046B6                     __ptext32:
 13743                           	opt stack 0
 13744  0046B6                     _vscp_getRegisterPagesUsed:
 13745                           	opt stack 25
 13746                           
 13747                           ; BSR set to: 0
 13748                           
 13749                           ; BSR set to: 0
 13750                           ;main.c: 3509: return 3;
 13751                           
 13752                           ;incstack = 0
 13753                           ;incstack = 0
 13754  0046B6  0C03               	retlw	3
 13755  0046B8                     __end_of_vscp_getRegisterPagesUsed:
 13756                           	opt stack 0
 13757                           tblptru	equ	0xFF8
 13758                           tblptrh	equ	0xFF7
 13759                           tblptrl	equ	0xFF6
 13760                           tablat	equ	0xFF5
 13761                           prodh	equ	0xFF4
 13762                           prodl	equ	0xFF3
 13763                           intcon	equ	0xFF2
 13764                           intcon2	equ	0xFF1
 13765                           postinc0	equ	0xFEE
 13766                           wreg	equ	0xFE8
 13767                           indf1	equ	0xFE7
 13768                           fsr1h	equ	0xFE2
 13769                           fsr1l	equ	0xFE1
 13770                           indf2	equ	0xFDF
 13771                           postinc2	equ	0xFDE
 13772                           postdec2	equ	0xFDD
 13773                           plusw2	equ	0xFDB
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _vscp_getFamilyType *****************
 13779 ;; Defined at:
 13780 ;;		line 3489 in file "../main.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;		None
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  4    7[COMRAM] unsigned long 
 13787 ;; Registers used:
 13788 ;;		None
 13789 ;; Tracked objects:
 13790 ;;		On entry : F/0
 13791 ;;		On exit  : F/0
 13792 ;;		Unchanged: F/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13794 ;;      Params:         4       0       0       0       0       0       0
 13795 ;;      Locals:         0       0       0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0
 13797 ;;      Totals:         4       0       0       0       0       0       0
 13798 ;;Total ram usage:        4 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    2
 13801 ;; This function calls:
 13802 ;;		Nothing
 13803 ;; This function is called by:
 13804 ;;		_vscp_readStdReg
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           	psect	text33
 13809  00467A                     __ptext33:
 13810                           	opt stack 0
 13811  00467A                     _vscp_getFamilyType:
 13812                           	opt stack 25
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;main.c: 3490: return 0;
 13816                           
 13817                           ; BSR set to: 0
 13818                           ;incstack = 0
 13819                           ;incstack = 0
 13820  00467A  6A08               	clrf	?_vscp_getFamilyType,c
 13821  00467C  6A09               	clrf	?_vscp_getFamilyType+1,c
 13822  00467E  6A0A               	clrf	?_vscp_getFamilyType+2,c
 13823  004680  6A0B               	clrf	?_vscp_getFamilyType+3,c
 13824                           
 13825                           ; BSR set to: 0
 13826  004682  0012               	return	
 13827  004684                     __end_of_vscp_getFamilyType:
 13828                           	opt stack 0
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           intcon2	equ	0xFF1
 13837                           postinc0	equ	0xFEE
 13838                           wreg	equ	0xFE8
 13839                           indf1	equ	0xFE7
 13840                           fsr1h	equ	0xFE2
 13841                           fsr1l	equ	0xFE1
 13842                           indf2	equ	0xFDF
 13843                           postinc2	equ	0xFDE
 13844                           postdec2	equ	0xFDD
 13845                           plusw2	equ	0xFDB
 13846                           fsr2h	equ	0xFDA
 13847                           fsr2l	equ	0xFD9
 13848                           status	equ	0xFD8
 13849                           
 13850 ;; *************** function _vscp_getFamilyCode *****************
 13851 ;; Defined at:
 13852 ;;		line 3480 in file "../main.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;		None
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;		None
 13857 ;; Return value:  Size  Location     Type
 13858 ;;                  4    7[COMRAM] unsigned long 
 13859 ;; Registers used:
 13860 ;;		None
 13861 ;; Tracked objects:
 13862 ;;		On entry : F/0
 13863 ;;		On exit  : F/0
 13864 ;;		Unchanged: F/0
 13865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13866 ;;      Params:         4       0       0       0       0       0       0
 13867 ;;      Locals:         0       0       0       0       0       0       0
 13868 ;;      Temps:          0       0       0       0       0       0       0
 13869 ;;      Totals:         4       0       0       0       0       0       0
 13870 ;;Total ram usage:        4 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; Hardware stack levels required when called:    2
 13873 ;; This function calls:
 13874 ;;		Nothing
 13875 ;; This function is called by:
 13876 ;;		_vscp_readStdReg
 13877 ;; This function uses a non-reentrant model
 13878 ;;
 13879                           
 13880                           	psect	text34
 13881  004684                     __ptext34:
 13882                           	opt stack 0
 13883  004684                     _vscp_getFamilyCode:
 13884                           	opt stack 25
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;main.c: 3481: return 0L;
 13888                           
 13889                           ; BSR set to: 0
 13890                           ;incstack = 0
 13891                           ;incstack = 0
 13892  004684  6A08               	clrf	?_vscp_getFamilyCode,c
 13893  004686  6A09               	clrf	?_vscp_getFamilyCode+1,c
 13894  004688  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 13895  00468A  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 13896                           
 13897                           ; BSR set to: 0
 13898  00468C  0012               	return	
 13899  00468E                     __end_of_vscp_getFamilyCode:
 13900                           	opt stack 0
 13901                           tblptru	equ	0xFF8
 13902                           tblptrh	equ	0xFF7
 13903                           tblptrl	equ	0xFF6
 13904                           tablat	equ	0xFF5
 13905                           prodh	equ	0xFF4
 13906                           prodl	equ	0xFF3
 13907                           intcon	equ	0xFF2
 13908                           intcon2	equ	0xFF1
 13909                           postinc0	equ	0xFEE
 13910                           wreg	equ	0xFE8
 13911                           indf1	equ	0xFE7
 13912                           fsr1h	equ	0xFE2
 13913                           fsr1l	equ	0xFE1
 13914                           indf2	equ	0xFDF
 13915                           postinc2	equ	0xFDE
 13916                           postdec2	equ	0xFDD
 13917                           plusw2	equ	0xFDB
 13918                           fsr2h	equ	0xFDA
 13919                           fsr2l	equ	0xFD9
 13920                           status	equ	0xFD8
 13921                           
 13922 ;; *************** function _vscp_getBufferSize *****************
 13923 ;; Defined at:
 13924 ;;		line 3341 in file "../main.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;		None
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;		None
 13929 ;; Return value:  Size  Location     Type
 13930 ;;                  1    wreg      unsigned char 
 13931 ;; Registers used:
 13932 ;;		wreg
 13933 ;; Tracked objects:
 13934 ;;		On entry : F/0
 13935 ;;		On exit  : F/0
 13936 ;;		Unchanged: F/0
 13937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13938 ;;      Params:         0       0       0       0       0       0       0
 13939 ;;      Locals:         0       0       0       0       0       0       0
 13940 ;;      Temps:          0       0       0       0       0       0       0
 13941 ;;      Totals:         0       0       0       0       0       0       0
 13942 ;;Total ram usage:        0 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; Hardware stack levels required when called:    2
 13945 ;; This function calls:
 13946 ;;		Nothing
 13947 ;; This function is called by:
 13948 ;;		_vscp_readStdReg
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           	psect	text35
 13953  0046B8                     __ptext35:
 13954                           	opt stack 0
 13955  0046B8                     _vscp_getBufferSize:
 13956                           	opt stack 25
 13957                           
 13958                           ; BSR set to: 0
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;main.c: 3342: return 8;
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;incstack = 0
 13965                           ;incstack = 0
 13966  0046B8  0C08               	retlw	8
 13967  0046BA                     __end_of_vscp_getBufferSize:
 13968                           	opt stack 0
 13969                           tblptru	equ	0xFF8
 13970                           tblptrh	equ	0xFF7
 13971                           tblptrl	equ	0xFF6
 13972                           tablat	equ	0xFF5
 13973                           prodh	equ	0xFF4
 13974                           prodl	equ	0xFF3
 13975                           intcon	equ	0xFF2
 13976                           intcon2	equ	0xFF1
 13977                           postinc0	equ	0xFEE
 13978                           wreg	equ	0xFE8
 13979                           indf1	equ	0xFE7
 13980                           fsr1h	equ	0xFE2
 13981                           fsr1l	equ	0xFE1
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           plusw2	equ	0xFDB
 13986                           fsr2h	equ	0xFDA
 13987                           fsr2l	equ	0xFD9
 13988                           status	equ	0xFD8
 13989                           
 13990 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13991 ;; Defined at:
 13992 ;;		line 3332 in file "../main.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;		None
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;		None
 13997 ;; Return value:  Size  Location     Type
 13998 ;;                  1    wreg      unsigned char 
 13999 ;; Registers used:
 14000 ;;		wreg
 14001 ;; Tracked objects:
 14002 ;;		On entry : F/0
 14003 ;;		On exit  : F/0
 14004 ;;		Unchanged: F/0
 14005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14006 ;;      Params:         0       0       0       0       0       0       0
 14007 ;;      Locals:         0       0       0       0       0       0       0
 14008 ;;      Temps:          0       0       0       0       0       0       0
 14009 ;;      Totals:         0       0       0       0       0       0       0
 14010 ;;Total ram usage:        0 bytes
 14011 ;; Hardware stack levels used:    1
 14012 ;; Hardware stack levels required when called:    2
 14013 ;; This function calls:
 14014 ;;		Nothing
 14015 ;; This function is called by:
 14016 ;;		_vscp_readStdReg
 14017 ;; This function uses a non-reentrant model
 14018 ;;
 14019                           
 14020                           	psect	text36
 14021  0046BA                     __ptext36:
 14022                           	opt stack 0
 14023  0046BA                     _vscp_getBootLoaderAlgorithm:
 14024                           	opt stack 25
 14025                           
 14026                           ; BSR set to: 0
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;main.c: 3333: return 0x01;
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;incstack = 0
 14033                           ;incstack = 0
 14034  0046BA  0C01               	retlw	1
 14035  0046BC                     __end_of_vscp_getBootLoaderAlgorithm:
 14036                           	opt stack 0
 14037                           tblptru	equ	0xFF8
 14038                           tblptrh	equ	0xFF7
 14039                           tblptrl	equ	0xFF6
 14040                           tablat	equ	0xFF5
 14041                           prodh	equ	0xFF4
 14042                           prodl	equ	0xFF3
 14043                           intcon	equ	0xFF2
 14044                           intcon2	equ	0xFF1
 14045                           postinc0	equ	0xFEE
 14046                           wreg	equ	0xFE8
 14047                           indf1	equ	0xFE7
 14048                           fsr1h	equ	0xFE2
 14049                           fsr1l	equ	0xFE1
 14050                           indf2	equ	0xFDF
 14051                           postinc2	equ	0xFDE
 14052                           postdec2	equ	0xFDD
 14053                           plusw2	equ	0xFDB
 14054                           fsr2h	equ	0xFDA
 14055                           fsr2l	equ	0xFD9
 14056                           status	equ	0xFD8
 14057                           
 14058 ;; *************** function _vscp_getManufacturerId *****************
 14059 ;; Defined at:
 14060 ;;		line 3323 in file "../main.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  idx             1    wreg     unsigned char 
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  idx             1    9[COMRAM] unsigned char 
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      unsigned char 
 14067 ;; Registers used:
 14068 ;;		wreg, status,2, status,0, cstack
 14069 ;; Tracked objects:
 14070 ;;		On entry : 0/0
 14071 ;;		On exit  : 0/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14074 ;;      Params:         0       0       0       0       0       0       0
 14075 ;;      Locals:         1       0       0       0       0       0       0
 14076 ;;      Temps:          0       0       0       0       0       0       0
 14077 ;;      Totals:         1       0       0       0       0       0       0
 14078 ;;Total ram usage:        1 bytes
 14079 ;; Hardware stack levels used:    1
 14080 ;; Hardware stack levels required when called:    3
 14081 ;; This function calls:
 14082 ;;		_Read_b_eep
 14083 ;; This function is called by:
 14084 ;;		_vscp_readStdReg
 14085 ;;		_vscp_writeStdReg
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           	psect	text37
 14090  0045F4                     __ptext37:
 14091                           	opt stack 0
 14092  0045F4                     _vscp_getManufacturerId:
 14093                           	opt stack 24
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;incstack = 0
 14097                           ;incstack = 0
 14098                           ;vscp_getManufacturerId@idx stored from wreg
 14099  0045F4  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 14100                           
 14101                           ;main.c: 3324: return Read_b_eep(0x0B + idx);
 14102  0045F8  0E0B               	movlw	11
 14103  0045FA  240A               	addwf	vscp_getManufacturerId@idx,w,c
 14104  0045FC  6E08               	movwf	?_Read_b_eep,c
 14105  0045FE  6A09               	clrf	?_Read_b_eep+1,c
 14106  004600  0E00               	movlw	0
 14107  004602  2209               	addwfc	?_Read_b_eep+1,f,c
 14108  004604  EF21  F023         	goto	_Read_b_eep	;wreg free
 14109  004608                     __end_of_vscp_getManufacturerId:
 14110                           	opt stack 0
 14111                           tblptru	equ	0xFF8
 14112                           tblptrh	equ	0xFF7
 14113                           tblptrl	equ	0xFF6
 14114                           tablat	equ	0xFF5
 14115                           prodh	equ	0xFF4
 14116                           prodl	equ	0xFF3
 14117                           intcon	equ	0xFF2
 14118                           intcon2	equ	0xFF1
 14119                           postinc0	equ	0xFEE
 14120                           wreg	equ	0xFE8
 14121                           indf1	equ	0xFE7
 14122                           fsr1h	equ	0xFE2
 14123                           fsr1l	equ	0xFE1
 14124                           indf2	equ	0xFDF
 14125                           postinc2	equ	0xFDE
 14126                           postdec2	equ	0xFDD
 14127                           plusw2	equ	0xFDB
 14128                           fsr2h	equ	0xFDA
 14129                           fsr2l	equ	0xFD9
 14130                           status	equ	0xFD8
 14131                           
 14132 ;; *************** function _vscp_getUserID *****************
 14133 ;; Defined at:
 14134 ;;		line 3303 in file "../main.c"
 14135 ;; Parameters:    Size  Location     Type
 14136 ;;  idx             1    wreg     unsigned char 
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;  idx             1    9[COMRAM] unsigned char 
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  1    wreg      unsigned char 
 14141 ;; Registers used:
 14142 ;;		wreg, status,2, status,0, cstack
 14143 ;; Tracked objects:
 14144 ;;		On entry : 0/0
 14145 ;;		On exit  : 0/0
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14148 ;;      Params:         0       0       0       0       0       0       0
 14149 ;;      Locals:         1       0       0       0       0       0       0
 14150 ;;      Temps:          0       0       0       0       0       0       0
 14151 ;;      Totals:         1       0       0       0       0       0       0
 14152 ;;Total ram usage:        1 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; Hardware stack levels required when called:    3
 14155 ;; This function calls:
 14156 ;;		_Read_b_eep
 14157 ;; This function is called by:
 14158 ;;		_vscp_readStdReg
 14159 ;;		_vscp_writeStdReg
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           	psect	text38
 14164  004608                     __ptext38:
 14165                           	opt stack 0
 14166  004608                     _vscp_getUserID:
 14167                           	opt stack 24
 14168                           
 14169                           ;incstack = 0
 14170                           ;incstack = 0
 14171                           ;vscp_getUserID@idx stored from wreg
 14172  004608  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 14173                           
 14174                           ;main.c: 3304: return Read_b_eep(0x06 + idx);
 14175  00460C  0E06               	movlw	6
 14176  00460E  240A               	addwf	vscp_getUserID@idx,w,c
 14177  004610  6E08               	movwf	?_Read_b_eep,c
 14178  004612  6A09               	clrf	?_Read_b_eep+1,c
 14179  004614  0E00               	movlw	0
 14180  004616  2209               	addwfc	?_Read_b_eep+1,f,c
 14181  004618  EF21  F023         	goto	_Read_b_eep	;wreg free
 14182  00461C                     __end_of_vscp_getUserID:
 14183                           	opt stack 0
 14184                           tblptru	equ	0xFF8
 14185                           tblptrh	equ	0xFF7
 14186                           tblptrl	equ	0xFF6
 14187                           tablat	equ	0xFF5
 14188                           prodh	equ	0xFF4
 14189                           prodl	equ	0xFF3
 14190                           intcon	equ	0xFF2
 14191                           intcon2	equ	0xFF1
 14192                           postinc0	equ	0xFEE
 14193                           wreg	equ	0xFE8
 14194                           indf1	equ	0xFE7
 14195                           fsr1h	equ	0xFE2
 14196                           fsr1l	equ	0xFE1
 14197                           indf2	equ	0xFDF
 14198                           postinc2	equ	0xFDE
 14199                           postdec2	equ	0xFDD
 14200                           plusw2	equ	0xFDB
 14201                           fsr2h	equ	0xFDA
 14202                           fsr2l	equ	0xFD9
 14203                           status	equ	0xFD8
 14204                           
 14205 ;; *************** function _vscp_getMDF_URL *****************
 14206 ;; Defined at:
 14207 ;;		line 3294 in file "../main.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;  idx             1    wreg     unsigned char 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  idx             1    8[COMRAM] unsigned char 
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  1    wreg      unsigned char 
 14214 ;; Registers used:
 14215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14216 ;; Tracked objects:
 14217 ;;		On entry : F/0
 14218 ;;		On exit  : F/0
 14219 ;;		Unchanged: F/0
 14220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14221 ;;      Params:         0       0       0       0       0       0       0
 14222 ;;      Locals:         1       0       0       0       0       0       0
 14223 ;;      Temps:          1       0       0       0       0       0       0
 14224 ;;      Totals:         2       0       0       0       0       0       0
 14225 ;;Total ram usage:        2 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; Hardware stack levels required when called:    2
 14228 ;; This function calls:
 14229 ;;		Nothing
 14230 ;; This function is called by:
 14231 ;;		_vscp_readStdReg
 14232 ;;		_vscp_handleProtocolEvent
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           	psect	text39
 14237  004582                     __ptext39:
 14238                           	opt stack 0
 14239  004582                     _vscp_getMDF_URL:
 14240                           	opt stack 25
 14241                           
 14242                           ;incstack = 0
 14243                           ;incstack = 0
 14244                           ;vscp_getMDF_URL@idx stored from wreg
 14245  004582  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;main.c: 3295: return vscp_deviceURL[ idx ];
 14249  004586  5009               	movf	vscp_getMDF_URL@idx,w,c
 14250  004588  0F00               	addlw	low _vscp_deviceURL
 14251  00458A  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 14252  00458C  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 14253  004590  0E06               	movlw	high __smallconst
 14254  004592  6EF7               	movwf	tblptrh,c
 14255  004594  0008               	tblrd		*
 14256  004596  50F5               	movf	tablat,w,c
 14257                           
 14258                           ; BSR set to: 0
 14259  004598  0012               	return	
 14260  00459A                     __end_of_vscp_getMDF_URL:
 14261                           	opt stack 0
 14262                           tblptru	equ	0xFF8
 14263                           tblptrh	equ	0xFF7
 14264                           tblptrl	equ	0xFF6
 14265                           tablat	equ	0xFF5
 14266                           prodh	equ	0xFF4
 14267                           prodl	equ	0xFF3
 14268                           intcon	equ	0xFF2
 14269                           intcon2	equ	0xFF1
 14270                           postinc0	equ	0xFEE
 14271                           wreg	equ	0xFE8
 14272                           indf1	equ	0xFE7
 14273                           fsr1h	equ	0xFE2
 14274                           fsr1l	equ	0xFE1
 14275                           indf2	equ	0xFDF
 14276                           postinc2	equ	0xFDE
 14277                           postdec2	equ	0xFDD
 14278                           plusw2	equ	0xFDB
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _vscp_getGUID *****************
 14284 ;; Defined at:
 14285 ;;		line 3282 in file "../main.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  idx             1    wreg     unsigned char 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  idx             1    9[COMRAM] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      unsigned char 
 14292 ;; Registers used:
 14293 ;;		wreg, status,2, status,0, cstack
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14299 ;;      Params:         0       0       0       0       0       0       0
 14300 ;;      Locals:         1       0       0       0       0       0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0
 14302 ;;      Totals:         1       0       0       0       0       0       0
 14303 ;;Total ram usage:        1 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    3
 14306 ;; This function calls:
 14307 ;;		_Read_b_eep
 14308 ;; This function is called by:
 14309 ;;		_vscp_readStdReg
 14310 ;;		_vscp_writeStdReg
 14311 ;;		_vscp_handleProtocolEvent
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           	psect	text40
 14316  00461C                     __ptext40:
 14317                           	opt stack 0
 14318  00461C                     _vscp_getGUID:
 14319                           	opt stack 24
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;incstack = 0
 14323                           ;incstack = 0
 14324                           ;vscp_getGUID@idx stored from wreg
 14325  00461C  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 14326                           
 14327                           ;main.c: 3283: return Read_b_eep(0x13 + idx);
 14328  004620  0E13               	movlw	19
 14329  004622  240A               	addwf	vscp_getGUID@idx,w,c
 14330  004624  6E08               	movwf	?_Read_b_eep,c
 14331  004626  6A09               	clrf	?_Read_b_eep+1,c
 14332  004628  0E00               	movlw	0
 14333  00462A  2209               	addwfc	?_Read_b_eep+1,f,c
 14334  00462C  EF21  F023         	goto	_Read_b_eep	;wreg free
 14335  004630                     __end_of_vscp_getGUID:
 14336                           	opt stack 0
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           intcon2	equ	0xFF1
 14345                           postinc0	equ	0xFEE
 14346                           wreg	equ	0xFE8
 14347                           indf1	equ	0xFE7
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           plusw2	equ	0xFDB
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _vscp_getSubMinorVersion *****************
 14359 ;; Defined at:
 14360 ;;		line 3271 in file "../main.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;		None
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;		None
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  1    wreg      unsigned char 
 14367 ;; Registers used:
 14368 ;;		wreg
 14369 ;; Tracked objects:
 14370 ;;		On entry : F/0
 14371 ;;		On exit  : F/0
 14372 ;;		Unchanged: F/0
 14373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14374 ;;      Params:         0       0       0       0       0       0       0
 14375 ;;      Locals:         0       0       0       0       0       0       0
 14376 ;;      Temps:          0       0       0       0       0       0       0
 14377 ;;      Totals:         0       0       0       0       0       0       0
 14378 ;;Total ram usage:        0 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    2
 14381 ;; This function calls:
 14382 ;;		Nothing
 14383 ;; This function is called by:
 14384 ;;		_vscp_readStdReg
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           	psect	text41
 14389  0046BC                     __ptext41:
 14390                           	opt stack 0
 14391  0046BC                     _vscp_getSubMinorVersion:
 14392                           	opt stack 25
 14393                           
 14394                           ; BSR set to: 0
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;main.c: 3272: return 0;
 14398                           
 14399                           ;incstack = 0
 14400                           ;incstack = 0
 14401  0046BC  0C00               	retlw	0
 14402  0046BE                     __end_of_vscp_getSubMinorVersion:
 14403                           	opt stack 0
 14404                           tblptru	equ	0xFF8
 14405                           tblptrh	equ	0xFF7
 14406                           tblptrl	equ	0xFF6
 14407                           tablat	equ	0xFF5
 14408                           prodh	equ	0xFF4
 14409                           prodl	equ	0xFF3
 14410                           intcon	equ	0xFF2
 14411                           intcon2	equ	0xFF1
 14412                           postinc0	equ	0xFEE
 14413                           wreg	equ	0xFE8
 14414                           indf1	equ	0xFE7
 14415                           fsr1h	equ	0xFE2
 14416                           fsr1l	equ	0xFE1
 14417                           indf2	equ	0xFDF
 14418                           postinc2	equ	0xFDE
 14419                           postdec2	equ	0xFDD
 14420                           plusw2	equ	0xFDB
 14421                           fsr2h	equ	0xFDA
 14422                           fsr2l	equ	0xFD9
 14423                           status	equ	0xFD8
 14424                           
 14425 ;; *************** function _vscp_getMinorVersion *****************
 14426 ;; Defined at:
 14427 ;;		line 3262 in file "../main.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;		None
 14430 ;; Auto vars:     Size  Location     Type
 14431 ;;		None
 14432 ;; Return value:  Size  Location     Type
 14433 ;;                  1    wreg      unsigned char 
 14434 ;; Registers used:
 14435 ;;		wreg
 14436 ;; Tracked objects:
 14437 ;;		On entry : F/0
 14438 ;;		On exit  : F/0
 14439 ;;		Unchanged: F/0
 14440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14441 ;;      Params:         0       0       0       0       0       0       0
 14442 ;;      Locals:         0       0       0       0       0       0       0
 14443 ;;      Temps:          0       0       0       0       0       0       0
 14444 ;;      Totals:         0       0       0       0       0       0       0
 14445 ;;Total ram usage:        0 bytes
 14446 ;; Hardware stack levels used:    1
 14447 ;; Hardware stack levels required when called:    2
 14448 ;; This function calls:
 14449 ;;		Nothing
 14450 ;; This function is called by:
 14451 ;;		_vscp_readStdReg
 14452 ;; This function uses a non-reentrant model
 14453 ;;
 14454                           
 14455                           	psect	text42
 14456  0046BE                     __ptext42:
 14457                           	opt stack 0
 14458  0046BE                     _vscp_getMinorVersion:
 14459                           	opt stack 25
 14460                           
 14461                           ; BSR set to: 0
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;main.c: 3263: return 0;
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;incstack = 0
 14468                           ;incstack = 0
 14469  0046BE  0C00               	retlw	0
 14470  0046C0                     __end_of_vscp_getMinorVersion:
 14471                           	opt stack 0
 14472                           tblptru	equ	0xFF8
 14473                           tblptrh	equ	0xFF7
 14474                           tblptrl	equ	0xFF6
 14475                           tablat	equ	0xFF5
 14476                           prodh	equ	0xFF4
 14477                           prodl	equ	0xFF3
 14478                           intcon	equ	0xFF2
 14479                           intcon2	equ	0xFF1
 14480                           postinc0	equ	0xFEE
 14481                           wreg	equ	0xFE8
 14482                           indf1	equ	0xFE7
 14483                           fsr1h	equ	0xFE2
 14484                           fsr1l	equ	0xFE1
 14485                           indf2	equ	0xFDF
 14486                           postinc2	equ	0xFDE
 14487                           postdec2	equ	0xFDD
 14488                           plusw2	equ	0xFDB
 14489                           fsr2h	equ	0xFDA
 14490                           fsr2l	equ	0xFD9
 14491                           status	equ	0xFD8
 14492                           
 14493 ;; *************** function _vscp_getMajorVersion *****************
 14494 ;; Defined at:
 14495 ;;		line 3253 in file "../main.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;		None
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      unsigned char 
 14502 ;; Registers used:
 14503 ;;		wreg
 14504 ;; Tracked objects:
 14505 ;;		On entry : F/0
 14506 ;;		On exit  : F/0
 14507 ;;		Unchanged: F/0
 14508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14509 ;;      Params:         0       0       0       0       0       0       0
 14510 ;;      Locals:         0       0       0       0       0       0       0
 14511 ;;      Temps:          0       0       0       0       0       0       0
 14512 ;;      Totals:         0       0       0       0       0       0       0
 14513 ;;Total ram usage:        0 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    2
 14516 ;; This function calls:
 14517 ;;		Nothing
 14518 ;; This function is called by:
 14519 ;;		_vscp_readStdReg
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           	psect	text43
 14524  0046C0                     __ptext43:
 14525                           	opt stack 0
 14526  0046C0                     _vscp_getMajorVersion:
 14527                           	opt stack 25
 14528                           
 14529                           ; BSR set to: 0
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;main.c: 3254: return 1;
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;incstack = 0
 14536                           ;incstack = 0
 14537  0046C0  0C01               	retlw	1
 14538  0046C2                     __end_of_vscp_getMajorVersion:
 14539                           	opt stack 0
 14540                           tblptru	equ	0xFF8
 14541                           tblptrh	equ	0xFF7
 14542                           tblptrl	equ	0xFF6
 14543                           tablat	equ	0xFF5
 14544                           prodh	equ	0xFF4
 14545                           prodl	equ	0xFF3
 14546                           intcon	equ	0xFF2
 14547                           intcon2	equ	0xFF1
 14548                           postinc0	equ	0xFEE
 14549                           wreg	equ	0xFE8
 14550                           indf1	equ	0xFE7
 14551                           fsr1h	equ	0xFE2
 14552                           fsr1l	equ	0xFE1
 14553                           indf2	equ	0xFDF
 14554                           postinc2	equ	0xFDE
 14555                           postdec2	equ	0xFDD
 14556                           plusw2	equ	0xFDB
 14557                           fsr2h	equ	0xFDA
 14558                           fsr2l	equ	0xFD9
 14559                           status	equ	0xFD8
 14560                           
 14561 ;; *************** function _vscp_newNodeOnline *****************
 14562 ;; Defined at:
 14563 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;		None
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;		None
 14568 ;; Return value:  Size  Location     Type
 14569 ;;		None               void
 14570 ;; Registers used:
 14571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14572 ;; Tracked objects:
 14573 ;;		On entry : F/0
 14574 ;;		On exit  : F/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14577 ;;      Params:         0       0       0       0       0       0       0
 14578 ;;      Locals:         0       0       0       0       0       0       0
 14579 ;;      Temps:          1       0       0       0       0       0       0
 14580 ;;      Totals:         1       0       0       0       0       0       0
 14581 ;;Total ram usage:        1 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; Hardware stack levels required when called:    7
 14584 ;; This function calls:
 14585 ;;		_vscp_sendEvent
 14586 ;; This function is called by:
 14587 ;;		_vscp_handleProtocolEvent
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           	psect	text44
 14592  00433A                     __ptext44:
 14593                           	opt stack 0
 14594  00433A                     _vscp_newNodeOnline:
 14595                           	opt stack 21
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14599                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;incstack = 0
 14603                           ;incstack = 0
 14604  00433A  C097  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14605  00433E  0E0F               	movlw	15
 14606  004340  164C               	andwf	??_vscp_newNodeOnline,f,c
 14607  004342  044C               	decf	??_vscp_newNodeOnline,w,c
 14608  004344  E10E               	bnz	l1348
 14609                           
 14610                           ; BSR set to: 0
 14611  004346  517E               	movf	_vscp_nickname& (0+255),w,b
 14612  004348  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14613  00434C  62DF               	cpfseq	indf2,c
 14614  00434E  D009               	goto	l1348
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14618  004350  0E80               	movlw	128
 14619  004352  6FA5               	movwf	_vscp_omsg& (0+255),b
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14623  004354  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 14624                           
 14625                           ; BSR set to: 0
 14626                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14627  004356  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 14628  004358  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 14629                           
 14630                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14631  00435A  0E03               	movlw	3
 14632  00435C  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14636  00435E  EC14  F022         	call	_vscp_sendEvent	;wreg free
 14637  004362                     l1348:
 14638                           
 14639                           ; BSR set to: 0
 14640  004362  0012               	return	
 14641  004364                     __end_of_vscp_newNodeOnline:
 14642                           	opt stack 0
 14643                           tblptru	equ	0xFF8
 14644                           tblptrh	equ	0xFF7
 14645                           tblptrl	equ	0xFF6
 14646                           tablat	equ	0xFF5
 14647                           prodh	equ	0xFF4
 14648                           prodl	equ	0xFF3
 14649                           intcon	equ	0xFF2
 14650                           intcon2	equ	0xFF1
 14651                           postinc0	equ	0xFEE
 14652                           wreg	equ	0xFE8
 14653                           indf1	equ	0xFE7
 14654                           fsr1h	equ	0xFE2
 14655                           fsr1l	equ	0xFE1
 14656                           indf2	equ	0xFDF
 14657                           postinc2	equ	0xFDE
 14658                           postdec2	equ	0xFDD
 14659                           plusw2	equ	0xFDB
 14660                           fsr2h	equ	0xFDA
 14661                           fsr2l	equ	0xFD9
 14662                           status	equ	0xFD8
 14663                           
 14664 ;; *************** function _vscp_handleDropNickname *****************
 14665 ;; Defined at:
 14666 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;		None
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  bytes           1   12[COMRAM] unsigned char 
 14671 ;; Return value:  Size  Location     Type
 14672 ;;		None               void
 14673 ;; Registers used:
 14674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14675 ;; Tracked objects:
 14676 ;;		On entry : F/0
 14677 ;;		On exit  : F/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14680 ;;      Params:         0       0       0       0       0       0       0
 14681 ;;      Locals:         1       0       0       0       0       0       0
 14682 ;;      Temps:          0       0       0       0       0       0       0
 14683 ;;      Totals:         1       0       0       0       0       0       0
 14684 ;;Total ram usage:        1 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    5
 14687 ;; This function calls:
 14688 ;;		_vscp_init
 14689 ;;		_vscp_writeNicknamePermanent
 14690 ;; This function is called by:
 14691 ;;		_vscp_handleProtocolEvent
 14692 ;; This function uses a non-reentrant model
 14693 ;;
 14694                           
 14695                           	psect	text45
 14696  004284                     __ptext45:
 14697                           	opt stack 0
 14698  004284                     _vscp_handleDropNickname:
 14699                           	opt stack 23
 14700                           
 14701                           ; BSR set to: 0
 14702                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;incstack = 0
 14706                           ;incstack = 0
 14707  004284  5197               	movf	_vscp_imsg& (0+255),w,b
 14708  004286  0B0F               	andlw	15
 14709  004288  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 14710                           
 14711                           ; BSR set to: 0
 14712                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14713  00428A  500D               	movf	vscp_handleDropNickname@bytes,w,c
 14714  00428C  E012               	bz	l1344
 14715                           
 14716                           ; BSR set to: 0
 14717  00428E  517E               	movf	_vscp_nickname& (0+255),w,b
 14718  004290  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14719  004294  62DF               	cpfseq	indf2,c
 14720  004296  D00D               	goto	l1344
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14724  004298  040D               	decf	vscp_handleDropNickname@bytes,w,c
 14725  00429A  E005               	bz	l1343
 14726                           
 14727                           ; BSR set to: 0
 14728  00429C  0E01               	movlw	1
 14729  00429E  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 14730  0042A0  D008               	goto	l1344
 14731                           
 14732                           ; BSR set to: 0
 14733  0042A2  679E               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14734  0042A4  D006               	goto	l1344
 14735  0042A6                     l1343:
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14739  0042A6  697E               	setf	_vscp_nickname& (0+255),b
 14740                           
 14741                           ; BSR set to: 0
 14742                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14743  0042A8  0EFF               	movlw	255
 14744  0042AA  ECEF  F022         	call	_vscp_writeNicknamePermanent
 14745                           
 14746                           ;vscp_firmware.c: 481: vscp_init();
 14747  0042AE  ECA4  F020         	call	_vscp_init	;wreg free
 14748  0042B2                     l1344:
 14749                           
 14750                           ; BSR set to: 0
 14751  0042B2  0012               	return	
 14752  0042B4                     __end_of_vscp_handleDropNickname:
 14753                           	opt stack 0
 14754                           tblptru	equ	0xFF8
 14755                           tblptrh	equ	0xFF7
 14756                           tblptrl	equ	0xFF6
 14757                           tablat	equ	0xFF5
 14758                           prodh	equ	0xFF4
 14759                           prodl	equ	0xFF3
 14760                           intcon	equ	0xFF2
 14761                           intcon2	equ	0xFF1
 14762                           postinc0	equ	0xFEE
 14763                           wreg	equ	0xFE8
 14764                           indf1	equ	0xFE7
 14765                           fsr1h	equ	0xFE2
 14766                           fsr1l	equ	0xFE1
 14767                           indf2	equ	0xFDF
 14768                           postinc2	equ	0xFDE
 14769                           postdec2	equ	0xFDD
 14770                           plusw2	equ	0xFDB
 14771                           fsr2h	equ	0xFDA
 14772                           fsr2l	equ	0xFD9
 14773                           status	equ	0xFD8
 14774                           
 14775 ;; *************** function _vscp_init *****************
 14776 ;; Defined at:
 14777 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;		None
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;		None
 14782 ;; Return value:  Size  Location     Type
 14783 ;;		None               void
 14784 ;; Registers used:
 14785 ;;		wreg, status,2, cstack
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : F/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14791 ;;      Params:         0       0       0       0       0       0       0
 14792 ;;      Locals:         0       0       0       0       0       0       0
 14793 ;;      Temps:          0       0       0       0       0       0       0
 14794 ;;      Totals:         0       0       0       0       0       0       0
 14795 ;;Total ram usage:        0 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; Hardware stack levels required when called:    4
 14798 ;; This function calls:
 14799 ;;		_vscp_readNicknamePermanent
 14800 ;; This function is called by:
 14801 ;;		_main
 14802 ;;		_vscp_handleDropNickname
 14803 ;;		_vscp_handleProtocolEvent
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           	psect	text46
 14808  004148                     __ptext46:
 14809                           	opt stack 0
 14810  004148                     _vscp_init:
 14811                           	opt stack 23
 14812                           
 14813                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;incstack = 0
 14817                           ;incstack = 0
 14818  004148  0E02               	movlw	2
 14819  00414A  6E56               	movwf	_vscp_initledfunc,c
 14820                           
 14821                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14822  00414C  EC47  F023         	call	_vscp_readNicknamePermanent	;wreg free
 14823  004150  0100               	movlb	0	; () banked
 14824  004152  6F7E               	movwf	_vscp_nickname& (0+255),b
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14828  004154  677E               	tstfsz	_vscp_nickname& (0+255),b
 14829  004156  D001               	goto	l1285
 14830                           
 14831                           ; BSR set to: 0
 14832  004158  697E               	setf	_vscp_nickname& (0+255),b
 14833  00415A                     l1285:
 14834                           
 14835                           ; BSR set to: 0
 14836                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14837  00415A  6B97               	clrf	_vscp_imsg& (0+255),b
 14838                           
 14839                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14840  00415C  6B98               	clrf	(_vscp_imsg+1)& (0+255),b
 14841                           
 14842                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14843  00415E  6B99               	clrf	(_vscp_imsg+2)& (0+255),b
 14844  004160  6B9A               	clrf	(_vscp_imsg+3)& (0+255),b
 14845                           
 14846                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14847  004162  6B9B               	clrf	(_vscp_imsg+4)& (0+255),b
 14848                           
 14849                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14850  004164  6BA5               	clrf	_vscp_omsg& (0+255),b
 14851                           
 14852                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14853  004166  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 14854                           
 14855                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14856  004168  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 14857  00416A  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 14858                           
 14859                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14860  00416C  6BA9               	clrf	(_vscp_omsg+4)& (0+255),b
 14861                           
 14862                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14863  00416E  6A55               	clrf	_vscp_alarmstatus,c
 14864                           
 14865                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14866  004170  6A57               	clrf	_vscp_probe_address,c
 14867                           
 14868                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14869  004172  6B7F               	clrf	_vscp_node_state& (0+255),b
 14870                           
 14871                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14872  004174  6B80               	clrf	_vscp_node_substate& (0+255),b
 14873                           
 14874                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14875  004176  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 14876                           
 14877                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14878  004178  6A52               	clrf	_vscp_page_select,c
 14879  00417A  6A53               	clrf	_vscp_page_select+1,c
 14880                           
 14881                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14882  00417C  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 14883  00417E  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14884                           
 14885                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14886  004180  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14887  004182  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14888                           
 14889                           ;vscp_firmware.c: 155: vscp_second = 0;
 14890  004184  6B82               	clrf	_vscp_second& (0+255),b
 14891                           
 14892                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14893  004186  6B7D               	clrf	_vscp_minute& (0+255),b
 14894                           
 14895                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14896  004188  6B7B               	clrf	_vscp_hour& (0+255),b
 14897                           
 14898                           ; BSR set to: 0
 14899  00418A  0012               	return	
 14900  00418C                     __end_of_vscp_init:
 14901                           	opt stack 0
 14902                           tblptru	equ	0xFF8
 14903                           tblptrh	equ	0xFF7
 14904                           tblptrl	equ	0xFF6
 14905                           tablat	equ	0xFF5
 14906                           prodh	equ	0xFF4
 14907                           prodl	equ	0xFF3
 14908                           intcon	equ	0xFF2
 14909                           intcon2	equ	0xFF1
 14910                           postinc0	equ	0xFEE
 14911                           wreg	equ	0xFE8
 14912                           indf1	equ	0xFE7
 14913                           fsr1h	equ	0xFE2
 14914                           fsr1l	equ	0xFE1
 14915                           indf2	equ	0xFDF
 14916                           postinc2	equ	0xFDE
 14917                           postdec2	equ	0xFDD
 14918                           plusw2	equ	0xFDB
 14919                           fsr2h	equ	0xFDA
 14920                           fsr2l	equ	0xFD9
 14921                           status	equ	0xFD8
 14922                           
 14923 ;; *************** function _vscp_readNicknamePermanent *****************
 14924 ;; Defined at:
 14925 ;;		line 1358 in file "../main.c"
 14926 ;; Parameters:    Size  Location     Type
 14927 ;;		None
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;		None
 14930 ;; Return value:  Size  Location     Type
 14931 ;;                  1    wreg      unsigned char 
 14932 ;; Registers used:
 14933 ;;		wreg, status,2, cstack
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14939 ;;      Params:         0       0       0       0       0       0       0
 14940 ;;      Locals:         0       0       0       0       0       0       0
 14941 ;;      Temps:          0       0       0       0       0       0       0
 14942 ;;      Totals:         0       0       0       0       0       0       0
 14943 ;;Total ram usage:        0 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; Hardware stack levels required when called:    3
 14946 ;; This function calls:
 14947 ;;		_Read_b_eep
 14948 ;; This function is called by:
 14949 ;;		_vscp_init
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           	psect	text47
 14954  00468E                     __ptext47:
 14955                           	opt stack 0
 14956  00468E                     _vscp_readNicknamePermanent:
 14957                           	opt stack 23
 14958                           
 14959                           ;main.c: 1359: return Read_b_eep(0x01);
 14960                           
 14961                           ; BSR set to: 0
 14962                           ;incstack = 0
 14963                           ;incstack = 0
 14964  00468E  6A09               	clrf	?_Read_b_eep+1,c
 14965  004690  0E01               	movlw	1
 14966  004692  6E08               	movwf	?_Read_b_eep,c
 14967  004694  EF21  F023         	goto	_Read_b_eep	;wreg free
 14968  004698                     __end_of_vscp_readNicknamePermanent:
 14969                           	opt stack 0
 14970                           tblptru	equ	0xFF8
 14971                           tblptrh	equ	0xFF7
 14972                           tblptrl	equ	0xFF6
 14973                           tablat	equ	0xFF5
 14974                           prodh	equ	0xFF4
 14975                           prodl	equ	0xFF3
 14976                           intcon	equ	0xFF2
 14977                           intcon2	equ	0xFF1
 14978                           postinc0	equ	0xFEE
 14979                           wreg	equ	0xFE8
 14980                           indf1	equ	0xFE7
 14981                           fsr1h	equ	0xFE2
 14982                           fsr1l	equ	0xFE1
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           plusw2	equ	0xFDB
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function _vscp_handleSetNickname *****************
 14992 ;; Defined at:
 14993 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;		None
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;		None
 14998 ;; Return value:  Size  Location     Type
 14999 ;;		None               void
 15000 ;; Registers used:
 15001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15002 ;; Tracked objects:
 15003 ;;		On entry : F/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15007 ;;      Params:         0       0       0       0       0       0       0
 15008 ;;      Locals:         0       0       0       0       0       0       0
 15009 ;;      Temps:          0       0       0       0       0       0       0
 15010 ;;      Totals:         0       0       0       0       0       0       0
 15011 ;;Total ram usage:        0 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    4
 15014 ;; This function calls:
 15015 ;;		_vscp_writeNicknamePermanent
 15016 ;;		_vscp_setSegmentCRC
 15017 ;; This function is called by:
 15018 ;;		_vscp_handleProtocolEvent
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022                           	psect	text48
 15023  00444E                     __ptext48:
 15024                           	opt stack 0
 15025  00444E                     _vscp_handleSetNickname:
 15026                           	opt stack 24
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 15030                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 15031                           
 15032                           ;incstack = 0
 15033                           ;incstack = 0
 15034  00444E  5197               	movf	_vscp_imsg& (0+255),w,b
 15035  004450  0B0F               	andlw	15
 15036  004452  0A02               	xorlw	2
 15037  004454  E10D               	bnz	l1337
 15038                           
 15039                           ; BSR set to: 0
 15040  004456  517E               	movf	_vscp_nickname& (0+255),w,b
 15041  004458  EE20  F09D         	lfsr	2,_vscp_imsg+6
 15042  00445C  62DF               	cpfseq	indf2,c
 15043  00445E  D008               	goto	l1337
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 15047  004460  C09E  F07E         	movff	_vscp_imsg+7,_vscp_nickname
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 15051  004464  517E               	movf	_vscp_nickname& (0+255),w,b
 15052  004466  ECEF  F022         	call	_vscp_writeNicknamePermanent
 15053                           
 15054                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 15055  00446A  0E40               	movlw	64
 15056  00446C  ECE4  F022         	call	_vscp_setSegmentCRC
 15057  004470                     l1337:
 15058  004470  0012               	return	
 15059  004472                     __end_of_vscp_handleSetNickname:
 15060                           	opt stack 0
 15061                           tblptru	equ	0xFF8
 15062                           tblptrh	equ	0xFF7
 15063                           tblptrl	equ	0xFF6
 15064                           tablat	equ	0xFF5
 15065                           prodh	equ	0xFF4
 15066                           prodl	equ	0xFF3
 15067                           intcon	equ	0xFF2
 15068                           intcon2	equ	0xFF1
 15069                           postinc0	equ	0xFEE
 15070                           wreg	equ	0xFE8
 15071                           indf1	equ	0xFE7
 15072                           fsr1h	equ	0xFE2
 15073                           fsr1l	equ	0xFE1
 15074                           indf2	equ	0xFDF
 15075                           postinc2	equ	0xFDE
 15076                           postdec2	equ	0xFDD
 15077                           plusw2	equ	0xFDB
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8
 15081                           
 15082 ;; *************** function _vscp_handleHeartbeat *****************
 15083 ;; Defined at:
 15084 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;		None
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, status,2, status,0, cstack
 15093 ;; Tracked objects:
 15094 ;;		On entry : F/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15098 ;;      Params:         0       0       0       0       0       0       0
 15099 ;;      Locals:         0       0       0       0       0       0       0
 15100 ;;      Temps:          0       0       0       0       0       0       0
 15101 ;;      Totals:         0       0       0       0       0       0       0
 15102 ;;Total ram usage:        0 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    4
 15105 ;; This function calls:
 15106 ;;		_vscp_writeNicknamePermanent
 15107 ;;		_vscp_getSegmentCRC
 15108 ;;		_vscp_setSegmentCRC
 15109 ;; This function is called by:
 15110 ;;		_vscp_handleProtocolEvent
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           	psect	text49
 15115  004212                     __ptext49:
 15116                           	opt stack 0
 15117  004212                     _vscp_handleHeartbeat:
 15118                           	opt stack 24
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 15122                           
 15123                           ;incstack = 0
 15124                           ;incstack = 0
 15125  004212  EC4C  F023         	call	_vscp_getSegmentCRC	;wreg free
 15126  004216  0900               	iorlw	0
 15127  004218  E116               	bnz	l14972
 15128                           
 15129                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 15130                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 15131  00421A  0100               	movlb	0	; () banked
 15132  00421C  5197               	movf	_vscp_imsg& (0+255),w,b
 15133  00421E  0B0F               	andlw	15
 15134  004220  0A05               	xorlw	5
 15135  004222  E115               	bnz	l1333
 15136                           
 15137                           ; BSR set to: 0
 15138  004224  EC4C  F023         	call	_vscp_getSegmentCRC	;wreg free
 15139  004228  0100               	movlb	0	; () banked
 15140  00422A  199D               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 15141  00422C  E010               	bz	l1333
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15145  00422E  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15146  004230  ECE4  F022         	call	_vscp_setSegmentCRC
 15147                           
 15148                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 15149  004234  0100               	movlb	0	; () banked
 15150  004236  697E               	setf	_vscp_nickname& (0+255),b
 15151                           
 15152                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 15153  004238  0EFF               	movlw	255
 15154  00423A  ECEF  F022         	call	_vscp_writeNicknamePermanent
 15155                           
 15156                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 15157  00423E  0E01               	movlw	1
 15158  004240  0100               	movlb	0	; () banked
 15159  004242  6F7F               	movwf	_vscp_node_state& (0+255),b
 15160  004244  D004               	goto	l1333
 15161  004246                     l14972:
 15162                           
 15163                           ;vscp_firmware.c: 411: else {
 15164                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15165  004246  0100               	movlb	0	; () banked
 15166  004248  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15167  00424A  ECE4  F022         	call	_vscp_setSegmentCRC
 15168  00424E                     l1333:
 15169  00424E  0012               	return	
 15170  004250                     __end_of_vscp_handleHeartbeat:
 15171                           	opt stack 0
 15172                           tblptru	equ	0xFF8
 15173                           tblptrh	equ	0xFF7
 15174                           tblptrl	equ	0xFF6
 15175                           tablat	equ	0xFF5
 15176                           prodh	equ	0xFF4
 15177                           prodl	equ	0xFF3
 15178                           intcon	equ	0xFF2
 15179                           intcon2	equ	0xFF1
 15180                           postinc0	equ	0xFEE
 15181                           wreg	equ	0xFE8
 15182                           indf1	equ	0xFE7
 15183                           fsr1h	equ	0xFE2
 15184                           fsr1l	equ	0xFE1
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           postdec2	equ	0xFDD
 15188                           plusw2	equ	0xFDB
 15189                           fsr2h	equ	0xFDA
 15190                           fsr2l	equ	0xFD9
 15191                           status	equ	0xFD8
 15192                           
 15193 ;; *************** function _vscp_getMatrixInfo *****************
 15194 ;; Defined at:
 15195 ;;		line 3463 in file "../main.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;  pData           1    wreg     PTR unsigned char 
 15198 ;;		 -> vscp_omsg(13), 
 15199 ;; Auto vars:     Size  Location     Type
 15200 ;;  pData           1    0[COMRAM] PTR unsigned char 
 15201 ;;		 -> vscp_omsg(13), 
 15202 ;;  i               1    7[COMRAM] unsigned char 
 15203 ;; Return value:  Size  Location     Type
 15204 ;;		None               void
 15205 ;; Registers used:
 15206 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15207 ;; Tracked objects:
 15208 ;;		On entry : F/0
 15209 ;;		On exit  : F/0
 15210 ;;		Unchanged: 0/0
 15211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15212 ;;      Params:         0       0       0       0       0       0       0
 15213 ;;      Locals:         1       0       0       0       0       0       0
 15214 ;;      Temps:          0       0       0       0       0       0       0
 15215 ;;      Totals:         1       0       0       0       0       0       0
 15216 ;;Total ram usage:        1 bytes
 15217 ;; Hardware stack levels used:    1
 15218 ;; Hardware stack levels required when called:    2
 15219 ;; This function calls:
 15220 ;;		Nothing
 15221 ;; This function is called by:
 15222 ;;		_vscp_handleProtocolEvent
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           	psect	text50
 15227  0044B8                     __ptext50:
 15228                           	opt stack 0
 15229  0044B8                     _vscp_getMatrixInfo:
 15230                           	opt stack 26
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;main.c: 3464: uint8_t i;
 15234                           ;main.c: 3466: vscp_omsg.data[ 0 ] = 7;
 15235                           
 15236                           ;incstack = 0
 15237                           ;incstack = 0
 15238  0044B8  0E07               	movlw	7
 15239  0044BA  6FAA               	movwf	(_vscp_omsg+5)& (0+255),b
 15240                           
 15241                           ;main.c: 3467: vscp_omsg.data[ 1 ] = 72;
 15242  0044BC  0E48               	movlw	72
 15243  0044BE  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
 15244                           
 15245                           ;main.c: 3470: for ( i = 2; i < 8; i++ ) {
 15246  0044C0  0E02               	movlw	2
 15247  0044C2  6E08               	movwf	vscp_getMatrixInfo@i,c
 15248  0044C4                     l11872:
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;main.c: 3471: vscp_omsg.data[ i ] = 0;
 15252  0044C4  5008               	movf	vscp_getMatrixInfo@i,w,c
 15253  0044C6  0FAA               	addlw	low (_vscp_omsg+5)
 15254  0044C8  6ED9               	movwf	fsr2l,c
 15255  0044CA  6ADA               	clrf	fsr2h,c
 15256  0044CC  6ADF               	clrf	indf2,c
 15257                           
 15258                           ; BSR set to: 0
 15259  0044CE  2A08               	incf	vscp_getMatrixInfo@i,f,c
 15260                           
 15261                           ; BSR set to: 0
 15262  0044D0  0E07               	movlw	7
 15263  0044D2  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 15264  0044D4  D7F7               	goto	l11872
 15265                           
 15266                           ; BSR set to: 0
 15267  0044D6  0C07               	retlw	7
 15268  0044D8                     __end_of_vscp_getMatrixInfo:
 15269                           	opt stack 0
 15270                           tblptru	equ	0xFF8
 15271                           tblptrh	equ	0xFF7
 15272                           tblptrl	equ	0xFF6
 15273                           tablat	equ	0xFF5
 15274                           prodh	equ	0xFF4
 15275                           prodl	equ	0xFF3
 15276                           intcon	equ	0xFF2
 15277                           intcon2	equ	0xFF1
 15278                           postinc0	equ	0xFEE
 15279                           wreg	equ	0xFE8
 15280                           indf1	equ	0xFE7
 15281                           fsr1h	equ	0xFE2
 15282                           fsr1l	equ	0xFE1
 15283                           indf2	equ	0xFDF
 15284                           postinc2	equ	0xFDE
 15285                           postdec2	equ	0xFDD
 15286                           plusw2	equ	0xFDB
 15287                           fsr2h	equ	0xFDA
 15288                           fsr2l	equ	0xFD9
 15289                           status	equ	0xFD8
 15290                           
 15291 ;; *************** function _vscp_goBootloaderMode *****************
 15292 ;; Defined at:
 15293 ;;		line 3447 in file "../main.c"
 15294 ;; Parameters:    Size  Location     Type
 15295 ;;  algorithm       1    wreg     unsigned char 
 15296 ;; Auto vars:     Size  Location     Type
 15297 ;;  algorithm       1   11[COMRAM] unsigned char 
 15298 ;; Return value:  Size  Location     Type
 15299 ;;		None               void
 15300 ;; Registers used:
 15301 ;;		wreg, status,2, status,0, cstack
 15302 ;; Tracked objects:
 15303 ;;		On entry : F/0
 15304 ;;		On exit  : 0/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15307 ;;      Params:         0       0       0       0       0       0       0
 15308 ;;      Locals:         1       0       0       0       0       0       0
 15309 ;;      Temps:          0       0       0       0       0       0       0
 15310 ;;      Totals:         1       0       0       0       0       0       0
 15311 ;;Total ram usage:        1 bytes
 15312 ;; Hardware stack levels used:    1
 15313 ;; Hardware stack levels required when called:    3
 15314 ;; This function calls:
 15315 ;;		_Busy_eep
 15316 ;;		_Write_b_eep
 15317 ;; This function is called by:
 15318 ;;		_vscp_handleProtocolEvent
 15319 ;; This function uses a non-reentrant model
 15320 ;;
 15321                           
 15322                           	psect	text51
 15323  00454C                     __ptext51:
 15324                           	opt stack 0
 15325  00454C                     _vscp_goBootloaderMode:
 15326                           	opt stack 25
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;incstack = 0
 15330                           ;incstack = 0
 15331                           ;vscp_goBootloaderMode@algorithm stored from wreg
 15332  00454C  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;main.c: 3448: if ( 0x01 != algorithm ) return;
 15336  004550  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 15337  004552  E109               	bnz	l1123
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;main.c: 3452: (Busy_eep(), Write_b_eep(0x00,0xff));
 15341  004554  EC55  F023         	call	_Busy_eep	;wreg free
 15342  004558  6A09               	clrf	?_Write_b_eep+1,c
 15343  00455A  6A08               	clrf	?_Write_b_eep,c
 15344  00455C  0EFF               	movlw	255
 15345  00455E  680A               	setf	?_Write_b_eep+2,c
 15346  004560  EC28  F021         	call	_Write_b_eep	;wreg free
 15347  004564  00FF               	reset		;# 
 15348  004566                     l1123:
 15349  004566  0012               	return	
 15350  004568                     __end_of_vscp_goBootloaderMode:
 15351                           	opt stack 0
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           postinc0	equ	0xFEE
 15361                           wreg	equ	0xFE8
 15362                           indf1	equ	0xFE7
 15363                           fsr1h	equ	0xFE2
 15364                           fsr1l	equ	0xFE1
 15365                           indf2	equ	0xFDF
 15366                           postinc2	equ	0xFDE
 15367                           postdec2	equ	0xFDD
 15368                           plusw2	equ	0xFDB
 15369                           fsr2h	equ	0xFDA
 15370                           fsr2l	equ	0xFD9
 15371                           status	equ	0xFD8
 15372                           
 15373 ;; *************** function _vscp_handleProbeState *****************
 15374 ;; Defined at:
 15375 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;		None
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;		None
 15380 ;; Return value:  Size  Location     Type
 15381 ;;		None               void
 15382 ;; Registers used:
 15383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/0
 15386 ;;		On exit  : F/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15389 ;;      Params:         0       0       0       0       0       0       0
 15390 ;;      Locals:         0       0       0       0       0       0       0
 15391 ;;      Temps:          0       0       0       0       0       0       0
 15392 ;;      Totals:         0       0       0       0       0       0       0
 15393 ;;Total ram usage:        0 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; Hardware stack levels required when called:    8
 15396 ;; This function calls:
 15397 ;;		_vscp_goActiveState
 15398 ;;		_vscp_writeNicknamePermanent
 15399 ;;		_vscp_sendEvent
 15400 ;;		_vscp_setSegmentCRC
 15401 ;; This function is called by:
 15402 ;;		_main
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text52
 15407  003DB4                     __ptext52:
 15408                           	opt stack 0
 15409  003DB4                     _vscp_handleProbeState:
 15410                           	opt stack 21
 15411                           
 15412                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15413                           
 15414                           ;incstack = 0
 15415                           ;incstack = 0
 15416  003DB4  D053               	goto	l12956
 15417  003DB6                     l12886:
 15418                           
 15419                           ; BSR set to: 0
 15420                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15421  003DB6  2857               	incf	_vscp_probe_address,w,c
 15422  003DB8  E010               	bz	l12902
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15426  003DBA  0E81               	movlw	129
 15427  003DBC  6FA5               	movwf	_vscp_omsg& (0+255),b
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15431  003DBE  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15435  003DC0  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15436  003DC2  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15437                           
 15438                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15439  003DC4  0E02               	movlw	2
 15440  003DC6  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15441                           
 15442                           ; BSR set to: 0
 15443                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15444  003DC8  C057  F0AA         	movff	_vscp_probe_address,_vscp_omsg+5
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15448  003DCC  EC14  F022         	call	_vscp_sendEvent	;wreg free
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15452  003DD0  0E01               	movlw	1
 15453  003DD2  6F80               	movwf	_vscp_node_substate& (0+255),b
 15454  003DD4                     l12900:
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15458  003DD4  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15459  003DD6  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15460                           
 15461                           ;vscp_firmware.c: 221: }
 15462  003DD8  D048               	goto	l1300
 15463  003DDA                     l12902:
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;vscp_firmware.c: 222: else {
 15467                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15468  003DDA  0E04               	movlw	4
 15469  003DDC  6F7F               	movwf	_vscp_node_state& (0+255),b
 15470                           
 15471                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15472  003DDE  0E81               	movlw	129
 15473  003DE0  6FA5               	movwf	_vscp_omsg& (0+255),b
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15477  003DE2  69AA               	setf	(_vscp_omsg+5)& (0+255),b
 15478                           
 15479                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15480  003DE4  0E07               	movlw	7
 15481  003DE6  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15485  003DE8  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15486  003DEA  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15487                           
 15488                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15489  003DEC  0E03               	movlw	3
 15490  003DEE  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15494  003DF0  EC14  F022         	call	_vscp_sendEvent	;wreg free
 15495  003DF4  D03A               	goto	l1300
 15496  003DF6                     l1301:
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15500  003DF6  AF97               	btfss	_vscp_imsg& (0+255),7,b
 15501  003DF8  D00F               	goto	l12926
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15505                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15506  003DFA  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
 15507  003DFC  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15508  003DFE  E135               	bnz	l1300
 15509                           
 15510                           ; BSR set to: 0
 15511  003E00  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
 15512  003E02  0A03               	xorlw	3
 15513  003E04  E132               	bnz	l1300
 15514                           
 15515                           ; BSR set to: 0
 15516                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15517  003E06  6657               	tstfsz	_vscp_probe_address,c
 15518  003E08  D003               	goto	l12920
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15522  003E0A  0E02               	movlw	2
 15523  003E0C  6F7F               	movwf	_vscp_node_state& (0+255),b
 15524  003E0E  D7E2               	goto	l12900
 15525  003E10                     l12920:
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;vscp_firmware.c: 257: else {
 15529                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15530  003E10  2A57               	incf	_vscp_probe_address,f,c
 15531                           
 15532                           ; BSR set to: 0
 15533                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15534  003E12  6B80               	clrf	_vscp_node_substate& (0+255),b
 15535  003E14                     l12924:
 15536                           
 15537                           ; BSR set to: 0
 15538                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15539  003E14  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15540  003E16  D029               	goto	l1300
 15541  003E18                     l12926:
 15542                           
 15543                           ; BSR set to: 0
 15544                           ;vscp_firmware.c: 267: else {
 15545                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15546  003E18  0EE9               	movlw	233
 15547  003E1A  5D6E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15548  003E1C  0E03               	movlw	3
 15549  003E1E  596F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15550  003E20  E324               	bnc	l1300
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15554  003E22  2B81               	incf	_vscp_probe_cnt& (0+255),f,b
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15558  003E24  0E02               	movlw	2
 15559  003E26  6581               	cpfsgt	_vscp_probe_cnt& (0+255),b
 15560  003E28  D017               	goto	l1308
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15564  003E2A  6657               	tstfsz	_vscp_probe_address,c
 15565  003E2C  D005               	goto	l1309
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15569  003E2E  2A57               	incf	_vscp_probe_address,f,c
 15570                           
 15571                           ; BSR set to: 0
 15572                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15573  003E30  6B80               	clrf	_vscp_node_substate& (0+255),b
 15574                           
 15575                           ; BSR set to: 0
 15576                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15577  003E32  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15578  003E34  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15579  003E36  D7EE               	goto	l12924
 15580  003E38                     l1309:
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;vscp_firmware.c: 285: else {
 15584                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15585  003E38  C057  F07E         	movff	_vscp_probe_address,_vscp_nickname
 15586                           
 15587                           ; BSR set to: 0
 15588                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15589  003E3C  0E03               	movlw	3
 15590  003E3E  6F7F               	movwf	_vscp_node_state& (0+255),b
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15594  003E40  6B80               	clrf	_vscp_node_substate& (0+255),b
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15598  003E42  517E               	movf	_vscp_nickname& (0+255),w,b
 15599  003E44  ECEF  F022         	call	_vscp_writeNicknamePermanent
 15600                           
 15601                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15602  003E48  0E40               	movlw	64
 15603  003E4A  ECE4  F022         	call	_vscp_setSegmentCRC
 15604                           
 15605                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15606  003E4E  0100               	movlb	0	; () banked
 15607  003E50  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15611  003E52  EC6C  F022         	call	_vscp_goActiveState	;wreg free
 15612  003E56  D009               	goto	l1300
 15613  003E58                     l1308:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;vscp_firmware.c: 300: else {
 15617                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15618  003E58  6B80               	clrf	_vscp_node_substate& (0+255),b
 15619  003E5A  D007               	goto	l1300
 15620  003E5C                     l12956:
 15621  003E5C  0100               	movlb	0	; () banked
 15622  003E5E  5180               	movf	_vscp_node_substate& (0+255),w,b
 15623                           
 15624                           ; Switch size 1, requested type "space"
 15625                           ; Number of cases is 3, Range of values is 0 to 2
 15626                           ; switch strategies available:
 15627                           ; Name         Instructions Cycles
 15628                           ; simple_byte           10     6 (average)
 15629                           ;	Chosen strategy is simple_byte
 15630  003E60  E0AA               	bz	l12886
 15631  003E62  0A01               	xorlw	1	; case 1
 15632  003E64  E0C8               	bz	l1301
 15633  003E66  0A03               	xorlw	3	; case 2
 15634  003E68  E1F7               	bnz	l1308
 15635  003E6A                     l1300:
 15636                           
 15637                           ; BSR set to: 0
 15638                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15639  003E6A  6B97               	clrf	_vscp_imsg& (0+255),b
 15640                           
 15641                           ; BSR set to: 0
 15642  003E6C  0012               	return	
 15643  003E6E                     __end_of_vscp_handleProbeState:
 15644                           	opt stack 0
 15645                           tblptru	equ	0xFF8
 15646                           tblptrh	equ	0xFF7
 15647                           tblptrl	equ	0xFF6
 15648                           tablat	equ	0xFF5
 15649                           prodh	equ	0xFF4
 15650                           prodl	equ	0xFF3
 15651                           intcon	equ	0xFF2
 15652                           intcon2	equ	0xFF1
 15653                           postinc0	equ	0xFEE
 15654                           wreg	equ	0xFE8
 15655                           indf1	equ	0xFE7
 15656                           fsr1h	equ	0xFE2
 15657                           fsr1l	equ	0xFE1
 15658                           indf2	equ	0xFDF
 15659                           postinc2	equ	0xFDE
 15660                           postdec2	equ	0xFDD
 15661                           plusw2	equ	0xFDB
 15662                           fsr2h	equ	0xFDA
 15663                           fsr2l	equ	0xFD9
 15664                           status	equ	0xFD8
 15665                           
 15666 ;; *************** function _vscp_goActiveState *****************
 15667 ;; Defined at:
 15668 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;		None
 15671 ;; Auto vars:     Size  Location     Type
 15672 ;;		None
 15673 ;; Return value:  Size  Location     Type
 15674 ;;		None               void
 15675 ;; Registers used:
 15676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15677 ;; Tracked objects:
 15678 ;;		On entry : 0/0
 15679 ;;		On exit  : F/0
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15682 ;;      Params:         0       0       0       0       0       0       0
 15683 ;;      Locals:         0       0       0       0       0       0       0
 15684 ;;      Temps:          0       0       0       0       0       0       0
 15685 ;;      Totals:         0       0       0       0       0       0       0
 15686 ;;Total ram usage:        0 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; Hardware stack levels required when called:    7
 15689 ;; This function calls:
 15690 ;;		_vscp_sendEvent
 15691 ;; This function is called by:
 15692 ;;		_main
 15693 ;;		_vscp_handleProbeState
 15694 ;; This function uses a non-reentrant model
 15695 ;;
 15696                           
 15697                           	psect	text53
 15698  0044D8                     __ptext53:
 15699                           	opt stack 0
 15700  0044D8                     _vscp_goActiveState:
 15701                           	opt stack 21
 15702                           
 15703                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15704                           
 15705                           ; BSR set to: 0
 15706                           ;incstack = 0
 15707                           ;incstack = 0
 15708  0044D8  0E81               	movlw	129
 15709  0044DA  0100               	movlb	0	; () banked
 15710  0044DC  6FA5               	movwf	_vscp_omsg& (0+255),b
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15714  0044DE  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15715                           
 15716                           ; BSR set to: 0
 15717                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15718  0044E0  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15719  0044E2  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15720                           
 15721                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15722  0044E4  0E02               	movlw	2
 15723  0044E6  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15727  0044E8  C07E  F0AA         	movff	_vscp_nickname,_vscp_omsg+5
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15731  0044EC  EC14  F022         	call	_vscp_sendEvent	;wreg free
 15732                           
 15733                           ; BSR set to: 0
 15734                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15735  0044F0  0E01               	movlw	1
 15736  0044F2  6E56               	movwf	_vscp_initledfunc,c
 15737                           
 15738                           ; BSR set to: 0
 15739  0044F4  0C01               	retlw	1
 15740  0044F6                     __end_of_vscp_goActiveState:
 15741                           	opt stack 0
 15742                           tblptru	equ	0xFF8
 15743                           tblptrh	equ	0xFF7
 15744                           tblptrl	equ	0xFF6
 15745                           tablat	equ	0xFF5
 15746                           prodh	equ	0xFF4
 15747                           prodl	equ	0xFF3
 15748                           intcon	equ	0xFF2
 15749                           intcon2	equ	0xFF1
 15750                           postinc0	equ	0xFEE
 15751                           wreg	equ	0xFE8
 15752                           indf1	equ	0xFE7
 15753                           fsr1h	equ	0xFE2
 15754                           fsr1l	equ	0xFE1
 15755                           indf2	equ	0xFDF
 15756                           postinc2	equ	0xFDE
 15757                           postdec2	equ	0xFDD
 15758                           plusw2	equ	0xFDB
 15759                           fsr2h	equ	0xFDA
 15760                           fsr2l	equ	0xFD9
 15761                           status	equ	0xFD8
 15762                           
 15763 ;; *************** function _vscp_sendEvent *****************
 15764 ;; Defined at:
 15765 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;		None
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;  rv              1    0        unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;                  1    wreg      unsigned char 
 15772 ;; Registers used:
 15773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : F/0
 15776 ;;		On exit  : F/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15779 ;;      Params:         0       0       0       0       0       0       0
 15780 ;;      Locals:         1       0       0       0       0       0       0
 15781 ;;      Temps:          0       0       0       0       0       0       0
 15782 ;;      Totals:         1       0       0       0       0       0       0
 15783 ;;Total ram usage:        1 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    6
 15786 ;; This function calls:
 15787 ;;		_sendVSCPFrame
 15788 ;; This function is called by:
 15789 ;;		_vscp_handleProbeState
 15790 ;;		_vscp_goActiveState
 15791 ;;		_vscp_sendHeartBeat
 15792 ;;		_vscp_newNodeOnline
 15793 ;;		_vscp_handleProtocolEvent
 15794 ;; This function uses a non-reentrant model
 15795 ;;
 15796                           
 15797                           	psect	text54
 15798  004428                     __ptext54:
 15799                           	opt stack 0
 15800  004428                     _vscp_sendEvent:
 15801                           	opt stack 21
 15802                           
 15803                           ; BSR set to: 0
 15804                           
 15805                           ; BSR set to: 0
 15806                           ;incstack = 0
 15807                           ;incstack = 0
 15808  004428  C0A7  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15809  00442C  C0A8  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15810  004430  C0A9  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15811  004434  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15812  004438  C0A6  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15813  00443C  51A5               	movf	_vscp_omsg& (0+255),w,b
 15814  00443E  0B0F               	andlw	15
 15815  004440  6E44               	movwf	?_sendVSCPFrame+5,c
 15816  004442  0E00               	movlw	high (_vscp_omsg+5)
 15817  004444  6E46               	movwf	?_sendVSCPFrame+7,c
 15818  004446  0EAA               	movlw	low (_vscp_omsg+5)
 15819  004448  6E45               	movwf	?_sendVSCPFrame+6,c
 15820  00444A  EF37  F01F         	goto	_sendVSCPFrame	;wreg free
 15821  00444E                     __end_of_vscp_sendEvent:
 15822                           	opt stack 0
 15823                           tblptru	equ	0xFF8
 15824                           tblptrh	equ	0xFF7
 15825                           tblptrl	equ	0xFF6
 15826                           tablat	equ	0xFF5
 15827                           prodh	equ	0xFF4
 15828                           prodl	equ	0xFF3
 15829                           intcon	equ	0xFF2
 15830                           intcon2	equ	0xFF1
 15831                           postinc0	equ	0xFEE
 15832                           wreg	equ	0xFE8
 15833                           indf1	equ	0xFE7
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function _sendVSCPFrame *****************
 15845 ;; Defined at:
 15846 ;;		line 3522 in file "../main.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  vscpclass       2   62[COMRAM] unsigned short 
 15849 ;;  vscptype        1   64[COMRAM] unsigned char 
 15850 ;;  nodeid          1   65[COMRAM] unsigned char 
 15851 ;;  priority        1   66[COMRAM] unsigned char 
 15852 ;;  size            1   67[COMRAM] unsigned char 
 15853 ;;  pData           2   68[COMRAM] PTR unsigned char 
 15854 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 15855 ;; Auto vars:     Size  Location     Type
 15856 ;;  id              4   70[COMRAM] unsigned long 
 15857 ;; Return value:  Size  Location     Type
 15858 ;;                  1    wreg      unsigned char 
 15859 ;; Registers used:
 15860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15861 ;; Tracked objects:
 15862 ;;		On entry : F/0
 15863 ;;		On exit  : F/0
 15864 ;;		Unchanged: 0/0
 15865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15866 ;;      Params:         8       0       0       0       0       0       0
 15867 ;;      Locals:         4       0       0       0       0       0       0
 15868 ;;      Temps:          0      20       0       0       0       0       0
 15869 ;;      Totals:        12      20       0       0       0       0       0
 15870 ;;Total ram usage:       32 bytes
 15871 ;; Hardware stack levels used:    1
 15872 ;; Hardware stack levels required when called:    5
 15873 ;; This function calls:
 15874 ;;		_sendCANFrame
 15875 ;; This function is called by:
 15876 ;;		_doApplicationOneSecondWork
 15877 ;;		_SendInformationEvent
 15878 ;;		_vscp_sendEvent
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           	psect	text55
 15883  003E6E                     __ptext55:
 15884                           	opt stack 0
 15885  003E6E                     _sendVSCPFrame:
 15886                           	opt stack 23
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;main.c: 3523: uint32_t id = ( (uint32_t)priority << 26 ) |
 15890                           ;main.c: 3524: ( (uint32_t)vscpclass << 16 ) |
 15891                           ;main.c: 3525: ( (uint32_t)vscptype << 8 ) |
 15892                           ;main.c: 3526: nodeid;
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;incstack = 0
 15896                           ;incstack = 0
 15897  003E6E  C041  F0BC         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15898  003E72  6BBD               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15899  003E74  6BBE               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15900  003E76  6BBF               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15901  003E78  C0BE  F0BF         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15902  003E7C  C0BD  F0BE         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15903  003E80  C0BC  F0BD         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15904  003E84  6BBC               	clrf	??_sendVSCPFrame& (0+255),b
 15905  003E86  503F               	movf	sendVSCPFrame@vscpclass,w,c
 15906  003E88  6FC0               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15907  003E8A  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 15908  003E8C  6FC1               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15909  003E8E  6BC2               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15910  003E90  6BC3               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15911  003E92  C0C1  F0C3         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15912  003E96  C0C0  F0C2         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15913  003E9A  6BC1               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15914  003E9C  6BC0               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15915  003E9E  C043  F0C4         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15916  003EA2  6BC5               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15917  003EA4  6BC6               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15918  003EA6  6BC7               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15919  003EA8  0E1A               	movlw	26
 15920  003EAA                     u18255:
 15921  003EAA  90D8               	bcf	status,0,c
 15922  003EAC  37C4               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15923  003EAE  37C5               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15924  003EB0  37C6               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15925  003EB2  37C7               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15926  003EB4  2EE8               	decfsz	wreg,f,c
 15927  003EB6  D7F9               	goto	u18255
 15928  003EB8  51C0               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15929  003EBA  11C4               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15930  003EBC  6FC8               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15931  003EBE  51C1               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15932  003EC0  11C5               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15933  003EC2  6FC9               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15934  003EC4  51C2               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15935  003EC6  11C6               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15936  003EC8  6FCA               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15937  003ECA  51C3               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15938  003ECC  11C7               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15939  003ECE  6FCB               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15940  003ED0  51BC               	movf	??_sendVSCPFrame& (0+255),w,b
 15941  003ED2  11C8               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15942  003ED4  6FCC               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15943  003ED6  51BD               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15944  003ED8  11C9               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15945  003EDA  6FCD               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15946  003EDC  51BE               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15947  003EDE  11CA               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15948  003EE0  6FCE               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15949  003EE2  51BF               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15950  003EE4  11CB               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15951  003EE6  6FCF               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15952  003EE8  5042               	movf	sendVSCPFrame@nodeid,w,c
 15953  003EEA  11CC               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15954  003EEC  6E47               	movwf	sendVSCPFrame@id,c
 15955  003EEE  51CD               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15956  003EF0  6E48               	movwf	sendVSCPFrame@id+1,c
 15957  003EF2  51CE               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15958  003EF4  6E49               	movwf	sendVSCPFrame@id+2,c
 15959  003EF6  51CF               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15960  003EF8  6E4A               	movwf	sendVSCPFrame@id+3,c
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;main.c: 3528: if ( !sendCANFrame( id, size, pData ) ) {
 15964  003EFA  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 15965  003EFE  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15966  003F02  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15967  003F06  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15968  003F0A  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15969  003F0E  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15970  003F12  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 15971  003F16  ECE8  F020         	call	_sendCANFrame	;wreg free
 15972  003F1A  0900               	iorlw	0
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;main.c: 3529: return 0;
 15976  003F1C  0E00               	movlw	0
 15977  003F1E  A4D8               	btfss	status,2,c
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;main.c: 3530: }
 15981                           ;main.c: 3532: return 1;
 15982  003F20  0E01               	movlw	1
 15983                           
 15984                           ; BSR set to: 0
 15985  003F22  0012               	return	
 15986  003F24                     __end_of_sendVSCPFrame:
 15987                           	opt stack 0
 15988                           tblptru	equ	0xFF8
 15989                           tblptrh	equ	0xFF7
 15990                           tblptrl	equ	0xFF6
 15991                           tablat	equ	0xFF5
 15992                           prodh	equ	0xFF4
 15993                           prodl	equ	0xFF3
 15994                           intcon	equ	0xFF2
 15995                           intcon2	equ	0xFF1
 15996                           postinc0	equ	0xFEE
 15997                           wreg	equ	0xFE8
 15998                           indf1	equ	0xFE7
 15999                           fsr1h	equ	0xFE2
 16000                           fsr1l	equ	0xFE1
 16001                           indf2	equ	0xFDF
 16002                           postinc2	equ	0xFDE
 16003                           postdec2	equ	0xFDD
 16004                           plusw2	equ	0xFDB
 16005                           fsr2h	equ	0xFDA
 16006                           fsr2l	equ	0xFD9
 16007                           status	equ	0xFD8
 16008                           
 16009 ;; *************** function _sendCANFrame *****************
 16010 ;; Defined at:
 16011 ;;		line 3567 in file "../main.c"
 16012 ;; Parameters:    Size  Location     Type
 16013 ;;  id              4   54[COMRAM] unsigned long 
 16014 ;;  dlc             1   58[COMRAM] unsigned char 
 16015 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 16016 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16017 ;; Auto vars:     Size  Location     Type
 16018 ;;  rv              1   61[COMRAM] unsigned char 
 16019 ;; Return value:  Size  Location     Type
 16020 ;;                  1    wreg      unsigned char 
 16021 ;; Registers used:
 16022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16023 ;; Tracked objects:
 16024 ;;		On entry : F/0
 16025 ;;		On exit  : F/0
 16026 ;;		Unchanged: 0/0
 16027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16028 ;;      Params:         7       0       0       0       0       0       0
 16029 ;;      Locals:         1       0       0       0       0       0       0
 16030 ;;      Temps:          0       0       0       0       0       0       0
 16031 ;;      Totals:         8       0       0       0       0       0       0
 16032 ;;Total ram usage:        8 bytes
 16033 ;; Hardware stack levels used:    1
 16034 ;; Hardware stack levels required when called:    4
 16035 ;; This function calls:
 16036 ;;		_ECANSendMessage
 16037 ;; This function is called by:
 16038 ;;		_sendVSCPFrame
 16039 ;; This function uses a non-reentrant model
 16040 ;;
 16041                           
 16042                           	psect	text56
 16043  0041D0                     __ptext56:
 16044                           	opt stack 0
 16045  0041D0                     _sendCANFrame:
 16046                           	opt stack 23
 16047                           
 16048                           ; BSR set to: 0
 16049                           ;main.c: 3568: uint8_t rv = 0;
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;incstack = 0
 16053                           ;incstack = 0
 16054  0041D0  6A3E               	clrf	sendCANFrame@rv,c
 16055                           
 16056                           ;main.c: 3569: sendTimer = 0;
 16057  0041D2  6B79               	clrf	_sendTimer& (0+255),b
 16058                           
 16059                           ;main.c: 3571: while ( sendTimer < 1 ) {
 16060  0041D4  D017               	goto	l14944
 16061  0041D6                     l14940:
 16062                           
 16063                           ; BSR set to: 0
 16064                           ;main.c: 3572: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16065  0041D6  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 16066  0041DA  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16067  0041DE  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16068  0041E2  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16069  0041E6  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16070  0041EA  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16071  0041EE  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16072  0041F2  0E20               	movlw	32
 16073  0041F4  6E19               	movwf	?_ECANSendMessage+7,c
 16074  0041F6  ECDC  F018         	call	_ECANSendMessage	;wreg free
 16075  0041FA  0900               	iorlw	0
 16076  0041FC  E003               	bz	l14944
 16077                           
 16078                           ;main.c: 3573: rv = 1;
 16079  0041FE  0E01               	movlw	1
 16080  004200  6E3E               	movwf	sendCANFrame@rv,c
 16081                           
 16082                           ;main.c: 3574: break;
 16083  004202  D003               	goto	l1154
 16084  004204                     l14944:
 16085  004204  0100               	movlb	0	; () banked
 16086  004206  5179               	movf	_sendTimer& (0+255),w,b
 16087  004208  E0E6               	bz	l14940
 16088  00420A                     l1154:
 16089                           
 16090                           ;main.c: 3575: }
 16091                           ;main.c: 3576: }
 16092                           ;main.c: 3578: vscp_omsg.flags = 0;
 16093  00420A  0100               	movlb	0	; () banked
 16094  00420C  6BA5               	clrf	_vscp_omsg& (0+255),b
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;main.c: 3580: return rv;
 16098  00420E  503E               	movf	sendCANFrame@rv,w,c
 16099                           
 16100                           ; BSR set to: 0
 16101  004210  0012               	return	
 16102  004212                     __end_of_sendCANFrame:
 16103                           	opt stack 0
 16104                           tblptru	equ	0xFF8
 16105                           tblptrh	equ	0xFF7
 16106                           tblptrl	equ	0xFF6
 16107                           tablat	equ	0xFF5
 16108                           prodh	equ	0xFF4
 16109                           prodl	equ	0xFF3
 16110                           intcon	equ	0xFF2
 16111                           intcon2	equ	0xFF1
 16112                           postinc0	equ	0xFEE
 16113                           wreg	equ	0xFE8
 16114                           indf1	equ	0xFE7
 16115                           fsr1h	equ	0xFE2
 16116                           fsr1l	equ	0xFE1
 16117                           indf2	equ	0xFDF
 16118                           postinc2	equ	0xFDE
 16119                           postdec2	equ	0xFDD
 16120                           plusw2	equ	0xFDB
 16121                           fsr2h	equ	0xFDA
 16122                           fsr2l	equ	0xFD9
 16123                           status	equ	0xFD8
 16124                           
 16125 ;; *************** function _ECANSendMessage *****************
 16126 ;; Defined at:
 16127 ;;		line 617 in file "../ECAN.c"
 16128 ;; Parameters:    Size  Location     Type
 16129 ;;  id              4   17[COMRAM] unsigned long 
 16130 ;;  data            2   21[COMRAM] PTR unsigned char 
 16131 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16132 ;;  dataLen         1   23[COMRAM] unsigned char 
 16133 ;;  msgFlags        1   24[COMRAM] enum E16315
 16134 ;; Auto vars:     Size  Location     Type
 16135 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 16136 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16137 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16138 ;;		 -> B0CON(1), 
 16139 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 16140 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16141 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16142 ;;		 -> B0CON(1), 
 16143 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 16144 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16145 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16146 ;;		 -> B0CON(1), 
 16147 ;;  i               1   51[COMRAM] unsigned char 
 16148 ;;  temp            1   50[COMRAM] unsigned char 
 16149 ;;  tempBSEL0       1   47[COMRAM] struct .
 16150 ;;  j               1   46[COMRAM] unsigned char 
 16151 ;;  buffers         1   45[COMRAM] unsigned char 
 16152 ;;  mode            1   44[COMRAM] unsigned char 
 16153 ;; Return value:  Size  Location     Type
 16154 ;;                  1    wreg      enum E15660
 16155 ;; Registers used:
 16156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16157 ;; Tracked objects:
 16158 ;;		On entry : F/0
 16159 ;;		On exit  : 0/0
 16160 ;;		Unchanged: 0/0
 16161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16162 ;;      Params:         8       0       0       0       0       0       0
 16163 ;;      Locals:        28       0       0       0       0       0       0
 16164 ;;      Temps:          1       0       0       0       0       0       0
 16165 ;;      Totals:        37       0       0       0       0       0       0
 16166 ;;Total ram usage:       37 bytes
 16167 ;; Hardware stack levels used:    1
 16168 ;; Hardware stack levels required when called:    3
 16169 ;; This function calls:
 16170 ;;		__CANIDToRegs
 16171 ;; This function is called by:
 16172 ;;		_sendCANFrame
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text57
 16177  0031B8                     __ptext57:
 16178                           	opt stack 0
 16179  0031B8                     _ECANSendMessage:
 16180                           	opt stack 23
 16181                           
 16182                           ; BSR set to: 0
 16183                           ;ECAN.c: 619: BYTE mode;
 16184                           ;ECAN.c: 620: BYTE buffers;
 16185                           ;ECAN.c: 628: BYTE i,j;
 16186                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16187                           ;ECAN.c: 630: BYTE* pb[9];
 16188                           ;ECAN.c: 631: BYTE temp;
 16189                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16190                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;incstack = 0
 16194                           ;incstack = 0
 16195  0031B8  0E0F               	movlw	15	;volatile
 16196  0031BA  6E1C               	movwf	ECANSendMessage@pb+1,c
 16197  0031BC  0E40               	movlw	64	;volatile
 16198  0031BE  6E1B               	movwf	ECANSendMessage@pb,c
 16199                           
 16200                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16201  0031C0  0E0F               	movlw	15	;volatile
 16202  0031C2  6E1E               	movwf	ECANSendMessage@pb+3,c
 16203  0031C4  0E30               	movlw	48	;volatile
 16204  0031C6  6E1D               	movwf	ECANSendMessage@pb+2,c
 16205                           
 16206                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16207  0031C8  0E0F               	movlw	15	;volatile
 16208  0031CA  6E20               	movwf	ECANSendMessage@pb+5,c
 16209  0031CC  0E20               	movlw	32	;volatile
 16210  0031CE  6E1F               	movwf	ECANSendMessage@pb+4,c
 16211                           
 16212                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16213  0031D0  0E0E               	movlw	14	;volatile
 16214  0031D2  6E22               	movwf	ECANSendMessage@pb+7,c
 16215  0031D4  0E20               	movlw	32	;volatile
 16216  0031D6  6E21               	movwf	ECANSendMessage@pb+6,c
 16217                           
 16218                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16219  0031D8  0E0E               	movlw	14	;volatile
 16220  0031DA  6E24               	movwf	ECANSendMessage@pb+9,c
 16221  0031DC  0E30               	movlw	48	;volatile
 16222  0031DE  6E23               	movwf	ECANSendMessage@pb+8,c
 16223                           
 16224                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16225  0031E0  0E0E               	movlw	14	;volatile
 16226  0031E2  6E26               	movwf	ECANSendMessage@pb+11,c
 16227  0031E4  0E40               	movlw	64	;volatile
 16228  0031E6  6E25               	movwf	ECANSendMessage@pb+10,c
 16229                           
 16230                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16231  0031E8  0E0E               	movlw	14	;volatile
 16232  0031EA  6E28               	movwf	ECANSendMessage@pb+13,c
 16233  0031EC  0E50               	movlw	80	;volatile
 16234  0031EE  6E27               	movwf	ECANSendMessage@pb+12,c
 16235                           
 16236                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16237  0031F0  0E0E               	movlw	14	;volatile
 16238  0031F2  6E2A               	movwf	ECANSendMessage@pb+15,c
 16239  0031F4  0E60               	movlw	96	;volatile
 16240  0031F6  6E29               	movwf	ECANSendMessage@pb+14,c
 16241                           
 16242                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16243  0031F8  0E0E               	movlw	14	;volatile
 16244  0031FA  6E2C               	movwf	ECANSendMessage@pb+17,c
 16245  0031FC  0E70               	movlw	112	;volatile
 16246  0031FE  6E2B               	movwf	ECANSendMessage@pb+16,c
 16247                           
 16248                           ; BSR set to: 14
 16249                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16250  003200  5077               	movf	3959,w,c	;volatile
 16251  003202  0BC0               	andlw	192
 16252  003204  6E2D               	movwf	ECANSendMessage@mode,c
 16253                           
 16254                           ; BSR set to: 14
 16255                           ;ECAN.c: 660: if ( mode == 0x00 )
 16256  003206  662D               	tstfsz	ECANSendMessage@mode,c
 16257  003208  D002               	goto	l12346
 16258                           
 16259                           ; BSR set to: 14
 16260                           ;ECAN.c: 661: buffers = 2;
 16261  00320A  0E02               	movlw	2
 16262  00320C  D001               	goto	L49
 16263  00320E                     l12346:
 16264                           
 16265                           ; BSR set to: 14
 16266                           ;ECAN.c: 662: else
 16267                           ;ECAN.c: 663: buffers = 8;
 16268  00320E  0E08               	movlw	8
 16269  003210                     L49:
 16270  003210  6E2E               	movwf	ECANSendMessage@buffers,c
 16271                           
 16272                           ; BSR set to: 14
 16273                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16274  003212  010D               	movlb	13	; () banked
 16275  003214  90D8               	bcf	status,0,c
 16276  003216  31F8               	rrcf	248,w,b	;volatile
 16277  003218  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 16278                           
 16279                           ; BSR set to: 13
 16280                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16281  00321A  6A34               	clrf	ECANSendMessage@i,c
 16282  00321C  D07D               	goto	l12406
 16283  00321E                     l12352:
 16284                           
 16285                           ;ECAN.c: 688: {
 16286                           ;ECAN.c: 693: ptr = pb[i];
 16287  00321E  5034               	movf	ECANSendMessage@i,w,c
 16288  003220  0D02               	mullw	2
 16289  003222  50F3               	movf	prodl,w,c
 16290  003224  0F1B               	addlw	low ECANSendMessage@pb
 16291  003226  6ED9               	movwf	fsr2l,c
 16292  003228  6ADA               	clrf	fsr2h,c
 16293  00322A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 16294  00322E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 16295                           
 16296                           ;ECAN.c: 694: tempPtr = ptr;
 16297  003232  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16298  003236  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16299                           
 16300                           ;ECAN.c: 702: if ( i > 2 )
 16301  00323A  0E02               	movlw	2
 16302  00323C  6434               	cpfsgt	ECANSendMessage@i,c
 16303  00323E  D004               	goto	l12364
 16304                           
 16305                           ;ECAN.c: 703: {
 16306                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16307  003240  90D8               	bcf	status,0,c
 16308  003242  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16309                           
 16310                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16311  003244  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 16312  003246  D067               	goto	l12404
 16313  003248                     l12364:
 16314                           
 16315                           ;ECAN.c: 714: }
 16316                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16317  003248  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16318  00324C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16319  003250  50DF               	movf	indf2,w,c
 16320  003252  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16321  003254  B61A               	btfsc	??_ECANSendMessage,3,c
 16322  003256  D05F               	goto	l12404
 16323                           
 16324                           ;ECAN.c: 721: {
 16325                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16326  003258  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16327  00325C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16328  003260  0EFC               	movlw	252
 16329  003262  16DF               	andwf	indf2,f,c
 16330                           
 16331                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16332  003264  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16333  003268  0E03               	movlw	3
 16334  00326A  161A               	andwf	??_ECANSendMessage,f,c
 16335  00326C  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16336  003270  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16337  003274  501A               	movf	??_ECANSendMessage,w,c
 16338  003276  12DF               	iorwf	indf2,f,c
 16339                           
 16340                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16341  003278  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 16342  00327A  D004               	goto	l168
 16343                           
 16344                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16345  00327C  5018               	movf	ECANSendMessage@dataLen,w,c
 16346  00327E  0940               	iorlw	64
 16347  003280  6E33               	movwf	ECANSendMessage@temp,c
 16348  003282  D002               	goto	l12374
 16349  003284                     l168:
 16350                           
 16351                           ;ECAN.c: 729: else
 16352                           ;ECAN.c: 730: temp = dataLen;
 16353  003284  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16354  003288                     l12374:
 16355                           
 16356                           ;ECAN.c: 732: *(ptr+5) = temp;
 16357  003288  EE20 F005          	lfsr	2,5
 16358  00328C  5035               	movf	ECANSendMessage@ptr,w,c
 16359  00328E  26D9               	addwf	fsr2l,f,c
 16360  003290  5036               	movf	ECANSendMessage@ptr+1,w,c
 16361  003292  22DA               	addwfc	fsr2h,f,c
 16362  003294  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 16363                           
 16364                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16365  003298  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 16366  00329A  D003               	goto	l170
 16367                           
 16368                           ;ECAN.c: 736: temp = 1;
 16369  00329C  0E01               	movlw	1
 16370  00329E  6E33               	movwf	ECANSendMessage@temp,c
 16371  0032A0  D001               	goto	l12380
 16372  0032A2                     l170:
 16373                           
 16374                           ;ECAN.c: 738: else
 16375                           ;ECAN.c: 739: temp = 0;
 16376  0032A2  6A33               	clrf	ECANSendMessage@temp,c
 16377  0032A4                     l12380:
 16378                           
 16379                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16380  0032A4  2835               	incf	ECANSendMessage@ptr,w,c
 16381  0032A6  6E08               	movwf	?__CANIDToRegs,c
 16382  0032A8  0E00               	movlw	0
 16383  0032AA  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 16384  0032AC  6E09               	movwf	?__CANIDToRegs+1,c
 16385  0032AE  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16386  0032B2  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16387  0032B6  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16388  0032BA  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16389  0032BE  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16390  0032C2  ECF7  F01B         	call	__CANIDToRegs	;wreg free
 16391                           
 16392                           ;ECAN.c: 745: ptr += 6;
 16393  0032C6  0E06               	movlw	6
 16394  0032C8  2635               	addwf	ECANSendMessage@ptr,f,c
 16395  0032CA  0E00               	movlw	0
 16396  0032CC  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 16397                           
 16398                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16399  0032CE  6A2F               	clrf	ECANSendMessage@j,c
 16400  0032D0  D00F               	goto	l12394
 16401  0032D2                     l12386:
 16402                           
 16403                           ;ECAN.c: 748: *ptr++ = *data++;
 16404  0032D2  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 16405  0032D6  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16406  0032DA  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16407  0032DE  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16408  0032E2  CFDF FFE7          	movff	indf2,indf1
 16409  0032E6  4A16               	infsnz	ECANSendMessage@data,f,c
 16410  0032E8  2A17               	incf	ECANSendMessage@data+1,f,c
 16411  0032EA  4A35               	infsnz	ECANSendMessage@ptr,f,c
 16412  0032EC  2A36               	incf	ECANSendMessage@ptr+1,f,c
 16413  0032EE  2A2F               	incf	ECANSendMessage@j,f,c
 16414  0032F0                     l12394:
 16415  0032F0  5018               	movf	ECANSendMessage@dataLen,w,c
 16416  0032F2  5C2F               	subwf	ECANSendMessage@j,w,c
 16417  0032F4  E3EE               	bnc	l12386
 16418                           
 16419                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16420  0032F6  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16421  0032FA  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16422  0032FE  50DF               	movf	indf2,w,c
 16423  003300  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16424  003302  B41A               	btfsc	??_ECANSendMessage,2,c
 16425  003304  D006               	goto	l12400
 16426                           
 16427                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16428  003306  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16429  00330A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16430  00330E  0E00               	movlw	0
 16431  003310  86DB               	bsf	plusw2,3,c
 16432  003312                     l12400:
 16433                           
 16434                           ;ECAN.c: 755: return TRUE;
 16435  003312  0E01               	movlw	1
 16436  003314  D005               	goto	l176
 16437  003316                     l12404:
 16438  003316  2A34               	incf	ECANSendMessage@i,f,c
 16439  003318                     l12406:
 16440  003318  502E               	movf	ECANSendMessage@buffers,w,c
 16441  00331A  5C34               	subwf	ECANSendMessage@i,w,c
 16442  00331C  E380               	bnc	l12352
 16443                           
 16444                           ;ECAN.c: 756: }
 16445                           ;ECAN.c: 757: }
 16446                           ;ECAN.c: 760: return FALSE;
 16447  00331E  0E00               	movlw	0
 16448  003320                     l176:
 16449  003320  0012               	return	
 16450  003322                     __end_of_ECANSendMessage:
 16451                           	opt stack 0
 16452                           tblptru	equ	0xFF8
 16453                           tblptrh	equ	0xFF7
 16454                           tblptrl	equ	0xFF6
 16455                           tablat	equ	0xFF5
 16456                           prodh	equ	0xFF4
 16457                           prodl	equ	0xFF3
 16458                           intcon	equ	0xFF2
 16459                           intcon2	equ	0xFF1
 16460                           postinc0	equ	0xFEE
 16461                           wreg	equ	0xFE8
 16462                           indf1	equ	0xFE7
 16463                           fsr1h	equ	0xFE2
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           postdec2	equ	0xFDD
 16468                           plusw2	equ	0xFDB
 16469                           fsr2h	equ	0xFDA
 16470                           fsr2l	equ	0xFD9
 16471                           status	equ	0xFD8
 16472                           
 16473 ;; *************** function __CANIDToRegs *****************
 16474 ;; Defined at:
 16475 ;;		line 1099 in file "../ECAN.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 16478 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), RXM1SIDH(1), 
 16479 ;;		 -> RXF1SIDH(1), B5CON(1), B4CON(1), B3CON(1), 
 16480 ;;		 -> B2CON(1), B1CON(1), B0CON(1), 
 16481 ;;  val             4    9[COMRAM] unsigned long 
 16482 ;;  type            1   13[COMRAM] unsigned char 
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 16485 ;;		 -> _CANIDToRegs@val(4), 
 16486 ;; Return value:  Size  Location     Type
 16487 ;;		None               void
 16488 ;; Registers used:
 16489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16490 ;; Tracked objects:
 16491 ;;		On entry : 0/F
 16492 ;;		On exit  : 0/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16495 ;;      Params:         7       0       0       0       0       0       0
 16496 ;;      Locals:         1       0       0       0       0       0       0
 16497 ;;      Temps:          2       0       0       0       0       0       0
 16498 ;;      Totals:        10       0       0       0       0       0       0
 16499 ;;Total ram usage:       10 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; Hardware stack levels required when called:    2
 16502 ;; This function calls:
 16503 ;;		Nothing
 16504 ;; This function is called by:
 16505 ;;		_ECANSendMessage
 16506 ;;		_calculateSetFilterMask
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text58
 16511  0037EE                     __ptext58:
 16512                           	opt stack 0
 16513  0037EE                     __CANIDToRegs:
 16514                           	opt stack 23
 16515                           
 16516                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16517                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16518                           
 16519                           ;incstack = 0
 16520                           ;incstack = 0
 16521  0037EE  0E0A               	movlw	low __CANIDToRegs@val
 16522  0037F0  6E11               	movwf	__CANIDToRegs@Value,c
 16523                           
 16524                           ;ECAN.c: 1104: if ( type == 0 )
 16525  0037F2  660E               	tstfsz	__CANIDToRegs@type,c
 16526  0037F4  D022               	goto	l12422
 16527                           
 16528                           ;ECAN.c: 1105: {
 16529                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16530  0037F6  5011               	movf	__CANIDToRegs@Value,w,c
 16531  0037F8  6ED9               	movwf	fsr2l,c
 16532  0037FA  6ADA               	clrf	fsr2h,c
 16533  0037FC  50DF               	movf	indf2,w,c
 16534  0037FE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16535  003800  90D8               	bcf	status,0,c
 16536  003802  320F               	rrcf	??__CANIDToRegs,f,c
 16537  003804  90D8               	bcf	status,0,c
 16538  003806  320F               	rrcf	??__CANIDToRegs,f,c
 16539  003808  90D8               	bcf	status,0,c
 16540  00380A  300F               	rrcf	??__CANIDToRegs,w,c
 16541                           
 16542                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16543  00380C  D862               	call	PL48	;call to abstracted procedure
 16544  00380E  2AD9               	incf	fsr2l,f,c
 16545  003810  6ADA               	clrf	fsr2h,c
 16546  003812  D872               	call	PL100	;call to abstracted procedure
 16547  003814                     u15985:
 16548  003814  90D8               	bcf	status,0,c
 16549  003816  360F               	rlcf	??__CANIDToRegs,f,c
 16550  003818  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16551  00381A  D7FC               	goto	u15985
 16552  00381C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16553                           
 16554                           ;ECAN.c: 1109: ptr++;
 16555                           
 16556                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16557  003820  D846               	call	PL30	;call to abstracted procedure
 16558  003822  D86A               	call	PL100	;call to abstracted procedure
 16559  003824                     u15995:
 16560  003824  90D8               	bcf	status,0,c
 16561  003826  360F               	rlcf	??__CANIDToRegs,f,c
 16562  003828  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16563  00382A  D7FC               	goto	u15995
 16564  00382C  500F               	movf	??__CANIDToRegs,w,c
 16565  00382E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16566  003832  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16567  003836  6EDF               	movwf	indf2,c
 16568                           
 16569                           ;ECAN.c: 1111: }
 16570  003838  D039               	goto	l230
 16571  00383A                     l12422:
 16572                           
 16573                           ;ECAN.c: 1112: else
 16574                           ;ECAN.c: 1113: {
 16575                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16576  00383A  5011               	movf	__CANIDToRegs@Value,w,c
 16577  00383C  D842               	call	PL42	;call to abstracted procedure
 16578  00383E  0E05               	movlw	5
 16579  003840  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16580  003842                     u16005:
 16581  003842  90D8               	bcf	status,0,c
 16582  003844  320F               	rrcf	??__CANIDToRegs,f,c
 16583  003846  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16584  003848  D7FC               	goto	u16005
 16585  00384A  500F               	movf	??__CANIDToRegs,w,c
 16586                           
 16587                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16588  00384C  D842               	call	PL48	;call to abstracted procedure
 16589  00384E  0E03               	movlw	3
 16590  003850  D849               	call	PL62	;call to abstracted procedure
 16591  003852  360F               	rlcf	??__CANIDToRegs,f,c
 16592  003854  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16593                           
 16594                           ;ECAN.c: 1117: ptr++;
 16595                           
 16596                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16597  003858  D82A               	call	PL30	;call to abstracted procedure
 16598  00385A  0E02               	movlw	2
 16599  00385C  D843               	call	PL62	;call to abstracted procedure
 16600  00385E  340F               	rlcf	??__CANIDToRegs,w,c
 16601  003860  0BE0               	andlw	224
 16602  003862  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16603  003866  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16604  00386A  6EDF               	movwf	indf2,c
 16605                           
 16606                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16607  00386C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16608  003870  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16609  003874  0E00               	movlw	0
 16610  003876  86DB               	bsf	plusw2,3,c
 16611                           
 16612                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16613  003878  5011               	movf	__CANIDToRegs@Value,w,c
 16614  00387A  D823               	call	PL42	;call to abstracted procedure
 16615  00387C  0E03               	movlw	3
 16616  00387E  160F               	andwf	??__CANIDToRegs,f,c
 16617  003880  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16618                           
 16619                           ;ECAN.c: 1122: ptr++;
 16620                           
 16621                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16622  003884  D814               	call	PL30	;call to abstracted procedure
 16623  003886  2AD9               	incf	fsr2l,f,c
 16624  003888  6ADA               	clrf	fsr2h,c
 16625  00388A  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16626  00388E  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16627  003892  CFDF FFE7          	movff	indf2,indf1
 16628                           
 16629                           ;ECAN.c: 1124: ptr++;
 16630  003896  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16631  003898  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16632                           
 16633                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16634  00389A  5011               	movf	__CANIDToRegs@Value,w,c
 16635  00389C  6ED9               	movwf	fsr2l,c
 16636  00389E  6ADA               	clrf	fsr2h,c
 16637  0038A0  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16638  0038A4  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16639  0038A8  CFDF FFE7          	movff	indf2,indf1
 16640  0038AC                     l230:
 16641  0038AC  0012               	return	
 16642  0038AE                     __end_of__CANIDToRegs:
 16643                           	opt stack 0
 16644  0038AE                     PL30:
 16645                           	opt stack 23
 16646  0038AE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16647  0038B2  500F               	movf	??__CANIDToRegs,w,c
 16648  0038B4  12DF               	iorwf	indf2,f,c
 16649  0038B6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16650  0038B8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16651  0038BA  5011               	movf	__CANIDToRegs@Value,w,c
 16652  0038BC  6ED9               	movwf	fsr2l,c
 16653  0038BE  6ADA               	clrf	fsr2h,c
 16654  0038C0  0012               	return	
 16655  0038C2                     __end_ofPL30:
 16656                           	opt stack 0
 16657  0038C2                     PL42:
 16658                           	opt stack 23
 16659  0038C2  6ED9               	movwf	fsr2l,c
 16660  0038C4  6ADA               	clrf	fsr2h,c
 16661  0038C6  0E02               	movlw	2
 16662  0038C8  26D9               	addwf	fsr2l,f,c
 16663  0038CA  6ADA               	clrf	fsr2h,c
 16664  0038CC  50DF               	movf	indf2,w,c
 16665  0038CE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16666  0038D0  0012               	return	
 16667  0038D2                     __end_ofPL42:
 16668                           	opt stack 0
 16669  0038D2                     PL48:
 16670                           	opt stack 23
 16671  0038D2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16672  0038D6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16673  0038DA  6EDF               	movwf	indf2,c
 16674  0038DC  5011               	movf	__CANIDToRegs@Value,w,c
 16675  0038DE  6ED9               	movwf	fsr2l,c
 16676  0038E0  6ADA               	clrf	fsr2h,c
 16677  0038E2  0012               	return	
 16678  0038E4                     __end_ofPL48:
 16679                           	opt stack 0
 16680  0038E4                     PL62:
 16681                           	opt stack 23
 16682  0038E4  26D9               	addwf	fsr2l,f,c
 16683  0038E6  6ADA               	clrf	fsr2h,c
 16684  0038E8  50DF               	movf	indf2,w,c
 16685  0038EA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16686  0038EC  90D8               	bcf	status,0,c
 16687  0038EE  360F               	rlcf	??__CANIDToRegs,f,c
 16688  0038F0  90D8               	bcf	status,0,c
 16689  0038F2  360F               	rlcf	??__CANIDToRegs,f,c
 16690  0038F4  90D8               	bcf	status,0,c
 16691  0038F6  0012               	return	
 16692  0038F8                     __end_ofPL62:
 16693                           	opt stack 0
 16694  0038F8                     PL100:
 16695                           	opt stack 23
 16696  0038F8  50DF               	movf	indf2,w,c
 16697  0038FA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16698  0038FC  0E05               	movlw	5
 16699  0038FE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16700  003900  0C05               	retlw	5
 16701  003902                     __end_ofPL100:
 16702                           	opt stack 0
 16703                           tblptru	equ	0xFF8
 16704                           tblptrh	equ	0xFF7
 16705                           tblptrl	equ	0xFF6
 16706                           tablat	equ	0xFF5
 16707                           prodh	equ	0xFF4
 16708                           prodl	equ	0xFF3
 16709                           intcon	equ	0xFF2
 16710                           intcon2	equ	0xFF1
 16711                           postinc0	equ	0xFEE
 16712                           wreg	equ	0xFE8
 16713                           indf1	equ	0xFE7
 16714                           fsr1h	equ	0xFE2
 16715                           fsr1l	equ	0xFE1
 16716                           indf2	equ	0xFDF
 16717                           postinc2	equ	0xFDE
 16718                           postdec2	equ	0xFDD
 16719                           plusw2	equ	0xFDB
 16720                           fsr2h	equ	0xFDA
 16721                           fsr2l	equ	0xFD9
 16722                           status	equ	0xFD8
 16723                           
 16724 ;; *************** function _vscp_getEvent *****************
 16725 ;; Defined at:
 16726 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;		None
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;  rv              1   43[COMRAM] unsigned char 
 16731 ;; Return value:  Size  Location     Type
 16732 ;;                  1    wreg      unsigned char 
 16733 ;; Registers used:
 16734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16735 ;; Tracked objects:
 16736 ;;		On entry : F/0
 16737 ;;		On exit  : 0/0
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16740 ;;      Params:         0       0       0       0       0       0       0
 16741 ;;      Locals:         1       0       0       0       0       0       0
 16742 ;;      Temps:          0       0       0       0       0       0       0
 16743 ;;      Totals:         1       0       0       0       0       0       0
 16744 ;;Total ram usage:        1 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; Hardware stack levels required when called:    6
 16747 ;; This function calls:
 16748 ;;		_getVSCPFrame
 16749 ;; This function is called by:
 16750 ;;		_main
 16751 ;; This function uses a non-reentrant model
 16752 ;;
 16753                           
 16754                           	psect	text59
 16755  004364                     __ptext59:
 16756                           	opt stack 0
 16757  004364                     _vscp_getEvent:
 16758                           	opt stack 23
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;vscp_firmware.c: 1309: int8_t rv;
 16762                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16763                           
 16764                           ;incstack = 0
 16765                           ;incstack = 0
 16766  004364  BF97               	btfsc	_vscp_imsg& (0+255),7,b
 16767  004366  D012               	goto	l1534
 16768                           
 16769                           ; BSR set to: 0
 16770                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16771                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16772                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16773                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16774                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16775                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16776  004368  0E9B               	movlw	low (_vscp_imsg+4)
 16777  00436A  6E1E               	movwf	?_getVSCPFrame,c
 16778  00436C  0E9C               	movlw	low (_vscp_imsg+5)
 16779  00436E  6E1F               	movwf	?_getVSCPFrame+1,c
 16780  004370  0E98               	movlw	low (_vscp_imsg+1)
 16781  004372  6E20               	movwf	?_getVSCPFrame+2,c
 16782  004374  0E97               	movlw	low _vscp_imsg
 16783  004376  6E21               	movwf	?_getVSCPFrame+3,c
 16784  004378  0E9D               	movlw	low (_vscp_imsg+6)
 16785  00437A  6E22               	movwf	?_getVSCPFrame+4,c
 16786  00437C  0E99               	movlw	(_vscp_imsg+2)& (0+255)
 16787  00437E  ECDD  F01F         	call	_getVSCPFrame
 16788  004382  6E2C               	movwf	vscp_getEvent@rv,c
 16789  004384  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 16790  004386  E002               	bz	l1534
 16791                           
 16792                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16793  004388  0100               	movlb	0	; () banked
 16794  00438A  8F97               	bsf	_vscp_imsg& (0+255),7,b
 16795  00438C                     l1534:
 16796  00438C  0012               	return	
 16797  00438E                     __end_of_vscp_getEvent:
 16798                           	opt stack 0
 16799                           tblptru	equ	0xFF8
 16800                           tblptrh	equ	0xFF7
 16801                           tblptrl	equ	0xFF6
 16802                           tablat	equ	0xFF5
 16803                           prodh	equ	0xFF4
 16804                           prodl	equ	0xFF3
 16805                           intcon	equ	0xFF2
 16806                           intcon2	equ	0xFF1
 16807                           postinc0	equ	0xFEE
 16808                           wreg	equ	0xFE8
 16809                           indf1	equ	0xFE7
 16810                           fsr1h	equ	0xFE2
 16811                           fsr1l	equ	0xFE1
 16812                           indf2	equ	0xFDF
 16813                           postinc2	equ	0xFDE
 16814                           postdec2	equ	0xFDD
 16815                           plusw2	equ	0xFDB
 16816                           fsr2h	equ	0xFDA
 16817                           fsr2l	equ	0xFD9
 16818                           status	equ	0xFD8
 16819                           
 16820 ;; *************** function _getVSCPFrame *****************
 16821 ;; Defined at:
 16822 ;;		line 3546 in file "../main.c"
 16823 ;; Parameters:    Size  Location     Type
 16824 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16825 ;;		 -> vscp_imsg(14), 
 16826 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 16827 ;;		 -> vscp_imsg(14), 
 16828 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 16829 ;;		 -> vscp_imsg(14), 
 16830 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 16831 ;;		 -> vscp_imsg(14), 
 16832 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 16833 ;;		 -> vscp_imsg(14), 
 16834 ;;  pData           1   33[COMRAM] PTR unsigned char 
 16835 ;;		 -> vscp_imsg(14), 
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 16838 ;;		 -> vscp_imsg(14), 
 16839 ;;  id              4   39[COMRAM] unsigned long 
 16840 ;; Return value:  Size  Location     Type
 16841 ;;                  1    wreg      unsigned char 
 16842 ;; Registers used:
 16843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16844 ;; Tracked objects:
 16845 ;;		On entry : F/0
 16846 ;;		On exit  : 0/0
 16847 ;;		Unchanged: 0/0
 16848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16849 ;;      Params:         5       0       0       0       0       0       0
 16850 ;;      Locals:         5       0       0       0       0       0       0
 16851 ;;      Temps:          4       0       0       0       0       0       0
 16852 ;;      Totals:        14       0       0       0       0       0       0
 16853 ;;Total ram usage:       14 bytes
 16854 ;; Hardware stack levels used:    1
 16855 ;; Hardware stack levels required when called:    5
 16856 ;; This function calls:
 16857 ;;		_getCANFrame
 16858 ;; This function is called by:
 16859 ;;		_vscp_getEvent
 16860 ;; This function uses a non-reentrant model
 16861 ;;
 16862                           
 16863                           	psect	text60
 16864  003FBA                     __ptext60:
 16865                           	opt stack 0
 16866  003FBA                     _getVSCPFrame:
 16867                           	opt stack 23
 16868                           
 16869                           ;incstack = 0
 16870                           ;incstack = 0
 16871                           ;getVSCPFrame@pvscpclass stored from wreg
 16872  003FBA  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;main.c: 3547: uint32_t id;
 16876                           ;main.c: 3549: if ( !getCANFrame(&id, pSize, pData) ) {
 16877  003FBE  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 16878  003FC2  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16879  003FC6  0E28               	movlw	getVSCPFrame@id& (0+255)
 16880  003FC8  EC87  F021         	call	_getCANFrame
 16881  003FCC  0900               	iorlw	0
 16882  003FCE  E102               	bnz	l11908
 16883                           
 16884                           ;main.c: 3550: return 0;
 16885  003FD0  0E00               	movlw	0
 16886  003FD2  D02E               	goto	l1148
 16887  003FD4                     l11908:
 16888                           
 16889                           ;main.c: 3551: }
 16890                           ;main.c: 3553: *pNodeId = id & 0x0ff;
 16891  003FD4  501F               	movf	getVSCPFrame@pNodeId,w,c
 16892  003FD6  6ED9               	movwf	fsr2l,c
 16893  003FD8  6ADA               	clrf	fsr2h,c
 16894  003FDA  C028  FFDF         	movff	getVSCPFrame@id,indf2
 16895                           
 16896                           ;main.c: 3554: *pvscptype = (id >> 8) & 0xff;
 16897  003FDE  501E               	movf	getVSCPFrame@pvscptype,w,c
 16898  003FE0  6ED9               	movwf	fsr2l,c
 16899  003FE2  6ADA               	clrf	fsr2h,c
 16900  003FE4  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 16901                           
 16902                           ;main.c: 3555: *pvscpclass = (id >> 16) & 0x1ff;
 16903  003FE8  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16904  003FEA  6E23               	movwf	??_getVSCPFrame& (0+255),c
 16905  003FEC  0E01               	movlw	1
 16906  003FEE  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16907  003FF0  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16908  003FF2  5027               	movf	getVSCPFrame@pvscpclass,w,c
 16909  003FF4  6ED9               	movwf	fsr2l,c
 16910  003FF6  6ADA               	clrf	fsr2h,c
 16911  003FF8  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 16912  003FFC  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16913                           
 16914                           ;main.c: 3556: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16915  004000  5020               	movf	getVSCPFrame@pPriority,w,c
 16916  004002  6ED9               	movwf	fsr2l,c
 16917  004004  6ADA               	clrf	fsr2h,c
 16918  004006  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 16919  00400A  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16920  00400E  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16921  004012  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16922  004016  0E1B               	movlw	27
 16923  004018  D005               	goto	u15260
 16924  00401A                     u15265:
 16925  00401A  90D8               	bcf	status,0,c
 16926  00401C  3226               	rrcf	??_getVSCPFrame+3,f,c
 16927  00401E  3225               	rrcf	??_getVSCPFrame+2,f,c
 16928  004020  3224               	rrcf	??_getVSCPFrame+1,f,c
 16929  004022  3223               	rrcf	??_getVSCPFrame,f,c
 16930  004024                     u15260:
 16931  004024  2EE8               	decfsz	wreg,f,c
 16932  004026  D7F9               	goto	u15265
 16933  004028  5023               	movf	??_getVSCPFrame,w,c
 16934  00402A  0B07               	andlw	7
 16935  00402C  6EDF               	movwf	indf2,c
 16936                           
 16937                           ;main.c: 3558: return 1;
 16938  00402E  0E01               	movlw	1
 16939  004030                     l1148:
 16940  004030  0012               	return	
 16941  004032                     __end_of_getVSCPFrame:
 16942                           	opt stack 0
 16943                           tblptru	equ	0xFF8
 16944                           tblptrh	equ	0xFF7
 16945                           tblptrl	equ	0xFF6
 16946                           tablat	equ	0xFF5
 16947                           prodh	equ	0xFF4
 16948                           prodl	equ	0xFF3
 16949                           intcon	equ	0xFF2
 16950                           intcon2	equ	0xFF1
 16951                           postinc0	equ	0xFEE
 16952                           wreg	equ	0xFE8
 16953                           indf1	equ	0xFE7
 16954                           fsr1h	equ	0xFE2
 16955                           fsr1l	equ	0xFE1
 16956                           indf2	equ	0xFDF
 16957                           postinc2	equ	0xFDE
 16958                           postdec2	equ	0xFDD
 16959                           plusw2	equ	0xFDB
 16960                           fsr2h	equ	0xFDA
 16961                           fsr2l	equ	0xFD9
 16962                           status	equ	0xFD8
 16963                           
 16964 ;; *************** function _getCANFrame *****************
 16965 ;; Defined at:
 16966 ;;		line 3588 in file "../main.c"
 16967 ;; Parameters:    Size  Location     Type
 16968 ;;  pid             1    wreg     PTR unsigned long 
 16969 ;;		 -> getVSCPFrame@id(4), 
 16970 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 16971 ;;		 -> vscp_imsg(14), 
 16972 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 16973 ;;		 -> vscp_imsg(14), 
 16974 ;; Auto vars:     Size  Location     Type
 16975 ;;  pid             1   27[COMRAM] PTR unsigned long 
 16976 ;;		 -> getVSCPFrame@id(4), 
 16977 ;;  flags           1   28[COMRAM] enum E16425
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  1    wreg      unsigned char 
 16980 ;; Registers used:
 16981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16982 ;; Tracked objects:
 16983 ;;		On entry : F/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16987 ;;      Params:         2       0       0       0       0       0       0
 16988 ;;      Locals:         2       0       0       0       0       0       0
 16989 ;;      Temps:          0       0       0       0       0       0       0
 16990 ;;      Totals:         4       0       0       0       0       0       0
 16991 ;;Total ram usage:        4 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    4
 16994 ;; This function calls:
 16995 ;;		_ECANReceiveMessage
 16996 ;; This function is called by:
 16997 ;;		_getVSCPFrame
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           	psect	text61
 17002  00430E                     __ptext61:
 17003                           	opt stack 0
 17004  00430E                     _getCANFrame:
 17005                           	opt stack 23
 17006                           
 17007                           ;incstack = 0
 17008                           ;incstack = 0
 17009                           ;getCANFrame@pid stored from wreg
 17010  00430E  CFE8 F01C          	movff	wreg,getCANFrame@pid
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;main.c: 3589: ECAN_RX_MSG_FLAGS flags;
 17014                           ;main.c: 3593: if (vscp_imsg.flags & 0x80) return 0;
 17015  004312  AF97               	btfss	_vscp_imsg& (0+255),7,b
 17016  004314  D002               	goto	l11924
 17017  004316                     l11920:
 17018  004316  0E00               	movlw	0
 17019  004318  D00F               	goto	l1159
 17020  00431A                     l11924:
 17021                           
 17022                           ; BSR set to: 0
 17023                           ;main.c: 3595: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 17024  00431A  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 17025  00431E  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 17026  004322  0E1D               	movlw	low getCANFrame@flags
 17027  004324  6E11               	movwf	?_ECANReceiveMessage+2,c
 17028  004326  501C               	movf	getCANFrame@pid,w,c
 17029  004328  EC34  F016         	call	_ECANReceiveMessage
 17030  00432C  0900               	iorlw	0
 17031  00432E  E0F3               	bz	l11920
 17032                           
 17033                           ;main.c: 3598: if (flags & ECAN_RX_RTR_FRAME) return 0;
 17034  004330  AC1D               	btfss	getCANFrame@flags,6,c
 17035                           
 17036                           ;main.c: 3601: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 17037  004332  AA1D               	btfss	getCANFrame@flags,5,c
 17038  004334  D7F0               	goto	l11920
 17039                           
 17040                           ;main.c: 3603: return 1;
 17041  004336  0E01               	movlw	1
 17042  004338                     l1159:
 17043  004338  0012               	return	
 17044  00433A                     __end_of_getCANFrame:
 17045                           	opt stack 0
 17046                           tblptru	equ	0xFF8
 17047                           tblptrh	equ	0xFF7
 17048                           tblptrl	equ	0xFF6
 17049                           tablat	equ	0xFF5
 17050                           prodh	equ	0xFF4
 17051                           prodl	equ	0xFF3
 17052                           intcon	equ	0xFF2
 17053                           intcon2	equ	0xFF1
 17054                           postinc0	equ	0xFEE
 17055                           wreg	equ	0xFE8
 17056                           indf1	equ	0xFE7
 17057                           fsr1h	equ	0xFE2
 17058                           fsr1l	equ	0xFE1
 17059                           indf2	equ	0xFDF
 17060                           postinc2	equ	0xFDE
 17061                           postdec2	equ	0xFDD
 17062                           plusw2	equ	0xFDB
 17063                           fsr2h	equ	0xFDA
 17064                           fsr2l	equ	0xFD9
 17065                           status	equ	0xFD8
 17066                           
 17067 ;; *************** function _ECANReceiveMessage *****************
 17068 ;; Defined at:
 17069 ;;		line 803 in file "../ECAN.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;  id              1    wreg     PTR unsigned long 
 17072 ;;		 -> getVSCPFrame@id(4), 
 17073 ;;  data            1   14[COMRAM] PTR unsigned char 
 17074 ;;		 -> vscp_imsg(14), 
 17075 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 17076 ;;		 -> vscp_imsg(14), 
 17077 ;;  msgFlags        1   16[COMRAM] PTR enum E16333
 17078 ;;		 -> getCANFrame@flags(1), 
 17079 ;; Auto vars:     Size  Location     Type
 17080 ;;  id              1   17[COMRAM] PTR unsigned long 
 17081 ;;		 -> getVSCPFrame@id(4), 
 17082 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 17083 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17084 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17085 ;;  savedPtr        2   18[COMRAM] PTR unsigned char 
 17086 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17087 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17088 ;;  temp            1   22[COMRAM] struct .
 17089 ;;  mode            1   21[COMRAM] unsigned char 
 17090 ;;  i               1   20[COMRAM] unsigned char 
 17091 ;; Return value:  Size  Location     Type
 17092 ;;                  1    wreg      enum E15660
 17093 ;; Registers used:
 17094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17095 ;; Tracked objects:
 17096 ;;		On entry : F/0
 17097 ;;		On exit  : 0/0
 17098 ;;		Unchanged: 0/0
 17099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17100 ;;      Params:         3       0       0       0       0       0       0
 17101 ;;      Locals:         8       0       0       0       0       0       0
 17102 ;;      Temps:          0       0       0       0       0       0       0
 17103 ;;      Totals:        11       0       0       0       0       0       0
 17104 ;;Total ram usage:       11 bytes
 17105 ;; Hardware stack levels used:    1
 17106 ;; Hardware stack levels required when called:    3
 17107 ;; This function calls:
 17108 ;;		__ECANPointBuffer
 17109 ;;		__RegsToCANID
 17110 ;; This function is called by:
 17111 ;;		_getCANFrame
 17112 ;; This function uses a non-reentrant model
 17113 ;;
 17114                           
 17115                           	psect	text62
 17116  002C68                     __ptext62:
 17117                           	opt stack 0
 17118  002C68                     _ECANReceiveMessage:
 17119                           	opt stack 23
 17120                           
 17121                           ;incstack = 0
 17122                           ;incstack = 0
 17123                           ;ECANReceiveMessage@id stored from wreg
 17124  002C68  CFE8 F012          	movff	wreg,ECANReceiveMessage@id
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;ECAN.c: 805: BYTE mode;
 17128                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 17129                           ;ECAN.c: 809: char i;
 17130                           ;ECAN.c: 810: BYTE_VAL temp;
 17131                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 17132  002C6C  6A54               	clrf	__ECANRxFilterHitInfo,c
 17133                           
 17134                           ; BSR set to: 0
 17135                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 17136  002C6E  5077               	movf	3959,w,c	;volatile
 17137  002C70  0BC0               	andlw	192
 17138  002C72  6E16               	movwf	ECANReceiveMessage@mode,c
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;ECAN.c: 816: if ( mode == 0x00 )
 17142  002C74  6616               	tstfsz	ECANReceiveMessage@mode,c
 17143  002C76  D032               	goto	l9166
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;ECAN.c: 822: {
 17147                           ;ECAN.c: 824: if ( RXB0FUL )
 17148  002C78  AE60               	btfss	3936,7,c	;volatile
 17149  002C7A  D012               	goto	l181
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;ECAN.c: 825: {
 17153                           ;ECAN.c: 827: RXB0IF = 0;
 17154  002C7C  90A4               	bcf	4004,0,c	;volatile
 17155                           
 17156                           ;ECAN.c: 830: if ( RXB0OVFL )
 17157  002C7E  AE74               	btfss	3956,7,c	;volatile
 17158  002C80  D006               	goto	l9142
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;ECAN.c: 831: {
 17162                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 17163  002C82  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17164  002C84  6ED9               	movwf	fsr2l,c
 17165  002C86  6ADA               	clrf	fsr2h,c
 17166  002C88  0E00               	movlw	0
 17167  002C8A  86DB               	bsf	plusw2,3,c
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;ECAN.c: 833: RXB0OVFL = 0;
 17171  002C8C  9E74               	bcf	3956,7,c	;volatile
 17172  002C8E                     l9142:
 17173                           
 17174                           ; BSR set to: 0
 17175                           ;ECAN.c: 834: }
 17176                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 17177  002C8E  A060               	btfss	3936,0,c	;volatile
 17178  002C90  D002               	bra	u10805
 17179  002C92  8054               	bsf	__ECANRxFilterHitInfo,0,c
 17180  002C94  D001               	bra	u10807
 17181  002C96                     u10805:
 17182  002C96  9054               	bcf	__ECANRxFilterHitInfo,0,c
 17183  002C98                     u10807:
 17184                           
 17185                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 17186  002C98  0E0F               	movlw	15	;volatile
 17187  002C9A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17188  002C9C  0E60               	movlw	96	;volatile
 17189  002C9E  D01A               	goto	L50
 17190  002CA0                     l181:
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 17194  002CA0  010F               	movlb	15	; () banked
 17195  002CA2  AF50               	btfss	80,7,b	;volatile
 17196  002CA4  D019               	goto	l9160
 17197                           
 17198                           ; BSR set to: 15
 17199                           ;ECAN.c: 842: {
 17200                           ;ECAN.c: 844: RXB1IF = 0;
 17201  002CA6  92A4               	bcf	4004,1,c	;volatile
 17202                           
 17203                           ;ECAN.c: 847: if ( RXB1OVFL )
 17204  002CA8  AC74               	btfss	3956,6,c	;volatile
 17205  002CAA  D006               	goto	l9152
 17206                           
 17207                           ; BSR set to: 15
 17208                           ;ECAN.c: 848: {
 17209                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 17210  002CAC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17211  002CAE  6ED9               	movwf	fsr2l,c
 17212  002CB0  6ADA               	clrf	fsr2h,c
 17213  002CB2  0E00               	movlw	0
 17214  002CB4  86DB               	bsf	plusw2,3,c
 17215                           
 17216                           ; BSR set to: 15
 17217                           ;ECAN.c: 850: RXB1OVFL = 0;
 17218  002CB6  9C74               	bcf	3956,6,c	;volatile
 17219  002CB8                     l9152:
 17220                           
 17221                           ; BSR set to: 15
 17222                           ;ECAN.c: 851: }
 17223                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 17224  002CB8  5150               	movf	80,w,b	;volatile
 17225  002CBA  0B07               	andlw	7
 17226  002CBC  6E54               	movwf	__ECANRxFilterHitInfo,c
 17227                           
 17228                           ; BSR set to: 15
 17229                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 17230  002CBE  0E02               	movlw	2
 17231  002CC0  6054               	cpfslt	__ECANRxFilterHitInfo,c
 17232  002CC2  D005               	goto	l9158
 17233                           
 17234                           ; BSR set to: 15
 17235                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 17236  002CC4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17237  002CC6  6ED9               	movwf	fsr2l,c
 17238  002CC8  6ADA               	clrf	fsr2h,c
 17239  002CCA  0E00               	movlw	0
 17240  002CCC  8EDB               	bsf	plusw2,7,c
 17241  002CCE                     l9158:
 17242                           
 17243                           ; BSR set to: 15
 17244                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 17245  002CCE  0E0F               	movlw	15	;volatile
 17246  002CD0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17247  002CD2  0E50               	movlw	80	;volatile
 17248  002CD4                     L50:
 17249  002CD4  6E18               	movwf	ECANReceiveMessage@ptr,c
 17250                           
 17251                           ;ECAN.c: 860: }
 17252  002CD6  D065               	goto	l9220
 17253  002CD8                     l9160:
 17254                           
 17255                           ;ECAN.c: 861: else
 17256                           ;ECAN.c: 862: return FALSE;
 17257  002CD8  0E00               	movlw	0
 17258  002CDA  D0C2               	goto	l188
 17259  002CDC                     l9166:
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;ECAN.c: 869: else if ( mode == 0x40 )
 17263  002CDC  5016               	movf	ECANReceiveMessage@mode,w,c
 17264  002CDE  0A40               	xorlw	64
 17265  002CE0  E146               	bnz	l191
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;ECAN.c: 875: {
 17269                           ;ECAN.c: 876: if ( RXB0FUL )
 17270  002CE2  AE60               	btfss	3936,7,c	;volatile
 17271  002CE4  D004               	goto	l192
 17272                           
 17273                           ; BSR set to: 0
 17274                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 17275  002CE6  0E0F               	movlw	15	;volatile
 17276  002CE8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17277  002CEA  0E60               	movlw	96	;volatile
 17278  002CEC  D03E               	goto	L57
 17279  002CEE                     l192:
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17283  002CEE  010F               	movlb	15	; () banked
 17284  002CF0  AF50               	btfss	80,7,b	;volatile
 17285  002CF2  D004               	goto	l194
 17286                           
 17287                           ; BSR set to: 15
 17288                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17289  002CF4  0E0F               	movlw	15	;volatile
 17290  002CF6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17291  002CF8  0E50               	movlw	80	;volatile
 17292  002CFA  D037               	goto	L57
 17293  002CFC                     l194:
 17294                           
 17295                           ; BSR set to: 15
 17296                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17297  002CFC  010D               	movlb	13
 17298  002CFE  B5F8               	btfsc	248,2,b	;volatile
 17299  002D00  D007               	goto	l196
 17300  002D02  010E               	movlb	14
 17301  002D04  AF20               	btfss	32,7,b	;volatile
 17302  002D06  D004               	goto	l196
 17303                           
 17304                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17305  002D08  0E0E               	movlw	14	;volatile
 17306  002D0A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17307  002D0C  0E20               	movlw	32	;volatile
 17308  002D0E  D02D               	goto	L57
 17309  002D10                     l196:
 17310                           
 17311                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17312  002D10  010D               	movlb	13
 17313  002D12  B7F8               	btfsc	248,3,b	;volatile
 17314  002D14  D007               	goto	l198
 17315  002D16  010E               	movlb	14
 17316  002D18  AF30               	btfss	48,7,b	;volatile
 17317  002D1A  D004               	goto	l198
 17318                           
 17319                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17320  002D1C  0E0E               	movlw	14	;volatile
 17321  002D1E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17322  002D20  0E30               	movlw	48	;volatile
 17323  002D22  D023               	goto	L57
 17324  002D24                     l198:
 17325                           
 17326                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17327  002D24  010D               	movlb	13
 17328  002D26  B9F8               	btfsc	248,4,b	;volatile
 17329  002D28  D007               	goto	l200
 17330  002D2A  010E               	movlb	14
 17331  002D2C  AF40               	btfss	64,7,b	;volatile
 17332  002D2E  D004               	goto	l200
 17333                           
 17334                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17335  002D30  0E0E               	movlw	14	;volatile
 17336  002D32  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17337  002D34  0E40               	movlw	64	;volatile
 17338  002D36  D019               	goto	L57
 17339  002D38                     l200:
 17340                           
 17341                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17342  002D38  010D               	movlb	13
 17343  002D3A  BBF8               	btfsc	248,5,b	;volatile
 17344  002D3C  D005               	goto	l202
 17345  002D3E  010E               	movlb	14
 17346  002D40  AF50               	btfss	80,7,b	;volatile
 17347  002D42  D002               	goto	l202
 17348                           
 17349                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17350  002D44  0E0E               	movlw	14	;volatile
 17351  002D46  D7D7               	goto	L58
 17352  002D48                     l202:
 17353                           
 17354                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17355  002D48  010D               	movlb	13
 17356  002D4A  BDF8               	btfsc	248,6,b	;volatile
 17357  002D4C  D005               	goto	l204
 17358  002D4E  010E               	movlb	14
 17359  002D50  AF60               	btfss	96,7,b	;volatile
 17360  002D52  D002               	goto	l204
 17361                           
 17362                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17363  002D54  0E0E               	movlw	14	;volatile
 17364  002D56  D7C8               	goto	L59
 17365  002D58                     l204:
 17366                           
 17367                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17368  002D58  010D               	movlb	13
 17369  002D5A  BFF8               	btfsc	248,7,b	;volatile
 17370  002D5C  D7BD               	goto	l9160
 17371  002D5E  010E               	movlb	14
 17372  002D60  AF70               	btfss	112,7,b	;volatile
 17373  002D62  D7BA               	goto	l9160
 17374                           
 17375                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17376  002D64  0E0E               	movlw	14	;volatile
 17377  002D66  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17378  002D68  0E70               	movlw	112	;volatile
 17379  002D6A                     L57:
 17380  002D6A  6E18               	movwf	ECANReceiveMessage@ptr,c
 17381  002D6C  D00A               	goto	l9210
 17382  002D6E                     l191:
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;ECAN.c: 910: else
 17386                           ;ECAN.c: 915: {
 17387                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17388  002D6E  AE74               	btfss	3956,7,c	;volatile
 17389  002D70  D7B3               	goto	l9160
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;ECAN.c: 917: {
 17393                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17394  002D72  506F               	movf	3951,w,c	;volatile
 17395  002D74  0B07               	andlw	7
 17396  002D76  EC19  F020         	call	__ECANPointBuffer
 17397  002D7A  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17398  002D7E  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17399  002D82                     l9210:
 17400                           
 17401                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17402  002D82  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17403  002D86  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17404  002D8A  50DF               	movf	indf2,w,c
 17405  002D8C  0B1F               	andlw	31
 17406  002D8E  6E54               	movwf	__ECANRxFilterHitInfo,c
 17407                           
 17408                           ;ECAN.c: 932: RXB1IF = 0;
 17409  002D90  92A4               	bcf	4004,1,c	;volatile
 17410                           
 17411                           ;ECAN.c: 934: if ( RXB1OVFL )
 17412  002D92  AC74               	btfss	3956,6,c	;volatile
 17413  002D94  D006               	goto	l9220
 17414                           
 17415                           ;ECAN.c: 935: {
 17416                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17417  002D96  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17418  002D98  6ED9               	movwf	fsr2l,c
 17419  002D9A  6ADA               	clrf	fsr2h,c
 17420  002D9C  0E00               	movlw	0
 17421  002D9E  86DB               	bsf	plusw2,3,c
 17422                           
 17423                           ;ECAN.c: 937: RXB1OVFL = 0;
 17424  002DA0  9C74               	bcf	3956,6,c	;volatile
 17425  002DA2                     l9220:
 17426                           
 17427                           ;ECAN.c: 942: savedPtr = ptr;
 17428  002DA2  C018  F013         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17429  002DA6  C019  F014         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17430                           
 17431                           ;ECAN.c: 943: *msgFlags = 0;
 17432  002DAA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17433  002DAC  6ED9               	movwf	fsr2l,c
 17434  002DAE  6ADA               	clrf	fsr2h,c
 17435  002DB0  6ADF               	clrf	indf2,c
 17436                           
 17437                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17438  002DB2  EE20 F005          	lfsr	2,5
 17439  002DB6  D855               	call	PL78	;call to abstracted procedure
 17440                           
 17441                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17442  002DB8  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17443  002DBA  6ED9               	movwf	fsr2l,c
 17444  002DBC  6ADA               	clrf	fsr2h,c
 17445  002DBE  5017               	movf	ECANReceiveMessage@temp,w,c
 17446  002DC0  0B0F               	andlw	15
 17447  002DC2  6EDF               	movwf	indf2,c
 17448                           
 17449                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17450  002DC4  AC17               	btfss	ECANReceiveMessage@temp,6,c
 17451  002DC6  D005               	goto	l212
 17452                           
 17453                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17454  002DC8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17455  002DCA  6ED9               	movwf	fsr2l,c
 17456  002DCC  6ADA               	clrf	fsr2h,c
 17457  002DCE  0E00               	movlw	0
 17458  002DD0  8CDB               	bsf	plusw2,6,c
 17459  002DD2                     l212:
 17460                           
 17461                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17462  002DD2  EE20 F002          	lfsr	2,2
 17463  002DD6  D845               	call	PL78	;call to abstracted procedure
 17464                           
 17465                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17466  002DD8  A617               	btfss	ECANReceiveMessage@temp,3,c
 17467  002DDA  D008               	goto	l213
 17468                           
 17469                           ;ECAN.c: 956: {
 17470                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17471  002DDC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17472  002DDE  6ED9               	movwf	fsr2l,c
 17473  002DE0  6ADA               	clrf	fsr2h,c
 17474  002DE2  0E00               	movlw	0
 17475  002DE4  8ADB               	bsf	plusw2,5,c
 17476                           
 17477                           ;ECAN.c: 958: temp.Val = 1;
 17478  002DE6  0E01               	movlw	1
 17479  002DE8  6E17               	movwf	ECANReceiveMessage@temp,c
 17480                           
 17481                           ;ECAN.c: 959: }
 17482  002DEA  D001               	goto	l9238
 17483  002DEC                     l213:
 17484                           
 17485                           ;ECAN.c: 960: else
 17486                           ;ECAN.c: 961: temp.Val = 0;
 17487  002DEC  6A17               	clrf	ECANReceiveMessage@temp,c
 17488  002DEE                     l9238:
 17489                           
 17490                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17491  002DEE  2818               	incf	ECANReceiveMessage@ptr,w,c
 17492  002DF0  6E08               	movwf	?__RegsToCANID,c
 17493  002DF2  0E00               	movlw	0
 17494  002DF4  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17495  002DF6  6E09               	movwf	?__RegsToCANID+1,c
 17496  002DF8  C012  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17497  002DFC  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17498  002E00  EC68  F01B         	call	__RegsToCANID	;wreg free
 17499                           
 17500                           ;ECAN.c: 966: ptr += 6;
 17501  002E04  0E06               	movlw	6
 17502  002E06  2618               	addwf	ECANReceiveMessage@ptr,f,c
 17503  002E08  0E00               	movlw	0
 17504  002E0A  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17505                           
 17506                           ;ECAN.c: 967: temp.Val = *dataLen;
 17507  002E0C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17508  002E0E  6ED9               	movwf	fsr2l,c
 17509  002E10  6ADA               	clrf	fsr2h,c
 17510  002E12  50DF               	movf	indf2,w,c
 17511  002E14  6E17               	movwf	ECANReceiveMessage@temp,c
 17512                           
 17513                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17514  002E16  6A15               	clrf	ECANReceiveMessage@i,c
 17515  002E18  D00D               	goto	l9254
 17516  002E1A                     l9246:
 17517                           
 17518                           ;ECAN.c: 969: *data++ = *ptr++;
 17519  002E1A  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17520  002E1E  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17521  002E22  500F               	movf	ECANReceiveMessage@data,w,c
 17522  002E24  6EE1               	movwf	fsr1l,c
 17523  002E26  6AE2               	clrf	fsr1h,c
 17524  002E28  CFDF FFE7          	movff	indf2,indf1
 17525  002E2C  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 17526  002E2E  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 17527  002E30  2A0F               	incf	ECANReceiveMessage@data,f,c
 17528  002E32  2A15               	incf	ECANReceiveMessage@i,f,c
 17529  002E34                     l9254:
 17530  002E34  5017               	movf	ECANReceiveMessage@temp,w,c
 17531  002E36  5C15               	subwf	ECANReceiveMessage@i,w,c
 17532  002E38  E3F0               	bnc	l9246
 17533                           
 17534                           ;ECAN.c: 972: if ( IRXIF )
 17535  002E3A  AEA4               	btfss	4004,7,c	;volatile
 17536  002E3C  D006               	goto	l9260
 17537                           
 17538                           ;ECAN.c: 973: {
 17539                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17540  002E3E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17541  002E40  6ED9               	movwf	fsr2l,c
 17542  002E42  6ADA               	clrf	fsr2h,c
 17543  002E44  0E00               	movlw	0
 17544  002E46  88DB               	bsf	plusw2,4,c
 17545                           
 17546                           ;ECAN.c: 975: IRXIF = 0;
 17547  002E48  9EA4               	bcf	4004,7,c	;volatile
 17548  002E4A                     l9260:
 17549                           
 17550                           ;ECAN.c: 976: }
 17551                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17552  002E4A  C013  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17553  002E4E  C014  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17554  002E52  0E7F               	movlw	127
 17555  002E54  16DF               	andwf	indf2,f,c
 17556                           
 17557                           ;ECAN.c: 983: if ( mode == 0x80 )
 17558  002E56  5016               	movf	ECANReceiveMessage@mode,w,c
 17559  002E58  0A80               	xorlw	128
 17560  002E5A  B4D8               	btfsc	status,2,c
 17561                           
 17562                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17563  002E5C  9E74               	bcf	3956,7,c	;volatile
 17564                           
 17565                           ;ECAN.c: 990: return TRUE;
 17566  002E5E  0E01               	movlw	1
 17567  002E60                     l188:
 17568  002E60  0012               	return	
 17569  002E62                     __end_of_ECANReceiveMessage:
 17570                           	opt stack 0
 17571  002E62                     PL78:
 17572                           	opt stack 23
 17573  002E62  5018               	movf	ECANReceiveMessage@ptr,w,c
 17574  002E64  26D9               	addwf	fsr2l,f,c
 17575  002E66  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 17576  002E68  22DA               	addwfc	fsr2h,f,c
 17577  002E6A  50DF               	movf	indf2,w,c
 17578  002E6C  6E17               	movwf	ECANReceiveMessage@temp,c
 17579  002E6E  0012               	return	
 17580  002E70                     __end_ofPL78:
 17581                           	opt stack 0
 17582                           tblptru	equ	0xFF8
 17583                           tblptrh	equ	0xFF7
 17584                           tblptrl	equ	0xFF6
 17585                           tablat	equ	0xFF5
 17586                           prodh	equ	0xFF4
 17587                           prodl	equ	0xFF3
 17588                           intcon	equ	0xFF2
 17589                           intcon2	equ	0xFF1
 17590                           postinc0	equ	0xFEE
 17591                           wreg	equ	0xFE8
 17592                           indf1	equ	0xFE7
 17593                           fsr1h	equ	0xFE2
 17594                           fsr1l	equ	0xFE1
 17595                           indf2	equ	0xFDF
 17596                           postinc2	equ	0xFDE
 17597                           postdec2	equ	0xFDD
 17598                           plusw2	equ	0xFDB
 17599                           fsr2h	equ	0xFDA
 17600                           fsr2l	equ	0xFD9
 17601                           status	equ	0xFD8
 17602                           
 17603 ;; *************** function __RegsToCANID *****************
 17604 ;; Defined at:
 17605 ;;		line 1156 in file "../ECAN.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 17608 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17609 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17610 ;;  val             1    9[COMRAM] PTR unsigned long 
 17611 ;;		 -> getVSCPFrame@id(4), 
 17612 ;;  type            1   10[COMRAM] unsigned char 
 17613 ;; Auto vars:     Size  Location     Type
 17614 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 17615 ;;		 -> getVSCPFrame@id(4), 
 17616 ;; Return value:  Size  Location     Type
 17617 ;;		None               void
 17618 ;; Registers used:
 17619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17625 ;;      Params:         4       0       0       0       0       0       0
 17626 ;;      Locals:         1       0       0       0       0       0       0
 17627 ;;      Temps:          2       0       0       0       0       0       0
 17628 ;;      Totals:         7       0       0       0       0       0       0
 17629 ;;Total ram usage:        7 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    2
 17632 ;; This function calls:
 17633 ;;		Nothing
 17634 ;; This function is called by:
 17635 ;;		_ECANReceiveMessage
 17636 ;; This function uses a non-reentrant model
 17637 ;;
 17638                           
 17639                           	psect	text63
 17640  0036D0                     __ptext63:
 17641                           	opt stack 0
 17642  0036D0                     __RegsToCANID:
 17643                           	opt stack 23
 17644                           
 17645                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17646                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17647                           
 17648                           ;incstack = 0
 17649                           ;incstack = 0
 17650  0036D0  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17651                           
 17652                           ;ECAN.c: 1161: if ( type == 0 )
 17653  0036D4  660B               	tstfsz	__RegsToCANID@type,c
 17654  0036D6  D02B               	goto	l9304
 17655                           
 17656                           ;ECAN.c: 1162: {
 17657                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17658  0036D8  500E               	movf	__RegsToCANID@Value,w,c
 17659  0036DA  6ED9               	movwf	fsr2l,c
 17660  0036DC  D86C               	call	PL56	;call to abstracted procedure
 17661  0036DE  360C               	rlcf	??__RegsToCANID,f,c
 17662  0036E0  90D8               	bcf	status,0,c
 17663  0036E2  360C               	rlcf	??__RegsToCANID,f,c
 17664  0036E4  90D8               	bcf	status,0,c
 17665  0036E6  340C               	rlcf	??__RegsToCANID,w,c
 17666  0036E8  6EDF               	movwf	indf2,c
 17667                           
 17668                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17669  0036EA  500E               	movf	__RegsToCANID@Value,w,c
 17670  0036EC  6ED9               	movwf	fsr2l,c
 17671  0036EE  6ADA               	clrf	fsr2h,c
 17672  0036F0  2AD9               	incf	fsr2l,f,c
 17673  0036F2  6ADA               	clrf	fsr2h,c
 17674  0036F4  D873               	call	PL66	;call to abstracted procedure
 17675  0036F6                     u11075:
 17676  0036F6  90D8               	bcf	status,0,c
 17677  0036F8  320C               	rrcf	??__RegsToCANID,f,c
 17678  0036FA  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17679  0036FC  D7FC               	goto	u11075
 17680  0036FE  500C               	movf	??__RegsToCANID,w,c
 17681                           
 17682                           ;ECAN.c: 1166: ptr++;
 17683                           
 17684                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17685  003700  D863               	call	PL58	;call to abstracted procedure
 17686  003702  0E05               	movlw	5
 17687  003704  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17688  003706                     u11085:
 17689  003706  90D8               	bcf	status,0,c
 17690  003708  320C               	rrcf	??__RegsToCANID,f,c
 17691  00370A  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17692  00370C  D7FC               	goto	u11085
 17693  00370E  500E               	movf	__RegsToCANID@Value,w,c
 17694  003710  6ED9               	movwf	fsr2l,c
 17695  003712  6ADA               	clrf	fsr2h,c
 17696  003714  500C               	movf	??__RegsToCANID,w,c
 17697  003716  12DF               	iorwf	indf2,f,c
 17698                           
 17699                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17700  003718  D83D               	call	PL40	;call to abstracted procedure
 17701  00371A  6ADF               	clrf	indf2,c
 17702                           
 17703                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17704  00371C  500E               	movf	__RegsToCANID@Value,w,c
 17705  00371E  6ED9               	movwf	fsr2l,c
 17706  003720  6ADA               	clrf	fsr2h,c
 17707  003722  0E03               	movlw	3
 17708  003724  26D9               	addwf	fsr2l,f,c
 17709  003726  6ADA               	clrf	fsr2h,c
 17710  003728  0E00               	movlw	0
 17711  00372A  6EDF               	movwf	indf2,c
 17712                           
 17713                           ;ECAN.c: 1170: }
 17714  00372C  D032               	goto	l235
 17715  00372E                     l9304:
 17716                           
 17717                           ;ECAN.c: 1171: else
 17718                           ;ECAN.c: 1172: {
 17719                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17720  00372E  D832               	call	PL40	;call to abstracted procedure
 17721  003730  D855               	call	PL66	;call to abstracted procedure
 17722  003732                     u11095:
 17723  003732  90D8               	bcf	status,0,c
 17724  003734  360C               	rlcf	??__RegsToCANID,f,c
 17725  003736  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17726  003738  D7FC               	goto	u11095
 17727  00373A  500C               	movf	??__RegsToCANID,w,c
 17728  00373C  6EDF               	movwf	indf2,c
 17729                           
 17730                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17731  00373E  500E               	movf	__RegsToCANID@Value,w,c
 17732  003740  6ED9               	movwf	fsr2l,c
 17733  003742  6ADA               	clrf	fsr2h,c
 17734  003744  0E03               	movlw	3
 17735  003746  26D9               	addwf	fsr2l,f,c
 17736  003748  D836               	call	PL56	;call to abstracted procedure
 17737  00374A  320C               	rrcf	??__RegsToCANID,f,c
 17738  00374C  90D8               	bcf	status,0,c
 17739  00374E  320C               	rrcf	??__RegsToCANID,f,c
 17740  003750  90D8               	bcf	status,0,c
 17741  003752  300C               	rrcf	??__RegsToCANID,w,c
 17742                           
 17743                           ;ECAN.c: 1176: ptr++;
 17744                           
 17745                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17746  003754  D839               	call	PL58	;call to abstracted procedure
 17747  003756  0E03               	movlw	3
 17748  003758  160C               	andwf	??__RegsToCANID,f,c
 17749  00375A  D81C               	call	PL40	;call to abstracted procedure
 17750  00375C  500C               	movf	??__RegsToCANID,w,c
 17751  00375E  12DF               	iorwf	indf2,f,c
 17752                           
 17753                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17754  003760  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17755  003764  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17756  003768  50DF               	movf	indf2,w,c
 17757  00376A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17758  00376C  90D8               	bcf	status,0,c
 17759  00376E  320C               	rrcf	??__RegsToCANID,f,c
 17760  003770  90D8               	bcf	status,0,c
 17761  003772  320C               	rrcf	??__RegsToCANID,f,c
 17762  003774  90D8               	bcf	status,0,c
 17763  003776  320C               	rrcf	??__RegsToCANID,f,c
 17764  003778  0E1C               	movlw	28
 17765  00377A  160C               	andwf	??__RegsToCANID,f,c
 17766  00377C  D80B               	call	PL40	;call to abstracted procedure
 17767  00377E  500C               	movf	??__RegsToCANID,w,c
 17768  003780  12DF               	iorwf	indf2,f,c
 17769                           
 17770                           ;ECAN.c: 1180: ptr++;
 17771                           
 17772                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17773  003782  D80F               	call	PL52	;call to abstracted procedure
 17774  003784  2AE1               	incf	fsr1l,f,c
 17775  003786  6AE2               	clrf	fsr1h,c
 17776  003788  CFDF FFE7          	movff	indf2,indf1
 17777                           
 17778                           ;ECAN.c: 1182: ptr++;
 17779                           
 17780                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17781  00378C  D80A               	call	PL52	;call to abstracted procedure
 17782  00378E  CFDF FFE7          	movff	indf2,indf1
 17783  003792                     l235:
 17784  003792  0012               	return	
 17785  003794                     __end_of__RegsToCANID:
 17786                           	opt stack 0
 17787  003794                     PL40:
 17788                           	opt stack 23
 17789  003794  500E               	movf	__RegsToCANID@Value,w,c
 17790  003796  6ED9               	movwf	fsr2l,c
 17791  003798  6ADA               	clrf	fsr2h,c
 17792  00379A  0E02               	movlw	2
 17793  00379C  26D9               	addwf	fsr2l,f,c
 17794  00379E  6ADA               	clrf	fsr2h,c
 17795  0037A0  0012               	return	
 17796  0037A2                     __end_ofPL40:
 17797                           	opt stack 0
 17798  0037A2                     PL52:
 17799                           	opt stack 23
 17800  0037A2  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17801  0037A4  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17802  0037A6  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17803  0037AA  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17804  0037AE  500E               	movf	__RegsToCANID@Value,w,c
 17805  0037B0  6EE1               	movwf	fsr1l,c
 17806  0037B2  6AE2               	clrf	fsr1h,c
 17807  0037B4  0012               	return	
 17808  0037B6                     __end_ofPL52:
 17809                           	opt stack 0
 17810  0037B6                     PL56:
 17811                           	opt stack 23
 17812  0037B6  6ADA               	clrf	fsr2h,c
 17813  0037B8  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17814  0037BC  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17815  0037C0  50E7               	movf	indf1,w,c
 17816  0037C2  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17817  0037C4  90D8               	bcf	status,0,c
 17818  0037C6  0012               	return	
 17819  0037C8                     __end_ofPL56:
 17820                           	opt stack 0
 17821  0037C8                     PL58:
 17822                           	opt stack 23
 17823  0037C8  6EDF               	movwf	indf2,c
 17824  0037CA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17825  0037CC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17826  0037CE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17827  0037D2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17828  0037D6  50DF               	movf	indf2,w,c
 17829  0037D8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17830  0037DA  0012               	return	
 17831  0037DC                     __end_ofPL58:
 17832                           	opt stack 0
 17833  0037DC                     PL66:
 17834                           	opt stack 23
 17835  0037DC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17836  0037E0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17837  0037E4  50E7               	movf	indf1,w,c
 17838  0037E6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17839  0037E8  0E05               	movlw	5
 17840  0037EA  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17841  0037EC  0C05               	retlw	5
 17842  0037EE                     __end_ofPL66:
 17843                           	opt stack 0
 17844                           tblptru	equ	0xFF8
 17845                           tblptrh	equ	0xFF7
 17846                           tblptrl	equ	0xFF6
 17847                           tablat	equ	0xFF5
 17848                           prodh	equ	0xFF4
 17849                           prodl	equ	0xFF3
 17850                           intcon	equ	0xFF2
 17851                           intcon2	equ	0xFF1
 17852                           postinc0	equ	0xFEE
 17853                           wreg	equ	0xFE8
 17854                           indf1	equ	0xFE7
 17855                           fsr1h	equ	0xFE2
 17856                           fsr1l	equ	0xFE1
 17857                           indf2	equ	0xFDF
 17858                           postinc2	equ	0xFDE
 17859                           postdec2	equ	0xFDD
 17860                           plusw2	equ	0xFDB
 17861                           fsr2h	equ	0xFDA
 17862                           fsr2l	equ	0xFD9
 17863                           status	equ	0xFD8
 17864                           
 17865 ;; *************** function __ECANPointBuffer *****************
 17866 ;; Defined at:
 17867 ;;		line 1207 in file "../ECAN.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;  b               1    wreg     unsigned char 
 17870 ;; Auto vars:     Size  Location     Type
 17871 ;;  b               1   10[COMRAM] unsigned char 
 17872 ;;  pt              2   11[COMRAM] PTR unsigned char 
 17873 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17874 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17875 ;; Return value:  Size  Location     Type
 17876 ;;                  2    7[COMRAM] PTR unsigned char 
 17877 ;; Registers used:
 17878 ;;		wreg, status,2, status,0
 17879 ;; Tracked objects:
 17880 ;;		On entry : F/0
 17881 ;;		On exit  : 0/0
 17882 ;;		Unchanged: 0/0
 17883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17884 ;;      Params:         3       0       0       0       0       0       0
 17885 ;;      Locals:         3       0       0       0       0       0       0
 17886 ;;      Temps:          0       0       0       0       0       0       0
 17887 ;;      Totals:         6       0       0       0       0       0       0
 17888 ;;Total ram usage:        6 bytes
 17889 ;; Hardware stack levels used:    1
 17890 ;; Hardware stack levels required when called:    2
 17891 ;; This function calls:
 17892 ;;		Nothing
 17893 ;; This function is called by:
 17894 ;;		_ECANReceiveMessage
 17895 ;; This function uses a non-reentrant model
 17896 ;;
 17897                           
 17898                           	psect	text64
 17899  004032                     __ptext64:
 17900                           	opt stack 0
 17901  004032                     __ECANPointBuffer:
 17902                           	opt stack 23
 17903                           
 17904                           ;incstack = 0
 17905                           ;incstack = 0
 17906                           ;__ECANPointBuffer@b stored from wreg
 17907  004032  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;ECAN.c: 1208: BYTE* pt;
 17911                           ;ECAN.c: 1210: switch(b)
 17912  004036  D024               	goto	l9290
 17913  004038                     l9272:
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17917  004038  0E0F               	movlw	15	;volatile
 17918  00403A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17919  00403C  0E60               	movlw	96	;volatile
 17920  00403E  D01E               	goto	L66
 17921  004040                     l9274:
 17922                           
 17923                           ; BSR set to: 0
 17924                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17925  004040  010F               	movlb	15	; () banked
 17926  004042  0E0F               	movlw	15	;volatile
 17927  004044  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17928  004046  0E50               	movlw	80	;volatile
 17929  004048  D019               	goto	L66
 17930  00404A                     l9276:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17934  00404A  010E               	movlb	14	; () banked
 17935  00404C  0E0E               	movlw	14	;volatile
 17936  00404E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17937  004050  0E20               	movlw	32	;volatile
 17938  004052  D014               	goto	L66
 17939  004054                     l9278:
 17940                           
 17941                           ; BSR set to: 0
 17942                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17943  004054  010E               	movlb	14	; () banked
 17944  004056  0E0E               	movlw	14	;volatile
 17945  004058  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17946  00405A  0E30               	movlw	48	;volatile
 17947  00405C  D00F               	goto	L66
 17948  00405E                     l9280:
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17952  00405E  010E               	movlb	14	; () banked
 17953  004060  0E0E               	movlw	14	;volatile
 17954  004062  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17955  004064  0E40               	movlw	64	;volatile
 17956  004066  D00A               	goto	L66
 17957  004068                     l9282:
 17958                           
 17959                           ; BSR set to: 0
 17960                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17961  004068  010E               	movlb	14	; () banked
 17962  00406A  0E0E               	movlw	14	;volatile
 17963  00406C  D7EB               	goto	L67
 17964  00406E                     l9284:
 17965                           
 17966                           ; BSR set to: 0
 17967                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17968  00406E  010E               	movlb	14	; () banked
 17969  004070  0E0E               	movlw	14	;volatile
 17970  004072  D7E3               	goto	L68
 17971  004074                     l9286:
 17972                           
 17973                           ; BSR set to: 0
 17974                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17975  004074  010E               	movlb	14	; () banked
 17976  004076  0E0E               	movlw	14	;volatile
 17977  004078  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17978  00407A  0E70               	movlw	112	;volatile
 17979  00407C                     L66:
 17980  00407C  6E0C               	movwf	__ECANPointBuffer@pt,c
 17981                           
 17982                           ;ECAN.c: 1235: break;
 17983  00407E  D00F               	goto	l240
 17984  004080                     l9290:
 17985                           
 17986                           ; BSR set to: 0
 17987  004080  500B               	movf	__ECANPointBuffer@b,w,c
 17988                           
 17989                           ; Switch size 1, requested type "space"
 17990                           ; Number of cases is 7, Range of values is 0 to 6
 17991                           ; switch strategies available:
 17992                           ; Name         Instructions Cycles
 17993                           ; simple_byte           22    12 (average)
 17994                           ;	Chosen strategy is simple_byte
 17995  004082  E0DA               	bz	l9272
 17996  004084  0A01               	xorlw	1	; case 1
 17997  004086  E0DC               	bz	l9274
 17998  004088  0A03               	xorlw	3	; case 2
 17999  00408A  E0DF               	bz	l9276
 18000  00408C  0A01               	xorlw	1	; case 3
 18001  00408E  E0E2               	bz	l9278
 18002  004090  0A07               	xorlw	7	; case 4
 18003  004092  E0E5               	bz	l9280
 18004  004094  0A01               	xorlw	1	; case 5
 18005  004096  E0E8               	bz	l9282
 18006  004098  0A03               	xorlw	3	; case 6
 18007  00409A  E0E9               	bz	l9284
 18008  00409C  D7EB               	goto	l9286
 18009  00409E                     l240:
 18010                           
 18011                           ;ECAN.c: 1237: return (pt);
 18012  00409E  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 18013  0040A2  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 18014  0040A6  0012               	return	
 18015  0040A8                     __end_of__ECANPointBuffer:
 18016                           	opt stack 0
 18017                           tblptru	equ	0xFF8
 18018                           tblptrh	equ	0xFF7
 18019                           tblptrl	equ	0xFF6
 18020                           tablat	equ	0xFF5
 18021                           prodh	equ	0xFF4
 18022                           prodl	equ	0xFF3
 18023                           intcon	equ	0xFF2
 18024                           intcon2	equ	0xFF1
 18025                           postinc0	equ	0xFEE
 18026                           wreg	equ	0xFE8
 18027                           indf1	equ	0xFE7
 18028                           fsr1h	equ	0xFE2
 18029                           fsr1l	equ	0xFE1
 18030                           indf2	equ	0xFDF
 18031                           postinc2	equ	0xFDE
 18032                           postdec2	equ	0xFDD
 18033                           plusw2	equ	0xFDB
 18034                           fsr2h	equ	0xFDA
 18035                           fsr2l	equ	0xFD9
 18036                           status	equ	0xFD8
 18037                           
 18038 ;; *************** function _vscp_check_pstorage *****************
 18039 ;; Defined at:
 18040 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 18041 ;; Parameters:    Size  Location     Type
 18042 ;;		None
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;		None
 18045 ;; Return value:  Size  Location     Type
 18046 ;;                  1    wreg      unsigned char 
 18047 ;; Registers used:
 18048 ;;		wreg, status,2, status,0, cstack
 18049 ;; Tracked objects:
 18050 ;;		On entry : 0/0
 18051 ;;		On exit  : 0/0
 18052 ;;		Unchanged: 0/0
 18053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18054 ;;      Params:         0       0       0       0       0       0       0
 18055 ;;      Locals:         0       0       0       0       0       0       0
 18056 ;;      Temps:          0       0       0       0       0       0       0
 18057 ;;      Totals:         0       0       0       0       0       0       0
 18058 ;;Total ram usage:        0 bytes
 18059 ;; Hardware stack levels used:    1
 18060 ;; Hardware stack levels required when called:    4
 18061 ;; This function calls:
 18062 ;;		_vscp_writeNicknamePermanent
 18063 ;;		_vscp_getSegmentCRC
 18064 ;;		_vscp_setSegmentCRC
 18065 ;;		_vscp_setControlByte
 18066 ;; This function is called by:
 18067 ;;		_main
 18068 ;; This function uses a non-reentrant model
 18069 ;;
 18070                           
 18071                           	psect	text65
 18072  004472                     __ptext65:
 18073                           	opt stack 0
 18074  004472                     _vscp_check_pstorage:
 18075                           	opt stack 25
 18076                           
 18077                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 18078                           
 18079                           ;incstack = 0
 18080                           ;incstack = 0
 18081  004472  EC4C  F023         	call	_vscp_getSegmentCRC	;wreg free
 18082  004476  0BC0               	andlw	192
 18083  004478  0A40               	xorlw	64
 18084  00447A  E102               	bnz	l12708
 18085                           
 18086                           ;vscp_firmware.c: 172: return !0;
 18087  00447C  0E01               	movlw	1
 18088  00447E  D00A               	goto	l1290
 18089  004480                     l12708:
 18090                           
 18091                           ;vscp_firmware.c: 173: }
 18092                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 18093  004480  0EFF               	movlw	255
 18094  004482  ECEF  F022         	call	_vscp_writeNicknamePermanent
 18095                           
 18096                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 18097  004486  0E00               	movlw	0
 18098  004488  ECE4  F022         	call	_vscp_setSegmentCRC
 18099                           
 18100                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 18101  00448C  0EA0               	movlw	160
 18102  00448E  ECD9  F022         	call	_vscp_setControlByte
 18103                           
 18104                           ;vscp_firmware.c: 185: return 0;
 18105  004492  0E00               	movlw	0
 18106  004494                     l1290:
 18107  004494  0012               	return	
 18108  004496                     __end_of_vscp_check_pstorage:
 18109                           	opt stack 0
 18110                           tblptru	equ	0xFF8
 18111                           tblptrh	equ	0xFF7
 18112                           tblptrl	equ	0xFF6
 18113                           tablat	equ	0xFF5
 18114                           prodh	equ	0xFF4
 18115                           prodl	equ	0xFF3
 18116                           intcon	equ	0xFF2
 18117                           intcon2	equ	0xFF1
 18118                           postinc0	equ	0xFEE
 18119                           wreg	equ	0xFE8
 18120                           indf1	equ	0xFE7
 18121                           fsr1h	equ	0xFE2
 18122                           fsr1l	equ	0xFE1
 18123                           indf2	equ	0xFDF
 18124                           postinc2	equ	0xFDE
 18125                           postdec2	equ	0xFDD
 18126                           plusw2	equ	0xFDB
 18127                           fsr2h	equ	0xFDA
 18128                           fsr2l	equ	0xFD9
 18129                           status	equ	0xFD8
 18130                           
 18131 ;; *************** function _vscp_setControlByte *****************
 18132 ;; Defined at:
 18133 ;;		line 3387 in file "../main.c"
 18134 ;; Parameters:    Size  Location     Type
 18135 ;;  ctrl            1    wreg     unsigned char 
 18136 ;; Auto vars:     Size  Location     Type
 18137 ;;  ctrl            1   11[COMRAM] unsigned char 
 18138 ;; Return value:  Size  Location     Type
 18139 ;;		None               void
 18140 ;; Registers used:
 18141 ;;		wreg, status,2, cstack
 18142 ;; Tracked objects:
 18143 ;;		On entry : 0/0
 18144 ;;		On exit  : 0/0
 18145 ;;		Unchanged: 0/0
 18146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18147 ;;      Params:         0       0       0       0       0       0       0
 18148 ;;      Locals:         1       0       0       0       0       0       0
 18149 ;;      Temps:          0       0       0       0       0       0       0
 18150 ;;      Totals:         1       0       0       0       0       0       0
 18151 ;;Total ram usage:        1 bytes
 18152 ;; Hardware stack levels used:    1
 18153 ;; Hardware stack levels required when called:    3
 18154 ;; This function calls:
 18155 ;;		_Busy_eep
 18156 ;;		_Write_b_eep
 18157 ;; This function is called by:
 18158 ;;		_vscp_check_pstorage
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text66
 18163  0045B2                     __ptext66:
 18164                           	opt stack 0
 18165  0045B2                     _vscp_setControlByte:
 18166                           	opt stack 25
 18167                           
 18168                           ;incstack = 0
 18169                           ;incstack = 0
 18170                           ;vscp_setControlByte@ctrl stored from wreg
 18171  0045B2  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 18172                           
 18173                           ;main.c: 3388: (Busy_eep(), Write_b_eep(0x03,ctrl));
 18174  0045B6  EC55  F023         	call	_Busy_eep	;wreg free
 18175  0045BA  6A09               	clrf	?_Write_b_eep+1,c
 18176  0045BC  0E03               	movlw	3
 18177  0045BE  6E08               	movwf	?_Write_b_eep,c
 18178  0045C0  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18179  0045C4  EF28  F021         	goto	_Write_b_eep	;wreg free
 18180  0045C8                     __end_of_vscp_setControlByte:
 18181                           	opt stack 0
 18182                           tblptru	equ	0xFF8
 18183                           tblptrh	equ	0xFF7
 18184                           tblptrl	equ	0xFF6
 18185                           tablat	equ	0xFF5
 18186                           prodh	equ	0xFF4
 18187                           prodl	equ	0xFF3
 18188                           intcon	equ	0xFF2
 18189                           intcon2	equ	0xFF1
 18190                           postinc0	equ	0xFEE
 18191                           wreg	equ	0xFE8
 18192                           indf1	equ	0xFE7
 18193                           fsr1h	equ	0xFE2
 18194                           fsr1l	equ	0xFE1
 18195                           indf2	equ	0xFDF
 18196                           postinc2	equ	0xFDE
 18197                           postdec2	equ	0xFDD
 18198                           plusw2	equ	0xFDB
 18199                           fsr2h	equ	0xFDA
 18200                           fsr2l	equ	0xFD9
 18201                           status	equ	0xFD8
 18202                           
 18203 ;; *************** function _vscp_setSegmentCRC *****************
 18204 ;; Defined at:
 18205 ;;		line 3378 in file "../main.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;  crc             1    wreg     unsigned char 
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;  crc             1   11[COMRAM] unsigned char 
 18210 ;; Return value:  Size  Location     Type
 18211 ;;		None               void
 18212 ;; Registers used:
 18213 ;;		wreg, status,2, cstack
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18219 ;;      Params:         0       0       0       0       0       0       0
 18220 ;;      Locals:         1       0       0       0       0       0       0
 18221 ;;      Temps:          0       0       0       0       0       0       0
 18222 ;;      Totals:         1       0       0       0       0       0       0
 18223 ;;Total ram usage:        1 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; Hardware stack levels required when called:    3
 18226 ;; This function calls:
 18227 ;;		_Busy_eep
 18228 ;;		_Write_b_eep
 18229 ;; This function is called by:
 18230 ;;		_vscp_check_pstorage
 18231 ;;		_vscp_handleProbeState
 18232 ;;		_vscp_handleHeartbeat
 18233 ;;		_vscp_handleSetNickname
 18234 ;; This function uses a non-reentrant model
 18235 ;;
 18236                           
 18237                           	psect	text67
 18238  0045C8                     __ptext67:
 18239                           	opt stack 0
 18240  0045C8                     _vscp_setSegmentCRC:
 18241                           	opt stack 24
 18242                           
 18243                           ;incstack = 0
 18244                           ;incstack = 0
 18245                           ;vscp_setSegmentCRC@crc stored from wreg
 18246  0045C8  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 18247                           
 18248                           ;main.c: 3379: (Busy_eep(), Write_b_eep(0x02,crc));
 18249  0045CC  EC55  F023         	call	_Busy_eep	;wreg free
 18250  0045D0  6A09               	clrf	?_Write_b_eep+1,c
 18251  0045D2  0E02               	movlw	2
 18252  0045D4  6E08               	movwf	?_Write_b_eep,c
 18253  0045D6  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 18254  0045DA  EF28  F021         	goto	_Write_b_eep	;wreg free
 18255  0045DE                     __end_of_vscp_setSegmentCRC:
 18256                           	opt stack 0
 18257                           tblptru	equ	0xFF8
 18258                           tblptrh	equ	0xFF7
 18259                           tblptrl	equ	0xFF6
 18260                           tablat	equ	0xFF5
 18261                           prodh	equ	0xFF4
 18262                           prodl	equ	0xFF3
 18263                           intcon	equ	0xFF2
 18264                           intcon2	equ	0xFF1
 18265                           postinc0	equ	0xFEE
 18266                           wreg	equ	0xFE8
 18267                           indf1	equ	0xFE7
 18268                           fsr1h	equ	0xFE2
 18269                           fsr1l	equ	0xFE1
 18270                           indf2	equ	0xFDF
 18271                           postinc2	equ	0xFDE
 18272                           postdec2	equ	0xFDD
 18273                           plusw2	equ	0xFDB
 18274                           fsr2h	equ	0xFDA
 18275                           fsr2l	equ	0xFD9
 18276                           status	equ	0xFD8
 18277                           
 18278 ;; *************** function _vscp_getSegmentCRC *****************
 18279 ;; Defined at:
 18280 ;;		line 3369 in file "../main.c"
 18281 ;; Parameters:    Size  Location     Type
 18282 ;;		None
 18283 ;; Auto vars:     Size  Location     Type
 18284 ;;		None
 18285 ;; Return value:  Size  Location     Type
 18286 ;;                  1    wreg      unsigned char 
 18287 ;; Registers used:
 18288 ;;		wreg, status,2, cstack
 18289 ;; Tracked objects:
 18290 ;;		On entry : 0/0
 18291 ;;		On exit  : 0/0
 18292 ;;		Unchanged: 0/0
 18293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18294 ;;      Params:         0       0       0       0       0       0       0
 18295 ;;      Locals:         0       0       0       0       0       0       0
 18296 ;;      Temps:          0       0       0       0       0       0       0
 18297 ;;      Totals:         0       0       0       0       0       0       0
 18298 ;;Total ram usage:        0 bytes
 18299 ;; Hardware stack levels used:    1
 18300 ;; Hardware stack levels required when called:    3
 18301 ;; This function calls:
 18302 ;;		_Read_b_eep
 18303 ;; This function is called by:
 18304 ;;		_vscp_check_pstorage
 18305 ;;		_vscp_handleHeartbeat
 18306 ;; This function uses a non-reentrant model
 18307 ;;
 18308                           
 18309                           	psect	text68
 18310  004698                     __ptext68:
 18311                           	opt stack 0
 18312  004698                     _vscp_getSegmentCRC:
 18313                           	opt stack 24
 18314                           
 18315                           ;main.c: 3370: return Read_b_eep(0x02);
 18316                           
 18317                           ;incstack = 0
 18318                           ;incstack = 0
 18319  004698  6A09               	clrf	?_Read_b_eep+1,c
 18320  00469A  0E02               	movlw	2
 18321  00469C  6E08               	movwf	?_Read_b_eep,c
 18322  00469E  EF21  F023         	goto	_Read_b_eep	;wreg free
 18323  0046A2                     __end_of_vscp_getSegmentCRC:
 18324                           	opt stack 0
 18325                           tblptru	equ	0xFF8
 18326                           tblptrh	equ	0xFF7
 18327                           tblptrl	equ	0xFF6
 18328                           tablat	equ	0xFF5
 18329                           prodh	equ	0xFF4
 18330                           prodl	equ	0xFF3
 18331                           intcon	equ	0xFF2
 18332                           intcon2	equ	0xFF1
 18333                           postinc0	equ	0xFEE
 18334                           wreg	equ	0xFE8
 18335                           indf1	equ	0xFE7
 18336                           fsr1h	equ	0xFE2
 18337                           fsr1l	equ	0xFE1
 18338                           indf2	equ	0xFDF
 18339                           postinc2	equ	0xFDE
 18340                           postdec2	equ	0xFDD
 18341                           plusw2	equ	0xFDB
 18342                           fsr2h	equ	0xFDA
 18343                           fsr2l	equ	0xFD9
 18344                           status	equ	0xFD8
 18345                           
 18346 ;; *************** function _vscp_writeNicknamePermanent *****************
 18347 ;; Defined at:
 18348 ;;		line 1367 in file "../main.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;  nickname        1    wreg     unsigned char 
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;  nickname        1   11[COMRAM] unsigned char 
 18353 ;; Return value:  Size  Location     Type
 18354 ;;		None               void
 18355 ;; Registers used:
 18356 ;;		wreg, status,2, cstack
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18362 ;;      Params:         0       0       0       0       0       0       0
 18363 ;;      Locals:         1       0       0       0       0       0       0
 18364 ;;      Temps:          0       0       0       0       0       0       0
 18365 ;;      Totals:         1       0       0       0       0       0       0
 18366 ;;Total ram usage:        1 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; Hardware stack levels required when called:    3
 18369 ;; This function calls:
 18370 ;;		_Busy_eep
 18371 ;;		_Write_b_eep
 18372 ;; This function is called by:
 18373 ;;		_vscp_check_pstorage
 18374 ;;		_vscp_handleProbeState
 18375 ;;		_vscp_handleHeartbeat
 18376 ;;		_vscp_handleSetNickname
 18377 ;;		_vscp_handleDropNickname
 18378 ;; This function uses a non-reentrant model
 18379 ;;
 18380                           
 18381                           	psect	text69
 18382  0045DE                     __ptext69:
 18383                           	opt stack 0
 18384  0045DE                     _vscp_writeNicknamePermanent:
 18385                           	opt stack 24
 18386                           
 18387                           ;incstack = 0
 18388                           ;incstack = 0
 18389                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18390  0045DE  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18391                           
 18392                           ;main.c: 1368: (Busy_eep(), Write_b_eep(0x01,nickname));
 18393  0045E2  EC55  F023         	call	_Busy_eep	;wreg free
 18394  0045E6  6A09               	clrf	?_Write_b_eep+1,c
 18395  0045E8  0E01               	movlw	1
 18396  0045EA  6E08               	movwf	?_Write_b_eep,c
 18397  0045EC  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18398  0045F0  EF28  F021         	goto	_Write_b_eep	;wreg free
 18399  0045F4                     __end_of_vscp_writeNicknamePermanent:
 18400                           	opt stack 0
 18401                           tblptru	equ	0xFF8
 18402                           tblptrh	equ	0xFF7
 18403                           tblptrl	equ	0xFF6
 18404                           tablat	equ	0xFF5
 18405                           prodh	equ	0xFF4
 18406                           prodl	equ	0xFF3
 18407                           intcon	equ	0xFF2
 18408                           intcon2	equ	0xFF1
 18409                           postinc0	equ	0xFEE
 18410                           wreg	equ	0xFE8
 18411                           indf1	equ	0xFE7
 18412                           fsr1h	equ	0xFE2
 18413                           fsr1l	equ	0xFE1
 18414                           indf2	equ	0xFDF
 18415                           postinc2	equ	0xFDE
 18416                           postdec2	equ	0xFDD
 18417                           plusw2	equ	0xFDB
 18418                           fsr2h	equ	0xFDA
 18419                           fsr2l	equ	0xFD9
 18420                           status	equ	0xFD8
 18421                           
 18422 ;; *************** function _Write_b_eep *****************
 18423 ;; Defined at:
 18424 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;  badd            2    7[COMRAM] unsigned int 
 18427 ;;  bdat            1    9[COMRAM] unsigned char 
 18428 ;; Auto vars:     Size  Location     Type
 18429 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 18430 ;; Return value:  Size  Location     Type
 18431 ;;		None               void
 18432 ;; Registers used:
 18433 ;;		wreg, status,2
 18434 ;; Tracked objects:
 18435 ;;		On entry : 0/0
 18436 ;;		On exit  : 0/0
 18437 ;;		Unchanged: 0/0
 18438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18439 ;;      Params:         3       0       0       0       0       0       0
 18440 ;;      Locals:         1       0       0       0       0       0       0
 18441 ;;      Temps:          0       0       0       0       0       0       0
 18442 ;;      Totals:         4       0       0       0       0       0       0
 18443 ;;Total ram usage:        4 bytes
 18444 ;; Hardware stack levels used:    1
 18445 ;; Hardware stack levels required when called:    2
 18446 ;; This function calls:
 18447 ;;		Nothing
 18448 ;; This function is called by:
 18449 ;;		_main
 18450 ;;		_init_app_eeprom
 18451 ;;		_vscp_setGUID
 18452 ;;		_vscp_setManufacturerId
 18453 ;;		_vscp_writeNicknamePermanent
 18454 ;;		_vscp_writeAppReg
 18455 ;;		_vscp_setUserID
 18456 ;;		_vscp_setSegmentCRC
 18457 ;;		_vscp_setControlByte
 18458 ;;		_vscp_goBootloaderMode
 18459 ;; This function uses a non-reentrant model
 18460 ;;
 18461                           
 18462                           	psect	text70
 18463  004250                     __ptext70:
 18464                           	opt stack 0
 18465  004250                     _Write_b_eep:
 18466                           	opt stack 23
 18467                           
 18468                           ;incstack = 0
 18469                           ;incstack = 0
 18470  004250  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 18471  004254  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 18472  004258  9EA6               	bcf	4006,7,c	;volatile
 18473  00425A  9CA6               	bcf	4006,6,c	;volatile
 18474  00425C  84A6               	bsf	4006,2,c	;volatile
 18475  00425E  0E00               	movlw	0
 18476  004260  BEF2               	btfsc	intcon,7,c	;volatile
 18477  004262  0E01               	movlw	1
 18478  004264  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18479  004266  9EF2               	bcf	intcon,7,c	;volatile
 18480  004268  0E55               	movlw	85
 18481  00426A  6EA7               	movwf	4007,c	;volatile
 18482  00426C  0EAA               	movlw	170
 18483  00426E  6EA7               	movwf	4007,c	;volatile
 18484  004270  82A6               	bsf	4006,1,c	;volatile
 18485  004272                     l1565:
 18486  004272  B2A6               	btfsc	4006,1,c	;volatile
 18487  004274  D7FE               	goto	l1565
 18488  004276  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18489  004278  D002               	bra	u16685
 18490  00427A  9EF2               	bcf	intcon,7,c	;volatile
 18491  00427C  D001               	bra	u16686
 18492  00427E                     u16685:
 18493  00427E  8EF2               	bsf	intcon,7,c	;volatile
 18494  004280                     u16686:
 18495  004280  94A6               	bcf	4006,2,c	;volatile
 18496  004282  0012               	return	
 18497  004284                     __end_of_Write_b_eep:
 18498                           	opt stack 0
 18499                           tblptru	equ	0xFF8
 18500                           tblptrh	equ	0xFF7
 18501                           tblptrl	equ	0xFF6
 18502                           tablat	equ	0xFF5
 18503                           prodh	equ	0xFF4
 18504                           prodl	equ	0xFF3
 18505                           intcon	equ	0xFF2
 18506                           intcon2	equ	0xFF1
 18507                           postinc0	equ	0xFEE
 18508                           wreg	equ	0xFE8
 18509                           indf1	equ	0xFE7
 18510                           fsr1h	equ	0xFE2
 18511                           fsr1l	equ	0xFE1
 18512                           indf2	equ	0xFDF
 18513                           postinc2	equ	0xFDE
 18514                           postdec2	equ	0xFDD
 18515                           plusw2	equ	0xFDB
 18516                           fsr2h	equ	0xFDA
 18517                           fsr2l	equ	0xFD9
 18518                           status	equ	0xFD8
 18519                           
 18520 ;; *************** function _Busy_eep *****************
 18521 ;; Defined at:
 18522 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 18523 ;; Parameters:    Size  Location     Type
 18524 ;;		None
 18525 ;; Auto vars:     Size  Location     Type
 18526 ;;		None
 18527 ;; Return value:  Size  Location     Type
 18528 ;;		None               void
 18529 ;; Registers used:
 18530 ;;		None
 18531 ;; Tracked objects:
 18532 ;;		On entry : 0/0
 18533 ;;		On exit  : 0/0
 18534 ;;		Unchanged: 0/0
 18535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18536 ;;      Params:         0       0       0       0       0       0       0
 18537 ;;      Locals:         0       0       0       0       0       0       0
 18538 ;;      Temps:          0       0       0       0       0       0       0
 18539 ;;      Totals:         0       0       0       0       0       0       0
 18540 ;;Total ram usage:        0 bytes
 18541 ;; Hardware stack levels used:    1
 18542 ;; Hardware stack levels required when called:    2
 18543 ;; This function calls:
 18544 ;;		Nothing
 18545 ;; This function is called by:
 18546 ;;		_main
 18547 ;;		_init_app_eeprom
 18548 ;;		_vscp_setGUID
 18549 ;;		_vscp_setManufacturerId
 18550 ;;		_vscp_writeNicknamePermanent
 18551 ;;		_vscp_writeAppReg
 18552 ;;		_vscp_setUserID
 18553 ;;		_vscp_setSegmentCRC
 18554 ;;		_vscp_setControlByte
 18555 ;;		_vscp_goBootloaderMode
 18556 ;; This function uses a non-reentrant model
 18557 ;;
 18558                           
 18559                           	psect	text71
 18560  0046AA                     __ptext71:
 18561                           	opt stack 0
 18562  0046AA                     _Busy_eep:
 18563                           	opt stack 23
 18564  0046AA                     l1540:
 18565  0046AA  A2A6               	btfss	4006,1,c	;volatile
 18566  0046AC  0012               	return	
 18567  0046AE  D7FD               	goto	l1540
 18568  0046B0                     __end_of_Busy_eep:
 18569                           	opt stack 0
 18570                           tblptru	equ	0xFF8
 18571                           tblptrh	equ	0xFF7
 18572                           tblptrl	equ	0xFF6
 18573                           tablat	equ	0xFF5
 18574                           prodh	equ	0xFF4
 18575                           prodl	equ	0xFF3
 18576                           intcon	equ	0xFF2
 18577                           intcon2	equ	0xFF1
 18578                           postinc0	equ	0xFEE
 18579                           wreg	equ	0xFE8
 18580                           indf1	equ	0xFE7
 18581                           fsr1h	equ	0xFE2
 18582                           fsr1l	equ	0xFE1
 18583                           indf2	equ	0xFDF
 18584                           postinc2	equ	0xFDE
 18585                           postdec2	equ	0xFDD
 18586                           plusw2	equ	0xFDB
 18587                           fsr2h	equ	0xFDA
 18588                           fsr2l	equ	0xFD9
 18589                           status	equ	0xFD8
 18590                           
 18591 ;; *************** function _init *****************
 18592 ;; Defined at:
 18593 ;;		line 626 in file "../main.c"
 18594 ;; Parameters:    Size  Location     Type
 18595 ;;		None
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;		None
 18598 ;; Return value:  Size  Location     Type
 18599 ;;		None               void
 18600 ;; Registers used:
 18601 ;;		wreg, status,2, status,0, cstack
 18602 ;; Tracked objects:
 18603 ;;		On entry : 0/0
 18604 ;;		On exit  : 0/0
 18605 ;;		Unchanged: 0/0
 18606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18607 ;;      Params:         0       0       0       0       0       0       0
 18608 ;;      Locals:         0       0       0       0       0       0       0
 18609 ;;      Temps:          0       0       0       0       0       0       0
 18610 ;;      Totals:         0       0       0       0       0       0       0
 18611 ;;Total ram usage:        0 bytes
 18612 ;; Hardware stack levels used:    1
 18613 ;; Hardware stack levels required when called:    4
 18614 ;; This function calls:
 18615 ;;		_ECANInitialize
 18616 ;;		_WriteTimer0
 18617 ;;		_OpenTimer0
 18618 ;; This function is called by:
 18619 ;;		_main
 18620 ;; This function uses a non-reentrant model
 18621 ;;
 18622                           
 18623                           	psect	text72
 18624  00418C                     __ptext72:
 18625                           	opt stack 0
 18626  00418C                     _init:
 18627                           	opt stack 25
 18628                           
 18629                           ;main.c: 633: ADCON1 = 0x0f;
 18630                           
 18631                           ;incstack = 0
 18632                           ;incstack = 0
 18633  00418C  0E0F               	movlw	15
 18634  00418E  6EC1               	movwf	4033,c	;volatile
 18635                           
 18636                           ;main.c: 643: TRISA = 0b00000000;
 18637  004190  6A92               	clrf	3986,c	;volatile
 18638                           
 18639                           ;main.c: 644: PORTA = 0x00;
 18640  004192  6A80               	clrf	3968,c	;volatile
 18641                           
 18642                           ;main.c: 656: TRISB = 0b00001000;
 18643  004194  0E08               	movlw	8
 18644  004196  6E93               	movwf	3987,c	;volatile
 18645                           
 18646                           ;main.c: 657: PORTB = 0x00;
 18647  004198  6A81               	clrf	3969,c	;volatile
 18648                           
 18649                           ;main.c: 667: TRISC = 0b00000001;
 18650  00419A  0E01               	movlw	1
 18651  00419C  6E94               	movwf	3988,c	;volatile
 18652                           
 18653                           ;main.c: 668: PORTC = 0x00;
 18654  00419E  6A82               	clrf	3970,c	;volatile
 18655                           
 18656                           ;main.c: 694: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 18657  0041A0  0E92               	movlw	146
 18658  0041A2  EC7B  F022         	call	_OpenTimer0
 18659                           
 18660                           ;main.c: 695: WriteTimer0( 0xfb1d );
 18661  0041A6  0EFB               	movlw	251
 18662  0041A8  6E09               	movwf	?_WriteTimer0+1,c
 18663  0041AA  0E1D               	movlw	29
 18664  0041AC  6E08               	movwf	?_WriteTimer0,c
 18665  0041AE  EC18  F023         	call	_WriteTimer0	;wreg free
 18666                           
 18667                           ;main.c: 698: PORTBbits.RB0 = 0;
 18668  0041B2  9081               	bcf	3969,0,c	;volatile
 18669                           
 18670                           ;main.c: 699: PORTBbits.RB1 = 0;
 18671  0041B4  9281               	bcf	3969,1,c	;volatile
 18672                           
 18673                           ;main.c: 700: PORTCbits.RC3 = 0;
 18674  0041B6  9682               	bcf	3970,3,c	;volatile
 18675                           
 18676                           ;main.c: 701: PORTCbits.RC4 = 0;
 18677  0041B8  9882               	bcf	3970,4,c	;volatile
 18678                           
 18679                           ;main.c: 702: PORTCbits.RC5 = 0;
 18680  0041BA  9A82               	bcf	3970,5,c	;volatile
 18681                           
 18682                           ;main.c: 703: PORTCbits.RC6 = 0;
 18683  0041BC  9C82               	bcf	3970,6,c	;volatile
 18684                           
 18685                           ;main.c: 704: PORTCbits.RC7 = 0;
 18686  0041BE  9E82               	bcf	3970,7,c	;volatile
 18687                           
 18688                           ;main.c: 705: PORTAbits.RA2 = 0;
 18689  0041C0  9480               	bcf	3968,2,c	;volatile
 18690                           
 18691                           ;main.c: 706: PORTAbits.RA1 = 0;
 18692  0041C2  9280               	bcf	3968,1,c	;volatile
 18693                           
 18694                           ;main.c: 707: PORTAbits.RA0 = 0;
 18695  0041C4  9080               	bcf	3968,0,c	;volatile
 18696                           
 18697                           ;main.c: 710: ECANInitialize();
 18698  0041C6  EC92  F01F         	call	_ECANInitialize	;wreg free
 18699                           
 18700                           ;main.c: 731: INTCONbits.PEIE = 1;
 18701  0041CA  8CF2               	bsf	intcon,6,c	;volatile
 18702                           
 18703                           ;main.c: 734: INTCONbits.GIE = 1;
 18704  0041CC  8EF2               	bsf	intcon,7,c	;volatile
 18705  0041CE  0012               	return	
 18706  0041D0                     __end_of_init:
 18707                           	opt stack 0
 18708                           tblptru	equ	0xFF8
 18709                           tblptrh	equ	0xFF7
 18710                           tblptrl	equ	0xFF6
 18711                           tablat	equ	0xFF5
 18712                           prodh	equ	0xFF4
 18713                           prodl	equ	0xFF3
 18714                           intcon	equ	0xFF2
 18715                           intcon2	equ	0xFF1
 18716                           postinc0	equ	0xFEE
 18717                           wreg	equ	0xFE8
 18718                           indf1	equ	0xFE7
 18719                           fsr1h	equ	0xFE2
 18720                           fsr1l	equ	0xFE1
 18721                           indf2	equ	0xFDF
 18722                           postinc2	equ	0xFDE
 18723                           postdec2	equ	0xFDD
 18724                           plusw2	equ	0xFDB
 18725                           fsr2h	equ	0xFDA
 18726                           fsr2l	equ	0xFD9
 18727                           status	equ	0xFD8
 18728                           
 18729 ;; *************** function _OpenTimer0 *****************
 18730 ;; Defined at:
 18731 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18732 ;; Parameters:    Size  Location     Type
 18733 ;;  config          1    wreg     unsigned char 
 18734 ;; Auto vars:     Size  Location     Type
 18735 ;;  config          1    7[COMRAM] unsigned char 
 18736 ;; Return value:  Size  Location     Type
 18737 ;;		None               void
 18738 ;; Registers used:
 18739 ;;		wreg, status,2, status,0
 18740 ;; Tracked objects:
 18741 ;;		On entry : 0/0
 18742 ;;		On exit  : 0/0
 18743 ;;		Unchanged: 0/0
 18744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18745 ;;      Params:         0       0       0       0       0       0       0
 18746 ;;      Locals:         1       0       0       0       0       0       0
 18747 ;;      Temps:          0       0       0       0       0       0       0
 18748 ;;      Totals:         1       0       0       0       0       0       0
 18749 ;;Total ram usage:        1 bytes
 18750 ;; Hardware stack levels used:    1
 18751 ;; Hardware stack levels required when called:    2
 18752 ;; This function calls:
 18753 ;;		Nothing
 18754 ;; This function is called by:
 18755 ;;		_init
 18756 ;; This function uses a non-reentrant model
 18757 ;;
 18758                           
 18759                           	psect	text73
 18760  0044F6                     __ptext73:
 18761                           	opt stack 0
 18762  0044F6                     _OpenTimer0:
 18763                           	opt stack 26
 18764                           
 18765                           ;incstack = 0
 18766                           ;incstack = 0
 18767                           ;OpenTimer0@config stored from wreg
 18768  0044F6  CFE8 F008          	movff	wreg,OpenTimer0@config
 18769  0044FA  5008               	movf	OpenTimer0@config,w,c
 18770  0044FC  0B7F               	andlw	127
 18771  0044FE  6ED5               	movwf	4053,c	;volatile
 18772  004500  6AD7               	clrf	4055,c	;volatile
 18773  004502  6AD6               	clrf	4054,c	;volatile
 18774  004504  94F2               	bcf	intcon,2,c	;volatile
 18775  004506  AE08               	btfss	OpenTimer0@config,7,c
 18776  004508  D002               	goto	l1581
 18777  00450A  8AF2               	bsf	intcon,5,c	;volatile
 18778  00450C  D001               	goto	l1582
 18779  00450E                     l1581:
 18780  00450E  9AF2               	bcf	intcon,5,c	;volatile
 18781  004510                     l1582:
 18782  004510  8ED5               	bsf	4053,7,c	;volatile
 18783  004512  0012               	return	
 18784  004514                     __end_of_OpenTimer0:
 18785                           	opt stack 0
 18786                           tblptru	equ	0xFF8
 18787                           tblptrh	equ	0xFF7
 18788                           tblptrl	equ	0xFF6
 18789                           tablat	equ	0xFF5
 18790                           prodh	equ	0xFF4
 18791                           prodl	equ	0xFF3
 18792                           intcon	equ	0xFF2
 18793                           intcon2	equ	0xFF1
 18794                           postinc0	equ	0xFEE
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           fsr1h	equ	0xFE2
 18798                           fsr1l	equ	0xFE1
 18799                           indf2	equ	0xFDF
 18800                           postinc2	equ	0xFDE
 18801                           postdec2	equ	0xFDD
 18802                           plusw2	equ	0xFDB
 18803                           fsr2h	equ	0xFDA
 18804                           fsr2l	equ	0xFD9
 18805                           status	equ	0xFD8
 18806                           
 18807 ;; *************** function _WriteTimer0 *****************
 18808 ;; Defined at:
 18809 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18810 ;; Parameters:    Size  Location     Type
 18811 ;;  timer0          2    7[COMRAM] unsigned int 
 18812 ;; Auto vars:     Size  Location     Type
 18813 ;;  timer           2    9[COMRAM] struct Timers
 18814 ;; Return value:  Size  Location     Type
 18815 ;;		None               void
 18816 ;; Registers used:
 18817 ;;		None
 18818 ;; Tracked objects:
 18819 ;;		On entry : 0/0
 18820 ;;		On exit  : 0/0
 18821 ;;		Unchanged: 0/0
 18822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18823 ;;      Params:         2       0       0       0       0       0       0
 18824 ;;      Locals:         2       0       0       0       0       0       0
 18825 ;;      Temps:          0       0       0       0       0       0       0
 18826 ;;      Totals:         4       0       0       0       0       0       0
 18827 ;;Total ram usage:        4 bytes
 18828 ;; Hardware stack levels used:    1
 18829 ;; Hardware stack levels required when called:    2
 18830 ;; This function calls:
 18831 ;;		Nothing
 18832 ;; This function is called by:
 18833 ;;		_init
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           	psect	text74
 18838  004630                     __ptext74:
 18839                           	opt stack 0
 18840  004630                     _WriteTimer0:
 18841                           	opt stack 26
 18842                           
 18843                           ;incstack = 0
 18844                           ;incstack = 0
 18845  004630  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18846  004634  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18847  004638  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18848  00463C  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18849  004640  0012               	return	
 18850  004642                     __end_of_WriteTimer0:
 18851                           	opt stack 0
 18852                           tblptru	equ	0xFF8
 18853                           tblptrh	equ	0xFF7
 18854                           tblptrl	equ	0xFF6
 18855                           tablat	equ	0xFF5
 18856                           prodh	equ	0xFF4
 18857                           prodl	equ	0xFF3
 18858                           intcon	equ	0xFF2
 18859                           intcon2	equ	0xFF1
 18860                           postinc0	equ	0xFEE
 18861                           wreg	equ	0xFE8
 18862                           indf1	equ	0xFE7
 18863                           fsr1h	equ	0xFE2
 18864                           fsr1l	equ	0xFE1
 18865                           indf2	equ	0xFDF
 18866                           postinc2	equ	0xFDE
 18867                           postdec2	equ	0xFDD
 18868                           plusw2	equ	0xFDB
 18869                           fsr2h	equ	0xFDA
 18870                           fsr2l	equ	0xFD9
 18871                           status	equ	0xFD8
 18872                           
 18873 ;; *************** function _ECANInitialize *****************
 18874 ;; Defined at:
 18875 ;;		line 168 in file "../ECAN.c"
 18876 ;; Parameters:    Size  Location     Type
 18877 ;;		None
 18878 ;; Auto vars:     Size  Location     Type
 18879 ;;		None
 18880 ;; Return value:  Size  Location     Type
 18881 ;;		None               void
 18882 ;; Registers used:
 18883 ;;		wreg, status,2, status,0, cstack
 18884 ;; Tracked objects:
 18885 ;;		On entry : 0/0
 18886 ;;		On exit  : 0/0
 18887 ;;		Unchanged: 0/0
 18888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18889 ;;      Params:         0       0       0       0       0       0       0
 18890 ;;      Locals:         0       0       0       0       0       0       0
 18891 ;;      Temps:          0       0       0       0       0       0       0
 18892 ;;      Totals:         0       0       0       0       0       0       0
 18893 ;;Total ram usage:        0 bytes
 18894 ;; Hardware stack levels used:    1
 18895 ;; Hardware stack levels required when called:    3
 18896 ;; This function calls:
 18897 ;;		_ECANSetOperationMode
 18898 ;; This function is called by:
 18899 ;;		_init
 18900 ;; This function uses a non-reentrant model
 18901 ;;
 18902                           
 18903                           	psect	text75
 18904  003F24                     __ptext75:
 18905                           	opt stack 0
 18906  003F24                     _ECANInitialize:
 18907                           	opt stack 25
 18908                           
 18909                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18910                           
 18911                           ;incstack = 0
 18912                           ;incstack = 0
 18913  003F24  0E80               	movlw	128
 18914  003F26  ECCD  F022         	call	_ECANSetOperationMode
 18915                           
 18916                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18917  003F2A  0E09               	movlw	9
 18918  003F2C  6E70               	movwf	3952,c	;volatile
 18919                           
 18920                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18921  003F2E  0EFC               	movlw	252
 18922  003F30  6E71               	movwf	3953,c	;volatile
 18923                           
 18924                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18925                           ;ECAN.c: 181: (0 << 6) |
 18926                           ;ECAN.c: 182: (2-1);
 18927  003F32  0E01               	movlw	1
 18928  003F34  6E72               	movwf	3954,c	;volatile
 18929                           
 18930                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18931  003F36  0E20               	movlw	32
 18932  003F38  6E73               	movwf	3955,c	;volatile
 18933                           
 18934                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18935  003F3A  8E77               	bsf	3959,7,c	;volatile
 18936                           
 18937                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18938  003F3C  9C77               	bcf	3959,6,c	;volatile
 18939                           
 18940                           ;ECAN.c: 205: RXB0CON = 0;
 18941  003F3E  6A60               	clrf	3936,c	;volatile
 18942                           
 18943                           ;ECAN.c: 211: RXB1CON = 0;
 18944  003F40  010F               	movlb	15	; () banked
 18945  003F42  6B50               	clrf	80,b	;volatile
 18946                           
 18947                           ; BSR set to: 15
 18948                           ;ECAN.c: 221: B0CON = 0;
 18949  003F44  010E               	movlb	14	; () banked
 18950  003F46  6B20               	clrf	32,b	;volatile
 18951                           
 18952                           ; BSR set to: 14
 18953                           ;ECAN.c: 231: B1CON = 0;
 18954  003F48  6B30               	clrf	48,b	;volatile
 18955                           
 18956                           ; BSR set to: 14
 18957                           ;ECAN.c: 241: B2CON = 0;
 18958  003F4A  6B40               	clrf	64,b	;volatile
 18959                           
 18960                           ; BSR set to: 14
 18961                           ;ECAN.c: 254: B3CON = 0 << 2;
 18962  003F4C  6B50               	clrf	80,b	;volatile
 18963                           
 18964                           ; BSR set to: 14
 18965                           ;ECAN.c: 264: B4CON = 0 << 2;
 18966  003F4E  6B60               	clrf	96,b	;volatile
 18967                           
 18968                           ; BSR set to: 14
 18969                           ;ECAN.c: 274: B5CON = 0 << 2;
 18970  003F50  6B70               	clrf	112,b	;volatile
 18971                           
 18972                           ; BSR set to: 14
 18973                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18974  003F52  0EE0               	movlw	224
 18975  003F54  010D               	movlb	13	; () banked
 18976  003F56  6FF8               	movwf	248,b	;volatile
 18977                           
 18978                           ; BSR set to: 13
 18979                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18980  003F58  010F               	movlb	15	; () banked
 18981  003F5A  6B00               	clrf	0,b	;volatile
 18982                           
 18983                           ; BSR set to: 15
 18984  003F5C  0E08               	movlw	8
 18985  003F5E  6F01               	movwf	1,b	;volatile
 18986                           
 18987                           ; BSR set to: 15
 18988  003F60  6B02               	clrf	2,b	;volatile
 18989                           
 18990                           ; BSR set to: 15
 18991  003F62  6B03               	clrf	3,b	;volatile
 18992                           
 18993                           ; BSR set to: 15
 18994                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18995  003F64  6B04               	clrf	4,b	;volatile
 18996                           
 18997                           ; BSR set to: 15
 18998  003F66  0EE8               	movlw	232
 18999  003F68  6F05               	movwf	5,b	;volatile
 19000                           
 19001                           ; BSR set to: 15
 19002  003F6A  0E1A               	movlw	26
 19003  003F6C  6F06               	movwf	6,b	;volatile
 19004                           
 19005                           ; BSR set to: 15
 19006  003F6E  6B07               	clrf	7,b	;volatile
 19007                           
 19008                           ; BSR set to: 15
 19009                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 19010  003F70  0E03               	movlw	3
 19011  003F72  010D               	movlb	13	; () banked
 19012  003F74  6FD4               	movwf	212,b	;volatile
 19013                           
 19014                           ; BSR set to: 13
 19015                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 19016  003F76  6BD5               	clrf	213,b	;volatile
 19017                           
 19018                           ; BSR set to: 13
 19019                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 19020  003F78  6BE0               	clrf	224,b	;volatile
 19021                           
 19022                           ; BSR set to: 13
 19023                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 19024  003F7A  0E11               	movlw	17
 19025  003F7C  6FE1               	movwf	225,b	;volatile
 19026                           
 19027                           ; BSR set to: 13
 19028                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 19029  003F7E  6FE2               	movwf	226,b	;volatile
 19030                           
 19031                           ; BSR set to: 13
 19032                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 19033  003F80  6BE3               	clrf	227,b	;volatile
 19034                           
 19035                           ; BSR set to: 13
 19036                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 19037  003F82  6BE4               	clrf	228,b	;volatile
 19038                           
 19039                           ; BSR set to: 13
 19040                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 19041  003F84  6BE5               	clrf	229,b	;volatile
 19042                           
 19043                           ; BSR set to: 13
 19044                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 19045  003F86  6BE6               	clrf	230,b	;volatile
 19046                           
 19047                           ; BSR set to: 13
 19048                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 19049  003F88  6BE7               	clrf	231,b	;volatile
 19050                           
 19051                           ; BSR set to: 13
 19052                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 19053  003F8A  0E54               	movlw	84
 19054  003F8C  6FF0               	movwf	240,b	;volatile
 19055                           
 19056                           ; BSR set to: 13
 19057                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 19058  003F8E  0E05               	movlw	5
 19059  003F90  6FF1               	movwf	241,b	;volatile
 19060                           
 19061                           ; BSR set to: 13
 19062                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19063  003F92  6BF2               	clrf	242,b	;volatile
 19064                           
 19065                           ; BSR set to: 13
 19066                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19067  003F94  6BF2               	clrf	242,b	;volatile
 19068                           
 19069                           ; BSR set to: 13
 19070                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 19071  003F96  0E0F               	movlw	15
 19072  003F98  010F               	movlb	15	; () banked
 19073  003F9A  6F18               	movwf	24,b	;volatile
 19074                           
 19075                           ; BSR set to: 15
 19076  003F9C  0EE0               	movlw	224
 19077  003F9E  6F19               	movwf	25,b	;volatile
 19078                           
 19079                           ; BSR set to: 15
 19080  003FA0  6B1A               	clrf	26,b	;volatile
 19081                           
 19082                           ; BSR set to: 15
 19083  003FA2  6B1B               	clrf	27,b	;volatile
 19084                           
 19085                           ; BSR set to: 15
 19086                           ;ECAN.c: 482: RXM0EXIDM = 1;
 19087  003FA4  8719               	bsf	25,3,b	;volatile
 19088                           
 19089                           ; BSR set to: 15
 19090                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 19091  003FA6  0E0F               	movlw	15
 19092  003FA8  6F1C               	movwf	28,b	;volatile
 19093                           
 19094                           ; BSR set to: 15
 19095  003FAA  0EE0               	movlw	224
 19096  003FAC  6F1D               	movwf	29,b	;volatile
 19097                           
 19098                           ; BSR set to: 15
 19099  003FAE  691E               	setf	30,b	;volatile
 19100                           
 19101                           ; BSR set to: 15
 19102  003FB0  6B1F               	clrf	31,b	;volatile
 19103                           
 19104                           ; BSR set to: 15
 19105                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 19106  003FB2  871D               	bsf	29,3,b	;volatile
 19107                           
 19108                           ; BSR set to: 15
 19109                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 19110  003FB4  0E00               	movlw	0
 19111  003FB6  EFCD  F022         	goto	_ECANSetOperationMode
 19112  003FBA                     __end_of_ECANInitialize:
 19113                           	opt stack 0
 19114                           tblptru	equ	0xFF8
 19115                           tblptrh	equ	0xFF7
 19116                           tblptrl	equ	0xFF6
 19117                           tablat	equ	0xFF5
 19118                           prodh	equ	0xFF4
 19119                           prodl	equ	0xFF3
 19120                           intcon	equ	0xFF2
 19121                           intcon2	equ	0xFF1
 19122                           postinc0	equ	0xFEE
 19123                           wreg	equ	0xFE8
 19124                           indf1	equ	0xFE7
 19125                           fsr1h	equ	0xFE2
 19126                           fsr1l	equ	0xFE1
 19127                           indf2	equ	0xFDF
 19128                           postinc2	equ	0xFDE
 19129                           postdec2	equ	0xFDD
 19130                           plusw2	equ	0xFDB
 19131                           fsr2h	equ	0xFDA
 19132                           fsr2l	equ	0xFD9
 19133                           status	equ	0xFD8
 19134                           
 19135 ;; *************** function _ECANSetOperationMode *****************
 19136 ;; Defined at:
 19137 ;;		line 1012 in file "../ECAN.c"
 19138 ;; Parameters:    Size  Location     Type
 19139 ;;  mode            1    wreg     enum E16346
 19140 ;; Auto vars:     Size  Location     Type
 19141 ;;  mode            1    7[COMRAM] enum E16346
 19142 ;; Return value:  Size  Location     Type
 19143 ;;		None               void
 19144 ;; Registers used:
 19145 ;;		wreg, status,2, status,0
 19146 ;; Tracked objects:
 19147 ;;		On entry : 0/0
 19148 ;;		On exit  : 0/0
 19149 ;;		Unchanged: 0/0
 19150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19151 ;;      Params:         0       0       0       0       0       0       0
 19152 ;;      Locals:         1       0       0       0       0       0       0
 19153 ;;      Temps:          0       0       0       0       0       0       0
 19154 ;;      Totals:         1       0       0       0       0       0       0
 19155 ;;Total ram usage:        1 bytes
 19156 ;; Hardware stack levels used:    1
 19157 ;; Hardware stack levels required when called:    2
 19158 ;; This function calls:
 19159 ;;		Nothing
 19160 ;; This function is called by:
 19161 ;;		_ECANInitialize
 19162 ;;		_calculateSetFilterMask
 19163 ;; This function uses a non-reentrant model
 19164 ;;
 19165                           
 19166                           	psect	text76
 19167  00459A                     __ptext76:
 19168                           	opt stack 0
 19169  00459A                     _ECANSetOperationMode:
 19170                           	opt stack 23
 19171                           
 19172                           ;incstack = 0
 19173                           ;incstack = 0
 19174                           ;ECANSetOperationMode@mode stored from wreg
 19175  00459A  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 19176                           
 19177                           ;ECAN.c: 1013: CANCON &= 0x1F;
 19178  00459E  0E1F               	movlw	31
 19179  0045A0  166F               	andwf	3951,f,c	;volatile
 19180                           
 19181                           ;ECAN.c: 1014: CANCON |= mode;
 19182  0045A2  5008               	movf	ECANSetOperationMode@mode,w,c
 19183  0045A4  126F               	iorwf	3951,f,c	;volatile
 19184  0045A6                     l12336:
 19185  0045A6  506F               	movf	3951,w,c	;volatile
 19186  0045A8  0BE0               	andlw	224
 19187  0045AA  1808               	xorwf	ECANSetOperationMode@mode,w,c
 19188  0045AC  B4D8               	btfsc	status,2,c
 19189  0045AE  0012               	return	
 19190  0045B0  D7FA               	goto	l12336
 19191  0045B2                     __end_of_ECANSetOperationMode:
 19192                           	opt stack 0
 19193                           tblptru	equ	0xFF8
 19194                           tblptrh	equ	0xFF7
 19195                           tblptrl	equ	0xFF6
 19196                           tablat	equ	0xFF5
 19197                           prodh	equ	0xFF4
 19198                           prodl	equ	0xFF3
 19199                           intcon	equ	0xFF2
 19200                           intcon2	equ	0xFF1
 19201                           postinc0	equ	0xFEE
 19202                           wreg	equ	0xFE8
 19203                           indf1	equ	0xFE7
 19204                           fsr1h	equ	0xFE2
 19205                           fsr1l	equ	0xFE1
 19206                           indf2	equ	0xFDF
 19207                           postinc2	equ	0xFDE
 19208                           postdec2	equ	0xFDD
 19209                           plusw2	equ	0xFDB
 19210                           fsr2h	equ	0xFDA
 19211                           fsr2l	equ	0xFD9
 19212                           status	equ	0xFD8
 19213                           
 19214 ;; *************** function _vscp_readAppReg *****************
 19215 ;; Defined at:
 19216 ;;		line 1407 in file "../main.c"
 19217 ;; Parameters:    Size  Location     Type
 19218 ;;  reg             1    wreg     unsigned char 
 19219 ;; Auto vars:     Size  Location     Type
 19220 ;;  reg             1   17[COMRAM] unsigned char 
 19221 ;;  rv              1   16[COMRAM] unsigned char 
 19222 ;; Return value:  Size  Location     Type
 19223 ;;                  1    wreg      unsigned char 
 19224 ;; Registers used:
 19225 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19226 ;; Tracked objects:
 19227 ;;		On entry : F/0
 19228 ;;		On exit  : 0/0
 19229 ;;		Unchanged: 0/0
 19230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19231 ;;      Params:         0       0       0       0       0       0       0
 19232 ;;      Locals:         2       0       0       0       0       0       0
 19233 ;;      Temps:          7       0       0       0       0       0       0
 19234 ;;      Totals:         9       0       0       0       0       0       0
 19235 ;;Total ram usage:        9 bytes
 19236 ;; Hardware stack levels used:    1
 19237 ;; Hardware stack levels required when called:    3
 19238 ;; This function calls:
 19239 ;;		_Read_b_eep
 19240 ;; This function is called by:
 19241 ;;		_vscp_readRegister
 19242 ;;		_vscp_handleProtocolEvent
 19243 ;; This function uses a non-reentrant model
 19244 ;;
 19245                           
 19246                           	psect	text77
 19247  002E70                     __ptext77:
 19248                           	opt stack 0
 19249  002E70                     _vscp_readAppReg:
 19250                           	opt stack 24
 19251                           
 19252                           ;incstack = 0
 19253                           ;incstack = 0
 19254                           ;vscp_readAppReg@reg stored from wreg
 19255  002E70  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 19256                           
 19257                           ; BSR set to: 0
 19258                           ;main.c: 1408: uint8_t rv;
 19259                           ;main.c: 1410: rv = 0x00;
 19260  002E74  6A11               	clrf	vscp_readAppReg@rv,c
 19261                           
 19262                           ; BSR set to: 0
 19263                           ;main.c: 1413: if ( 0 == vscp_page_select ) {
 19264  002E76  5053               	movf	_vscp_page_select+1,w,c
 19265  002E78  1052               	iorwf	_vscp_page_select,w,c
 19266  002E7A  E001 D0AD          	bnz	l13874
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;main.c: 1416: if ( reg == 0 ) {
 19270  002E7E  6612               	tstfsz	vscp_readAppReg@reg,c
 19271  002E80  D006               	goto	l13820
 19272                           
 19273                           ; BSR set to: 0
 19274                           ;main.c: 1417: rv = Read_b_eep(0x43 + 0);
 19275  002E82  6A09               	clrf	?_Read_b_eep+1,c
 19276  002E84  0E43               	movlw	67
 19277  002E86  6E08               	movwf	?_Read_b_eep,c
 19278  002E88  EC21  F023         	call	_Read_b_eep	;wreg free
 19279  002E8C  D0C3               	goto	L69
 19280  002E8E                     l13820:
 19281                           
 19282                           ; BSR set to: 0
 19283                           ;main.c: 1419: else if ( reg == 1 ) {
 19284  002E8E  0412               	decf	vscp_readAppReg@reg,w,c
 19285  002E90  E106               	bnz	l13824
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;main.c: 1420: rv = Read_b_eep(0x43 + 1);
 19289  002E92  6A09               	clrf	?_Read_b_eep+1,c
 19290  002E94  0E44               	movlw	68
 19291  002E96  6E08               	movwf	?_Read_b_eep,c
 19292  002E98  EC21  F023         	call	_Read_b_eep	;wreg free
 19293  002E9C  D0BB               	goto	L69
 19294  002E9E                     l13824:
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;main.c: 1422: else if ( ( reg >= 2 ) &&
 19298                           ;main.c: 1423: ( reg <= 11 ) ) {
 19299  002E9E  0E01               	movlw	1
 19300  002EA0  6412               	cpfsgt	vscp_readAppReg@reg,c
 19301  002EA2  D00C               	goto	l13830
 19302                           
 19303                           ; BSR set to: 0
 19304  002EA4  0E0C               	movlw	12
 19305  002EA6  6012               	cpfslt	vscp_readAppReg@reg,c
 19306  002EA8  D009               	goto	l13830
 19307  002EAA                     
 19308                           ; BSR set to: 0
 19309                           ;main.c: 1424: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
 19310  002EAA  0E43               	movlw	67
 19311  002EAC  2412               	addwf	vscp_readAppReg@reg,w,c
 19312  002EAE  6E08               	movwf	?_Read_b_eep,c
 19313  002EB0  6A09               	clrf	?_Read_b_eep+1,c
 19314  002EB2  0E00               	movlw	0
 19315  002EB4  2209               	addwfc	?_Read_b_eep+1,f,c
 19316  002EB6  EC21  F023         	call	_Read_b_eep	;wreg free
 19317  002EBA  D0AC               	goto	L69
 19318  002EBC                     l13830:
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;main.c: 1428: else if ( reg == 12 ) {
 19322  002EBC  5012               	movf	vscp_readAppReg@reg,w,c
 19323  002EBE  0A0C               	xorlw	12
 19324  002EC0  E108               	bnz	l13834
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;main.c: 1429: rv = ( TRISAbits.TRISA0 << 1 ) +
 19328                           ;main.c: 1430: TRISAbits.TRISA1;
 19329  002EC2  3092               	rrcf	3986,w,c	;volatile
 19330  002EC4  0B01               	andlw	1
 19331  002EC6  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19332  002EC8  5092               	movf	3986,w,c	;volatile
 19333  002ECA  0B01               	andlw	1
 19334  002ECC  0D02               	mullw	2
 19335  002ECE  50F3               	movf	prodl,w,c
 19336  002ED0  D035               	goto	L71
 19337  002ED2                     l13834:
 19338                           
 19339                           ; BSR set to: 0
 19340                           ;main.c: 1432: else if ( reg == 13 ) {
 19341  002ED2  5012               	movf	vscp_readAppReg@reg,w,c
 19342  002ED4  0A0D               	xorlw	13
 19343  002ED6  E134               	bnz	l13838
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;main.c: 1433: rv = ( TRISAbits.TRISA2 << 7 ) +
 19347                           ;main.c: 1434: ( TRISCbits.TRISC7 << 6 ) +
 19348                           ;main.c: 1435: ( TRISCbits.TRISC6 << 5 ) +
 19349                           ;main.c: 1436: ( TRISCbits.TRISC5 << 4 ) +
 19350                           ;main.c: 1437: ( TRISCbits.TRISC4 << 3 ) +
 19351                           ;main.c: 1438: ( TRISCbits.TRISC3 << 2 ) +
 19352                           ;main.c: 1439: ( TRISBbits.TRISB1 << 1 ) +
 19353                           ;main.c: 1440: TRISBbits.TRISB0;
 19354  002ED8  5093               	movf	3987,w,c	;volatile
 19355  002EDA  0B01               	andlw	1
 19356  002EDC  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19357  002EDE  3093               	rrcf	3987,w,c	;volatile
 19358  002EE0  0B01               	andlw	1
 19359  002EE2  0D02               	mullw	2
 19360  002EE4  CFF3 F00B          	movff	prodl,??_vscp_readAppReg+1
 19361  002EE8  3094               	rrcf	3988,w,c	;volatile
 19362  002EEA  32E8               	rrcf	wreg,f,c
 19363  002EEC  32E8               	rrcf	wreg,f,c
 19364  002EEE  0B01               	andlw	1
 19365  002EF0  0D04               	mullw	4
 19366  002EF2  CFF3 F00C          	movff	prodl,??_vscp_readAppReg+2
 19367  002EF6  3894               	swapf	3988,w,c	;volatile
 19368  002EF8  0B01               	andlw	1
 19369  002EFA  0D08               	mullw	8
 19370  002EFC  CFF3 F00D          	movff	prodl,??_vscp_readAppReg+3
 19371  002F00  3894               	swapf	3988,w,c	;volatile
 19372  002F02  32E8               	rrcf	wreg,f,c
 19373  002F04  0B01               	andlw	1
 19374  002F06  0D10               	mullw	16
 19375  002F08  CFF3 F00E          	movff	prodl,??_vscp_readAppReg+4
 19376  002F0C  3894               	swapf	3988,w,c	;volatile
 19377  002F0E  32E8               	rrcf	wreg,f,c
 19378  002F10  32E8               	rrcf	wreg,f,c
 19379  002F12  0B01               	andlw	1
 19380  002F14  0D20               	mullw	32
 19381  002F16  CFF3 F00F          	movff	prodl,??_vscp_readAppReg+5
 19382  002F1A  3494               	rlcf	3988,w,c	;volatile
 19383  002F1C  36E8               	rlcf	wreg,f,c
 19384  002F1E  0B01               	andlw	1
 19385  002F20  0D40               	mullw	64
 19386  002F22  CFF3 F010          	movff	prodl,??_vscp_readAppReg+6
 19387  002F26  3092               	rrcf	3986,w,c	;volatile
 19388  002F28  32E8               	rrcf	wreg,f,c
 19389  002F2A  0B01               	andlw	1
 19390  002F2C  0D80               	mullw	128
 19391  002F2E  50F3               	movf	prodl,w,c
 19392  002F30  2410               	addwf	??_vscp_readAppReg+6,w,c
 19393  002F32  240F               	addwf	??_vscp_readAppReg+5,w,c
 19394  002F34  240E               	addwf	??_vscp_readAppReg+4,w,c
 19395  002F36  240D               	addwf	??_vscp_readAppReg+3,w,c
 19396  002F38  240C               	addwf	??_vscp_readAppReg+2,w,c
 19397  002F3A  240B               	addwf	??_vscp_readAppReg+1,w,c
 19398  002F3C                     L71:
 19399  002F3C  240A               	addwf	??_vscp_readAppReg,w,c
 19400  002F3E  D06A               	goto	L69
 19401  002F40                     l13838:
 19402                           
 19403                           ; BSR set to: 0
 19404                           ;main.c: 1442: else if ( ( reg >= 14 ) &&
 19405                           ;main.c: 1443: ( reg <= 23 ) ) {
 19406  002F40  0E0D               	movlw	13
 19407  002F42  6412               	cpfsgt	vscp_readAppReg@reg,c
 19408  002F44  D042               	goto	l13868
 19409                           
 19410                           ; BSR set to: 0
 19411  002F46  0E18               	movlw	24
 19412  002F48  6012               	cpfslt	vscp_readAppReg@reg,c
 19413  002F4A  D03F               	goto	l13868
 19414  002F4C  D028               	goto	l13866
 19415  002F4E                     l13844:
 19416                           
 19417                           ; BSR set to: 0
 19418                           ;main.c: 1449: rv = PORTBbits.RB0;
 19419  002F4E  0E00               	movlw	0
 19420  002F50  B081               	btfsc	3969,0,c	;volatile
 19421  002F52  0E01               	movlw	1
 19422  002F54  D05F               	goto	L69
 19423  002F56                     l13846:
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;main.c: 1454: rv = PORTBbits.RB1;
 19427  002F56  0E00               	movlw	0
 19428  002F58  B281               	btfsc	3969,1,c	;volatile
 19429  002F5A  0E01               	movlw	1
 19430  002F5C  D05B               	goto	L69
 19431  002F5E                     l13848:
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;main.c: 1459: rv = PORTCbits.RC3;
 19435  002F5E  0E00               	movlw	0
 19436  002F60  B682               	btfsc	3970,3,c	;volatile
 19437  002F62  0E01               	movlw	1
 19438  002F64  D057               	goto	L69
 19439  002F66                     l13850:
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;main.c: 1464: rv = PORTCbits.RC4;
 19443  002F66  0E00               	movlw	0
 19444  002F68  B882               	btfsc	3970,4,c	;volatile
 19445  002F6A  0E01               	movlw	1
 19446  002F6C  D053               	goto	L69
 19447  002F6E                     l13852:
 19448                           
 19449                           ; BSR set to: 0
 19450                           ;main.c: 1469: rv = PORTCbits.RC5;
 19451  002F6E  0E00               	movlw	0
 19452  002F70  BA82               	btfsc	3970,5,c	;volatile
 19453  002F72  0E01               	movlw	1
 19454  002F74  D04F               	goto	L69
 19455  002F76                     l13854:
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;main.c: 1474: rv = PORTCbits.RC6;
 19459  002F76  0E00               	movlw	0
 19460  002F78  BC82               	btfsc	3970,6,c	;volatile
 19461  002F7A  0E01               	movlw	1
 19462  002F7C  D04B               	goto	L69
 19463  002F7E                     l13856:
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;main.c: 1479: rv = PORTCbits.RC7;
 19467  002F7E  0E00               	movlw	0
 19468  002F80  BE82               	btfsc	3970,7,c	;volatile
 19469  002F82  0E01               	movlw	1
 19470  002F84  D047               	goto	L69
 19471  002F86                     l13858:
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;main.c: 1484: rv = PORTAbits.RA2;
 19475  002F86  0E00               	movlw	0
 19476  002F88  B480               	btfsc	3968,2,c	;volatile
 19477  002F8A  0E01               	movlw	1
 19478  002F8C  D043               	goto	L69
 19479  002F8E                     l13860:
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;main.c: 1489: rv = PORTAbits.RA1;
 19483  002F8E  0E00               	movlw	0
 19484  002F90  B280               	btfsc	3968,1,c	;volatile
 19485  002F92  0E01               	movlw	1
 19486  002F94  D03F               	goto	L69
 19487  002F96                     l13862:
 19488                           
 19489                           ; BSR set to: 0
 19490                           ;main.c: 1494: rv = PORTAbits.RA0;
 19491  002F96  0E00               	movlw	0
 19492  002F98  B080               	btfsc	3968,0,c	;volatile
 19493  002F9A  0E01               	movlw	1
 19494  002F9C  D03B               	goto	L69
 19495  002F9E                     l13866:
 19496                           
 19497                           ; BSR set to: 0
 19498  002F9E  5012               	movf	vscp_readAppReg@reg,w,c
 19499                           
 19500                           ; Switch size 1, requested type "space"
 19501                           ; Number of cases is 10, Range of values is 14 to 23
 19502                           ; switch strategies available:
 19503                           ; Name         Instructions Cycles
 19504                           ; simple_byte           31    16 (average)
 19505                           ;	Chosen strategy is simple_byte
 19506  002FA0  0A0E               	xorlw	14	; case 14
 19507  002FA2  E0D5               	bz	l13844
 19508  002FA4  0A01               	xorlw	1	; case 15
 19509  002FA6  E0D7               	bz	l13846
 19510  002FA8  0A1F               	xorlw	31	; case 16
 19511  002FAA  E0D9               	bz	l13848
 19512  002FAC  0A01               	xorlw	1	; case 17
 19513  002FAE  E0DB               	bz	l13850
 19514  002FB0  0A03               	xorlw	3	; case 18
 19515  002FB2  E0DD               	bz	l13852
 19516  002FB4  0A01               	xorlw	1	; case 19
 19517  002FB6  E0DF               	bz	l13854
 19518  002FB8  0A07               	xorlw	7	; case 20
 19519  002FBA  E0E1               	bz	l13856
 19520  002FBC  0A01               	xorlw	1	; case 21
 19521  002FBE  E0E3               	bz	l13858
 19522  002FC0  0A03               	xorlw	3	; case 22
 19523  002FC2  E0E5               	bz	l13860
 19524  002FC4  0A01               	xorlw	1	; case 23
 19525  002FC6  E0E7               	bz	l13862
 19526  002FC8  D026               	goto	l13886
 19527  002FCA                     l13868:
 19528                           
 19529                           ; BSR set to: 0
 19530                           ;main.c: 1499: else if ( ( reg >= 24 ) &&
 19531                           ;main.c: 1500: ( reg < 46 ) ) {
 19532  002FCA  0E17               	movlw	23
 19533  002FCC  6412               	cpfsgt	vscp_readAppReg@reg,c
 19534  002FCE  D023               	goto	l13886
 19535                           
 19536                           ; BSR set to: 0
 19537  002FD0  0E2E               	movlw	46
 19538  002FD2  6012               	cpfslt	vscp_readAppReg@reg,c
 19539  002FD4  D020               	goto	l13886
 19540  002FD6  D769               	goto	L70
 19541  002FD8                     l13874:
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;main.c: 1507: else if ( 1 == vscp_page_select ) {
 19545  002FD8  0452               	decf	_vscp_page_select,w,c
 19546  002FDA  1053               	iorwf	_vscp_page_select+1,w,c
 19547  002FDC  E10C               	bnz	l13880
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;main.c: 1508: if ( reg < 40u ) {
 19551  002FDE  0E28               	movlw	40
 19552  002FE0  6012               	cpfslt	vscp_readAppReg@reg,c
 19553  002FE2  D019               	goto	l13886
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;main.c: 1509: rv = Read_b_eep(0x43 + 46 + reg);
 19557  002FE4  0E71               	movlw	113
 19558  002FE6  2412               	addwf	vscp_readAppReg@reg,w,c
 19559  002FE8  6E08               	movwf	?_Read_b_eep,c
 19560  002FEA  6A09               	clrf	?_Read_b_eep+1,c
 19561  002FEC  0E00               	movlw	0
 19562  002FEE  2209               	addwfc	?_Read_b_eep+1,f,c
 19563  002FF0  EC21  F023         	call	_Read_b_eep	;wreg free
 19564  002FF4  D00F               	goto	L69
 19565  002FF6                     l13880:
 19566                           
 19567                           ; BSR set to: 0
 19568                           ;main.c: 1513: else if ( 2 == vscp_page_select ) {
 19569  002FF6  5052               	movf	_vscp_page_select,w,c
 19570  002FF8  0A02               	xorlw	2
 19571  002FFA  1053               	iorwf	_vscp_page_select+1,w,c
 19572  002FFC  E10C               	bnz	l13886
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;main.c: 1514: if ( reg < ( 0 + 8*8 ) ) {
 19576  002FFE  0E40               	movlw	64
 19577  003000  6012               	cpfslt	vscp_readAppReg@reg,c
 19578  003002  D009               	goto	l13886
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;main.c: 1515: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 19582  003004  0E99               	movlw	153
 19583  003006  2412               	addwf	vscp_readAppReg@reg,w,c
 19584  003008  6E08               	movwf	?_Read_b_eep,c
 19585  00300A  6A09               	clrf	?_Read_b_eep+1,c
 19586  00300C  0E00               	movlw	0
 19587  00300E  2209               	addwfc	?_Read_b_eep+1,f,c
 19588  003010  EC21  F023         	call	_Read_b_eep	;wreg free
 19589  003014                     L69:
 19590  003014  6E11               	movwf	vscp_readAppReg@rv,c
 19591  003016                     l13886:
 19592                           
 19593                           ;main.c: 1520: }
 19594                           ;main.c: 1521: }
 19595                           ;main.c: 1523: return rv;
 19596  003016  5011               	movf	vscp_readAppReg@rv,w,c
 19597  003018  0012               	return	
 19598  00301A                     __end_of_vscp_readAppReg:
 19599                           	opt stack 0
 19600                           tblptru	equ	0xFF8
 19601                           tblptrh	equ	0xFF7
 19602                           tblptrl	equ	0xFF6
 19603                           tablat	equ	0xFF5
 19604                           prodh	equ	0xFF4
 19605                           prodl	equ	0xFF3
 19606                           intcon	equ	0xFF2
 19607                           intcon2	equ	0xFF1
 19608                           postinc0	equ	0xFEE
 19609                           wreg	equ	0xFE8
 19610                           indf1	equ	0xFE7
 19611                           fsr1h	equ	0xFE2
 19612                           fsr1l	equ	0xFE1
 19613                           indf2	equ	0xFDF
 19614                           postinc2	equ	0xFDE
 19615                           postdec2	equ	0xFDD
 19616                           plusw2	equ	0xFDB
 19617                           fsr2h	equ	0xFDA
 19618                           fsr2l	equ	0xFD9
 19619                           status	equ	0xFD8
 19620                           
 19621 ;; *************** function _Read_b_eep *****************
 19622 ;; Defined at:
 19623 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 19624 ;; Parameters:    Size  Location     Type
 19625 ;;  badd            2    7[COMRAM] unsigned int 
 19626 ;; Auto vars:     Size  Location     Type
 19627 ;;		None
 19628 ;; Return value:  Size  Location     Type
 19629 ;;                  1    wreg      unsigned char 
 19630 ;; Registers used:
 19631 ;;		wreg, status,2
 19632 ;; Tracked objects:
 19633 ;;		On entry : 0/0
 19634 ;;		On exit  : 0/0
 19635 ;;		Unchanged: 0/0
 19636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19637 ;;      Params:         2       0       0       0       0       0       0
 19638 ;;      Locals:         0       0       0       0       0       0       0
 19639 ;;      Temps:          0       0       0       0       0       0       0
 19640 ;;      Totals:         2       0       0       0       0       0       0
 19641 ;;Total ram usage:        2 bytes
 19642 ;; Hardware stack levels used:    1
 19643 ;; Hardware stack levels required when called:    2
 19644 ;; This function calls:
 19645 ;;		Nothing
 19646 ;; This function is called by:
 19647 ;;		_main
 19648 ;;		_init_app_ram
 19649 ;;		_doApplicationOneSecondWork
 19650 ;;		_vscp_readNicknamePermanent
 19651 ;;		_vscp_getZone
 19652 ;;		_vscp_getSubzone
 19653 ;;		_vscp_readAppReg
 19654 ;;		_vscp_writeAppReg
 19655 ;;		_SendInformationEvent
 19656 ;;		_doDM
 19657 ;;		_doActionOn
 19658 ;;		_doActionOff
 19659 ;;		_doActionPulseOn
 19660 ;;		_doActionPulseOff
 19661 ;;		_doActionToggle
 19662 ;;		_doActionStatus
 19663 ;;		_vscp_getGUID
 19664 ;;		_vscp_getUserID
 19665 ;;		_vscp_getManufacturerId
 19666 ;;		_vscp_getSegmentCRC
 19667 ;;		_calculateSetFilterMask
 19668 ;; This function uses a non-reentrant model
 19669 ;;
 19670                           
 19671                           	psect	text78
 19672  004642                     __ptext78:
 19673                           	opt stack 0
 19674  004642                     _Read_b_eep:
 19675                           	opt stack 24
 19676                           
 19677                           ;incstack = 0
 19678                           ;incstack = 0
 19679  004642  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 19680  004646  9CA6               	bcf	4006,6,c	;volatile
 19681  004648  9EA6               	bcf	4006,7,c	;volatile
 19682  00464A  80A6               	bsf	4006,0,c	;volatile
 19683  00464C  F000               	nop		;# 
 19684  00464E  F000               	nop		;# 
 19685  004650  50A8               	movf	4008,w,c	;volatile
 19686  004652  0012               	return	
 19687  004654                     __end_of_Read_b_eep:
 19688                           	opt stack 0
 19689                           tblptru	equ	0xFF8
 19690                           tblptrh	equ	0xFF7
 19691                           tblptrl	equ	0xFF6
 19692                           tablat	equ	0xFF5
 19693                           prodh	equ	0xFF4
 19694                           prodl	equ	0xFF3
 19695                           intcon	equ	0xFF2
 19696                           intcon2	equ	0xFF1
 19697                           postinc0	equ	0xFEE
 19698                           wreg	equ	0xFE8
 19699                           indf1	equ	0xFE7
 19700                           fsr1h	equ	0xFE2
 19701                           fsr1l	equ	0xFE1
 19702                           indf2	equ	0xFDF
 19703                           postinc2	equ	0xFDE
 19704                           postdec2	equ	0xFDD
 19705                           plusw2	equ	0xFDB
 19706                           fsr2h	equ	0xFDA
 19707                           fsr2l	equ	0xFD9
 19708                           status	equ	0xFD8
 19709                           
 19710 ;; *************** function _interrupt_at_low_vector *****************
 19711 ;; Defined at:
 19712 ;;		line 140 in file "../main.c"
 19713 ;; Parameters:    Size  Location     Type
 19714 ;;		None
 19715 ;; Auto vars:     Size  Location     Type
 19716 ;;		None
 19717 ;; Return value:  Size  Location     Type
 19718 ;;		None               void
 19719 ;; Registers used:
 19720 ;;		wreg, status,2, status,0, cstack
 19721 ;; Tracked objects:
 19722 ;;		On entry : 0/0
 19723 ;;		On exit  : 0/0
 19724 ;;		Unchanged: 0/0
 19725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19726 ;;      Params:         0       0       0       0       0       0       0
 19727 ;;      Locals:         0       0       0       0       0       0       0
 19728 ;;      Temps:          3       0       0       0       0       0       0
 19729 ;;      Totals:         3       0       0       0       0       0       0
 19730 ;;Total ram usage:        3 bytes
 19731 ;; Hardware stack levels used:    1
 19732 ;; Hardware stack levels required when called:    1
 19733 ;; This function calls:
 19734 ;;		i1_WriteTimer0
 19735 ;; This function is called by:
 19736 ;;		Interrupt level 1
 19737 ;; This function uses a non-reentrant model
 19738 ;;
 19739                           
 19740                           	psect	intcodelo
 19741  000018                     __pintcodelo:
 19742                           	opt stack 0
 19743  000018                     _interrupt_at_low_vector:
 19744                           	opt stack 20
 19745                           
 19746                           ;incstack = 0
 19747  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 19748  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 19749  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 19750  000024                     
 19751                           ;main.c: 142: if ( INTCONbits.TMR0IF ) {
 19752  000024  A4F2               	btfss	intcon,2,c	;volatile
 19753  000026  D001               	goto	i1u1056_21
 19754  000028  D001               	goto	i1u1056_20
 19755  00002A                     i1u1056_21:
 19756  00002A  D046               	goto	i1l421
 19757  00002C                     i1u1056_20:
 19758  00002C                     
 19759                           ;main.c: 145: WriteTimer0(0xfb1d);
 19760  00002C  0EFB               	movlw	251
 19761  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 19762  000030  0E1D               	movlw	29
 19763  000032  6E01               	movwf	?i1_WriteTimer0,c
 19764  000034  EC2A  F023         	call	i1_WriteTimer0	;wreg free
 19765  000038                     
 19766                           ;main.c: 147: vscp_timer++;
 19767  000038  0100               	movlb	0	; () banked
 19768  00003A  4B6E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 19769  00003C  2B6F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 19770  00003E                     
 19771                           ; BSR set to: 0
 19772                           ;main.c: 148: vscp_configtimer++;
 19773  00003E  4B6C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 19774  000040  2B6D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 19775  000042                     
 19776                           ; BSR set to: 0
 19777                           ;main.c: 149: measurement_clock_10ms++;
 19778  000042  0E01               	movlw	1
 19779  000044  2760               	addwf	_measurement_clock_10ms& (0+255),f,b	;volatile
 19780  000046  0E00               	movlw	0
 19781  000048  2361               	addwfc	(_measurement_clock_10ms+1)& (0+255),f,b	;volatile
 19782  00004A  0E00               	movlw	0
 19783  00004C  2362               	addwfc	(_measurement_clock_10ms+2)& (0+255),f,b	;volatile
 19784  00004E  0E00               	movlw	0
 19785  000050  2363               	addwfc	(_measurement_clock_10ms+3)& (0+255),f,b	;volatile
 19786  000052                     
 19787                           ; BSR set to: 0
 19788                           ;main.c: 150: measurement_clock_sec++;
 19789  000052  0E01               	movlw	1
 19790  000054  2764               	addwf	_measurement_clock_sec& (0+255),f,b	;volatile
 19791  000056  0E00               	movlw	0
 19792  000058  2365               	addwfc	(_measurement_clock_sec+1)& (0+255),f,b	;volatile
 19793  00005A  0E00               	movlw	0
 19794  00005C  2366               	addwfc	(_measurement_clock_sec+2)& (0+255),f,b	;volatile
 19795  00005E  0E00               	movlw	0
 19796  000060  2367               	addwfc	(_measurement_clock_sec+3)& (0+255),f,b	;volatile
 19797  000062                     
 19798                           ; BSR set to: 0
 19799                           ;main.c: 153: if ( PORTCbits.RC0 ) {
 19800  000062  A082               	btfss	3970,0,c	;volatile
 19801  000064  D001               	goto	i1u1057_21
 19802  000066  D001               	goto	i1u1057_20
 19803  000068                     i1u1057_21:
 19804  000068  D002               	goto	i1l8882
 19805  00006A                     i1u1057_20:
 19806  00006A                     
 19807                           ; BSR set to: 0
 19808                           ;main.c: 154: vscp_initbtncnt = 0;
 19809  00006A  6B7C               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 19810                           
 19811                           ;main.c: 155: }
 19812  00006C  D001               	goto	i1l413
 19813  00006E                     i1l8882:
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;main.c: 156: else {
 19817                           ;main.c: 158: vscp_initbtncnt++;
 19818  00006E  2B7C               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 19819  000070                     i1l413:
 19820                           
 19821                           ; BSR set to: 0
 19822                           ;main.c: 159: }
 19823                           ;main.c: 162: vscp_statuscnt++;
 19824  000070  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 19825  000072                     
 19826                           ; BSR set to: 0
 19827                           ;main.c: 163: if ( ( 0x02 == vscp_initledfunc ) &&
 19828                           ;main.c: 164: ( vscp_statuscnt > 100 ) ) {
 19829  000072  5056               	movf	_vscp_initledfunc,w,c
 19830  000074  0A02               	xorlw	2
 19831  000076  A4D8               	btfss	status,2,c
 19832  000078  D001               	goto	i1u1058_21
 19833  00007A  D001               	goto	i1u1058_20
 19834  00007C                     i1u1058_21:
 19835  00007C  D00E               	goto	i1l8892
 19836  00007E                     i1u1058_20:
 19837  00007E                     
 19838                           ; BSR set to: 0
 19839  00007E  0E64               	movlw	100
 19840  000080  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 19841  000082  D001               	goto	i1u1059_21
 19842  000084  D001               	goto	i1u1059_20
 19843  000086                     i1u1059_21:
 19844  000086  D009               	goto	i1l8892
 19845  000088                     i1u1059_20:
 19846  000088                     
 19847                           ; BSR set to: 0
 19848                           ;main.c: 166: if ( PORTCbits.RC1 ) {
 19849  000088  A282               	btfss	3970,1,c	;volatile
 19850  00008A  D001               	goto	i1u1060_21
 19851  00008C  D001               	goto	i1u1060_20
 19852  00008E                     i1u1060_21:
 19853  00008E  D002               	goto	i1l415
 19854  000090                     i1u1060_20:
 19855  000090                     
 19856                           ; BSR set to: 0
 19857                           ;main.c: 167: PORTCbits.RC1 = 0;
 19858  000090  9282               	bcf	3970,1,c	;volatile
 19859                           
 19860                           ;main.c: 168: }
 19861  000092  D001               	goto	i1l416
 19862  000094                     i1l415:
 19863                           
 19864                           ; BSR set to: 0
 19865                           ;main.c: 169: else {
 19866                           ;main.c: 170: PORTCbits.RC1 = 1;
 19867  000094  8282               	bsf	3970,1,c	;volatile
 19868  000096                     i1l416:
 19869                           
 19870                           ; BSR set to: 0
 19871                           ;main.c: 171: }
 19872                           ;main.c: 173: vscp_statuscnt = 0;
 19873  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19874                           
 19875                           ;main.c: 175: }
 19876  000098  D00E               	goto	i1l417
 19877  00009A                     i1l8892:
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;main.c: 176: else if (0x01 == vscp_initledfunc) {
 19881  00009A  0456               	decf	_vscp_initledfunc,w,c
 19882  00009C  A4D8               	btfss	status,2,c
 19883  00009E  D001               	goto	i1u1061_21
 19884  0000A0  D001               	goto	i1u1061_20
 19885  0000A2                     i1u1061_21:
 19886  0000A2  D003               	goto	i1l418
 19887  0000A4                     i1u1061_20:
 19888  0000A4                     
 19889                           ; BSR set to: 0
 19890                           ;main.c: 177: PORTCbits.RC1 = 1;
 19891  0000A4  8282               	bsf	3970,1,c	;volatile
 19892                           
 19893                           ;main.c: 178: vscp_statuscnt = 0;
 19894  0000A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19895                           
 19896                           ;main.c: 179: }
 19897  0000A8  D006               	goto	i1l417
 19898  0000AA                     i1l418:
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;main.c: 180: else if (0x00 == vscp_initledfunc) {
 19902  0000AA  6656               	tstfsz	_vscp_initledfunc,c
 19903  0000AC  D001               	goto	i1u1062_21
 19904  0000AE  D001               	goto	i1u1062_20
 19905  0000B0                     i1u1062_21:
 19906  0000B0  D002               	goto	i1l417
 19907  0000B2                     i1u1062_20:
 19908  0000B2                     
 19909                           ; BSR set to: 0
 19910                           ;main.c: 181: PORTCbits.RC1 = 0;
 19911  0000B2  9282               	bcf	3970,1,c	;volatile
 19912                           
 19913                           ;main.c: 182: vscp_statuscnt = 0;
 19914  0000B4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19915  0000B6                     i1l417:
 19916                           
 19917                           ; BSR set to: 0
 19918                           ;main.c: 183: }
 19919                           ;main.c: 185: INTCONbits.TMR0IF = 0;
 19920  0000B6  94F2               	bcf	intcon,2,c	;volatile
 19921  0000B8                     i1l421:
 19922  0000B8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 19923  0000BC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 19924  0000C0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 19925  0000C4  0010               	retfie	
 19926  0000C6                     __end_of_interrupt_at_low_vector:
 19927                           	opt stack 0
 19928                           tblptru	equ	0xFF8
 19929                           tblptrh	equ	0xFF7
 19930                           tblptrl	equ	0xFF6
 19931                           tablat	equ	0xFF5
 19932                           prodh	equ	0xFF4
 19933                           prodl	equ	0xFF3
 19934                           intcon	equ	0xFF2
 19935                           intcon2	equ	0xFF1
 19936                           postinc0	equ	0xFEE
 19937                           wreg	equ	0xFE8
 19938                           indf1	equ	0xFE7
 19939                           fsr1h	equ	0xFE2
 19940                           fsr1l	equ	0xFE1
 19941                           bsr	equ	0xFE0
 19942                           indf2	equ	0xFDF
 19943                           postinc2	equ	0xFDE
 19944                           postdec2	equ	0xFDD
 19945                           plusw2	equ	0xFDB
 19946                           fsr2h	equ	0xFDA
 19947                           fsr2l	equ	0xFD9
 19948                           status	equ	0xFD8
 19949                           
 19950 ;; *************** function i1_WriteTimer0 *****************
 19951 ;; Defined at:
 19952 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19953 ;; Parameters:    Size  Location     Type
 19954 ;;  timer0          2    0[COMRAM] unsigned int 
 19955 ;; Auto vars:     Size  Location     Type
 19956 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 19957 ;; Return value:  Size  Location     Type
 19958 ;;		None               void
 19959 ;; Registers used:
 19960 ;;		None
 19961 ;; Tracked objects:
 19962 ;;		On entry : 0/0
 19963 ;;		On exit  : 0/0
 19964 ;;		Unchanged: 0/0
 19965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19966 ;;      Params:         2       0       0       0       0       0       0
 19967 ;;      Locals:         2       0       0       0       0       0       0
 19968 ;;      Temps:          0       0       0       0       0       0       0
 19969 ;;      Totals:         4       0       0       0       0       0       0
 19970 ;;Total ram usage:        4 bytes
 19971 ;; Hardware stack levels used:    1
 19972 ;; This function calls:
 19973 ;;		Nothing
 19974 ;; This function is called by:
 19975 ;;		_interrupt_at_low_vector
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           	psect	text80
 19980  004654                     __ptext80:
 19981                           	opt stack 0
 19982  004654                     i1_WriteTimer0:
 19983                           	opt stack 20
 19984                           
 19985                           ;incstack = 0
 19986                           ;incstack = 0
 19987  004654  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 19988  004658  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 19989  00465C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 19990  004660  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 19991  004664  0012               	return	
 19992  004666                     __end_ofi1_WriteTimer0:
 19993                           	opt stack 0
 19994                           tblptru	equ	0xFF8
 19995                           tblptrh	equ	0xFF7
 19996                           tblptrl	equ	0xFF6
 19997                           tablat	equ	0xFF5
 19998                           prodh	equ	0xFF4
 19999                           prodl	equ	0xFF3
 20000                           intcon	equ	0xFF2
 20001                           intcon2	equ	0xFF1
 20002                           postinc0	equ	0xFEE
 20003                           wreg	equ	0xFE8
 20004                           indf1	equ	0xFE7
 20005                           fsr1h	equ	0xFE2
 20006                           fsr1l	equ	0xFE1
 20007                           bsr	equ	0xFE0
 20008                           indf2	equ	0xFDF
 20009                           postinc2	equ	0xFDE
 20010                           postdec2	equ	0xFDD
 20011                           plusw2	equ	0xFDB
 20012                           fsr2h	equ	0xFDA
 20013                           fsr2l	equ	0xFD9
 20014                           status	equ	0xFD8
 20015                           tblptru	equ	0xFF8
 20016                           tblptrh	equ	0xFF7
 20017                           tblptrl	equ	0xFF6
 20018                           tablat	equ	0xFF5
 20019                           prodh	equ	0xFF4
 20020                           prodl	equ	0xFF3
 20021                           intcon	equ	0xFF2
 20022                           intcon2	equ	0xFF1
 20023                           postinc0	equ	0xFEE
 20024                           wreg	equ	0xFE8
 20025                           indf1	equ	0xFE7
 20026                           fsr1h	equ	0xFE2
 20027                           fsr1l	equ	0xFE1
 20028                           bsr	equ	0xFE0
 20029                           indf2	equ	0xFDF
 20030                           postinc2	equ	0xFDE
 20031                           postdec2	equ	0xFDD
 20032                           plusw2	equ	0xFDB
 20033                           fsr2h	equ	0xFDA
 20034                           fsr2l	equ	0xFD9
 20035                           status	equ	0xFD8
 20036                           
 20037                           	psect	rparam
 20038  0000                     tblptru	equ	0xFF8
 20039                           tblptrh	equ	0xFF7
 20040                           tblptrl	equ	0xFF6
 20041                           tablat	equ	0xFF5
 20042                           prodh	equ	0xFF4
 20043                           prodl	equ	0xFF3
 20044                           intcon	equ	0xFF2
 20045                           intcon2	equ	0xFF1
 20046                           postinc0	equ	0xFEE
 20047                           wreg	equ	0xFE8
 20048                           indf1	equ	0xFE7
 20049                           fsr1h	equ	0xFE2
 20050                           fsr1l	equ	0xFE1
 20051                           bsr	equ	0xFE0
 20052                           indf2	equ	0xFDF
 20053                           postinc2	equ	0xFDE
 20054                           postdec2	equ	0xFDD
 20055                           plusw2	equ	0xFDB
 20056                           fsr2h	equ	0xFDA
 20057                           fsr2l	equ	0xFD9
 20058                           status	equ	0xFD8
 20059                           tblptru	equ	0xFF8
 20060                           tblptrh	equ	0xFF7
 20061                           tblptrl	equ	0xFF6
 20062                           tablat	equ	0xFF5
 20063                           prodh	equ	0xFF4
 20064                           prodl	equ	0xFF3
 20065                           intcon	equ	0xFF2
 20066                           intcon2	equ	0xFF1
 20067                           postinc0	equ	0xFEE
 20068                           wreg	equ	0xFE8
 20069                           indf1	equ	0xFE7
 20070                           fsr1h	equ	0xFE2
 20071                           fsr1l	equ	0xFE1
 20072                           bsr	equ	0xFE0
 20073                           indf2	equ	0xFDF
 20074                           postinc2	equ	0xFDE
 20075                           postdec2	equ	0xFDD
 20076                           plusw2	equ	0xFDB
 20077                           fsr2h	equ	0xFDA
 20078                           fsr2l	equ	0xFD9
 20079                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         119
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     67     160
    BANK1           256      3      23
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?_memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    memset@p1	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    memset@p	PTR unsigned char  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), RXM1SIDH(ABS[1]), 
		 -> RXF1SIDH(ABS[1]), B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), 
		 -> B2CON(ABS[1]), B1CON(ABS[1]), B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionPulseOn
    _doDM->_doActionPulseOff
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatusAll->_doActionStatus
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_ram->_memset
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doApplicationOneSecondWork
    _doApplicationOneSecondWork->_SendInformationEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionPulseOff
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  115449
                                              0 BANK1      3     3      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _Read_b_eep
               _SendInformationEvent
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                          45    45      0   13530
                                             22 BANK0     45    45      0
                         _Read_b_eep
               _SendInformationEvent
                        _doActionOff
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    3314
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    3230
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                18    18      0   30018
                                             27 BANK0     18    18      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                    _doActionPulseOn
                   _doActionPulseOff
                     _doActionStatus
                  _doActionStatusAll
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       4     3      1    4056
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionStatusAll                                    3     2      1    4176
                                             22 BANK0      3     2      1
                     _doActionStatus
 ---------------------------------------------------------------------------------
 (3) _doActionStatus                                       4     3      1    3996
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOff                                     9     8      1    3954
                                             78 COMRAM     3     2      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOn                                      7     6      1    4038
                                             78 COMRAM     3     2      1
                                             22 BANK0      3     3      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           6     5      1    4080
                                             78 COMRAM     3     2      1
                                             22 BANK0      2     2      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          4     3      1    3912
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   49818
                                             35 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     232
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   16658
                                             79 COMRAM     1     1      0
                                             34 BANK0      1     0      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4202
                                             53 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1994
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                        38    38      0     848
                                             15 COMRAM    38    38      0
                         _Read_b_eep
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     188
                                              7 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    1146
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     222
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                    13    12      1   12246
                                             78 COMRAM     1     0      1
                                             22 BANK0     12    12      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    2586
                                             17 COMRAM    50    50      0
               _ECANSetOperationMode
                       __CANIDToRegs
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    3504
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2893
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1855
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      31
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    3146
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     354
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      42
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     360
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     402
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      99
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    6652
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    3146
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    3146
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPFrame                                       32    24      8    3132
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendCANFrame                                         8     1      7    2832
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (4) _ECANSendMessage                                     37    29      8    2652
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (5) __CANIDToRegs                                        10     3      7     966
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    2371
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    2361
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1954
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1720
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     697
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      86
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     582
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3     138
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     250
                     _ECANInitialize
                        _WriteTimer0
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      84
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      9     9      0     912
                                              9 COMRAM     9     9      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _ECANInitialize
       _ECANSetOperationMode
     _WriteTimer0
     _OpenTimer0
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
     _memset
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _ECANSetOperationMode
         __CANIDToRegs
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _ECANSetOperationMode
           __CANIDToRegs
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
             _memset
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
           _memset
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatusAll
       _doActionStatus
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _Read_b_eep
   _SendInformationEvent
     _Read_b_eep
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      3      17       6        9.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     43      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10F      15        0.0%
DATA                 0      0     11B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Jul 05 15:24:14 2015

                __end_of_vscp_readAppReg 301A                    __end_of_sendVSCPFrame 3F24  
                                     PL2 1282                                       PL4 239A  
                                     PL6 1294                                       PL8 23B0  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3198  
                  doActionToggle@dmflags 0001                       doActionPulseOn@arg 004F  
                                    PL10 12A2                                      PL20 269A  
                                    PL12 12B2                                      PL30 38AE  
                                    PL22 26D8                                      PL14 1914  
                                    PL40 3794                                      PL32 1948  
                                    PL24 26F0                                      PL16 2C3C  
                                    PL50 1992                                      PL42 38C2  
                                    PL34 1964                                      PL26 1936  
                                    PL18 23C2                                      PL60 2754  
                                    PL52 37A2                                      PL44 2C50  
                                    PL36 1976                                      PL28 2724  
                                    PL70 12C0                                      PL62 38E4  
                                    PL54 1F94                                      PL46 1F7C  
                                    PL38 1984                                      PL80 2A1A  
                                    PL72 12CE                                      PL64 3198  
                                    PL56 37B6                                      PL48 38D2  
                                    PL90 1322                                      PL82 12EA  
                                    PL74 12DC                                      PL66 37DC  
                                    PL58 37C8                                      PL92 1FA8  
                                    PL84 12F8                                      PL76 346C  
                                    PL68 2A08                                      PL94 1330  
                                    PL86 1306                                      PL78 2E62  
                                    PL96 133E                                      PL88 1314  
                                    PL98 23D0                                      l200 2D38  
                                    l202 2D48                                      l212 2DD2  
                                    l204 2D58                                      l213 2DEC  
                                    l230 38AC                                      l240 409E  
                                    l170 32A2                                      l235 3792  
                                    l181 2CA0                                      l502 22D6  
                                    l191 2D6E                                      l192 2CEE  
                                    l176 3320                                      l168 3284  
                                    l601 15EA                                      l505 2328  
                                    l441 20AE                                      l425 1FD8  
                     vscp_readStdReg@idx 0019                                      l194 2CFC  
                                    l610 160E                                      l602 15F2  
                                    l434 2020                                      l611 1616  
                                    l196 2D10                                      l188 2E60  
                                    l620 163C                                      l604 15F6  
                                    l460 215C                                      l613 161A  
                                    l605 15FE                                      l198 2D24  
                                    l622 16E6                                      l614 1622  
                                    l454 2126                                      l607 1602  
                                    l551 1442                                      l616 1626  
                                    l608 160A                                      l472 21C8  
                                    l448 20F0                                      l721 08AC  
                                    l537 3422                                      l617 162E  
                                    l642 4426                                      l490 226A  
                                    l466 2192                                      l619 1632  
                                    l732 0970                                      l900 35EA  
                                    l484 2234                                      l742 0A42  
                                    l646 4400                                      l910 3626  
                                    l902 35F6                                      l478 21FE  
                                    l727 0906                                      l591 15C2  
                                    l752 0B0A                                      l912 3632  
                                    l904 3602                                      l592 15CA  
                                    l496 22A0                                      l737 09DA  
                                    l921 3DB2                                      l762 0BD2  
                                    l914 363E                                      l906 360E  
                                    l747 0AA6                                      l931 3D24  
                                    l595 15D2                        doActionStatus@bOn 0051  
                                    l852 126A                                      l924 3D00  
                                    l908 361A                                      l596 15DA  
                                    l757 0B6E                                      l941 3D60  
                                    l933 3D30                                      l870 2A6E  
                                    l598 15DE                       vscp_readStdReg@reg 001C  
                                    l767 0C36                                      l943 3D6C  
                                    l935 3D3C                                      l927 3D0C  
                                    l599 15E6                                      l952 349C  
                                    l872 2A88                                      l937 3D48  
                                    l929 3D18                                      l961 34CC  
                                    l866 2C3A                                      l939 3D54  
                                    l971 3508                                      l963 34D8  
                                    l955 34A8                                      l892 36CE  
                                    l980 3A2A                                      l965 34E4  
                                    l957 34B4                                      l949 35AC  
                                    l895 35D2                                      l967 34F0  
                                    l959 34C0                                      l991 3A66  
                                    l983 3A36                                      l897 366C  
                                    l969 34FC                                      l993 3A72  
                                    l985 3A42                                      l977 3B06  
                                    l898 35DE                                      l995 3A7E  
                                    l987 3A4E                                      l997 3A8A  
                                    l989 3A5A                                      l999 3A96  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 004F                    doActionToggle@ctrlreg 0050  
                         getVSCPFrame@id 0028            __end_of_vscp_handleProbeState 3E6E  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                                      prod 000FF3  
                 _calculateSetFilterMask 23DE                                      wreg 000FE8  
                 _measurement_clock_10ms 0060                                     PL100 38F8  
                                   PL110 2772                                     PL102 31AC  
                                   PL104 19A0                                     PL106 2768  
            ?_doApplicationOneSecondWork 0001                                     PL108 1FB6  
                           __CFG_LVP$OFF 000000                      doActionPulseOff@arg 004F  
                           __CFG_WDT$OFF 000000                                     l1012 3B3A  
                                   l1021 3B5E                                     l1013 3B42  
                                   l1005 3BFE                                     l1030 3B82  
                                   l1022 3B66                                     l1031 3B8A  
                                   l1015 3B46                                     l1024 3B6A  
                                   l1016 3B4E                                     l1008 3B2A  
                                   l1033 3B8E                                     l1025 3B72  
                                   l1009 3B32                                     l1034 3B96  
                                   l1018 3B52                                     l1123 4566  
                                   l1027 3B76                                     l1019 3B5A  
                                   l1300 3E6A                                     l1060 3CC8  
                                   l1036 3B9A                                     l1028 3B7E  
                                   l1301 3DF6                     __size_of_doActionOff 00D6  
                                   l1037 3BA4                                     l1046 3CDC  
                                   l1039 3BEA                                     l1154 420A  
                                   l1148 4030                                     l1308 3E58  
                                   l1309 3E38                                     l1333 424E  
                                   l1501 1D76                                     l1406 44B6  
                                   l1159 4338                                     l1343 42A6  
                                   l1344 42B2                                     l1432 3A02  
                                   l1337 4470                                     l1361 4580  
                                   l1290 4494                                     l1540 46AA  
                                   l1348 4362                                     l1285 415A  
                                   l1357 4146                                     l1534 438C  
                                   l1526 1F7A                                     l1490 1CEA  
                                   l1466 1B6E                                     l1491 1CFE  
                                   l1492 1D3A                                     l1581 450E  
                                   l1565 4272                                     l1582 4510  
                    vscp_readStdReg@code 0011                vscp_getManufacturerId@idx 000A  
                                   l9210 2D82                                     l9220 2DA2  
                                   l9142 2C8E                                     l9304 372E  
                                   l9152 2CB8                                     l9160 2CD8  
                                   l9260 2E4A                                     l9246 2E1A  
                                   l9254 2E34                                     l9238 2DEE  
                                   l9158 2CCE                                     l9166 2CDC  
                                   l9280 405E                                     l9272 4038  
                                   l9282 4068                                     l9274 4040  
                                   l9290 4080                                     l9284 406E  
                                   l9276 404A                                     l9286 4074  
                                   l9278 4054              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                           sendCANFrame@rv 003E  
                     doActionStatusAll@i 00D4                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000D  
                                   ___IT 000101                                     _doDM 2A28  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 1FC0                                     _init 418C  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0622                              _vscp_minute 007D  
                            _vscp_second 0082                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00C6  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 3902  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 4032              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    _B0CON 000E20  
                                  l12202 43AE                                    l13004 1A10  
                                  l13102 1BA0                                    l12400 3312  
                                  l14000 0918                                    l13112 1BFE  
                                  l13024 1A36                                    _B1CON 000E30  
                                  ?_doDM 0001                                    l13106 1BB8  
                                  l12404 3316                                    l14100 0B1A  
                                  l14020 0982                                    l14012 0942  
                                  l13116 1C14                                    l13132 1C3A  
                                  l12422 383A                                    l12406 3318  
                                  l13302 1DEE                                    l13230 1D2E  
                                  l13222 1D1E                                    l13214 1D00  
                                  l13150 1C8C                                    l13134 1C3C  
                                  l13054 1A9E                                    l13038 1A42  
                                  l12502 20DC                                    l12336 45A6  
                                  l12352 321E                                    l14120 0B7E  
                                  l14112 0B42                                    l14040 09EC  
                                  l14032 09AC                                    l13240 1D3C  
                                  l13144 1C60                                    l13136 1C46  
                                  l13064 1AD2                                    l12504 20E4  
                                  _B2CON 000E40                                    l12346 320E  
                                  l12194 4398                                    l13306 1E00  
                                  l13226 1D26                                    l13162 1C9E  
                                  l13074 1B06                                    l12610 22CE  
                                  l12514 211E                                    l12380 32A4  
                                  l12364 3248                                    l14140 0BE2  
                                  l14132 0BA6                                    l14060 0A52  
                                  l14052 0A16                                    l13332 1E46  
                                  l13324 1E16                                    l13308 1E06  
                                  l13244 1D56                                    l13084 1B3A  
                                  l12374 3288                                    l15110 3184  
                                  l15030 3038                                    l14310 0E94  
                                  l14214 0D2A                                    l13430 2B78  
                                  l12550 21C0                                    l12526 2154  
                                  l12470 201A                                    l12630 234C  
                                  l12462 2006                                    l11920 4316  
                                  l15104 316E                                    l15016 457A  
                                  l14400 0FC4                                    l14304 0E88  
                                  l14232 0D98                                    l14208 0D1E  
                                  l14152 0C0A                                    l14080 0AB6  
                                  l14072 0A7A                                    l13336 1E5E  
                                  l13328 1E30                                    l13280 1DA0  
                                  l13096 1B72                                    l13512 137A  
                                  l12624 2322                                    l12616 22DA  
                                  l12480 2034                                    _B3CON 000E50  
                                  l12386 32D2                                    l12394 32F0  
                                  l15050 3070                                    l15042 3058  
                                  l15034 3042                                    l15114 3194  
                                  l15026 302E                                    l14314 0E9A  
                                  l14242 0DAA                                    l14218 0D5A  
                                  l14170 0C90                                    l14162 0C46  
                                  l13354 1EA2                                    l13346 1E88  
                                  l13290 1DC2                                    l13266 1D78  
                                  l13194 1CDE                                    l13178 1CBE  
                                  l13098 1B90                                    l13450 2BE6  
                                  l13442 2BBA                                    l13434 2B8E  
                                  l13426 2B62                                    l13418 2AA2  
                                  l13530 13D4                                    l12642 2378  
                                  l12562 21F6                                    l12538 218A  
                                  l12618 2314                                    l12466 2010  
                                  l12458 1FFE                                    l12708 4480  
                                  l11924 431A                                    l11908 3FD4  
                                  l12900 3DD4                                    l15060 3096  
                                  l14412 0FD2                                    l14092 0ADE  
                                  l14164 0C82                                    l13700 42EC  
                                  l13380 1F1A                                    l13612 155C  
                                  l13540 1406                                    l13532 13DE  
                                  l13524 13B6                                    l13516 1382  
                                  l12468 2014                                    l12628 232C  
                                  l12902 3DDA                                    l15054 3080  
                                  l15046 3064                                    l15038 304C  
                                  l14406 0FCC                                    l14334 0EE4  
                                  l14262 0DF4                                    l14238 0DA4  
                                  l14190 0CDA                                    l14414 100E  
                                  l12726 3348                                    l12822 281A  
                                  l15150 3968                                    l15126 44AC  
                                  l13358 1ECA                                    l13446 2BD0  
                                  l13438 2BA4                                    l13614 1560  
                                  l13542 1410                                    l13534 13E8  
                                  l13526 13C0                                    l12654 238C  
                                  l12574 222C                                    l12478 2030  
                                  l12920 3E10                                    l11872 44C4  
                                  l15080 30D0                                    l15072 30B8  
                                  l15064 30A2                                    l14440 109E  
                                  l14352 0F28                                    l14328 0ED8  
                                  l14280 0E38                                    l14256 0DE8  
                                  l14184 0CCE                                    l14504 1236  
                                  l14424 101E                                    l12744 338E  
                                  l13704 42FC                                    l12816 27AC  
                                  l15160 398A                                    l15144 394C  
                                  l13720 3D08                                    l13712 3CE8  
                                  l13456 2BFC                                    l13616 158A  
                                  l13536 13F2                                    l13528 13CA  
                                  _B4CON 000E60            __size_of_SendInformationEvent 0052  
                                  l14450 1134                                    l14442 10BC  
                                  l14434 1044                                    l14362 0F3A  
                                  l14338 0EEA                                    l14290 0E4A  
                                  l14266 0DFA                                    l14194 0CE0  
                                  l12754 33B0                                    l12826 2862  
                                  l15162 39A0                                    l15138 392C  
                                  l14610 35FE                                    l14602 35E6  
                                  l13458 2C30                                    l13626 15CC  
                                  l13570 14A4                                    l13538 13FC  
                                  l13546 141A                                    l12658 2394  
                                  l12586 2262                                    l13820 2E8E  
                                  l12924 3E14            __size_of_vscp_getMajorVersion 0002  
                                  l15084 30DC                                    l15076 30C4  
                                  l15068 30AE                                    l14516 127E  
                                  l14452 1152                                    l14444 10DA  
                                  l14436 1062                                    l12772 33F6  
                                  l13740 3D44                                    l13732 3D2C  
                                  l13724 3D14                                    l13396 2A32  
                                  l13556 1466                                    l13830 2EBC  
                                  l12926 3E18                                    l15094 3126  
                                  l14542 2514                                    l14534 2502  
                                  l14526 23F0                                    l14446 10F8  
                                  l14438 1080                                    l14382 0F80  
                                  l14358 0F34                                    l14286 0E44  
                                  l13910 0680                                    l13902 065C  
                                  l12782 340C                                    l15182 39E8  
                                  l15174 39D4                                    l15158 3986  
                                  l14630 363A                                    l14622 3622  
                                  l14614 360A                                    l14606 35F2  
                                  l14710 354E                                    l14702 350E  
                                  l13494 4126                                    l13590 14DA  
                                  l13582 14C8                                    l13558 1474  
                                  l12598 2298                                    l13824 2E9E  
                                  l14560 25A6                                    l14448 1116  
                                  l14456 1170                                    l14376 0F78  
                                  l13920 06A8                                    l15192 3A04  
                                  l13752 3D68                                    l13744 3D50  
                                  l13736 3D38                                    l13728 3D20  
                                  l13760 3D72                                    l14624 362A  
                                  l14704 3536                                    l14720 3A12  
                                  l14800 3C54                                    l13488 411C  
                                  l13568 1496                                    _B5CON 000E70  
                                  l13850 2F66                                    l13834 2ED2  
                                  l14546 2588                                    l14570 263E  
                                  l14458 11A2                                    l14386 0F86  
                                  l12970 19CA                                    l12962 19B2  
                                  l13746 3D58                                    l13762 3D9A  
                                  l14642 36B8                                    l14626 362E  
                                  l14618 3616                                    l14802 3C5E  
                                  l13498 412E                                    l13666 1640  
                                  l13682 16FA                                    l13578 14B8  
                                  l13594 14EC                                    l13860 2F8E  
                                  l13852 2F6E                                    l13844 2F4E  
                                  l12956 3E5C                                    l14564 2620  
                                  l14492 120C                                    l12796 3424  
                                  l12964 19B8                                    l13748 3D5C  
                                  l14740 3A56                                    l14732 3A3E  
                                  l14804 3C68                                    l14812 3C86  
                                  l13676 16D2                                    l13668 166A  
                                  l13684 172E                                    l13862 2F96  
                                  l13854 2F76                                    l13846 2F56  
                                  l13838 2F40                                    l12886 3DB6  
                                  l14566 2628                                    l12990 1A08  
                                  l12966 19BE                                    l14638 3644  
                                  l14590 35B8                                    l14670 34BC  
                                  l14662 34A4                                    l14654 3484  
                                  l14806 3C72                                    l14814 3CAE  
                                  l13880 2FF6                                    l13856 2F7E  
                                  l13848 2F5E                                    l13960 0854  
                                  l13952 082C                                    l13928 06FA  
                                  l13784 440E                                    l13792 43E8  
                                  l12968 19C4                                    l14760 3A92  
                                  l14752 3A7A                                    l14744 3A62  
                                  l14736 3A4A                                    l14728 3A32  
                                  l14808 3C7C                                    l14840 3B12  
                                  l13696 17E0                                    l13688 1734  
                                  l13858 2F86                                    l13866 2F9E  
                                  l13874 2FD8                                    l14690 34F8  
                                  l14682 34E0                                    l14674 34C8  
                                  l14666 34B0                                    l14754 3A82  
                                  l14770 3AC4                                    l13868 2FCA  
                                  l14940 41D6                                    l13980 08C2  
                                  l13972 087E                                    l12988 1A02  
                                  l14756 3A86                                    l14748 3A6E  
                                  l14828 451A                                    l13886 3016  
                                  l14598 35DA                                    l14694 3504  
                                  l14686 34EC                                    l14678 34D4  
                                  l14790 3C22                                    l14944 4204  
                                  l13992 08EC                                    l14688 34F4  
                                  l14776 3ADC                                    l14768 3A9C  
                                  l14792 3C2C                                    l14784 3C0A  
                                  l14848 3B34                                    l13978 08BC  
                                  l14794 3C36                                    l14890 3BD0  
                                  l14972 4246                                    l14796 3C40  
                                  l14798 3C4A                                    l14888 3BA8  
             __end_of_vscp_goActiveState 44F6            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                          _doActionPulseOn 347A  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 4654                                    _EEADR 000FA9  
                        __end_of___lbmod 43B6                  _vscp_handleDropNickname 4284  
                                  _BSEL0 000DF8                                    _T0CON 000FD5  
                                  u11075 36F6                                    u11085 3706  
                                  u11095 3732                                    u10805 2C96  
                                  u20430 311C                                    u10807 2C98  
                                  u20435 311A                                    u20460 3166  
                                  u20465 3164                                    u16005 3842  
                                  u15260 4024                                    u15265 401A  
                                  u16084 207E                                    u16085 207A  
                                  u16615 2948                                    u16625 295E  
                                  u18065 1854                                    u16635 2974  
                                  u18075 186A                                    u16645 2990  
                                  u18085 1880                                    u19310 2534  
                                  u16574 27D6                                    u18255 3EAA  
                                  u16575 27D0                                    u18095 189C  
                                  u19320 255C                                    u17634 1924  
                                  u19315 252A                                    u17475 2AF0  
                                  u17635 191E                                    u19404 260A  
                                  u16685 427E                                    u19405 2608  
                                  u19325 2552                                    u16686 4280  
                                  u19344 2572                                    u17584 1388  
                                  u15985 3814                                    u19345 2570  
                                  u17585 1386                                    u15995 3824  
                                  u19374 25DC                                    u17854 153A  
                                  u19375 25D8                                    u19295 2448  
                                  u17855 1536                                    u19384 25F4  
                                  u19385 25F0                                    u17874 1590  
                                  u17875 158E                                    u19724 3564  
                                  u19725 355E                                    i1l413 0070  
                                  i1l421 00B8                                    i1l415 0094  
                                  i1l416 0096                                    i1l417 00B6  
                                  i1l418 00AA                                    u19874 3AF2  
                                  u19875 3AEC                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 4698               _vscp_readNicknamePermanent 468E  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 461C  
                                  doDM@i 00E8                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 4670  
                     vscp_writeAppReg@rv 00DB                                    _hours 0076  
              _vscp_getRegisterPagesUsed 46B6                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 4402                                    tablat 000FF5  
                _vscp_getSubMinorVersion 46BC                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 43DC  
                           __end_ofPL100 3902                             __end_ofPL110 277A  
                           __end_ofPL102 31B8                             __end_ofPL104 19A8  
                           __end_ofPL106 2772                             __end_ofPL108 1FC0  
                   _ECANSetOperationMode 459A                          __initialization 42B4  
                           __end_of_doDM 2C3C                             __end_of_main 239A  
                           __end_of_init 41D0                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 4642                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 46B0                           doDM@class_mask 00DC  
                         __CFG_OSC$HSPLL 000000                    doActionPulseOn@bEvent 0051  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00D7                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 0036  
                                 ??_main 0114                                   ??_init 000C  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 000A  
               ??_vscp_setManufacturerId 000D                 _vscp_handleProtocolEvent 19A8  
                          __activetblptr 000002                        __RegsToCANID@type 000B  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00FC  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON1 000FC1  
                       _doActionPulseOff 3A08               ECANReceiveMessage@savedPtr 0013  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00DF                      _channel_pulse_flags 0068  
                     vscp_writeStdReg@rv 003B                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 44F6                                   i1l8870 0038  
                                 i1l8880 006A                                   i1l8872 003E  
                                 i1l8890 0090                                   i1l8882 006E  
                                 i1l8874 0042                                   i1l8866 0024  
                                 i1l8892 009A                                   i1l8884 0072  
                                 i1l8876 0052                                   i1l8868 002C  
                                 i1l8894 00A4                                   i1l8886 007E  
                                 i1l8878 0062                                   i1l8896 00B2  
                                 i1l8888 0088                          _init_app_eeprom 3322  
                    _channel_pulse_timer 0100                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                     doActionStatusAll@arg 00D2  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 433A                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1513 00E8  
                __end_of_doActionPulseOn 35AE                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 4364                                   _doWork 46B4  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@bOn 00DC  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00DD               __end_of_vscp_setSegmentCRC 45DE  
                    vscp_writeAppReg@val 004F                                   _memset 42E2  
                                 clear_0 42BA                                   clear_1 42C6  
                                 clear_2 42D2                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00F5                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 007E                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0010                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 42D8                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          _current_iostate 006A  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 4496  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
            __end_of_vscp_check_pstorage 4496                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00DE                               __end_ofPL2 1294  
                             __end_ofPL4 23B0                               __end_ofPL6 12A2  
                             __end_ofPL8 23C2                           ??_sendCANFrame 003E  
                             _doActionOn 35AE                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 468E  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01FA  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 4684  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00DE  
        __size_of_vscp_setManufacturerId 0026                 __end_of_vscp_writeAppReg 1282  
                           _debounce_cnt 00B2                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 346C              __end_of_vscp_setControlByte 45C8  
               __end_of_vscp_writeStdReg 3A08            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0050  
        __end_of_vscp_handleDropNickname 42B4                   doActionPulseOff@bEvent 0051  
                           _getVSCPFrame 3FBA                               __pbssBANK0 0060  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                 doActionPulseOn@dmflags 0001               __end_of_vscp_getBufferSize 46BA  
                              ?_Busy_eep 0001                   doActionPulseOn@ctrlreg 0050  
                  vscp_writeRegister@reg 0050                   ??_ECANSetOperationMode 0008  
                           __IT_INT_MASK 0070                             __IT_SAVE_BSR 0071  
     __size_of_vscp_getRegisterPagesUsed 0002          __end_of_vscp_getSubMinorVersion 46BE  
                       ?_doActionPulseOn 004F                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 269A  
                __size_of_doActionToggle 00F8                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 00DE                                  _ECANCON 000F77  
                                ?_memset 0008                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                      _doActionStatusAll 4514                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00D0  
                    vscp_writeStdReg@reg 003C             __end_of_vscp_doOneSecondWork 4148  
                     ?_doActionStatusAll 00D2              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 0050  
        __end_of_interrupt_at_low_vector 00C6                 vscp_readStdReg@code_1486 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 3DB4  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 4032  
             __end_of_vscp_getMatrixInfo 44D8                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 0001                      ??_doActionStatusAll 0052  
                     _vscp_goActiveState 44D8                    doActionStatus@ctrlreg 0050  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 40FA  
           __end_of_vscp_getMajorVersion 46C2                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0044                               ??_Busy_eep 0008  
                SendInformationEvent@idx 004E                   _vscp_getManufacturerId 45F4  
                 _vscp_setManufacturerId 43DC                          _ECANSendMessage 31B8  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0080               __end_of_vscp_getSegmentCRC 46A2  
             ??_vscp_handleProtocolEvent 00DF                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 46B8                 __size_of_vscp_getMDF_URL 0018  
               __end_of_doActionPulseOff 3B08                                  ___lbmod 438E  
                        getCANFrame@pdlc 001A                __end_of_doActionStatusAll 4530  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 2A08  
                     _vscp_sendHeartBeat 43B6                                  __pcinit 42B4  
                         _vscp_deviceURL 0600                          __size_of_memset 002C  
                            ?_doActionOn 004F                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 1FC0  
                                __ptext1 46B4                                  __ptext2 134C  
                                __ptext3 40FA                                  __ptext4 43B6  
                                __ptext5 4666                                  __ptext6 4670  
                                __ptext7 46B0                                  __ptext8 2A28  
                                __ptext9 3B08                           _vscp_getUserID 4608  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionOn@bEvent 00D3                    vscp_writeStdReg@value 0036  
                    ?_vscp_sendHeartBeat 00D0                 ??_vscp_handleSetNickname 000D  
                                _minutes 0077                                  _seconds 0078  
                    __end_of_WriteTimer0 4642                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 4284                        vscp_readAppReg@rv 0011  
                     vscp_getMDF_URL@idx 0009                                  main@dir 0116  
          vscp_handleProtocolEvent@bytes 00EC                     end_of_initialization 42D8  
                        init_app_ram@dir 0034                      __end_of_doActionOff 3DB4  
           __end_of_vscp_handleHeartbeat 4250                 __size_of_vscp_getSubzone 000A  
                              i1u1060_20 0090                                i1u1060_21 008E  
                              i1u1061_20 00A4                                  memset@c 000A  
                              i1u1061_21 00A2                                i1u1062_20 00B2  
                              i1u1062_21 00B0                                  memset@n 000C  
                                memset@p 000E                                i1u1056_20 002C  
                              i1u1056_21 002A                                i1u1057_20 006A  
                              i1u1057_21 0068                                i1u1058_20 007E  
                              i1u1058_21 007C                            __Lmediumconst 0000  
                              i1u1059_20 0088                                i1u1059_21 0086  
                   __end_of_sendCANFrame 4212                vscp_handleProtocolEvent@i 00F9  
              vscp_handleProtocolEvent@j 00FA                vscp_handleProtocolEvent@k 00F3  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 4428  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 4530                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 45F4              _vscp_writeNicknamePermanent 45DE  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3E6E  
                 __end_of_vscp_getUserID 461C             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 418C  
                         _vscp_probe_cnt 0081                                _PORTAbits 000F80  
       doApplicationOneSecondWork@bInput 00FB                                _PORTBbits 000F81  
                       _current_debounce 0075                                _PORTCbits 000F82  
                    __end_of_getCANFrame 433A            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 01AA  
                       ___lbmod@dividend 0009                                _TRISAbits 000F92  
                              _TRISBbits 000F93                                _TRISCbits 000F94  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 017E  
                     _vscp_setSegmentCRC 45C8               vscp_handleProtocolEvent@cb 00F1  
                __end_of_ECANSendMessage 3322                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00E7                     __end_of__RegsToCANID 3794  
                  _measurement_clock_sec 0064                      __size_of_doActionOn 0122  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 444E  
                             _vscp_error 46B0                     _vscp_doOneSecondWork 40FA  
                     i1WriteTimer0@timer 0003                               _vscp_timer 006E  
                 __end_of_vscp_setUserID 454C                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00FE                           _doActionToggle 3B08  
             __size_of_doActionStatusAll 001C                           _doActionStatus 3C00  
                        ?_vscp_getUserID 0001                           __end_of_doWork 46B6  
           __end_of_vscp_getMinorVersion 46C0                              _WriteTimer0 4630  
                   _SendInformationEvent 40A8                     _vscp_getMajorVersion 46C0  
                            _Write_b_eep 4250                           __end_of_memset 430E  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                                ___DCDelay 00FF  
                            __end_ofPL10 12B2                              __end_ofPL20 26D8  
                            __end_ofPL12 12C0                        ?_vscp_writeAppReg 004F  
                            __end_ofPL30 38C2                              __end_ofPL22 26F0  
                            __end_ofPL14 1936                              __end_ofPL40 37A2  
                            __end_ofPL32 1964                              __end_ofPL24 2724  
                            __end_ofPL16 2C50                              __end_ofPL50 19A0  
                            __end_ofPL42 38D2                              __end_ofPL34 1976  
                            __end_ofPL26 1948                              __end_ofPL18 23D0  
                            __end_ofPL60 2768                              __end_ofPL52 37B6  
                            __end_ofPL44 2C68                              __end_ofPL36 1984  
                            __end_ofPL28 2754                              __end_ofPL70 12CE  
                            __end_ofPL62 38F8                              __end_ofPL54 1FA8  
                            __end_ofPL46 1F94                              __end_ofPL38 1992  
                            __end_ofPL80 2A28                              __end_ofPL72 12DC  
                            __end_ofPL64 31AC                              __end_ofPL56 37C8  
                            __end_ofPL48 38E4                              __end_ofPL90 1330  
                            __end_ofPL82 12F8                              __end_ofPL74 12EA  
                            __end_ofPL66 37EE                              __end_ofPL58 37DC  
                            __end_ofPL92 1FB6                              __end_ofPL84 1306  
                            __end_ofPL76 347A                              __end_ofPL68 2A1A  
                            __end_ofPL94 133E                              __end_ofPL86 1314  
                            __end_ofPL78 2E70                              __end_ofPL96 134C  
                            __end_ofPL88 1322                              __end_ofPL98 23DE  
                    start_initialization 42B4                              _doActionOff 3CDE  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00D2  
                      ?_vscp_writeStdReg 0036                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0037                       _vscp_getFamilyCode 4684  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 467A  
               _channel_protection_timer 0083                         doDM@class_filter 00DA  
                     __end_of_Read_b_eep 4654                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 4568                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00F0                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 1F7C                          ?_vscp_setUserID 000C  
                    ?_vscp_getFamilyType 0008                                _doDM$2393 00E0  
                              _doDM$2394 00E1                                _doDM$2395 00E2  
                              _doDM$2396 00E3                                _doDM$2397 00E4  
                              _doDM$2398 00E5                                _doDM$2399 00E6  
                  __size_of_init_app_ram 028E                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 3C00                        ??_vscp_getSubzone 000A  
                 __end_of_doActionStatus 3CDE                 __end_of__ECANPointBuffer 40A8  
                      __CANIDToRegs@type 000E                              _getCANFrame 430E  
                               ??_doWork 0008                       _vscp_getBufferSize 46B8  
            vscp_handleProtocolEvent@len 00ED                           doActionOff@arg 004F  
            vscp_handleProtocolEvent@pos 00EB               __end_of_ECANReceiveMessage 2E62  
                    ??_vscp_readRegister 001D                                 ??_memset 000E  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00D0  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 4666  
          __end_of_vscp_goBootloaderMode 4568                     _vscp_handleHeartbeat 4212  
                     __end_of_OpenTimer0 4514      __size_of_doApplicationOneSecondWork 05C8  
                    ?_vscp_getBufferSize 0001             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                        __IT_SAVE_STATUS 0072                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00BC                            __pcstackBANK1 0114  
                       _vscp_alarmstatus 0055                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0042                  doActionPulseOff@dmflags 0001  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                doActionPulseOff@ctrlreg 0050                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 4582                             _init_app_ram 277A  
           __size_of_vscp_setControlByte 0016                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              __pnvBANK0 00FF                            __IT_SAVE_WREG 0073  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 44B8  
                 _vscp_handleSetNickname 444E            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00BC                          ?_doActionToggle 004F  
                         _ECANInitialize 3F24                          ?_doActionStatus 004F  
                               ?___lbmod 0008                        ?_doActionPulseOff 004F  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0018                             ??_doActionOn 0050  
                     ??_doActionPulseOff 00D2                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1503 00EF                  vscp_readStdReg@idx_1487 001A  
             vscp_setManufacturerId@data 000C                             _sendCANFrame 41D0  
                            __smallconst 0600                        WriteTimer0@timer0 0008  
               __size_of_doActionPulseOn 0134                       _vscp_getSegmentCRC 4698  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
         __end_of_vscp_getManufacturerId 4608           __end_of_vscp_setManufacturerId 4402  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1502 00EE  
                        doDM@type_filter 00DE                           ??_vscp_setGUID 000D  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 006C          SendInformationEvent@eventTypeId 00D1  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                   _vscp_getMinorVersion 46BE                                _sendTimer 0079  
                     __end_of_doActionOn 36D0                   __end_of_ECANInitialize 3FBA  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 438E                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 38AE                             __RegsToCANID 36D0  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 0001  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 4148                                _vscp_imsg 0097  
                              _vscp_hour 007B                                _vscp_omsg 00A5  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
                     doActionOff@ctrlreg 0050                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 1914  
             _doApplicationOneSecondWork 134C                         _vscp_page_select 0052  
                            _INTCON2bits 000FF1               __size_of_vscp_readRegister 001A  
                               ___DCByte 0074                                 _Busy_eep 46AA  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 014A  
           __end_of_vscp_restoreDefaults 46AA                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0012  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 4582                                 __Lrparam 0000  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 004F   doApplicationOneSecondWork@iodirections 00F6  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                 vscp_writeAppReg@val_1273 00D9  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
             vscp_writeAppReg@bInfoEvent 00DA                               ?_vscp_init 0001  
                           ?_doActionOff 004F                                 __ptext10 4514  
                               __ptext11 3C00                                 __ptext20 46A2  
                               __ptext12 3A08                                 __ptext21 277A  
                               __ptext13 347A                                 __ptext30 4568  
                               __ptext22 42E2                                 __ptext14 35AE  
                               __ptext31 301A                                 __ptext23 3322  
                               __ptext15 3CDE                                 __ptext40 461C  
                               __ptext32 46B6                                 __ptext24 4530  
                               __ptext16 19A8                                 __ptext41 46BC  
                               __ptext33 467A                                 __ptext25 43DC  
                               __ptext17 438E                                 __ptext50 44B8  
                               __ptext42 46BE                                 __ptext34 4684  
                               __ptext26 4402                                 __ptext18 4496  
                               __ptext51 454C                                 __ptext43 46C0  
                               __ptext35 46B8                                 __ptext27 0622  
                               __ptext19 3902                                 __ptext60 3FBA  
                               __ptext52 3DB4                                 __ptext44 433A  
                               __ptext36 46BA                                 __ptext28 23DE  
                               __ptext61 430E                                 __ptext53 44D8  
                               __ptext45 4284                                 __ptext37 45F4  
                               __ptext29 40A8                                 __ptext70 4250  
                               __ptext62 2C68                                 __ptext54 4428  
                               __ptext46 4148                                 __ptext38 4608  
                               __ptext71 46AA                                 __ptext63 36D0  
                               __ptext55 3E6E                                 __ptext47 468E  
                               __ptext39 4582                                 __ptext80 4654  
                               __ptext72 418C                                 __ptext64 4032  
                               __ptext56 41D0                                 __ptext48 444E  
                               __ptext73 44F6                                 __ptext65 4472  
                               __ptext57 31B8                                 __ptext49 4212  
                               __ptext74 4630                                 __ptext66 45B2  
                               __ptext58 37EE                                 __ptext75 3F24  
                               __ptext67 45C8                                 __ptext59 4364  
                               __ptext76 459A                                 __ptext68 4698  
                               __ptext77 2E70                                 __ptext69 45DE  
                               __ptext78 4642           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00D0                            ?_getVSCPFrame 001E  
                      ??_doActionPulseOn 00D2                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 4666             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 0214  
                          __size_of_main 03DA                            __size_of_init 0044  
              __size_of_vscp_writeAppReg 0C60                      _vscp_check_pstorage 4472  
                          init_app_ram@i 0035           vscp_handleProtocolEvent@i_1501 00F4  
         vscp_handleProtocolEvent@i_1504 00F8           vscp_handleProtocolEvent@i_1512 00F2  
                   __end_of_vscp_getGUID 4630                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 467A                        doActionOff@bEvent 0051  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 0001                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 4428                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00EA  
                      doActionOn@ctrlreg 00D2                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 000F  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 45B2  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 2E70  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 007A                          _vscp_readStdReg 301A  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 4364  
                     _ECANReceiveMessage 2C68                                 memset@p1 0008  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 007C  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 459A                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 0050         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 0050                          _vscp_node_state 007F  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
         doApplicationOneSecondWork@data 00F8                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 46BC              _vscp_getBootLoaderAlgorithm 46BA  
       __size_of_interrupt_at_low_vector 00AE                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 454C             __end_of_ECANSetOperationMode 45B2  
                   _vscp_restoreDefaults 46A2              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 4670  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 44B8                       __end_of_vscp_error 46B4  
                 ECANSendMessage@tempPtr 0031                __size_of_doActionPulseOff 0100  
               doActionStatusAll@dmflags 00D3           __end_of_vscp_handleSetNickname 4472  
     vscp_handleProtocolEvent@bytes_1508 00F6                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00D2  
                           __CANIDToRegs 37EE                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00E6              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00FD                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 0051                        doActionToggle@arg 004F  
