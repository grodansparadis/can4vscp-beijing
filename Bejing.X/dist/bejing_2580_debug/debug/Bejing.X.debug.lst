

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Jul 03 15:54:07 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    97                           	psect	pa_nodes,global,class=CODE,delta=1
    98  0000                     tblptrh	equ	0xFF7
    99                           tblptrl	equ	0xFF6
   100                           tablat	equ	0xFF5
   101                           prodh	equ	0xFF4
   102                           prodl	equ	0xFF3
   103                           intcon	equ	0xFF2
   104                           intcon2	equ	0xFF1
   105                           wreg	equ	0xFE8
   106                           indf1	equ	0xFE7
   107                           fsr1h	equ	0xFE2
   108                           fsr1l	equ	0xFE1
   109                           indf2	equ	0xFDF
   110                           postinc2	equ	0xFDE
   111                           postdec2	equ	0xFDD
   112                           plusw2	equ	0xFDB
   113                           fsr2h	equ	0xFDA
   114                           fsr2l	equ	0xFD9
   115                           status	equ	0xFD8
   116                           
   117                           	psect	smallconst
   118  000600                     __psmallconst:
   119                           	opt stack 0
   120  000600                     _vscp_deviceURL:
   121                           	opt stack 0
   122  000600  77                 	db	119
   123  000601  77                 	db	119
   124  000602  77                 	db	119
   125  000603  2E                 	db	46
   126  000604  65                 	db	101
   127  000605  75                 	db	117
   128  000606  72                 	db	114
   129  000607  6F                 	db	111
   130  000608  73                 	db	115
   131  000609  6F                 	db	111
   132  00060A  75                 	db	117
   133  00060B  72                 	db	114
   134  00060C  63                 	db	99
   135  00060D  65                 	db	101
   136  00060E  2E                 	db	46
   137  00060F  73                 	db	115
   138  000610  65                 	db	101
   139  000611  2F                 	db	47
   140  000612  62                 	db	98
   141  000613  65                 	db	101
   142  000614  69                 	db	105
   143  000615  6A                 	db	106
   144  000616  69                 	db	105
   145  000617  6E                 	db	110
   146  000618  67                 	db	103
   147  000619  5F                 	db	95
   148  00061A  32                 	db	50
   149  00061B  2E                 	db	46
   150  00061C  78                 	db	120
   151  00061D  6D                 	db	109
   152  00061E  6C                 	db	108
   153  00061F  00                 	db	0
   154  000620                     __end_of_vscp_deviceURL:
   155                           	opt stack 0
   156  0000                     _ADCON1	set	4033
   157  0000                     _BRGCON1	set	3952
   158  0000                     _BRGCON2	set	3953
   159  0000                     _BRGCON3	set	3954
   160  0000                     _BSEL0	set	3576
   161  0000                     _CANCON	set	3951
   162  0000                     _CIOCON	set	3955
   163  0000                     _ECANCON	set	3959
   164  0000                     _EEADR	set	4009
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EECON2	set	4007
   167  0000                     _EEDATA	set	4008
   168  0000                     _INTCON2bits	set	4081
   169  0000                     _INTCONbits	set	4082
   170  0000                     _MSEL0	set	3568
   171  0000                     _MSEL1	set	3569
   172  0000                     _MSEL2	set	3570
   173  0000                     _PORTA	set	3968
   174  0000                     _PORTAbits	set	3968
   175  0000                     _PORTB	set	3969
   176  0000                     _PORTBbits	set	3969
   177  0000                     _PORTC	set	3970
   178  0000                     _PORTCbits	set	3970
   179  0000                     _RXB1CONbits	set	3920
   180  0000                     _RXF0EIDH	set	3842
   181  0000                     _RXF0EIDL	set	3843
   182  0000                     _RXF0SIDH	set	3840
   183  0000                     _RXF0SIDL	set	3841
   184  0000                     _RXF1EIDH	set	3846
   185  0000                     _RXF1EIDL	set	3847
   186  0000                     _RXF1SIDL	set	3845
   187  0000                     _RXFBCON0	set	3552
   188  0000                     _RXFBCON1	set	3553
   189  0000                     _RXFBCON2	set	3554
   190  0000                     _RXFBCON3	set	3555
   191  0000                     _RXFBCON4	set	3556
   192  0000                     _RXFBCON5	set	3557
   193  0000                     _RXFBCON6	set	3558
   194  0000                     _RXFBCON7	set	3559
   195  0000                     _RXFCON0	set	3540
   196  0000                     _RXFCON1	set	3541
   197  0000                     _RXM0EIDH	set	3866
   198  0000                     _RXM0EIDL	set	3867
   199  0000                     _RXM0SIDH	set	3864
   200  0000                     _RXM0SIDL	set	3865
   201  0000                     _RXM1EIDH	set	3870
   202  0000                     _RXM1EIDL	set	3871
   203  0000                     _RXM1SIDL	set	3869
   204  0000                     _T0CON	set	4053
   205  0000                     _T0CONbits	set	4053
   206  0000                     _TMR0H	set	4055
   207  0000                     _TMR0L	set	4054
   208  0000                     _TRISA	set	3986
   209  0000                     _TRISAbits	set	3986
   210  0000                     _TRISB	set	3987
   211  0000                     _TRISBbits	set	3987
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISCbits	set	3988
   214  0000                     _B0RXFUL	set	28935
   215  0000                     _B0TXEN	set	28610
   216  0000                     _B1RXFUL	set	29063
   217  0000                     _B1TXEN	set	28611
   218  0000                     _B2RXFUL	set	29191
   219  0000                     _B2TXEN	set	28612
   220  0000                     _B3RXFUL	set	29319
   221  0000                     _B3TXEN	set	28613
   222  0000                     _B4RXFUL	set	29447
   223  0000                     _B4TXEN	set	28614
   224  0000                     _B5RXFUL	set	29575
   225  0000                     _B5TXEN	set	28615
   226  0000                     _FIFOEMPTY	set	31655
   227  0000                     _IRXIF	set	32039
   228  0000                     _MDSEL0	set	31678
   229  0000                     _MDSEL1	set	31679
   230  0000                     _RXB0FILHIT0	set	31488
   231  0000                     _RXB0FUL	set	31495
   232  0000                     _RXB0IF	set	32032
   233  0000                     _RXB0OVFL	set	31655
   234  0000                     _RXB1IF	set	32033
   235  0000                     _RXB1OVFL	set	31654
   236  0000                     _RXF1EN	set	28321
   237  0000                     _RXM0EXIDM	set	30923
   238  0000                     _RXM1EXIDEN	set	30955
   239  0000                     _B0CON	set	3616
   240  0000                     _B1CON	set	3632
   241  0000                     _B2CON	set	3648
   242  0000                     _B3CON	set	3664
   243  0000                     _B4CON	set	3680
   244  0000                     _B5CON	set	3696
   245  0000                     _RXB0CON	set	3936
   246  0000                     _RXB1CON	set	3920
   247  0000                     _RXF1SIDH	set	3844
   248  0000                     _RXM1SIDH	set	3868
   249  0000                     _TXB0CON	set	3904
   250  0000                     _TXB1CON	set	3888
   251  0000                     _TXB2CON	set	3872
   252  000620  00                 	db	0	; dummy byte at the end
   253  0000                     tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           prodh	equ	0xFF4
   257                           prodl	equ	0xFF3
   258                           intcon	equ	0xFF2
   259                           intcon2	equ	0xFF1
   260                           wreg	equ	0xFE8
   261                           indf1	equ	0xFE7
   262                           fsr1h	equ	0xFE2
   263                           fsr1l	equ	0xFE1
   264                           indf2	equ	0xFDF
   265                           postinc2	equ	0xFDE
   266                           postdec2	equ	0xFDD
   267                           plusw2	equ	0xFDB
   268                           fsr2h	equ	0xFDA
   269                           fsr2l	equ	0xFD9
   270                           status	equ	0xFD8
   271                           
   272                           	psect	nvBANK0
   273  0000FF                     __pnvBANK0:
   274                           	opt stack 0
   275  0000FF                     ___DCDelay:
   276                           	opt stack 0
   277  0000FF                     	ds	1
   278                           
   279                           ; #config settings
   280  0000                     tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           prodh	equ	0xFF4
   284                           prodl	equ	0xFF3
   285                           intcon	equ	0xFF2
   286                           intcon2	equ	0xFF1
   287                           wreg	equ	0xFE8
   288                           indf1	equ	0xFE7
   289                           fsr1h	equ	0xFE2
   290                           fsr1l	equ	0xFE1
   291                           indf2	equ	0xFDF
   292                           postinc2	equ	0xFDE
   293                           postdec2	equ	0xFDD
   294                           plusw2	equ	0xFDB
   295                           fsr2h	equ	0xFDA
   296                           fsr2l	equ	0xFD9
   297                           status	equ	0xFD8
   298                           
   299                           	psect	cinit
   300  0042C0                     __pcinit:
   301                           	opt stack 0
   302  0042C0                     start_initialization:
   303                           	opt stack 0
   304  0042C0                     __initialization:
   305                           	opt stack 0
   306                           
   307                           ; Clear objects allocated to BANK1 (20 bytes)
   308  0042C0  EE01  F000         	lfsr	0,__pbssBANK1
   309  0042C4  0E14               	movlw	20
   310  0042C6                     clear_0:
   311  0042C6  6AEE               	clrf	postinc0,c
   312  0042C8  06E8               	decf	wreg,f,c
   313  0042CA  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BANK0 (92 bytes)
   316  0042CC  EE00  F060         	lfsr	0,__pbssBANK0
   317  0042D0  0E5C               	movlw	92
   318  0042D2                     clear_1:
   319  0042D2  6AEE               	clrf	postinc0,c
   320  0042D4  06E8               	decf	wreg,f,c
   321  0042D6  E1FD               	bnz	clear_1
   322                           
   323                           ; Clear objects allocated to COMRAM (7 bytes)
   324  0042D8  EE00  F052         	lfsr	0,__pbssCOMRAM
   325  0042DC  0E07               	movlw	7
   326  0042DE                     clear_2:
   327  0042DE  6AEE               	clrf	postinc0,c
   328  0042E0  06E8               	decf	wreg,f,c
   329  0042E2  E1FD               	bnz	clear_2
   330  0042E4                     end_of_initialization:
   331                           	opt stack 0
   332  0042E4                     __end_of__initialization:
   333                           	opt stack 0
   334  0042E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  0042E6  6EF8               	movwf	tblptru,c
   336  0042E8  0100               	movlb	0
   337  0042EA  EFE0  F00F         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           prodh	equ	0xFF4
   343                           prodl	equ	0xFF3
   344                           intcon	equ	0xFF2
   345                           intcon2	equ	0xFF1
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           indf1	equ	0xFE7
   349                           fsr1h	equ	0xFE2
   350                           fsr1l	equ	0xFE1
   351                           indf2	equ	0xFDF
   352                           postinc2	equ	0xFDE
   353                           postdec2	equ	0xFDD
   354                           plusw2	equ	0xFDB
   355                           fsr2h	equ	0xFDA
   356                           fsr2l	equ	0xFD9
   357                           status	equ	0xFD8
   358                           
   359                           	psect	bssCOMRAM
   360  000052                     __pbssCOMRAM:
   361                           	opt stack 0
   362  000052                     _vscp_page_select:
   363                           	opt stack 0
   364  000052                     	ds	2
   365  000054                     __ECANRxFilterHitInfo:
   366                           	opt stack 0
   367  000054                     	ds	1
   368  000055                     _vscp_alarmstatus:
   369                           	opt stack 0
   370  000055                     	ds	1
   371  000056                     _vscp_initledfunc:
   372                           	opt stack 0
   373  000056                     	ds	1
   374  000057                     _vscp_probe_address:
   375                           	opt stack 0
   376  000057                     	ds	1
   377  000058                     _vscp_statuscnt:
   378                           	opt stack 0
   379  000058                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           prodh	equ	0xFF4
   385                           prodl	equ	0xFF3
   386                           intcon	equ	0xFF2
   387                           intcon2	equ	0xFF1
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           indf1	equ	0xFE7
   391                           fsr1h	equ	0xFE2
   392                           fsr1l	equ	0xFE1
   393                           indf2	equ	0xFDF
   394                           postinc2	equ	0xFDE
   395                           postdec2	equ	0xFDD
   396                           plusw2	equ	0xFDB
   397                           fsr2h	equ	0xFDA
   398                           fsr2l	equ	0xFD9
   399                           status	equ	0xFD8
   400                           
   401                           	psect	bssBANK0
   402  000060                     __pbssBANK0:
   403                           	opt stack 0
   404  000060                     _measurement_clock_10ms:
   405                           	opt stack 0
   406  000060                     	ds	4
   407  000064                     _measurement_clock_sec:
   408                           	opt stack 0
   409  000064                     	ds	4
   410  000068                     _channel_pulse_flags:
   411                           	opt stack 0
   412  000068                     	ds	2
   413  00006A                     _current_iostate:
   414                           	opt stack 0
   415  00006A                     	ds	2
   416  00006C                     _vscp_configtimer:
   417                           	opt stack 0
   418  00006C                     	ds	2
   419  00006E                     _vscp_timer:
   420                           	opt stack 0
   421  00006E                     	ds	2
   422  000070                     __IT_INT_MASK:
   423                           	opt stack 0
   424  000070                     	ds	1
   425  000071                     __IT_SAVE_BSR:
   426                           	opt stack 0
   427  000071                     	ds	1
   428  000072                     __IT_SAVE_STATUS:
   429                           	opt stack 0
   430  000072                     	ds	1
   431  000073                     __IT_SAVE_WREG:
   432                           	opt stack 0
   433  000073                     	ds	1
   434  000074                     ___DCByte:
   435                           	opt stack 0
   436  000074                     	ds	1
   437  000075                     _current_debounce:
   438                           	opt stack 0
   439  000075                     	ds	1
   440  000076                     _hours:
   441                           	opt stack 0
   442  000076                     	ds	1
   443  000077                     _minutes:
   444                           	opt stack 0
   445  000077                     	ds	1
   446  000078                     _seconds:
   447                           	opt stack 0
   448  000078                     	ds	1
   449  000079                     _sendTimer:
   450                           	opt stack 0
   451  000079                     	ds	1
   452  00007A                     _vscp_guid_reset:
   453                           	opt stack 0
   454  00007A                     	ds	1
   455  00007B                     _vscp_hour:
   456                           	opt stack 0
   457  00007B                     	ds	1
   458  00007C                     _vscp_initbtncnt:
   459                           	opt stack 0
   460  00007C                     	ds	1
   461  00007D                     _vscp_minute:
   462                           	opt stack 0
   463  00007D                     	ds	1
   464  00007E                     _vscp_nickname:
   465                           	opt stack 0
   466  00007E                     	ds	1
   467  00007F                     _vscp_node_state:
   468                           	opt stack 0
   469  00007F                     	ds	1
   470  000080                     _vscp_node_substate:
   471                           	opt stack 0
   472  000080                     	ds	1
   473  000081                     _vscp_probe_cnt:
   474                           	opt stack 0
   475  000081                     	ds	1
   476  000082                     _vscp_second:
   477                           	opt stack 0
   478  000082                     	ds	1
   479  000083                     _channel_protection_timer:
   480                           	opt stack 0
   481  000083                     	ds	20
   482  000097                     _vscp_imsg:
   483                           	opt stack 0
   484  000097                     	ds	14
   485  0000A5                     _vscp_omsg:
   486                           	opt stack 0
   487  0000A5                     	ds	13
   488  0000B2                     _debounce_cnt:
   489                           	opt stack 0
   490  0000B2                     	ds	10
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           prodh	equ	0xFF4
   496                           prodl	equ	0xFF3
   497                           intcon	equ	0xFF2
   498                           intcon2	equ	0xFF1
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           indf1	equ	0xFE7
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           indf2	equ	0xFDF
   505                           postinc2	equ	0xFDE
   506                           postdec2	equ	0xFDD
   507                           plusw2	equ	0xFDB
   508                           fsr2h	equ	0xFDA
   509                           fsr2l	equ	0xFD9
   510                           status	equ	0xFD8
   511                           
   512                           	psect	bssBANK1
   513  000100                     __pbssBANK1:
   514                           	opt stack 0
   515  000100                     _channel_pulse_timer:
   516                           	opt stack 0
   517  000100                     	ds	20
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           prodh	equ	0xFF4
   523                           prodl	equ	0xFF3
   524                           intcon	equ	0xFF2
   525                           intcon2	equ	0xFF1
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           indf1	equ	0xFE7
   529                           fsr1h	equ	0xFE2
   530                           fsr1l	equ	0xFE1
   531                           indf2	equ	0xFDF
   532                           postinc2	equ	0xFDE
   533                           postdec2	equ	0xFDD
   534                           plusw2	equ	0xFDB
   535                           fsr2h	equ	0xFDA
   536                           fsr2l	equ	0xFD9
   537                           status	equ	0xFD8
   538                           
   539                           	psect	cstackBANK1
   540  000114                     __pcstackBANK1:
   541                           	opt stack 0
   542  000114                     ??_main:
   543                           
   544                           ; 0 bytes @ 0x0
   545  000114                     	ds	2
   546  000116                     main@dir:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x2
   550  000116                     	ds	1
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           prodh	equ	0xFF4
   556                           prodl	equ	0xFF3
   557                           intcon	equ	0xFF2
   558                           intcon2	equ	0xFF1
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           indf1	equ	0xFE7
   562                           fsr1h	equ	0xFE2
   563                           fsr1l	equ	0xFE1
   564                           indf2	equ	0xFDF
   565                           postinc2	equ	0xFDE
   566                           postdec2	equ	0xFDD
   567                           plusw2	equ	0xFDB
   568                           fsr2h	equ	0xFDA
   569                           fsr2l	equ	0xFD9
   570                           status	equ	0xFD8
   571                           
   572                           	psect	cstackBANK0
   573  0000BC                     __pcstackBANK0:
   574                           	opt stack 0
   575  0000BC                     ??_sendVSCPFrame:
   576                           
   577                           ; 0 bytes @ 0x0
   578  0000BC                     	ds	20
   579  0000D0                     ?_SendInformationEvent:
   580                           	opt stack 0
   581  0000D0                     ?_vscp_sendHeartBeat:
   582                           	opt stack 0
   583  0000D0                     SendInformationEvent@eventClass:
   584                           	opt stack 0
   585  0000D0                     vscp_sendHeartBeat@subzone:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x14
   589  0000D0                     	ds	1
   590  0000D1                     SendInformationEvent@eventTypeId:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x15
   594  0000D1                     	ds	1
   595  0000D2                     ??_doApplicationOneSecondWork:
   596  0000D2                     ??_doActionPulseOn:
   597  0000D2                     ??_doActionPulseOff:
   598  0000D2                     ?_doActionStatusAll:
   599                           	opt stack 0
   600  0000D2                     ??_vscp_writeAppReg:
   601  0000D2                     doActionOn@ctrlreg:
   602                           	opt stack 0
   603  0000D2                     
   604                           ; 1 bytes @ 0x16
   605  0000D2                     	ds	1
   606  0000D3                     doActionOn@bEvent:
   607                           	opt stack 0
   608  0000D3                     doActionStatusAll@dmflags:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x17
   612  0000D3                     	ds	1
   613  0000D4                     doActionStatusAll@i:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x18
   617  0000D4                     	ds	3
   618  0000D7                     ??_doDM:
   619                           
   620                           ; 0 bytes @ 0x1B
   621  0000D7                     	ds	2
   622  0000D9                     vscp_writeAppReg@val_1273:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x1D
   626  0000D9                     	ds	1
   627  0000DA                     vscp_writeAppReg@bInfoEvent:
   628                           	opt stack 0
   629  0000DA                     doDM@class_filter:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x1E
   633  0000DA                     	ds	1
   634  0000DB                     vscp_writeAppReg@rv:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x1F
   638  0000DB                     	ds	1
   639  0000DC                     vscp_writeAppReg@bOn:
   640                           	opt stack 0
   641  0000DC                     doDM@class_mask:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x20
   645  0000DC                     	ds	1
   646  0000DD                     vscp_writeAppReg@reg:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x21
   650  0000DD                     	ds	1
   651  0000DE                     ?_vscp_writeRegister:
   652                           	opt stack 0
   653  0000DE                     doDM@type_filter:
   654                           	opt stack 0
   655  0000DE                     vscp_writeRegister@value:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x22
   659  0000DE                     	ds	1
   660  0000DF                     ??_vscp_handleProtocolEvent:
   661  0000DF                     doDM@type_mask:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x23
   665  0000DF                     	ds	1
   666  0000E0                     _doDM$2393:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x24
   670  0000E0                     	ds	1
   671  0000E1                     _doDM$2394:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x25
   675  0000E1                     	ds	1
   676  0000E2                     _doDM$2395:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x26
   680  0000E2                     	ds	1
   681  0000E3                     _doDM$2396:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x27
   685  0000E3                     	ds	1
   686  0000E4                     _doDM$2397:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x28
   690  0000E4                     	ds	1
   691  0000E5                     _doDM$2398:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x29
   695  0000E5                     	ds	1
   696  0000E6                     _doDM$2399:
   697                           	opt stack 0
   698  0000E6                     vscp_handleProtocolEvent@page_save:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x2A
   702  0000E6                     	ds	1
   703  0000E7                     doDM@dmflags:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x2B
   707  0000E7                     	ds	1
   708  0000E8                     doDM@i:
   709                           	opt stack 0
   710  0000E8                     vscp_handleProtocolEvent@page_save_1513:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x2C
   714  0000E8                     	ds	2
   715  0000EA                     vscp_handleProtocolEvent@offset:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x2E
   719  0000EA                     	ds	1
   720  0000EB                     vscp_handleProtocolEvent@pos:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2F
   724  0000EB                     	ds	1
   725  0000EC                     vscp_handleProtocolEvent@bytes:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x30
   729  0000EC                     	ds	1
   730  0000ED                     vscp_handleProtocolEvent@len:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x31
   734  0000ED                     	ds	1
   735  0000EE                     vscp_handleProtocolEvent@pos_1502:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x32
   739  0000EE                     	ds	1
   740  0000EF                     vscp_handleProtocolEvent@len_1503:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x33
   744  0000EF                     	ds	1
   745  0000F0                     vscp_handleProtocolEvent@bytes_this_time:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x34
   749  0000F0                     	ds	1
   750  0000F1                     vscp_handleProtocolEvent@cb:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x35
   754  0000F1                     	ds	1
   755  0000F2                     vscp_handleProtocolEvent@i_1512:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x36
   759  0000F2                     	ds	1
   760  0000F3                     vscp_handleProtocolEvent@k:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x37
   764  0000F3                     	ds	1
   765  0000F4                     vscp_handleProtocolEvent@i_1501:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x38
   769  0000F4                     	ds	1
   770  0000F5                     vscp_handleProtocolEvent@byte:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x39
   774  0000F5                     	ds	1
   775  0000F6                     doApplicationOneSecondWork@iodirections:
   776                           	opt stack 0
   777  0000F6                     vscp_handleProtocolEvent@bytes_1508:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x3A
   781  0000F6                     	ds	2
   782  0000F8                     vscp_handleProtocolEvent@i_1504:
   783                           	opt stack 0
   784  0000F8                     doApplicationOneSecondWork@data:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x3C
   788  0000F8                     	ds	1
   789  0000F9                     vscp_handleProtocolEvent@i:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x3D
   793  0000F9                     	ds	1
   794  0000FA                     vscp_handleProtocolEvent@j:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3E
   798  0000FA                     	ds	1
   799  0000FB                     doApplicationOneSecondWork@bInput:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3F
   803  0000FB                     	ds	1
   804  0000FC                     doApplicationOneSecondWork@bOn:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x40
   808  0000FC                     	ds	1
   809  0000FD                     doApplicationOneSecondWork@ctrlreg:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x41
   813  0000FD                     	ds	1
   814  0000FE                     doApplicationOneSecondWork@i:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x42
   818  0000FE                     	ds	1
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           prodh	equ	0xFF4
   824                           prodl	equ	0xFF3
   825                           intcon	equ	0xFF2
   826                           intcon2	equ	0xFF1
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           indf1	equ	0xFE7
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           indf2	equ	0xFDF
   833                           postinc2	equ	0xFDE
   834                           postdec2	equ	0xFDD
   835                           plusw2	equ	0xFDB
   836                           fsr2h	equ	0xFDA
   837                           fsr2l	equ	0xFD9
   838                           status	equ	0xFD8
   839                           
   840                           	psect	cstackCOMRAM
   841  000001                     __pcstackCOMRAM:
   842                           	opt stack 0
   843  000001                     ?i1_WriteTimer0:
   844                           	opt stack 0
   845  000001                     i1WriteTimer0@timer0:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x0
   849  000001                     	ds	2
   850  000003                     i1WriteTimer0@timer:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x2
   854  000003                     	ds	2
   855  000005                     ??_interrupt_at_low_vector:
   856                           
   857                           ; 0 bytes @ 0x4
   858  000005                     	ds	3
   859  000008                     ?__CANIDToRegs:
   860                           	opt stack 0
   861  000008                     ?__RegsToCANID:
   862                           	opt stack 0
   863  000008                     ?_WriteTimer0:
   864                           	opt stack 0
   865  000008                     ?_Write_b_eep:
   866                           	opt stack 0
   867  000008                     ??_vscp_getMDF_URL:
   868  000008                     ?_Read_b_eep:
   869                           	opt stack 0
   870  000008                     ?___lbmod:
   871                           	opt stack 0
   872  000008                     ?__ECANPointBuffer:
   873                           	opt stack 0
   874  000008                     ?_memset:
   875                           	opt stack 0
   876  000008                     ?_vscp_getFamilyCode:
   877                           	opt stack 0
   878  000008                     ?_vscp_getFamilyType:
   879                           	opt stack 0
   880  000008                     ECANSetOperationMode@mode:
   881                           	opt stack 0
   882  000008                     vscp_getMatrixInfo@i:
   883                           	opt stack 0
   884  000008                     OpenTimer0@config:
   885                           	opt stack 0
   886  000008                     ___lbmod@divisor:
   887                           	opt stack 0
   888  000008                     __CANIDToRegs@ptr:
   889                           	opt stack 0
   890  000008                     __RegsToCANID@ptr:
   891                           	opt stack 0
   892  000008                     Read_b_eep@badd:
   893                           	opt stack 0
   894  000008                     Write_b_eep@badd:
   895                           	opt stack 0
   896  000008                     WriteTimer0@timer0:
   897                           	opt stack 0
   898  000008                     memset@p1:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x7
   902  000008                     	ds	1
   903  000009                     vscp_getMDF_URL@idx:
   904                           	opt stack 0
   905  000009                     ___lbmod@dividend:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x8
   909  000009                     	ds	1
   910  00000A                     ??_vscp_readAppReg:
   911  00000A                     __RegsToCANID@val:
   912                           	opt stack 0
   913  00000A                     vscp_getGUID@idx:
   914                           	opt stack 0
   915  00000A                     vscp_getUserID@idx:
   916                           	opt stack 0
   917  00000A                     vscp_getManufacturerId@idx:
   918                           	opt stack 0
   919  00000A                     Write_b_eep@bdat:
   920                           	opt stack 0
   921  00000A                     ___lbmod@counter:
   922                           	opt stack 0
   923  00000A                     WriteTimer0@timer:
   924                           	opt stack 0
   925  00000A                     memset@c:
   926                           	opt stack 0
   927  00000A                     __CANIDToRegs@val:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x9
   931  00000A                     	ds	1
   932  00000B                     __RegsToCANID@type:
   933                           	opt stack 0
   934  00000B                     __ECANPointBuffer@b:
   935                           	opt stack 0
   936  00000B                     Write_b_eep@GIE_BIT_VAL:
   937                           	opt stack 0
   938  00000B                     ___lbmod@rem:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0xA
   942  00000B                     	ds	1
   943  00000C                     ??__RegsToCANID:
   944  00000C                     ??_init_app_eeprom:
   945  00000C                     ??_vscp_readStdReg:
   946  00000C                     ?_vscp_setGUID:
   947                           	opt stack 0
   948  00000C                     ?_vscp_setManufacturerId:
   949                           	opt stack 0
   950  00000C                     ?_vscp_setUserID:
   951                           	opt stack 0
   952  00000C                     vscp_setGUID@data:
   953                           	opt stack 0
   954  00000C                     vscp_setManufacturerId@data:
   955                           	opt stack 0
   956  00000C                     vscp_writeNicknamePermanent@nickname:
   957                           	opt stack 0
   958  00000C                     vscp_setUserID@data:
   959                           	opt stack 0
   960  00000C                     vscp_setSegmentCRC@crc:
   961                           	opt stack 0
   962  00000C                     vscp_setControlByte@ctrl:
   963                           	opt stack 0
   964  00000C                     vscp_goBootloaderMode@algorithm:
   965                           	opt stack 0
   966  00000C                     __ECANPointBuffer@pt:
   967                           	opt stack 0
   968  00000C                     memset@n:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0xB
   972  00000C                     	ds	1
   973  00000D                     vscp_setGUID@idx:
   974                           	opt stack 0
   975  00000D                     vscp_setManufacturerId@idx:
   976                           	opt stack 0
   977  00000D                     vscp_setUserID@idx:
   978                           	opt stack 0
   979  00000D                     vscp_handleDropNickname@bytes:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0xC
   983  00000D                     	ds	1
   984  00000E                     __CANIDToRegs@type:
   985                           	opt stack 0
   986  00000E                     __RegsToCANID@Value:
   987                           	opt stack 0
   988  00000E                     init_app_eeprom@j:
   989                           	opt stack 0
   990  00000E                     memset@p:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xD
   994  00000E                     	ds	1
   995  00000F                     ??__CANIDToRegs:
   996  00000F                     ?_ECANReceiveMessage:
   997                           	opt stack 0
   998  00000F                     ECANReceiveMessage@data:
   999                           	opt stack 0
  1000  00000F                     init_app_eeprom@i:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0xE
  1004  00000F                     	ds	1
  1005  000010                     ??_init_app_ram:
  1006  000010                     ECANReceiveMessage@dataLen:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0xF
  1010  000010                     	ds	1
  1011  000011                     ECANReceiveMessage@msgFlags:
  1012                           	opt stack 0
  1013  000011                     __CANIDToRegs@Value:
  1014                           	opt stack 0
  1015  000011                     vscp_readAppReg@rv:
  1016                           	opt stack 0
  1017  000011                     vscp_readStdReg@code:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x10
  1021  000011                     	ds	1
  1022  000012                     ??_calculateSetFilterMask:
  1023  000012                     ?_ECANSendMessage:
  1024                           	opt stack 0
  1025  000012                     ECANReceiveMessage@id:
  1026                           	opt stack 0
  1027  000012                     vscp_readAppReg@reg:
  1028                           	opt stack 0
  1029  000012                     ECANSendMessage@id:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x11
  1033  000012                     	ds	1
  1034  000013                     ECANReceiveMessage@savedPtr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x12
  1038  000013                     	ds	2
  1039  000015                     ECANReceiveMessage@i:
  1040                           	opt stack 0
  1041  000015                     vscp_readStdReg@code_1486:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x14
  1045  000015                     	ds	1
  1046  000016                     ECANReceiveMessage@mode:
  1047                           	opt stack 0
  1048  000016                     ECANSendMessage@data:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x15
  1052  000016                     	ds	1
  1053  000017                     ECANReceiveMessage@temp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x16
  1057  000017                     	ds	1
  1058  000018                     ECANSendMessage@dataLen:
  1059                           	opt stack 0
  1060  000018                     ECANReceiveMessage@ptr:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x17
  1064  000018                     	ds	1
  1065  000019                     ECANSendMessage@msgFlags:
  1066                           	opt stack 0
  1067  000019                     vscp_readStdReg@idx:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x18
  1071  000019                     	ds	1
  1072  00001A                     ??_ECANSendMessage:
  1073  00001A                     ?_getCANFrame:
  1074                           	opt stack 0
  1075  00001A                     getCANFrame@pdlc:
  1076                           	opt stack 0
  1077  00001A                     vscp_readStdReg@idx_1487:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x19
  1081  00001A                     	ds	1
  1082  00001B                     getCANFrame@pdata:
  1083                           	opt stack 0
  1084  00001B                     vscp_readStdReg@rv:
  1085                           	opt stack 0
  1086  00001B                     ECANSendMessage@pb:
  1087                           	opt stack 0
  1088                           
  1089                           ; 18 bytes @ 0x1A
  1090  00001B                     	ds	1
  1091  00001C                     getCANFrame@pid:
  1092                           	opt stack 0
  1093  00001C                     vscp_readStdReg@reg:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x1B
  1097  00001C                     	ds	1
  1098  00001D                     getCANFrame@flags:
  1099                           	opt stack 0
  1100  00001D                     vscp_readRegister@reg:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x1C
  1104  00001D                     	ds	1
  1105  00001E                     ?_getVSCPFrame:
  1106                           	opt stack 0
  1107  00001E                     getVSCPFrame@pvscptype:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x1D
  1111  00001E                     	ds	1
  1112  00001F                     getVSCPFrame@pNodeId:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x1E
  1116  00001F                     	ds	1
  1117  000020                     getVSCPFrame@pPriority:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x1F
  1121  000020                     	ds	1
  1122  000021                     getVSCPFrame@pSize:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x20
  1126  000021                     	ds	1
  1127  000022                     getVSCPFrame@pData:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x21
  1131  000022                     	ds	1
  1132  000023                     ??_getVSCPFrame:
  1133                           
  1134                           ; 0 bytes @ 0x22
  1135  000023                     	ds	4
  1136  000027                     getVSCPFrame@pvscpclass:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x26
  1140  000027                     	ds	1
  1141  000028                     getVSCPFrame@id:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x27
  1145  000028                     	ds	4
  1146  00002C                     vscp_getEvent@rv:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x2B
  1150  00002C                     	ds	1
  1151  00002D                     ECANSendMessage@mode:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x2C
  1155  00002D                     	ds	1
  1156  00002E                     ECANSendMessage@buffers:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x2D
  1160  00002E                     	ds	1
  1161  00002F                     ECANSendMessage@j:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x2E
  1165  00002F                     	ds	1
  1166  000030                     ECANSendMessage@tempBSEL0:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x2F
  1170  000030                     	ds	1
  1171  000031                     ECANSendMessage@tempPtr:
  1172                           	opt stack 0
  1173  000031                     calculateSetFilterMask@rowmask:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x30
  1177  000031                     	ds	2
  1178  000033                     ECANSendMessage@temp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x32
  1182  000033                     	ds	1
  1183  000034                     ECANSendMessage@i:
  1184                           	opt stack 0
  1185  000034                     init_app_ram@dir:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x33
  1189  000034                     	ds	1
  1190  000035                     init_app_ram@i:
  1191                           	opt stack 0
  1192  000035                     calculateSetFilterMask@lastOID:
  1193                           	opt stack 0
  1194  000035                     ECANSendMessage@ptr:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x34
  1198  000035                     	ds	1
  1199  000036                     ?_vscp_writeStdReg:
  1200                           	opt stack 0
  1201  000036                     vscp_writeStdReg@value:
  1202                           	opt stack 0
  1203  000036                     calculateSetFilterMask@mask:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x35
  1207  000036                     	ds	1
  1208  000037                     ??_vscp_writeStdReg:
  1209  000037                     ?_sendCANFrame:
  1210                           	opt stack 0
  1211  000037                     sendCANFrame@id:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x36
  1215  000037                     	ds	3
  1216  00003A                     calculateSetFilterMask@filter:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x39
  1220  00003A                     	ds	1
  1221  00003B                     sendCANFrame@dlc:
  1222                           	opt stack 0
  1223  00003B                     vscp_writeStdReg@rv:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x3A
  1227  00003B                     	ds	1
  1228  00003C                     vscp_writeStdReg@reg:
  1229                           	opt stack 0
  1230  00003C                     sendCANFrame@pdata:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x3B
  1234  00003C                     	ds	2
  1235  00003E                     sendCANFrame@rv:
  1236                           	opt stack 0
  1237  00003E                     calculateSetFilterMask@rowfilter:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x3D
  1241  00003E                     	ds	1
  1242  00003F                     ?_sendVSCPFrame:
  1243                           	opt stack 0
  1244  00003F                     sendVSCPFrame@vscpclass:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x3E
  1248  00003F                     	ds	2
  1249  000041                     sendVSCPFrame@vscptype:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x40
  1253  000041                     	ds	1
  1254  000042                     sendVSCPFrame@nodeid:
  1255                           	opt stack 0
  1256  000042                     calculateSetFilterMask@j:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x41
  1260  000042                     	ds	1
  1261  000043                     sendVSCPFrame@priority:
  1262                           	opt stack 0
  1263  000043                     calculateSetFilterMask@i:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x42
  1267  000043                     	ds	1
  1268  000044                     sendVSCPFrame@size:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x43
  1272  000044                     	ds	1
  1273  000045                     sendVSCPFrame@pData:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x44
  1277  000045                     	ds	2
  1278  000047                     sendVSCPFrame@id:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x46
  1282  000047                     	ds	4
  1283  00004B                     SendInformationEvent@data:
  1284                           	opt stack 0
  1285                           
  1286                           ; 3 bytes @ 0x4A
  1287  00004B                     	ds	1
  1288  00004C                     ??_vscp_newNodeOnline:
  1289  00004C                     vscp_sendHeartBeat@zone:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x4B
  1293  00004C                     	ds	1
  1294  00004D                     ??_vscp_doOneSecondWork:
  1295                           
  1296                           ; 0 bytes @ 0x4C
  1297  00004D                     	ds	1
  1298  00004E                     SendInformationEvent@idx:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x4D
  1302  00004E                     	ds	1
  1303  00004F                     ?_doActionOff:
  1304                           	opt stack 0
  1305  00004F                     ?_doActionOn:
  1306                           	opt stack 0
  1307  00004F                     ?_doActionPulseOn:
  1308                           	opt stack 0
  1309  00004F                     ?_doActionPulseOff:
  1310                           	opt stack 0
  1311  00004F                     ?_doActionStatus:
  1312                           	opt stack 0
  1313  00004F                     ?_doActionToggle:
  1314                           	opt stack 0
  1315  00004F                     ?_vscp_writeAppReg:
  1316                           	opt stack 0
  1317  00004F                     vscp_writeAppReg@val:
  1318                           	opt stack 0
  1319  00004F                     doActionOn@arg:
  1320                           	opt stack 0
  1321  00004F                     doActionOff@arg:
  1322                           	opt stack 0
  1323  00004F                     doActionPulseOn@arg:
  1324                           	opt stack 0
  1325  00004F                     doActionPulseOff@arg:
  1326                           	opt stack 0
  1327  00004F                     doActionToggle@arg:
  1328                           	opt stack 0
  1329  00004F                     doActionStatus@arg:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x4E
  1333  00004F                     	ds	1
  1334  000050                     ??_doActionOn:
  1335  000050                     doActionOff@ctrlreg:
  1336                           	opt stack 0
  1337  000050                     doActionPulseOn@ctrlreg:
  1338                           	opt stack 0
  1339  000050                     doActionPulseOff@ctrlreg:
  1340                           	opt stack 0
  1341  000050                     doActionToggle@ctrlreg:
  1342                           	opt stack 0
  1343  000050                     doActionStatus@ctrlreg:
  1344                           	opt stack 0
  1345  000050                     vscp_writeRegister@reg:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x4F
  1349  000050                     	ds	1
  1350  000051                     doActionOff@bEvent:
  1351                           	opt stack 0
  1352  000051                     doActionPulseOn@bEvent:
  1353                           	opt stack 0
  1354  000051                     doActionPulseOff@bEvent:
  1355                           	opt stack 0
  1356  000051                     doActionToggle@bOn:
  1357                           	opt stack 0
  1358  000051                     doActionStatus@bOn:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x50
  1362  000051                     	ds	1
  1363  000052                     tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           intcon	equ	0xFF2
  1370                           intcon2	equ	0xFF1
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           indf1	equ	0xFE7
  1374                           fsr1h	equ	0xFE2
  1375                           fsr1l	equ	0xFE1
  1376                           indf2	equ	0xFDF
  1377                           postinc2	equ	0xFDE
  1378                           postdec2	equ	0xFDD
  1379                           plusw2	equ	0xFDB
  1380                           fsr2h	equ	0xFDA
  1381                           fsr2l	equ	0xFD9
  1382                           status	equ	0xFD8
  1383                           
  1384                           ; 0 bytes @ 0x51
  1385 ;;
  1386 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1387 ;;
  1388 ;; *************** function _main *****************
  1389 ;; Defined at:
  1390 ;;		line 199 in file "../main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  dir             1    2[BANK1 ] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;		None               void
  1397 ;; Registers used:
  1398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : F/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1404 ;;      Params:         0       0       0       0       0       0       0
  1405 ;;      Locals:         0       0       1       0       0       0       0
  1406 ;;      Temps:          0       0       2       0       0       0       0
  1407 ;;      Totals:         0       0       3       0       0       0       0
  1408 ;;Total ram usage:        3 bytes
  1409 ;; Hardware stack levels required when called:   10
  1410 ;; This function calls:
  1411 ;;		_init
  1412 ;;		_vscp_check_pstorage
  1413 ;;		_init_app_eeprom
  1414 ;;		_init_app_ram
  1415 ;;		_vscp_init
  1416 ;;		_Busy_eep
  1417 ;;		_Write_b_eep
  1418 ;;		_vscp_getEvent
  1419 ;;		_vscp_goActiveState
  1420 ;;		_vscp_handleProbeState
  1421 ;;		_vscp_handleProtocolEvent
  1422 ;;		_Read_b_eep
  1423 ;;		_SendInformationEvent
  1424 ;;		_doDM
  1425 ;;		_vscp_error
  1426 ;;		_vscp_doOneSecondWork
  1427 ;;		_doApplicationOneSecondWork
  1428 ;;		_doWork
  1429 ;; This function is called by:
  1430 ;;		Startup code after reset
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text0
  1435  001FC0                     __ptext0:
  1436                           	opt stack 0
  1437  001FC0                     _main:
  1438                           	opt stack 20
  1439                           
  1440                           ;main.c: 201: init();
  1441                           
  1442                           ;incstack = 0
  1443                           ;incstack = 0
  1444  001FC0  ECCC  F020         	call	_init	;wreg free
  1445                           
  1446                           ;main.c: 205: if ( !vscp_check_pstorage() ) {
  1447  001FC4  EC3F  F022         	call	_vscp_check_pstorage	;wreg free
  1448  001FC8  0900               	iorlw	0
  1449  001FCA  B4D8               	btfsc	status,2,c
  1450                           
  1451                           ;main.c: 208: init_app_eeprom();
  1452  001FCC  EC97  F019         	call	_init_app_eeprom	;wreg free
  1453                           
  1454                           ;main.c: 210: }
  1455                           ;main.c: 213: init_app_ram();
  1456  001FD0  ECC2  F013         	call	_init_app_ram	;wreg free
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 216: vscp_init();
  1460  001FD4  ECAA  F020         	call	_vscp_init	;wreg free
  1461  001FD8                     l425:
  1462                           
  1463                           ; BSR set to: 0
  1464  001FD8  0004               	clrwdt		;# 
  1465                           
  1466                           ;main.c: 222: if ( ( vscp_initbtncnt > 250 ) &&
  1467                           ;main.c: 223: ( 0x01 != vscp_node_state ) ) {
  1468  001FDA  0EFA               	movlw	250
  1469  001FDC  0100               	movlb	0	; () banked
  1470  001FDE  657C               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1471  001FE0  D00E               	goto	l12453
  1472                           
  1473                           ; BSR set to: 0
  1474  001FE2  057F               	decf	_vscp_node_state& (0+255),w,b
  1475  001FE4  E00C               	bz	l12453
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;main.c: 226: vscp_nickname = 0xff;
  1479  001FE6  697E               	setf	_vscp_nickname& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;main.c: 227: (Busy_eep(), Write_b_eep(0x01,0xff));
  1483  001FE8  EC5B  F023         	call	_Busy_eep	;wreg free
  1484  001FEC  6A09               	clrf	?_Write_b_eep+1,c
  1485  001FEE  0E01               	movlw	1
  1486  001FF0  6E08               	movwf	?_Write_b_eep,c
  1487  001FF2  0EFF               	movlw	255
  1488  001FF4  680A               	setf	?_Write_b_eep+2,c
  1489  001FF6  EC2E  F021         	call	_Write_b_eep	;wreg free
  1490                           
  1491                           ;main.c: 228: vscp_init();
  1492  001FFA  ECAA  F020         	call	_vscp_init	;wreg free
  1493  001FFE                     l12453:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 230: }
  1497                           ;main.c: 233: vscp_imsg.flags = 0;
  1498  001FFE  6B97               	clrf	_vscp_imsg& (0+255),b
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 234: vscp_getEvent();
  1502  002000  ECB8  F021         	call	_vscp_getEvent	;wreg free
  1503                           
  1504                           ;main.c: 236: switch ( vscp_node_state ) {
  1505  002004  D198               	goto	l12617
  1506  002006                     l12457:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 241: if (0xff == vscp_nickname) {
  1510  002006  297E               	incf	_vscp_nickname& (0+255),w,b
  1511  002008  E103               	bnz	l12461
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 243: vscp_node_state = 0x01;
  1515  00200A  0E01               	movlw	1
  1516  00200C  6F7F               	movwf	_vscp_node_state& (0+255),b
  1517                           
  1518                           ;main.c: 244: }
  1519  00200E  D1A3               	goto	l12619
  1520  002010                     l12461:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;main.c: 245: else {
  1524                           ;main.c: 247: vscp_node_state = 0x03;
  1525  002010  0E03               	movlw	3
  1526  002012  6F7F               	movwf	_vscp_node_state& (0+255),b
  1527  002014                     l12463:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 248: vscp_goActiveState();
  1531  002014  EC72  F022         	call	_vscp_goActiveState	;wreg free
  1532  002018  D19E               	goto	l12619
  1533  00201A                     l12465:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 253: vscp_handleProbeState();
  1537  00201A  ECE0  F01E         	call	_vscp_handleProbeState	;wreg free
  1538                           
  1539                           ;main.c: 254: break;
  1540  00201E  D19B               	goto	l12619
  1541  002020                     l434:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 263: if (vscp_imsg.flags & 0x80) {
  1545  002020  AF97               	btfss	_vscp_imsg& (0+255),7,b
  1546  002022  D199               	goto	l12619
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 265: if ( 0 == vscp_imsg.vscp_class ) {
  1550  002024  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  1551  002026  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1552  002028  E103               	bnz	l12473
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;main.c: 268: vscp_handleProtocolEvent();
  1556  00202A  ECD4  F00C         	call	_vscp_handleProtocolEvent	;wreg free
  1557                           
  1558                           ;main.c: 270: }
  1559  00202E  D193               	goto	l12619
  1560  002030                     l12473:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 271: else {
  1564                           ;main.c: 273: if ( measurement_clock_10ms >= 10 ) {
  1565  002030  0E0A               	movlw	10
  1566  002032  5D60               	subwf	_measurement_clock_10ms& (0+255),w,b	;volatile
  1567  002034  0E00               	movlw	0
  1568  002036  5961               	subwfb	(_measurement_clock_10ms+1)& (0+255),w,b	;volatile
  1569  002038  0E00               	movlw	0
  1570  00203A  5962               	subwfb	(_measurement_clock_10ms+2)& (0+255),w,b	;volatile
  1571  00203C  0E00               	movlw	0
  1572  00203E  5963               	subwfb	(_measurement_clock_10ms+3)& (0+255),w,b	;volatile
  1573  002040  E201 D171          	bnc	l12611
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 275: uint8_t dir = Read_b_eep(0x43 + 12) << 8 +
  1577                           ;main.c: 277: Read_b_eep(0x43 + 13);
  1578  002044  6A09               	clrf	?_Read_b_eep+1,c
  1579  002046  0E50               	movlw	80
  1580  002048  6E08               	movwf	?_Read_b_eep,c
  1581  00204A  EC27  F023         	call	_Read_b_eep	;wreg free
  1582  00204E  0101               	movlb	1	; () banked
  1583  002050  6F14               	movwf	??_main& (0+255),b
  1584  002052  0E08               	movlw	8
  1585  002054  2714               	addwf	??_main& (0+255),f,b
  1586  002056  6A09               	clrf	?_Read_b_eep+1,c
  1587  002058  0E4F               	movlw	79
  1588  00205A  6E08               	movwf	?_Read_b_eep,c
  1589  00205C  EC27  F023         	call	_Read_b_eep	;wreg free
  1590  002060  0101               	movlb	1	; () banked
  1591  002062  6F15               	movwf	(??_main+1)& (0+255),b
  1592  002064  2B14               	incf	??_main& (0+255),f,b
  1593  002066  D002               	goto	u16084
  1594  002068                     u16085:
  1595  002068  90D8               	bcf	status,0,c
  1596  00206A  3715               	rlcf	(??_main+1)& (0+255),f,b
  1597  00206C                     u16084:
  1598  00206C  2F14               	decfsz	??_main& (0+255),f,b
  1599  00206E  D7FC               	goto	u16085
  1600  002070  5115               	movf	(??_main+1)& (0+255),w,b
  1601  002072  6F16               	movwf	main@dir& (0+255),b
  1602                           
  1603                           ; BSR set to: 1
  1604                           ;main.c: 280: measurement_clock_10ms = 0;
  1605  002074  0100               	movlb	0	; () banked
  1606  002076  6B60               	clrf	_measurement_clock_10ms& (0+255),b	;volatile
  1607  002078  6B61               	clrf	(_measurement_clock_10ms+1)& (0+255),b	;volatile
  1608  00207A  6B62               	clrf	(_measurement_clock_10ms+2)& (0+255),b	;volatile
  1609  00207C  6B63               	clrf	(_measurement_clock_10ms+3)& (0+255),b	;volatile
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 282: if ( ( dir & ( 1 << current_debounce ) ) &&
  1613                           ;main.c: 283: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1614                           ;main.c: 286: 0x40 ) &&
  1615                           ;main.c: 287: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1616                           ;main.c: 290: 0x80 ) ) {
  1617  00207E  C075  F114         	movff	_current_debounce,??_main
  1618  002082  0E01               	movlw	1
  1619  002084  0101               	movlb	1	; () banked
  1620  002086  6F15               	movwf	(??_main+1)& (0+255),b
  1621  002088  2B14               	incf	??_main& (0+255),f,b
  1622  00208A  D002               	goto	u16094
  1623  00208C                     u16095:
  1624  00208C  90D8               	bcf	status,0,c
  1625  00208E  3715               	rlcf	(??_main+1)& (0+255),f,b
  1626  002090                     u16094:
  1627  002090  2F14               	decfsz	??_main& (0+255),f,b
  1628  002092  D7FC               	goto	u16095
  1629  002094  5115               	movf	(??_main+1)& (0+255),w,b
  1630  002096  1516               	andwf	main@dir& (0+255),w,b
  1631  002098  E101 D145          	bz	l12611
  1632                           
  1633                           ; BSR set to: 1
  1634  00209C  0E65               	movlw	101
  1635  00209E  D99D               	call	PL98	;call to abstracted procedure
  1636  0020A0  EC27  F023         	call	_Read_b_eep	;wreg free
  1637  0020A4  0101               	movlb	1	; () banked
  1638  0020A6  6F14               	movwf	??_main& (0+255),b
  1639  0020A8  AD14               	btfss	??_main& (0+255),6,b
  1640  0020AA  D13D               	goto	l12611
  1641                           
  1642                           ; BSR set to: 1
  1643  0020AC  0E65               	movlw	101
  1644  0020AE  D995               	call	PL98	;call to abstracted procedure
  1645  0020B0  EC27  F023         	call	_Read_b_eep	;wreg free
  1646  0020B4  0101               	movlb	1	; () banked
  1647  0020B6  6F14               	movwf	??_main& (0+255),b
  1648  0020B8  BF14               	btfsc	??_main& (0+255),7,b
  1649  0020BA  D118               	goto	l12609
  1650  0020BC  D134               	goto	l12611
  1651  0020BE                     l441:
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 294: if ( !PORTBbits.RB0 ) {
  1655  0020BE  B081               	btfsc	3969,0,c	;volatile
  1656  0020C0  D019               	goto	l12497
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;main.c: 295: debounce_cnt[ current_debounce ]++;
  1660  0020C2  5175               	movf	_current_debounce& (0+255),w,b
  1661                           
  1662                           ;main.c: 296: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1663  0020C4  D97A               	call	PL8	;call to abstracted procedure
  1664  0020C6  64DF               	cpfsgt	indf2,c
  1665  0020C8  D12E               	goto	l12611
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 298: debounce_cnt[ current_debounce ] = 0;
  1669  0020CA  5175               	movf	_current_debounce& (0+255),w,b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 301: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1673                           ;main.c: 304: 0x04 ) {
  1674  0020CC  D96B               	call	PL4	;call to abstracted procedure
  1675  0020CE  EC27  F023         	call	_Read_b_eep	;wreg free
  1676  0020D2  0101               	movlb	1	; () banked
  1677  0020D4  6F14               	movwf	??_main& (0+255),b
  1678  0020D6  A514               	btfss	??_main& (0+255),2,b
  1679  0020D8  D009               	goto	l12495
  1680                           
  1681                           ; BSR set to: 1
  1682                           ;main.c: 305: SendInformationEvent( current_debounce,
  1683                           ;main.c: 306: 20,
  1684                           ;main.c: 307: 3 );
  1685  0020DA  0E14               	movlw	20
  1686  0020DC  0100               	movlb	0	; () banked
  1687  0020DE  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1688  0020E0  0E03               	movlw	3
  1689  0020E2  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1690  0020E4  5175               	movf	_current_debounce& (0+255),w,b
  1691  0020E6  EC5A  F020         	call	_SendInformationEvent
  1692                           
  1693                           ;main.c: 308: }
  1694  0020EA  D11D               	goto	l12611
  1695  0020EC                     l12495:
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;main.c: 309: else {
  1699                           ;main.c: 310: SendInformationEvent( current_debounce,
  1700                           ;main.c: 311: 30,
  1701                           ;main.c: 312: 5 );
  1702  0020EC  D96F               	call	PL18	;call to abstracted procedure
  1703  0020EE  EC5A  F020         	call	_SendInformationEvent
  1704  0020F2  D119               	goto	l12611
  1705  0020F4                     l12497:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 316: else {
  1709                           ;main.c: 317: debounce_cnt[ current_debounce ] = 0;
  1710  0020F4  5175               	movf	_current_debounce& (0+255),w,b
  1711  0020F6  0FB2               	addlw	low _debounce_cnt
  1712  0020F8  6ED9               	movwf	fsr2l,c
  1713  0020FA  6ADA               	clrf	fsr2h,c
  1714  0020FC  0E00               	movlw	0
  1715  0020FE  6ADF               	clrf	indf2,c
  1716  002100  D112               	goto	l12611
  1717  002102                     l448:
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 322: if ( !PORTBbits.RB1 ) {
  1721  002102  B281               	btfsc	3969,1,c	;volatile
  1722  002104  D7F7               	goto	l12497
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 323: debounce_cnt[ current_debounce ]++;
  1726  002106  5175               	movf	_current_debounce& (0+255),w,b
  1727                           
  1728                           ;main.c: 324: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1729  002108  D958               	call	PL8	;call to abstracted procedure
  1730  00210A  64DF               	cpfsgt	indf2,c
  1731  00210C  D10C               	goto	l12611
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 326: debounce_cnt[ current_debounce ] = 0;
  1735  00210E  5175               	movf	_current_debounce& (0+255),w,b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 329: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1739                           ;main.c: 332: 0x04 ) {
  1740  002110  D949               	call	PL4	;call to abstracted procedure
  1741  002112  EC27  F023         	call	_Read_b_eep	;wreg free
  1742  002116  0101               	movlb	1	; () banked
  1743  002118  6F14               	movwf	??_main& (0+255),b
  1744  00211A  A514               	btfss	??_main& (0+255),2,b
  1745  00211C  D009               	goto	l12507
  1746                           
  1747                           ; BSR set to: 1
  1748                           ;main.c: 333: SendInformationEvent( current_debounce,
  1749                           ;main.c: 334: 20,
  1750                           ;main.c: 335: 3 );
  1751  00211E  0E14               	movlw	20
  1752  002120  0100               	movlb	0	; () banked
  1753  002122  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1754  002124  0E03               	movlw	3
  1755  002126  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1756  002128  5175               	movf	_current_debounce& (0+255),w,b
  1757  00212A  EC5A  F020         	call	_SendInformationEvent
  1758                           
  1759                           ;main.c: 336: }
  1760  00212E  D0FB               	goto	l12611
  1761  002130                     l12507:
  1762                           
  1763                           ; BSR set to: 1
  1764                           ;main.c: 337: else {
  1765                           ;main.c: 338: SendInformationEvent( current_debounce,
  1766                           ;main.c: 339: 30,
  1767                           ;main.c: 340: 5 );
  1768  002130  D94D               	call	PL18	;call to abstracted procedure
  1769  002132  EC5A  F020         	call	_SendInformationEvent
  1770  002136  D0F7               	goto	l12611
  1771  002138                     l454:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 350: if ( !PORTCbits.RC3 ) {
  1775  002138  B682               	btfsc	3970,3,c	;volatile
  1776  00213A  D7DC               	goto	l12497
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 351: debounce_cnt[ current_debounce ]++;
  1780  00213C  5175               	movf	_current_debounce& (0+255),w,b
  1781                           
  1782                           ;main.c: 352: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1783  00213E  D93D               	call	PL8	;call to abstracted procedure
  1784  002140  64DF               	cpfsgt	indf2,c
  1785  002142  D0F1               	goto	l12611
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 354: debounce_cnt[ current_debounce ] = 0;
  1789  002144  5175               	movf	_current_debounce& (0+255),w,b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 357: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1793                           ;main.c: 360: 0x04 ) {
  1794  002146  D92E               	call	PL4	;call to abstracted procedure
  1795  002148  EC27  F023         	call	_Read_b_eep	;wreg free
  1796  00214C  0101               	movlb	1	; () banked
  1797  00214E  6F14               	movwf	??_main& (0+255),b
  1798  002150  A514               	btfss	??_main& (0+255),2,b
  1799  002152  D009               	goto	l12519
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 361: SendInformationEvent( current_debounce,
  1803                           ;main.c: 362: 20,
  1804                           ;main.c: 363: 3 );
  1805  002154  0E14               	movlw	20
  1806  002156  0100               	movlb	0	; () banked
  1807  002158  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1808  00215A  0E03               	movlw	3
  1809  00215C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1810  00215E  5175               	movf	_current_debounce& (0+255),w,b
  1811  002160  EC5A  F020         	call	_SendInformationEvent
  1812                           
  1813                           ;main.c: 364: }
  1814  002164  D0E0               	goto	l12611
  1815  002166                     l12519:
  1816                           
  1817                           ; BSR set to: 1
  1818                           ;main.c: 365: else {
  1819                           ;main.c: 366: SendInformationEvent( current_debounce,
  1820                           ;main.c: 367: 30,
  1821                           ;main.c: 368: 5 );
  1822  002166  D932               	call	PL18	;call to abstracted procedure
  1823  002168  EC5A  F020         	call	_SendInformationEvent
  1824  00216C  D0DC               	goto	l12611
  1825  00216E                     l460:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 378: if ( !PORTCbits.RC4 ) {
  1829  00216E  B882               	btfsc	3970,4,c	;volatile
  1830  002170  D7C1               	goto	l12497
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 379: debounce_cnt[ current_debounce ]++;
  1834  002172  5175               	movf	_current_debounce& (0+255),w,b
  1835                           
  1836                           ;main.c: 380: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1837  002174  D922               	call	PL8	;call to abstracted procedure
  1838  002176  64DF               	cpfsgt	indf2,c
  1839  002178  D0D6               	goto	l12611
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 382: debounce_cnt[ current_debounce ] = 0;
  1843  00217A  5175               	movf	_current_debounce& (0+255),w,b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 385: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1847                           ;main.c: 388: 0x04 ) {
  1848  00217C  D913               	call	PL4	;call to abstracted procedure
  1849  00217E  EC27  F023         	call	_Read_b_eep	;wreg free
  1850  002182  0101               	movlb	1	; () banked
  1851  002184  6F14               	movwf	??_main& (0+255),b
  1852  002186  A514               	btfss	??_main& (0+255),2,b
  1853  002188  D009               	goto	l12531
  1854                           
  1855                           ; BSR set to: 1
  1856                           ;main.c: 389: SendInformationEvent( current_debounce,
  1857                           ;main.c: 390: 20,
  1858                           ;main.c: 391: 3 );
  1859  00218A  0E14               	movlw	20
  1860  00218C  0100               	movlb	0	; () banked
  1861  00218E  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1862  002190  0E03               	movlw	3
  1863  002192  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1864  002194  5175               	movf	_current_debounce& (0+255),w,b
  1865  002196  EC5A  F020         	call	_SendInformationEvent
  1866                           
  1867                           ;main.c: 392: }
  1868  00219A  D0C5               	goto	l12611
  1869  00219C                     l12531:
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;main.c: 393: else {
  1873                           ;main.c: 394: SendInformationEvent( current_debounce,
  1874                           ;main.c: 395: 30,
  1875                           ;main.c: 396: 5 );
  1876  00219C  D917               	call	PL18	;call to abstracted procedure
  1877  00219E  EC5A  F020         	call	_SendInformationEvent
  1878  0021A2  D0C1               	goto	l12611
  1879  0021A4                     l466:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;main.c: 406: if ( !PORTCbits.RC5 ) {
  1883  0021A4  BA82               	btfsc	3970,5,c	;volatile
  1884  0021A6  D7A6               	goto	l12497
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 407: debounce_cnt[ current_debounce ]++;
  1888  0021A8  5175               	movf	_current_debounce& (0+255),w,b
  1889                           
  1890                           ;main.c: 408: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1891  0021AA  D907               	call	PL8	;call to abstracted procedure
  1892  0021AC  64DF               	cpfsgt	indf2,c
  1893  0021AE  D0BB               	goto	l12611
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;main.c: 410: debounce_cnt[ current_debounce ] = 0;
  1897  0021B0  5175               	movf	_current_debounce& (0+255),w,b
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 413: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1901                           ;main.c: 416: 0x04 ) {
  1902  0021B2  D8F8               	call	PL4	;call to abstracted procedure
  1903  0021B4  EC27  F023         	call	_Read_b_eep	;wreg free
  1904  0021B8  0101               	movlb	1	; () banked
  1905  0021BA  6F14               	movwf	??_main& (0+255),b
  1906  0021BC  A514               	btfss	??_main& (0+255),2,b
  1907  0021BE  D009               	goto	l12543
  1908                           
  1909                           ; BSR set to: 1
  1910                           ;main.c: 417: SendInformationEvent( current_debounce,
  1911                           ;main.c: 418: 20,
  1912                           ;main.c: 419: 3 );
  1913  0021C0  0E14               	movlw	20
  1914  0021C2  0100               	movlb	0	; () banked
  1915  0021C4  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1916  0021C6  0E03               	movlw	3
  1917  0021C8  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1918  0021CA  5175               	movf	_current_debounce& (0+255),w,b
  1919  0021CC  EC5A  F020         	call	_SendInformationEvent
  1920                           
  1921                           ;main.c: 420: }
  1922  0021D0  D0AA               	goto	l12611
  1923  0021D2                     l12543:
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 421: else {
  1927                           ;main.c: 422: SendInformationEvent( current_debounce,
  1928                           ;main.c: 423: 30,
  1929                           ;main.c: 424: 5 );
  1930  0021D2  D8FC               	call	PL18	;call to abstracted procedure
  1931  0021D4  EC5A  F020         	call	_SendInformationEvent
  1932  0021D8  D0A6               	goto	l12611
  1933  0021DA                     l472:
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;main.c: 434: if ( !PORTCbits.RC6 ) {
  1937  0021DA  BC82               	btfsc	3970,6,c	;volatile
  1938  0021DC  D78B               	goto	l12497
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 435: debounce_cnt[ current_debounce ]++;
  1942  0021DE  5175               	movf	_current_debounce& (0+255),w,b
  1943                           
  1944                           ;main.c: 436: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1945  0021E0  D8EC               	call	PL8	;call to abstracted procedure
  1946  0021E2  64DF               	cpfsgt	indf2,c
  1947  0021E4  D0A0               	goto	l12611
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 438: debounce_cnt[ current_debounce ] = 0;
  1951  0021E6  5175               	movf	_current_debounce& (0+255),w,b
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 441: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1955                           ;main.c: 444: 0x04 ) {
  1956  0021E8  D8DD               	call	PL4	;call to abstracted procedure
  1957  0021EA  EC27  F023         	call	_Read_b_eep	;wreg free
  1958  0021EE  0101               	movlb	1	; () banked
  1959  0021F0  6F14               	movwf	??_main& (0+255),b
  1960  0021F2  A514               	btfss	??_main& (0+255),2,b
  1961  0021F4  D009               	goto	l12555
  1962                           
  1963                           ; BSR set to: 1
  1964                           ;main.c: 445: SendInformationEvent( current_debounce,
  1965                           ;main.c: 446: 20,
  1966                           ;main.c: 447: 3 );
  1967  0021F6  0E14               	movlw	20
  1968  0021F8  0100               	movlb	0	; () banked
  1969  0021FA  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1970  0021FC  0E03               	movlw	3
  1971  0021FE  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1972  002200  5175               	movf	_current_debounce& (0+255),w,b
  1973  002202  EC5A  F020         	call	_SendInformationEvent
  1974                           
  1975                           ;main.c: 448: }
  1976  002206  D08F               	goto	l12611
  1977  002208                     l12555:
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;main.c: 449: else {
  1981                           ;main.c: 450: SendInformationEvent( current_debounce,
  1982                           ;main.c: 451: 30,
  1983                           ;main.c: 452: 5 );
  1984  002208  D8E1               	call	PL18	;call to abstracted procedure
  1985  00220A  EC5A  F020         	call	_SendInformationEvent
  1986  00220E  D08B               	goto	l12611
  1987  002210                     l478:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 462: if ( !PORTCbits.RC7 ) {
  1991  002210  BE82               	btfsc	3970,7,c	;volatile
  1992  002212  D770               	goto	l12497
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 463: debounce_cnt[ current_debounce ]++;
  1996  002214  5175               	movf	_current_debounce& (0+255),w,b
  1997                           
  1998                           ;main.c: 464: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1999  002216  D8D1               	call	PL8	;call to abstracted procedure
  2000  002218  64DF               	cpfsgt	indf2,c
  2001  00221A  D085               	goto	l12611
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 466: debounce_cnt[ current_debounce ] = 0;
  2005  00221C  5175               	movf	_current_debounce& (0+255),w,b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 469: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2009                           ;main.c: 472: 0x04 ) {
  2010  00221E  D8C2               	call	PL4	;call to abstracted procedure
  2011  002220  EC27  F023         	call	_Read_b_eep	;wreg free
  2012  002224  0101               	movlb	1	; () banked
  2013  002226  6F14               	movwf	??_main& (0+255),b
  2014  002228  A514               	btfss	??_main& (0+255),2,b
  2015  00222A  D009               	goto	l12567
  2016                           
  2017                           ; BSR set to: 1
  2018                           ;main.c: 473: SendInformationEvent( current_debounce,
  2019                           ;main.c: 474: 20,
  2020                           ;main.c: 475: 3 );
  2021  00222C  0E14               	movlw	20
  2022  00222E  0100               	movlb	0	; () banked
  2023  002230  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2024  002232  0E03               	movlw	3
  2025  002234  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2026  002236  5175               	movf	_current_debounce& (0+255),w,b
  2027  002238  EC5A  F020         	call	_SendInformationEvent
  2028                           
  2029                           ;main.c: 476: }
  2030  00223C  D074               	goto	l12611
  2031  00223E                     l12567:
  2032                           
  2033                           ; BSR set to: 1
  2034                           ;main.c: 477: else {
  2035                           ;main.c: 478: SendInformationEvent( current_debounce,
  2036                           ;main.c: 479: 30,
  2037                           ;main.c: 480: 5 );
  2038  00223E  D8C6               	call	PL18	;call to abstracted procedure
  2039  002240  EC5A  F020         	call	_SendInformationEvent
  2040  002244  D070               	goto	l12611
  2041  002246                     l484:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;main.c: 490: if ( !PORTAbits.RA2 ) {
  2045  002246  B480               	btfsc	3968,2,c	;volatile
  2046  002248  D755               	goto	l12497
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;main.c: 491: debounce_cnt[ current_debounce ]++;
  2050  00224A  5175               	movf	_current_debounce& (0+255),w,b
  2051                           
  2052                           ;main.c: 492: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2053  00224C  D8B6               	call	PL8	;call to abstracted procedure
  2054  00224E  64DF               	cpfsgt	indf2,c
  2055  002250  D06A               	goto	l12611
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 494: debounce_cnt[ current_debounce ] = 0;
  2059  002252  5175               	movf	_current_debounce& (0+255),w,b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 497: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2063                           ;main.c: 500: 0x04 ) {
  2064  002254  D8A7               	call	PL4	;call to abstracted procedure
  2065  002256  EC27  F023         	call	_Read_b_eep	;wreg free
  2066  00225A  0101               	movlb	1	; () banked
  2067  00225C  6F14               	movwf	??_main& (0+255),b
  2068  00225E  A514               	btfss	??_main& (0+255),2,b
  2069  002260  D009               	goto	l12579
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;main.c: 501: SendInformationEvent( current_debounce,
  2073                           ;main.c: 502: 20,
  2074                           ;main.c: 503: 3 );
  2075  002262  0E14               	movlw	20
  2076  002264  0100               	movlb	0	; () banked
  2077  002266  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2078  002268  0E03               	movlw	3
  2079  00226A  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2080  00226C  5175               	movf	_current_debounce& (0+255),w,b
  2081  00226E  EC5A  F020         	call	_SendInformationEvent
  2082                           
  2083                           ;main.c: 504: }
  2084  002272  D059               	goto	l12611
  2085  002274                     l12579:
  2086                           
  2087                           ; BSR set to: 1
  2088                           ;main.c: 505: else {
  2089                           ;main.c: 506: SendInformationEvent( current_debounce,
  2090                           ;main.c: 507: 30,
  2091                           ;main.c: 508: 5 );
  2092  002274  D8AB               	call	PL18	;call to abstracted procedure
  2093  002276  EC5A  F020         	call	_SendInformationEvent
  2094  00227A  D055               	goto	l12611
  2095  00227C                     l490:
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 518: if ( !PORTAbits.RA1 ) {
  2099  00227C  B280               	btfsc	3968,1,c	;volatile
  2100  00227E  D73A               	goto	l12497
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 519: debounce_cnt[ current_debounce ]++;
  2104  002280  5175               	movf	_current_debounce& (0+255),w,b
  2105                           
  2106                           ;main.c: 520: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2107  002282  D89B               	call	PL8	;call to abstracted procedure
  2108  002284  64DF               	cpfsgt	indf2,c
  2109  002286  D04F               	goto	l12611
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 522: debounce_cnt[ current_debounce ] = 0;
  2113  002288  5175               	movf	_current_debounce& (0+255),w,b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;main.c: 525: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2117                           ;main.c: 528: 0x04 ) {
  2118  00228A  D88C               	call	PL4	;call to abstracted procedure
  2119  00228C  EC27  F023         	call	_Read_b_eep	;wreg free
  2120  002290  0101               	movlb	1	; () banked
  2121  002292  6F14               	movwf	??_main& (0+255),b
  2122  002294  A514               	btfss	??_main& (0+255),2,b
  2123  002296  D009               	goto	l12591
  2124                           
  2125                           ; BSR set to: 1
  2126                           ;main.c: 529: SendInformationEvent( current_debounce,
  2127                           ;main.c: 530: 20,
  2128                           ;main.c: 531: 3 );
  2129  002298  0E14               	movlw	20
  2130  00229A  0100               	movlb	0	; () banked
  2131  00229C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2132  00229E  0E03               	movlw	3
  2133  0022A0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2134  0022A2  5175               	movf	_current_debounce& (0+255),w,b
  2135  0022A4  EC5A  F020         	call	_SendInformationEvent
  2136                           
  2137                           ;main.c: 532: }
  2138  0022A8  D03E               	goto	l12611
  2139  0022AA                     l12591:
  2140                           
  2141                           ; BSR set to: 1
  2142                           ;main.c: 533: else {
  2143                           ;main.c: 534: SendInformationEvent( current_debounce,
  2144                           ;main.c: 535: 30,
  2145                           ;main.c: 536: 5 );
  2146  0022AA  D890               	call	PL18	;call to abstracted procedure
  2147  0022AC  EC5A  F020         	call	_SendInformationEvent
  2148  0022B0  D03A               	goto	l12611
  2149  0022B2                     l496:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;main.c: 546: if ( !PORTAbits.RA0 ) {
  2153  0022B2  B080               	btfsc	3968,0,c	;volatile
  2154  0022B4  D71F               	goto	l12497
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;main.c: 547: debounce_cnt[ current_debounce ]++;
  2158  0022B6  5175               	movf	_current_debounce& (0+255),w,b
  2159                           
  2160                           ;main.c: 548: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2161  0022B8  D880               	call	PL8	;call to abstracted procedure
  2162  0022BA  64DF               	cpfsgt	indf2,c
  2163  0022BC  D034               	goto	l12611
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;main.c: 550: debounce_cnt[ current_debounce ] = 0;
  2167  0022BE  5175               	movf	_current_debounce& (0+255),w,b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 553: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2171                           ;main.c: 556: 0x04 ) {
  2172  0022C0  D871               	call	PL4	;call to abstracted procedure
  2173  0022C2  EC27  F023         	call	_Read_b_eep	;wreg free
  2174  0022C6  0101               	movlb	1	; () banked
  2175  0022C8  6F14               	movwf	??_main& (0+255),b
  2176  0022CA  A514               	btfss	??_main& (0+255),2,b
  2177  0022CC  D009               	goto	l12603
  2178                           
  2179                           ; BSR set to: 1
  2180                           ;main.c: 557: SendInformationEvent( current_debounce,
  2181                           ;main.c: 558: 20,
  2182                           ;main.c: 559: 3 );
  2183  0022CE  0E14               	movlw	20
  2184  0022D0  0100               	movlb	0	; () banked
  2185  0022D2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2186  0022D4  0E03               	movlw	3
  2187  0022D6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2188  0022D8  5175               	movf	_current_debounce& (0+255),w,b
  2189  0022DA  EC5A  F020         	call	_SendInformationEvent
  2190                           
  2191                           ;main.c: 560: }
  2192  0022DE  D023               	goto	l12611
  2193  0022E0                     l12603:
  2194                           
  2195                           ; BSR set to: 1
  2196                           ;main.c: 561: else {
  2197                           ;main.c: 562: SendInformationEvent( current_debounce,
  2198                           ;main.c: 563: 30,
  2199                           ;main.c: 564: 5 );
  2200  0022E0  D875               	call	PL18	;call to abstracted procedure
  2201  0022E2  EC5A  F020         	call	_SendInformationEvent
  2202  0022E6  D01F               	goto	l12611
  2203  0022E8                     l502:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 574: current_debounce = 0;
  2207  0022E8  6B75               	clrf	_current_debounce& (0+255),b
  2208                           
  2209                           ;main.c: 575: break;
  2210  0022EA  D01D               	goto	l12611
  2211  0022EC                     l12609:
  2212                           
  2213                           ; BSR set to: 1
  2214  0022EC  0100               	movlb	0	; () banked
  2215  0022EE  5175               	movf	_current_debounce& (0+255),w,b
  2216                           
  2217                           ; Switch size 1, requested type "space"
  2218                           ; Number of cases is 10, Range of values is 0 to 9
  2219                           ; switch strategies available:
  2220                           ; Name         Instructions Cycles
  2221                           ; simple_byte           31    16 (average)
  2222                           ;	Chosen strategy is simple_byte
  2223  0022F0  E101 D6E5          	bz	l441
  2224  0022F4  0A01               	xorlw	1	; case 1
  2225  0022F6  E101 D704          	bz	l448
  2226  0022FA  0A03               	xorlw	3	; case 2
  2227  0022FC  E101 D71C          	bz	l454
  2228  002300  0A01               	xorlw	1	; case 3
  2229  002302  E101 D734          	bz	l460
  2230  002306  0A07               	xorlw	7	; case 4
  2231  002308  E101 D74C          	bz	l466
  2232  00230C  0A01               	xorlw	1	; case 5
  2233  00230E  E101 D764          	bz	l472
  2234  002312  0A03               	xorlw	3	; case 6
  2235  002314  E101 D77C          	bz	l478
  2236  002318  0A01               	xorlw	1	; case 7
  2237  00231A  E095               	bz	l484
  2238  00231C  0A0F               	xorlw	15	; case 8
  2239  00231E  E0AE               	bz	l490
  2240  002320  0A01               	xorlw	1	; case 9
  2241  002322  E0C7               	bz	l496
  2242  002324  D7E1               	goto	l502
  2243  002326                     l12611:
  2244                           
  2245                           ;main.c: 578: }
  2246                           ;main.c: 579: }
  2247                           ;main.c: 581: doDM();
  2248  002326  EC19  F015         	call	_doDM	;wreg free
  2249  00232A  D015               	goto	l12619
  2250  00232C                     l12613:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 589: vscp_error();
  2254  00232C  EC5E  F023         	call	_vscp_error	;wreg free
  2255                           
  2256                           ;main.c: 590: break;
  2257  002330  D012               	goto	l12619
  2258  002332                     l504:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;main.c: 593: vscp_node_state = 0x00;
  2262  002332  6B7F               	clrf	_vscp_node_state& (0+255),b
  2263                           
  2264                           ;main.c: 594: break;
  2265  002334  D010               	goto	l12619
  2266  002336                     l12617:
  2267  002336  0100               	movlb	0	; () banked
  2268  002338  517F               	movf	_vscp_node_state& (0+255),w,b
  2269                           
  2270                           ; Switch size 1, requested type "space"
  2271                           ; Number of cases is 5, Range of values is 0 to 4
  2272                           ; switch strategies available:
  2273                           ; Name         Instructions Cycles
  2274                           ; simple_byte           16     9 (average)
  2275                           ;	Chosen strategy is simple_byte
  2276  00233A  E101 D664          	bz	l12457
  2277  00233E  0A01               	xorlw	1	; case 1
  2278  002340  E101 D66B          	bz	l12465
  2279  002344  0A03               	xorlw	3	; case 2
  2280  002346  E101 D665          	bz	l12463
  2281  00234A  0A01               	xorlw	1	; case 3
  2282  00234C  E101 D668          	bz	l434
  2283  002350  0A07               	xorlw	7	; case 4
  2284  002352  E0EC               	bz	l12613
  2285  002354  D7EE               	goto	l504
  2286  002356                     l12619:
  2287                           
  2288                           ;main.c: 599: if ( measurement_clock_sec > 1000 ) {
  2289  002356  0EE9               	movlw	233
  2290  002358  0100               	movlb	0	; () banked
  2291  00235A  5D64               	subwf	_measurement_clock_sec& (0+255),w,b	;volatile
  2292  00235C  0E03               	movlw	3
  2293  00235E  5965               	subwfb	(_measurement_clock_sec+1)& (0+255),w,b	;volatile
  2294  002360  0E00               	movlw	0
  2295  002362  5966               	subwfb	(_measurement_clock_sec+2)& (0+255),w,b	;volatile
  2296  002364  0E00               	movlw	0
  2297  002366  5967               	subwfb	(_measurement_clock_sec+3)& (0+255),w,b	;volatile
  2298  002368  E30C               	bnc	l12631
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;main.c: 601: measurement_clock_sec = 0;
  2302  00236A  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  2303  00236C  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  2304  00236E  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  2305  002370  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 602: sendTimer++;
  2309  002372  2B79               	incf	_sendTimer& (0+255),f,b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 605: vscp_doOneSecondWork();
  2313  002374  EC83  F020         	call	_vscp_doOneSecondWork	;wreg free
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;main.c: 609: if ( 0x03 == vscp_node_state ) {
  2317  002378  517F               	movf	_vscp_node_state& (0+255),w,b
  2318  00237A  0A03               	xorlw	3
  2319  00237C  B4D8               	btfsc	status,2,c
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;main.c: 611: doApplicationOneSecondWork();
  2323  00237E  ECA6  F009         	call	_doApplicationOneSecondWork	;wreg free
  2324  002382                     l12631:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 612: }
  2328                           ;main.c: 614: }
  2329                           ;main.c: 617: if ( seconds > 59 ) {
  2330  002382  0E3B               	movlw	59
  2331  002384  6578               	cpfsgt	_seconds& (0+255),b
  2332  002386  D00B               	goto	l12647
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 619: seconds = 0;
  2336  002388  6B78               	clrf	_seconds& (0+255),b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;main.c: 620: minutes++;
  2340  00238A  2B77               	incf	_minutes& (0+255),f,b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 622: if ( minutes > 59 ) {
  2344  00238C  0E3B               	movlw	59
  2345  00238E  6577               	cpfsgt	_minutes& (0+255),b
  2346  002390  D002               	goto	l12643
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 623: minutes = 0;
  2350  002392  6B77               	clrf	_minutes& (0+255),b
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 624: hours++;
  2354  002394  2B76               	incf	_hours& (0+255),f,b
  2355  002396                     l12643:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 625: }
  2359                           ;main.c: 627: if ( hours > 23 ) hours = 0;
  2360  002396  0E17               	movlw	23
  2361  002398  6576               	cpfsgt	_hours& (0+255),b
  2362  00239A  D001               	goto	l12647
  2363                           
  2364                           ; BSR set to: 0
  2365  00239C  6B76               	clrf	_hours& (0+255),b
  2366  00239E                     l12647:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 629: }
  2370                           ;main.c: 631: doWork();
  2371  00239E  EC60  F023         	call	_doWork	;wreg free
  2372  0023A2  D61A               	goto	l425
  2373  0023A4                     __end_of_main:
  2374                           	opt stack 0
  2375  0023A4                     PL4:
  2376                           	opt stack 20
  2377  0023A4  0FB2               	addlw	low _debounce_cnt
  2378  0023A6  6ED9               	movwf	fsr2l,c
  2379  0023A8  6ADA               	clrf	fsr2h,c
  2380  0023AA  6ADF               	clrf	indf2,c
  2381  0023AC  0E5B               	movlw	91
  2382  0023AE  2575               	addwf	_current_debounce& (0+255),w,b
  2383  0023B0  6E08               	movwf	?_Read_b_eep,c
  2384  0023B2  6A09               	clrf	?_Read_b_eep+1,c
  2385  0023B4  0E00               	movlw	0
  2386  0023B6  2209               	addwfc	?_Read_b_eep+1,f,c
  2387  0023B8  0C00               	retlw	0
  2388  0023BA                     __end_ofPL4:
  2389                           	opt stack 0
  2390  0023BA                     PL8:
  2391                           	opt stack 20
  2392  0023BA  0FB2               	addlw	low _debounce_cnt
  2393  0023BC  6ED9               	movwf	fsr2l,c
  2394  0023BE  6ADA               	clrf	fsr2h,c
  2395  0023C0  2ADF               	incf	indf2,f,c
  2396  0023C2  5175               	movf	_current_debounce& (0+255),w,b
  2397  0023C4  0FB2               	addlw	low _debounce_cnt
  2398  0023C6  6ED9               	movwf	fsr2l,c
  2399  0023C8  6ADA               	clrf	fsr2h,c
  2400  0023CA  0C03               	retlw	3
  2401  0023CC                     __end_ofPL8:
  2402                           	opt stack 0
  2403  0023CC                     PL18:
  2404                           	opt stack 20
  2405  0023CC  0E1E               	movlw	30
  2406  0023CE  0100               	movlb	0	; () banked
  2407  0023D0  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2408  0023D2  0E05               	movlw	5
  2409  0023D4  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2410  0023D6  5175               	movf	_current_debounce& (0+255),w,b
  2411  0023D8  0012               	return	
  2412  0023DA                     __end_ofPL18:
  2413                           	opt stack 0
  2414  0023DA                     PL98:
  2415                           	opt stack 20
  2416  0023DA  0100               	movlb	0	; () banked
  2417  0023DC  2575               	addwf	_current_debounce& (0+255),w,b
  2418  0023DE  6E08               	movwf	?_Read_b_eep,c
  2419  0023E0  6A09               	clrf	?_Read_b_eep+1,c
  2420  0023E2  0E00               	movlw	0
  2421  0023E4  2209               	addwfc	?_Read_b_eep+1,f,c
  2422  0023E6  0C00               	retlw	0
  2423  0023E8                     __end_ofPL98:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           prodh	equ	0xFF4
  2430                           prodl	equ	0xFF3
  2431                           intcon	equ	0xFF2
  2432                           intcon2	equ	0xFF1
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf1	equ	0xFE7
  2436                           fsr1h	equ	0xFE2
  2437                           fsr1l	equ	0xFE1
  2438                           indf2	equ	0xFDF
  2439                           postinc2	equ	0xFDE
  2440                           postdec2	equ	0xFDD
  2441                           plusw2	equ	0xFDB
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _doWork *****************
  2447 ;; Defined at:
  2448 ;;		line 1411 in file "../main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;		None               void
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0
  2457 ;; Tracked objects:
  2458 ;;		On entry : F/0
  2459 ;;		On exit  : F/0
  2460 ;;		Unchanged: F/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2462 ;;      Params:         0       0       0       0       0       0       0
  2463 ;;      Locals:         0       0       0       0       0       0       0
  2464 ;;      Temps:          0       0       0       0       0       0       0
  2465 ;;      Totals:         0       0       0       0       0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    2
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text1
  2477  0046C0                     __ptext1:
  2478                           	opt stack 0
  2479  0046C0                     _doWork:
  2480                           	opt stack 27
  2481                           
  2482                           ; BSR set to: 0
  2483                           
  2484                           ; BSR set to: 0
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;incstack = 0
  2488                           ;incstack = 0
  2489  0046C0  0012               	return	
  2490  0046C2                     __end_of_doWork:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           intcon	equ	0xFF2
  2499                           intcon2	equ	0xFF1
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           indf1	equ	0xFE7
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           plusw2	equ	0xFDB
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _doApplicationOneSecondWork *****************
  2514 ;; Defined at:
  2515 ;;		line 892 in file "../main.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  data            3   60[BANK0 ] unsigned char [3]
  2520 ;;  iodirections    2   58[BANK0 ] unsigned short 
  2521 ;;  i               1   66[BANK0 ] unsigned char 
  2522 ;;  ctrlreg         1   65[BANK0 ] unsigned char 
  2523 ;;  bOn             1   64[BANK0 ] enum E15660
  2524 ;;  bInput          1   63[BANK0 ] enum E15660
  2525 ;; Return value:  Size  Location     Type
  2526 ;;		None               void
  2527 ;; Registers used:
  2528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : F/0
  2531 ;;		On exit  : F/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2534 ;;      Params:         0       0       0       0       0       0       0
  2535 ;;      Locals:         0       9       0       0       0       0       0
  2536 ;;      Temps:          0      36       0       0       0       0       0
  2537 ;;      Totals:         0      45       0       0       0       0       0
  2538 ;;Total ram usage:       45 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    8
  2541 ;; This function calls:
  2542 ;;		_Read_b_eep
  2543 ;;		_SendInformationEvent
  2544 ;;		_doActionOff
  2545 ;;		_sendVSCPFrame
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text2
  2552  00134C                     __ptext2:
  2553                           	opt stack 0
  2554  00134C                     _doApplicationOneSecondWork:
  2555                           	opt stack 21
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 894: uint8_t i;
  2559                           ;main.c: 895: uint16_t iodirections;
  2560                           ;main.c: 896: uint8_t ctrlreg;
  2561                           ;main.c: 897: BOOL bOn = 0;
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;incstack = 0
  2565                           ;incstack = 0
  2566  00134C  6BFC               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 898: BOOL bInput;
  2570                           ;main.c: 901: iodirections = ( Read_b_eep(0x43 + 12) << 8 ) +
  2571                           ;main.c: 902: Read_b_eep(0x43 + 13);
  2572  00134E  6A09               	clrf	?_Read_b_eep+1,c
  2573  001350  0E50               	movlw	80
  2574  001352  6E08               	movwf	?_Read_b_eep,c
  2575  001354  EC27  F023         	call	_Read_b_eep	;wreg free
  2576  001358  0100               	movlb	0	; () banked
  2577  00135A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2578  00135C  6A09               	clrf	?_Read_b_eep+1,c
  2579  00135E  0E4F               	movlw	79
  2580  001360  6E08               	movwf	?_Read_b_eep,c
  2581  001362  EC27  F023         	call	_Read_b_eep	;wreg free
  2582  001366  0100               	movlb	0	; () banked
  2583  001368  6FD4               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2584  00136A  6BD3               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2585  00136C  51D2               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2586  00136E  25D3               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2587  001370  6FF6               	movwf	doApplicationOneSecondWork@iodirections& (0+255),b
  2588  001372  0E00               	movlw	0
  2589  001374  21D4               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2590  001376  6FF7               	movwf	(doApplicationOneSecondWork@iodirections+1)& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 904: for ( i = 0; i < 10; i++ ) {
  2594  001378  6BFE               	clrf	doApplicationOneSecondWork@i& (0+255),b
  2595  00137A                     l13501:
  2596                           
  2597                           ; BSR set to: 0
  2598  00137A  0E09               	movlw	9
  2599  00137C  65FE               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  2600  00137E  D001               	goto	l13505
  2601  001380  D1D9               	goto	l13677
  2602  001382                     l13505:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 906: if ( iodirections & ( 1 << i ) ) {
  2606  001382  DB00               	call	PL38	;call to abstracted procedure
  2607  001384  D001               	goto	u17584
  2608  001386                     u17585:
  2609  001386  DB0C               	call	PL104	;call to abstracted procedure
  2610  001388                     u17584:
  2611  001388  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  2612  00138A  D7FD               	goto	u17585
  2613  00138C  51F6               	movf	doApplicationOneSecondWork@iodirections& (0+255),w,b
  2614  00138E  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2615  001390  51F7               	movf	(doApplicationOneSecondWork@iodirections+1)& (0+255),w,b
  2616  001392  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  2617  001394  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2618  001396  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2619  001398  E101 D0A8          	bz	l13583
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 911: ctrlreg = Read_b_eep(0x43 + 34 + i);
  2623  00139C  0E65               	movlw	101
  2624  00139E  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2625  0013A0  6E08               	movwf	?_Read_b_eep,c
  2626  0013A2  6A09               	clrf	?_Read_b_eep+1,c
  2627  0013A4  0E00               	movlw	0
  2628  0013A6  2209               	addwfc	?_Read_b_eep+1,f,c
  2629  0013A8  EC27  F023         	call	_Read_b_eep	;wreg free
  2630  0013AC  0100               	movlb	0	; () banked
  2631  0013AE  6FFD               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 914: if ( !( ctrlreg & 0x80 ) ) continue;
  2635  0013B0  AFFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2636  0013B2  D1BD               	goto	l13673
  2637  0013B4  D032               	goto	l13535
  2638  0013B6                     l13513:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 919: bInput = PORTBbits.RB0;
  2642  0013B6  0E00               	movlw	0
  2643  0013B8  B081               	btfsc	3969,0,c	;volatile
  2644  0013BA  0E01               	movlw	1
  2645  0013BC  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2646                           
  2647                           ;main.c: 920: break;
  2648  0013BE  D041               	goto	l550
  2649  0013C0                     l13515:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 923: bInput = PORTBbits.RB1;
  2653  0013C0  0E00               	movlw	0
  2654  0013C2  B281               	btfsc	3969,1,c	;volatile
  2655  0013C4  0E01               	movlw	1
  2656  0013C6  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2657                           
  2658                           ;main.c: 924: break;
  2659  0013C8  D03C               	goto	l550
  2660  0013CA                     l13517:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 927: bInput = PORTCbits.RC3;
  2664  0013CA  0E00               	movlw	0
  2665  0013CC  B682               	btfsc	3970,3,c	;volatile
  2666  0013CE  0E01               	movlw	1
  2667  0013D0  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2668                           
  2669                           ;main.c: 928: break;
  2670  0013D2  D037               	goto	l550
  2671  0013D4                     l13519:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;main.c: 931: bInput = PORTCbits.RC4;
  2675  0013D4  0E00               	movlw	0
  2676  0013D6  B882               	btfsc	3970,4,c	;volatile
  2677  0013D8  0E01               	movlw	1
  2678  0013DA  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2679                           
  2680                           ;main.c: 932: break;
  2681  0013DC  D032               	goto	l550
  2682  0013DE                     l13521:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 935: bInput = PORTCbits.RC5;
  2686  0013DE  0E00               	movlw	0
  2687  0013E0  BA82               	btfsc	3970,5,c	;volatile
  2688  0013E2  0E01               	movlw	1
  2689  0013E4  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2690                           
  2691                           ;main.c: 936: break;
  2692  0013E6  D02D               	goto	l550
  2693  0013E8                     l13523:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 939: bInput = PORTCbits.RC6;
  2697  0013E8  0E00               	movlw	0
  2698  0013EA  BC82               	btfsc	3970,6,c	;volatile
  2699  0013EC  0E01               	movlw	1
  2700  0013EE  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2701                           
  2702                           ;main.c: 940: break;
  2703  0013F0  D028               	goto	l550
  2704  0013F2                     l13525:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 943: bInput = PORTCbits.RC7;
  2708  0013F2  0E00               	movlw	0
  2709  0013F4  BE82               	btfsc	3970,7,c	;volatile
  2710  0013F6  0E01               	movlw	1
  2711  0013F8  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2712                           
  2713                           ;main.c: 944: break;
  2714  0013FA  D023               	goto	l550
  2715  0013FC                     l13527:
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;main.c: 947: bInput = PORTAbits.RA2;
  2719  0013FC  0E00               	movlw	0
  2720  0013FE  B480               	btfsc	3968,2,c	;volatile
  2721  001400  0E01               	movlw	1
  2722  001402  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2723                           
  2724                           ;main.c: 948: break;
  2725  001404  D01E               	goto	l550
  2726  001406                     l13529:
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;main.c: 951: bInput = PORTAbits.RA1;
  2730  001406  0E00               	movlw	0
  2731  001408  B280               	btfsc	3968,1,c	;volatile
  2732  00140A  0E01               	movlw	1
  2733  00140C  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2734                           
  2735                           ;main.c: 952: break;
  2736  00140E  D019               	goto	l550
  2737  001410                     l13531:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 955: bInput = PORTAbits.RA0;
  2741  001410  0E00               	movlw	0
  2742  001412  B080               	btfsc	3968,0,c	;volatile
  2743  001414  0E01               	movlw	1
  2744  001416  6FFB               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2745                           
  2746                           ;main.c: 956: break;
  2747  001418  D014               	goto	l550
  2748  00141A                     l13535:
  2749                           
  2750                           ; BSR set to: 0
  2751  00141A  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2752                           
  2753                           ; Switch size 1, requested type "space"
  2754                           ; Number of cases is 10, Range of values is 0 to 9
  2755                           ; switch strategies available:
  2756                           ; Name         Instructions Cycles
  2757                           ; simple_byte           31    16 (average)
  2758                           ;	Chosen strategy is simple_byte
  2759  00141C  E0CC               	bz	l13513
  2760  00141E  0A01               	xorlw	1	; case 1
  2761  001420  E0CF               	bz	l13515
  2762  001422  0A03               	xorlw	3	; case 2
  2763  001424  E0D2               	bz	l13517
  2764  001426  0A01               	xorlw	1	; case 3
  2765  001428  E0D5               	bz	l13519
  2766  00142A  0A07               	xorlw	7	; case 4
  2767  00142C  E0D8               	bz	l13521
  2768  00142E  0A01               	xorlw	1	; case 5
  2769  001430  E0DB               	bz	l13523
  2770  001432  0A03               	xorlw	3	; case 6
  2771  001434  E0DE               	bz	l13525
  2772  001436  0A01               	xorlw	1	; case 7
  2773  001438  E0E1               	bz	l13527
  2774  00143A  0A0F               	xorlw	15	; case 8
  2775  00143C  E0E4               	bz	l13529
  2776  00143E  0A01               	xorlw	1	; case 9
  2777  001440  E0E7               	bz	l13531
  2778  001442                     l550:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 960: if ( ctrlreg & 0x01 ) {
  2782  001442  A1FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),0,b
  2783  001444  D017               	goto	l13547
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;main.c: 962: if ( bInput ) {
  2787  001446  51FB               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2788  001448  E015               	bz	l13547
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 965: if ( !( current_iostate & ( 1 << i ) ) ) {
  2792  00144A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2793  00144E  DA62               	call	PL14	;call to abstracted procedure
  2794  001450  E111               	bnz	l13547
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 966: if ( ctrlreg & 0x04 ) {
  2798  001452  A5FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2799  001454  D008               	goto	l13545
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 967: SendInformationEvent( i,
  2803                           ;main.c: 968: 30,
  2804                           ;main.c: 969: 5 );
  2805  001456  0E1E               	movlw	30
  2806  001458  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2807  00145A  0E05               	movlw	5
  2808  00145C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2809  00145E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2810  001460  EC5A  F020         	call	_SendInformationEvent
  2811                           
  2812                           ;main.c: 970: }
  2813  001464  D007               	goto	l13547
  2814  001466                     l13545:
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 971: else {
  2818                           ;main.c: 972: SendInformationEvent( i,
  2819                           ;main.c: 973: 20,
  2820                           ;main.c: 974: 3 );
  2821  001466  0E14               	movlw	20
  2822  001468  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2823  00146A  0E03               	movlw	3
  2824  00146C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2825  00146E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2826  001470  EC5A  F020         	call	_SendInformationEvent
  2827  001474                     l13547:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 975: }
  2831                           ;main.c: 976: }
  2832                           ;main.c: 977: }
  2833                           ;main.c: 978: }
  2834                           ;main.c: 981: if ( ctrlreg & 0x02 ) {
  2835  001474  B3FD               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;main.c: 983: if ( !bInput ) {
  2839  001476  67FB               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2840  001478  D015               	goto	l13559
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 986: if ( current_iostate & ( 1 << i ) ) {
  2844  00147A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2845  00147E  DA4A               	call	PL14	;call to abstracted procedure
  2846  001480  E011               	bz	l13559
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 987: if ( ctrlreg & 0x04 ) {
  2850  001482  A5FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2851  001484  D008               	goto	l13557
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 988: SendInformationEvent( i,
  2855                           ;main.c: 989: 30,
  2856                           ;main.c: 990: 6 );
  2857  001486  0E1E               	movlw	30
  2858  001488  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2859  00148A  0E06               	movlw	6
  2860  00148C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2861  00148E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2862  001490  EC5A  F020         	call	_SendInformationEvent
  2863                           
  2864                           ;main.c: 991: }
  2865  001494  D007               	goto	l13559
  2866  001496                     l13557:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;main.c: 992: else {
  2870                           ;main.c: 993: SendInformationEvent( i,
  2871                           ;main.c: 994: 20,
  2872                           ;main.c: 995: 4 );
  2873  001496  0E14               	movlw	20
  2874  001498  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2875  00149A  0E04               	movlw	4
  2876  00149C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2877  00149E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2878  0014A0  EC5A  F020         	call	_SendInformationEvent
  2879  0014A4                     l13559:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 996: }
  2883                           ;main.c: 997: }
  2884                           ;main.c: 998: }
  2885                           ;main.c: 999: }
  2886                           ;main.c: 1002: if ( ctrlreg & 0x10 ) {
  2887  0014A4  A9FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2888  0014A6  D010               	goto	l13571
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;main.c: 1004: if ( bInput ) {
  2892  0014A8  51FB               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2893  0014AA  E00E               	bz	l13571
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 1007: if ( !( current_iostate & ( 1 << i ) ) ||
  2897                           ;main.c: 1008: ( ctrlreg & 0x20 ) ) {
  2898  0014AC  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2899  0014B0  DA31               	call	PL14	;call to abstracted procedure
  2900  0014B2  E002               	bz	l13567
  2901                           
  2902                           ; BSR set to: 0
  2903  0014B4  ABFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2904  0014B6  D008               	goto	l13571
  2905  0014B8                     l13567:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 1009: SendInformationEvent( i,
  2909                           ;main.c: 1010: 1,
  2910                           ;main.c: 1011: 2 );
  2911  0014B8  0E01               	movlw	1
  2912  0014BA  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2913  0014BC  0E02               	movlw	2
  2914  0014BE  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2915  0014C0  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2916  0014C2  EC5A  F020         	call	_SendInformationEvent
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 1012: vscp_alarmstatus |= 0x02;
  2920  0014C6  8255               	bsf	_vscp_alarmstatus,1,c
  2921  0014C8                     l13571:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 1013: }
  2925                           ;main.c: 1015: }
  2926                           ;main.c: 1017: }
  2927                           ;main.c: 1020: if ( ctrlreg & 0x08 ) {
  2928  0014C8  B7FD               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;main.c: 1022: if (!bInput ) {
  2932  0014CA  67FB               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2933  0014CC  D130               	goto	l13673
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 1025: if ( current_iostate & ( 1 << i ) ||
  2937                           ;main.c: 1026: ( ctrlreg & 0x20 ) ) {
  2938  0014CE  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2939  0014D2  DA20               	call	PL14	;call to abstracted procedure
  2940  0014D4  E102               	bnz	l13579
  2941                           
  2942                           ; BSR set to: 0
  2943  0014D6  ABFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2944  0014D8  D12A               	goto	l13673
  2945  0014DA                     l13579:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 1027: SendInformationEvent( i,
  2949                           ;main.c: 1028: 1,
  2950                           ;main.c: 1029: 2 );
  2951  0014DA  0E01               	movlw	1
  2952  0014DC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2953  0014DE  0E02               	movlw	2
  2954  0014E0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2955  0014E2  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2956  0014E4  EC5A  F020         	call	_SendInformationEvent
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 1030: vscp_alarmstatus |= 0x04;
  2960  0014E8  8455               	bsf	_vscp_alarmstatus,2,c
  2961  0014EA  D121               	goto	l13673
  2962  0014EC                     l13583:
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;main.c: 1038: else {
  2966                           ;main.c: 1043: ctrlreg = Read_b_eep(0x43 + 24 + i);
  2967  0014EC  DA52               	call	PL50	;call to abstracted procedure
  2968  0014EE  EC27  F023         	call	_Read_b_eep	;wreg free
  2969  0014F2  0100               	movlb	0	; () banked
  2970  0014F4  6FFD               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 1046: if ( !( ctrlreg & 0x80 ) ) continue;
  2974  0014F6  AFFD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2975  0014F8  D11A               	goto	l13673
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 1050: if ( channel_protection_timer[ i ] ) {
  2979  0014FA  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2980  0014FC  0D02               	mullw	2
  2981  0014FE  50F3               	movf	prodl,w,c
  2982  001500  0F83               	addlw	low _channel_protection_timer
  2983  001502  6ED9               	movwf	fsr2l,c
  2984  001504  6ADA               	clrf	fsr2h,c
  2985  001506  50DE               	movf	postinc2,w,c
  2986  001508  10DD               	iorwf	postdec2,w,c
  2987  00150A  E02A               	bz	l13603
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 1052: channel_protection_timer[ i ]--;
  2991  00150C  DA34               	call	PL36	;call to abstracted procedure
  2992  00150E  06DE               	decf	postinc2,f,c
  2993  001510  0E00               	movlw	0
  2994  001512  5ADD               	subwfb	postdec2,f,c
  2995                           
  2996                           ;main.c: 1055: if (!channel_protection_timer[ i ] &&
  2997                           ;main.c: 1056: ( Read_b_eep(0x43 + 24 + i) &
  2998                           ;main.c: 1057: 0x04 ) ) {
  2999  001514  DA30               	call	PL36	;call to abstracted procedure
  3000  001516  50DE               	movf	postinc2,w,c
  3001  001518  10DD               	iorwf	postdec2,w,c
  3002  00151A  E137               	bnz	l13605
  3003                           
  3004                           ; BSR set to: 0
  3005  00151C  DA3A               	call	PL50	;call to abstracted procedure
  3006  00151E  EC27  F023         	call	_Read_b_eep	;wreg free
  3007  001522  0100               	movlb	0	; () banked
  3008  001524  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3009  001526  A5D2               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3010  001528  D030               	goto	l13605
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;main.c: 1060: doActionOff(0, (1 << i));
  3014  00152A  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3015  00152E  0E01               	movlw	1
  3016  001530  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3017  001532  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3018  001534  D002               	goto	u17854
  3019  001536                     u17855:
  3020  001536  90D8               	bcf	status,0,c
  3021  001538  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3022  00153A                     u17854:
  3023  00153A  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3024  00153C  D7FC               	goto	u17855
  3025  00153E  51D3               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3026  001540  6E4F               	movwf	?_doActionOff,c
  3027  001542  0E00               	movlw	0
  3028  001544  EC75  F01E         	call	_doActionOff
  3029                           
  3030                           ;main.c: 1063: if (ctrlreg & 0x02) {
  3031  001548  0100               	movlb	0	; () banked
  3032  00154A  A3FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  3033  00154C  D007               	goto	l13601
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;main.c: 1064: SendInformationEvent( i,
  3037                           ;main.c: 1065: 1,
  3038                           ;main.c: 1066: 2);
  3039  00154E  0E01               	movlw	1
  3040  001550  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3041  001552  0E02               	movlw	2
  3042  001554  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3043  001556  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3044  001558  EC5A  F020         	call	_SendInformationEvent
  3045  00155C                     l13601:
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;main.c: 1067: }
  3049                           ;main.c: 1069: vscp_alarmstatus |= 0x01;
  3050  00155C  8055               	bsf	_vscp_alarmstatus,0,c
  3051  00155E  D015               	goto	l13605
  3052  001560                     l13603:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;main.c: 1073: else {
  3056                           ;main.c: 1075: channel_protection_timer[ i ] =
  3057                           ;main.c: 1076: Read_b_eep(0x43 + 46 + 20u + i) * 256 +
  3058                           ;main.c: 1078: Read_b_eep(0x43 + 46 + 21u + i);
  3059  001560  0E85               	movlw	133
  3060  001562  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3061  001564  6E08               	movwf	?_Read_b_eep,c
  3062  001566  6A09               	clrf	?_Read_b_eep+1,c
  3063  001568  0E00               	movlw	0
  3064  00156A  2209               	addwfc	?_Read_b_eep+1,f,c
  3065  00156C  EC27  F023         	call	_Read_b_eep	;wreg free
  3066  001570  0100               	movlb	0	; () banked
  3067  001572  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3068  001574  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3069  001576  0E86               	movlw	134
  3070  001578  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3071  00157A  6E08               	movwf	?_Read_b_eep,c
  3072  00157C  6A09               	clrf	?_Read_b_eep+1,c
  3073  00157E  0E00               	movlw	0
  3074  001580  2209               	addwfc	?_Read_b_eep+1,f,c
  3075  001582  EC27  F023         	call	_Read_b_eep	;wreg free
  3076  001586  0100               	movlb	0	; () banked
  3077  001588  D9DF               	call	PL32	;call to abstracted procedure
  3078  00158A                     l13605:
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;main.c: 1080: }
  3082                           ;main.c: 1083: if ( channel_pulse_flags & (1 << i) ) {
  3083  00158A  D9FC               	call	PL38	;call to abstracted procedure
  3084  00158C  D001               	goto	u17874
  3085  00158E                     u17875:
  3086  00158E  DA08               	call	PL104	;call to abstracted procedure
  3087  001590                     u17874:
  3088  001590  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3089  001592  D7FD               	goto	u17875
  3090  001594  5168               	movf	_channel_pulse_flags& (0+255),w,b
  3091  001596  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3092  001598  5169               	movf	(_channel_pulse_flags+1)& (0+255),w,b
  3093  00159A  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3094  00159C  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3095  00159E  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3096  0015A0  E101 D0C5          	bz	l13673
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 1085: if ( channel_pulse_timer[ i ] ) {
  3100  0015A4  D9C8               	call	PL26	;call to abstracted procedure
  3101  0015A6  50DE               	movf	postinc2,w,c
  3102  0015A8  10DD               	iorwf	postdec2,w,c
  3103  0015AA  E101 D0A6          	bz	l13671
  3104                           
  3105                           ; BSR set to: 1
  3106                           ;main.c: 1087: channel_pulse_timer[ i ]--;
  3107  0015AE  0100               	movlb	0	; () banked
  3108  0015B0  D9C2               	call	PL26	;call to abstracted procedure
  3109  0015B2  06DE               	decf	postinc2,f,c
  3110  0015B4  0E00               	movlw	0
  3111  0015B6  5ADD               	subwfb	postdec2,f,c
  3112                           
  3113                           ;main.c: 1090: if ( !channel_pulse_timer[ i ] ) {
  3114  0015B8  D9BE               	call	PL26	;call to abstracted procedure
  3115  0015BA  50DE               	movf	postinc2,w,c
  3116  0015BC  10DD               	iorwf	postdec2,w,c
  3117  0015BE  E040               	bz	l13655
  3118  0015C0  D0B6               	goto	l13673
  3119  0015C2                     l590:
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 1095: if ( PORTBbits.RB0 ) {
  3123  0015C2  A081               	btfss	3969,0,c	;volatile
  3124  0015C4  D002               	goto	l591
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 1096: PORTBbits.RB0 = 0;
  3128  0015C6  9081               	bcf	3969,0,c	;volatile
  3129  0015C8  D037               	goto	L9
  3130  0015CA                     l591:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 1099: else {
  3134                           ;main.c: 1100: PORTBbits.RB0 = 1;
  3135  0015CA  8081               	bsf	3969,0,c	;volatile
  3136  0015CC                     l13615:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 1101: bOn = 1;
  3140  0015CC  0E01               	movlw	1
  3141  0015CE  6FFC               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  3142  0015D0  D04C               	goto	l13657
  3143  0015D2                     l594:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 1106: if ( PORTBbits.RB1 ) {
  3147  0015D2  A281               	btfss	3969,1,c	;volatile
  3148  0015D4  D002               	goto	l595
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 1107: PORTBbits.RB1 = 0;
  3152  0015D6  9281               	bcf	3969,1,c	;volatile
  3153  0015D8  D02F               	goto	L9
  3154  0015DA                     l595:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;main.c: 1110: else {
  3158                           ;main.c: 1111: PORTBbits.RB1 = 1;
  3159  0015DA  8281               	bsf	3969,1,c	;volatile
  3160  0015DC  D7F7               	goto	l13615
  3161  0015DE                     l597:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;main.c: 1117: if ( PORTCbits.RC3 ) {
  3165  0015DE  A682               	btfss	3970,3,c	;volatile
  3166  0015E0  D002               	goto	l598
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 1118: PORTCbits.RC3 = 0;
  3170  0015E2  9682               	bcf	3970,3,c	;volatile
  3171  0015E4  D029               	goto	L9
  3172  0015E6                     l598:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 1121: else {
  3176                           ;main.c: 1122: PORTCbits.RC3 = 1;
  3177  0015E6  8682               	bsf	3970,3,c	;volatile
  3178  0015E8  D7F1               	goto	l13615
  3179  0015EA                     l600:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 1128: if ( PORTCbits.RC4 ) {
  3183  0015EA  A882               	btfss	3970,4,c	;volatile
  3184  0015EC  D002               	goto	l601
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 1129: PORTCbits.RC4 = 0;
  3188  0015EE  9882               	bcf	3970,4,c	;volatile
  3189  0015F0  D023               	goto	L9
  3190  0015F2                     l601:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 1132: else {
  3194                           ;main.c: 1133: PORTCbits.RC4 = 1;
  3195  0015F2  8882               	bsf	3970,4,c	;volatile
  3196  0015F4  D7EB               	goto	l13615
  3197  0015F6                     l603:
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 1139: if ( PORTCbits.RC5 ) {
  3201  0015F6  AA82               	btfss	3970,5,c	;volatile
  3202  0015F8  D002               	goto	l604
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 1140: PORTCbits.RC5 = 0;
  3206  0015FA  9A82               	bcf	3970,5,c	;volatile
  3207  0015FC  D01D               	goto	L9
  3208  0015FE                     l604:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 1143: else {
  3212                           ;main.c: 1144: PORTCbits.RC5 = 1;
  3213  0015FE  8A82               	bsf	3970,5,c	;volatile
  3214  001600  D7E5               	goto	l13615
  3215  001602                     l606:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 1150: if ( PORTCbits.RC6 ) {
  3219  001602  AC82               	btfss	3970,6,c	;volatile
  3220  001604  D002               	goto	l607
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 1151: PORTCbits.RC6 = 0;
  3224  001606  9C82               	bcf	3970,6,c	;volatile
  3225  001608  D017               	goto	L9
  3226  00160A                     l607:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 1154: else {
  3230                           ;main.c: 1155: PORTCbits.RC6 = 1;
  3231  00160A  8C82               	bsf	3970,6,c	;volatile
  3232  00160C  D7DF               	goto	l13615
  3233  00160E                     l609:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 1161: if ( PORTCbits.RC7 ) {
  3237  00160E  AE82               	btfss	3970,7,c	;volatile
  3238  001610  D002               	goto	l610
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 1162: PORTCbits.RC7 = 0;
  3242  001612  9E82               	bcf	3970,7,c	;volatile
  3243  001614  D011               	goto	L9
  3244  001616                     l610:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 1165: else {
  3248                           ;main.c: 1166: PORTCbits.RC7 = 1;
  3249  001616  8E82               	bsf	3970,7,c	;volatile
  3250  001618  D7D9               	goto	l13615
  3251  00161A                     l612:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 1172: if ( PORTAbits.RA2 ) {
  3255  00161A  A480               	btfss	3968,2,c	;volatile
  3256  00161C  D002               	goto	l613
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 1173: PORTAbits.RA2 = 0;
  3260  00161E  9480               	bcf	3968,2,c	;volatile
  3261  001620  D00B               	goto	L9
  3262  001622                     l613:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 1176: else {
  3266                           ;main.c: 1177: PORTAbits.RA2 = 1;
  3267  001622  8480               	bsf	3968,2,c	;volatile
  3268  001624  D7D3               	goto	l13615
  3269  001626                     l615:
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;main.c: 1183: if ( PORTAbits.RA1 ) {
  3273  001626  A280               	btfss	3968,1,c	;volatile
  3274  001628  D002               	goto	l616
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 1184: PORTAbits.RA1 = 0;
  3278  00162A  9280               	bcf	3968,1,c	;volatile
  3279  00162C  D005               	goto	L9
  3280  00162E                     l616:
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;main.c: 1187: else {
  3284                           ;main.c: 1188: PORTAbits.RA1 = 1;
  3285  00162E  8280               	bsf	3968,1,c	;volatile
  3286  001630  D7CD               	goto	l13615
  3287  001632                     l618:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 1194: if ( PORTAbits.RA0 ) {
  3291  001632  A080               	btfss	3968,0,c	;volatile
  3292  001634  D003               	goto	l619
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;main.c: 1195: PORTAbits.RA0 = 0;
  3296  001636  9080               	bcf	3968,0,c	;volatile
  3297  001638                     L9:
  3298                           
  3299                           ;main.c: 1196: bOn = 0;
  3300  001638  6BFC               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  3301                           
  3302                           ;main.c: 1197: }
  3303  00163A  D017               	goto	l13657
  3304  00163C                     l619:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 1198: else {
  3308                           ;main.c: 1199: PORTAbits.RA0 = 1;
  3309  00163C  8080               	bsf	3968,0,c	;volatile
  3310  00163E  D7C6               	goto	l13615
  3311  001640                     l13655:
  3312                           
  3313                           ; BSR set to: 1
  3314  001640  0100               	movlb	0	; () banked
  3315  001642  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3316                           
  3317                           ; Switch size 1, requested type "space"
  3318                           ; Number of cases is 10, Range of values is 0 to 9
  3319                           ; switch strategies available:
  3320                           ; Name         Instructions Cycles
  3321                           ; simple_byte           31    16 (average)
  3322                           ;	Chosen strategy is simple_byte
  3323  001644  E0BE               	bz	l590
  3324  001646  0A01               	xorlw	1	; case 1
  3325  001648  E0C4               	bz	l594
  3326  00164A  0A03               	xorlw	3	; case 2
  3327  00164C  E0C8               	bz	l597
  3328  00164E  0A01               	xorlw	1	; case 3
  3329  001650  E0CC               	bz	l600
  3330  001652  0A07               	xorlw	7	; case 4
  3331  001654  E0D0               	bz	l603
  3332  001656  0A01               	xorlw	1	; case 5
  3333  001658  E0D4               	bz	l606
  3334  00165A  0A03               	xorlw	3	; case 6
  3335  00165C  E0D8               	bz	l609
  3336  00165E  0A01               	xorlw	1	; case 7
  3337  001660  E0DC               	bz	l612
  3338  001662  0A0F               	xorlw	15	; case 8
  3339  001664  E0E0               	bz	l615
  3340  001666  0A01               	xorlw	1	; case 9
  3341  001668  E0E4               	bz	l618
  3342  00166A                     l13657:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 1206: channel_pulse_timer[ i ] =
  3346                           ;main.c: 1207: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3347                           ;main.c: 1209: Read_b_eep(0x43 + 46 + 0u + 2 * i);
  3348  00166A  D97C               	call	PL34	;call to abstracted procedure
  3349  00166C  EC27  F023         	call	_Read_b_eep	;wreg free
  3350  001670  0100               	movlb	0	; () banked
  3351  001672  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3352  001674  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3353  001676  D976               	call	PL34	;call to abstracted procedure
  3354  001678  EC27  F023         	call	_Read_b_eep	;wreg free
  3355  00167C  0100               	movlb	0	; () banked
  3356  00167E  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3357  001680  0E00               	movlw	0
  3358  001682  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3359  001684  D958               	call	PL26	;call to abstracted procedure
  3360  001686  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3361  00168A  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3362                           
  3363                           ; BSR set to: 1
  3364                           ;main.c: 1212: if ( bOn ) {
  3365  00168E  51FC               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  3366  001690  E02A               	bz	l621
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 1215: if ( Read_b_eep(0x43 + 24 + i) &
  3370                           ;main.c: 1216: 0x04) {
  3371  001692  D97F               	call	PL50	;call to abstracted procedure
  3372  001694  EC27  F023         	call	_Read_b_eep	;wreg free
  3373  001698  0100               	movlb	0	; () banked
  3374  00169A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3375  00169C  A5D2               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3376  00169E  D019               	goto	l13665
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 1217: channel_protection_timer[ i ] =
  3380                           ;main.c: 1218: Read_b_eep(0x43 + 46 + 20u + 2 * i) * 256 +
  3381                           ;main.c: 1220: Read_b_eep(0x43 + 46 + 21u + 2 * i);
  3382  0016A0  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3383  0016A2  0D02               	mullw	2
  3384  0016A4  0E85               	movlw	133
  3385  0016A6  24F3               	addwf	prodl,w,c
  3386  0016A8  6E08               	movwf	?_Read_b_eep,c
  3387  0016AA  0E00               	movlw	0
  3388  0016AC  20F4               	addwfc	prodh,w,c
  3389  0016AE  6E09               	movwf	?_Read_b_eep+1,c
  3390  0016B0  EC27  F023         	call	_Read_b_eep	;wreg free
  3391  0016B4  0100               	movlb	0	; () banked
  3392  0016B6  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3393  0016B8  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3394  0016BA  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3395  0016BC  0D02               	mullw	2
  3396  0016BE  0E86               	movlw	134
  3397  0016C0  24F3               	addwf	prodl,w,c
  3398  0016C2  6E08               	movwf	?_Read_b_eep,c
  3399  0016C4  0E00               	movlw	0
  3400  0016C6  20F4               	addwfc	prodh,w,c
  3401  0016C8  6E09               	movwf	?_Read_b_eep+1,c
  3402  0016CA  EC27  F023         	call	_Read_b_eep	;wreg free
  3403  0016CE  0100               	movlb	0	; () banked
  3404  0016D0  D93B               	call	PL32	;call to abstracted procedure
  3405  0016D2                     l13665:
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 1222: }
  3409                           ;main.c: 1224: if ( ctrlreg & 0x08 ) {
  3410  0016D2  A7FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  3411  0016D4  D02C               	goto	l13673
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 1225: SendInformationEvent( i,
  3415                           ;main.c: 1226: 20,
  3416                           ;main.c: 1227: 3);
  3417  0016D6  0E14               	movlw	20
  3418  0016D8  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3419  0016DA  0E03               	movlw	3
  3420  0016DC  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3421  0016DE  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3422  0016E0  EC5A  F020         	call	_SendInformationEvent
  3423  0016E4  D024               	goto	l13673
  3424  0016E6                     l621:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 1232: else {
  3428                           ;main.c: 1234: if ( ctrlreg & 0x10 ) {
  3429  0016E6  A9FD               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  3430  0016E8  D022               	goto	l13673
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;main.c: 1235: SendInformationEvent( i, 20,
  3434                           ;main.c: 1236: 4);
  3435  0016EA  0E14               	movlw	20
  3436  0016EC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3437  0016EE  0E04               	movlw	4
  3438  0016F0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3439  0016F2  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3440  0016F4  EC5A  F020         	call	_SendInformationEvent
  3441  0016F8  D01A               	goto	l13673
  3442  0016FA                     l13671:
  3443                           
  3444                           ; BSR set to: 1
  3445                           ;main.c: 1244: else {
  3446                           ;main.c: 1246: channel_pulse_timer[ i ] =
  3447                           ;main.c: 1247: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3448                           ;main.c: 1249: Read_b_eep(0x43 + 46 + 1u + 2 * i);
  3449  0016FA  0100               	movlb	0	; () banked
  3450  0016FC  D933               	call	PL34	;call to abstracted procedure
  3451  0016FE  EC27  F023         	call	_Read_b_eep	;wreg free
  3452  001702  0100               	movlb	0	; () banked
  3453  001704  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3454  001706  6BD2               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3455  001708  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3456  00170A  0D02               	mullw	2
  3457  00170C  0E72               	movlw	114
  3458  00170E  24F3               	addwf	prodl,w,c
  3459  001710  6E08               	movwf	?_Read_b_eep,c
  3460  001712  0E00               	movlw	0
  3461  001714  20F4               	addwfc	prodh,w,c
  3462  001716  6E09               	movwf	?_Read_b_eep+1,c
  3463  001718  EC27  F023         	call	_Read_b_eep	;wreg free
  3464  00171C  0100               	movlb	0	; () banked
  3465  00171E  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3466  001720  0E00               	movlw	0
  3467  001722  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3468  001724  D908               	call	PL26	;call to abstracted procedure
  3469  001726  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3470  00172A  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3471  00172E                     l13673:
  3472  00172E  0100               	movlb	0	; () banked
  3473  001730  2BFE               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  3474  001732  D623               	goto	l13501
  3475  001734                     l13677:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;main.c: 1251: }
  3479                           ;main.c: 1253: }
  3480                           ;main.c: 1255: }
  3481                           ;main.c: 1257: }
  3482                           ;main.c: 1261: if ( Read_b_eep(0x43 + 45) ) {
  3483  001734  6A09               	clrf	?_Read_b_eep+1,c
  3484  001736  0E70               	movlw	112
  3485  001738  6E08               	movwf	?_Read_b_eep,c
  3486  00173A  EC27  F023         	call	_Read_b_eep	;wreg free
  3487  00173E  0900               	iorlw	0
  3488  001740  E04F               	bz	l13685
  3489                           
  3490                           ;main.c: 1263: uint8_t data[ 3 ];
  3491                           ;main.c: 1265: data[ 0 ] = 0;
  3492  001742  0100               	movlb	0	; () banked
  3493  001744  6BF8               	clrf	doApplicationOneSecondWork@data& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 1266: data[ 1 ] = ( PORTAbits.RA0 << 1 ) +
  3497                           ;main.c: 1267: PORTAbits.RA1;
  3498  001746  3080               	rrcf	3968,w,c	;volatile
  3499  001748  0B01               	andlw	1
  3500  00174A  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3501  00174C  5080               	movf	3968,w,c	;volatile
  3502  00174E  0B01               	andlw	1
  3503  001750  0D02               	mullw	2
  3504  001752  50F3               	movf	prodl,w,c
  3505  001754  25D2               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3506  001756  6FF9               	movwf	(doApplicationOneSecondWork@data+1)& (0+255),b
  3507                           
  3508                           ;main.c: 1268: data[ 2 ] = ( PORTAbits.RA2 << 7 ) +
  3509                           ;main.c: 1269: ( PORTCbits.RC7 << 6 ) +
  3510                           ;main.c: 1270: ( PORTCbits.RC6 << 5 ) +
  3511                           ;main.c: 1271: ( PORTCbits.RC5 << 4 ) +
  3512                           ;main.c: 1272: ( PORTCbits.RC4 << 3 ) +
  3513                           ;main.c: 1273: ( PORTCbits.RC3 << 2 ) +
  3514                           ;main.c: 1274: ( PORTBbits.RB1 << 1 ) +
  3515                           ;main.c: 1275: PORTBbits.RB0;
  3516  001758  5081               	movf	3969,w,c	;volatile
  3517  00175A  0B01               	andlw	1
  3518  00175C  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3519  00175E  3081               	rrcf	3969,w,c	;volatile
  3520  001760  0B01               	andlw	1
  3521  001762  0D02               	mullw	2
  3522  001764  CFF3 F0D3          	movff	prodl,??_doApplicationOneSecondWork+1
  3523  001768  3082               	rrcf	3970,w,c	;volatile
  3524  00176A  32E8               	rrcf	wreg,f,c
  3525  00176C  32E8               	rrcf	wreg,f,c
  3526  00176E  0B01               	andlw	1
  3527  001770  0D04               	mullw	4
  3528  001772  CFF3 F0D4          	movff	prodl,??_doApplicationOneSecondWork+2
  3529  001776  3882               	swapf	3970,w,c	;volatile
  3530  001778  0B01               	andlw	1
  3531  00177A  0D08               	mullw	8
  3532  00177C  CFF3 F0D5          	movff	prodl,??_doApplicationOneSecondWork+3
  3533  001780  3882               	swapf	3970,w,c	;volatile
  3534  001782  32E8               	rrcf	wreg,f,c
  3535  001784  0B01               	andlw	1
  3536  001786  0D10               	mullw	16
  3537  001788  CFF3 F0D6          	movff	prodl,??_doApplicationOneSecondWork+4
  3538  00178C  3882               	swapf	3970,w,c	;volatile
  3539  00178E  32E8               	rrcf	wreg,f,c
  3540  001790  32E8               	rrcf	wreg,f,c
  3541  001792  0B01               	andlw	1
  3542  001794  0D20               	mullw	32
  3543  001796  CFF3 F0D7          	movff	prodl,??_doApplicationOneSecondWork+5
  3544  00179A  3482               	rlcf	3970,w,c	;volatile
  3545  00179C  36E8               	rlcf	wreg,f,c
  3546  00179E  0B01               	andlw	1
  3547  0017A0  0D40               	mullw	64
  3548  0017A2  CFF3 F0D8          	movff	prodl,??_doApplicationOneSecondWork+6
  3549  0017A6  3080               	rrcf	3968,w,c	;volatile
  3550  0017A8  32E8               	rrcf	wreg,f,c
  3551  0017AA  0B01               	andlw	1
  3552  0017AC  0D80               	mullw	128
  3553  0017AE  50F3               	movf	prodl,w,c
  3554  0017B0  25D8               	addwf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3555  0017B2  25D7               	addwf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3556  0017B4  25D6               	addwf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3557  0017B6  25D5               	addwf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3558  0017B8  25D4               	addwf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3559  0017BA  25D3               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3560  0017BC  25D2               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3561  0017BE  6FFA               	movwf	(doApplicationOneSecondWork@data+2)& (0+255),b
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;main.c: 1278: sendVSCPFrame( 15,
  3565                           ;main.c: 1279: 1,
  3566                           ;main.c: 1280: vscp_nickname,
  3567                           ;main.c: 1281: 0x03,
  3568                           ;main.c: 1282: 3,
  3569                           ;main.c: 1283: data );
  3570  0017C0  6A40               	clrf	?_sendVSCPFrame+1,c
  3571  0017C2  0E0F               	movlw	15
  3572  0017C4  6E3F               	movwf	?_sendVSCPFrame,c
  3573  0017C6  0E01               	movlw	1
  3574  0017C8  6E41               	movwf	?_sendVSCPFrame+2,c
  3575  0017CA  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3576  0017CE  0E03               	movlw	3
  3577  0017D0  6E43               	movwf	?_sendVSCPFrame+4,c
  3578  0017D2  6E44               	movwf	?_sendVSCPFrame+5,c
  3579  0017D4  0E00               	movlw	high doApplicationOneSecondWork@data
  3580  0017D6  6E46               	movwf	?_sendVSCPFrame+7,c
  3581  0017D8  0EF8               	movlw	low doApplicationOneSecondWork@data
  3582  0017DA  6E45               	movwf	?_sendVSCPFrame+6,c
  3583  0017DC  EC3D  F01F         	call	_sendVSCPFrame	;wreg free
  3584  0017E0                     l13685:
  3585                           
  3586                           ;main.c: 1284: }
  3587                           ;main.c: 1287: current_iostate = ( PORTAbits.RA0 << 9 ) +
  3588                           ;main.c: 1288: ( PORTAbits.RA1 << 8 ) +
  3589                           ;main.c: 1289: ( PORTAbits.RA2 << 7 ) +
  3590                           ;main.c: 1290: ( PORTCbits.RC7 << 6 ) +
  3591                           ;main.c: 1291: ( PORTCbits.RC6 << 5 ) +
  3592                           ;main.c: 1292: ( PORTCbits.RC5 << 4 ) +
  3593                           ;main.c: 1293: ( PORTCbits.RC4 << 3 ) +
  3594                           ;main.c: 1294: ( PORTCbits.RC3 << 2 ) +
  3595                           ;main.c: 1295: ( PORTBbits.RB1 << 1 ) +
  3596                           ;main.c: 1296: PORTBbits.RB0;
  3597  0017E0  5081               	movf	3969,w,c	;volatile
  3598  0017E2  0B01               	andlw	1
  3599  0017E4  0100               	movlb	0	; () banked
  3600  0017E6  6FD2               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3601  0017E8  3081               	rrcf	3969,w,c	;volatile
  3602  0017EA  0B01               	andlw	1
  3603  0017EC  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3604  0017EE  90D8               	bcf	status,0,c
  3605  0017F0  35D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3606  0017F2  6FD4               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3607  0017F4  6BD5               	clrf	(??_doApplicationOneSecondWork+3)& (0+255),b
  3608  0017F6  37D5               	rlcf	(??_doApplicationOneSecondWork+3)& (0+255),f,b
  3609  0017F8  3082               	rrcf	3970,w,c	;volatile
  3610  0017FA  32E8               	rrcf	wreg,f,c
  3611  0017FC  32E8               	rrcf	wreg,f,c
  3612  0017FE  0B01               	andlw	1
  3613  001800  6FD6               	movwf	(??_doApplicationOneSecondWork+4)& (0+255),b
  3614  001802  6BD7               	clrf	(??_doApplicationOneSecondWork+5)& (0+255),b
  3615  001804  90D8               	bcf	status,0,c
  3616  001806  37D6               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3617  001808  37D7               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3618  00180A  90D8               	bcf	status,0,c
  3619  00180C  37D6               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3620  00180E  37D7               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3621  001810  3882               	swapf	3970,w,c	;volatile
  3622  001812  0B01               	andlw	1
  3623  001814  6FD8               	movwf	(??_doApplicationOneSecondWork+6)& (0+255),b
  3624  001816  6BD9               	clrf	(??_doApplicationOneSecondWork+7)& (0+255),b
  3625  001818  90D8               	bcf	status,0,c
  3626  00181A  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3627  00181C  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3628  00181E  90D8               	bcf	status,0,c
  3629  001820  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3630  001822  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3631  001824  90D8               	bcf	status,0,c
  3632  001826  37D8               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3633  001828  37D9               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3634  00182A  3882               	swapf	3970,w,c	;volatile
  3635  00182C  32E8               	rrcf	wreg,f,c
  3636  00182E  0B01               	andlw	1
  3637  001830  6FDA               	movwf	(??_doApplicationOneSecondWork+8)& (0+255),b
  3638  001832  6BDB               	clrf	(??_doApplicationOneSecondWork+9)& (0+255),b
  3639  001834  3BDA               	swapf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3640  001836  3BDB               	swapf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3641  001838  0EF0               	movlw	240
  3642  00183A  17DB               	andwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3643  00183C  51DA               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3644  00183E  0B0F               	andlw	15
  3645  001840  13DB               	iorwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3646  001842  0EF0               	movlw	240
  3647  001844  17DA               	andwf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3648  001846  3882               	swapf	3970,w,c	;volatile
  3649  001848  32E8               	rrcf	wreg,f,c
  3650  00184A  32E8               	rrcf	wreg,f,c
  3651  00184C  0B01               	andlw	1
  3652  00184E  6FDC               	movwf	(??_doApplicationOneSecondWork+10)& (0+255),b
  3653  001850  6BDD               	clrf	(??_doApplicationOneSecondWork+11)& (0+255),b
  3654  001852  0E05               	movlw	5
  3655  001854                     u18065:
  3656  001854  90D8               	bcf	status,0,c
  3657  001856  37DC               	rlcf	(??_doApplicationOneSecondWork+10)& (0+255),f,b
  3658  001858  37DD               	rlcf	(??_doApplicationOneSecondWork+11)& (0+255),f,b
  3659  00185A  2EE8               	decfsz	wreg,f,c
  3660  00185C  D7FB               	goto	u18065
  3661  00185E  3482               	rlcf	3970,w,c	;volatile
  3662  001860  36E8               	rlcf	wreg,f,c
  3663  001862  0B01               	andlw	1
  3664  001864  6FDE               	movwf	(??_doApplicationOneSecondWork+12)& (0+255),b
  3665  001866  6BDF               	clrf	(??_doApplicationOneSecondWork+13)& (0+255),b
  3666  001868  0E06               	movlw	6
  3667  00186A                     u18075:
  3668  00186A  90D8               	bcf	status,0,c
  3669  00186C  37DE               	rlcf	(??_doApplicationOneSecondWork+12)& (0+255),f,b
  3670  00186E  37DF               	rlcf	(??_doApplicationOneSecondWork+13)& (0+255),f,b
  3671  001870  2EE8               	decfsz	wreg,f,c
  3672  001872  D7FB               	goto	u18075
  3673  001874  3080               	rrcf	3968,w,c	;volatile
  3674  001876  32E8               	rrcf	wreg,f,c
  3675  001878  0B01               	andlw	1
  3676  00187A  6FE0               	movwf	(??_doApplicationOneSecondWork+14)& (0+255),b
  3677  00187C  6BE1               	clrf	(??_doApplicationOneSecondWork+15)& (0+255),b
  3678  00187E  0E07               	movlw	7
  3679  001880                     u18085:
  3680  001880  90D8               	bcf	status,0,c
  3681  001882  37E0               	rlcf	(??_doApplicationOneSecondWork+14)& (0+255),f,b
  3682  001884  37E1               	rlcf	(??_doApplicationOneSecondWork+15)& (0+255),f,b
  3683  001886  2EE8               	decfsz	wreg,f,c
  3684  001888  D7FB               	goto	u18085
  3685  00188A  3080               	rrcf	3968,w,c	;volatile
  3686  00188C  0B01               	andlw	1
  3687  00188E  6FE3               	movwf	(??_doApplicationOneSecondWork+17)& (0+255),b
  3688  001890  6BE2               	clrf	(??_doApplicationOneSecondWork+16)& (0+255),b
  3689  001892  5080               	movf	3968,w,c	;volatile
  3690  001894  0B01               	andlw	1
  3691  001896  6FE4               	movwf	(??_doApplicationOneSecondWork+18)& (0+255),b
  3692  001898  6BE5               	clrf	(??_doApplicationOneSecondWork+19)& (0+255),b
  3693  00189A  0E09               	movlw	9
  3694  00189C                     u18095:
  3695  00189C  90D8               	bcf	status,0,c
  3696  00189E  37E4               	rlcf	(??_doApplicationOneSecondWork+18)& (0+255),f,b
  3697  0018A0  37E5               	rlcf	(??_doApplicationOneSecondWork+19)& (0+255),f,b
  3698  0018A2  2EE8               	decfsz	wreg,f,c
  3699  0018A4  D7FB               	goto	u18095
  3700  0018A6  51E2               	movf	(??_doApplicationOneSecondWork+16)& (0+255),w,b
  3701  0018A8  25E4               	addwf	(??_doApplicationOneSecondWork+18)& (0+255),w,b
  3702  0018AA  6FE6               	movwf	(??_doApplicationOneSecondWork+20)& (0+255),b
  3703  0018AC  51E3               	movf	(??_doApplicationOneSecondWork+17)& (0+255),w,b
  3704  0018AE  21E5               	addwfc	(??_doApplicationOneSecondWork+19)& (0+255),w,b
  3705  0018B0  6FE7               	movwf	(??_doApplicationOneSecondWork+21)& (0+255),b
  3706  0018B2  51E0               	movf	(??_doApplicationOneSecondWork+14)& (0+255),w,b
  3707  0018B4  25E6               	addwf	(??_doApplicationOneSecondWork+20)& (0+255),w,b
  3708  0018B6  6FE8               	movwf	(??_doApplicationOneSecondWork+22)& (0+255),b
  3709  0018B8  51E1               	movf	(??_doApplicationOneSecondWork+15)& (0+255),w,b
  3710  0018BA  21E7               	addwfc	(??_doApplicationOneSecondWork+21)& (0+255),w,b
  3711  0018BC  6FE9               	movwf	(??_doApplicationOneSecondWork+23)& (0+255),b
  3712  0018BE  51DE               	movf	(??_doApplicationOneSecondWork+12)& (0+255),w,b
  3713  0018C0  25E8               	addwf	(??_doApplicationOneSecondWork+22)& (0+255),w,b
  3714  0018C2  6FEA               	movwf	(??_doApplicationOneSecondWork+24)& (0+255),b
  3715  0018C4  51DF               	movf	(??_doApplicationOneSecondWork+13)& (0+255),w,b
  3716  0018C6  21E9               	addwfc	(??_doApplicationOneSecondWork+23)& (0+255),w,b
  3717  0018C8  6FEB               	movwf	(??_doApplicationOneSecondWork+25)& (0+255),b
  3718  0018CA  51DC               	movf	(??_doApplicationOneSecondWork+10)& (0+255),w,b
  3719  0018CC  25EA               	addwf	(??_doApplicationOneSecondWork+24)& (0+255),w,b
  3720  0018CE  6FEC               	movwf	(??_doApplicationOneSecondWork+26)& (0+255),b
  3721  0018D0  51DD               	movf	(??_doApplicationOneSecondWork+11)& (0+255),w,b
  3722  0018D2  21EB               	addwfc	(??_doApplicationOneSecondWork+25)& (0+255),w,b
  3723  0018D4  6FED               	movwf	(??_doApplicationOneSecondWork+27)& (0+255),b
  3724  0018D6  51DA               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3725  0018D8  25EC               	addwf	(??_doApplicationOneSecondWork+26)& (0+255),w,b
  3726  0018DA  6FEE               	movwf	(??_doApplicationOneSecondWork+28)& (0+255),b
  3727  0018DC  51DB               	movf	(??_doApplicationOneSecondWork+9)& (0+255),w,b
  3728  0018DE  21ED               	addwfc	(??_doApplicationOneSecondWork+27)& (0+255),w,b
  3729  0018E0  6FEF               	movwf	(??_doApplicationOneSecondWork+29)& (0+255),b
  3730  0018E2  51D8               	movf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3731  0018E4  25EE               	addwf	(??_doApplicationOneSecondWork+28)& (0+255),w,b
  3732  0018E6  6FF0               	movwf	(??_doApplicationOneSecondWork+30)& (0+255),b
  3733  0018E8  51D9               	movf	(??_doApplicationOneSecondWork+7)& (0+255),w,b
  3734  0018EA  21EF               	addwfc	(??_doApplicationOneSecondWork+29)& (0+255),w,b
  3735  0018EC  6FF1               	movwf	(??_doApplicationOneSecondWork+31)& (0+255),b
  3736  0018EE  51D6               	movf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3737  0018F0  25F0               	addwf	(??_doApplicationOneSecondWork+30)& (0+255),w,b
  3738  0018F2  6FF2               	movwf	(??_doApplicationOneSecondWork+32)& (0+255),b
  3739  0018F4  51D7               	movf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3740  0018F6  21F1               	addwfc	(??_doApplicationOneSecondWork+31)& (0+255),w,b
  3741  0018F8  6FF3               	movwf	(??_doApplicationOneSecondWork+33)& (0+255),b
  3742  0018FA  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3743  0018FC  25F2               	addwf	(??_doApplicationOneSecondWork+32)& (0+255),w,b
  3744  0018FE  6FF4               	movwf	(??_doApplicationOneSecondWork+34)& (0+255),b
  3745  001900  51D5               	movf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3746  001902  21F3               	addwfc	(??_doApplicationOneSecondWork+33)& (0+255),w,b
  3747  001904  6FF5               	movwf	(??_doApplicationOneSecondWork+35)& (0+255),b
  3748  001906  51D2               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  3749  001908  25F4               	addwf	(??_doApplicationOneSecondWork+34)& (0+255),w,b
  3750  00190A  6F6A               	movwf	_current_iostate& (0+255),b
  3751  00190C  0E00               	movlw	0
  3752  00190E  21F5               	addwfc	(??_doApplicationOneSecondWork+35)& (0+255),w,b
  3753  001910  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756  001912  0012               	return	
  3757  001914                     __end_of_doApplicationOneSecondWork:
  3758                           	opt stack 0
  3759  001914                     PL14:
  3760                           	opt stack 21
  3761  001914  0E01               	movlw	1
  3762  001916  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3763  001918  6BD4               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3764  00191A  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3765  00191C  D003               	goto	u17634
  3766  00191E                     u17635:
  3767  00191E  90D8               	bcf	status,0,c
  3768  001920  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3769  001922  37D4               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3770  001924                     u17634:
  3771  001924  2FD2               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3772  001926  D7FB               	goto	u17635
  3773  001928  516A               	movf	_current_iostate& (0+255),w,b
  3774  00192A  17D3               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3775  00192C  516B               	movf	(_current_iostate+1)& (0+255),w,b
  3776  00192E  17D4               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3777  001930  51D4               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3778  001932  11D3               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3779  001934  0012               	return	
  3780  001936                     __end_ofPL14:
  3781                           	opt stack 0
  3782  001936                     PL26:
  3783                           	opt stack 21
  3784  001936  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3785  001938  0D02               	mullw	2
  3786  00193A  0E00               	movlw	low _channel_pulse_timer
  3787  00193C  24F3               	addwf	prodl,w,c
  3788  00193E  6ED9               	movwf	fsr2l,c
  3789  001940  0E01               	movlw	high _channel_pulse_timer
  3790  001942  20F4               	addwfc	prodh,w,c
  3791  001944  6EDA               	movwf	fsr2h,c
  3792  001946  0012               	return	
  3793  001948                     __end_ofPL26:
  3794                           	opt stack 0
  3795  001948                     PL32:
  3796                           	opt stack 21
  3797  001948  27D2               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3798  00194A  0E00               	movlw	0
  3799  00194C  23D3               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3800  00194E  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3801  001950  0D02               	mullw	2
  3802  001952  50F3               	movf	prodl,w,c
  3803  001954  0F83               	addlw	low _channel_protection_timer
  3804  001956  6ED9               	movwf	fsr2l,c
  3805  001958  6ADA               	clrf	fsr2h,c
  3806  00195A  C0D2  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3807  00195E  C0D3  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3808  001962  0012               	return	
  3809  001964                     __end_ofPL32:
  3810                           	opt stack 0
  3811  001964                     PL34:
  3812                           	opt stack 21
  3813  001964  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3814  001966  0D02               	mullw	2
  3815  001968  0E71               	movlw	113
  3816  00196A  24F3               	addwf	prodl,w,c
  3817  00196C  6E08               	movwf	?_Read_b_eep,c
  3818  00196E  0E00               	movlw	0
  3819  001970  20F4               	addwfc	prodh,w,c
  3820  001972  6E09               	movwf	?_Read_b_eep+1,c
  3821  001974  0012               	return	
  3822  001976                     __end_ofPL34:
  3823                           	opt stack 0
  3824  001976                     PL36:
  3825                           	opt stack 21
  3826  001976  51FE               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3827  001978  0D02               	mullw	2
  3828  00197A  50F3               	movf	prodl,w,c
  3829  00197C  0F83               	addlw	low _channel_protection_timer
  3830  00197E  6ED9               	movwf	fsr2l,c
  3831  001980  6ADA               	clrf	fsr2h,c
  3832  001982  0012               	return	
  3833  001984                     __end_ofPL36:
  3834                           	opt stack 0
  3835  001984                     PL38:
  3836                           	opt stack 21
  3837  001984  C0FE  F0D2         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3838  001988  0E01               	movlw	1
  3839  00198A  6FD3               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3840  00198C  6BD4               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3841  00198E  2BD2               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3842  001990  0012               	return	
  3843  001992                     __end_ofPL38:
  3844                           	opt stack 0
  3845  001992                     PL50:
  3846                           	opt stack 21
  3847  001992  0E5B               	movlw	91
  3848  001994  25FE               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3849  001996  6E08               	movwf	?_Read_b_eep,c
  3850  001998  6A09               	clrf	?_Read_b_eep+1,c
  3851  00199A  0E00               	movlw	0
  3852  00199C  2209               	addwfc	?_Read_b_eep+1,f,c
  3853  00199E  0C00               	retlw	0
  3854  0019A0                     __end_ofPL50:
  3855                           	opt stack 0
  3856  0019A0                     PL104:
  3857                           	opt stack 21
  3858  0019A0  90D8               	bcf	status,0,c
  3859  0019A2  37D3               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3860  0019A4  37D4               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3861  0019A6  0012               	return	
  3862  0019A8                     __end_ofPL104:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           intcon	equ	0xFF2
  3871                           intcon2	equ	0xFF1
  3872                           postinc0	equ	0xFEE
  3873                           wreg	equ	0xFE8
  3874                           indf1	equ	0xFE7
  3875                           fsr1h	equ	0xFE2
  3876                           fsr1l	equ	0xFE1
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           plusw2	equ	0xFDB
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _vscp_doOneSecondWork *****************
  3886 ;; Defined at:
  3887 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : F/0
  3898 ;;		On exit  : F/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3901 ;;      Params:         0       0       0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0
  3903 ;;      Temps:          1       0       0       0       0       0       0
  3904 ;;      Totals:         1       0       0       0       0       0       0
  3905 ;;Total ram usage:        1 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    8
  3908 ;; This function calls:
  3909 ;;		_vscp_getZone
  3910 ;;		_vscp_getSubzone
  3911 ;;		_vscp_sendHeartBeat
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text3
  3918  004106                     __ptext3:
  3919                           	opt stack 0
  3920  004106                     _vscp_doOneSecondWork:
  3921                           	opt stack 21
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;vscp_firmware.c: 526: ++vscp_second;
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;incstack = 0
  3928                           ;incstack = 0
  3929  004106  2B82               	incf	_vscp_second& (0+255),f,b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  3933  004108  0E3B               	movlw	59
  3934  00410A  6582               	cpfsgt	_vscp_second& (0+255),b
  3935  00410C  D00D               	goto	l13477
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;vscp_firmware.c: 529: vscp_second = 0;
  3939  00410E  6B82               	clrf	_vscp_second& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;vscp_firmware.c: 530: vscp_minute++;
  3943  004110  2B7D               	incf	_vscp_minute& (0+255),f,b
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  3947  004112  517F               	movf	_vscp_node_state& (0+255),w,b
  3948  004114  0A03               	xorlw	3
  3949  004116  E108               	bnz	l13477
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  3953                           ;vscp_firmware.c: 535: vscp_getSubzone());
  3954  004118  EC39  F023         	call	_vscp_getSubzone	;wreg free
  3955  00411C  0100               	movlb	0	; () banked
  3956  00411E  6FD0               	movwf	?_vscp_sendHeartBeat& (0+255),b
  3957  004120  EC3E  F023         	call	_vscp_getZone	;wreg free
  3958  004124  ECE1  F021         	call	_vscp_sendHeartBeat
  3959  004128                     l13477:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;vscp_firmware.c: 536: }
  3963                           ;vscp_firmware.c: 537: }
  3964                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  3965  004128  0E3B               	movlw	59
  3966  00412A  657D               	cpfsgt	_vscp_minute& (0+255),b
  3967  00412C  D002               	goto	l13483
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;vscp_firmware.c: 540: vscp_minute = 0;
  3971  00412E  6B7D               	clrf	_vscp_minute& (0+255),b
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;vscp_firmware.c: 541: vscp_hour++;
  3975  004130  2B7B               	incf	_vscp_hour& (0+255),f,b
  3976  004132                     l13483:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;vscp_firmware.c: 542: }
  3980                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  3981  004132  0E17               	movlw	23
  3982  004134  657B               	cpfsgt	_vscp_hour& (0+255),b
  3983  004136  D001               	goto	l13487
  3984                           
  3985                           ; BSR set to: 0
  3986  004138  6B7B               	clrf	_vscp_hour& (0+255),b
  3987  00413A                     l13487:
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  3991  00413A  517F               	movf	_vscp_node_state& (0+255),w,b
  3992  00413C  0A03               	xorlw	3
  3993  00413E  E109               	bnz	l1356
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  3997  004140  2B7A               	incf	_vscp_guid_reset& (0+255),f,b
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  4001  004142  C07A  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  4002  004146  0E0F               	movlw	15
  4003  004148  164D               	andwf	??_vscp_doOneSecondWork,f,c
  4004  00414A  0E02               	movlw	2
  4005  00414C  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  4006  00414E  B0D8               	btfsc	status,0,c
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  4010  004150  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  4011  004152                     l1356:
  4012                           
  4013                           ; BSR set to: 0
  4014  004152  0012               	return	
  4015  004154                     __end_of_vscp_doOneSecondWork:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           intcon2	equ	0xFF1
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf1	equ	0xFE7
  4028                           fsr1h	equ	0xFE2
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           plusw2	equ	0xFDB
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _vscp_sendHeartBeat *****************
  4039 ;; Defined at:
  4040 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  zone            1    wreg     unsigned char 
  4043 ;;  subzone         1   20[BANK0 ] unsigned char 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  zone            1   75[COMRAM] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;		None               void
  4048 ;; Registers used:
  4049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : F/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4055 ;;      Params:         0       1       0       0       0       0       0
  4056 ;;      Locals:         1       0       0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0
  4058 ;;      Totals:         1       1       0       0       0       0       0
  4059 ;;Total ram usage:        2 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    7
  4062 ;; This function calls:
  4063 ;;		_vscp_sendEvent
  4064 ;; This function is called by:
  4065 ;;		_vscp_doOneSecondWork
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text4
  4070  0043C2                     __ptext4:
  4071                           	opt stack 0
  4072  0043C2                     _vscp_sendHeartBeat:
  4073                           	opt stack 21
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;incstack = 0
  4077                           ;incstack = 0
  4078                           ;vscp_sendHeartBeat@zone stored from wreg
  4079  0043C2  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  4080                           
  4081                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4082  0043C6  0E83               	movlw	131
  4083  0043C8  0100               	movlb	0	; () banked
  4084  0043CA  6FA5               	movwf	_vscp_omsg& (0+255),b
  4085                           
  4086                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4087  0043CC  0E07               	movlw	7
  4088  0043CE  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  4089                           
  4090                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4091  0043D0  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  4092  0043D2  0E14               	movlw	20
  4093  0043D4  6FA7               	movwf	(_vscp_omsg+2)& (0+255),b
  4094                           
  4095                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4096  0043D6  0E09               	movlw	9
  4097  0043D8  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4101  0043DA  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  4105  0043DC  C04C  F0AB         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  4109  0043E0  C0D0  F0AC         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;vscp_firmware.c: 388: vscp_sendEvent();
  4113  0043E4  EF1A  F022         	goto	_vscp_sendEvent	;wreg free
  4114  0043E8                     __end_of_vscp_sendHeartBeat:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           intcon2	equ	0xFF1
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           indf1	equ	0xFE7
  4127                           fsr1h	equ	0xFE2
  4128                           fsr1l	equ	0xFE1
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           plusw2	equ	0xFDB
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function _vscp_getSubzone *****************
  4138 ;; Defined at:
  4139 ;;		line 1400 in file "../main.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      unsigned char 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : F/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4153 ;;      Params:         0       0       0       0       0       0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0
  4156 ;;      Totals:         0       0       0       0       0       0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    3
  4160 ;; This function calls:
  4161 ;;		_Read_b_eep
  4162 ;; This function is called by:
  4163 ;;		_vscp_doOneSecondWork
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text5
  4168  004672                     __ptext5:
  4169                           	opt stack 0
  4170  004672                     _vscp_getSubzone:
  4171                           	opt stack 25
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;main.c: 1401: return Read_b_eep(0x43 + 1);
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;incstack = 0
  4178                           ;incstack = 0
  4179  004672  6A09               	clrf	?_Read_b_eep+1,c
  4180  004674  0E44               	movlw	68
  4181  004676  6E08               	movwf	?_Read_b_eep,c
  4182  004678  EF27  F023         	goto	_Read_b_eep	;wreg free
  4183  00467C                     __end_of_vscp_getSubzone:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           intcon	equ	0xFF2
  4192                           intcon2	equ	0xFF1
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           indf1	equ	0xFE7
  4196                           fsr1h	equ	0xFE2
  4197                           fsr1l	equ	0xFE1
  4198                           indf2	equ	0xFDF
  4199                           postinc2	equ	0xFDE
  4200                           postdec2	equ	0xFDD
  4201                           plusw2	equ	0xFDB
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _vscp_getZone *****************
  4207 ;; Defined at:
  4208 ;;		line 1391 in file "../main.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      unsigned char 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : F/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4222 ;;      Params:         0       0       0       0       0       0       0
  4223 ;;      Locals:         0       0       0       0       0       0       0
  4224 ;;      Temps:          0       0       0       0       0       0       0
  4225 ;;      Totals:         0       0       0       0       0       0       0
  4226 ;;Total ram usage:        0 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    3
  4229 ;; This function calls:
  4230 ;;		_Read_b_eep
  4231 ;; This function is called by:
  4232 ;;		_vscp_doOneSecondWork
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text6
  4237  00467C                     __ptext6:
  4238                           	opt stack 0
  4239  00467C                     _vscp_getZone:
  4240                           	opt stack 25
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;main.c: 1392: return Read_b_eep(0x43 + 0);
  4244                           
  4245                           ;incstack = 0
  4246                           ;incstack = 0
  4247  00467C  6A09               	clrf	?_Read_b_eep+1,c
  4248  00467E  0E43               	movlw	67
  4249  004680  6E08               	movwf	?_Read_b_eep,c
  4250  004682  EF27  F023         	goto	_Read_b_eep	;wreg free
  4251  004686                     __end_of_vscp_getZone:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           intcon2	equ	0xFF1
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           indf1	equ	0xFE7
  4264                           fsr1h	equ	0xFE2
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           plusw2	equ	0xFDB
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _vscp_error *****************
  4275 ;; Defined at:
  4276 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;		None               void
  4283 ;; Registers used:
  4284 ;;		None
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4290 ;;      Params:         0       0       0       0       0       0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0
  4293 ;;      Totals:         0       0       0       0       0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_main
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text7
  4305  0046BC                     __ptext7:
  4306                           	opt stack 0
  4307  0046BC                     _vscp_error:
  4308                           	opt stack 27
  4309                           
  4310                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  4311                           
  4312                           ;incstack = 0
  4313                           ;incstack = 0
  4314  0046BC  6A56               	clrf	_vscp_initledfunc,c
  4315  0046BE  0012               	return	
  4316  0046C0                     __end_of_vscp_error:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           intcon2	equ	0xFF1
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           indf1	equ	0xFE7
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           plusw2	equ	0xFDB
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _doDM *****************
  4340 ;; Defined at:
  4341 ;;		line 2538 in file "../main.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  class_mask      2   32[BANK0 ] unsigned short 
  4346 ;;  class_filter    2   30[BANK0 ] unsigned short 
  4347 ;;  i               1   44[BANK0 ] unsigned char 
  4348 ;;  dmflags         1   43[BANK0 ] unsigned char 
  4349 ;;  type_mask       1   35[BANK0 ] unsigned char 
  4350 ;;  type_filter     1   34[BANK0 ] unsigned char 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : E/0
  4357 ;;		On exit  : F/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4360 ;;      Params:         0       0       0       0       0       0       0
  4361 ;;      Locals:         0      15       0       0       0       0       0
  4362 ;;      Temps:          0       3       0       0       0       0       0
  4363 ;;      Totals:         0      18       0       0       0       0       0
  4364 ;;Total ram usage:       18 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    9
  4367 ;; This function calls:
  4368 ;;		_Read_b_eep
  4369 ;;		_doActionOff
  4370 ;;		_doActionOn
  4371 ;;		_doActionPulseOn
  4372 ;;		_doActionPulseOff
  4373 ;;		_doActionStatus
  4374 ;;		_doActionStatusAll
  4375 ;;		_doActionToggle
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text8
  4382  002A32                     __ptext8:
  4383                           	opt stack 0
  4384  002A32                     _doDM:
  4385                           	opt stack 20
  4386                           
  4387                           ;main.c: 2539: unsigned char i;
  4388                           ;main.c: 2540: unsigned char dmflags;
  4389                           ;main.c: 2541: unsigned short class_filter;
  4390                           ;main.c: 2542: unsigned short class_mask;
  4391                           ;main.c: 2543: unsigned char type_filter;
  4392                           ;main.c: 2544: unsigned char type_mask;
  4393                           ;main.c: 2547: if ( 0 == vscp_imsg.vscp_class ) return;
  4394                           
  4395                           ;incstack = 0
  4396                           ;incstack = 0
  4397  002A32  0100               	movlb	0	; () banked
  4398  002A34  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  4399  002A36  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  4400  002A38  E101 D105          	bz	l865
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;main.c: 2549: for (i = 0; i<8; i++) {
  4404  002A3C  6BE8               	clrf	doDM@i& (0+255),b
  4405  002A3E                     l13399:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;main.c: 2552: dmflags = Read_b_eep(0x43 + 46 + 40u + 0 + 1 + (8 * i));
  4409  002A3E  51E8               	movf	doDM@i& (0+255),w,b
  4410  002A40  D90D               	call	PL44	;call to abstracted procedure
  4411  002A42  0E9A               	movlw	154
  4412  002A44  25D7               	addwf	??_doDM& (0+255),w,b
  4413  002A46  6E08               	movwf	?_Read_b_eep,c
  4414  002A48  0E00               	movlw	0
  4415  002A4A  21D8               	addwfc	(??_doDM+1)& (0+255),w,b
  4416  002A4C  6E09               	movwf	?_Read_b_eep+1,c
  4417  002A4E  EC27  F023         	call	_Read_b_eep	;wreg free
  4418  002A52  0100               	movlb	0	; () banked
  4419  002A54  6FE7               	movwf	doDM@dmflags& (0+255),b
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;main.c: 2560: if ( dmflags & 0x80 ) {
  4423  002A56  AFE7               	btfss	doDM@dmflags& (0+255),7,b
  4424  002A58  D0F1               	goto	l13461
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 2563: if ( ( dmflags & 0x40 ) &&
  4428                           ;main.c: 2564: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i)) ) ) {
  4429  002A5A  ADE7               	btfss	doDM@dmflags& (0+255),6,b
  4430  002A5C  D00E               	goto	l869
  4431                           
  4432                           ; BSR set to: 0
  4433  002A5E  51E8               	movf	doDM@i& (0+255),w,b
  4434  002A60  D8FD               	call	PL44	;call to abstracted procedure
  4435  002A62  0E99               	movlw	153
  4436  002A64  25D7               	addwf	??_doDM& (0+255),w,b
  4437  002A66  6E08               	movwf	?_Read_b_eep,c
  4438  002A68  0E00               	movlw	0
  4439  002A6A  21D8               	addwfc	(??_doDM+1)& (0+255),w,b
  4440  002A6C  6E09               	movwf	?_Read_b_eep+1,c
  4441  002A6E  EC27  F023         	call	_Read_b_eep	;wreg free
  4442  002A72  0100               	movlb	0	; () banked
  4443  002A74  199C               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  4444  002A76  E001 D0E1          	bnz	l13461
  4445  002A7A                     l869:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 2566: }
  4449                           ;main.c: 2569: if ( dmflags & 0x10 ) {
  4450  002A7A  A9E7               	btfss	doDM@dmflags& (0+255),4,b
  4451  002A7C  D00B               	goto	l871
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;main.c: 2570: if ( 255 != vscp_imsg.data[ 1 ] ) {
  4455  002A7E  299E               	incf	(_vscp_imsg+7)& (0+255),w,b
  4456  002A80  E009               	bz	l871
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;main.c: 2571: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 0) ) {
  4460  002A82  6A09               	clrf	?_Read_b_eep+1,c
  4461  002A84  0E43               	movlw	67
  4462  002A86  6E08               	movwf	?_Read_b_eep,c
  4463  002A88  EC27  F023         	call	_Read_b_eep	;wreg free
  4464  002A8C  0100               	movlb	0	; () banked
  4465  002A8E  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4466  002A90  E001 D0D4          	bnz	l13461
  4467  002A94                     l871:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;main.c: 2573: }
  4471                           ;main.c: 2574: }
  4472                           ;main.c: 2575: }
  4473                           ;main.c: 2578: if ( dmflags & 0x08 ) {
  4474  002A94  A7E7               	btfss	doDM@dmflags& (0+255),3,b
  4475  002A96  D00B               	goto	l13421
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;main.c: 2579: if ( 255 != vscp_imsg.data[ 2 ] ) {
  4479  002A98  299F               	incf	(_vscp_imsg+8)& (0+255),w,b
  4480  002A9A  E009               	bz	l13421
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 2580: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 1) ) {
  4484  002A9C  6A09               	clrf	?_Read_b_eep+1,c
  4485  002A9E  0E44               	movlw	68
  4486  002AA0  6E08               	movwf	?_Read_b_eep,c
  4487  002AA2  EC27  F023         	call	_Read_b_eep	;wreg free
  4488  002AA6  0100               	movlb	0	; () banked
  4489  002AA8  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4490  002AAA  E001 D0C7          	bnz	l13461
  4491  002AAE                     l13421:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;main.c: 2582: }
  4495                           ;main.c: 2583: }
  4496                           ;main.c: 2584: }
  4497                           ;main.c: 2586: class_filter = ( ( dmflags & 0x01) << 8 ) +
  4498                           ;main.c: 2587: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 3);
  4499  002AAE  51E8               	movf	doDM@i& (0+255),w,b
  4500  002AB0  0D08               	mullw	8
  4501  002AB2  0E9C               	movlw	156
  4502  002AB4  24F3               	addwf	prodl,w,c
  4503  002AB6  6E08               	movwf	?_Read_b_eep,c
  4504  002AB8  0E00               	movlw	0
  4505  002ABA  20F4               	addwfc	prodh,w,c
  4506  002ABC  6E09               	movwf	?_Read_b_eep+1,c
  4507  002ABE  EC27  F023         	call	_Read_b_eep	;wreg free
  4508  002AC2  0100               	movlb	0	; () banked
  4509  002AC4  6FD7               	movwf	??_doDM& (0+255),b
  4510  002AC6  51E7               	movf	doDM@dmflags& (0+255),w,b
  4511  002AC8  0B01               	andlw	1
  4512  002ACA  6FD9               	movwf	(??_doDM+2)& (0+255),b
  4513  002ACC  6BD8               	clrf	(??_doDM+1)& (0+255),b
  4514  002ACE  51D7               	movf	??_doDM& (0+255),w,b
  4515  002AD0  25D8               	addwf	(??_doDM+1)& (0+255),w,b
  4516  002AD2  6FDA               	movwf	doDM@class_filter& (0+255),b
  4517  002AD4  0E00               	movlw	0
  4518  002AD6  21D9               	addwfc	(??_doDM+2)& (0+255),w,b
  4519  002AD8  6FDB               	movwf	(doDM@class_filter+1)& (0+255),b
  4520                           
  4521                           ;main.c: 2593: class_mask = ( ( dmflags & 0x02 ) << 7 ) +
  4522                           ;main.c: 2594: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 2);
  4523  002ADA  51E8               	movf	doDM@i& (0+255),w,b
  4524  002ADC  0D08               	mullw	8
  4525  002ADE  0E9B               	movlw	155
  4526  002AE0  24F3               	addwf	prodl,w,c
  4527  002AE2  6E08               	movwf	?_Read_b_eep,c
  4528  002AE4  0E00               	movlw	0
  4529  002AE6  20F4               	addwfc	prodh,w,c
  4530  002AE8  6E09               	movwf	?_Read_b_eep+1,c
  4531  002AEA  EC27  F023         	call	_Read_b_eep	;wreg free
  4532  002AEE  0100               	movlb	0	; () banked
  4533  002AF0  6FD7               	movwf	??_doDM& (0+255),b
  4534  002AF2  51E7               	movf	doDM@dmflags& (0+255),w,b
  4535  002AF4  0B02               	andlw	2
  4536  002AF6  6FD8               	movwf	(??_doDM+1)& (0+255),b
  4537  002AF8  6BD9               	clrf	(??_doDM+2)& (0+255),b
  4538  002AFA  0E07               	movlw	7
  4539  002AFC                     u17475:
  4540  002AFC  90D8               	bcf	status,0,c
  4541  002AFE  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4542  002B00  37D9               	rlcf	(??_doDM+2)& (0+255),f,b
  4543  002B02  2EE8               	decfsz	wreg,f,c
  4544  002B04  D7FB               	goto	u17475
  4545  002B06  51D7               	movf	??_doDM& (0+255),w,b
  4546  002B08  25D8               	addwf	(??_doDM+1)& (0+255),w,b
  4547  002B0A  6FDC               	movwf	doDM@class_mask& (0+255),b
  4548  002B0C  0E00               	movlw	0
  4549  002B0E  21D9               	addwfc	(??_doDM+2)& (0+255),w,b
  4550  002B10  6FDD               	movwf	(doDM@class_mask+1)& (0+255),b
  4551                           
  4552                           ;main.c: 2600: type_filter = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 5);
  4553  002B12  51E8               	movf	doDM@i& (0+255),w,b
  4554  002B14  0D08               	mullw	8
  4555  002B16  0E9E               	movlw	158
  4556  002B18  24F3               	addwf	prodl,w,c
  4557  002B1A  6E08               	movwf	?_Read_b_eep,c
  4558  002B1C  0E00               	movlw	0
  4559  002B1E  20F4               	addwfc	prodh,w,c
  4560  002B20  6E09               	movwf	?_Read_b_eep+1,c
  4561  002B22  EC27  F023         	call	_Read_b_eep	;wreg free
  4562  002B26  0100               	movlb	0	; () banked
  4563  002B28  6FDE               	movwf	doDM@type_filter& (0+255),b
  4564                           
  4565                           ;main.c: 2606: type_mask = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 4);
  4566  002B2A  51E8               	movf	doDM@i& (0+255),w,b
  4567  002B2C  0D08               	mullw	8
  4568  002B2E  0E9D               	movlw	157
  4569  002B30  24F3               	addwf	prodl,w,c
  4570  002B32  6E08               	movwf	?_Read_b_eep,c
  4571  002B34  0E00               	movlw	0
  4572  002B36  20F4               	addwfc	prodh,w,c
  4573  002B38  6E09               	movwf	?_Read_b_eep+1,c
  4574  002B3A  EC27  F023         	call	_Read_b_eep	;wreg free
  4575  002B3E  0100               	movlb	0	; () banked
  4576  002B40  6FDF               	movwf	doDM@type_mask& (0+255),b
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;main.c: 2612: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  4580                           ;main.c: 2613: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  4581  002B42  EE20  F099         	lfsr	2,_vscp_imsg+2
  4582  002B46  CFDE F0D7          	movff	postinc2,??_doDM
  4583  002B4A  CFDD F0D8          	movff	postdec2,??_doDM+1
  4584  002B4E  51DA               	movf	doDM@class_filter& (0+255),w,b
  4585  002B50  1BD7               	xorwf	??_doDM& (0+255),f,b
  4586  002B52  51DB               	movf	(doDM@class_filter+1)& (0+255),w,b
  4587  002B54  1BD8               	xorwf	(??_doDM+1)& (0+255),f,b
  4588  002B56  51DC               	movf	doDM@class_mask& (0+255),w,b
  4589  002B58  17D7               	andwf	??_doDM& (0+255),f,b
  4590  002B5A  51DD               	movf	(doDM@class_mask+1)& (0+255),w,b
  4591  002B5C  17D8               	andwf	(??_doDM+1)& (0+255),f,b
  4592  002B5E  51D8               	movf	(??_doDM+1)& (0+255),w,b
  4593  002B60  11D7               	iorwf	??_doDM& (0+255),w,b
  4594  002B62  E16C               	bnz	l13461
  4595                           
  4596                           ; BSR set to: 0
  4597  002B64  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  4598  002B66  19DE               	xorwf	doDM@type_filter& (0+255),w,b
  4599  002B68  15DF               	andwf	doDM@type_mask& (0+255),w,b
  4600  002B6A  E04E               	bz	l13459
  4601  002B6C  D067               	goto	l13461
  4602  002B6E                     l13429:
  4603                           
  4604                           ;main.c: 2624: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4605  002B6E  D86C               	call	PL16	;call to abstracted procedure
  4606  002B70  EC27  F023         	call	_Read_b_eep	;wreg free
  4607  002B74  0100               	movlb	0	; () banked
  4608  002B76  6FE0               	movwf	_doDM$2393& (0+255),b
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;main.c: 2624: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4612  002B78  C0E0  F04F         	movff	_doDM$2393,?_doActionOn
  4613  002B7C  51E7               	movf	doDM@dmflags& (0+255),w,b
  4614  002B7E  ECDD  F01A         	call	_doActionOn
  4615                           
  4616                           ;main.c: 2627: break;
  4617  002B82  D05C               	goto	l13461
  4618  002B84                     l13433:
  4619                           
  4620                           ;main.c: 2630: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4621  002B84  D861               	call	PL16	;call to abstracted procedure
  4622  002B86  EC27  F023         	call	_Read_b_eep	;wreg free
  4623  002B8A  0100               	movlb	0	; () banked
  4624  002B8C  6FE1               	movwf	_doDM$2394& (0+255),b
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;main.c: 2630: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4628  002B8E  C0E1  F04F         	movff	_doDM$2394,?_doActionOff
  4629  002B92  51E7               	movf	doDM@dmflags& (0+255),w,b
  4630  002B94  EC75  F01E         	call	_doActionOff
  4631                           
  4632                           ;main.c: 2633: break;
  4633  002B98  D051               	goto	l13461
  4634  002B9A                     l13437:
  4635                           
  4636                           ;main.c: 2636: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4637  002B9A  D856               	call	PL16	;call to abstracted procedure
  4638  002B9C  EC27  F023         	call	_Read_b_eep	;wreg free
  4639  002BA0  0100               	movlb	0	; () banked
  4640  002BA2  6FE2               	movwf	_doDM$2395& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;main.c: 2636: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4644  002BA4  C0E2  F04F         	movff	_doDM$2395,?_doActionPulseOn
  4645  002BA8  51E7               	movf	doDM@dmflags& (0+255),w,b
  4646  002BAA  EC43  F01A         	call	_doActionPulseOn
  4647                           
  4648                           ;main.c: 2639: break;
  4649  002BAE  D046               	goto	l13461
  4650  002BB0                     l13441:
  4651                           
  4652                           ;main.c: 2642: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4653  002BB0  D84B               	call	PL16	;call to abstracted procedure
  4654  002BB2  EC27  F023         	call	_Read_b_eep	;wreg free
  4655  002BB6  0100               	movlb	0	; () banked
  4656  002BB8  6FE3               	movwf	_doDM$2396& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;main.c: 2642: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4660  002BBA  C0E3  F04F         	movff	_doDM$2396,?_doActionPulseOff
  4661  002BBE  51E7               	movf	doDM@dmflags& (0+255),w,b
  4662  002BC0  EC0A  F01D         	call	_doActionPulseOff
  4663                           
  4664                           ;main.c: 2645: break;
  4665  002BC4  D03B               	goto	l13461
  4666  002BC6                     l13445:
  4667                           
  4668                           ;main.c: 2648: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4669  002BC6  D840               	call	PL16	;call to abstracted procedure
  4670  002BC8  EC27  F023         	call	_Read_b_eep	;wreg free
  4671  002BCC  0100               	movlb	0	; () banked
  4672  002BCE  6FE4               	movwf	_doDM$2397& (0+255),b
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;main.c: 2648: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4676  002BD0  C0E4  F04F         	movff	_doDM$2397,?_doActionStatus
  4677  002BD4  51E7               	movf	doDM@dmflags& (0+255),w,b
  4678  002BD6  EC06  F01E         	call	_doActionStatus
  4679                           
  4680                           ;main.c: 2651: break;
  4681  002BDA  D030               	goto	l13461
  4682  002BDC                     l13449:
  4683                           
  4684                           ;main.c: 2654: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4685  002BDC  D835               	call	PL16	;call to abstracted procedure
  4686  002BDE  EC27  F023         	call	_Read_b_eep	;wreg free
  4687  002BE2  0100               	movlb	0	; () banked
  4688  002BE4  6FE5               	movwf	_doDM$2398& (0+255),b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;main.c: 2654: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4692  002BE6  C0E5  F0D2         	movff	_doDM$2398,?_doActionStatusAll
  4693  002BEA  51E7               	movf	doDM@dmflags& (0+255),w,b
  4694  002BEC  EC90  F022         	call	_doActionStatusAll
  4695                           
  4696                           ;main.c: 2657: break;
  4697  002BF0  D025               	goto	l13461
  4698  002BF2                     l13453:
  4699                           
  4700                           ;main.c: 2660: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4701  002BF2  D82A               	call	PL16	;call to abstracted procedure
  4702  002BF4  EC27  F023         	call	_Read_b_eep	;wreg free
  4703  002BF8  0100               	movlb	0	; () banked
  4704  002BFA  6FE6               	movwf	_doDM$2399& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;main.c: 2660: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4708  002BFC  C0E6  F04F         	movff	_doDM$2399,?_doActionToggle
  4709  002C00  51E7               	movf	doDM@dmflags& (0+255),w,b
  4710  002C02  EC8A  F01D         	call	_doActionToggle
  4711                           
  4712                           ;main.c: 2663: break;
  4713  002C06  D01A               	goto	l13461
  4714  002C08                     l13459:
  4715                           
  4716                           ; BSR set to: 0
  4717  002C08  51E8               	movf	doDM@i& (0+255),w,b
  4718  002C0A  0D08               	mullw	8
  4719  002C0C  0E9F               	movlw	159
  4720  002C0E  24F3               	addwf	prodl,w,c
  4721  002C10  6E08               	movwf	?_Read_b_eep,c
  4722  002C12  0E00               	movlw	0
  4723  002C14  20F4               	addwfc	prodh,w,c
  4724  002C16  6E09               	movwf	?_Read_b_eep+1,c
  4725  002C18  EC27  F023         	call	_Read_b_eep	;wreg free
  4726                           
  4727                           ; Switch size 1, requested type "space"
  4728                           ; Number of cases is 8, Range of values is 0 to 7
  4729                           ; switch strategies available:
  4730                           ; Name         Instructions Cycles
  4731                           ; simple_byte           25    13 (average)
  4732                           ;	Chosen strategy is simple_byte
  4733  002C1C  0A00               	xorlw	0	; case 0
  4734  002C1E  E00E               	bz	l13461
  4735  002C20  0A01               	xorlw	1	; case 1
  4736  002C22  E0A5               	bz	l13429
  4737  002C24  0A03               	xorlw	3	; case 2
  4738  002C26  E0AE               	bz	l13433
  4739  002C28  0A01               	xorlw	1	; case 3
  4740  002C2A  E0B7               	bz	l13437
  4741  002C2C  0A07               	xorlw	7	; case 4
  4742  002C2E  E0C0               	bz	l13441
  4743  002C30  0A01               	xorlw	1	; case 5
  4744  002C32  E0DF               	bz	l13453
  4745  002C34  0A03               	xorlw	3	; case 6
  4746  002C36  E0C7               	bz	l13445
  4747  002C38  0A01               	xorlw	1	; case 7
  4748  002C3A  E0D0               	bz	l13449
  4749  002C3C                     l13461:
  4750  002C3C  0100               	movlb	0	; () banked
  4751  002C3E  2BE8               	incf	doDM@i& (0+255),f,b
  4752                           
  4753                           ; BSR set to: 0
  4754  002C40  0E07               	movlw	7
  4755  002C42  65E8               	cpfsgt	doDM@i& (0+255),b
  4756  002C44  D6FC               	goto	l13399
  4757  002C46                     l865:
  4758                           
  4759                           ; BSR set to: 0
  4760  002C46  0012               	return	
  4761  002C48                     __end_of_doDM:
  4762                           	opt stack 0
  4763  002C48                     PL16:
  4764                           	opt stack 20
  4765  002C48  0100               	movlb	0	; () banked
  4766  002C4A  51E8               	movf	doDM@i& (0+255),w,b
  4767  002C4C  0D08               	mullw	8
  4768  002C4E  0EA0               	movlw	160
  4769  002C50  24F3               	addwf	prodl,w,c
  4770  002C52  6E08               	movwf	?_Read_b_eep,c
  4771  002C54  0E00               	movlw	0
  4772  002C56  20F4               	addwfc	prodh,w,c
  4773  002C58  6E09               	movwf	?_Read_b_eep+1,c
  4774  002C5A  0012               	return	
  4775  002C5C                     __end_ofPL16:
  4776                           	opt stack 0
  4777  002C5C                     PL44:
  4778                           	opt stack 20
  4779  002C5C  6FD7               	movwf	??_doDM& (0+255),b
  4780  002C5E  6BD8               	clrf	(??_doDM+1)& (0+255),b
  4781  002C60  90D8               	bcf	status,0,c
  4782  002C62  37D7               	rlcf	??_doDM& (0+255),f,b
  4783  002C64  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4784  002C66  90D8               	bcf	status,0,c
  4785  002C68  37D7               	rlcf	??_doDM& (0+255),f,b
  4786  002C6A  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4787  002C6C  90D8               	bcf	status,0,c
  4788  002C6E  37D7               	rlcf	??_doDM& (0+255),f,b
  4789  002C70  37D8               	rlcf	(??_doDM+1)& (0+255),f,b
  4790  002C72  0012               	return	
  4791  002C74                     __end_ofPL44:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           intcon2	equ	0xFF1
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           indf1	equ	0xFE7
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           indf2	equ	0xFDF
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           plusw2	equ	0xFDB
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _doActionToggle *****************
  4815 ;; Defined at:
  4816 ;;		line 3011 in file "../main.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  dmflags         1    wreg     unsigned char 
  4819 ;;  arg             1   78[COMRAM] unsigned char 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  dmflags         1    0[COMRAM] unsigned char 
  4822 ;;  bOn             1   80[COMRAM] enum E15660
  4823 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;		None               void
  4826 ;; Registers used:
  4827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : F/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4833 ;;      Params:         1       0       0       0       0       0       0
  4834 ;;      Locals:         2       0       0       0       0       0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0
  4836 ;;      Totals:         3       0       0       0       0       0       0
  4837 ;;Total ram usage:        3 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    7
  4840 ;; This function calls:
  4841 ;;		_Read_b_eep
  4842 ;;		_SendInformationEvent
  4843 ;; This function is called by:
  4844 ;;		_doDM
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text9
  4849  003B14                     __ptext9:
  4850                           	opt stack 0
  4851  003B14                     _doActionToggle:
  4852                           	opt stack 21
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;main.c: 3012: unsigned char ctrlreg;
  4856                           ;main.c: 3013: BOOL bOn = 0;
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;incstack = 0
  4860                           ;incstack = 0
  4861  003B14  6A51               	clrf	doActionToggle@bOn,c
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;main.c: 3016: if ( arg > 9 ) return;
  4865  003B16  0E09               	movlw	9
  4866  003B18  644F               	cpfsgt	doActionToggle@arg,c
  4867  003B1A  D001               	goto	l14829
  4868  003B1C  D076               	goto	l1004
  4869  003B1E                     l14829:
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;main.c: 3018: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  4873  003B1E  0E5B               	movlw	91
  4874  003B20  244F               	addwf	doActionToggle@arg,w,c
  4875  003B22  6E08               	movwf	?_Read_b_eep,c
  4876  003B24  6A09               	clrf	?_Read_b_eep+1,c
  4877  003B26  0E00               	movlw	0
  4878  003B28  2209               	addwfc	?_Read_b_eep+1,f,c
  4879  003B2A  EC27  F023         	call	_Read_b_eep	;wreg free
  4880  003B2E  6E50               	movwf	doActionToggle@ctrlreg,c
  4881                           
  4882                           ;main.c: 3021: if ( !( ctrlreg & 0x80 ) ) return;
  4883  003B30  AE50               	btfss	doActionToggle@ctrlreg,7,c
  4884  003B32  D06B               	goto	l1004
  4885  003B34  D03F               	goto	l14877
  4886  003B36                     l1007:
  4887                           
  4888                           ;main.c: 3026: if ( PORTBbits.RB0 ) {
  4889  003B36  A081               	btfss	3969,0,c	;volatile
  4890  003B38  D002               	goto	l1008
  4891                           
  4892                           ;main.c: 3027: PORTBbits.RB0 = 0;
  4893  003B3A  9081               	bcf	3969,0,c	;volatile
  4894  003B3C  D037               	goto	L18
  4895  003B3E                     l1008:
  4896                           
  4897                           ;main.c: 3030: else {
  4898                           ;main.c: 3031: PORTBbits.RB0 = 1;
  4899  003B3E  8081               	bsf	3969,0,c	;volatile
  4900  003B40                     l14837:
  4901                           
  4902                           ;main.c: 3032: bOn = 1;
  4903  003B40  0E01               	movlw	1
  4904  003B42  6E51               	movwf	doActionToggle@bOn,c
  4905  003B44  D04B               	goto	l14879
  4906  003B46                     l1011:
  4907                           
  4908                           ;main.c: 3037: if ( PORTBbits.RB1 ) {
  4909  003B46  A281               	btfss	3969,1,c	;volatile
  4910  003B48  D002               	goto	l1012
  4911                           
  4912                           ;main.c: 3038: PORTBbits.RB1 = 0;
  4913  003B4A  9281               	bcf	3969,1,c	;volatile
  4914  003B4C  D02F               	goto	L18
  4915  003B4E                     l1012:
  4916                           
  4917                           ;main.c: 3041: else {
  4918                           ;main.c: 3042: PORTBbits.RB1 = 1;
  4919  003B4E  8281               	bsf	3969,1,c	;volatile
  4920  003B50  D7F7               	goto	l14837
  4921  003B52                     l1014:
  4922                           
  4923                           ;main.c: 3048: if ( PORTCbits.RC3 ) {
  4924  003B52  A682               	btfss	3970,3,c	;volatile
  4925  003B54  D002               	goto	l1015
  4926                           
  4927                           ;main.c: 3049: PORTCbits.RC3 = 0;
  4928  003B56  9682               	bcf	3970,3,c	;volatile
  4929  003B58  D029               	goto	L18
  4930  003B5A                     l1015:
  4931                           
  4932                           ;main.c: 3052: else {
  4933                           ;main.c: 3053: PORTCbits.RC3 = 1;
  4934  003B5A  8682               	bsf	3970,3,c	;volatile
  4935  003B5C  D7F1               	goto	l14837
  4936  003B5E                     l1017:
  4937                           
  4938                           ;main.c: 3059: if ( PORTCbits.RC4 ) {
  4939  003B5E  A882               	btfss	3970,4,c	;volatile
  4940  003B60  D002               	goto	l1018
  4941                           
  4942                           ;main.c: 3060: PORTCbits.RC4 = 0;
  4943  003B62  9882               	bcf	3970,4,c	;volatile
  4944  003B64  D023               	goto	L18
  4945  003B66                     l1018:
  4946                           
  4947                           ;main.c: 3063: else {
  4948                           ;main.c: 3064: PORTCbits.RC4 = 1;
  4949  003B66  8882               	bsf	3970,4,c	;volatile
  4950  003B68  D7EB               	goto	l14837
  4951  003B6A                     l1020:
  4952                           
  4953                           ;main.c: 3070: if ( PORTCbits.RC5 ) {
  4954  003B6A  AA82               	btfss	3970,5,c	;volatile
  4955  003B6C  D002               	goto	l1021
  4956                           
  4957                           ;main.c: 3071: PORTCbits.RC5 = 0;
  4958  003B6E  9A82               	bcf	3970,5,c	;volatile
  4959  003B70  D01D               	goto	L18
  4960  003B72                     l1021:
  4961                           
  4962                           ;main.c: 3074: else {
  4963                           ;main.c: 3075: PORTCbits.RC5 = 1;
  4964  003B72  8A82               	bsf	3970,5,c	;volatile
  4965  003B74  D7E5               	goto	l14837
  4966  003B76                     l1023:
  4967                           
  4968                           ;main.c: 3081: if ( PORTCbits.RC6 ) {
  4969  003B76  AC82               	btfss	3970,6,c	;volatile
  4970  003B78  D002               	goto	l1024
  4971                           
  4972                           ;main.c: 3082: PORTCbits.RC6 = 0;
  4973  003B7A  9C82               	bcf	3970,6,c	;volatile
  4974  003B7C  D017               	goto	L18
  4975  003B7E                     l1024:
  4976                           
  4977                           ;main.c: 3085: else {
  4978                           ;main.c: 3086: PORTCbits.RC6 = 1;
  4979  003B7E  8C82               	bsf	3970,6,c	;volatile
  4980  003B80  D7DF               	goto	l14837
  4981  003B82                     l1026:
  4982                           
  4983                           ;main.c: 3092: if ( PORTCbits.RC7 ) {
  4984  003B82  AE82               	btfss	3970,7,c	;volatile
  4985  003B84  D002               	goto	l1027
  4986                           
  4987                           ;main.c: 3093: PORTCbits.RC7 = 0;
  4988  003B86  9E82               	bcf	3970,7,c	;volatile
  4989  003B88  D011               	goto	L18
  4990  003B8A                     l1027:
  4991                           
  4992                           ;main.c: 3096: else {
  4993                           ;main.c: 3097: PORTCbits.RC7 = 1;
  4994  003B8A  8E82               	bsf	3970,7,c	;volatile
  4995  003B8C  D7D9               	goto	l14837
  4996  003B8E                     l1029:
  4997                           
  4998                           ;main.c: 3103: if ( PORTAbits.RA2 ) {
  4999  003B8E  A480               	btfss	3968,2,c	;volatile
  5000  003B90  D002               	goto	l1030
  5001                           
  5002                           ;main.c: 3104: PORTAbits.RA2 = 0;
  5003  003B92  9480               	bcf	3968,2,c	;volatile
  5004  003B94  D00B               	goto	L18
  5005  003B96                     l1030:
  5006                           
  5007                           ;main.c: 3107: else {
  5008                           ;main.c: 3108: PORTAbits.RA2 = 1;
  5009  003B96  8480               	bsf	3968,2,c	;volatile
  5010  003B98  D7D3               	goto	l14837
  5011  003B9A                     l1032:
  5012                           
  5013                           ;main.c: 3114: if ( PORTAbits.RA1 ) {
  5014  003B9A  A280               	btfss	3968,1,c	;volatile
  5015  003B9C  D002               	goto	l1033
  5016                           
  5017                           ;main.c: 3115: PORTAbits.RA1 = 0;
  5018  003B9E  9280               	bcf	3968,1,c	;volatile
  5019  003BA0  D005               	goto	L18
  5020  003BA2                     l1033:
  5021                           
  5022                           ;main.c: 3118: else {
  5023                           ;main.c: 3119: PORTAbits.RA1 = 1;
  5024  003BA2  8280               	bsf	3968,1,c	;volatile
  5025  003BA4  D7CD               	goto	l14837
  5026  003BA6                     l1035:
  5027                           
  5028                           ;main.c: 3125: if ( PORTAbits.RA0 ) {
  5029  003BA6  A080               	btfss	3968,0,c	;volatile
  5030  003BA8  D003               	goto	l1036
  5031                           
  5032                           ;main.c: 3126: PORTAbits.RA0 = 0;
  5033  003BAA  9080               	bcf	3968,0,c	;volatile
  5034  003BAC                     L18:
  5035                           
  5036                           ;main.c: 3127: bOn = 0;
  5037  003BAC  6A51               	clrf	doActionToggle@bOn,c
  5038                           
  5039                           ;main.c: 3128: }
  5040  003BAE  D016               	goto	l14879
  5041  003BB0                     l1036:
  5042                           
  5043                           ;main.c: 3129: else {
  5044                           ;main.c: 3130: PORTAbits.RA0 = 1;
  5045  003BB0  8080               	bsf	3968,0,c	;volatile
  5046  003BB2  D7C6               	goto	l14837
  5047  003BB4                     l14877:
  5048  003BB4  504F               	movf	doActionToggle@arg,w,c
  5049                           
  5050                           ; Switch size 1, requested type "space"
  5051                           ; Number of cases is 10, Range of values is 0 to 9
  5052                           ; switch strategies available:
  5053                           ; Name         Instructions Cycles
  5054                           ; simple_byte           31    16 (average)
  5055                           ;	Chosen strategy is simple_byte
  5056  003BB6  E0BF               	bz	l1007
  5057  003BB8  0A01               	xorlw	1	; case 1
  5058  003BBA  E0C5               	bz	l1011
  5059  003BBC  0A03               	xorlw	3	; case 2
  5060  003BBE  E0C9               	bz	l1014
  5061  003BC0  0A01               	xorlw	1	; case 3
  5062  003BC2  E0CD               	bz	l1017
  5063  003BC4  0A07               	xorlw	7	; case 4
  5064  003BC6  E0D1               	bz	l1020
  5065  003BC8  0A01               	xorlw	1	; case 5
  5066  003BCA  E0D5               	bz	l1023
  5067  003BCC  0A03               	xorlw	3	; case 6
  5068  003BCE  E0D9               	bz	l1026
  5069  003BD0  0A01               	xorlw	1	; case 7
  5070  003BD2  E0DD               	bz	l1029
  5071  003BD4  0A0F               	xorlw	15	; case 8
  5072  003BD6  E0E1               	bz	l1032
  5073  003BD8  0A01               	xorlw	1	; case 9
  5074  003BDA  E0E5               	bz	l1035
  5075  003BDC                     l14879:
  5076                           
  5077                           ;main.c: 3136: if ( bOn ) {
  5078  003BDC  5051               	movf	doActionToggle@bOn,w,c
  5079  003BDE  E00B               	bz	l1038
  5080                           
  5081                           ;main.c: 3139: if ( ctrlreg & 0x08 ) {
  5082  003BE0  A650               	btfss	doActionToggle@ctrlreg,3,c
  5083  003BE2  D013               	goto	l1004
  5084                           
  5085                           ;main.c: 3140: SendInformationEvent( arg,
  5086                           ;main.c: 3141: 20,
  5087                           ;main.c: 3142: 3 );
  5088  003BE4  0E14               	movlw	20
  5089  003BE6  0100               	movlb	0	; () banked
  5090  003BE8  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5091  003BEA  0E03               	movlw	3
  5092  003BEC  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5093  003BEE  504F               	movf	doActionToggle@arg,w,c
  5094  003BF0  EC5A  F020         	call	_SendInformationEvent
  5095  003BF4  D00A               	goto	l1004
  5096  003BF6                     l1038:
  5097                           
  5098                           ;main.c: 3146: else {
  5099                           ;main.c: 3149: if ( ctrlreg & 0x10 ) {
  5100  003BF6  A850               	btfss	doActionToggle@ctrlreg,4,c
  5101  003BF8  D008               	goto	l1004
  5102                           
  5103                           ;main.c: 3150: SendInformationEvent( arg,
  5104                           ;main.c: 3151: 20,
  5105                           ;main.c: 3152: 4 );
  5106  003BFA  0E14               	movlw	20
  5107  003BFC  0100               	movlb	0	; () banked
  5108  003BFE  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5109  003C00  0E04               	movlw	4
  5110  003C02  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5111  003C04  504F               	movf	doActionToggle@arg,w,c
  5112  003C06  EC5A  F020         	call	_SendInformationEvent
  5113  003C0A                     l1004:
  5114  003C0A  0012               	return	
  5115  003C0C                     __end_of_doActionToggle:
  5116                           	opt stack 0
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           intcon	equ	0xFF2
  5124                           intcon2	equ	0xFF1
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           indf1	equ	0xFE7
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           indf2	equ	0xFDF
  5131                           postinc2	equ	0xFDE
  5132                           postdec2	equ	0xFDD
  5133                           plusw2	equ	0xFDB
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _doActionStatusAll *****************
  5139 ;; Defined at:
  5140 ;;		line 3247 in file "../main.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  dmflags         1    wreg     unsigned char 
  5143 ;;  arg             1   22[BANK0 ] unsigned char 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  dmflags         1   23[BANK0 ] unsigned char 
  5146 ;;  i               1   24[BANK0 ] unsigned char 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;		None               void
  5149 ;; Registers used:
  5150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : F/0
  5153 ;;		On exit  : F/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5156 ;;      Params:         0       1       0       0       0       0       0
  5157 ;;      Locals:         0       2       0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0
  5159 ;;      Totals:         0       3       0       0       0       0       0
  5160 ;;Total ram usage:        3 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    8
  5163 ;; This function calls:
  5164 ;;		_doActionStatus
  5165 ;; This function is called by:
  5166 ;;		_doDM
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text10
  5171  004520                     __ptext10:
  5172                           	opt stack 0
  5173  004520                     _doActionStatusAll:
  5174                           	opt stack 20
  5175                           
  5176                           ;incstack = 0
  5177                           ;incstack = 0
  5178                           ;doActionStatusAll@dmflags stored from wreg
  5179  004520  CFE8 F0D3          	movff	wreg,doActionStatusAll@dmflags
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;main.c: 3248: uint8_t i;
  5183                           ;main.c: 3250: for ( i=0; i<9; i++ ) {
  5184  004524  6BD4               	clrf	doActionStatusAll@i& (0+255),b
  5185  004526                     l14817:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;main.c: 3251: doActionStatus( dmflags, i );
  5189  004526  C0D4  F04F         	movff	doActionStatusAll@i,?_doActionStatus
  5190  00452A  51D3               	movf	doActionStatusAll@dmflags& (0+255),w,b
  5191  00452C  EC06  F01E         	call	_doActionStatus
  5192  004530  0100               	movlb	0	; () banked
  5193  004532  2BD4               	incf	doActionStatusAll@i& (0+255),f,b
  5194                           
  5195                           ; BSR set to: 0
  5196  004534  0E08               	movlw	8
  5197  004536  65D4               	cpfsgt	doActionStatusAll@i& (0+255),b
  5198  004538  D7F6               	goto	l14817
  5199                           
  5200                           ; BSR set to: 0
  5201  00453A  0C08               	retlw	8
  5202  00453C                     __end_of_doActionStatusAll:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           intcon2	equ	0xFF1
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           indf1	equ	0xFE7
  5215                           fsr1h	equ	0xFE2
  5216                           fsr1l	equ	0xFE1
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           plusw2	equ	0xFDB
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function _doActionStatus *****************
  5226 ;; Defined at:
  5227 ;;		line 3165 in file "../main.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  dmflags         1    wreg     unsigned char 
  5230 ;;  arg             1   78[COMRAM] unsigned char 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  dmflags         1    0[COMRAM] unsigned char 
  5233 ;;  bOn             1   80[COMRAM] enum E15660
  5234 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : F/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5244 ;;      Params:         1       0       0       0       0       0       0
  5245 ;;      Locals:         2       0       0       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0
  5247 ;;      Totals:         3       0       0       0       0       0       0
  5248 ;;Total ram usage:        3 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    7
  5251 ;; This function calls:
  5252 ;;		_Read_b_eep
  5253 ;;		_SendInformationEvent
  5254 ;; This function is called by:
  5255 ;;		_doDM
  5256 ;;		_doActionStatusAll
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text11
  5261  003C0C                     __ptext11:
  5262                           	opt stack 0
  5263  003C0C                     _doActionStatus:
  5264                           	opt stack 20
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;main.c: 3166: unsigned char ctrlreg;
  5268                           ;main.c: 3167: BOOL bOn = 0;
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;incstack = 0
  5272                           ;incstack = 0
  5273  003C0C  6A51               	clrf	doActionStatus@bOn,c
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;main.c: 3170: if ( arg > 9 ) return;
  5277  003C0E  0E09               	movlw	9
  5278  003C10  644F               	cpfsgt	doActionStatus@arg,c
  5279  003C12  D001               	goto	l14773
  5280  003C14  D069               	goto	l1045
  5281  003C16                     l14773:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;main.c: 3172: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5285  003C16  0E5B               	movlw	91
  5286  003C18  244F               	addwf	doActionStatus@arg,w,c
  5287  003C1A  6E08               	movwf	?_Read_b_eep,c
  5288  003C1C  6A09               	clrf	?_Read_b_eep+1,c
  5289  003C1E  0E00               	movlw	0
  5290  003C20  2209               	addwfc	?_Read_b_eep+1,f,c
  5291  003C22  EC27  F023         	call	_Read_b_eep	;wreg free
  5292  003C26  6E50               	movwf	doActionStatus@ctrlreg,c
  5293                           
  5294                           ;main.c: 3175: if ( !( ctrlreg & 0x80 ) ) return;
  5295  003C28  AE50               	btfss	doActionStatus@ctrlreg,7,c
  5296  003C2A  D05E               	goto	l1045
  5297  003C2C  D032               	goto	l14801
  5298  003C2E                     l14779:
  5299                           
  5300                           ;main.c: 3180: bOn = PORTBbits.RB0;
  5301  003C2E  0E00               	movlw	0
  5302  003C30  B081               	btfsc	3969,0,c	;volatile
  5303  003C32  0E01               	movlw	1
  5304  003C34  6E51               	movwf	doActionStatus@bOn,c
  5305                           
  5306                           ;main.c: 3181: break;
  5307  003C36  D041               	goto	l14803
  5308  003C38                     l14781:
  5309                           
  5310                           ;main.c: 3184: bOn = PORTBbits.RB1;
  5311  003C38  0E00               	movlw	0
  5312  003C3A  B281               	btfsc	3969,1,c	;volatile
  5313  003C3C  0E01               	movlw	1
  5314  003C3E  6E51               	movwf	doActionStatus@bOn,c
  5315                           
  5316                           ;main.c: 3185: break;
  5317  003C40  D03C               	goto	l14803
  5318  003C42                     l14783:
  5319                           
  5320                           ;main.c: 3188: bOn = PORTCbits.RC3;
  5321  003C42  0E00               	movlw	0
  5322  003C44  B682               	btfsc	3970,3,c	;volatile
  5323  003C46  0E01               	movlw	1
  5324  003C48  6E51               	movwf	doActionStatus@bOn,c
  5325                           
  5326                           ;main.c: 3189: break;
  5327  003C4A  D037               	goto	l14803
  5328  003C4C                     l14785:
  5329                           
  5330                           ;main.c: 3192: bOn = PORTCbits.RC4;
  5331  003C4C  0E00               	movlw	0
  5332  003C4E  B882               	btfsc	3970,4,c	;volatile
  5333  003C50  0E01               	movlw	1
  5334  003C52  6E51               	movwf	doActionStatus@bOn,c
  5335                           
  5336                           ;main.c: 3193: break;
  5337  003C54  D032               	goto	l14803
  5338  003C56                     l14787:
  5339                           
  5340                           ;main.c: 3196: bOn = PORTCbits.RC5;
  5341  003C56  0E00               	movlw	0
  5342  003C58  BA82               	btfsc	3970,5,c	;volatile
  5343  003C5A  0E01               	movlw	1
  5344  003C5C  6E51               	movwf	doActionStatus@bOn,c
  5345                           
  5346                           ;main.c: 3197: break;
  5347  003C5E  D02D               	goto	l14803
  5348  003C60                     l14789:
  5349                           
  5350                           ;main.c: 3200: bOn = PORTCbits.RC6;
  5351  003C60  0E00               	movlw	0
  5352  003C62  BC82               	btfsc	3970,6,c	;volatile
  5353  003C64  0E01               	movlw	1
  5354  003C66  6E51               	movwf	doActionStatus@bOn,c
  5355                           
  5356                           ;main.c: 3201: break;
  5357  003C68  D028               	goto	l14803
  5358  003C6A                     l14791:
  5359                           
  5360                           ;main.c: 3204: bOn = PORTCbits.RC7;
  5361  003C6A  0E00               	movlw	0
  5362  003C6C  BE82               	btfsc	3970,7,c	;volatile
  5363  003C6E  0E01               	movlw	1
  5364  003C70  6E51               	movwf	doActionStatus@bOn,c
  5365                           
  5366                           ;main.c: 3205: break;
  5367  003C72  D023               	goto	l14803
  5368  003C74                     l14793:
  5369                           
  5370                           ;main.c: 3208: bOn = PORTAbits.RA2;
  5371  003C74  0E00               	movlw	0
  5372  003C76  B480               	btfsc	3968,2,c	;volatile
  5373  003C78  0E01               	movlw	1
  5374  003C7A  6E51               	movwf	doActionStatus@bOn,c
  5375                           
  5376                           ;main.c: 3209: break;
  5377  003C7C  D01E               	goto	l14803
  5378  003C7E                     l14795:
  5379                           
  5380                           ;main.c: 3212: bOn = PORTAbits.RA1;
  5381  003C7E  0E00               	movlw	0
  5382  003C80  B280               	btfsc	3968,1,c	;volatile
  5383  003C82  0E01               	movlw	1
  5384  003C84  6E51               	movwf	doActionStatus@bOn,c
  5385                           
  5386                           ;main.c: 3213: break;
  5387  003C86  D019               	goto	l14803
  5388  003C88                     l14797:
  5389                           
  5390                           ;main.c: 3216: bOn = PORTAbits.RA0;
  5391  003C88  0E00               	movlw	0
  5392  003C8A  B080               	btfsc	3968,0,c	;volatile
  5393  003C8C  0E01               	movlw	1
  5394  003C8E  6E51               	movwf	doActionStatus@bOn,c
  5395                           
  5396                           ;main.c: 3217: break;
  5397  003C90  D014               	goto	l14803
  5398  003C92                     l14801:
  5399  003C92  504F               	movf	doActionStatus@arg,w,c
  5400                           
  5401                           ; Switch size 1, requested type "space"
  5402                           ; Number of cases is 10, Range of values is 0 to 9
  5403                           ; switch strategies available:
  5404                           ; Name         Instructions Cycles
  5405                           ; simple_byte           31    16 (average)
  5406                           ;	Chosen strategy is simple_byte
  5407  003C94  E0CC               	bz	l14779
  5408  003C96  0A01               	xorlw	1	; case 1
  5409  003C98  E0CF               	bz	l14781
  5410  003C9A  0A03               	xorlw	3	; case 2
  5411  003C9C  E0D2               	bz	l14783
  5412  003C9E  0A01               	xorlw	1	; case 3
  5413  003CA0  E0D5               	bz	l14785
  5414  003CA2  0A07               	xorlw	7	; case 4
  5415  003CA4  E0D8               	bz	l14787
  5416  003CA6  0A01               	xorlw	1	; case 5
  5417  003CA8  E0DB               	bz	l14789
  5418  003CAA  0A03               	xorlw	3	; case 6
  5419  003CAC  E0DE               	bz	l14791
  5420  003CAE  0A01               	xorlw	1	; case 7
  5421  003CB0  E0E1               	bz	l14793
  5422  003CB2  0A0F               	xorlw	15	; case 8
  5423  003CB4  E0E4               	bz	l14795
  5424  003CB6  0A01               	xorlw	1	; case 9
  5425  003CB8  E0E7               	bz	l14797
  5426  003CBA                     l14803:
  5427                           
  5428                           ;main.c: 3221: if ( bOn ) {
  5429  003CBA  5051               	movf	doActionStatus@bOn,w,c
  5430  003CBC  E00B               	bz	l1059
  5431                           
  5432                           ;main.c: 3224: if ( ctrlreg & 0x10 ) {
  5433  003CBE  A850               	btfss	doActionStatus@ctrlreg,4,c
  5434  003CC0  D013               	goto	l1045
  5435                           
  5436                           ;main.c: 3225: SendInformationEvent( arg,
  5437                           ;main.c: 3226: 20,
  5438                           ;main.c: 3227: 4 );
  5439  003CC2  0E14               	movlw	20
  5440  003CC4  0100               	movlb	0	; () banked
  5441  003CC6  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5442  003CC8  0E04               	movlw	4
  5443  003CCA  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5444  003CCC  504F               	movf	doActionStatus@arg,w,c
  5445  003CCE  EC5A  F020         	call	_SendInformationEvent
  5446  003CD2  D00A               	goto	l1045
  5447  003CD4                     l1059:
  5448                           
  5449                           ;main.c: 3231: else {
  5450                           ;main.c: 3233: if ( ctrlreg & 0x10 ) {
  5451  003CD4  A850               	btfss	doActionStatus@ctrlreg,4,c
  5452  003CD6  D008               	goto	l1045
  5453                           
  5454                           ;main.c: 3234: SendInformationEvent( arg,
  5455                           ;main.c: 3235: 20,
  5456                           ;main.c: 3236: 4 );
  5457  003CD8  0E14               	movlw	20
  5458  003CDA  0100               	movlb	0	; () banked
  5459  003CDC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5460  003CDE  0E04               	movlw	4
  5461  003CE0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5462  003CE2  504F               	movf	doActionStatus@arg,w,c
  5463  003CE4  EC5A  F020         	call	_SendInformationEvent
  5464  003CE8                     l1045:
  5465  003CE8  0012               	return	
  5466  003CEA                     __end_of_doActionStatus:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           intcon2	equ	0xFF1
  5476                           postinc0	equ	0xFEE
  5477                           wreg	equ	0xFE8
  5478                           indf1	equ	0xFE7
  5479                           fsr1h	equ	0xFE2
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           plusw2	equ	0xFDB
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function _doActionPulseOff *****************
  5490 ;; Defined at:
  5491 ;;		line 2931 in file "../main.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  dmflags         1    wreg     unsigned char 
  5494 ;;  arg             1   78[COMRAM] unsigned char 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  dmflags         1    0[COMRAM] unsigned char 
  5497 ;;  bEvent          1   80[COMRAM] enum E15660
  5498 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;		None               void
  5501 ;; Registers used:
  5502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5503 ;; Tracked objects:
  5504 ;;		On entry : F/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5508 ;;      Params:         1       0       0       0       0       0       0
  5509 ;;      Locals:         2       0       0       0       0       0       0
  5510 ;;      Temps:          0       5       0       0       0       0       0
  5511 ;;      Totals:         3       5       0       0       0       0       0
  5512 ;;Total ram usage:        8 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:    7
  5515 ;; This function calls:
  5516 ;;		_Read_b_eep
  5517 ;;		_SendInformationEvent
  5518 ;; This function is called by:
  5519 ;;		_doDM
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text12
  5524  003A14                     __ptext12:
  5525                           	opt stack 0
  5526  003A14                     _doActionPulseOff:
  5527                           	opt stack 21
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;main.c: 2932: unsigned char ctrlreg;
  5531                           ;main.c: 2933: BOOL bEvent = 0;
  5532                           
  5533                           ;incstack = 0
  5534                           ;incstack = 0
  5535  003A14  6A51               	clrf	doActionPulseOff@bEvent,c
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;main.c: 2936: if ( arg > 9 ) return;
  5539  003A16  0E09               	movlw	9
  5540  003A18  644F               	cpfsgt	doActionPulseOff@arg,c
  5541  003A1A  D001               	goto	l14709
  5542  003A1C  D07A               	goto	l976
  5543  003A1E                     l14709:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;main.c: 2938: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5547  003A1E  0E5B               	movlw	91
  5548  003A20  244F               	addwf	doActionPulseOff@arg,w,c
  5549  003A22  6E08               	movwf	?_Read_b_eep,c
  5550  003A24  6A09               	clrf	?_Read_b_eep+1,c
  5551  003A26  0E00               	movlw	0
  5552  003A28  2209               	addwfc	?_Read_b_eep+1,f,c
  5553  003A2A  EC27  F023         	call	_Read_b_eep	;wreg free
  5554  003A2E  6E50               	movwf	doActionPulseOff@ctrlreg,c
  5555                           
  5556                           ;main.c: 2941: if ( !( ctrlreg & 0x80 ) ) return;
  5557  003A30  AE50               	btfss	doActionPulseOff@ctrlreg,7,c
  5558  003A32  D06F               	goto	l976
  5559  003A34  D039               	goto	l14757
  5560  003A36                     l979:
  5561                           
  5562                           ;main.c: 2946: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5563  003A36  A081               	btfss	3969,0,c	;volatile
  5564  003A38  D002               	goto	l14717
  5565  003A3A  0E01               	movlw	1
  5566  003A3C  6E51               	movwf	doActionPulseOff@bEvent,c
  5567  003A3E                     l14717:
  5568                           
  5569                           ;main.c: 2947: PORTBbits.RB0 = 0;
  5570  003A3E  9081               	bcf	3969,0,c	;volatile
  5571                           
  5572                           ;main.c: 2948: break;
  5573  003A40  D047               	goto	l14759
  5574  003A42                     l982:
  5575                           
  5576                           ;main.c: 2951: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5577  003A42  A281               	btfss	3969,1,c	;volatile
  5578  003A44  D002               	goto	l14721
  5579  003A46  0E01               	movlw	1
  5580  003A48  6E51               	movwf	doActionPulseOff@bEvent,c
  5581  003A4A                     l14721:
  5582                           
  5583                           ;main.c: 2952: PORTBbits.RB1 = 0;
  5584  003A4A  9281               	bcf	3969,1,c	;volatile
  5585                           
  5586                           ;main.c: 2953: break;
  5587  003A4C  D041               	goto	l14759
  5588  003A4E                     l984:
  5589                           
  5590                           ;main.c: 2956: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5591  003A4E  A682               	btfss	3970,3,c	;volatile
  5592  003A50  D002               	goto	l14725
  5593  003A52  0E01               	movlw	1
  5594  003A54  6E51               	movwf	doActionPulseOff@bEvent,c
  5595  003A56                     l14725:
  5596                           
  5597                           ;main.c: 2957: PORTCbits.RC3 = 0;
  5598  003A56  9682               	bcf	3970,3,c	;volatile
  5599                           
  5600                           ;main.c: 2958: break;
  5601  003A58  D03B               	goto	l14759
  5602  003A5A                     l986:
  5603                           
  5604                           ;main.c: 2961: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5605  003A5A  A882               	btfss	3970,4,c	;volatile
  5606  003A5C  D002               	goto	l14729
  5607  003A5E  0E01               	movlw	1
  5608  003A60  6E51               	movwf	doActionPulseOff@bEvent,c
  5609  003A62                     l14729:
  5610                           
  5611                           ;main.c: 2962: PORTCbits.RC4 = 0;
  5612  003A62  9882               	bcf	3970,4,c	;volatile
  5613                           
  5614                           ;main.c: 2963: break;
  5615  003A64  D035               	goto	l14759
  5616  003A66                     l988:
  5617                           
  5618                           ;main.c: 2966: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5619  003A66  AA82               	btfss	3970,5,c	;volatile
  5620  003A68  D002               	goto	l14733
  5621  003A6A  0E01               	movlw	1
  5622  003A6C  6E51               	movwf	doActionPulseOff@bEvent,c
  5623  003A6E                     l14733:
  5624                           
  5625                           ;main.c: 2967: PORTCbits.RC5 = 0;
  5626  003A6E  9A82               	bcf	3970,5,c	;volatile
  5627                           
  5628                           ;main.c: 2968: break;
  5629  003A70  D02F               	goto	l14759
  5630  003A72                     l990:
  5631                           
  5632                           ;main.c: 2971: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5633  003A72  AC82               	btfss	3970,6,c	;volatile
  5634  003A74  D002               	goto	l14737
  5635  003A76  0E01               	movlw	1
  5636  003A78  6E51               	movwf	doActionPulseOff@bEvent,c
  5637  003A7A                     l14737:
  5638                           
  5639                           ;main.c: 2972: PORTCbits.RC6 = 0;
  5640  003A7A  9C82               	bcf	3970,6,c	;volatile
  5641                           
  5642                           ;main.c: 2973: break;
  5643  003A7C  D029               	goto	l14759
  5644  003A7E                     l992:
  5645                           
  5646                           ;main.c: 2976: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5647  003A7E  AE82               	btfss	3970,7,c	;volatile
  5648  003A80  D002               	goto	l14741
  5649  003A82  0E01               	movlw	1
  5650  003A84  6E51               	movwf	doActionPulseOff@bEvent,c
  5651  003A86                     l14741:
  5652                           
  5653                           ;main.c: 2977: PORTCbits.RC7 = 0;
  5654  003A86  9E82               	bcf	3970,7,c	;volatile
  5655                           
  5656                           ;main.c: 2978: break;
  5657  003A88  D023               	goto	l14759
  5658  003A8A                     l994:
  5659                           
  5660                           ;main.c: 2981: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5661  003A8A  A480               	btfss	3968,2,c	;volatile
  5662  003A8C  D002               	goto	l14745
  5663  003A8E                     l14743:
  5664  003A8E  0E01               	movlw	1
  5665  003A90  6E51               	movwf	doActionPulseOff@bEvent,c
  5666  003A92                     l14745:
  5667                           
  5668                           ;main.c: 2982: PORTAbits.RA2 = 0;
  5669  003A92  9480               	bcf	3968,2,c	;volatile
  5670                           
  5671                           ;main.c: 2983: break;
  5672  003A94  D01D               	goto	l14759
  5673  003A96                     l996:
  5674                           
  5675                           ;main.c: 2986: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5676  003A96  A280               	btfss	3968,1,c	;volatile
  5677  003A98  D002               	goto	l14749
  5678  003A9A  0E01               	movlw	1
  5679  003A9C  6E51               	movwf	doActionPulseOff@bEvent,c
  5680  003A9E                     l14749:
  5681                           
  5682                           ;main.c: 2987: PORTAbits.RA1 = 0;
  5683  003A9E  9280               	bcf	3968,1,c	;volatile
  5684                           
  5685                           ;main.c: 2988: break;
  5686  003AA0  D017               	goto	l14759
  5687  003AA2                     l998:
  5688                           
  5689                           ;main.c: 2991: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5690  003AA2  B080               	btfsc	3968,0,c	;volatile
  5691  003AA4  D7F4               	goto	l14743
  5692  003AA6  D7F5               	goto	l14745
  5693  003AA8                     l14757:
  5694  003AA8  504F               	movf	doActionPulseOff@arg,w,c
  5695                           
  5696                           ; Switch size 1, requested type "space"
  5697                           ; Number of cases is 10, Range of values is 0 to 9
  5698                           ; switch strategies available:
  5699                           ; Name         Instructions Cycles
  5700                           ; simple_byte           31    16 (average)
  5701                           ;	Chosen strategy is simple_byte
  5702  003AAA  E0C5               	bz	l979
  5703  003AAC  0A01               	xorlw	1	; case 1
  5704  003AAE  E0C9               	bz	l982
  5705  003AB0  0A03               	xorlw	3	; case 2
  5706  003AB2  E0CD               	bz	l984
  5707  003AB4  0A01               	xorlw	1	; case 3
  5708  003AB6  E0D1               	bz	l986
  5709  003AB8  0A07               	xorlw	7	; case 4
  5710  003ABA  E0D5               	bz	l988
  5711  003ABC  0A01               	xorlw	1	; case 5
  5712  003ABE  E0D9               	bz	l990
  5713  003AC0  0A03               	xorlw	3	; case 6
  5714  003AC2  E0DD               	bz	l992
  5715  003AC4  0A01               	xorlw	1	; case 7
  5716  003AC6  E0E1               	bz	l994
  5717  003AC8  0A0F               	xorlw	15	; case 8
  5718  003ACA  E0E5               	bz	l996
  5719  003ACC  0A01               	xorlw	1	; case 9
  5720  003ACE  E0E9               	bz	l998
  5721  003AD0                     l14759:
  5722                           
  5723                           ;main.c: 2998: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  5724  003AD0  5051               	movf	doActionPulseOff@bEvent,w,c
  5725  003AD2  A4D8               	btfss	status,2,c
  5726  003AD4  A850               	btfss	doActionPulseOff@ctrlreg,4,c
  5727  003AD6  D008               	goto	l14765
  5728                           
  5729                           ;main.c: 2999: SendInformationEvent( arg, 20, 4 );
  5730  003AD8  0E14               	movlw	20
  5731  003ADA  0100               	movlb	0	; () banked
  5732  003ADC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5733  003ADE  0E04               	movlw	4
  5734  003AE0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5735  003AE2  504F               	movf	doActionPulseOff@arg,w,c
  5736  003AE4  EC5A  F020         	call	_SendInformationEvent
  5737  003AE8                     l14765:
  5738                           
  5739                           ;main.c: 3000: }
  5740                           ;main.c: 3002: channel_pulse_flags &= ~( 1 << arg );
  5741  003AE8  C04F  F0D2         	movff	doActionPulseOff@arg,??_doActionPulseOff
  5742  003AEC  0E01               	movlw	1
  5743  003AEE  0100               	movlb	0	; () banked
  5744  003AF0  6FD3               	movwf	(??_doActionPulseOff+1)& (0+255),b
  5745  003AF2  6BD4               	clrf	(??_doActionPulseOff+2)& (0+255),b
  5746  003AF4  2BD2               	incf	??_doActionPulseOff& (0+255),f,b
  5747  003AF6  D003               	goto	u19874
  5748  003AF8                     u19875:
  5749  003AF8  90D8               	bcf	status,0,c
  5750  003AFA  37D3               	rlcf	(??_doActionPulseOff+1)& (0+255),f,b
  5751  003AFC  37D4               	rlcf	(??_doActionPulseOff+2)& (0+255),f,b
  5752  003AFE                     u19874:
  5753  003AFE  2FD2               	decfsz	??_doActionPulseOff& (0+255),f,b
  5754  003B00  D7FB               	goto	u19875
  5755  003B02  1DD3               	comf	(??_doActionPulseOff+1)& (0+255),w,b
  5756  003B04  6FD5               	movwf	(??_doActionPulseOff+3)& (0+255),b
  5757  003B06  1DD4               	comf	(??_doActionPulseOff+2)& (0+255),w,b
  5758  003B08  6FD6               	movwf	(??_doActionPulseOff+4)& (0+255),b
  5759  003B0A  51D5               	movf	(??_doActionPulseOff+3)& (0+255),w,b
  5760  003B0C  1768               	andwf	_channel_pulse_flags& (0+255),f,b
  5761  003B0E  51D6               	movf	(??_doActionPulseOff+4)& (0+255),w,b
  5762  003B10  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
  5763  003B12                     l976:
  5764  003B12  0012               	return	
  5765  003B14                     __end_of_doActionPulseOff:
  5766                           	opt stack 0
  5767                           tblptru	equ	0xFF8
  5768                           tblptrh	equ	0xFF7
  5769                           tblptrl	equ	0xFF6
  5770                           tablat	equ	0xFF5
  5771                           prodh	equ	0xFF4
  5772                           prodl	equ	0xFF3
  5773                           intcon	equ	0xFF2
  5774                           intcon2	equ	0xFF1
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           fsr1h	equ	0xFE2
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           plusw2	equ	0xFDB
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _doActionPulseOn *****************
  5789 ;; Defined at:
  5790 ;;		line 2847 in file "../main.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  dmflags         1    wreg     unsigned char 
  5793 ;;  arg             1   78[COMRAM] unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  dmflags         1    0[COMRAM] unsigned char 
  5796 ;;  bEvent          1   80[COMRAM] enum E15660
  5797 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;		None               void
  5800 ;; Registers used:
  5801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : F/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5807 ;;      Params:         1       0       0       0       0       0       0
  5808 ;;      Locals:         2       0       0       0       0       0       0
  5809 ;;      Temps:          0       3       0       0       0       0       0
  5810 ;;      Totals:         3       3       0       0       0       0       0
  5811 ;;Total ram usage:        6 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    7
  5814 ;; This function calls:
  5815 ;;		_Read_b_eep
  5816 ;;		_SendInformationEvent
  5817 ;; This function is called by:
  5818 ;;		_doDM
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text13
  5823  003486                     __ptext13:
  5824                           	opt stack 0
  5825  003486                     _doActionPulseOn:
  5826                           	opt stack 21
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;main.c: 2848: unsigned char ctrlreg;
  5830                           ;main.c: 2849: BOOL bEvent = 0;
  5831                           
  5832                           ;incstack = 0
  5833                           ;incstack = 0
  5834  003486  6A51               	clrf	doActionPulseOn@bEvent,c
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;main.c: 2852: if ( arg > 9 ) return;
  5838  003488  0E09               	movlw	9
  5839  00348A  644F               	cpfsgt	doActionPulseOn@arg,c
  5840  00348C  D001               	goto	l14643
  5841  00348E  D094               	goto	l948
  5842  003490                     l14643:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;main.c: 2854: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5846  003490  0E5B               	movlw	91
  5847  003492  244F               	addwf	doActionPulseOn@arg,w,c
  5848  003494  6E08               	movwf	?_Read_b_eep,c
  5849  003496  6A09               	clrf	?_Read_b_eep+1,c
  5850  003498  0E00               	movlw	0
  5851  00349A  2209               	addwfc	?_Read_b_eep+1,f,c
  5852  00349C  EC27  F023         	call	_Read_b_eep	;wreg free
  5853  0034A0  6E50               	movwf	doActionPulseOn@ctrlreg,c
  5854                           
  5855                           ;main.c: 2857: if ( !( ctrlreg & 0x80 ) ) return;
  5856  0034A2  AE50               	btfss	doActionPulseOn@ctrlreg,7,c
  5857  0034A4  D089               	goto	l948
  5858  0034A6  D039               	goto	l14691
  5859  0034A8                     l951:
  5860                           
  5861                           ;main.c: 2862: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5862  0034A8  A081               	btfss	3969,0,c	;volatile
  5863  0034AA  D002               	goto	l14651
  5864  0034AC  0E01               	movlw	1
  5865  0034AE  6E51               	movwf	doActionPulseOn@bEvent,c
  5866  0034B0                     l14651:
  5867                           
  5868                           ;main.c: 2863: PORTBbits.RB0 = 0;
  5869  0034B0  9081               	bcf	3969,0,c	;volatile
  5870                           
  5871                           ;main.c: 2864: break;
  5872  0034B2  D047               	goto	l14693
  5873  0034B4                     l954:
  5874                           
  5875                           ;main.c: 2867: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5876  0034B4  A281               	btfss	3969,1,c	;volatile
  5877  0034B6  D002               	goto	l14655
  5878  0034B8  0E01               	movlw	1
  5879  0034BA  6E51               	movwf	doActionPulseOn@bEvent,c
  5880  0034BC                     l14655:
  5881                           
  5882                           ;main.c: 2868: PORTBbits.RB1 = 0;
  5883  0034BC  9281               	bcf	3969,1,c	;volatile
  5884                           
  5885                           ;main.c: 2869: break;
  5886  0034BE  D041               	goto	l14693
  5887  0034C0                     l956:
  5888                           
  5889                           ;main.c: 2872: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5890  0034C0  A682               	btfss	3970,3,c	;volatile
  5891  0034C2  D002               	goto	l14659
  5892  0034C4  0E01               	movlw	1
  5893  0034C6  6E51               	movwf	doActionPulseOn@bEvent,c
  5894  0034C8                     l14659:
  5895                           
  5896                           ;main.c: 2873: PORTCbits.RC3 = 0;
  5897  0034C8  9682               	bcf	3970,3,c	;volatile
  5898                           
  5899                           ;main.c: 2874: break;
  5900  0034CA  D03B               	goto	l14693
  5901  0034CC                     l958:
  5902                           
  5903                           ;main.c: 2877: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5904  0034CC  A882               	btfss	3970,4,c	;volatile
  5905  0034CE  D002               	goto	l14663
  5906  0034D0  0E01               	movlw	1
  5907  0034D2  6E51               	movwf	doActionPulseOn@bEvent,c
  5908  0034D4                     l14663:
  5909                           
  5910                           ;main.c: 2878: PORTCbits.RC4 = 0;
  5911  0034D4  9882               	bcf	3970,4,c	;volatile
  5912                           
  5913                           ;main.c: 2879: break;
  5914  0034D6  D035               	goto	l14693
  5915  0034D8                     l960:
  5916                           
  5917                           ;main.c: 2882: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5918  0034D8  AA82               	btfss	3970,5,c	;volatile
  5919  0034DA  D002               	goto	l14667
  5920  0034DC  0E01               	movlw	1
  5921  0034DE  6E51               	movwf	doActionPulseOn@bEvent,c
  5922  0034E0                     l14667:
  5923                           
  5924                           ;main.c: 2883: PORTCbits.RC5 = 0;
  5925  0034E0  9A82               	bcf	3970,5,c	;volatile
  5926                           
  5927                           ;main.c: 2884: break;
  5928  0034E2  D02F               	goto	l14693
  5929  0034E4                     l962:
  5930                           
  5931                           ;main.c: 2887: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5932  0034E4  AC82               	btfss	3970,6,c	;volatile
  5933  0034E6  D002               	goto	l14671
  5934  0034E8  0E01               	movlw	1
  5935  0034EA  6E51               	movwf	doActionPulseOn@bEvent,c
  5936  0034EC                     l14671:
  5937                           
  5938                           ;main.c: 2888: PORTCbits.RC6 = 0;
  5939  0034EC  9C82               	bcf	3970,6,c	;volatile
  5940                           
  5941                           ;main.c: 2889: break;
  5942  0034EE  D029               	goto	l14693
  5943  0034F0                     l964:
  5944                           
  5945                           ;main.c: 2892: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5946  0034F0  AE82               	btfss	3970,7,c	;volatile
  5947  0034F2  D002               	goto	l14675
  5948  0034F4  0E01               	movlw	1
  5949  0034F6  6E51               	movwf	doActionPulseOn@bEvent,c
  5950  0034F8                     l14675:
  5951                           
  5952                           ;main.c: 2893: PORTCbits.RC7 = 0;
  5953  0034F8  9E82               	bcf	3970,7,c	;volatile
  5954                           
  5955                           ;main.c: 2894: break;
  5956  0034FA  D023               	goto	l14693
  5957  0034FC                     l966:
  5958                           
  5959                           ;main.c: 2897: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5960  0034FC  A480               	btfss	3968,2,c	;volatile
  5961  0034FE  D002               	goto	l14679
  5962  003500                     l14677:
  5963  003500  0E01               	movlw	1
  5964  003502  6E51               	movwf	doActionPulseOn@bEvent,c
  5965  003504                     l14679:
  5966                           
  5967                           ;main.c: 2898: PORTAbits.RA2 = 0;
  5968  003504  9480               	bcf	3968,2,c	;volatile
  5969                           
  5970                           ;main.c: 2899: break;
  5971  003506  D01D               	goto	l14693
  5972  003508                     l968:
  5973                           
  5974                           ;main.c: 2902: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5975  003508  A280               	btfss	3968,1,c	;volatile
  5976  00350A  D002               	goto	l14683
  5977  00350C  0E01               	movlw	1
  5978  00350E  6E51               	movwf	doActionPulseOn@bEvent,c
  5979  003510                     l14683:
  5980                           
  5981                           ;main.c: 2903: PORTAbits.RA1 = 0;
  5982  003510  9280               	bcf	3968,1,c	;volatile
  5983                           
  5984                           ;main.c: 2904: break;
  5985  003512  D017               	goto	l14693
  5986  003514                     l970:
  5987                           
  5988                           ;main.c: 2907: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5989  003514  B080               	btfsc	3968,0,c	;volatile
  5990  003516  D7F4               	goto	l14677
  5991  003518  D7F5               	goto	l14679
  5992  00351A                     l14691:
  5993  00351A  504F               	movf	doActionPulseOn@arg,w,c
  5994                           
  5995                           ; Switch size 1, requested type "space"
  5996                           ; Number of cases is 10, Range of values is 0 to 9
  5997                           ; switch strategies available:
  5998                           ; Name         Instructions Cycles
  5999                           ; simple_byte           31    16 (average)
  6000                           ;	Chosen strategy is simple_byte
  6001  00351C  E0C5               	bz	l951
  6002  00351E  0A01               	xorlw	1	; case 1
  6003  003520  E0C9               	bz	l954
  6004  003522  0A03               	xorlw	3	; case 2
  6005  003524  E0CD               	bz	l956
  6006  003526  0A01               	xorlw	1	; case 3
  6007  003528  E0D1               	bz	l958
  6008  00352A  0A07               	xorlw	7	; case 4
  6009  00352C  E0D5               	bz	l960
  6010  00352E  0A01               	xorlw	1	; case 5
  6011  003530  E0D9               	bz	l962
  6012  003532  0A03               	xorlw	3	; case 6
  6013  003534  E0DD               	bz	l964
  6014  003536  0A01               	xorlw	1	; case 7
  6015  003538  E0E1               	bz	l966
  6016  00353A  0A0F               	xorlw	15	; case 8
  6017  00353C  E0E5               	bz	l968
  6018  00353E  0A01               	xorlw	1	; case 9
  6019  003540  E0E9               	bz	l970
  6020  003542                     l14693:
  6021                           
  6022                           ;main.c: 2914: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6023  003542  5051               	movf	doActionPulseOn@bEvent,w,c
  6024  003544  A4D8               	btfss	status,2,c
  6025  003546  A850               	btfss	doActionPulseOn@ctrlreg,4,c
  6026  003548  D008               	goto	l14699
  6027                           
  6028                           ;main.c: 2915: SendInformationEvent( arg, 20, 4 );
  6029  00354A  0E14               	movlw	20
  6030  00354C  0100               	movlb	0	; () banked
  6031  00354E  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6032  003550  0E04               	movlw	4
  6033  003552  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6034  003554  504F               	movf	doActionPulseOn@arg,w,c
  6035  003556  EC5A  F020         	call	_SendInformationEvent
  6036  00355A                     l14699:
  6037                           
  6038                           ;main.c: 2916: }
  6039                           ;main.c: 2918: channel_pulse_flags |= ( 1 << arg );
  6040  00355A  C04F  F0D2         	movff	doActionPulseOn@arg,??_doActionPulseOn
  6041  00355E  0E01               	movlw	1
  6042  003560  0100               	movlb	0	; () banked
  6043  003562  6FD3               	movwf	(??_doActionPulseOn+1)& (0+255),b
  6044  003564  6BD4               	clrf	(??_doActionPulseOn+2)& (0+255),b
  6045  003566  2BD2               	incf	??_doActionPulseOn& (0+255),f,b
  6046  003568  D003               	goto	u19724
  6047  00356A                     u19725:
  6048  00356A  90D8               	bcf	status,0,c
  6049  00356C  37D3               	rlcf	(??_doActionPulseOn+1)& (0+255),f,b
  6050  00356E  37D4               	rlcf	(??_doActionPulseOn+2)& (0+255),f,b
  6051  003570                     u19724:
  6052  003570  2FD2               	decfsz	??_doActionPulseOn& (0+255),f,b
  6053  003572  D7FB               	goto	u19725
  6054  003574  51D3               	movf	(??_doActionPulseOn+1)& (0+255),w,b
  6055  003576  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  6056  003578  51D4               	movf	(??_doActionPulseOn+2)& (0+255),w,b
  6057  00357A  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;main.c: 2919: channel_pulse_timer[ 0 ] =
  6061                           ;main.c: 2920: Read_b_eep(0x43 + 46 + 0u + arg) * 256 +
  6062                           ;main.c: 2922: Read_b_eep(0x43 + 46 + 1u + arg);
  6063  00357C  0E72               	movlw	114
  6064  00357E  244F               	addwf	doActionPulseOn@arg,w,c
  6065  003580  6E08               	movwf	?_Read_b_eep,c
  6066  003582  6A09               	clrf	?_Read_b_eep+1,c
  6067  003584  0E00               	movlw	0
  6068  003586  2209               	addwfc	?_Read_b_eep+1,f,c
  6069  003588  EC27  F023         	call	_Read_b_eep	;wreg free
  6070  00358C  0100               	movlb	0	; () banked
  6071  00358E  6FD2               	movwf	??_doActionPulseOn& (0+255),b
  6072  003590  0E71               	movlw	113
  6073  003592  244F               	addwf	doActionPulseOn@arg,w,c
  6074  003594  6E08               	movwf	?_Read_b_eep,c
  6075  003596  6A09               	clrf	?_Read_b_eep+1,c
  6076  003598  0E00               	movlw	0
  6077  00359A  2209               	addwfc	?_Read_b_eep+1,f,c
  6078  00359C  EC27  F023         	call	_Read_b_eep	;wreg free
  6079  0035A0  0100               	movlb	0	; () banked
  6080  0035A2  6FD4               	movwf	(??_doActionPulseOn+2)& (0+255),b
  6081  0035A4  6BD3               	clrf	(??_doActionPulseOn+1)& (0+255),b
  6082  0035A6  51D2               	movf	??_doActionPulseOn& (0+255),w,b
  6083  0035A8  25D3               	addwf	(??_doActionPulseOn+1)& (0+255),w,b
  6084  0035AA  0101               	movlb	1	; () banked
  6085  0035AC  6F00               	movwf	_channel_pulse_timer& (0+255),b
  6086  0035AE  0100               	movlb	0	; () banked
  6087  0035B0  0E00               	movlw	0
  6088  0035B2  21D4               	addwfc	(??_doActionPulseOn+2)& (0+255),w,b
  6089  0035B4  0101               	movlb	1	; () banked
  6090  0035B6  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
  6091  0035B8                     l948:
  6092  0035B8  0012               	return	
  6093  0035BA                     __end_of_doActionPulseOn:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           intcon2	equ	0xFF1
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           indf1	equ	0xFE7
  6106                           fsr1h	equ	0xFE2
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           plusw2	equ	0xFDB
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _doActionOn *****************
  6117 ;; Defined at:
  6118 ;;		line 2680 in file "../main.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  dmflags         1    wreg     unsigned char 
  6121 ;;  arg             1   78[COMRAM] unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  dmflags         1    0[COMRAM] unsigned char 
  6124 ;;  bEvent          1   23[BANK0 ] enum E15660
  6125 ;;  ctrlreg         1   22[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : F/0
  6132 ;;		On exit  : F/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6135 ;;      Params:         1       0       0       0       0       0       0
  6136 ;;      Locals:         0       2       0       0       0       0       0
  6137 ;;      Temps:          2       0       0       0       0       0       0
  6138 ;;      Totals:         3       2       0       0       0       0       0
  6139 ;;Total ram usage:        5 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    7
  6142 ;; This function calls:
  6143 ;;		_Read_b_eep
  6144 ;;		_SendInformationEvent
  6145 ;; This function is called by:
  6146 ;;		_doDM
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text14
  6151  0035BA                     __ptext14:
  6152                           	opt stack 0
  6153  0035BA                     _doActionOn:
  6154                           	opt stack 21
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 2681: unsigned char ctrlreg;
  6158                           ;main.c: 2682: BOOL bEvent = 0;
  6159                           
  6160                           ;incstack = 0
  6161                           ;incstack = 0
  6162  0035BA  6BD3               	clrf	doActionOn@bEvent& (0+255),b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;main.c: 2685: if ( arg > 9 ) return;
  6166  0035BC  0E09               	movlw	9
  6167  0035BE  644F               	cpfsgt	doActionOn@arg,c
  6168  0035C0  D001               	goto	l14579
  6169  0035C2  D08B               	goto	l891
  6170  0035C4                     l14579:
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;main.c: 2687: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6174  0035C4  0E5B               	movlw	91
  6175  0035C6  244F               	addwf	doActionOn@arg,w,c
  6176  0035C8  6E08               	movwf	?_Read_b_eep,c
  6177  0035CA  6A09               	clrf	?_Read_b_eep+1,c
  6178  0035CC  0E00               	movlw	0
  6179  0035CE  2209               	addwfc	?_Read_b_eep+1,f,c
  6180  0035D0  EC27  F023         	call	_Read_b_eep	;wreg free
  6181  0035D4  0100               	movlb	0	; () banked
  6182  0035D6  6FD2               	movwf	doActionOn@ctrlreg& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;main.c: 2690: if ( !( ctrlreg & 0x80 ) ) return;
  6186  0035D8  AFD2               	btfss	doActionOn@ctrlreg& (0+255),7,b
  6187  0035DA  D07F               	goto	l891
  6188  0035DC  D039               	goto	l14627
  6189  0035DE                     l894:
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;main.c: 2695: if ( 0 == PORTBbits.RB0 ) bEvent = 1;
  6193  0035DE  B081               	btfsc	3969,0,c	;volatile
  6194  0035E0  D002               	goto	l14587
  6195                           
  6196                           ; BSR set to: 0
  6197  0035E2  0E01               	movlw	1
  6198  0035E4  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6199  0035E6                     l14587:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;main.c: 2696: PORTBbits.RB0 = 1;
  6203  0035E6  8081               	bsf	3969,0,c	;volatile
  6204                           
  6205                           ;main.c: 2697: break;
  6206  0035E8  D047               	goto	l896
  6207  0035EA                     l897:
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;main.c: 2700: if ( 0 == PORTBbits.RB1 ) bEvent = 1;
  6211  0035EA  B281               	btfsc	3969,1,c	;volatile
  6212  0035EC  D002               	goto	l14591
  6213                           
  6214                           ; BSR set to: 0
  6215  0035EE  0E01               	movlw	1
  6216  0035F0  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6217  0035F2                     l14591:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;main.c: 2701: PORTBbits.RB1 = 1;
  6221  0035F2  8281               	bsf	3969,1,c	;volatile
  6222                           
  6223                           ;main.c: 2702: break;
  6224  0035F4  D041               	goto	l896
  6225  0035F6                     l899:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;main.c: 2705: if ( 0 == PORTCbits.RC3 ) bEvent = 1;
  6229  0035F6  B682               	btfsc	3970,3,c	;volatile
  6230  0035F8  D002               	goto	l14595
  6231                           
  6232                           ; BSR set to: 0
  6233  0035FA  0E01               	movlw	1
  6234  0035FC  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6235  0035FE                     l14595:
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 2706: PORTCbits.RC3 = 1;
  6239  0035FE  8682               	bsf	3970,3,c	;volatile
  6240                           
  6241                           ;main.c: 2707: break;
  6242  003600  D03B               	goto	l896
  6243  003602                     l901:
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;main.c: 2710: if ( 0 == PORTCbits.RC4 ) bEvent = 1;
  6247  003602  B882               	btfsc	3970,4,c	;volatile
  6248  003604  D002               	goto	l14599
  6249                           
  6250                           ; BSR set to: 0
  6251  003606  0E01               	movlw	1
  6252  003608  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6253  00360A                     l14599:
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;main.c: 2711: PORTCbits.RC4 = 1;
  6257  00360A  8882               	bsf	3970,4,c	;volatile
  6258                           
  6259                           ;main.c: 2712: break;
  6260  00360C  D035               	goto	l896
  6261  00360E                     l903:
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;main.c: 2715: if ( 0 == PORTCbits.RC5 ) bEvent = 1;
  6265  00360E  BA82               	btfsc	3970,5,c	;volatile
  6266  003610  D002               	goto	l14603
  6267                           
  6268                           ; BSR set to: 0
  6269  003612  0E01               	movlw	1
  6270  003614  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6271  003616                     l14603:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;main.c: 2716: PORTCbits.RC5 = 1;
  6275  003616  8A82               	bsf	3970,5,c	;volatile
  6276                           
  6277                           ;main.c: 2717: break;
  6278  003618  D02F               	goto	l896
  6279  00361A                     l905:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;main.c: 2720: if ( 0 == PORTCbits.RC6 ) bEvent = 1;
  6283  00361A  BC82               	btfsc	3970,6,c	;volatile
  6284  00361C  D002               	goto	l14607
  6285                           
  6286                           ; BSR set to: 0
  6287  00361E  0E01               	movlw	1
  6288  003620  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6289  003622                     l14607:
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;main.c: 2721: PORTCbits.RC6 = 1;
  6293  003622  8C82               	bsf	3970,6,c	;volatile
  6294                           
  6295                           ;main.c: 2722: break;
  6296  003624  D029               	goto	l896
  6297  003626                     l907:
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;main.c: 2725: if ( 0 == PORTCbits.RC7 ) bEvent = 1;
  6301  003626  BE82               	btfsc	3970,7,c	;volatile
  6302  003628  D002               	goto	l14611
  6303                           
  6304                           ; BSR set to: 0
  6305  00362A  0E01               	movlw	1
  6306  00362C  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6307  00362E                     l14611:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;main.c: 2726: PORTCbits.RC7 = 1;
  6311  00362E  8E82               	bsf	3970,7,c	;volatile
  6312                           
  6313                           ;main.c: 2727: break;
  6314  003630  D023               	goto	l896
  6315  003632                     l909:
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;main.c: 2730: if ( 0 == PORTAbits.RA2 ) bEvent = 1;
  6319  003632  B480               	btfsc	3968,2,c	;volatile
  6320  003634  D002               	goto	l14615
  6321  003636                     l14613:
  6322                           
  6323                           ; BSR set to: 0
  6324  003636  0E01               	movlw	1
  6325  003638  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6326  00363A                     l14615:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;main.c: 2731: PORTAbits.RA2 = 1;
  6330  00363A  8480               	bsf	3968,2,c	;volatile
  6331                           
  6332                           ;main.c: 2732: break;
  6333  00363C  D01D               	goto	l896
  6334  00363E                     l911:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;main.c: 2735: if ( 0 == PORTAbits.RA1 ) bEvent = 1;
  6338  00363E  B280               	btfsc	3968,1,c	;volatile
  6339  003640  D002               	goto	l14619
  6340                           
  6341                           ; BSR set to: 0
  6342  003642  0E01               	movlw	1
  6343  003644  6FD3               	movwf	doActionOn@bEvent& (0+255),b
  6344  003646                     l14619:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;main.c: 2736: PORTAbits.RA1 = 1;
  6348  003646  8280               	bsf	3968,1,c	;volatile
  6349                           
  6350                           ;main.c: 2737: break;
  6351  003648  D017               	goto	l896
  6352  00364A                     l913:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;main.c: 2740: if ( 0 == PORTAbits.RA0 ) bEvent = 1;
  6356  00364A  A080               	btfss	3968,0,c	;volatile
  6357  00364C  D7F4               	goto	l14613
  6358  00364E  D7F5               	goto	l14615
  6359  003650                     l14627:
  6360                           
  6361                           ; BSR set to: 0
  6362  003650  504F               	movf	doActionOn@arg,w,c
  6363                           
  6364                           ; Switch size 1, requested type "space"
  6365                           ; Number of cases is 10, Range of values is 0 to 9
  6366                           ; switch strategies available:
  6367                           ; Name         Instructions Cycles
  6368                           ; simple_byte           31    16 (average)
  6369                           ;	Chosen strategy is simple_byte
  6370  003652  E0C5               	bz	l894
  6371  003654  0A01               	xorlw	1	; case 1
  6372  003656  E0C9               	bz	l897
  6373  003658  0A03               	xorlw	3	; case 2
  6374  00365A  E0CD               	bz	l899
  6375  00365C  0A01               	xorlw	1	; case 3
  6376  00365E  E0D1               	bz	l901
  6377  003660  0A07               	xorlw	7	; case 4
  6378  003662  E0D5               	bz	l903
  6379  003664  0A01               	xorlw	1	; case 5
  6380  003666  E0D9               	bz	l905
  6381  003668  0A03               	xorlw	3	; case 6
  6382  00366A  E0DD               	bz	l907
  6383  00366C  0A01               	xorlw	1	; case 7
  6384  00366E  E0E1               	bz	l909
  6385  003670  0A0F               	xorlw	15	; case 8
  6386  003672  E0E5               	bz	l911
  6387  003674  0A01               	xorlw	1	; case 9
  6388  003676  E0E9               	bz	l913
  6389  003678                     l896:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;main.c: 2746: if ( ctrlreg & 0x04 ) {
  6393  003678  A5D2               	btfss	doActionOn@ctrlreg& (0+255),2,b
  6394  00367A  D024               	goto	l14631
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;main.c: 2747: channel_protection_timer[ arg ] =
  6398                           ;main.c: 2748: Read_b_eep(0x43 + 46 + 20u + 2 * arg) * 256 +
  6399                           ;main.c: 2752: Read_b_eep(0x43 + 46 + 21u + 2 * arg);
  6400  00367C  504F               	movf	doActionOn@arg,w,c
  6401  00367E  0D02               	mullw	2
  6402  003680  0E85               	movlw	133
  6403  003682  24F3               	addwf	prodl,w,c
  6404  003684  6E08               	movwf	?_Read_b_eep,c
  6405  003686  0E00               	movlw	0
  6406  003688  20F4               	addwfc	prodh,w,c
  6407  00368A  6E09               	movwf	?_Read_b_eep+1,c
  6408  00368C  EC27  F023         	call	_Read_b_eep	;wreg free
  6409  003690  6E51               	movwf	(??_doActionOn+1)& (0+255),c
  6410  003692  6A50               	clrf	??_doActionOn& (0+255),c
  6411  003694  504F               	movf	doActionOn@arg,w,c
  6412  003696  0D02               	mullw	2
  6413  003698  0E86               	movlw	134
  6414  00369A  24F3               	addwf	prodl,w,c
  6415  00369C  6E08               	movwf	?_Read_b_eep,c
  6416  00369E  0E00               	movlw	0
  6417  0036A0  20F4               	addwfc	prodh,w,c
  6418  0036A2  6E09               	movwf	?_Read_b_eep+1,c
  6419  0036A4  EC27  F023         	call	_Read_b_eep	;wreg free
  6420  0036A8  2650               	addwf	??_doActionOn,f,c
  6421  0036AA  0E00               	movlw	0
  6422  0036AC  2251               	addwfc	??_doActionOn+1,f,c
  6423  0036AE  504F               	movf	doActionOn@arg,w,c
  6424  0036B0  0D02               	mullw	2
  6425  0036B2  50F3               	movf	prodl,w,c
  6426  0036B4  0100               	movlb	0	; () banked
  6427  0036B6  0F83               	addlw	low _channel_protection_timer
  6428  0036B8  6ED9               	movwf	fsr2l,c
  6429  0036BA  6ADA               	clrf	fsr2h,c
  6430  0036BC  C050  FFDE         	movff	??_doActionOn,postinc2
  6431  0036C0  C051  FFDD         	movff	??_doActionOn+1,postdec2
  6432  0036C4                     l14631:
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;main.c: 2756: }
  6436                           ;main.c: 2759: if ( bEvent && ( ctrlreg & 0x08 ) ) {
  6437  0036C4  51D3               	movf	doActionOn@bEvent& (0+255),w,b
  6438  0036C6  A4D8               	btfss	status,2,c
  6439                           
  6440                           ; BSR set to: 0
  6441  0036C8  A7D2               	btfss	doActionOn@ctrlreg& (0+255),3,b
  6442  0036CA  D007               	goto	l891
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;main.c: 2760: SendInformationEvent( arg, 20, 3 );
  6446  0036CC  0E14               	movlw	20
  6447  0036CE  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6448  0036D0  0E03               	movlw	3
  6449  0036D2  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6450  0036D4  504F               	movf	doActionOn@arg,w,c
  6451  0036D6  EC5A  F020         	call	_SendInformationEvent
  6452  0036DA                     l891:
  6453                           
  6454                           ; BSR set to: 0
  6455  0036DA  0012               	return	
  6456  0036DC                     __end_of_doActionOn:
  6457                           	opt stack 0
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon	equ	0xFF2
  6465                           intcon2	equ	0xFF1
  6466                           postinc0	equ	0xFEE
  6467                           wreg	equ	0xFE8
  6468                           indf1	equ	0xFE7
  6469                           fsr1h	equ	0xFE2
  6470                           fsr1l	equ	0xFE1
  6471                           indf2	equ	0xFDF
  6472                           postinc2	equ	0xFDE
  6473                           postdec2	equ	0xFDD
  6474                           plusw2	equ	0xFDB
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function _doActionOff *****************
  6480 ;; Defined at:
  6481 ;;		line 2770 in file "../main.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  dmflags         1    wreg     unsigned char 
  6484 ;;  arg             1   78[COMRAM] unsigned char 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  dmflags         1    0[COMRAM] unsigned char 
  6487 ;;  bEvent          1   80[COMRAM] enum E15660
  6488 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : F/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6498 ;;      Params:         1       0       0       0       0       0       0
  6499 ;;      Locals:         2       0       0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0
  6501 ;;      Totals:         3       0       0       0       0       0       0
  6502 ;;Total ram usage:        3 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    7
  6505 ;; This function calls:
  6506 ;;		_Read_b_eep
  6507 ;;		_SendInformationEvent
  6508 ;; This function is called by:
  6509 ;;		_doApplicationOneSecondWork
  6510 ;;		_doDM
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text15
  6515  003CEA                     __ptext15:
  6516                           	opt stack 0
  6517  003CEA                     _doActionOff:
  6518                           	opt stack 21
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 2771: unsigned char ctrlreg;
  6522                           ;main.c: 2772: BOOL bEvent = 0;
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;incstack = 0
  6526                           ;incstack = 0
  6527  003CEA  6A51               	clrf	doActionOff@bEvent,c
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;main.c: 2775: if ( arg > 9 ) return;
  6531  003CEC  0E09               	movlw	9
  6532  003CEE  644F               	cpfsgt	doActionOff@arg,c
  6533  003CF0  D001               	goto	l13701
  6534  003CF2  D065               	goto	l920
  6535  003CF4                     l13701:
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;main.c: 2777: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6539  003CF4  0E5B               	movlw	91
  6540  003CF6  244F               	addwf	doActionOff@arg,w,c
  6541  003CF8  6E08               	movwf	?_Read_b_eep,c
  6542  003CFA  6A09               	clrf	?_Read_b_eep+1,c
  6543  003CFC  0E00               	movlw	0
  6544  003CFE  2209               	addwfc	?_Read_b_eep+1,f,c
  6545  003D00  EC27  F023         	call	_Read_b_eep	;wreg free
  6546  003D04  6E50               	movwf	doActionOff@ctrlreg,c
  6547                           
  6548                           ;main.c: 2780: if ( !( ctrlreg & 0x80 ) ) return;
  6549  003D06  AE50               	btfss	doActionOff@ctrlreg,7,c
  6550  003D08  D05A               	goto	l920
  6551  003D0A  D039               	goto	l13749
  6552  003D0C                     l923:
  6553                           
  6554                           ;main.c: 2785: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  6555  003D0C  A081               	btfss	3969,0,c	;volatile
  6556  003D0E  D002               	goto	l13709
  6557  003D10  0E01               	movlw	1
  6558  003D12  6E51               	movwf	doActionOff@bEvent,c
  6559  003D14                     l13709:
  6560                           
  6561                           ;main.c: 2786: PORTBbits.RB0 = 0;
  6562  003D14  9081               	bcf	3969,0,c	;volatile
  6563                           
  6564                           ;main.c: 2787: break;
  6565  003D16  D047               	goto	l13751
  6566  003D18                     l926:
  6567                           
  6568                           ;main.c: 2790: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  6569  003D18  A281               	btfss	3969,1,c	;volatile
  6570  003D1A  D002               	goto	l13713
  6571  003D1C  0E01               	movlw	1
  6572  003D1E  6E51               	movwf	doActionOff@bEvent,c
  6573  003D20                     l13713:
  6574                           
  6575                           ;main.c: 2791: PORTBbits.RB1 = 0;
  6576  003D20  9281               	bcf	3969,1,c	;volatile
  6577                           
  6578                           ;main.c: 2792: break;
  6579  003D22  D041               	goto	l13751
  6580  003D24                     l928:
  6581                           
  6582                           ;main.c: 2795: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  6583  003D24  A682               	btfss	3970,3,c	;volatile
  6584  003D26  D002               	goto	l13717
  6585  003D28  0E01               	movlw	1
  6586  003D2A  6E51               	movwf	doActionOff@bEvent,c
  6587  003D2C                     l13717:
  6588                           
  6589                           ;main.c: 2796: PORTCbits.RC3 = 0;
  6590  003D2C  9682               	bcf	3970,3,c	;volatile
  6591                           
  6592                           ;main.c: 2797: break;
  6593  003D2E  D03B               	goto	l13751
  6594  003D30                     l930:
  6595                           
  6596                           ;main.c: 2800: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  6597  003D30  A882               	btfss	3970,4,c	;volatile
  6598  003D32  D002               	goto	l13721
  6599  003D34  0E01               	movlw	1
  6600  003D36  6E51               	movwf	doActionOff@bEvent,c
  6601  003D38                     l13721:
  6602                           
  6603                           ;main.c: 2801: PORTCbits.RC4 = 0;
  6604  003D38  9882               	bcf	3970,4,c	;volatile
  6605                           
  6606                           ;main.c: 2802: break;
  6607  003D3A  D035               	goto	l13751
  6608  003D3C                     l932:
  6609                           
  6610                           ;main.c: 2805: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  6611  003D3C  AA82               	btfss	3970,5,c	;volatile
  6612  003D3E  D002               	goto	l13725
  6613  003D40  0E01               	movlw	1
  6614  003D42  6E51               	movwf	doActionOff@bEvent,c
  6615  003D44                     l13725:
  6616                           
  6617                           ;main.c: 2806: PORTCbits.RC5 = 0;
  6618  003D44  9A82               	bcf	3970,5,c	;volatile
  6619                           
  6620                           ;main.c: 2807: break;
  6621  003D46  D02F               	goto	l13751
  6622  003D48                     l934:
  6623                           
  6624                           ;main.c: 2810: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  6625  003D48  AC82               	btfss	3970,6,c	;volatile
  6626  003D4A  D002               	goto	l13729
  6627  003D4C  0E01               	movlw	1
  6628  003D4E  6E51               	movwf	doActionOff@bEvent,c
  6629  003D50                     l13729:
  6630                           
  6631                           ;main.c: 2811: PORTCbits.RC6 = 0;
  6632  003D50  9C82               	bcf	3970,6,c	;volatile
  6633                           
  6634                           ;main.c: 2812: break;
  6635  003D52  D029               	goto	l13751
  6636  003D54                     l936:
  6637                           
  6638                           ;main.c: 2815: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  6639  003D54  AE82               	btfss	3970,7,c	;volatile
  6640  003D56  D002               	goto	l13733
  6641  003D58  0E01               	movlw	1
  6642  003D5A  6E51               	movwf	doActionOff@bEvent,c
  6643  003D5C                     l13733:
  6644                           
  6645                           ;main.c: 2816: PORTCbits.RC7 = 0;
  6646  003D5C  9E82               	bcf	3970,7,c	;volatile
  6647                           
  6648                           ;main.c: 2817: break;
  6649  003D5E  D023               	goto	l13751
  6650  003D60                     l938:
  6651                           
  6652                           ;main.c: 2820: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  6653  003D60  A480               	btfss	3968,2,c	;volatile
  6654  003D62  D002               	goto	l13737
  6655  003D64                     l13735:
  6656  003D64  0E01               	movlw	1
  6657  003D66  6E51               	movwf	doActionOff@bEvent,c
  6658  003D68                     l13737:
  6659                           
  6660                           ;main.c: 2821: PORTAbits.RA2 = 0;
  6661  003D68  9480               	bcf	3968,2,c	;volatile
  6662                           
  6663                           ;main.c: 2822: break;
  6664  003D6A  D01D               	goto	l13751
  6665  003D6C                     l940:
  6666                           
  6667                           ;main.c: 2825: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  6668  003D6C  A280               	btfss	3968,1,c	;volatile
  6669  003D6E  D002               	goto	l13741
  6670  003D70  0E01               	movlw	1
  6671  003D72  6E51               	movwf	doActionOff@bEvent,c
  6672  003D74                     l13741:
  6673                           
  6674                           ;main.c: 2826: PORTAbits.RA1 = 0;
  6675  003D74  9280               	bcf	3968,1,c	;volatile
  6676                           
  6677                           ;main.c: 2827: break;
  6678  003D76  D017               	goto	l13751
  6679  003D78                     l942:
  6680                           
  6681                           ;main.c: 2830: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  6682  003D78  B080               	btfsc	3968,0,c	;volatile
  6683  003D7A  D7F4               	goto	l13735
  6684  003D7C  D7F5               	goto	l13737
  6685  003D7E                     l13749:
  6686  003D7E  504F               	movf	doActionOff@arg,w,c
  6687                           
  6688                           ; Switch size 1, requested type "space"
  6689                           ; Number of cases is 10, Range of values is 0 to 9
  6690                           ; switch strategies available:
  6691                           ; Name         Instructions Cycles
  6692                           ; simple_byte           31    16 (average)
  6693                           ;	Chosen strategy is simple_byte
  6694  003D80  E0C5               	bz	l923
  6695  003D82  0A01               	xorlw	1	; case 1
  6696  003D84  E0C9               	bz	l926
  6697  003D86  0A03               	xorlw	3	; case 2
  6698  003D88  E0CD               	bz	l928
  6699  003D8A  0A01               	xorlw	1	; case 3
  6700  003D8C  E0D1               	bz	l930
  6701  003D8E  0A07               	xorlw	7	; case 4
  6702  003D90  E0D5               	bz	l932
  6703  003D92  0A01               	xorlw	1	; case 5
  6704  003D94  E0D9               	bz	l934
  6705  003D96  0A03               	xorlw	3	; case 6
  6706  003D98  E0DD               	bz	l936
  6707  003D9A  0A01               	xorlw	1	; case 7
  6708  003D9C  E0E1               	bz	l938
  6709  003D9E  0A0F               	xorlw	15	; case 8
  6710  003DA0  E0E5               	bz	l940
  6711  003DA2  0A01               	xorlw	1	; case 9
  6712  003DA4  E0E9               	bz	l942
  6713  003DA6                     l13751:
  6714                           
  6715                           ;main.c: 2837: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6716  003DA6  5051               	movf	doActionOff@bEvent,w,c
  6717  003DA8  A4D8               	btfss	status,2,c
  6718  003DAA  A850               	btfss	doActionOff@ctrlreg,4,c
  6719  003DAC  D008               	goto	l920
  6720                           
  6721                           ;main.c: 2838: SendInformationEvent( arg, 20, 4 );
  6722  003DAE  0E14               	movlw	20
  6723  003DB0  0100               	movlb	0	; () banked
  6724  003DB2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6725  003DB4  0E04               	movlw	4
  6726  003DB6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6727  003DB8  504F               	movf	doActionOff@arg,w,c
  6728  003DBA  EC5A  F020         	call	_SendInformationEvent
  6729  003DBE                     l920:
  6730  003DBE  0012               	return	
  6731  003DC0                     __end_of_doActionOff:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           intcon2	equ	0xFF1
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf1	equ	0xFE7
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           plusw2	equ	0xFDB
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _vscp_handleProtocolEvent *****************
  6755 ;; Defined at:
  6756 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;  bytes           1   48[BANK0 ] unsigned char 
  6761 ;;  page_save       2   44[BANK0 ] unsigned short 
  6762 ;;  i               1   54[BANK0 ] unsigned char 
  6763 ;;  bytes           2   58[BANK0 ] unsigned short 
  6764 ;;  page_save       2   42[BANK0 ] unsigned short 
  6765 ;;  byte            1   57[BANK0 ] unsigned char 
  6766 ;;  cb              1   53[BANK0 ] unsigned char 
  6767 ;;  bytes_this_t    1   52[BANK0 ] unsigned char 
  6768 ;;  j               1   62[BANK0 ] unsigned char 
  6769 ;;  i               1   60[BANK0 ] unsigned char 
  6770 ;;  k               1   55[BANK0 ] unsigned char 
  6771 ;;  i               1   56[BANK0 ] unsigned char 
  6772 ;;  len             1   51[BANK0 ] unsigned char 
  6773 ;;  pos             1   50[BANK0 ] unsigned char 
  6774 ;;  i               1   61[BANK0 ] unsigned char 
  6775 ;;  len             1   49[BANK0 ] unsigned char 
  6776 ;;  pos             1   47[BANK0 ] unsigned char 
  6777 ;;  offset          1   46[BANK0 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;		None               void
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : F/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         0       0       0       0       0       0       0
  6788 ;;      Locals:         0      21       0       0       0       0       0
  6789 ;;      Temps:          0       7       0       0       0       0       0
  6790 ;;      Totals:         0      28       0       0       0       0       0
  6791 ;;Total ram usage:       28 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    9
  6794 ;; This function calls:
  6795 ;;		_vscp_init
  6796 ;;		_vscp_readAppReg
  6797 ;;		_vscp_writeAppReg
  6798 ;;		_vscp_sendEvent
  6799 ;;		_vscp_getGUID
  6800 ;;		_vscp_getMDF_URL
  6801 ;;		_vscp_goBootloaderMode
  6802 ;;		_vscp_getMatrixInfo
  6803 ;;		_vscp_handleHeartbeat
  6804 ;;		_vscp_handleSetNickname
  6805 ;;		_vscp_handleDropNickname
  6806 ;;		_vscp_newNodeOnline
  6807 ;;		_vscp_readRegister
  6808 ;;		_vscp_readStdReg
  6809 ;;		_vscp_writeRegister
  6810 ;;		_vscp_writeStdReg
  6811 ;;		___lbmod
  6812 ;; This function is called by:
  6813 ;;		_main
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text16
  6818  0019A8                     __ptext16:
  6819                           	opt stack 0
  6820  0019A8                     _vscp_handleProtocolEvent:
  6821                           	opt stack 20
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  6825                           
  6826                           ;incstack = 0
  6827                           ;incstack = 0
  6828  0019A8  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  6829  0019AA  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  6830  0019AC  E101 D2B5          	bz	l13369
  6831  0019B0  D2E4               	goto	l1525
  6832  0019B2                     l12951:
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  6836  0019B2  EC0F  F021         	call	_vscp_handleHeartbeat	;wreg free
  6837                           
  6838                           ;vscp_firmware.c: 807: break;
  6839  0019B6  D2E1               	goto	l1525
  6840  0019B8                     l12953:
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  6844  0019B8  ECA3  F021         	call	_vscp_newNodeOnline	;wreg free
  6845                           
  6846                           ;vscp_firmware.c: 812: break;
  6847  0019BC  D2DE               	goto	l1525
  6848  0019BE                     l12955:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  6852  0019BE  EC2D  F022         	call	_vscp_handleSetNickname	;wreg free
  6853                           
  6854                           ;vscp_firmware.c: 817: break;
  6855  0019C2  D2DB               	goto	l1525
  6856  0019C4                     l12957:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  6860  0019C4  EC48  F021         	call	_vscp_handleDropNickname	;wreg free
  6861                           
  6862                           ;vscp_firmware.c: 822: break;
  6863  0019C8  D2D8               	goto	l1525
  6864  0019CA                     l12959:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  6868                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6869  0019CA  5197               	movf	_vscp_imsg& (0+255),w,b
  6870  0019CC  0B0F               	andlw	15
  6871  0019CE  0A02               	xorlw	2
  6872  0019D0  E001 D2D3          	bnz	l1525
  6873                           
  6874                           ; BSR set to: 0
  6875  0019D4  517E               	movf	_vscp_nickname& (0+255),w,b
  6876  0019D6  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6877  0019DA  62DF               	cpfseq	indf2,c
  6878  0019DC  D2CE               	goto	l1525
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  6882  0019DE  0E80               	movlw	128
  6883  0019E0  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6884  0019E2  D012               	goto	l12979
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  6888  0019E4  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6889  0019E6  EC3E  F017         	call	_vscp_readAppReg
  6890  0019EA                     L19:
  6891  0019EA  0100               	movlb	0	; () banked
  6892  0019EC                     L20:
  6893  0019EC  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  6897  0019EE  C09E  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+5
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  6901  0019F2  0E03               	movlw	3
  6902  0019F4  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  6906  0019F6  0E82               	movlw	130
  6907  0019F8  6FA5               	movwf	_vscp_omsg& (0+255),b
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  6911  0019FA  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  6912  0019FC  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  6916  0019FE  0E0A               	movlw	10
  6917  001A00  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  6918  001A02                     l12977:
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;vscp_firmware.c: 843: vscp_sendEvent();
  6922  001A02  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  6923                           
  6924                           ;vscp_firmware.c: 844: }
  6925  001A06  D2B9               	goto	l1525
  6926  001A08                     l12979:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;vscp_firmware.c: 845: else {
  6930                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  6931                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  6932  001A08  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6933  001A0A  EC13  F018         	call	_vscp_readStdReg
  6934  001A0E  D7ED               	goto	L19
  6935  001A10                     l12993:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  6939                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6940  001A10  5197               	movf	_vscp_imsg& (0+255),w,b
  6941  001A12  0B0F               	andlw	15
  6942  001A14  0A03               	xorlw	3
  6943  001A16  E001 D2B0          	bnz	l1525
  6944                           
  6945                           ; BSR set to: 0
  6946  001A1A  517E               	movf	_vscp_nickname& (0+255),w,b
  6947  001A1C  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6948  001A20  62DF               	cpfseq	indf2,c
  6949  001A22  D2AB               	goto	l1525
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  6953  001A24  0E80               	movlw	128
  6954  001A26  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6955  001A28  D006               	goto	l13013
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  6959                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6960  001A2A  C09F  F04F         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  6961  001A2E  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6962  001A30  EC11  F003         	call	_vscp_writeAppReg
  6963  001A34  D7DB               	goto	L20
  6964  001A36                     l13013:
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;vscp_firmware.c: 888: else {
  6968                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  6969                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6970  001A36  C09F  F036         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  6971  001A3A  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  6972  001A3C  EC87  F01C         	call	_vscp_writeStdReg
  6973  001A40  D7D4               	goto	L19
  6974  001A42                     l13027:
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  6978                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  6979                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  6980                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  6981                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  6982                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  6983                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  6984  001A42  517E               	movf	_vscp_nickname& (0+255),w,b
  6985  001A44  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6986  001A48  62DF               	cpfseq	indf2,c
  6987  001A4A  D297               	goto	l1525
  6988                           
  6989                           ; BSR set to: 0
  6990  001A4C  0E00               	movlw	0
  6991  001A4E  EC14  F023         	call	_vscp_getGUID
  6992  001A52  0100               	movlb	0	; () banked
  6993  001A54  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6994  001A56  E001 D290          	bnz	l1525
  6995                           
  6996                           ; BSR set to: 0
  6997  001A5A  0E03               	movlw	3
  6998  001A5C  EC14  F023         	call	_vscp_getGUID
  6999  001A60  0100               	movlb	0	; () banked
  7000  001A62  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7001  001A64  E001 D289          	bnz	l1525
  7002                           
  7003                           ; BSR set to: 0
  7004  001A68  0E05               	movlw	5
  7005  001A6A  EC14  F023         	call	_vscp_getGUID
  7006  001A6E  0100               	movlb	0	; () banked
  7007  001A70  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7008  001A72  E001 D282          	bnz	l1525
  7009                           
  7010                           ; BSR set to: 0
  7011  001A76  0E07               	movlw	7
  7012  001A78  EC14  F023         	call	_vscp_getGUID
  7013  001A7C  0100               	movlb	0	; () banked
  7014  001A7E  19A2               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7015  001A80  E001 D27B          	bnz	l1525
  7016                           
  7017                           ; BSR set to: 0
  7018  001A84  5053               	movf	_vscp_page_select+1,w,c
  7019  001A86  19A3               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7020  001A88  E001 D277          	bnz	l1525
  7021                           
  7022                           ; BSR set to: 0
  7023  001A8C  5052               	movf	_vscp_page_select,w,c
  7024  001A8E  EE20  F0A4         	lfsr	2,_vscp_imsg+13
  7025  001A92  62DF               	cpfseq	indf2,c
  7026  001A94  D272               	goto	l1525
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7030  001A96  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7031  001A98  ECAC  F022         	call	_vscp_goBootloaderMode
  7032  001A9C  D26E               	goto	l1525
  7033  001A9E                     l13043:
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7037                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7038                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7039                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7040  001A9E  0E00               	movlw	0
  7041  001AA0  EC14  F023         	call	_vscp_getGUID
  7042  001AA4  0100               	movlb	0	; () banked
  7043  001AA6  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7044  001AA8  E173               	bnz	l13087
  7045                           
  7046                           ; BSR set to: 0
  7047  001AAA  0E01               	movlw	1
  7048  001AAC  EC14  F023         	call	_vscp_getGUID
  7049  001AB0  0100               	movlb	0	; () banked
  7050  001AB2  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7051  001AB4  E16D               	bnz	l13087
  7052                           
  7053                           ; BSR set to: 0
  7054  001AB6  0E02               	movlw	2
  7055  001AB8  EC14  F023         	call	_vscp_getGUID
  7056  001ABC  0100               	movlb	0	; () banked
  7057  001ABE  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7058  001AC0  E167               	bnz	l13087
  7059                           
  7060                           ; BSR set to: 0
  7061  001AC2  0E03               	movlw	3
  7062  001AC4  EC14  F023         	call	_vscp_getGUID
  7063  001AC8  0100               	movlb	0	; () banked
  7064  001ACA  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7065  001ACC  E161               	bnz	l13087
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7069  001ACE  897A               	bsf	_vscp_guid_reset& (0+255),4,b
  7070  001AD0  D05F               	goto	l13087
  7071  001AD2                     l13053:
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7075                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7076                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7077                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7078  001AD2  0E04               	movlw	4
  7079  001AD4  EC14  F023         	call	_vscp_getGUID
  7080  001AD8  0100               	movlb	0	; () banked
  7081  001ADA  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7082  001ADC  E159               	bnz	l13087
  7083                           
  7084                           ; BSR set to: 0
  7085  001ADE  0E05               	movlw	5
  7086  001AE0  EC14  F023         	call	_vscp_getGUID
  7087  001AE4  0100               	movlb	0	; () banked
  7088  001AE6  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7089  001AE8  E153               	bnz	l13087
  7090                           
  7091                           ; BSR set to: 0
  7092  001AEA  0E06               	movlw	6
  7093  001AEC  EC14  F023         	call	_vscp_getGUID
  7094  001AF0  0100               	movlb	0	; () banked
  7095  001AF2  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7096  001AF4  E14D               	bnz	l13087
  7097                           
  7098                           ; BSR set to: 0
  7099  001AF6  0E07               	movlw	7
  7100  001AF8  EC14  F023         	call	_vscp_getGUID
  7101  001AFC  0100               	movlb	0	; () banked
  7102  001AFE  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7103  001B00  E147               	bnz	l13087
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7107  001B02  8B7A               	bsf	_vscp_guid_reset& (0+255),5,b
  7108  001B04  D045               	goto	l13087
  7109  001B06                     l13063:
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7113                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7114                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7115                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7116  001B06  0E08               	movlw	8
  7117  001B08  EC14  F023         	call	_vscp_getGUID
  7118  001B0C  0100               	movlb	0	; () banked
  7119  001B0E  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7120  001B10  E13F               	bnz	l13087
  7121                           
  7122                           ; BSR set to: 0
  7123  001B12  0E09               	movlw	9
  7124  001B14  EC14  F023         	call	_vscp_getGUID
  7125  001B18  0100               	movlb	0	; () banked
  7126  001B1A  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7127  001B1C  E139               	bnz	l13087
  7128                           
  7129                           ; BSR set to: 0
  7130  001B1E  0E0A               	movlw	10
  7131  001B20  EC14  F023         	call	_vscp_getGUID
  7132  001B24  0100               	movlb	0	; () banked
  7133  001B26  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7134  001B28  E133               	bnz	l13087
  7135                           
  7136                           ; BSR set to: 0
  7137  001B2A  0E0B               	movlw	11
  7138  001B2C  EC14  F023         	call	_vscp_getGUID
  7139  001B30  0100               	movlb	0	; () banked
  7140  001B32  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7141  001B34  E12D               	bnz	l13087
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7145  001B36  8D7A               	bsf	_vscp_guid_reset& (0+255),6,b
  7146  001B38  D02B               	goto	l13087
  7147  001B3A                     l13073:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7151                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7152                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7153                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7154  001B3A  0E0C               	movlw	12
  7155  001B3C  EC14  F023         	call	_vscp_getGUID
  7156  001B40  0100               	movlb	0	; () banked
  7157  001B42  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7158  001B44  E125               	bnz	l13087
  7159                           
  7160                           ; BSR set to: 0
  7161  001B46  0E0D               	movlw	13
  7162  001B48  EC14  F023         	call	_vscp_getGUID
  7163  001B4C  0100               	movlb	0	; () banked
  7164  001B4E  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7165  001B50  E11F               	bnz	l13087
  7166                           
  7167                           ; BSR set to: 0
  7168  001B52  0E0E               	movlw	14
  7169  001B54  EC14  F023         	call	_vscp_getGUID
  7170  001B58  0100               	movlb	0	; () banked
  7171  001B5A  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7172  001B5C  E119               	bnz	l13087
  7173                           
  7174                           ; BSR set to: 0
  7175  001B5E  0E0F               	movlw	15
  7176  001B60  EC14  F023         	call	_vscp_getGUID
  7177  001B64  0100               	movlb	0	; () banked
  7178  001B66  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7179  001B68  E113               	bnz	l13087
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7183  001B6A  8F7A               	bsf	_vscp_guid_reset& (0+255),7,b
  7184  001B6C  D011               	goto	l13087
  7185  001B6E                     l1465:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7189  001B6E  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  7190                           
  7191                           ;vscp_firmware.c: 965: break;
  7192  001B70  D00F               	goto	l13087
  7193  001B72                     l13085:
  7194                           
  7195                           ; BSR set to: 0
  7196  001B72  399D               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7197  001B74  0B0F               	andlw	15
  7198  001B76  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7199  001B78  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7200                           
  7201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7202                           ; Switch size 1, requested type "space"
  7203                           ; Number of cases is 1, Range of values is 0 to 0
  7204                           ; switch strategies available:
  7205                           ; Name         Instructions Cycles
  7206                           ; simple_byte            4     3 (average)
  7207                           ;	Chosen strategy is simple_byte
  7208  001B7A  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7209  001B7C  E1F8               	bnz	l1465
  7210                           
  7211                           ; BSR set to: 0
  7212                           ; Switch size 1, requested type "space"
  7213                           ; Number of cases is 4, Range of values is 0 to 3
  7214                           ; switch strategies available:
  7215                           ; Name         Instructions Cycles
  7216                           ; simple_byte           13     7 (average)
  7217                           ;	Chosen strategy is simple_byte
  7218  001B7E  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7219  001B80  E08E               	bz	l13043
  7220  001B82  0A01               	xorlw	1	; case 1
  7221  001B84  E0A6               	bz	l13053
  7222  001B86  0A03               	xorlw	3	; case 2
  7223  001B88  E0BE               	bz	l13063
  7224  001B8A  0A01               	xorlw	1	; case 3
  7225  001B8C  E0D6               	bz	l13073
  7226  001B8E  D7EF               	goto	l1465
  7227  001B90                     l13087:
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7231  001B90  517A               	movf	_vscp_guid_reset& (0+255),w,b
  7232  001B92  0BF0               	andlw	240
  7233  001B94  0AF0               	xorlw	240
  7234  001B96  E001 D1F0          	bnz	l1525
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;vscp_firmware.c: 970: vscp_init();
  7238  001B9A  ECAA  F020         	call	_vscp_init	;wreg free
  7239  001B9E  D1ED               	goto	l1525
  7240  001BA0                     l13091:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7244  001BA0  517E               	movf	_vscp_nickname& (0+255),w,b
  7245  001BA2  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7246  001BA6  62DF               	cpfseq	indf2,c
  7247  001BA8  D1E8               	goto	l1525
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;vscp_firmware.c: 978: uint8_t i;
  7251                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7252  001BAA  6BEB               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7253                           
  7254                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7255  001BAC  C09E  F0EA         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7256                           
  7257                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7258  001BB0  C09F  F0ED         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7259                           
  7260                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7261  001BB4  6BF9               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7262  001BB6  D042               	goto	l13123
  7263  001BB8                     l13095:
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7267  001BB8  0E07               	movlw	7
  7268  001BBA  6E08               	movwf	?___lbmod,c
  7269  001BBC  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7270  001BBE  ECCD  F021         	call	___lbmod
  7271  001BC2  0100               	movlb	0	; () banked
  7272  001BC4  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7273  001BC6  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7274  001BC8  0FAB               	addlw	low (_vscp_omsg+6)
  7275  001BCA  6ED9               	movwf	fsr2l,c
  7276  001BCC  6ADA               	clrf	fsr2h,c
  7277  001BCE  51EA               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7278  001BD0  25F9               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7279  001BD2  ECBA  F022         	call	_vscp_readRegister
  7280  001BD6  6EDF               	movwf	indf2,c
  7281                           
  7282                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7283  001BD8  0E07               	movlw	7
  7284  001BDA  6E08               	movwf	?___lbmod,c
  7285  001BDC  0100               	movlb	0	; () banked
  7286  001BDE  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7287  001BE0  ECCD  F021         	call	___lbmod
  7288  001BE4  0A06               	xorlw	6
  7289  001BE6  E00B               	bz	l13101
  7290  001BE8  0EFF               	movlw	255
  7291  001BEA  0100               	movlb	0	; () banked
  7292  001BEC  25ED               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7293  001BEE  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7294  001BF0  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7295  001BF2  0EFF               	movlw	255
  7296  001BF4  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7297  001BF6  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7298  001BF8  19DF               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7299  001BFA  11E0               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7300  001BFC  E11E               	bnz	l13121
  7301  001BFE                     l13101:
  7302                           
  7303                           ;vscp_firmware.c: 988: uint8_t bytes;
  7304                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7305  001BFE  0E07               	movlw	7
  7306  001C00  6E08               	movwf	?___lbmod,c
  7307  001C02  0100               	movlb	0	; () banked
  7308  001C04  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7309  001C06  ECCD  F021         	call	___lbmod
  7310  001C0A  0A06               	xorlw	6
  7311  001C0C  E103               	bnz	l13105
  7312                           
  7313                           ;vscp_firmware.c: 991: bytes = 7;
  7314  001C0E  0E07               	movlw	7
  7315  001C10  0100               	movlb	0	; () banked
  7316  001C12  D009               	goto	L21
  7317  001C14                     l13105:
  7318                           
  7319                           ;vscp_firmware.c: 993: else {
  7320                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7321  001C14  0E07               	movlw	7
  7322  001C16  6E08               	movwf	?___lbmod,c
  7323  001C18  0100               	movlb	0	; () banked
  7324  001C1A  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7325  001C1C  ECCD  F021         	call	___lbmod
  7326  001C20  0100               	movlb	0	; () banked
  7327  001C22  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7328  001C24  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7329  001C26                     L21:
  7330  001C26  6FEC               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;vscp_firmware.c: 995: }
  7334                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7335  001C28  51EC               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7336  001C2A  0F81               	addlw	129
  7337  001C2C  6FA5               	movwf	_vscp_omsg& (0+255),b
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7347  001C2E  D9BC               	call	PL92	;call to abstracted procedure
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7351  001C30  C0EB  F0AA         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  7355  001C34  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;vscp_firmware.c: 1005: pos++;
  7359  001C38  2BEB               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  7360  001C3A                     l13121:
  7361                           
  7362                           ; BSR set to: 0
  7363  001C3A  2BF9               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  7364  001C3C                     l13123:
  7365                           
  7366                           ; BSR set to: 0
  7367  001C3C  51ED               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  7368  001C3E  5DF9               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7369  001C40  E301 D19B          	bc	l1525
  7370  001C44  D7B9               	goto	l13095
  7371  001C46                     l13125:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7375  001C46  517E               	movf	_vscp_nickname& (0+255),w,b
  7376  001C48  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7377  001C4C  62DF               	cpfseq	indf2,c
  7378  001C4E  D195               	goto	l1525
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;vscp_firmware.c: 1014: uint8_t i;
  7382                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  7383  001C50  C09E  F0EE         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1502
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  7387  001C54  5197               	movf	_vscp_imsg& (0+255),w,b
  7388  001C56  0FFE               	addlw	254
  7389  001C58  0B07               	andlw	7
  7390  001C5A  6FEF               	movwf	vscp_handleProtocolEvent@len_1503& (0+255),b
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  7394  001C5C  6BF4               	clrf	vscp_handleProtocolEvent@i_1501& (0+255),b
  7395  001C5E  D016               	goto	l13139
  7396  001C60                     l13133:
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  7400  001C60  51F4               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7401  001C62  0F9F               	addlw	low (_vscp_imsg+8)
  7402  001C64  6ED9               	movwf	fsr2l,c
  7403  001C66  6ADA               	clrf	fsr2h,c
  7404  001C68  50DF               	movf	indf2,w,c
  7405  001C6A  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  7406  001C6C  51EE               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7407  001C6E  25F4               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7408  001C70  EC51  F022         	call	_vscp_writeRegister
  7409                           
  7410                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  7411  001C74  0100               	movlb	0	; () banked
  7412  001C76  51F4               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7413  001C78  0FAB               	addlw	low (_vscp_omsg+6)
  7414  001C7A  6ED9               	movwf	fsr2l,c
  7415  001C7C  6ADA               	clrf	fsr2h,c
  7416  001C7E  51EE               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7417  001C80  25F4               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7418  001C82  ECBA  F022         	call	_vscp_readRegister
  7419  001C86  6EDF               	movwf	indf2,c
  7420  001C88  0100               	movlb	0	; () banked
  7421  001C8A  2BF4               	incf	vscp_handleProtocolEvent@i_1501& (0+255),f,b
  7422  001C8C                     l13139:
  7423                           
  7424                           ; BSR set to: 0
  7425  001C8C  51EF               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7426  001C8E  5DF4               	subwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7427  001C90  E3E7               	bnc	l13133
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;vscp_firmware.c: 1022: }
  7431                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  7435                           
  7436                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  7437  001C92  D98A               	call	PL92	;call to abstracted procedure
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  7441  001C94  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  7445  001C96  51EF               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7446  001C98  0F81               	addlw	129
  7447  001C9A  6FA5               	movwf	_vscp_omsg& (0+255),b
  7448  001C9C  D6B2               	goto	l12977
  7449  001C9E                     l13151:
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7453  001C9E  517E               	movf	_vscp_nickname& (0+255),w,b
  7454  001CA0  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7455  001CA4  62DF               	cpfseq	indf2,c
  7456  001CA6  D169               	goto	l1525
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7460                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  7461                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  7462  001CA8  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7463  001CAA  EC3E  F017         	call	_vscp_readAppReg
  7464  001CAE  0100               	movlb	0	; () banked
  7465  001CB0  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7466  001CB2  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7467  001CB4  6E4F               	movwf	?_vscp_writeAppReg,c
  7468  001CB6  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7469  001CB8  EC11  F003         	call	_vscp_writeAppReg
  7470  001CBC  D697               	goto	L20
  7471  001CBE                     l13167:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7475  001CBE  517E               	movf	_vscp_nickname& (0+255),w,b
  7476  001CC0  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7477  001CC4  62DF               	cpfseq	indf2,c
  7478  001CC6  D159               	goto	l1525
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7482                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  7483                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  7484  001CC8  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7485  001CCA  EC3E  F017         	call	_vscp_readAppReg
  7486  001CCE  0100               	movlb	0	; () banked
  7487  001CD0  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7488  001CD2  05DF               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  7489  001CD4  6E4F               	movwf	?_vscp_writeAppReg,c
  7490  001CD6  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7491  001CD8  EC11  F003         	call	_vscp_writeAppReg
  7492  001CDC  D687               	goto	L20
  7493  001CDE                     l13183:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  7497                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  7498  001CDE  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
  7499  001CE0  197E               	xorwf	_vscp_nickname& (0+255),w,b
  7500  001CE2  E003               	bz	l1489
  7501                           
  7502                           ; BSR set to: 0
  7503  001CE4  299D               	incf	(_vscp_imsg+6)& (0+255),w,b
  7504  001CE6  E001 D148          	bnz	l1525
  7505  001CEA                     l1489:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  7509  001CEA  6BF3               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  7513  001CEC  0E03               	movlw	3
  7514  001CEE  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7515                           
  7516                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  7517  001CF0  0E88               	movlw	136
  7518  001CF2  6FA5               	movwf	_vscp_omsg& (0+255),b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  7522  001CF4  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7523  001CF6  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7524                           
  7525                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  7526  001CF8  0E20               	movlw	32
  7527  001CFA  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  7531  001CFC  6BF8               	clrf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7532  001CFE                     l1490:
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;vscp_firmware.c: 1091: {
  7536                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  7540  001CFE  D95B               	call	PL108	;call to abstracted procedure
  7541  001D00                     l13203:
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  7545  001D00  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7546  001D02  0FAA               	addlw	low (_vscp_omsg+5)
  7547  001D04  6ED9               	movwf	fsr2l,c
  7548  001D06  6ADA               	clrf	fsr2h,c
  7549  001D08  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7550  001D0A  080F               	sublw	15
  7551  001D0C  EC14  F023         	call	_vscp_getGUID
  7552  001D10  6EDF               	movwf	indf2,c
  7553  001D12  0100               	movlb	0	; () banked
  7554  001D14  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;vscp_firmware.c: 1096: if (k > 16)
  7558  001D16  0E10               	movlw	16
  7559  001D18  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7560  001D1A  D001               	goto	l13211
  7561  001D1C  D004               	goto	l13215
  7562  001D1E                     l13211:
  7563                           
  7564                           ; BSR set to: 0
  7565  001D1E  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7566                           
  7567                           ; BSR set to: 0
  7568  001D20  0E07               	movlw	7
  7569  001D22  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7570  001D24  D7ED               	goto	l13203
  7571  001D26                     l13215:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;vscp_firmware.c: 1098: }
  7575                           ;vscp_firmware.c: 1100: if (k > 16)
  7576  001D26  0E10               	movlw	16
  7577  001D28  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7578  001D2A  D001               	goto	l13219
  7579  001D2C  D006               	goto	l1491
  7580  001D2E                     l13219:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  7584  001D2E  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  7585                           
  7586                           ; BSR set to: 0
  7587  001D32  2BF8               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7588                           
  7589                           ; BSR set to: 0
  7590  001D34  0E02               	movlw	2
  7591  001D36  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7592  001D38  D7E2               	goto	l1490
  7593  001D3A                     l1491:
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;vscp_firmware.c: 1104: }
  7597                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  7598  001D3A  6BFA               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  7599  001D3C                     l13229:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;vscp_firmware.c: 1107: {
  7603                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  7604  001D3C  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7605  001D3E  ECC7  F022         	call	_vscp_getMDF_URL
  7606  001D42  0900               	iorlw	0
  7607  001D44  E008               	bz	l13233
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  7611  001D46  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7612  001D48  0FAD               	addlw	low (_vscp_omsg+8)
  7613  001D4A  6ED9               	movwf	fsr2l,c
  7614  001D4C  6ADA               	clrf	fsr2h,c
  7615  001D4E  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7616  001D50  ECC7  F022         	call	_vscp_getMDF_URL
  7617  001D54  D005               	goto	L22
  7618  001D56                     l13233:
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;vscp_firmware.c: 1110: else
  7622                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  7623  001D56  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7624  001D58  0FAD               	addlw	low (_vscp_omsg+8)
  7625  001D5A  6ED9               	movwf	fsr2l,c
  7626  001D5C  6ADA               	clrf	fsr2h,c
  7627  001D5E  0E00               	movlw	0
  7628  001D60                     L22:
  7629  001D60  6EDF               	movwf	indf2,c
  7630                           
  7631                           ; BSR set to: 0
  7632  001D62  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7633                           
  7634                           ; BSR set to: 0
  7635  001D64  0E04               	movlw	4
  7636  001D66  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7637  001D68  D7E9               	goto	l13229
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;vscp_firmware.c: 1112: }
  7641                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  7642  001D6A  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;vscp_firmware.c: 1116: k = 5;
  7646  001D6E  0E05               	movlw	5
  7647  001D70  6FF3               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  7651  001D72  0E03               	movlw	3
  7652  001D74  6FF8               	movwf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7653  001D76                     l1500:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;vscp_firmware.c: 1118: {
  7657                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  7661  001D76  D91F               	call	PL108	;call to abstracted procedure
  7662  001D78                     l13255:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  7666  001D78  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7667  001D7A  0FAA               	addlw	low (_vscp_omsg+5)
  7668  001D7C  6ED9               	movwf	fsr2l,c
  7669  001D7E  6ADA               	clrf	fsr2h,c
  7670  001D80  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7671  001D82  ECC7  F022         	call	_vscp_getMDF_URL
  7672  001D86  6EDF               	movwf	indf2,c
  7673                           
  7674                           ; BSR set to: 0
  7675  001D88  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7676                           
  7677                           ; BSR set to: 0
  7678  001D8A  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7679                           
  7680                           ; BSR set to: 0
  7681  001D8C  0E07               	movlw	7
  7682  001D8E  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7683  001D90  D7F3               	goto	l13255
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;vscp_firmware.c: 1123: }
  7687                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  7688  001D92  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  7689                           
  7690                           ; BSR set to: 0
  7691  001D96  2BF8               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7692                           
  7693                           ; BSR set to: 0
  7694  001D98  0E06               	movlw	6
  7695  001D9A  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7696  001D9C  D7EC               	goto	l1500
  7697  001D9E  D0ED               	goto	l1525
  7698  001DA0                     l13269:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7702  001DA0  517E               	movf	_vscp_nickname& (0+255),w,b
  7703  001DA2  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7704  001DA6  62DF               	cpfseq	indf2,c
  7705  001DA8  D0E8               	goto	l1525
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  7709  001DAA  0E03               	movlw	3
  7710  001DAC  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7711                           
  7712                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  7713  001DAE  0E87               	movlw	135
  7714  001DB0  6FA5               	movwf	_vscp_omsg& (0+255),b
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  7718  001DB2  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7719  001DB4  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7720                           
  7721                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  7722  001DB6  0E22               	movlw	34
  7723  001DB8  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  7727  001DBA  0EAA               	movlw	(_vscp_omsg+5)& (0+255)
  7728  001DBC  EC62  F022         	call	_vscp_getMatrixInfo
  7729  001DC0  D620               	goto	l12977
  7730  001DC2                     l13279:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  7734  001DC2  517E               	movf	_vscp_nickname& (0+255),w,b
  7735  001DC4  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7736  001DC8  62DF               	cpfseq	indf2,c
  7737  001DCA  D0D7               	goto	l1525
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  7741  001DCC  6BF5               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  7745                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  7746  001DCE  C097  F0DF         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  7747  001DD2  0E0F               	movlw	15
  7748  001DD4  17DF               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7749  001DD6  0E04               	movlw	4
  7750  001DD8  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7751  001DDA  E312               	bnc	l13295
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  7755  001DDC  C0A1  F0F6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1508
  7756  001DE0  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  7760  001DE2  51F7               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7761  001DE4  11F6               	iorwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7762  001DE6  E103               	bnz	l13291
  7763                           
  7764                           ; BSR set to: 0
  7765  001DE8  0E01               	movlw	1
  7766  001DEA  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7767  001DEC  6BF6               	clrf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7768  001DEE                     l13291:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  7772  001DEE  0E01               	movlw	1
  7773  001DF0  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7774  001DF2  0E01               	movlw	1
  7775  001DF4  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7776  001DF6  E307               	bnc	l13297
  7777                           
  7778                           ; BSR set to: 0
  7779  001DF8  0E01               	movlw	1
  7780  001DFA  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7781  001DFC  0E00               	movlw	0
  7782  001DFE  D002               	goto	L24
  7783  001E00                     l13295:
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;vscp_firmware.c: 1173: else {
  7787                           ;vscp_firmware.c: 1174: bytes = 1;
  7788  001E00  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7789  001E02  0E01               	movlw	1
  7790  001E04                     L24:
  7791  001E04  6FF6               	movwf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7792  001E06                     l13297:
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;vscp_firmware.c: 1175: }
  7796                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  7797  001E06  C052  F0E6         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  7798  001E0A  C053  F0E7         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  7802  001E0E  D8B6               	call	PL46	;call to abstracted procedure
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  7806  001E10  0E07               	movlw	7
  7807  001E12  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  7823  001E14  D8BF               	call	PL54	;call to abstracted procedure
  7824  001E16                     l13313:
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  7828  001E16  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7829  001E18  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7830  001E1A  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7831  001E1C  0E00               	movlw	0
  7832  001E1E  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7833  001E20  6FE0               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7834  001E22  0E04               	movlw	4
  7835  001E24  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7836  001E26  0E00               	movlw	0
  7837  001E28  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7838  001E2A  E302               	bnc	l13317
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  7842  001E2C  0E04               	movlw	4
  7843  001E2E  D002               	goto	L25
  7844  001E30                     l13317:
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;vscp_firmware.c: 1198: else {
  7848                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  7849  001E30  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7850  001E32  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7851  001E34                     L25:
  7852  001E34  6FF0               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;vscp_firmware.c: 1200: }
  7856                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  7857  001E36  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7858  001E38  0F84               	addlw	132
  7859  001E3A  6FA5               	movwf	_vscp_omsg& (0+255),b
  7860                           
  7861                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  7862                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  7863  001E3C  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7864  001E3E  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7865  001E40  6FAD               	movwf	(_vscp_omsg+8)& (0+255),b
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  7869  001E42  6BF1               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  7870  001E44  D00C               	goto	l13325
  7871  001E46                     l13321:
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  7875                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  7876  001E46  51F1               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7877  001E48  0FAE               	addlw	low (_vscp_omsg+9)
  7878  001E4A  6ED9               	movwf	fsr2l,c
  7879  001E4C  6ADA               	clrf	fsr2h,c
  7880  001E4E  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7881  001E50  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7882  001E52  25F1               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7883  001E54  ECBA  F022         	call	_vscp_readRegister
  7884  001E58  6EDF               	movwf	indf2,c
  7885  001E5A  0100               	movlb	0	; () banked
  7886  001E5C  2BF1               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  7887  001E5E                     l13325:
  7888                           
  7889                           ; BSR set to: 0
  7890  001E5E  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7891  001E60  5DF1               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7892  001E62  E3F1               	bnc	l13321
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;vscp_firmware.c: 1211: }
  7896                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  7897  001E64  EC1A  F022         	call	_vscp_sendEvent	;wreg free
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  7901  001E68  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7902  001E6A  27F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  7906  001E6C  2BAA               	incf	(_vscp_omsg+5)& (0+255),f,b
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  7910  001E6E  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7911  001E70  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7912  001E72  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7913  001E74  51F6               	movf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7914  001E76  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7915  001E78  51F7               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7916  001E7A  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7917  001E7C  E3CC               	bnc	l13313
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  7921  001E7E  C0E6  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  7922  001E82  C0E7  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  7923  001E86  D079               	goto	l1525
  7924  001E88                     l13335:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  7928  001E88  517E               	movf	_vscp_nickname& (0+255),w,b
  7929  001E8A  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7930  001E8E  62DF               	cpfseq	indf2,c
  7931  001E90  D074               	goto	l1525
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;vscp_firmware.c: 1234: uint8_t i;
  7935                           ;vscp_firmware.c: 1235: uint16_t page_save;
  7936                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  7937  001E92  C052  F0E8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1513
  7938  001E96  C053  F0E9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1513+1
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  7942  001E9A  D870               	call	PL46	;call to abstracted procedure
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  7946  001E9C  C0A0  F0F2         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1512
  7947                           
  7948                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  7949                           ;vscp_firmware.c: 1248: i++) {
  7950  001EA0  D014               	goto	l13347
  7951  001EA2                     l13343:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  7955                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  7956  001EA2  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7957  001EA4  08A1               	sublw	low (_vscp_imsg+10)
  7958  001EA6  25F2               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7959  001EA8  6ED9               	movwf	fsr2l,c
  7960  001EAA  6ADA               	clrf	fsr2h,c
  7961  001EAC  50DF               	movf	indf2,w,c
  7962  001EAE  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  7963  001EB0  51F2               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7964  001EB2  EC51  F022         	call	_vscp_writeRegister
  7965  001EB6  0100               	movlb	0	; () banked
  7966  001EB8  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7967  001EBA  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7968  001EBC  08AE               	sublw	low (_vscp_omsg+9)
  7969  001EBE  25F2               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7970  001EC0  6ED9               	movwf	fsr2l,c
  7971  001EC2  6ADA               	clrf	fsr2h,c
  7972  001EC4  C0DF  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7973                           
  7974                           ; BSR set to: 0
  7975  001EC8  2BF2               	incf	vscp_handleProtocolEvent@i_1512& (0+255),f,b
  7976  001ECA                     l13347:
  7977                           
  7978                           ; BSR set to: 0
  7979  001ECA  5197               	movf	_vscp_imsg& (0+255),w,b
  7980  001ECC  0B0F               	andlw	15
  7981  001ECE  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7982  001ED0  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7983  001ED2  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  7984  001ED4  27DF               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7985  001ED6  0E00               	movlw	0
  7986  001ED8  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7987  001EDA  0EFC               	movlw	252
  7988  001EDC  25DF               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7989  001EDE  6FE1               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  7990  001EE0  0EFF               	movlw	255
  7991  001EE2  21E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7992  001EE4  6FE2               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  7993  001EE6  51F2               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7994  001EE8  6FE3               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  7995  001EEA  6BE4               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  7996  001EEC  51E4               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  7997  001EEE  0A80               	xorlw	128
  7998  001EF0  6FE5               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  7999  001EF2  51E1               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8000  001EF4  5DE3               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8001  001EF6  51E2               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8002  001EF8  0A80               	xorlw	128
  8003  001EFA  59E5               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8004  001EFC  E3D2               	bnc	l13343
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 1251: }
  8008                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8009  001EFE  C0E8  F052         	movff	vscp_handleProtocolEvent@page_save_1513,_vscp_page_select
  8010  001F02  C0E9  F053         	movff	vscp_handleProtocolEvent@page_save_1513+1,_vscp_page_select+1
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8014  001F06  0E07               	movlw	7
  8015  001F08  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8019  001F0A  5197               	movf	_vscp_imsg& (0+255),w,b
  8020  001F0C  0B0F               	andlw	15
  8021  001F0E  0F80               	addlw	128
  8022  001F10  6FA5               	movwf	_vscp_omsg& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8038  001F12  D840               	call	PL54	;call to abstracted procedure
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8042  001F14  C0A0  F0AD         	movff	_vscp_imsg+9,_vscp_omsg+8
  8043  001F18  D574               	goto	l12977
  8044  001F1A                     l13369:
  8045                           
  8046                           ; BSR set to: 0
  8047  001F1A  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  8048                           
  8049                           ; Switch size 1, requested type "space"
  8050                           ; Number of cases is 16, Range of values is 1 to 38
  8051                           ; switch strategies available:
  8052                           ; Name         Instructions Cycles
  8053                           ; simple_byte           49    25 (average)
  8054                           ;	Chosen strategy is simple_byte
  8055  001F1C  0A01               	xorlw	1	; case 1
  8056  001F1E  E101 D548          	bz	l12951
  8057  001F22  0A03               	xorlw	3	; case 2
  8058  001F24  E101 D548          	bz	l12953
  8059  001F28  0A04               	xorlw	4	; case 6
  8060  001F2A  E101 D548          	bz	l12955
  8061  001F2E  0A0E               	xorlw	14	; case 8
  8062  001F30  E101 D548          	bz	l12957
  8063  001F34  0A01               	xorlw	1	; case 9
  8064  001F36  E101 D548          	bz	l12959
  8065  001F3A  0A02               	xorlw	2	; case 11
  8066  001F3C  E101 D568          	bz	l12993
  8067  001F40  0A07               	xorlw	7	; case 12
  8068  001F42  E101 D57E          	bz	l13027
  8069  001F46  0A1B               	xorlw	27	; case 23
  8070  001F48  E101 D613          	bz	l13085
  8071  001F4C  0A0F               	xorlw	15	; case 24
  8072  001F4E  E101 D627          	bz	l13091
  8073  001F52  0A01               	xorlw	1	; case 25
  8074  001F54  E101 D677          	bz	l13125
  8075  001F58  0A04               	xorlw	4	; case 29
  8076  001F5A  E101 D6A0          	bz	l13151
  8077  001F5E  0A03               	xorlw	3	; case 30
  8078  001F60  E101 D6AD          	bz	l13167
  8079  001F64  0A01               	xorlw	1	; case 31
  8080  001F66  E101 D6BA          	bz	l13183
  8081  001F6A  0A3E               	xorlw	62	; case 33
  8082  001F6C  E101 D718          	bz	l13269
  8083  001F70  0A04               	xorlw	4	; case 37
  8084  001F72  E101 D726          	bz	l13279
  8085  001F76  0A03               	xorlw	3	; case 38
  8086  001F78  E087               	bz	l13335
  8087  001F7A                     l1525:
  8088  001F7A  0012               	return	
  8089  001F7C                     __end_of_vscp_handleProtocolEvent:
  8090                           	opt stack 0
  8091  001F7C                     PL46:
  8092                           	opt stack 20
  8093  001F7C  519F               	movf	(_vscp_imsg+8)& (0+255),w,b
  8094  001F7E  C09E  F0DF         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8095  001F82  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8096  001F84  C0DF  F0E0         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8097  001F88  6BDF               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8098  001F8A  11DF               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8099  001F8C  6E52               	movwf	_vscp_page_select,c
  8100  001F8E  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8101  001F90  6E53               	movwf	_vscp_page_select+1,c
  8102  001F92  0012               	return	
  8103  001F94                     __end_ofPL46:
  8104                           	opt stack 0
  8105  001F94                     PL54:
  8106                           	opt stack 20
  8107  001F94  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8108  001F96  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8109  001F98  0E27               	movlw	39
  8110  001F9A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8111  001F9C  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  8112  001F9E  C09E  F0AB         	movff	_vscp_imsg+7,_vscp_omsg+6
  8113  001FA2  C09F  F0AC         	movff	_vscp_imsg+8,_vscp_omsg+7
  8114  001FA6  0012               	return	
  8115  001FA8                     __end_ofPL54:
  8116                           	opt stack 0
  8117  001FA8                     PL92:
  8118                           	opt stack 20
  8119  001FA8  0E07               	movlw	7
  8120  001FAA  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8121  001FAC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8122  001FAE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8123  001FB0  0E1A               	movlw	26
  8124  001FB2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8125  001FB4  0C1A               	retlw	26
  8126  001FB6                     __end_ofPL92:
  8127                           	opt stack 0
  8128  001FB6                     PL108:
  8129                           	opt stack 20
  8130  001FB6  C0F8  F0AA         	movff	vscp_handleProtocolEvent@i_1504,_vscp_omsg+5
  8131  001FBA  0E01               	movlw	1
  8132  001FBC  6FFA               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8133  001FBE  0C01               	retlw	1
  8134  001FC0                     __end_ofPL108:
  8135                           	opt stack 0
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           postinc0	equ	0xFEE
  8145                           wreg	equ	0xFE8
  8146                           indf1	equ	0xFE7
  8147                           fsr1h	equ	0xFE2
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           plusw2	equ	0xFDB
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           
  8157 ;; *************** function ___lbmod *****************
  8158 ;; Defined at:
  8159 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  dividend        1    wreg     unsigned char 
  8162 ;;  divisor         1    7[COMRAM] unsigned char 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  dividend        1    8[COMRAM] unsigned char 
  8165 ;;  rem             1   10[COMRAM] unsigned char 
  8166 ;;  counter         1    9[COMRAM] unsigned char 
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      unsigned char 
  8169 ;; Registers used:
  8170 ;;		wreg, status,2, status,0
  8171 ;; Tracked objects:
  8172 ;;		On entry : F/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8176 ;;      Params:         1       0       0       0       0       0       0
  8177 ;;      Locals:         3       0       0       0       0       0       0
  8178 ;;      Temps:          0       0       0       0       0       0       0
  8179 ;;      Totals:         4       0       0       0       0       0       0
  8180 ;;Total ram usage:        4 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    2
  8183 ;; This function calls:
  8184 ;;		Nothing
  8185 ;; This function is called by:
  8186 ;;		_vscp_handleProtocolEvent
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text17
  8191  00439A                     __ptext17:
  8192                           	opt stack 0
  8193  00439A                     ___lbmod:
  8194                           	opt stack 26
  8195                           
  8196                           ;incstack = 0
  8197                           ;incstack = 0
  8198                           ;___lbmod@dividend stored from wreg
  8199  00439A  CFE8 F009          	movff	wreg,___lbmod@dividend
  8200                           
  8201                           ; BSR set to: 0
  8202  00439E  0E08               	movlw	8
  8203  0043A0  6E0A               	movwf	___lbmod@counter,c
  8204                           
  8205                           ; BSR set to: 0
  8206  0043A2  6A0B               	clrf	___lbmod@rem,c
  8207  0043A4                     l12189:
  8208  0043A4  90D8               	bcf	status,0,c
  8209  0043A6  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  8210  0043A8  340B               	rlcf	___lbmod@rem& (0+255),w,c
  8211  0043AA  6E0B               	movwf	___lbmod@rem,c
  8212  0043AC  90D8               	bcf	status,0,c
  8213  0043AE  3609               	rlcf	___lbmod@dividend,f,c
  8214  0043B0  5008               	movf	___lbmod@divisor,w,c
  8215  0043B2  5C0B               	subwf	___lbmod@rem,w,c
  8216  0043B4  E302               	bnc	l12197
  8217  0043B6  5008               	movf	___lbmod@divisor,w,c
  8218  0043B8  5E0B               	subwf	___lbmod@rem,f,c
  8219  0043BA                     l12197:
  8220  0043BA  2E0A               	decfsz	___lbmod@counter,f,c
  8221  0043BC  D7F3               	goto	l12189
  8222  0043BE  500B               	movf	___lbmod@rem,w,c
  8223  0043C0  0012               	return	
  8224  0043C2                     __end_of___lbmod:
  8225                           	opt stack 0
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           intcon	equ	0xFF2
  8233                           intcon2	equ	0xFF1
  8234                           postinc0	equ	0xFEE
  8235                           wreg	equ	0xFE8
  8236                           indf1	equ	0xFE7
  8237                           fsr1h	equ	0xFE2
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           plusw2	equ	0xFDB
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function _vscp_writeRegister *****************
  8248 ;; Defined at:
  8249 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  reg             1    wreg     unsigned char 
  8252 ;;  value           1   34[BANK0 ] unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  reg             1   79[COMRAM] unsigned char 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      unsigned char 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : F/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8264 ;;      Params:         0       1       0       0       0       0       0
  8265 ;;      Locals:         1       0       0       0       0       0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0
  8267 ;;      Totals:         1       1       0       0       0       0       0
  8268 ;;Total ram usage:        2 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    8
  8271 ;; This function calls:
  8272 ;;		_vscp_writeAppReg
  8273 ;;		_vscp_writeStdReg
  8274 ;; This function is called by:
  8275 ;;		_vscp_handleProtocolEvent
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           	psect	text18
  8280  0044A2                     __ptext18:
  8281                           	opt stack 0
  8282  0044A2                     _vscp_writeRegister:
  8283                           	opt stack 20
  8284                           
  8285                           ;incstack = 0
  8286                           ;incstack = 0
  8287                           ;vscp_writeRegister@reg stored from wreg
  8288  0044A2  CFE8 F050          	movff	wreg,vscp_writeRegister@reg
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8292  0044A6  0E7F               	movlw	127
  8293  0044A8  6450               	cpfsgt	vscp_writeRegister@reg,c
  8294  0044AA  D006               	goto	l15115
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8298  0044AC  C0DE  F036         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8299  0044B0  5050               	movf	vscp_writeRegister@reg,w,c
  8300  0044B2  EC87  F01C         	call	_vscp_writeStdReg
  8301  0044B6  D005               	goto	l1405
  8302  0044B8                     l15115:
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;vscp_firmware.c: 705: else {
  8306                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8307  0044B8  C0DE  F04F         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8308  0044BC  5050               	movf	vscp_writeRegister@reg,w,c
  8309  0044BE  EC11  F003         	call	_vscp_writeAppReg
  8310  0044C2                     l1405:
  8311  0044C2  0012               	return	
  8312  0044C4                     __end_of_vscp_writeRegister:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           postinc0	equ	0xFEE
  8323                           wreg	equ	0xFE8
  8324                           indf1	equ	0xFE7
  8325                           fsr1h	equ	0xFE2
  8326                           fsr1l	equ	0xFE1
  8327                           indf2	equ	0xFDF
  8328                           postinc2	equ	0xFDE
  8329                           postdec2	equ	0xFDD
  8330                           plusw2	equ	0xFDB
  8331                           fsr2h	equ	0xFDA
  8332                           fsr2l	equ	0xFD9
  8333                           status	equ	0xFD8
  8334                           
  8335 ;; *************** function _vscp_writeStdReg *****************
  8336 ;; Defined at:
  8337 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  reg             1    wreg     unsigned char 
  8340 ;;  value           1   53[COMRAM] unsigned char 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  reg             1   59[COMRAM] unsigned char 
  8343 ;;  rv              1   58[COMRAM] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      unsigned char 
  8346 ;; Registers used:
  8347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : F/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8353 ;;      Params:         1       0       0       0       0       0       0
  8354 ;;      Locals:         2       0       0       0       0       0       0
  8355 ;;      Temps:          4       0       0       0       0       0       0
  8356 ;;      Totals:         7       0       0       0       0       0       0
  8357 ;;Total ram usage:        7 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    5
  8360 ;; This function calls:
  8361 ;;		_vscp_setGUID
  8362 ;;		_vscp_setManufacturerId
  8363 ;;		_vscp_getGUID
  8364 ;;		_vscp_getUserID
  8365 ;;		_vscp_setUserID
  8366 ;;		_vscp_getManufacturerId
  8367 ;;		_vscp_restoreDefaults
  8368 ;; This function is called by:
  8369 ;;		_vscp_writeRegister
  8370 ;;		_vscp_handleProtocolEvent
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text19
  8375  00390E                     __ptext19:
  8376                           	opt stack 0
  8377  00390E                     _vscp_writeStdReg:
  8378                           	opt stack 23
  8379                           
  8380                           ;incstack = 0
  8381                           ;incstack = 0
  8382                           ;vscp_writeStdReg@reg stored from wreg
  8383  00390E  CFE8 F03C          	movff	wreg,vscp_writeStdReg@reg
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  8387  003912  1C36               	comf	vscp_writeStdReg@value,w,c
  8388  003914  6E3B               	movwf	vscp_writeStdReg@rv,c
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  8392                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  8393  003916  0E83               	movlw	131
  8394  003918  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8395  00391A  D00E               	goto	l15127
  8396                           
  8397                           ; BSR set to: 0
  8398  00391C  0E89               	movlw	137
  8399  00391E  603C               	cpfslt	vscp_writeStdReg@reg,c
  8400  003920  D00B               	goto	l15127
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  8404  003922  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  8405  003926  503C               	movf	vscp_writeStdReg@reg,w,c
  8406  003928  0F7C               	addlw	124
  8407  00392A  EC9E  F022         	call	_vscp_setUserID
  8408                           
  8409                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  8410  00392E  503C               	movf	vscp_writeStdReg@reg,w,c
  8411  003930  0F7C               	addlw	124
  8412  003932  EC0A  F023         	call	_vscp_getUserID
  8413  003936  D069               	goto	L31
  8414  003938                     l15127:
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  8418  003938  503C               	movf	vscp_writeStdReg@reg,w,c
  8419  00393A  0A92               	xorlw	146
  8420  00393C  E10D               	bnz	l15133
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  8424  00393E  5036               	movf	vscp_writeStdReg@value,w,c
  8425  003940  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8426  003942  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8427  003944  5052               	movf	_vscp_page_select,w,c
  8428  003946  6E39               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  8429  003948  6A3A               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  8430  00394A  1037               	iorwf	??_vscp_writeStdReg,w,c
  8431  00394C  6E52               	movwf	_vscp_page_select,c
  8432  00394E  5038               	movf	??_vscp_writeStdReg+1,w,c
  8433  003950  103A               	iorwf	??_vscp_writeStdReg+3,w,c
  8434  003952  6E53               	movwf	_vscp_page_select+1,c
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  8438  003954  5053               	movf	_vscp_page_select+1,w,c
  8439  003956  D059               	goto	L31
  8440  003958                     l15133:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  8444  003958  503C               	movf	vscp_writeStdReg@reg,w,c
  8445  00395A  0A93               	xorlw	147
  8446  00395C  E10B               	bnz	l15139
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  8450  00395E  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8451  003960  5053               	movf	_vscp_page_select+1,w,c
  8452  003962  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8453  003964  5036               	movf	vscp_writeStdReg@value,w,c
  8454  003966  1037               	iorwf	??_vscp_writeStdReg,w,c
  8455  003968  6E52               	movwf	_vscp_page_select,c
  8456  00396A  5038               	movf	??_vscp_writeStdReg+1,w,c
  8457  00396C  6E53               	movwf	_vscp_page_select+1,c
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  8461  00396E  C052  F03B         	movff	_vscp_page_select,vscp_writeStdReg@rv
  8462                           
  8463                           ;vscp_firmware.c: 737: }
  8464  003972  D04E               	goto	l15181
  8465  003974                     l15139:
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  8469  003974  0E88               	movlw	136
  8470  003976  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8471  003978  D019               	goto	l15151
  8472                           
  8473                           ; BSR set to: 0
  8474  00397A  0E91               	movlw	145
  8475  00397C  603C               	cpfslt	vscp_writeStdReg@reg,c
  8476  00397E  D016               	goto	l15151
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8480                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  8481  003980  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8482  003984  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8483  003988  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8484  00398A  2838               	incf	??_vscp_writeStdReg+1,w,c
  8485  00398C  E102               	bnz	l15147
  8486                           
  8487                           ; BSR set to: 0
  8488  00398E  2852               	incf	_vscp_page_select,w,c
  8489  003990  E002               	bz	l15149
  8490  003992                     l15147:
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;vscp_firmware.c: 747: rv = ~value;
  8494  003992  1C36               	comf	vscp_writeStdReg@value,w,c
  8495  003994  D03A               	goto	L31
  8496  003996                     l15149:
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;vscp_firmware.c: 749: else {
  8500                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  8501  003996  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  8502  00399A  503C               	movf	vscp_writeStdReg@reg,w,c
  8503  00399C  0F77               	addlw	119
  8504  00399E  ECF4  F021         	call	_vscp_setManufacturerId
  8505                           
  8506                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  8507  0039A2  503C               	movf	vscp_writeStdReg@reg,w,c
  8508  0039A4  0F77               	addlw	119
  8509  0039A6  EC00  F023         	call	_vscp_getManufacturerId
  8510  0039AA  D02F               	goto	L31
  8511  0039AC                     l15151:
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  8515  0039AC  0ECF               	movlw	207
  8516  0039AE  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8517  0039B0  D017               	goto	l15163
  8518                           
  8519                           ; BSR set to: 0
  8520  0039B2  0EE0               	movlw	224
  8521  0039B4  603C               	cpfslt	vscp_writeStdReg@reg,c
  8522  0039B6  D014               	goto	l15163
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8526                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  8527  0039B8  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8528  0039BC  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8529  0039C0  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8530  0039C2  2838               	incf	??_vscp_writeStdReg+1,w,c
  8531  0039C4  E1E6               	bnz	l15147
  8532                           
  8533                           ; BSR set to: 0
  8534  0039C6  2852               	incf	_vscp_page_select,w,c
  8535  0039C8  E1E4               	bnz	l15147
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;vscp_firmware.c: 762: else {
  8539                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  8540  0039CA  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  8541  0039CE  503C               	movf	vscp_writeStdReg@reg,w,c
  8542  0039D0  0F30               	addlw	48
  8543  0039D2  EC07  F022         	call	_vscp_setGUID
  8544                           
  8545                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  8546  0039D6  503C               	movf	vscp_writeStdReg@reg,w,c
  8547  0039D8  0F30               	addlw	48
  8548  0039DA  EC14  F023         	call	_vscp_getGUID
  8549  0039DE  D015               	goto	L31
  8550  0039E0                     l15163:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  8554  0039E0  503C               	movf	vscp_writeStdReg@reg,w,c
  8555  0039E2  0AA2               	xorlw	162
  8556  0039E4  E1D6               	bnz	l15147
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  8560  0039E6  5036               	movf	vscp_writeStdReg@value,w,c
  8561  0039E8  0A55               	xorlw	85
  8562  0039EA  E104               	bnz	l15171
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  8566  0039EC  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  8567  0039EE  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;vscp_firmware.c: 771: rv = 0x55;
  8571  0039F0  0E55               	movlw	85
  8572  0039F2  D00B               	goto	L31
  8573  0039F4                     l15171:
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  8577  0039F4  5036               	movf	vscp_writeStdReg@value,w,c
  8578  0039F6  0AAA               	xorlw	170
  8579  0039F8  E10B               	bnz	l15181
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  8583  0039FA  0EE8               	movlw	232
  8584  0039FC  5D6C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  8585  0039FE  0E03               	movlw	3
  8586  003A00  596D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  8587  003A02  E205               	bc	l1431
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  8591  003A04  EC57  F023         	call	_vscp_restoreDefaults	;wreg free
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;vscp_firmware.c: 776: rv = 0xaa;
  8595  003A08  0EAA               	movlw	170
  8596  003A0A                     L31:
  8597  003A0A  6E3B               	movwf	vscp_writeStdReg@rv,c
  8598                           
  8599                           ;vscp_firmware.c: 777: }
  8600  003A0C  D001               	goto	l15181
  8601  003A0E                     l1431:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;vscp_firmware.c: 778: else {
  8605                           ;vscp_firmware.c: 779: rv = 0;
  8606  003A0E  6A3B               	clrf	vscp_writeStdReg@rv,c
  8607  003A10                     l15181:
  8608                           
  8609                           ;vscp_firmware.c: 787: }
  8610                           ;vscp_firmware.c: 789: return rv;
  8611  003A10  503B               	movf	vscp_writeStdReg@rv,w,c
  8612  003A12  0012               	return	
  8613  003A14                     __end_of_vscp_writeStdReg:
  8614                           	opt stack 0
  8615                           tblptru	equ	0xFF8
  8616                           tblptrh	equ	0xFF7
  8617                           tblptrl	equ	0xFF6
  8618                           tablat	equ	0xFF5
  8619                           prodh	equ	0xFF4
  8620                           prodl	equ	0xFF3
  8621                           intcon	equ	0xFF2
  8622                           intcon2	equ	0xFF1
  8623                           postinc0	equ	0xFEE
  8624                           wreg	equ	0xFE8
  8625                           indf1	equ	0xFE7
  8626                           fsr1h	equ	0xFE2
  8627                           fsr1l	equ	0xFE1
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           plusw2	equ	0xFDB
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _vscp_restoreDefaults *****************
  8637 ;; Defined at:
  8638 ;;		line 3512 in file "../main.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;		None               void
  8645 ;; Registers used:
  8646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : F/0
  8649 ;;		On exit  : F/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8652 ;;      Params:         0       0       0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0
  8655 ;;      Totals:         0       0       0       0       0       0       0
  8656 ;;Total ram usage:        0 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    4
  8659 ;; This function calls:
  8660 ;;		_init_app_eeprom
  8661 ;;		_init_app_ram
  8662 ;; This function is called by:
  8663 ;;		_vscp_writeStdReg
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text20
  8668  0046AE                     __ptext20:
  8669                           	opt stack 0
  8670  0046AE                     _vscp_restoreDefaults:
  8671                           	opt stack 23
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 3513: init_app_eeprom();
  8675                           
  8676                           ;incstack = 0
  8677                           ;incstack = 0
  8678  0046AE  EC97  F019         	call	_init_app_eeprom	;wreg free
  8679                           
  8680                           ;main.c: 3514: init_app_ram();
  8681  0046B2  EFC2  F013         	goto	_init_app_ram	;wreg free
  8682  0046B6                     __end_of_vscp_restoreDefaults:
  8683                           	opt stack 0
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodh	equ	0xFF4
  8689                           prodl	equ	0xFF3
  8690                           intcon	equ	0xFF2
  8691                           intcon2	equ	0xFF1
  8692                           postinc0	equ	0xFEE
  8693                           wreg	equ	0xFE8
  8694                           indf1	equ	0xFE7
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           plusw2	equ	0xFDB
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function _init_app_ram *****************
  8706 ;; Defined at:
  8707 ;;		line 759 in file "../main.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;		None
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  i               1   52[COMRAM] unsigned char 
  8712 ;;  dir             1   51[COMRAM] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : F/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8722 ;;      Params:         0       0       0       0       0       0       0
  8723 ;;      Locals:         2       0       0       0       0       0       0
  8724 ;;      Temps:         36       0       0       0       0       0       0
  8725 ;;      Totals:        38       0       0       0       0       0       0
  8726 ;;Total ram usage:       38 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    3
  8729 ;; This function calls:
  8730 ;;		_Read_b_eep
  8731 ;;		_memset
  8732 ;; This function is called by:
  8733 ;;		_main
  8734 ;;		_vscp_restoreDefaults
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text21
  8739  002784                     __ptext21:
  8740                           	opt stack 0
  8741  002784                     _init_app_ram:
  8742                           	opt stack 23
  8743                           
  8744                           ;main.c: 760: uint8_t i;
  8745                           ;main.c: 761: uint8_t dir;
  8746                           ;main.c: 763: measurement_clock_sec = 0;
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;incstack = 0
  8750                           ;incstack = 0
  8751  002784  0100               	movlb	0	; () banked
  8752  002786  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  8753  002788  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  8754  00278A  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  8755  00278C  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  8756                           
  8757                           ;main.c: 765: seconds = 0;
  8758  00278E  6B78               	clrf	_seconds& (0+255),b
  8759                           
  8760                           ;main.c: 766: minutes = 0;
  8761  002790  6B77               	clrf	_minutes& (0+255),b
  8762                           
  8763                           ;main.c: 767: hours = 0;
  8764  002792  6B76               	clrf	_hours& (0+255),b
  8765                           
  8766                           ;main.c: 769: channel_pulse_flags = 0;
  8767  002794  6B68               	clrf	_channel_pulse_flags& (0+255),b
  8768  002796  6B69               	clrf	(_channel_pulse_flags+1)& (0+255),b
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;main.c: 772: memset( channel_pulse_timer, 0, sizeof( channel_pulse_timer ) );
  8772  002798  0101               	movlb	1	; () banked
  8773  00279A  0E01               	movlw	high _channel_pulse_timer
  8774  00279C  6E09               	movwf	?_memset+1,c
  8775  00279E  0E00               	movlw	low _channel_pulse_timer
  8776  0027A0  D941               	call	PL80	;call to abstracted procedure
  8777  0027A2  EC77  F021         	call	_memset	;wreg free
  8778                           
  8779                           ;main.c: 773: memset( channel_protection_timer, 0, sizeof( channel_protection_timer ) );
  8780  0027A6  0100               	movlb	0	; () banked
  8781  0027A8  0E00               	movlw	high _channel_protection_timer
  8782  0027AA  6E09               	movwf	?_memset+1,c
  8783  0027AC  0E83               	movlw	low _channel_protection_timer
  8784  0027AE  D93A               	call	PL80	;call to abstracted procedure
  8785  0027B0  EC77  F021         	call	_memset	;wreg free
  8786                           
  8787                           ;main.c: 775: for ( i=0; i<10; i++ ) {
  8788  0027B4  6A35               	clrf	init_app_ram@i,c
  8789  0027B6                     l12805:
  8790                           
  8791                           ;main.c: 778: if ( Read_b_eep(0x43 + 24 + i) &
  8792                           ;main.c: 779: 0x01 ) {
  8793  0027B6  0E5B               	movlw	91
  8794  0027B8  2435               	addwf	init_app_ram@i,w,c
  8795  0027BA  6E08               	movwf	?_Read_b_eep,c
  8796  0027BC  6A09               	clrf	?_Read_b_eep+1,c
  8797  0027BE  0E00               	movlw	0
  8798  0027C0  2209               	addwfc	?_Read_b_eep+1,f,c
  8799  0027C2  EC27  F023         	call	_Read_b_eep	;wreg free
  8800  0027C6  6E10               	movwf	??_init_app_ram& (0+255),c
  8801  0027C8  A010               	btfss	??_init_app_ram,0,c
  8802  0027CA  D02C               	goto	l12811
  8803                           
  8804                           ;main.c: 781: channel_pulse_flags |= (1<<i);
  8805  0027CC  C035  F010         	movff	init_app_ram@i,??_init_app_ram
  8806  0027D0  0E01               	movlw	1
  8807  0027D2  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8808  0027D4  6A12               	clrf	(??_init_app_ram+2)& (0+255),c
  8809  0027D6  2A10               	incf	??_init_app_ram,f,c
  8810  0027D8  D003               	goto	u16574
  8811  0027DA                     u16575:
  8812  0027DA  90D8               	bcf	status,0,c
  8813  0027DC  3611               	rlcf	??_init_app_ram+1,f,c
  8814  0027DE  3612               	rlcf	??_init_app_ram+2,f,c
  8815  0027E0                     u16574:
  8816  0027E0  2E10               	decfsz	??_init_app_ram,f,c
  8817  0027E2  D7FB               	goto	u16575
  8818  0027E4  5011               	movf	??_init_app_ram+1,w,c
  8819  0027E6  0100               	movlb	0	; () banked
  8820  0027E8  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  8821  0027EA  5012               	movf	??_init_app_ram+2,w,c
  8822  0027EC  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;main.c: 782: channel_pulse_timer[ i ] =
  8826                           ;main.c: 783: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8827                           ;main.c: 784: Read_b_eep(0x43 + 46 + 1u + i);
  8828  0027EE  0E71               	movlw	113
  8829  0027F0  2435               	addwf	init_app_ram@i,w,c
  8830  0027F2  6E08               	movwf	?_Read_b_eep,c
  8831  0027F4  6A09               	clrf	?_Read_b_eep+1,c
  8832  0027F6  0E00               	movlw	0
  8833  0027F8  2209               	addwfc	?_Read_b_eep+1,f,c
  8834  0027FA  EC27  F023         	call	_Read_b_eep	;wreg free
  8835  0027FE  D909               	call	PL68	;call to abstracted procedure
  8836  002800  EC27  F023         	call	_Read_b_eep	;wreg free
  8837  002804  2610               	addwf	??_init_app_ram,f,c
  8838  002806  0E00               	movlw	0
  8839  002808  2211               	addwfc	??_init_app_ram+1,f,c
  8840  00280A  5035               	movf	init_app_ram@i,w,c
  8841  00280C  0D02               	mullw	2
  8842  00280E  0101               	movlb	1	; () banked
  8843  002810  0E00               	movlw	low _channel_pulse_timer
  8844  002812  24F3               	addwf	prodl,w,c
  8845  002814  6ED9               	movwf	fsr2l,c
  8846  002816  0E01               	movlw	high _channel_pulse_timer
  8847  002818  20F4               	addwfc	prodh,w,c
  8848  00281A  6EDA               	movwf	fsr2h,c
  8849  00281C  C010  FFDE         	movff	??_init_app_ram,postinc2
  8850  002820  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8851  002824                     l12811:
  8852                           
  8853                           ;main.c: 785: }
  8854                           ;main.c: 788: if ( Read_b_eep(0x43 + 29 + i) & 0x04) {
  8855  002824  0E60               	movlw	96
  8856  002826  2435               	addwf	init_app_ram@i,w,c
  8857  002828  6E08               	movwf	?_Read_b_eep,c
  8858  00282A  6A09               	clrf	?_Read_b_eep+1,c
  8859  00282C  0E00               	movlw	0
  8860  00282E  2209               	addwfc	?_Read_b_eep+1,f,c
  8861  002830  EC27  F023         	call	_Read_b_eep	;wreg free
  8862  002834  6E10               	movwf	??_init_app_ram& (0+255),c
  8863  002836  A410               	btfss	??_init_app_ram,2,c
  8864  002838  D019               	goto	l12815
  8865                           
  8866                           ;main.c: 789: channel_protection_timer[ i ] =
  8867                           ;main.c: 790: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8868                           ;main.c: 791: Read_b_eep(0x43 + 46 + 1u + i);
  8869  00283A  0E71               	movlw	113
  8870  00283C  2435               	addwf	init_app_ram@i,w,c
  8871  00283E  6E08               	movwf	?_Read_b_eep,c
  8872  002840  6A09               	clrf	?_Read_b_eep+1,c
  8873  002842  0E00               	movlw	0
  8874  002844  2209               	addwfc	?_Read_b_eep+1,f,c
  8875  002846  EC27  F023         	call	_Read_b_eep	;wreg free
  8876  00284A  D8E3               	call	PL68	;call to abstracted procedure
  8877  00284C  EC27  F023         	call	_Read_b_eep	;wreg free
  8878  002850  2610               	addwf	??_init_app_ram,f,c
  8879  002852  0E00               	movlw	0
  8880  002854  2211               	addwfc	??_init_app_ram+1,f,c
  8881  002856  5035               	movf	init_app_ram@i,w,c
  8882  002858  0D02               	mullw	2
  8883  00285A  50F3               	movf	prodl,w,c
  8884  00285C  0100               	movlb	0	; () banked
  8885  00285E  0F83               	addlw	low _channel_protection_timer
  8886  002860  6ED9               	movwf	fsr2l,c
  8887  002862  6ADA               	clrf	fsr2h,c
  8888  002864  C010  FFDE         	movff	??_init_app_ram,postinc2
  8889  002868  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8890  00286C                     l12815:
  8891  00286C  2A35               	incf	init_app_ram@i,f,c
  8892  00286E  0E09               	movlw	9
  8893  002870  6435               	cpfsgt	init_app_ram@i,c
  8894  002872  D7A1               	goto	l12805
  8895                           
  8896                           ;main.c: 792: }
  8897                           ;main.c: 794: }
  8898                           ;main.c: 796: dir = Read_b_eep(0x43 + 12);
  8899  002874  6A09               	clrf	?_Read_b_eep+1,c
  8900  002876  0E4F               	movlw	79
  8901  002878  6E08               	movwf	?_Read_b_eep,c
  8902  00287A  EC27  F023         	call	_Read_b_eep	;wreg free
  8903  00287E  6E34               	movwf	init_app_ram@dir,c
  8904                           
  8905                           ;main.c: 797: TRISA = ( dir & 0x03 ) | 0b00000000;
  8906  002880  5034               	movf	init_app_ram@dir,w,c
  8907  002882  0B03               	andlw	3
  8908  002884  6E92               	movwf	3986,c	;volatile
  8909                           
  8910                           ;main.c: 799: dir = Read_b_eep(0x43 + 13);
  8911  002886  6A09               	clrf	?_Read_b_eep+1,c
  8912  002888  0E50               	movlw	80
  8913  00288A  6E08               	movwf	?_Read_b_eep,c
  8914  00288C  EC27  F023         	call	_Read_b_eep	;wreg free
  8915  002890  6E34               	movwf	init_app_ram@dir,c
  8916                           
  8917                           ;main.c: 800: TRISB = ( dir & 0x03 ) | 0b00001000;
  8918  002892  5034               	movf	init_app_ram@dir,w,c
  8919  002894  0B03               	andlw	3
  8920  002896  0908               	iorlw	8
  8921  002898  6E93               	movwf	3987,c	;volatile
  8922                           
  8923                           ;main.c: 803: if ( Read_b_eep(0x43 + 44) & 0x01 ) {
  8924  00289A  6A09               	clrf	?_Read_b_eep+1,c
  8925  00289C  0E6F               	movlw	111
  8926  00289E  6E08               	movwf	?_Read_b_eep,c
  8927  0028A0  EC27  F023         	call	_Read_b_eep	;wreg free
  8928  0028A4  6E10               	movwf	??_init_app_ram& (0+255),c
  8929  0028A6  B010               	btfsc	??_init_app_ram,0,c
  8930                           
  8931                           ;main.c: 804: INTCON2bits.RBPU = 0;
  8932  0028A8  9EF1               	bcf	intcon2,7,c	;volatile
  8933                           
  8934                           ;main.c: 805: }
  8935                           ;main.c: 807: dir = ( Read_b_eep(0x43 + 13) << 1 ) & 0b11111000;
  8936  0028AA  6A09               	clrf	?_Read_b_eep+1,c
  8937  0028AC  0E50               	movlw	80
  8938  0028AE  6E08               	movwf	?_Read_b_eep,c
  8939  0028B0  EC27  F023         	call	_Read_b_eep	;wreg free
  8940  0028B4  6E10               	movwf	??_init_app_ram& (0+255),c
  8941  0028B6  90D8               	bcf	status,0,c
  8942  0028B8  3410               	rlcf	??_init_app_ram,w,c
  8943  0028BA  0BF8               	andlw	248
  8944  0028BC  6E34               	movwf	init_app_ram@dir,c
  8945                           
  8946                           ;main.c: 808: TRISC = dir | 0b00000001;
  8947  0028BE  5034               	movf	init_app_ram@dir,w,c
  8948  0028C0  0901               	iorlw	1
  8949  0028C2  6E94               	movwf	3988,c	;volatile
  8950                           
  8951                           ;main.c: 810: memset( debounce_cnt, 0, sizeof( debounce_cnt ) );
  8952  0028C4  0100               	movlb	0	; () banked
  8953  0028C6  0E00               	movlw	high _debounce_cnt
  8954  0028C8  6E09               	movwf	?_memset+1,c
  8955  0028CA  0EB2               	movlw	low _debounce_cnt
  8956  0028CC  6E08               	movwf	?_memset,c
  8957  0028CE  6A0B               	clrf	?_memset+3,c
  8958  0028D0  6A0A               	clrf	?_memset+2,c
  8959  0028D2  6A0D               	clrf	?_memset+5,c
  8960  0028D4  0E0A               	movlw	10
  8961  0028D6  6E0C               	movwf	?_memset+4,c
  8962  0028D8  EC77  F021         	call	_memset	;wreg free
  8963                           
  8964                           ;main.c: 811: current_debounce = 0;
  8965  0028DC  0100               	movlb	0	; () banked
  8966  0028DE  6B75               	clrf	_current_debounce& (0+255),b
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;main.c: 814: current_iostate = ( PORTAbits.RA0 << 9 ) +
  8970                           ;main.c: 815: ( PORTAbits.RA1 << 8 ) +
  8971                           ;main.c: 816: ( PORTAbits.RA2 << 7 ) +
  8972                           ;main.c: 817: ( PORTCbits.RC7 << 6 ) +
  8973                           ;main.c: 818: ( PORTCbits.RC6 << 5 ) +
  8974                           ;main.c: 819: ( PORTCbits.RC5 << 4 ) +
  8975                           ;main.c: 820: ( PORTCbits.RC4 << 3 ) +
  8976                           ;main.c: 821: ( PORTCbits.RC3 << 2 ) +
  8977                           ;main.c: 822: ( PORTBbits.RB1 << 1 ) +
  8978                           ;main.c: 823: PORTBbits.RB0;
  8979  0028E0  5081               	movf	3969,w,c	;volatile
  8980  0028E2  0B01               	andlw	1
  8981  0028E4  6E10               	movwf	??_init_app_ram& (0+255),c
  8982  0028E6  3081               	rrcf	3969,w,c	;volatile
  8983  0028E8  0B01               	andlw	1
  8984  0028EA  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8985  0028EC  90D8               	bcf	status,0,c
  8986  0028EE  3411               	rlcf	??_init_app_ram+1,w,c
  8987  0028F0  6E12               	movwf	(??_init_app_ram+2)& (0+255),c
  8988  0028F2  6A13               	clrf	(??_init_app_ram+3)& (0+255),c
  8989  0028F4  3613               	rlcf	(??_init_app_ram+3)& (0+255),f,c
  8990  0028F6  3082               	rrcf	3970,w,c	;volatile
  8991  0028F8  32E8               	rrcf	wreg,f,c
  8992  0028FA  32E8               	rrcf	wreg,f,c
  8993  0028FC  0B01               	andlw	1
  8994  0028FE  6E14               	movwf	(??_init_app_ram+4)& (0+255),c
  8995  002900  6A15               	clrf	(??_init_app_ram+5)& (0+255),c
  8996  002902  90D8               	bcf	status,0,c
  8997  002904  3614               	rlcf	??_init_app_ram+4,f,c
  8998  002906  3615               	rlcf	??_init_app_ram+5,f,c
  8999  002908  90D8               	bcf	status,0,c
  9000  00290A  3614               	rlcf	??_init_app_ram+4,f,c
  9001  00290C  3615               	rlcf	??_init_app_ram+5,f,c
  9002  00290E  3882               	swapf	3970,w,c	;volatile
  9003  002910  0B01               	andlw	1
  9004  002912  6E16               	movwf	(??_init_app_ram+6)& (0+255),c
  9005  002914  6A17               	clrf	(??_init_app_ram+7)& (0+255),c
  9006  002916  90D8               	bcf	status,0,c
  9007  002918  3616               	rlcf	??_init_app_ram+6,f,c
  9008  00291A  3617               	rlcf	??_init_app_ram+7,f,c
  9009  00291C  90D8               	bcf	status,0,c
  9010  00291E  3616               	rlcf	??_init_app_ram+6,f,c
  9011  002920  3617               	rlcf	??_init_app_ram+7,f,c
  9012  002922  90D8               	bcf	status,0,c
  9013  002924  3616               	rlcf	??_init_app_ram+6,f,c
  9014  002926  3617               	rlcf	??_init_app_ram+7,f,c
  9015  002928  3882               	swapf	3970,w,c	;volatile
  9016  00292A  32E8               	rrcf	wreg,f,c
  9017  00292C  0B01               	andlw	1
  9018  00292E  6E18               	movwf	(??_init_app_ram+8)& (0+255),c
  9019  002930  6A19               	clrf	(??_init_app_ram+9)& (0+255),c
  9020  002932  3A18               	swapf	??_init_app_ram+8,f,c
  9021  002934  3A19               	swapf	??_init_app_ram+9,f,c
  9022  002936  0EF0               	movlw	240
  9023  002938  1619               	andwf	??_init_app_ram+9,f,c
  9024  00293A  5018               	movf	??_init_app_ram+8,w,c
  9025  00293C  0B0F               	andlw	15
  9026  00293E  1219               	iorwf	??_init_app_ram+9,f,c
  9027  002940  0EF0               	movlw	240
  9028  002942  1618               	andwf	??_init_app_ram+8,f,c
  9029  002944  3882               	swapf	3970,w,c	;volatile
  9030  002946  32E8               	rrcf	wreg,f,c
  9031  002948  32E8               	rrcf	wreg,f,c
  9032  00294A  0B01               	andlw	1
  9033  00294C  6E1A               	movwf	(??_init_app_ram+10)& (0+255),c
  9034  00294E  6A1B               	clrf	(??_init_app_ram+11)& (0+255),c
  9035  002950  0E05               	movlw	5
  9036  002952                     u16615:
  9037  002952  90D8               	bcf	status,0,c
  9038  002954  361A               	rlcf	??_init_app_ram+10,f,c
  9039  002956  361B               	rlcf	??_init_app_ram+11,f,c
  9040  002958  2EE8               	decfsz	wreg,f,c
  9041  00295A  D7FB               	goto	u16615
  9042  00295C  3482               	rlcf	3970,w,c	;volatile
  9043  00295E  36E8               	rlcf	wreg,f,c
  9044  002960  0B01               	andlw	1
  9045  002962  6E1C               	movwf	(??_init_app_ram+12)& (0+255),c
  9046  002964  6A1D               	clrf	(??_init_app_ram+13)& (0+255),c
  9047  002966  0E06               	movlw	6
  9048  002968                     u16625:
  9049  002968  90D8               	bcf	status,0,c
  9050  00296A  361C               	rlcf	??_init_app_ram+12,f,c
  9051  00296C  361D               	rlcf	??_init_app_ram+13,f,c
  9052  00296E  2EE8               	decfsz	wreg,f,c
  9053  002970  D7FB               	goto	u16625
  9054  002972  3080               	rrcf	3968,w,c	;volatile
  9055  002974  32E8               	rrcf	wreg,f,c
  9056  002976  0B01               	andlw	1
  9057  002978  6E1E               	movwf	(??_init_app_ram+14)& (0+255),c
  9058  00297A  6A1F               	clrf	(??_init_app_ram+15)& (0+255),c
  9059  00297C  0E07               	movlw	7
  9060  00297E                     u16635:
  9061  00297E  90D8               	bcf	status,0,c
  9062  002980  361E               	rlcf	??_init_app_ram+14,f,c
  9063  002982  361F               	rlcf	??_init_app_ram+15,f,c
  9064  002984  2EE8               	decfsz	wreg,f,c
  9065  002986  D7FB               	goto	u16635
  9066  002988  3080               	rrcf	3968,w,c	;volatile
  9067  00298A  0B01               	andlw	1
  9068  00298C  6E21               	movwf	(??_init_app_ram+17)& (0+255),c
  9069  00298E  6A20               	clrf	(??_init_app_ram+16)& (0+255),c
  9070  002990  5080               	movf	3968,w,c	;volatile
  9071  002992  0B01               	andlw	1
  9072  002994  6E22               	movwf	(??_init_app_ram+18)& (0+255),c
  9073  002996  6A23               	clrf	(??_init_app_ram+19)& (0+255),c
  9074  002998  0E09               	movlw	9
  9075  00299A                     u16645:
  9076  00299A  90D8               	bcf	status,0,c
  9077  00299C  3622               	rlcf	??_init_app_ram+18,f,c
  9078  00299E  3623               	rlcf	??_init_app_ram+19,f,c
  9079  0029A0  2EE8               	decfsz	wreg,f,c
  9080  0029A2  D7FB               	goto	u16645
  9081  0029A4  5020               	movf	??_init_app_ram+16,w,c
  9082  0029A6  2422               	addwf	??_init_app_ram+18,w,c
  9083  0029A8  6E24               	movwf	(??_init_app_ram+20)& (0+255),c
  9084  0029AA  5021               	movf	??_init_app_ram+17,w,c
  9085  0029AC  2023               	addwfc	??_init_app_ram+19,w,c
  9086  0029AE  6E25               	movwf	(??_init_app_ram+21)& (0+255),c
  9087  0029B0  501E               	movf	??_init_app_ram+14,w,c
  9088  0029B2  2424               	addwf	??_init_app_ram+20,w,c
  9089  0029B4  6E26               	movwf	(??_init_app_ram+22)& (0+255),c
  9090  0029B6  501F               	movf	??_init_app_ram+15,w,c
  9091  0029B8  2025               	addwfc	??_init_app_ram+21,w,c
  9092  0029BA  6E27               	movwf	(??_init_app_ram+23)& (0+255),c
  9093  0029BC  501C               	movf	??_init_app_ram+12,w,c
  9094  0029BE  2426               	addwf	??_init_app_ram+22,w,c
  9095  0029C0  6E28               	movwf	(??_init_app_ram+24)& (0+255),c
  9096  0029C2  501D               	movf	??_init_app_ram+13,w,c
  9097  0029C4  2027               	addwfc	??_init_app_ram+23,w,c
  9098  0029C6  6E29               	movwf	(??_init_app_ram+25)& (0+255),c
  9099  0029C8  501A               	movf	??_init_app_ram+10,w,c
  9100  0029CA  2428               	addwf	??_init_app_ram+24,w,c
  9101  0029CC  6E2A               	movwf	(??_init_app_ram+26)& (0+255),c
  9102  0029CE  501B               	movf	??_init_app_ram+11,w,c
  9103  0029D0  2029               	addwfc	??_init_app_ram+25,w,c
  9104  0029D2  6E2B               	movwf	(??_init_app_ram+27)& (0+255),c
  9105  0029D4  5018               	movf	??_init_app_ram+8,w,c
  9106  0029D6  242A               	addwf	??_init_app_ram+26,w,c
  9107  0029D8  6E2C               	movwf	(??_init_app_ram+28)& (0+255),c
  9108  0029DA  5019               	movf	??_init_app_ram+9,w,c
  9109  0029DC  202B               	addwfc	??_init_app_ram+27,w,c
  9110  0029DE  6E2D               	movwf	(??_init_app_ram+29)& (0+255),c
  9111  0029E0  5016               	movf	??_init_app_ram+6,w,c
  9112  0029E2  242C               	addwf	??_init_app_ram+28,w,c
  9113  0029E4  6E2E               	movwf	(??_init_app_ram+30)& (0+255),c
  9114  0029E6  5017               	movf	??_init_app_ram+7,w,c
  9115  0029E8  202D               	addwfc	??_init_app_ram+29,w,c
  9116  0029EA  6E2F               	movwf	(??_init_app_ram+31)& (0+255),c
  9117  0029EC  5014               	movf	??_init_app_ram+4,w,c
  9118  0029EE  242E               	addwf	??_init_app_ram+30,w,c
  9119  0029F0  6E30               	movwf	(??_init_app_ram+32)& (0+255),c
  9120  0029F2  5015               	movf	??_init_app_ram+5,w,c
  9121  0029F4  202F               	addwfc	??_init_app_ram+31,w,c
  9122  0029F6  6E31               	movwf	(??_init_app_ram+33)& (0+255),c
  9123  0029F8  5012               	movf	??_init_app_ram+2,w,c
  9124  0029FA  2430               	addwf	??_init_app_ram+32,w,c
  9125  0029FC  6E32               	movwf	(??_init_app_ram+34)& (0+255),c
  9126  0029FE  5013               	movf	??_init_app_ram+3,w,c
  9127  002A00  2031               	addwfc	??_init_app_ram+33,w,c
  9128  002A02  6E33               	movwf	(??_init_app_ram+35)& (0+255),c
  9129  002A04  5010               	movf	??_init_app_ram,w,c
  9130  002A06  2432               	addwf	??_init_app_ram+34,w,c
  9131  002A08  6F6A               	movwf	_current_iostate& (0+255),b
  9132  002A0A  0E00               	movlw	0
  9133  002A0C  2033               	addwfc	??_init_app_ram+35,w,c
  9134  002A0E  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  9135                           
  9136                           ; BSR set to: 0
  9137  002A10  0012               	return	
  9138  002A12                     __end_of_init_app_ram:
  9139                           	opt stack 0
  9140  002A12                     PL68:
  9141                           	opt stack 23
  9142  002A12  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  9143  002A14  6A10               	clrf	??_init_app_ram& (0+255),c
  9144  002A16  0E72               	movlw	114
  9145  002A18  2435               	addwf	init_app_ram@i,w,c
  9146  002A1A  6E08               	movwf	?_Read_b_eep,c
  9147  002A1C  6A09               	clrf	?_Read_b_eep+1,c
  9148  002A1E  0E00               	movlw	0
  9149  002A20  2209               	addwfc	?_Read_b_eep+1,f,c
  9150  002A22  0C00               	retlw	0
  9151  002A24                     __end_ofPL68:
  9152                           	opt stack 0
  9153  002A24                     PL80:
  9154                           	opt stack 23
  9155  002A24  6E08               	movwf	?_memset,c
  9156  002A26  6A0B               	clrf	?_memset+3,c
  9157  002A28  6A0A               	clrf	?_memset+2,c
  9158  002A2A  6A0D               	clrf	?_memset+5,c
  9159  002A2C  0E14               	movlw	20
  9160  002A2E  6E0C               	movwf	?_memset+4,c
  9161  002A30  0C14               	retlw	20
  9162  002A32                     __end_ofPL80:
  9163                           	opt stack 0
  9164                           tblptru	equ	0xFF8
  9165                           tblptrh	equ	0xFF7
  9166                           tblptrl	equ	0xFF6
  9167                           tablat	equ	0xFF5
  9168                           prodh	equ	0xFF4
  9169                           prodl	equ	0xFF3
  9170                           intcon	equ	0xFF2
  9171                           intcon2	equ	0xFF1
  9172                           postinc0	equ	0xFEE
  9173                           wreg	equ	0xFE8
  9174                           indf1	equ	0xFE7
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           plusw2	equ	0xFDB
  9181                           fsr2h	equ	0xFDA
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8
  9184                           
  9185 ;; *************** function _memset *****************
  9186 ;; Defined at:
  9187 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  p1              2    7[COMRAM] PTR void 
  9190 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9191 ;;  c               2    9[COMRAM] int 
  9192 ;;  n               2   11[COMRAM] unsigned int 
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;  p               2   13[COMRAM] PTR unsigned char 
  9195 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  2    7[COMRAM] PTR void 
  9198 ;; Registers used:
  9199 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9200 ;; Tracked objects:
  9201 ;;		On entry : E/1
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9205 ;;      Params:         6       0       0       0       0       0       0
  9206 ;;      Locals:         2       0       0       0       0       0       0
  9207 ;;      Temps:          0       0       0       0       0       0       0
  9208 ;;      Totals:         8       0       0       0       0       0       0
  9209 ;;Total ram usage:        8 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    2
  9212 ;; This function calls:
  9213 ;;		Nothing
  9214 ;; This function is called by:
  9215 ;;		_init_app_ram
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text22
  9220  0042EE                     __ptext22:
  9221                           	opt stack 0
  9222  0042EE                     _memset:
  9223                           	opt stack 23
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;incstack = 0
  9227                           ;incstack = 0
  9228  0042EE  C008  F00E         	movff	memset@p1,memset@p
  9229  0042F2  C009  F00F         	movff	memset@p1+1,memset@p+1
  9230  0042F6  D008               	goto	l13693
  9231  0042F8                     l13689:
  9232  0042F8  C00E  FFD9         	movff	memset@p,fsr2l
  9233  0042FC  C00F  FFDA         	movff	memset@p+1,fsr2h
  9234  004300  C00A  FFDF         	movff	memset@c,indf2
  9235  004304  4A0E               	infsnz	memset@p,f,c
  9236  004306  2A0F               	incf	memset@p+1,f,c
  9237  004308                     l13693:
  9238  004308  060C               	decf	memset@n,f,c
  9239  00430A  A0D8               	btfss	status,0,c
  9240  00430C  060D               	decf	memset@n+1,f,c
  9241  00430E  280C               	incf	memset@n& (0+255),w,c
  9242  004310  B4D8               	btfsc	status,2,c
  9243  004312  280D               	incf	(memset@n+1)& (0+255),w,c
  9244  004314  B4D8               	btfsc	status,2,c
  9245  004316  0012               	return	
  9246  004318  D7EF               	goto	l13689
  9247  00431A                     __end_of_memset:
  9248                           	opt stack 0
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           intcon	equ	0xFF2
  9256                           intcon2	equ	0xFF1
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           indf1	equ	0xFE7
  9260                           fsr1h	equ	0xFE2
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           plusw2	equ	0xFDB
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _init_app_eeprom *****************
  9271 ;; Defined at:
  9272 ;;		line 832 in file "../main.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;		None
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;  i               1   14[COMRAM] unsigned char 
  9277 ;;  j               1   13[COMRAM] unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;		None               void
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         0       0       0       0       0       0       0
  9288 ;;      Locals:         2       0       0       0       0       0       0
  9289 ;;      Temps:          2       0       0       0       0       0       0
  9290 ;;      Totals:         4       0       0       0       0       0       0
  9291 ;;Total ram usage:        4 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    3
  9294 ;; This function calls:
  9295 ;;		_Busy_eep
  9296 ;;		_Write_b_eep
  9297 ;; This function is called by:
  9298 ;;		_main
  9299 ;;		_vscp_restoreDefaults
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text23
  9304  00332E                     __ptext23:
  9305                           	opt stack 0
  9306  00332E                     _init_app_eeprom:
  9307                           	opt stack 23
  9308                           
  9309                           ;main.c: 833: unsigned char i, j;
  9310                           ;main.c: 835: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  9311                           
  9312                           ;incstack = 0
  9313                           ;incstack = 0
  9314  00332E  EC5B  F023         	call	_Busy_eep	;wreg free
  9315  003332  6A09               	clrf	?_Write_b_eep+1,c
  9316  003334  0E43               	movlw	67
  9317  003336  6E08               	movwf	?_Write_b_eep,c
  9318  003338  0E00               	movlw	0
  9319  00333A  6A0A               	clrf	?_Write_b_eep+2,c
  9320  00333C  EC2E  F021         	call	_Write_b_eep	;wreg free
  9321                           
  9322                           ;main.c: 836: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  9323  003340  EC5B  F023         	call	_Busy_eep	;wreg free
  9324  003344  6A09               	clrf	?_Write_b_eep+1,c
  9325  003346  0E44               	movlw	68
  9326  003348  6E08               	movwf	?_Write_b_eep,c
  9327  00334A  0E00               	movlw	0
  9328  00334C  6A0A               	clrf	?_Write_b_eep+2,c
  9329  00334E  EC2E  F021         	call	_Write_b_eep	;wreg free
  9330                           
  9331                           ;main.c: 838: for ( i=0; i<10; i++ ) {
  9332  003352  6A0F               	clrf	init_app_eeprom@i,c
  9333  003354                     l12715:
  9334                           
  9335                           ;main.c: 839: (Busy_eep(), Write_b_eep(0x43 + 2 + i,i));
  9336  003354  EC5B  F023         	call	_Busy_eep	;wreg free
  9337  003358  0E45               	movlw	69
  9338  00335A  240F               	addwf	init_app_eeprom@i,w,c
  9339  00335C  6E08               	movwf	?_Write_b_eep,c
  9340  00335E  6A09               	clrf	?_Write_b_eep+1,c
  9341  003360  0E00               	movlw	0
  9342  003362  2209               	addwfc	?_Write_b_eep+1,f,c
  9343  003364  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  9344  003368  EC2E  F021         	call	_Write_b_eep	;wreg free
  9345  00336C  2A0F               	incf	init_app_eeprom@i,f,c
  9346  00336E  0E09               	movlw	9
  9347  003370  640F               	cpfsgt	init_app_eeprom@i,c
  9348  003372  D7F0               	goto	l12715
  9349                           
  9350                           ;main.c: 840: }
  9351                           ;main.c: 842: (Busy_eep(), Write_b_eep(0x43 + 12,0x00));
  9352  003374  EC5B  F023         	call	_Busy_eep	;wreg free
  9353  003378  6A09               	clrf	?_Write_b_eep+1,c
  9354  00337A  0E4F               	movlw	79
  9355  00337C  6E08               	movwf	?_Write_b_eep,c
  9356  00337E  0E00               	movlw	0
  9357  003380  6A0A               	clrf	?_Write_b_eep+2,c
  9358  003382  EC2E  F021         	call	_Write_b_eep	;wreg free
  9359                           
  9360                           ;main.c: 843: (Busy_eep(), Write_b_eep(0x43 + 13,0x00));
  9361  003386  EC5B  F023         	call	_Busy_eep	;wreg free
  9362  00338A  6A09               	clrf	?_Write_b_eep+1,c
  9363  00338C  0E50               	movlw	80
  9364  00338E  6E08               	movwf	?_Write_b_eep,c
  9365  003390  0E00               	movlw	0
  9366  003392  6A0A               	clrf	?_Write_b_eep+2,c
  9367  003394  EC2E  F021         	call	_Write_b_eep	;wreg free
  9368                           
  9369                           ;main.c: 845: for ( i=0; i<10; i++ ) {
  9370  003398  6A0F               	clrf	init_app_eeprom@i,c
  9371  00339A                     l12733:
  9372                           
  9373                           ;main.c: 846: (Busy_eep(), Write_b_eep(0x43 + 24 + i,0x08 | 0x10 | 0x80));
  9374  00339A  EC5B  F023         	call	_Busy_eep	;wreg free
  9375  00339E  0E5B               	movlw	91
  9376  0033A0  240F               	addwf	init_app_eeprom@i,w,c
  9377  0033A2  6E08               	movwf	?_Write_b_eep,c
  9378  0033A4  6A09               	clrf	?_Write_b_eep+1,c
  9379  0033A6  0E00               	movlw	0
  9380  0033A8  2209               	addwfc	?_Write_b_eep+1,f,c
  9381  0033AA  0E98               	movlw	152
  9382  0033AC  6E0A               	movwf	?_Write_b_eep+2,c
  9383  0033AE  EC2E  F021         	call	_Write_b_eep	;wreg free
  9384  0033B2  2A0F               	incf	init_app_eeprom@i,f,c
  9385  0033B4  0E09               	movlw	9
  9386  0033B6  640F               	cpfsgt	init_app_eeprom@i,c
  9387  0033B8  D7F0               	goto	l12733
  9388                           
  9389                           ;main.c: 850: }
  9390                           ;main.c: 852: for ( i=0; i<10; i++ ) {
  9391  0033BA  6A0F               	clrf	init_app_eeprom@i,c
  9392  0033BC                     l12743:
  9393                           
  9394                           ;main.c: 853: (Busy_eep(), Write_b_eep(0x43 + 34 + i,0x01 | 0x02 | 0x80));
  9395  0033BC  EC5B  F023         	call	_Busy_eep	;wreg free
  9396  0033C0  0E65               	movlw	101
  9397  0033C2  240F               	addwf	init_app_eeprom@i,w,c
  9398  0033C4  6E08               	movwf	?_Write_b_eep,c
  9399  0033C6  6A09               	clrf	?_Write_b_eep+1,c
  9400  0033C8  0E00               	movlw	0
  9401  0033CA  2209               	addwfc	?_Write_b_eep+1,f,c
  9402  0033CC  0E83               	movlw	131
  9403  0033CE  6E0A               	movwf	?_Write_b_eep+2,c
  9404  0033D0  EC2E  F021         	call	_Write_b_eep	;wreg free
  9405  0033D4  2A0F               	incf	init_app_eeprom@i,f,c
  9406  0033D6  0E09               	movlw	9
  9407  0033D8  640F               	cpfsgt	init_app_eeprom@i,c
  9408  0033DA  D7F0               	goto	l12743
  9409                           
  9410                           ;main.c: 857: }
  9411                           ;main.c: 859: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  9412  0033DC  EC5B  F023         	call	_Busy_eep	;wreg free
  9413  0033E0  6A09               	clrf	?_Write_b_eep+1,c
  9414  0033E2  0E6F               	movlw	111
  9415  0033E4  6E08               	movwf	?_Write_b_eep,c
  9416  0033E6  0E00               	movlw	0
  9417  0033E8  6A0A               	clrf	?_Write_b_eep+2,c
  9418  0033EA  EC2E  F021         	call	_Write_b_eep	;wreg free
  9419                           
  9420                           ;main.c: 861: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  9421  0033EE  EC5B  F023         	call	_Busy_eep	;wreg free
  9422  0033F2  6A09               	clrf	?_Write_b_eep+1,c
  9423  0033F4  0E70               	movlw	112
  9424  0033F6  6E08               	movwf	?_Write_b_eep,c
  9425  0033F8  0E00               	movlw	0
  9426  0033FA  6A0A               	clrf	?_Write_b_eep+2,c
  9427  0033FC  EC2E  F021         	call	_Write_b_eep	;wreg free
  9428                           
  9429                           ;main.c: 863: for ( i=0; i<20; i++ ) {
  9430  003400  6A0F               	clrf	init_app_eeprom@i,c
  9431  003402                     l12761:
  9432                           
  9433                           ;main.c: 864: (Busy_eep(), Write_b_eep(0x43 + 46 + 0u + i,0));
  9434  003402  EC5B  F023         	call	_Busy_eep	;wreg free
  9435  003406  0E71               	movlw	113
  9436  003408  D837               	call	PL76	;call to abstracted procedure
  9437  00340A  EC2E  F021         	call	_Write_b_eep	;wreg free
  9438  00340E  2A0F               	incf	init_app_eeprom@i,f,c
  9439  003410  0E13               	movlw	19
  9440  003412  640F               	cpfsgt	init_app_eeprom@i,c
  9441  003414  D7F6               	goto	l12761
  9442                           
  9443                           ;main.c: 867: }
  9444                           ;main.c: 869: for ( i=0; i<20; i++ ) {
  9445  003416  6A0F               	clrf	init_app_eeprom@i,c
  9446  003418                     l12771:
  9447                           
  9448                           ;main.c: 870: (Busy_eep(), Write_b_eep(0x43 + 46 + 20u + i,0));
  9449  003418  EC5B  F023         	call	_Busy_eep	;wreg free
  9450  00341C  0E85               	movlw	133
  9451  00341E  D82C               	call	PL76	;call to abstracted procedure
  9452  003420  EC2E  F021         	call	_Write_b_eep	;wreg free
  9453  003424  2A0F               	incf	init_app_eeprom@i,f,c
  9454  003426  0E13               	movlw	19
  9455  003428  640F               	cpfsgt	init_app_eeprom@i,c
  9456  00342A  D7F6               	goto	l12771
  9457                           
  9458                           ;main.c: 873: }
  9459                           ;main.c: 877: for ( i = 0; i < 8; i++ ) {
  9460  00342C  6A0F               	clrf	init_app_eeprom@i,c
  9461  00342E                     l536:
  9462                           
  9463                           ;main.c: 878: for ( j = 0; j < 8; j++ ) {
  9464  00342E  6A0E               	clrf	init_app_eeprom@j,c
  9465  003430                     l12785:
  9466                           
  9467                           ;main.c: 879: (Busy_eep(), Write_b_eep(0x43 + 46 + 40u + 0 + i * 8 + j,0));
  9468  003430  EC5B  F023         	call	_Busy_eep	;wreg free
  9469  003434  500E               	movf	init_app_eeprom@j,w,c
  9470  003436  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  9471  00343A  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  9472  00343C  90D8               	bcf	status,0,c
  9473  00343E  360C               	rlcf	??_init_app_eeprom,f,c
  9474  003440  360D               	rlcf	??_init_app_eeprom+1,f,c
  9475  003442  90D8               	bcf	status,0,c
  9476  003444  360C               	rlcf	??_init_app_eeprom,f,c
  9477  003446  360D               	rlcf	??_init_app_eeprom+1,f,c
  9478  003448  90D8               	bcf	status,0,c
  9479  00344A  360C               	rlcf	??_init_app_eeprom,f,c
  9480  00344C  360D               	rlcf	??_init_app_eeprom+1,f,c
  9481  00344E  260C               	addwf	??_init_app_eeprom,f,c
  9482  003450  0E00               	movlw	0
  9483  003452  220D               	addwfc	??_init_app_eeprom+1,f,c
  9484  003454  0E99               	movlw	153
  9485  003456  240C               	addwf	??_init_app_eeprom,w,c
  9486  003458  6E08               	movwf	?_Write_b_eep,c
  9487  00345A  0E00               	movlw	0
  9488  00345C  200D               	addwfc	??_init_app_eeprom+1,w,c
  9489  00345E  6E09               	movwf	?_Write_b_eep+1,c
  9490  003460  0E00               	movlw	0
  9491  003462  6A0A               	clrf	?_Write_b_eep+2,c
  9492  003464  EC2E  F021         	call	_Write_b_eep	;wreg free
  9493  003468  2A0E               	incf	init_app_eeprom@j,f,c
  9494  00346A  0E07               	movlw	7
  9495  00346C  640E               	cpfsgt	init_app_eeprom@j,c
  9496  00346E  D7E0               	goto	l12785
  9497  003470  2A0F               	incf	init_app_eeprom@i,f,c
  9498  003472  640F               	cpfsgt	init_app_eeprom@i,c
  9499  003474  D7DC               	goto	l536
  9500  003476  0C07               	retlw	7
  9501  003478                     __end_of_init_app_eeprom:
  9502                           	opt stack 0
  9503  003478                     PL76:
  9504                           	opt stack 23
  9505  003478  240F               	addwf	init_app_eeprom@i,w,c
  9506  00347A  6E08               	movwf	?_Write_b_eep,c
  9507  00347C  6A09               	clrf	?_Write_b_eep+1,c
  9508  00347E  0E00               	movlw	0
  9509  003480  2209               	addwfc	?_Write_b_eep+1,f,c
  9510  003482  6A0A               	clrf	?_Write_b_eep+2,c
  9511  003484  0C00               	retlw	0
  9512  003486                     __end_ofPL76:
  9513                           	opt stack 0
  9514                           tblptru	equ	0xFF8
  9515                           tblptrh	equ	0xFF7
  9516                           tblptrl	equ	0xFF6
  9517                           tablat	equ	0xFF5
  9518                           prodh	equ	0xFF4
  9519                           prodl	equ	0xFF3
  9520                           intcon	equ	0xFF2
  9521                           intcon2	equ	0xFF1
  9522                           postinc0	equ	0xFEE
  9523                           wreg	equ	0xFE8
  9524                           indf1	equ	0xFE7
  9525                           fsr1h	equ	0xFE2
  9526                           fsr1l	equ	0xFE1
  9527                           indf2	equ	0xFDF
  9528                           postinc2	equ	0xFDE
  9529                           postdec2	equ	0xFDD
  9530                           plusw2	equ	0xFDB
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _vscp_setUserID *****************
  9536 ;; Defined at:
  9537 ;;		line 3327 in file "../main.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;  idx             1    wreg     unsigned char 
  9540 ;;  data            1   11[COMRAM] unsigned char 
  9541 ;; Auto vars:     Size  Location     Type
  9542 ;;  idx             1   12[COMRAM] unsigned char 
  9543 ;; Return value:  Size  Location     Type
  9544 ;;		None               void
  9545 ;; Registers used:
  9546 ;;		wreg, status,2, status,0, cstack
  9547 ;; Tracked objects:
  9548 ;;		On entry : F/0
  9549 ;;		On exit  : 0/0
  9550 ;;		Unchanged: 0/0
  9551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9552 ;;      Params:         1       0       0       0       0       0       0
  9553 ;;      Locals:         1       0       0       0       0       0       0
  9554 ;;      Temps:          0       0       0       0       0       0       0
  9555 ;;      Totals:         2       0       0       0       0       0       0
  9556 ;;Total ram usage:        2 bytes
  9557 ;; Hardware stack levels used:    1
  9558 ;; Hardware stack levels required when called:    3
  9559 ;; This function calls:
  9560 ;;		_Busy_eep
  9561 ;;		_Write_b_eep
  9562 ;; This function is called by:
  9563 ;;		_vscp_writeStdReg
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text24
  9568  00453C                     __ptext24:
  9569                           	opt stack 0
  9570  00453C                     _vscp_setUserID:
  9571                           	opt stack 24
  9572                           
  9573                           ;incstack = 0
  9574                           ;incstack = 0
  9575                           ;vscp_setUserID@idx stored from wreg
  9576  00453C  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;main.c: 3328: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  9580  004540  EC5B  F023         	call	_Busy_eep	;wreg free
  9581  004544  0E06               	movlw	6
  9582  004546  240D               	addwf	vscp_setUserID@idx,w,c
  9583  004548  6E08               	movwf	?_Write_b_eep,c
  9584  00454A  6A09               	clrf	?_Write_b_eep+1,c
  9585  00454C  0E00               	movlw	0
  9586  00454E  2209               	addwfc	?_Write_b_eep+1,f,c
  9587  004550  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9588  004554  EF2E  F021         	goto	_Write_b_eep	;wreg free
  9589  004558                     __end_of_vscp_setUserID:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon2	equ	0xFF1
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf1	equ	0xFE7
  9602                           fsr1h	equ	0xFE2
  9603                           fsr1l	equ	0xFE1
  9604                           indf2	equ	0xFDF
  9605                           postinc2	equ	0xFDE
  9606                           postdec2	equ	0xFDD
  9607                           plusw2	equ	0xFDB
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function _vscp_setManufacturerId *****************
  9613 ;; Defined at:
  9614 ;;		line 1344 in file "../main.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;  idx             1    wreg     unsigned char 
  9617 ;;  data            1   11[COMRAM] unsigned char 
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;  idx             1   12[COMRAM] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;		None               void
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : F/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9629 ;;      Params:         1       0       0       0       0       0       0
  9630 ;;      Locals:         1       0       0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0
  9632 ;;      Totals:         2       0       0       0       0       0       0
  9633 ;;Total ram usage:        2 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    3
  9636 ;; This function calls:
  9637 ;;		_Busy_eep
  9638 ;;		_Write_b_eep
  9639 ;; This function is called by:
  9640 ;;		_vscp_writeStdReg
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text25
  9645  0043E8                     __ptext25:
  9646                           	opt stack 0
  9647  0043E8                     _vscp_setManufacturerId:
  9648                           	opt stack 24
  9649                           
  9650                           ;incstack = 0
  9651                           ;incstack = 0
  9652                           ;vscp_setManufacturerId@idx stored from wreg
  9653  0043E8  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;main.c: 1345: if ( idx>7 ) return;
  9657  0043EC  0E07               	movlw	7
  9658  0043EE  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  9659  0043F0  D001               	goto	l13781
  9660  0043F2  D00C               	goto	l645
  9661  0043F4                     l13781:
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;main.c: 1346: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  9665  0043F4  EC5B  F023         	call	_Busy_eep	;wreg free
  9666  0043F8  0E0B               	movlw	11
  9667  0043FA  240D               	addwf	vscp_setManufacturerId@idx,w,c
  9668  0043FC  6E08               	movwf	?_Write_b_eep,c
  9669  0043FE  6A09               	clrf	?_Write_b_eep+1,c
  9670  004400  0E00               	movlw	0
  9671  004402  2209               	addwfc	?_Write_b_eep+1,f,c
  9672  004404  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9673  004408  EC2E  F021         	call	_Write_b_eep	;wreg free
  9674  00440C                     l645:
  9675  00440C  0012               	return	
  9676  00440E                     __end_of_vscp_setManufacturerId:
  9677                           	opt stack 0
  9678                           tblptru	equ	0xFF8
  9679                           tblptrh	equ	0xFF7
  9680                           tblptrl	equ	0xFF6
  9681                           tablat	equ	0xFF5
  9682                           prodh	equ	0xFF4
  9683                           prodl	equ	0xFF3
  9684                           intcon	equ	0xFF2
  9685                           intcon2	equ	0xFF1
  9686                           postinc0	equ	0xFEE
  9687                           wreg	equ	0xFE8
  9688                           indf1	equ	0xFE7
  9689                           fsr1h	equ	0xFE2
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           plusw2	equ	0xFDB
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _vscp_setGUID *****************
  9700 ;; Defined at:
  9701 ;;		line 1332 in file "../main.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;  idx             1    wreg     unsigned char 
  9704 ;;  data            1   11[COMRAM] unsigned char 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  idx             1   12[COMRAM] unsigned char 
  9707 ;; Return value:  Size  Location     Type
  9708 ;;		None               void
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, status,0, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : F/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9716 ;;      Params:         1       0       0       0       0       0       0
  9717 ;;      Locals:         1       0       0       0       0       0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0
  9719 ;;      Totals:         2       0       0       0       0       0       0
  9720 ;;Total ram usage:        2 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    3
  9723 ;; This function calls:
  9724 ;;		_Busy_eep
  9725 ;;		_Write_b_eep
  9726 ;; This function is called by:
  9727 ;;		_vscp_writeStdReg
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           	psect	text26
  9732  00440E                     __ptext26:
  9733                           	opt stack 0
  9734  00440E                     _vscp_setGUID:
  9735                           	opt stack 24
  9736                           
  9737                           ;incstack = 0
  9738                           ;incstack = 0
  9739                           ;vscp_setGUID@idx stored from wreg
  9740  00440E  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;main.c: 1333: if ( idx>15 ) return;
  9744  004412  0E0F               	movlw	15
  9745  004414  640D               	cpfsgt	vscp_setGUID@idx,c
  9746  004416  D001               	goto	l13773
  9747  004418  D00C               	goto	l641
  9748  00441A                     l13773:
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;main.c: 1334: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  9752  00441A  EC5B  F023         	call	_Busy_eep	;wreg free
  9753  00441E  0E13               	movlw	19
  9754  004420  240D               	addwf	vscp_setGUID@idx,w,c
  9755  004422  6E08               	movwf	?_Write_b_eep,c
  9756  004424  6A09               	clrf	?_Write_b_eep+1,c
  9757  004426  0E00               	movlw	0
  9758  004428  2209               	addwfc	?_Write_b_eep+1,f,c
  9759  00442A  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9760  00442E  EC2E  F021         	call	_Write_b_eep	;wreg free
  9761  004432                     l641:
  9762  004432  0012               	return	
  9763  004434                     __end_of_vscp_setGUID:
  9764                           	opt stack 0
  9765                           tblptru	equ	0xFF8
  9766                           tblptrh	equ	0xFF7
  9767                           tblptrl	equ	0xFF6
  9768                           tablat	equ	0xFF5
  9769                           prodh	equ	0xFF4
  9770                           prodl	equ	0xFF3
  9771                           intcon	equ	0xFF2
  9772                           intcon2	equ	0xFF1
  9773                           postinc0	equ	0xFEE
  9774                           wreg	equ	0xFE8
  9775                           indf1	equ	0xFE7
  9776                           fsr1h	equ	0xFE2
  9777                           fsr1l	equ	0xFE1
  9778                           indf2	equ	0xFDF
  9779                           postinc2	equ	0xFDE
  9780                           postdec2	equ	0xFDD
  9781                           plusw2	equ	0xFDB
  9782                           fsr2h	equ	0xFDA
  9783                           fsr2l	equ	0xFD9
  9784                           status	equ	0xFD8
  9785                           
  9786 ;; *************** function _vscp_writeAppReg *****************
  9787 ;; Defined at:
  9788 ;;		line 1547 in file "../main.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;  reg             1    wreg     unsigned char 
  9791 ;;  val             1   78[COMRAM] unsigned char 
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;  reg             1   33[BANK0 ] unsigned char 
  9794 ;;  val             1   29[BANK0 ] unsigned char 
  9795 ;;  bOn             1   32[BANK0 ] enum E15660
  9796 ;;  rv              1   31[BANK0 ] unsigned char 
  9797 ;;  bInfoEvent      1   30[BANK0 ] enum E15660
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      unsigned char 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : F/0
  9804 ;;		On exit  : F/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9807 ;;      Params:         1       0       0       0       0       0       0
  9808 ;;      Locals:         0       5       0       0       0       0       0
  9809 ;;      Temps:          0       7       0       0       0       0       0
  9810 ;;      Totals:         1      12       0       0       0       0       0
  9811 ;;Total ram usage:       13 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    7
  9814 ;; This function calls:
  9815 ;;		_Busy_eep
  9816 ;;		_Write_b_eep
  9817 ;;		_Read_b_eep
  9818 ;;		_SendInformationEvent
  9819 ;;		_calculateSetFilterMask
  9820 ;; This function is called by:
  9821 ;;		_vscp_writeRegister
  9822 ;;		_vscp_handleProtocolEvent
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text27
  9827  000622                     __ptext27:
  9828                           	opt stack 0
  9829  000622                     _vscp_writeAppReg:
  9830                           	opt stack 20
  9831                           
  9832                           ;incstack = 0
  9833                           ;incstack = 0
  9834                           ;vscp_writeAppReg@reg stored from wreg
  9835  000622  CFE8 F0DD          	movff	wreg,vscp_writeAppReg@reg
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;main.c: 1548: uint8_t rv;
  9839                           ;main.c: 1549: BOOL bInfoEvent = 0;
  9840  000626  6BDA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  9841                           
  9842                           ;main.c: 1550: BOOL bOn = 0;
  9843  000628  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;main.c: 1552: rv = ~val;
  9847  00062A  1C4F               	comf	vscp_writeAppReg@val,w,c
  9848  00062C  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9849                           
  9850                           ;main.c: 1555: if ( 0 == vscp_page_select ) {
  9851  00062E  5053               	movf	_vscp_page_select+1,w,c
  9852  000630  1052               	iorwf	_vscp_page_select,w,c
  9853  000632  E002 EF0F  F008    	bnz	l14413
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;main.c: 1558: if ( reg == 0 ) {
  9857  000638  67DD               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  9858  00063A  D010               	goto	l13891
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;main.c: 1559: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  9862  00063C  EC5B  F023         	call	_Busy_eep	;wreg free
  9863  000640  6A09               	clrf	?_Write_b_eep+1,c
  9864  000642  0E43               	movlw	67
  9865  000644  6E08               	movwf	?_Write_b_eep,c
  9866  000646  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9867  00064A  EC2E  F021         	call	_Write_b_eep	;wreg free
  9868                           
  9869                           ;main.c: 1560: rv = Read_b_eep(0x43 + 0);
  9870  00064E  6A09               	clrf	?_Read_b_eep+1,c
  9871  000650  0E43               	movlw	67
  9872  000652  6E08               	movwf	?_Read_b_eep,c
  9873  000654  EC27  F023         	call	_Read_b_eep	;wreg free
  9874  000658  EF19  F009         	goto	L32
  9875  00065C                     l13891:
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;main.c: 1562: else if ( reg == 1 ) {
  9879  00065C  05DD               	decf	vscp_writeAppReg@reg& (0+255),w,b
  9880  00065E  E110               	bnz	l13899
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;main.c: 1564: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  9884  000660  EC5B  F023         	call	_Busy_eep	;wreg free
  9885  000664  6A09               	clrf	?_Write_b_eep+1,c
  9886  000666  0E44               	movlw	68
  9887  000668  6E08               	movwf	?_Write_b_eep,c
  9888  00066A  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9889  00066E  EC2E  F021         	call	_Write_b_eep	;wreg free
  9890                           
  9891                           ;main.c: 1565: rv = Read_b_eep(0x43 + 1);
  9892  000672  6A09               	clrf	?_Read_b_eep+1,c
  9893  000674  0E44               	movlw	68
  9894  000676  6E08               	movwf	?_Read_b_eep,c
  9895  000678  EC27  F023         	call	_Read_b_eep	;wreg free
  9896  00067C  EF19  F009         	goto	L32
  9897  000680                     l13899:
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;main.c: 1568: else if ( ( reg >= 2 ) &&
  9901                           ;main.c: 1569: ( reg <= 11 ) ) {
  9902  000680  0E01               	movlw	1
  9903  000682  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9904  000684  D011               	goto	l13909
  9905                           
  9906                           ; BSR set to: 0
  9907  000686  0E0C               	movlw	12
  9908  000688  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9909  00068A  D00E               	goto	l13909
  9910  00068C                     
  9911                           ; BSR set to: 0
  9912                           ;main.c: 1570: (Busy_eep(), Write_b_eep(0x43 + 2 + ( reg - 2 ),val));
  9913  00068C  EC5B  F023         	call	_Busy_eep	;wreg free
  9914  000690  0E43               	movlw	67
  9915  000692  EC41  F009         	call	PL2	;call to abstracted procedure
  9916  000696  EC2E  F021         	call	_Write_b_eep	;wreg free
  9917                           
  9918                           ;main.c: 1573: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
  9919  00069A  0E43               	movlw	67
  9920  00069C  EC59  F009         	call	PL12	;call to abstracted procedure
  9921  0006A0  EC27  F023         	call	_Read_b_eep	;wreg free
  9922  0006A4  EF19  F009         	goto	L32
  9923  0006A8                     l13909:
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;main.c: 1577: else if ( reg == 12 ) {
  9927  0006A8  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9928  0006AA  0A0C               	xorlw	12
  9929  0006AC  E126               	bnz	l13917
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;main.c: 1579: (Busy_eep(), Write_b_eep(0x43 + 12,( val & 0x03 )));
  9933  0006AE  EC5B  F023         	call	_Busy_eep	;wreg free
  9934  0006B2  6A09               	clrf	?_Write_b_eep+1,c
  9935  0006B4  0E4F               	movlw	79
  9936  0006B6  6E08               	movwf	?_Write_b_eep,c
  9937  0006B8  504F               	movf	vscp_writeAppReg@val,w,c
  9938  0006BA  0B03               	andlw	3
  9939  0006BC  6E0A               	movwf	?_Write_b_eep+2,c
  9940  0006BE  EC2E  F021         	call	_Write_b_eep	;wreg free
  9941  0006C2  0E01               	movlw	1
  9942                           
  9943                           ;main.c: 1583: TRISAbits.TRISA0 = ( val & 0x02 ) ? 1 : 0;
  9944  0006C4  A24F               	btfss	vscp_writeAppReg@val,1,c
  9945  0006C6  0E00               	movlw	0
  9946  0006C8  0100               	movlb	0	; () banked
  9947  0006CA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9948  0006CC  5092               	movf	3986,w,c	;volatile
  9949  0006CE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9950  0006D0  0BFE               	andlw	-2
  9951  0006D2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9952  0006D4  6E92               	movwf	3986,c	;volatile
  9953  0006D6  0E01               	movlw	1
  9954                           
  9955                           ;main.c: 1584: TRISAbits.TRISA1 = ( val & 0x01 ) ? 1 : 0;
  9956  0006D8  A04F               	btfss	vscp_writeAppReg@val,0,c
  9957  0006DA  0E00               	movlw	0
  9958  0006DC  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9959  0006DE  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9960  0006E0  5092               	movf	3986,w,c	;volatile
  9961  0006E2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9962  0006E4  0BFD               	andlw	-3
  9963  0006E6  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9964  0006E8  6E92               	movwf	3986,c	;volatile
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;main.c: 1586: rv = ( TRISAbits.TRISA0 << 1 ) +
  9968                           ;main.c: 1587: TRISAbits.TRISA1;
  9969  0006EA  3092               	rrcf	3986,w,c	;volatile
  9970  0006EC  0B01               	andlw	1
  9971  0006EE  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
  9972  0006F0  5092               	movf	3986,w,c	;volatile
  9973  0006F2  0B01               	andlw	1
  9974  0006F4  0D02               	mullw	2
  9975  0006F6  50F3               	movf	prodl,w,c
  9976  0006F8  D096               	goto	L36
  9977  0006FA                     l13917:
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;main.c: 1589: else if ( reg == 13 ) {
  9981  0006FA  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9982  0006FC  0A0D               	xorlw	13
  9983  0006FE  E001 D095          	bnz	l13941
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;main.c: 1591: (Busy_eep(), Write_b_eep(0x43 + 13,val));
  9987  000702  EC5B  F023         	call	_Busy_eep	;wreg free
  9988  000706  6A09               	clrf	?_Write_b_eep+1,c
  9989  000708  0E50               	movlw	80
  9990  00070A  6E08               	movwf	?_Write_b_eep,c
  9991  00070C  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9992  000710  EC2E  F021         	call	_Write_b_eep	;wreg free
  9993  000714  0E01               	movlw	1
  9994                           
  9995                           ;main.c: 1595: TRISAbits.TRISA2 = ( val & 0x80 ) ? 1 : 0;
  9996  000716  AE4F               	btfss	vscp_writeAppReg@val,7,c
  9997  000718  0E00               	movlw	0
  9998  00071A  0100               	movlb	0	; () banked
  9999  00071C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10000  00071E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10001  000720  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10002  000722  5092               	movf	3986,w,c	;volatile
 10003  000724  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10004  000726  0BFB               	andlw	-5
 10005  000728  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10006  00072A  6E92               	movwf	3986,c	;volatile
 10007  00072C  0E01               	movlw	1
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;main.c: 1596: TRISCbits.TRISC7 = ( val & 0x40 ) ? 1 : 0;
 10011  00072E  AC4F               	btfss	vscp_writeAppReg@val,6,c
 10012  000730  0E00               	movlw	0
 10013  000732  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10014  000734  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10015  000736  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10016  000738  5094               	movf	3988,w,c	;volatile
 10017  00073A  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10018  00073C  0B7F               	andlw	-129
 10019  00073E  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10020  000740  6E94               	movwf	3988,c	;volatile
 10021  000742  0E01               	movlw	1
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;main.c: 1597: TRISCbits.TRISC6 = ( val & 0x20 ) ? 1 : 0;
 10025  000744  AA4F               	btfss	vscp_writeAppReg@val,5,c
 10026  000746  0E00               	movlw	0
 10027  000748  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10028  00074A  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10029  00074C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10030  00074E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10031  000750  5094               	movf	3988,w,c	;volatile
 10032  000752  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10033  000754  0BBF               	andlw	-65
 10034  000756  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10035  000758  6E94               	movwf	3988,c	;volatile
 10036  00075A  0E01               	movlw	1
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;main.c: 1598: TRISCbits.TRISC5 = ( val & 0x10 ) ? 1 : 0;
 10040  00075C  A84F               	btfss	vscp_writeAppReg@val,4,c
 10041  00075E  0E00               	movlw	0
 10042  000760  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10043  000762  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10044  000764  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10045  000766  5094               	movf	3988,w,c	;volatile
 10046  000768  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10047  00076A  0BDF               	andlw	-33
 10048  00076C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10049  00076E  6E94               	movwf	3988,c	;volatile
 10050  000770  0E01               	movlw	1
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;main.c: 1599: TRISCbits.TRISC4 = ( val & 0x08 ) ? 1 : 0;
 10054  000772  A64F               	btfss	vscp_writeAppReg@val,3,c
 10055  000774  0E00               	movlw	0
 10056  000776  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10057  000778  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10058  00077A  5094               	movf	3988,w,c	;volatile
 10059  00077C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10060  00077E  0BEF               	andlw	-17
 10061  000780  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10062  000782  6E94               	movwf	3988,c	;volatile
 10063  000784  0E01               	movlw	1
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;main.c: 1600: TRISCbits.TRISC3 = ( val & 0x04 ) ? 1 : 0;
 10067  000786  A44F               	btfss	vscp_writeAppReg@val,2,c
 10068  000788  0E00               	movlw	0
 10069  00078A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10070  00078C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10071  00078E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10072  000790  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10073  000792  5094               	movf	3988,w,c	;volatile
 10074  000794  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10075  000796  0BF7               	andlw	-9
 10076  000798  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10077  00079A  6E94               	movwf	3988,c	;volatile
 10078  00079C  0E01               	movlw	1
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;main.c: 1601: TRISBbits.TRISB1 = ( val & 0x02 ) ? 1 : 0;
 10082  00079E  A24F               	btfss	vscp_writeAppReg@val,1,c
 10083  0007A0  0E00               	movlw	0
 10084  0007A2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10085  0007A4  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10086  0007A6  5093               	movf	3987,w,c	;volatile
 10087  0007A8  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10088  0007AA  0BFD               	andlw	-3
 10089  0007AC  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10090  0007AE  6E93               	movwf	3987,c	;volatile
 10091  0007B0  0E01               	movlw	1
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;main.c: 1602: TRISBbits.TRISB0 = ( val & 0x01 ) ? 1 : 0;
 10095  0007B2  A04F               	btfss	vscp_writeAppReg@val,0,c
 10096  0007B4  0E00               	movlw	0
 10097  0007B6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10098  0007B8  5093               	movf	3987,w,c	;volatile
 10099  0007BA  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10100  0007BC  0BFE               	andlw	-2
 10101  0007BE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10102  0007C0  6E93               	movwf	3987,c	;volatile
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;main.c: 1604: rv = ( TRISAbits.TRISA2 << 7 ) +
 10106                           ;main.c: 1605: ( TRISCbits.TRISC7 << 6 ) +
 10107                           ;main.c: 1606: ( TRISCbits.TRISC6 << 5 ) +
 10108                           ;main.c: 1607: ( TRISCbits.TRISC5 << 4 ) +
 10109                           ;main.c: 1608: ( TRISCbits.TRISC4 << 3 ) +
 10110                           ;main.c: 1609: ( TRISCbits.TRISC3 << 2 ) +
 10111                           ;main.c: 1610: ( TRISBbits.TRISB1 << 1 ) +
 10112                           ;main.c: 1611: TRISBbits.TRISB0;
 10113  0007C2  5093               	movf	3987,w,c	;volatile
 10114  0007C4  0B01               	andlw	1
 10115  0007C6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10116  0007C8  3093               	rrcf	3987,w,c	;volatile
 10117  0007CA  0B01               	andlw	1
 10118  0007CC  0D02               	mullw	2
 10119  0007CE  CFF3 F0D3          	movff	prodl,??_vscp_writeAppReg+1
 10120  0007D2  3094               	rrcf	3988,w,c	;volatile
 10121  0007D4  32E8               	rrcf	wreg,f,c
 10122  0007D6  32E8               	rrcf	wreg,f,c
 10123  0007D8  0B01               	andlw	1
 10124  0007DA  0D04               	mullw	4
 10125  0007DC  CFF3 F0D4          	movff	prodl,??_vscp_writeAppReg+2
 10126  0007E0  3894               	swapf	3988,w,c	;volatile
 10127  0007E2  0B01               	andlw	1
 10128  0007E4  0D08               	mullw	8
 10129  0007E6  CFF3 F0D5          	movff	prodl,??_vscp_writeAppReg+3
 10130  0007EA  3894               	swapf	3988,w,c	;volatile
 10131  0007EC  32E8               	rrcf	wreg,f,c
 10132  0007EE  0B01               	andlw	1
 10133  0007F0  0D10               	mullw	16
 10134  0007F2  CFF3 F0D6          	movff	prodl,??_vscp_writeAppReg+4
 10135  0007F6  3894               	swapf	3988,w,c	;volatile
 10136  0007F8  32E8               	rrcf	wreg,f,c
 10137  0007FA  32E8               	rrcf	wreg,f,c
 10138  0007FC  0B01               	andlw	1
 10139  0007FE  0D20               	mullw	32
 10140  000800  CFF3 F0D7          	movff	prodl,??_vscp_writeAppReg+5
 10141  000804  3494               	rlcf	3988,w,c	;volatile
 10142  000806  36E8               	rlcf	wreg,f,c
 10143  000808  0B01               	andlw	1
 10144  00080A  0D40               	mullw	64
 10145  00080C  CFF3 F0D8          	movff	prodl,??_vscp_writeAppReg+6
 10146  000810  3092               	rrcf	3986,w,c	;volatile
 10147  000812  32E8               	rrcf	wreg,f,c
 10148  000814  0B01               	andlw	1
 10149  000816  0D80               	mullw	128
 10150  000818  50F3               	movf	prodl,w,c
 10151  00081A  25D8               	addwf	(??_vscp_writeAppReg+6)& (0+255),w,b
 10152  00081C  25D7               	addwf	(??_vscp_writeAppReg+5)& (0+255),w,b
 10153  00081E  25D6               	addwf	(??_vscp_writeAppReg+4)& (0+255),w,b
 10154  000820  25D5               	addwf	(??_vscp_writeAppReg+3)& (0+255),w,b
 10155  000822  25D4               	addwf	(??_vscp_writeAppReg+2)& (0+255),w,b
 10156  000824  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10157  000826                     L36:
 10158  000826  25D2               	addwf	??_vscp_writeAppReg& (0+255),w,b
 10159  000828  EF1A  F009         	goto	L33
 10160  00082C                     l13941:
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;main.c: 1615: else if ( (reg >= 14) && (reg <= 23) ) {
 10164  00082C  0E0D               	movlw	13
 10165  00082E  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 10166  000830  D228               	goto	l14153
 10167                           
 10168                           ; BSR set to: 0
 10169  000832  0E18               	movlw	24
 10170  000834  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 10171  000836  D225               	goto	l14153
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;main.c: 1618: if ( Read_b_eep(0x43 + 24 + ( reg - 14 )) &
 10175                           ;main.c: 1621: 0x80 ) {
 10176  000838  0E4D               	movlw	77
 10177  00083A  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 10178  00083C  6E08               	movwf	?_Read_b_eep,c
 10179  00083E  6A09               	clrf	?_Read_b_eep+1,c
 10180  000840  0E00               	movlw	0
 10181  000842  2209               	addwfc	?_Read_b_eep+1,f,c
 10182  000844  EC27  F023         	call	_Read_b_eep	;wreg free
 10183  000848  0100               	movlb	0	; () banked
 10184  00084A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10185  00084C  BFD2               	btfsc	??_vscp_writeAppReg& (0+255),7,b
 10186  00084E  D1FB               	goto	l14151
 10187  000850  EF1B  F009         	goto	l14493
 10188  000854                     l13949:
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;main.c: 1628: bInfoEvent = 1;
 10192  000854  0E01               	movlw	1
 10193  000856  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;main.c: 1630: if ( 1 == val ) {
 10197  000858  044F               	decf	vscp_writeAppReg@val,w,c
 10198  00085A  E128               	bnz	l720
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;main.c: 1632: PORTBbits.RB0 = 1;
 10202  00085C  8081               	bsf	3969,0,c	;volatile
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;main.c: 1633: rv = PORTBbits.RB0;
 10206  00085E  0E00               	movlw	0
 10207  000860  B081               	btfsc	3969,0,c	;volatile
 10208  000862  0E01               	movlw	1
 10209  000864  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;main.c: 1634: bOn = 1;
 10213  000866  0E01               	movlw	1
 10214  000868  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;main.c: 1637: if ( Read_b_eep(0x43 + 24) & 0x04 ) {
 10218  00086A  6A09               	clrf	?_Read_b_eep+1,c
 10219  00086C  0E5B               	movlw	91
 10220  00086E  6E08               	movwf	?_Read_b_eep,c
 10221  000870  EC27  F023         	call	_Read_b_eep	;wreg free
 10222  000874  0100               	movlb	0	; () banked
 10223  000876  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10224  000878  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10225  00087A  EF1B  F009         	goto	l14493
 10226  00087E                     l13961:
 10227                           
 10228                           ;main.c: 1638: channel_protection_timer[ 0 ] =
 10229                           ;main.c: 1639: Read_b_eep(0x43 + 46 + 20u) * 256 +
 10230                           ;main.c: 1641: Read_b_eep(0x43 + 46 + 21u);
 10231  00087E  6A09               	clrf	?_Read_b_eep+1,c
 10232  000880  0E86               	movlw	134
 10233  000882  6E08               	movwf	?_Read_b_eep,c
 10234  000884  EC27  F023         	call	_Read_b_eep	;wreg free
 10235  000888  0100               	movlb	0	; () banked
 10236  00088A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10237  00088C  6A09               	clrf	?_Read_b_eep+1,c
 10238  00088E  0E85               	movlw	133
 10239  000890  6E08               	movwf	?_Read_b_eep,c
 10240  000892  EC27  F023         	call	_Read_b_eep	;wreg free
 10241  000896  0100               	movlb	0	; () banked
 10242  000898  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10243  00089A  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10244  00089C  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10245  00089E  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10246  0008A0  6F83               	movwf	_channel_protection_timer& (0+255),b
 10247  0008A2  0E00               	movlw	0
 10248  0008A4  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10249  0008A6  6F84               	movwf	(_channel_protection_timer+1)& (0+255),b
 10250  0008A8  EF1B  F009         	goto	l14493
 10251  0008AC                     l720:
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;main.c: 1646: else if (0 == val) {
 10255  0008AC  664F               	tstfsz	vscp_writeAppReg@val,c
 10256  0008AE  EF1B  F009         	goto	l14493
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;main.c: 1647: PORTBbits.RB0 = 0;
 10260  0008B2  9081               	bcf	3969,0,c	;volatile
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;main.c: 1648: rv = PORTBbits.RB0;
 10264  0008B4  0E00               	movlw	0
 10265  0008B6  B081               	btfsc	3969,0,c	;volatile
 10266  0008B8  0E01               	movlw	1
 10267  0008BA  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10268  0008BC                     l13967:
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;main.c: 1649: bOn = 0;
 10272  0008BC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 10273  0008BE  EF1B  F009         	goto	l14493
 10274  0008C2                     l13969:
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;main.c: 1656: bInfoEvent = 1;
 10278  0008C2  0E01               	movlw	1
 10279  0008C4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;main.c: 1658: if (1 == val) {
 10283  0008C6  044F               	decf	vscp_writeAppReg@val,w,c
 10284  0008C8  E11E               	bnz	l726
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;main.c: 1660: PORTBbits.RB1 = 1;
 10288  0008CA  8281               	bsf	3969,1,c	;volatile
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;main.c: 1661: rv = PORTBbits.RB1;
 10292  0008CC  0E00               	movlw	0
 10293  0008CE  B281               	btfsc	3969,1,c	;volatile
 10294  0008D0  0E01               	movlw	1
 10295  0008D2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;main.c: 1662: bOn = 1;
 10299  0008D4  0E01               	movlw	1
 10300  0008D6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;main.c: 1664: if (Read_b_eep(0x43 + 25) & 0x04) {
 10304  0008D8  6A09               	clrf	?_Read_b_eep+1,c
 10305  0008DA  0E5C               	movlw	92
 10306  0008DC  6E08               	movwf	?_Read_b_eep,c
 10307  0008DE  EC27  F023         	call	_Read_b_eep	;wreg free
 10308  0008E2  0100               	movlb	0	; () banked
 10309  0008E4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10310  0008E6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10311  0008E8  EF1B  F009         	goto	l14493
 10312  0008EC                     l13981:
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;main.c: 1665: channel_protection_timer[ 1 ] =
 10316                           ;main.c: 1666: Read_b_eep(0x43 + 46 + 22u) * 256 +
 10317                           ;main.c: 1668: Read_b_eep(0x43 + 46 + 23u);
 10318  0008EC  6A09               	clrf	?_Read_b_eep+1,c
 10319  0008EE  0E88               	movlw	136
 10320  0008F0  6E08               	movwf	?_Read_b_eep,c
 10321  0008F2  EC27  F023         	call	_Read_b_eep	;wreg free
 10322  0008F6  0100               	movlb	0	; () banked
 10323  0008F8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10324  0008FA  6A09               	clrf	?_Read_b_eep+1,c
 10325  0008FC  0E87               	movlw	135
 10326  0008FE  6E08               	movwf	?_Read_b_eep,c
 10327  000900  EC27  F023         	call	_Read_b_eep	;wreg free
 10328  000904  D220               	goto	L34
 10329  000906                     l726:
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;main.c: 1673: else if (0 == val) {
 10333  000906  664F               	tstfsz	vscp_writeAppReg@val,c
 10334  000908  EF1B  F009         	goto	l14493
 10335                           
 10336                           ; BSR set to: 0
 10337                           ;main.c: 1674: PORTBbits.RB1 = 0;
 10338  00090C  9281               	bcf	3969,1,c	;volatile
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;main.c: 1675: rv = PORTBbits.RB1;
 10342  00090E  0E00               	movlw	0
 10343  000910  B281               	btfsc	3969,1,c	;volatile
 10344  000912  0E01               	movlw	1
 10345  000914  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10346  000916  D7D2               	goto	l13967
 10347  000918                     l13989:
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;main.c: 1683: bInfoEvent = 1;
 10351  000918  0E01               	movlw	1
 10352  00091A  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;main.c: 1685: if (1 == val) {
 10356  00091C  044F               	decf	vscp_writeAppReg@val,w,c
 10357  00091E  E128               	bnz	l731
 10358                           
 10359                           ; BSR set to: 0
 10360                           ;main.c: 1687: PORTCbits.RC3 = 1;
 10361  000920  8682               	bsf	3970,3,c	;volatile
 10362                           
 10363                           ; BSR set to: 0
 10364                           ;main.c: 1688: rv = PORTCbits.RC3;
 10365  000922  0E00               	movlw	0
 10366  000924  B682               	btfsc	3970,3,c	;volatile
 10367  000926  0E01               	movlw	1
 10368  000928  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;main.c: 1689: bOn = 1;
 10372  00092A  0E01               	movlw	1
 10373  00092C  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;main.c: 1691: if ( Read_b_eep(0x43 + 26) & 0x04) {
 10377  00092E  6A09               	clrf	?_Read_b_eep+1,c
 10378  000930  0E5D               	movlw	93
 10379  000932  6E08               	movwf	?_Read_b_eep,c
 10380  000934  EC27  F023         	call	_Read_b_eep	;wreg free
 10381  000938  0100               	movlb	0	; () banked
 10382  00093A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10383  00093C  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10384  00093E  EF1B  F009         	goto	l14493
 10385  000942                     l14001:
 10386                           
 10387                           ;main.c: 1692: channel_protection_timer[ 2 ] =
 10388                           ;main.c: 1693: Read_b_eep(0x43 + 46 + 24u) * 256 +
 10389                           ;main.c: 1695: Read_b_eep(0x43 + 46 + 25u);
 10390  000942  6A09               	clrf	?_Read_b_eep+1,c
 10391  000944  0E8A               	movlw	138
 10392  000946  6E08               	movwf	?_Read_b_eep,c
 10393  000948  EC27  F023         	call	_Read_b_eep	;wreg free
 10394  00094C  0100               	movlb	0	; () banked
 10395  00094E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10396  000950  6A09               	clrf	?_Read_b_eep+1,c
 10397  000952  0E89               	movlw	137
 10398  000954  6E08               	movwf	?_Read_b_eep,c
 10399  000956  EC27  F023         	call	_Read_b_eep	;wreg free
 10400  00095A  0100               	movlb	0	; () banked
 10401  00095C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10402  00095E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10403  000960  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10404  000962  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10405  000964  6F87               	movwf	(_channel_protection_timer+4)& (0+255),b
 10406  000966  0E00               	movlw	0
 10407  000968  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10408  00096A  6F88               	movwf	(_channel_protection_timer+5)& (0+255),b
 10409  00096C  EF1B  F009         	goto	l14493
 10410  000970                     l731:
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;main.c: 1700: else if (0 == val) {
 10414  000970  664F               	tstfsz	vscp_writeAppReg@val,c
 10415  000972  EF1B  F009         	goto	l14493
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;main.c: 1701: PORTCbits.RC3 = 0;
 10419  000976  9682               	bcf	3970,3,c	;volatile
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;main.c: 1702: rv = PORTCbits.RC3;
 10423  000978  0E00               	movlw	0
 10424  00097A  B682               	btfsc	3970,3,c	;volatile
 10425  00097C  0E01               	movlw	1
 10426  00097E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10427  000980  D79D               	goto	l13967
 10428  000982                     l14009:
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;main.c: 1711: bInfoEvent = 1;
 10432  000982  0E01               	movlw	1
 10433  000984  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;main.c: 1713: if (1 == val) {
 10437  000986  044F               	decf	vscp_writeAppReg@val,w,c
 10438  000988  E128               	bnz	l736
 10439                           
 10440                           ; BSR set to: 0
 10441                           ;main.c: 1715: PORTCbits.RC4 = 1;
 10442  00098A  8882               	bsf	3970,4,c	;volatile
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;main.c: 1716: rv = PORTCbits.RC4;
 10446  00098C  0E00               	movlw	0
 10447  00098E  B882               	btfsc	3970,4,c	;volatile
 10448  000990  0E01               	movlw	1
 10449  000992  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;main.c: 1717: bOn = 1;
 10453  000994  0E01               	movlw	1
 10454  000996  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;main.c: 1719: if (Read_b_eep(0x43 + 27) & 0x04) {
 10458  000998  6A09               	clrf	?_Read_b_eep+1,c
 10459  00099A  0E5E               	movlw	94
 10460  00099C  6E08               	movwf	?_Read_b_eep,c
 10461  00099E  EC27  F023         	call	_Read_b_eep	;wreg free
 10462  0009A2  0100               	movlb	0	; () banked
 10463  0009A4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10464  0009A6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10465  0009A8  EF1B  F009         	goto	l14493
 10466  0009AC                     l14021:
 10467                           
 10468                           ;main.c: 1720: channel_protection_timer[ 3 ] =
 10469                           ;main.c: 1721: Read_b_eep(0x43 + 46 + 26u) * 256 +
 10470                           ;main.c: 1723: Read_b_eep(0x43 + 46 + 27u);
 10471  0009AC  6A09               	clrf	?_Read_b_eep+1,c
 10472  0009AE  0E8C               	movlw	140
 10473  0009B0  6E08               	movwf	?_Read_b_eep,c
 10474  0009B2  EC27  F023         	call	_Read_b_eep	;wreg free
 10475  0009B6  0100               	movlb	0	; () banked
 10476  0009B8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10477  0009BA  6A09               	clrf	?_Read_b_eep+1,c
 10478  0009BC  0E8B               	movlw	139
 10479  0009BE  6E08               	movwf	?_Read_b_eep,c
 10480  0009C0  EC27  F023         	call	_Read_b_eep	;wreg free
 10481  0009C4  0100               	movlb	0	; () banked
 10482  0009C6  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10483  0009C8  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10484  0009CA  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10485  0009CC  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10486  0009CE  6F89               	movwf	(_channel_protection_timer+6)& (0+255),b
 10487  0009D0  0E00               	movlw	0
 10488  0009D2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10489  0009D4  6F8A               	movwf	(_channel_protection_timer+7)& (0+255),b
 10490  0009D6  EF1B  F009         	goto	l14493
 10491  0009DA                     l736:
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;main.c: 1728: else if (0 == val) {
 10495  0009DA  664F               	tstfsz	vscp_writeAppReg@val,c
 10496  0009DC  EF1B  F009         	goto	l14493
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;main.c: 1729: PORTCbits.RC4 = 0;
 10500  0009E0  9882               	bcf	3970,4,c	;volatile
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;main.c: 1730: rv = PORTCbits.RC4;
 10504  0009E2  0E00               	movlw	0
 10505  0009E4  B882               	btfsc	3970,4,c	;volatile
 10506  0009E6  0E01               	movlw	1
 10507  0009E8  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10508  0009EA  D768               	goto	l13967
 10509  0009EC                     l14029:
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;main.c: 1739: bInfoEvent = 1;
 10513  0009EC  0E01               	movlw	1
 10514  0009EE  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;main.c: 1741: if (1 == val) {
 10518  0009F0  044F               	decf	vscp_writeAppReg@val,w,c
 10519  0009F2  E127               	bnz	l741
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;main.c: 1743: PORTCbits.RC5 = 1;
 10523  0009F4  8A82               	bsf	3970,5,c	;volatile
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;main.c: 1744: rv = PORTCbits.RC5;
 10527  0009F6  0E00               	movlw	0
 10528  0009F8  BA82               	btfsc	3970,5,c	;volatile
 10529  0009FA  0E01               	movlw	1
 10530  0009FC  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;main.c: 1745: bOn = 1;
 10534  0009FE  0E01               	movlw	1
 10535  000A00  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;main.c: 1747: if (Read_b_eep(0x43 + 28) & 0x04) {
 10539  000A02  6A09               	clrf	?_Read_b_eep+1,c
 10540  000A04  0E5F               	movlw	95
 10541  000A06  6E08               	movwf	?_Read_b_eep,c
 10542  000A08  EC27  F023         	call	_Read_b_eep	;wreg free
 10543  000A0C  0100               	movlb	0	; () banked
 10544  000A0E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10545  000A10  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10546  000A12  EF1B  F009         	goto	l14493
 10547  000A16                     l14041:
 10548                           
 10549                           ;main.c: 1748: channel_protection_timer[ 4 ] =
 10550                           ;main.c: 1749: Read_b_eep(0x43 + 46 + 28u) * 256 +
 10551                           ;main.c: 1751: Read_b_eep(0x43 + 46 + 29u);
 10552  000A16  6A09               	clrf	?_Read_b_eep+1,c
 10553  000A18  0E8E               	movlw	142
 10554  000A1A  6E08               	movwf	?_Read_b_eep,c
 10555  000A1C  EC27  F023         	call	_Read_b_eep	;wreg free
 10556  000A20  0100               	movlb	0	; () banked
 10557  000A22  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10558  000A24  6A09               	clrf	?_Read_b_eep+1,c
 10559  000A26  0E8D               	movlw	141
 10560  000A28  6E08               	movwf	?_Read_b_eep,c
 10561  000A2A  EC27  F023         	call	_Read_b_eep	;wreg free
 10562  000A2E  0100               	movlb	0	; () banked
 10563  000A30  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10564  000A32  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10565  000A34  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10566  000A36  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10567  000A38  6F8B               	movwf	(_channel_protection_timer+8)& (0+255),b
 10568  000A3A  0E00               	movlw	0
 10569  000A3C  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10570  000A3E  6F8C               	movwf	(_channel_protection_timer+9)& (0+255),b
 10571  000A40  D3FA               	goto	l14493
 10572  000A42                     l741:
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;main.c: 1756: else if (0 == val) {
 10576  000A42  664F               	tstfsz	vscp_writeAppReg@val,c
 10577  000A44  D3F8               	goto	l14493
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;main.c: 1757: PORTCbits.RC5 = 0;
 10581  000A46  9A82               	bcf	3970,5,c	;volatile
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;main.c: 1758: rv = PORTCbits.RC5;
 10585  000A48  0E00               	movlw	0
 10586  000A4A  BA82               	btfsc	3970,5,c	;volatile
 10587  000A4C  0E01               	movlw	1
 10588  000A4E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10589  000A50  D735               	goto	l13967
 10590  000A52                     l14049:
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;main.c: 1767: bInfoEvent = 1;
 10594  000A52  0E01               	movlw	1
 10595  000A54  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;main.c: 1769: if (1 == val) {
 10599  000A56  044F               	decf	vscp_writeAppReg@val,w,c
 10600  000A58  E126               	bnz	l746
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;main.c: 1771: PORTCbits.RC6 = 1;
 10604  000A5A  8C82               	bsf	3970,6,c	;volatile
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;main.c: 1772: rv = PORTCbits.RC6;
 10608  000A5C  0E00               	movlw	0
 10609  000A5E  BC82               	btfsc	3970,6,c	;volatile
 10610  000A60  0E01               	movlw	1
 10611  000A62  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;main.c: 1773: bOn = 1;
 10615  000A64  0E01               	movlw	1
 10616  000A66  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;main.c: 1775: if (Read_b_eep(0x43 + 29) & 0x04) {
 10620  000A68  6A09               	clrf	?_Read_b_eep+1,c
 10621  000A6A  0E60               	movlw	96
 10622  000A6C  6E08               	movwf	?_Read_b_eep,c
 10623  000A6E  EC27  F023         	call	_Read_b_eep	;wreg free
 10624  000A72  0100               	movlb	0	; () banked
 10625  000A74  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10626  000A76  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10627  000A78  D3DE               	goto	l14493
 10628  000A7A                     l14061:
 10629                           
 10630                           ;main.c: 1776: channel_protection_timer[ 5 ] =
 10631                           ;main.c: 1777: Read_b_eep(0x43 + 46 + 30u) * 256 +
 10632                           ;main.c: 1779: Read_b_eep(0x43 + 46 + 31u);
 10633  000A7A  6A09               	clrf	?_Read_b_eep+1,c
 10634  000A7C  0E90               	movlw	144
 10635  000A7E  6E08               	movwf	?_Read_b_eep,c
 10636  000A80  EC27  F023         	call	_Read_b_eep	;wreg free
 10637  000A84  0100               	movlb	0	; () banked
 10638  000A86  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10639  000A88  6A09               	clrf	?_Read_b_eep+1,c
 10640  000A8A  0E8F               	movlw	143
 10641  000A8C  6E08               	movwf	?_Read_b_eep,c
 10642  000A8E  EC27  F023         	call	_Read_b_eep	;wreg free
 10643  000A92  0100               	movlb	0	; () banked
 10644  000A94  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10645  000A96  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10646  000A98  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10647  000A9A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10648  000A9C  6F8D               	movwf	(_channel_protection_timer+10)& (0+255),b
 10649  000A9E  0E00               	movlw	0
 10650  000AA0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10651  000AA2  6F8E               	movwf	(_channel_protection_timer+11)& (0+255),b
 10652  000AA4  D3C8               	goto	l14493
 10653  000AA6                     l746:
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;main.c: 1784: else if (0 == val) {
 10657  000AA6  664F               	tstfsz	vscp_writeAppReg@val,c
 10658  000AA8  D3C6               	goto	l14493
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;main.c: 1785: PORTCbits.RC6 = 0;
 10662  000AAA  9C82               	bcf	3970,6,c	;volatile
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;main.c: 1786: rv = PORTCbits.RC6;
 10666  000AAC  0E00               	movlw	0
 10667  000AAE  BC82               	btfsc	3970,6,c	;volatile
 10668  000AB0  0E01               	movlw	1
 10669  000AB2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10670  000AB4  D703               	goto	l13967
 10671  000AB6                     l14069:
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;main.c: 1794: bInfoEvent = 1;
 10675  000AB6  0E01               	movlw	1
 10676  000AB8  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;main.c: 1796: if (1 == val) {
 10680  000ABA  044F               	decf	vscp_writeAppReg@val,w,c
 10681  000ABC  E126               	bnz	l751
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;main.c: 1798: PORTCbits.RC7 = 1;
 10685  000ABE  8E82               	bsf	3970,7,c	;volatile
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;main.c: 1799: rv = PORTCbits.RC7;
 10689  000AC0  0E00               	movlw	0
 10690  000AC2  BE82               	btfsc	3970,7,c	;volatile
 10691  000AC4  0E01               	movlw	1
 10692  000AC6  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;main.c: 1800: bOn = 1;
 10696  000AC8  0E01               	movlw	1
 10697  000ACA  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 1802: if (Read_b_eep(0x43 + 30) & 0x04) {
 10701  000ACC  6A09               	clrf	?_Read_b_eep+1,c
 10702  000ACE  0E61               	movlw	97
 10703  000AD0  6E08               	movwf	?_Read_b_eep,c
 10704  000AD2  EC27  F023         	call	_Read_b_eep	;wreg free
 10705  000AD6  0100               	movlb	0	; () banked
 10706  000AD8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10707  000ADA  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10708  000ADC  D3AC               	goto	l14493
 10709  000ADE                     l14081:
 10710                           
 10711                           ;main.c: 1803: channel_protection_timer[ 6 ] =
 10712                           ;main.c: 1804: Read_b_eep(0x43 + 46 + 32u) * 256 +
 10713                           ;main.c: 1806: Read_b_eep(0x43 + 46 + 33u);
 10714  000ADE  6A09               	clrf	?_Read_b_eep+1,c
 10715  000AE0  0E92               	movlw	146
 10716  000AE2  6E08               	movwf	?_Read_b_eep,c
 10717  000AE4  EC27  F023         	call	_Read_b_eep	;wreg free
 10718  000AE8  0100               	movlb	0	; () banked
 10719  000AEA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10720  000AEC  6A09               	clrf	?_Read_b_eep+1,c
 10721  000AEE  0E91               	movlw	145
 10722  000AF0  6E08               	movwf	?_Read_b_eep,c
 10723  000AF2  EC27  F023         	call	_Read_b_eep	;wreg free
 10724  000AF6  0100               	movlb	0	; () banked
 10725  000AF8  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10726  000AFA  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10727  000AFC  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10728  000AFE  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10729  000B00  6F8F               	movwf	(_channel_protection_timer+12)& (0+255),b
 10730  000B02  0E00               	movlw	0
 10731  000B04  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10732  000B06  6F90               	movwf	(_channel_protection_timer+13)& (0+255),b
 10733  000B08  D396               	goto	l14493
 10734  000B0A                     l751:
 10735                           
 10736                           ; BSR set to: 0
 10737                           ;main.c: 1811: else if (0 == val) {
 10738  000B0A  664F               	tstfsz	vscp_writeAppReg@val,c
 10739  000B0C  D394               	goto	l14493
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;main.c: 1812: PORTCbits.RC7 = 0;
 10743  000B0E  9E82               	bcf	3970,7,c	;volatile
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;main.c: 1813: rv = PORTCbits.RC7;
 10747  000B10  0E00               	movlw	0
 10748  000B12  BE82               	btfsc	3970,7,c	;volatile
 10749  000B14  0E01               	movlw	1
 10750  000B16  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10751  000B18  D6D1               	goto	l13967
 10752  000B1A                     l14089:
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;main.c: 1821: bInfoEvent = 1;
 10756  000B1A  0E01               	movlw	1
 10757  000B1C  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;main.c: 1823: if (1 == val) {
 10761  000B1E  044F               	decf	vscp_writeAppReg@val,w,c
 10762  000B20  E126               	bnz	l756
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;main.c: 1825: PORTAbits.RA2 = 1;
 10766  000B22  8480               	bsf	3968,2,c	;volatile
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;main.c: 1826: rv = PORTAbits.RA2;
 10770  000B24  0E00               	movlw	0
 10771  000B26  B480               	btfsc	3968,2,c	;volatile
 10772  000B28  0E01               	movlw	1
 10773  000B2A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;main.c: 1827: bOn = 1;
 10777  000B2C  0E01               	movlw	1
 10778  000B2E  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;main.c: 1829: if (Read_b_eep(0x43 + 31) & 0x04) {
 10782  000B30  6A09               	clrf	?_Read_b_eep+1,c
 10783  000B32  0E62               	movlw	98
 10784  000B34  6E08               	movwf	?_Read_b_eep,c
 10785  000B36  EC27  F023         	call	_Read_b_eep	;wreg free
 10786  000B3A  0100               	movlb	0	; () banked
 10787  000B3C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10788  000B3E  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10789  000B40  D37A               	goto	l14493
 10790  000B42                     l14101:
 10791                           
 10792                           ;main.c: 1830: channel_protection_timer[ 7 ] =
 10793                           ;main.c: 1831: Read_b_eep(0x43 + 46 + 34u) * 256 +
 10794                           ;main.c: 1833: Read_b_eep(0x43 + 46 + 35u);
 10795  000B42  6A09               	clrf	?_Read_b_eep+1,c
 10796  000B44  0E94               	movlw	148
 10797  000B46  6E08               	movwf	?_Read_b_eep,c
 10798  000B48  EC27  F023         	call	_Read_b_eep	;wreg free
 10799  000B4C  0100               	movlb	0	; () banked
 10800  000B4E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10801  000B50  6A09               	clrf	?_Read_b_eep+1,c
 10802  000B52  0E93               	movlw	147
 10803  000B54  6E08               	movwf	?_Read_b_eep,c
 10804  000B56  EC27  F023         	call	_Read_b_eep	;wreg free
 10805  000B5A  0100               	movlb	0	; () banked
 10806  000B5C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10807  000B5E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10808  000B60  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10809  000B62  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10810  000B64  6F91               	movwf	(_channel_protection_timer+14)& (0+255),b
 10811  000B66  0E00               	movlw	0
 10812  000B68  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10813  000B6A  6F92               	movwf	(_channel_protection_timer+15)& (0+255),b
 10814  000B6C  D364               	goto	l14493
 10815  000B6E                     l756:
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;main.c: 1838: else if (0 == val) {
 10819  000B6E  664F               	tstfsz	vscp_writeAppReg@val,c
 10820  000B70  D362               	goto	l14493
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;main.c: 1839: PORTAbits.RA2 = 0;
 10824  000B72  9480               	bcf	3968,2,c	;volatile
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;main.c: 1840: rv = PORTAbits.RA2;
 10828  000B74  0E00               	movlw	0
 10829  000B76  B480               	btfsc	3968,2,c	;volatile
 10830  000B78  0E01               	movlw	1
 10831  000B7A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10832  000B7C  D69F               	goto	l13967
 10833  000B7E                     l14109:
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;main.c: 1848: bInfoEvent = 1;
 10837  000B7E  0E01               	movlw	1
 10838  000B80  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;main.c: 1850: if (1 == val) {
 10842  000B82  044F               	decf	vscp_writeAppReg@val,w,c
 10843  000B84  E126               	bnz	l761
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;main.c: 1852: PORTAbits.RA1 = 1;
 10847  000B86  8280               	bsf	3968,1,c	;volatile
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;main.c: 1853: rv = PORTAbits.RA1;
 10851  000B88  0E00               	movlw	0
 10852  000B8A  B280               	btfsc	3968,1,c	;volatile
 10853  000B8C  0E01               	movlw	1
 10854  000B8E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;main.c: 1854: bOn = 1;
 10858  000B90  0E01               	movlw	1
 10859  000B92  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;main.c: 1856: if ( Read_b_eep(0x43 + 32) & 0x04 ) {
 10863  000B94  6A09               	clrf	?_Read_b_eep+1,c
 10864  000B96  0E63               	movlw	99
 10865  000B98  6E08               	movwf	?_Read_b_eep,c
 10866  000B9A  EC27  F023         	call	_Read_b_eep	;wreg free
 10867  000B9E  0100               	movlb	0	; () banked
 10868  000BA0  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10869  000BA2  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10870  000BA4  D348               	goto	l14493
 10871  000BA6                     l14121:
 10872                           
 10873                           ;main.c: 1857: channel_protection_timer[ 8 ] =
 10874                           ;main.c: 1858: Read_b_eep(0x43 + 46 + 36u) * 256 +
 10875                           ;main.c: 1860: Read_b_eep(0x43 + 46 + 37u);
 10876  000BA6  6A09               	clrf	?_Read_b_eep+1,c
 10877  000BA8  0E96               	movlw	150
 10878  000BAA  6E08               	movwf	?_Read_b_eep,c
 10879  000BAC  EC27  F023         	call	_Read_b_eep	;wreg free
 10880  000BB0  0100               	movlb	0	; () banked
 10881  000BB2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10882  000BB4  6A09               	clrf	?_Read_b_eep+1,c
 10883  000BB6  0E95               	movlw	149
 10884  000BB8  6E08               	movwf	?_Read_b_eep,c
 10885  000BBA  EC27  F023         	call	_Read_b_eep	;wreg free
 10886  000BBE  0100               	movlb	0	; () banked
 10887  000BC0  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10888  000BC2  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10889  000BC4  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10890  000BC6  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10891  000BC8  6F93               	movwf	(_channel_protection_timer+16)& (0+255),b
 10892  000BCA  0E00               	movlw	0
 10893  000BCC  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10894  000BCE  6F94               	movwf	(_channel_protection_timer+17)& (0+255),b
 10895  000BD0  D332               	goto	l14493
 10896  000BD2                     l761:
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;main.c: 1865: else if ( 0 == val ) {
 10900  000BD2  664F               	tstfsz	vscp_writeAppReg@val,c
 10901  000BD4  D330               	goto	l14493
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;main.c: 1866: PORTAbits.RA1 = 0;
 10905  000BD6  9280               	bcf	3968,1,c	;volatile
 10906                           
 10907                           ; BSR set to: 0
 10908                           ;main.c: 1867: rv = PORTAbits.RA1;
 10909  000BD8  0E00               	movlw	0
 10910  000BDA  B280               	btfsc	3968,1,c	;volatile
 10911  000BDC  0E01               	movlw	1
 10912  000BDE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10913  000BE0  D66D               	goto	l13967
 10914  000BE2                     l14129:
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;main.c: 1875: bInfoEvent = 1;
 10918  000BE2  0E01               	movlw	1
 10919  000BE4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;main.c: 1877: if ( 1 == val ) {
 10923  000BE6  044F               	decf	vscp_writeAppReg@val,w,c
 10924  000BE8  E126               	bnz	l766
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;main.c: 1879: PORTAbits.RA0 = 1;
 10928  000BEA  8080               	bsf	3968,0,c	;volatile
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1880: rv = PORTAbits.RA0;
 10932  000BEC  0E00               	movlw	0
 10933  000BEE  B080               	btfsc	3968,0,c	;volatile
 10934  000BF0  0E01               	movlw	1
 10935  000BF2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;main.c: 1881: bOn = 1;
 10939  000BF4  0E01               	movlw	1
 10940  000BF6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;main.c: 1883: if ( Read_b_eep(0x43 + 33) & 0x04 ) {
 10944  000BF8  6A09               	clrf	?_Read_b_eep+1,c
 10945  000BFA  0E64               	movlw	100
 10946  000BFC  6E08               	movwf	?_Read_b_eep,c
 10947  000BFE  EC27  F023         	call	_Read_b_eep	;wreg free
 10948  000C02  0100               	movlb	0	; () banked
 10949  000C04  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10950  000C06  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10951  000C08  D316               	goto	l14493
 10952  000C0A                     l14141:
 10953                           
 10954                           ;main.c: 1884: channel_protection_timer[ 9 ] =
 10955                           ;main.c: 1885: Read_b_eep(0x43 + 46 + 38u) * 256 +
 10956                           ;main.c: 1887: Read_b_eep(0x43 + 46 + 39u);
 10957  000C0A  6A09               	clrf	?_Read_b_eep+1,c
 10958  000C0C  0E98               	movlw	152
 10959  000C0E  6E08               	movwf	?_Read_b_eep,c
 10960  000C10  EC27  F023         	call	_Read_b_eep	;wreg free
 10961  000C14  0100               	movlb	0	; () banked
 10962  000C16  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10963  000C18  6A09               	clrf	?_Read_b_eep+1,c
 10964  000C1A  0E97               	movlw	151
 10965  000C1C  6E08               	movwf	?_Read_b_eep,c
 10966  000C1E  EC27  F023         	call	_Read_b_eep	;wreg free
 10967  000C22  0100               	movlb	0	; () banked
 10968  000C24  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10969  000C26  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10970  000C28  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10971  000C2A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10972  000C2C  6F95               	movwf	(_channel_protection_timer+18)& (0+255),b
 10973  000C2E  0E00               	movlw	0
 10974  000C30  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10975  000C32  6F96               	movwf	(_channel_protection_timer+19)& (0+255),b
 10976  000C34  D300               	goto	l14493
 10977  000C36                     l766:
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;main.c: 1892: else if ( 0 == val ) {
 10981  000C36  664F               	tstfsz	vscp_writeAppReg@val,c
 10982  000C38  D2FE               	goto	l14493
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;main.c: 1893: PORTAbits.RA0 = 0;
 10986  000C3A  9080               	bcf	3968,0,c	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;main.c: 1894: rv = PORTAbits.RA0;
 10990  000C3C  0E00               	movlw	0
 10991  000C3E  B080               	btfsc	3968,0,c	;volatile
 10992  000C40  0E01               	movlw	1
 10993  000C42  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10994  000C44  D63B               	goto	l13967
 10995  000C46                     l14151:
 10996                           
 10997                           ; BSR set to: 0
 10998  000C46  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 10999                           
 11000                           ; Switch size 1, requested type "space"
 11001                           ; Number of cases is 10, Range of values is 14 to 23
 11002                           ; switch strategies available:
 11003                           ; Name         Instructions Cycles
 11004                           ; simple_byte           31    16 (average)
 11005                           ;	Chosen strategy is simple_byte
 11006  000C48  0A0E               	xorlw	14	; case 14
 11007  000C4A  E101 D603          	bz	l13949
 11008  000C4E  0A01               	xorlw	1	; case 15
 11009  000C50  E101 D637          	bz	l13969
 11010  000C54  0A1F               	xorlw	31	; case 16
 11011  000C56  E101 D65F          	bz	l13989
 11012  000C5A  0A01               	xorlw	1	; case 17
 11013  000C5C  E101 D691          	bz	l14009
 11014  000C60  0A03               	xorlw	3	; case 18
 11015  000C62  E101 D6C3          	bz	l14029
 11016  000C66  0A01               	xorlw	1	; case 19
 11017  000C68  E101 D6F3          	bz	l14049
 11018  000C6C  0A07               	xorlw	7	; case 20
 11019  000C6E  E101 D722          	bz	l14069
 11020  000C72  0A01               	xorlw	1	; case 21
 11021  000C74  E101 D751          	bz	l14089
 11022  000C78  0A03               	xorlw	3	; case 22
 11023  000C7A  E081               	bz	l14109
 11024  000C7C  0A01               	xorlw	1	; case 23
 11025  000C7E  E0B1               	bz	l14129
 11026                           
 11027                           ;main.c: 1900: }
 11028                           ;main.c: 1901: }
 11029  000C80  D2DA               	goto	l14493
 11030  000C82                     l14153:
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;main.c: 1904: else if ( (reg >= 24 ) &&
 11034                           ;main.c: 1905: (reg <= 33) ) {
 11035  000C82  0E17               	movlw	23
 11036  000C84  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11037  000C86  D1C3               	goto	l14403
 11038                           
 11039                           ; BSR set to: 0
 11040  000C88  0E22               	movlw	34
 11041  000C8A  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11042  000C8C  D1C0               	goto	l14403
 11043  000C8E  D1A1               	goto	l14401
 11044  000C90                     l14159:
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;main.c: 1911: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11048  000C90  EC5B  F023         	call	_Busy_eep	;wreg free
 11049  000C94  0E71               	movlw	113
 11050  000C96  DAF5               	call	PL2	;call to abstracted procedure
 11051  000C98  EC2E  F021         	call	_Write_b_eep	;wreg free
 11052                           
 11053                           ;main.c: 1912: rv = Read_b_eep(0x43 + 46 + reg);
 11054  000C9C  DB02               	call	PL10	;call to abstracted procedure
 11055  000C9E  EC27  F023         	call	_Read_b_eep	;wreg free
 11056  000CA2  0100               	movlb	0	; () banked
 11057  000CA4  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;main.c: 1914: if ( val & 0x01 ) {
 11061  000CA6  A04F               	btfss	vscp_writeAppReg@val,0,c
 11062  000CA8  D012               	goto	l14173
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;main.c: 1916: PORTBbits.RB0 = 0;
 11066  000CAA  9081               	bcf	3969,0,c	;volatile
 11067                           
 11068                           ;main.c: 1917: bOn = 0;
 11069  000CAC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;main.c: 1919: channel_pulse_flags |= 0b0000000001;
 11073  000CAE  8168               	bsf	_channel_pulse_flags& (0+255),0,b
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;main.c: 1920: channel_pulse_timer[ 0 ] =
 11077                           ;main.c: 1921: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11078                           ;main.c: 1923: Read_b_eep(0x43 + 46 + 0u);
 11079  000CB0  6A09               	clrf	?_Read_b_eep+1,c
 11080  000CB2  0E71               	movlw	113
 11081  000CB4  6E08               	movwf	?_Read_b_eep,c
 11082  000CB6  EC27  F023         	call	_Read_b_eep	;wreg free
 11083  000CBA  0100               	movlb	0	; () banked
 11084  000CBC  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11085  000CBE  6A09               	clrf	?_Read_b_eep+1,c
 11086  000CC0  0E71               	movlw	113
 11087  000CC2  6E08               	movwf	?_Read_b_eep,c
 11088  000CC4  EC27  F023         	call	_Read_b_eep	;wreg free
 11089  000CC8  DAE5               	call	PL6	;call to abstracted procedure
 11090  000CCA  DB0F               	call	PL82	;call to abstracted procedure
 11091                           
 11092                           ;main.c: 1925: }
 11093  000CCC  D006               	goto	l14179
 11094  000CCE                     l14173:
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;main.c: 1926: else {
 11098                           ;main.c: 1927: channel_pulse_flags &= 0b1111111110;
 11099  000CCE  0EFE               	movlw	254
 11100  000CD0  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11101  000CD2  0E03               	movlw	3
 11102  000CD4  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;main.c: 1928: PORTBbits.RB0 = 0;
 11106  000CD6  9081               	bcf	3969,0,c	;volatile
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 1929: bOn = 0;
 11110  000CD8  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11111  000CDA                     l14179:
 11112                           
 11113                           ;main.c: 1930: }
 11114                           ;main.c: 1932: if ( val & 0x04 ) {
 11115  000CDA  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11116  000CDC  D5D0               	goto	l13961
 11117  000CDE  D2AB               	goto	l14493
 11118  000CE0                     l14183:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;main.c: 1943: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11122  000CE0  EC5B  F023         	call	_Busy_eep	;wreg free
 11123  000CE4  0E71               	movlw	113
 11124  000CE6  DACD               	call	PL2	;call to abstracted procedure
 11125  000CE8  EC2E  F021         	call	_Write_b_eep	;wreg free
 11126                           
 11127                           ;main.c: 1944: rv = Read_b_eep(0x43 + 46 + reg);
 11128  000CEC  DADA               	call	PL10	;call to abstracted procedure
 11129  000CEE  EC27  F023         	call	_Read_b_eep	;wreg free
 11130  000CF2  0100               	movlb	0	; () banked
 11131  000CF4  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;main.c: 1946: if ( val & 0x02 ) {
 11135  000CF6  A24F               	btfss	vscp_writeAppReg@val,1,c
 11136  000CF8  D012               	goto	l14197
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;main.c: 1948: PORTBbits.RB1 = 0;
 11140  000CFA  9281               	bcf	3969,1,c	;volatile
 11141                           
 11142                           ;main.c: 1949: bOn = 0;
 11143  000CFC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;main.c: 1951: channel_pulse_flags |= 0b0000000010;
 11147  000CFE  8368               	bsf	_channel_pulse_flags& (0+255),1,b
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;main.c: 1952: channel_pulse_timer[ 1 ] =
 11151                           ;main.c: 1953: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11152                           ;main.c: 1955: Read_b_eep(0x43 + 46 + 1u);
 11153  000D00  6A09               	clrf	?_Read_b_eep+1,c
 11154  000D02  0E72               	movlw	114
 11155  000D04  6E08               	movwf	?_Read_b_eep,c
 11156  000D06  EC27  F023         	call	_Read_b_eep	;wreg free
 11157  000D0A  0100               	movlb	0	; () banked
 11158  000D0C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11159  000D0E  6A09               	clrf	?_Read_b_eep+1,c
 11160  000D10  0E71               	movlw	113
 11161  000D12  6E08               	movwf	?_Read_b_eep,c
 11162  000D14  EC27  F023         	call	_Read_b_eep	;wreg free
 11163  000D18  DABD               	call	PL6	;call to abstracted procedure
 11164  000D1A  DAD9               	call	PL72	;call to abstracted procedure
 11165                           
 11166                           ;main.c: 1957: }
 11167  000D1C  D006               	goto	l14203
 11168  000D1E                     l14197:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;main.c: 1958: else {
 11172                           ;main.c: 1959: channel_pulse_flags &= 0b1111111101;
 11173  000D1E  0EFD               	movlw	253
 11174  000D20  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11175  000D22  0E03               	movlw	3
 11176  000D24  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;main.c: 1960: PORTBbits.RB1 = 0;
 11180  000D26  9281               	bcf	3969,1,c	;volatile
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;main.c: 1961: bOn = 0;
 11184  000D28  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11185  000D2A                     l14203:
 11186                           
 11187                           ;main.c: 1962: }
 11188                           ;main.c: 1964: if ( val & 0x04 ) {
 11189  000D2A  A44F               	btfss	vscp_writeAppReg@val,2,c
 11190  000D2C  D284               	goto	l14493
 11191                           
 11192                           ;main.c: 1965: channel_protection_timer[ 1 ] =
 11193                           ;main.c: 1966: Read_b_eep(0x43 + 46 + 20u) * 256 +
 11194                           ;main.c: 1968: Read_b_eep(0x43 + 46 + 21u);
 11195  000D2E  6A09               	clrf	?_Read_b_eep+1,c
 11196  000D30  0E86               	movlw	134
 11197  000D32  6E08               	movwf	?_Read_b_eep,c
 11198  000D34  EC27  F023         	call	_Read_b_eep	;wreg free
 11199  000D38  0100               	movlb	0	; () banked
 11200  000D3A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11201  000D3C  6A09               	clrf	?_Read_b_eep+1,c
 11202  000D3E  0E85               	movlw	133
 11203  000D40  6E08               	movwf	?_Read_b_eep,c
 11204  000D42  EC27  F023         	call	_Read_b_eep	;wreg free
 11205  000D46                     L34:
 11206  000D46  0100               	movlb	0	; () banked
 11207  000D48  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11208  000D4A  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11209  000D4C  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 11210  000D4E  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11211  000D50  6F85               	movwf	(_channel_protection_timer+2)& (0+255),b
 11212  000D52  0E00               	movlw	0
 11213  000D54  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11214  000D56  6F86               	movwf	(_channel_protection_timer+3)& (0+255),b
 11215  000D58  D26E               	goto	l14493
 11216  000D5A                     l14207:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;main.c: 1975: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11220  000D5A  EC5B  F023         	call	_Busy_eep	;wreg free
 11221  000D5E  0E71               	movlw	113
 11222  000D60  DA90               	call	PL2	;call to abstracted procedure
 11223  000D62  EC2E  F021         	call	_Write_b_eep	;wreg free
 11224                           
 11225                           ;main.c: 1976: rv = Read_b_eep(0x43 + 46 + reg);
 11226  000D66  DA9D               	call	PL10	;call to abstracted procedure
 11227  000D68  EC27  F023         	call	_Read_b_eep	;wreg free
 11228  000D6C  0100               	movlb	0	; () banked
 11229  000D6E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;main.c: 1978: if ( val & 0x01 ) {
 11233  000D70  A04F               	btfss	vscp_writeAppReg@val,0,c
 11234  000D72  D012               	goto	l14221
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;main.c: 1980: PORTCbits.RC3 = 0;
 11238  000D74  9682               	bcf	3970,3,c	;volatile
 11239                           
 11240                           ;main.c: 1981: bOn = 0;
 11241  000D76  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;main.c: 1983: channel_pulse_flags |= 0b0000000100;
 11245  000D78  8568               	bsf	_channel_pulse_flags& (0+255),2,b
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;main.c: 1984: channel_pulse_timer[ 2 ] =
 11249                           ;main.c: 1985: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11250                           ;main.c: 1987: Read_b_eep(0x43 + 46 + 5u);
 11251  000D7A  6A09               	clrf	?_Read_b_eep+1,c
 11252  000D7C  0E76               	movlw	118
 11253  000D7E  6E08               	movwf	?_Read_b_eep,c
 11254  000D80  EC27  F023         	call	_Read_b_eep	;wreg free
 11255  000D84  0100               	movlb	0	; () banked
 11256  000D86  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11257  000D88  6A09               	clrf	?_Read_b_eep+1,c
 11258  000D8A  0E75               	movlw	117
 11259  000D8C  6E08               	movwf	?_Read_b_eep,c
 11260  000D8E  EC27  F023         	call	_Read_b_eep	;wreg free
 11261  000D92  DA80               	call	PL6	;call to abstracted procedure
 11262  000D94  DAB8               	call	PL86	;call to abstracted procedure
 11263                           
 11264                           ;main.c: 1989: }
 11265  000D96  D006               	goto	l14227
 11266  000D98                     l14221:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;main.c: 1990: else {
 11270                           ;main.c: 1991: channel_pulse_flags &= 0b1111111011;
 11271  000D98  0EFB               	movlw	251
 11272  000D9A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11273  000D9C  0E03               	movlw	3
 11274  000D9E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;main.c: 1992: PORTCbits.RC3 = 0;
 11278  000DA0  9682               	bcf	3970,3,c	;volatile
 11279                           
 11280                           ; BSR set to: 0
 11281                           ;main.c: 1993: bOn = 0;
 11282  000DA2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11283  000DA4                     l14227:
 11284                           
 11285                           ;main.c: 1994: }
 11286                           ;main.c: 1996: if ( val & 0x04 ) {
 11287  000DA4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11288  000DA6  D5CD               	goto	l14001
 11289  000DA8  D246               	goto	l14493
 11290  000DAA                     l14231:
 11291                           
 11292                           ; BSR set to: 0
 11293                           ;main.c: 2007: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11294  000DAA  EC5B  F023         	call	_Busy_eep	;wreg free
 11295  000DAE  0E71               	movlw	113
 11296  000DB0  DA68               	call	PL2	;call to abstracted procedure
 11297  000DB2  EC2E  F021         	call	_Write_b_eep	;wreg free
 11298                           
 11299                           ;main.c: 2008: rv = Read_b_eep(0x43 + 46 + reg);
 11300  000DB6  DA75               	call	PL10	;call to abstracted procedure
 11301  000DB8  EC27  F023         	call	_Read_b_eep	;wreg free
 11302  000DBC  0100               	movlb	0	; () banked
 11303  000DBE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;main.c: 2010: if ( val & 0x01 ) {
 11307  000DC0  A04F               	btfss	vscp_writeAppReg@val,0,c
 11308  000DC2  D012               	goto	l14245
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;main.c: 2012: PORTCbits.RC4 = 0;
 11312  000DC4  9882               	bcf	3970,4,c	;volatile
 11313                           
 11314                           ;main.c: 2013: bOn = 0;
 11315  000DC6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;main.c: 2015: channel_pulse_flags |= 0b0000001000;
 11319  000DC8  8768               	bsf	_channel_pulse_flags& (0+255),3,b
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;main.c: 2016: channel_pulse_timer[ 3 ] =
 11323                           ;main.c: 2017: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11324                           ;main.c: 2019: Read_b_eep(0x43 + 46 + 7u);
 11325  000DCA  6A09               	clrf	?_Read_b_eep+1,c
 11326  000DCC  0E78               	movlw	120
 11327  000DCE  6E08               	movwf	?_Read_b_eep,c
 11328  000DD0  EC27  F023         	call	_Read_b_eep	;wreg free
 11329  000DD4  0100               	movlb	0	; () banked
 11330  000DD6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11331  000DD8  6A09               	clrf	?_Read_b_eep+1,c
 11332  000DDA  0E77               	movlw	119
 11333  000DDC  6E08               	movwf	?_Read_b_eep,c
 11334  000DDE  EC27  F023         	call	_Read_b_eep	;wreg free
 11335  000DE2  DA58               	call	PL6	;call to abstracted procedure
 11336  000DE4  DA7B               	call	PL74	;call to abstracted procedure
 11337                           
 11338                           ;main.c: 2021: }
 11339  000DE6  D006               	goto	l14251
 11340  000DE8                     l14245:
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;main.c: 2022: else {
 11344                           ;main.c: 2023: channel_pulse_flags &= 0b1111110111;
 11345  000DE8  0EF7               	movlw	247
 11346  000DEA  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11347  000DEC  0E03               	movlw	3
 11348  000DEE  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;main.c: 2024: PORTCbits.RC4 = 0;
 11352  000DF0  9882               	bcf	3970,4,c	;volatile
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;main.c: 2025: bOn = 0;
 11356  000DF2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11357  000DF4                     l14251:
 11358                           
 11359                           ;main.c: 2026: }
 11360                           ;main.c: 2028: if ( val & 0x04 ) {
 11361  000DF4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11362  000DF6  D5DA               	goto	l14021
 11363  000DF8  D21E               	goto	l14493
 11364  000DFA                     l14255:
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;main.c: 2039: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11368  000DFA  EC5B  F023         	call	_Busy_eep	;wreg free
 11369  000DFE  0E71               	movlw	113
 11370  000E00  DA40               	call	PL2	;call to abstracted procedure
 11371  000E02  EC2E  F021         	call	_Write_b_eep	;wreg free
 11372                           
 11373                           ;main.c: 2040: rv = Read_b_eep(0x43 + 46 + reg);
 11374  000E06  DA4D               	call	PL10	;call to abstracted procedure
 11375  000E08  EC27  F023         	call	_Read_b_eep	;wreg free
 11376  000E0C  0100               	movlb	0	; () banked
 11377  000E0E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;main.c: 2042: if ( val & 0x04 ) {
 11381  000E10  A44F               	btfss	vscp_writeAppReg@val,2,c
 11382  000E12  D012               	goto	l14269
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;main.c: 2044: PORTCbits.RC5 = 0;
 11386  000E14  9A82               	bcf	3970,5,c	;volatile
 11387                           
 11388                           ;main.c: 2045: bOn = 0;
 11389  000E16  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;main.c: 2047: channel_pulse_flags |= 0b0000010000;
 11393  000E18  8968               	bsf	_channel_pulse_flags& (0+255),4,b
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;main.c: 2048: channel_pulse_timer[ 4 ] =
 11397                           ;main.c: 2049: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11398                           ;main.c: 2051: Read_b_eep(0x43 + 46 + 9u);
 11399  000E1A  6A09               	clrf	?_Read_b_eep+1,c
 11400  000E1C  0E7A               	movlw	122
 11401  000E1E  6E08               	movwf	?_Read_b_eep,c
 11402  000E20  EC27  F023         	call	_Read_b_eep	;wreg free
 11403  000E24  0100               	movlb	0	; () banked
 11404  000E26  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11405  000E28  6A09               	clrf	?_Read_b_eep+1,c
 11406  000E2A  0E79               	movlw	121
 11407  000E2C  6E08               	movwf	?_Read_b_eep,c
 11408  000E2E  EC27  F023         	call	_Read_b_eep	;wreg free
 11409  000E32  DA30               	call	PL6	;call to abstracted procedure
 11410  000E34  DA61               	call	PL84	;call to abstracted procedure
 11411                           
 11412                           ;main.c: 2053: }
 11413  000E36  D006               	goto	l14275
 11414  000E38                     l14269:
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;main.c: 2054: else {
 11418                           ;main.c: 2055: channel_pulse_flags &= 0b1111101111;
 11419  000E38  0EEF               	movlw	239
 11420  000E3A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11421  000E3C  0E03               	movlw	3
 11422  000E3E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;main.c: 2056: PORTCbits.RC5 = 0;
 11426  000E40  9A82               	bcf	3970,5,c	;volatile
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 2057: bOn = 0;
 11430  000E42  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11431  000E44                     l14275:
 11432                           
 11433                           ;main.c: 2058: }
 11434                           ;main.c: 2060: if ( val & 0x04 ) {
 11435  000E44  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11436  000E46  D5E7               	goto	l14041
 11437  000E48  D1F6               	goto	l14493
 11438  000E4A                     l14279:
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;main.c: 2071: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11442  000E4A  EC5B  F023         	call	_Busy_eep	;wreg free
 11443  000E4E  0E71               	movlw	113
 11444  000E50  DA18               	call	PL2	;call to abstracted procedure
 11445  000E52  EC2E  F021         	call	_Write_b_eep	;wreg free
 11446                           
 11447                           ;main.c: 2072: rv = Read_b_eep(0x43 + 46 + reg);
 11448  000E56  DA25               	call	PL10	;call to abstracted procedure
 11449  000E58  EC27  F023         	call	_Read_b_eep	;wreg free
 11450  000E5C  0100               	movlb	0	; () banked
 11451  000E5E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;main.c: 2074: if ( val & 0x01 ) {
 11455  000E60  A04F               	btfss	vscp_writeAppReg@val,0,c
 11456  000E62  D012               	goto	l14293
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;main.c: 2076: PORTCbits.RC6 = 0;
 11460  000E64  9C82               	bcf	3970,6,c	;volatile
 11461                           
 11462                           ;main.c: 2077: bOn = 0;
 11463  000E66  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;main.c: 2079: channel_pulse_flags |= 0b0000100000;
 11467  000E68  8B68               	bsf	_channel_pulse_flags& (0+255),5,b
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;main.c: 2080: channel_pulse_timer[ 5 ] =
 11471                           ;main.c: 2081: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11472                           ;main.c: 2083: Read_b_eep(0x43 + 46 + 11u);
 11473  000E6A  6A09               	clrf	?_Read_b_eep+1,c
 11474  000E6C  0E7C               	movlw	124
 11475  000E6E  6E08               	movwf	?_Read_b_eep,c
 11476  000E70  EC27  F023         	call	_Read_b_eep	;wreg free
 11477  000E74  0100               	movlb	0	; () banked
 11478  000E76  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11479  000E78  6A09               	clrf	?_Read_b_eep+1,c
 11480  000E7A  0E7B               	movlw	123
 11481  000E7C  6E08               	movwf	?_Read_b_eep,c
 11482  000E7E  EC27  F023         	call	_Read_b_eep	;wreg free
 11483  000E82  DA08               	call	PL6	;call to abstracted procedure
 11484  000E84  DA4E               	call	PL90	;call to abstracted procedure
 11485                           
 11486                           ;main.c: 2085: }
 11487  000E86  D006               	goto	l14299
 11488  000E88                     l14293:
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;main.c: 2086: else {
 11492                           ;main.c: 2087: channel_pulse_flags &= 0b1111011111;
 11493  000E88  0EDF               	movlw	223
 11494  000E8A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11495  000E8C  0E03               	movlw	3
 11496  000E8E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;main.c: 2088: PORTCbits.RC6 = 0;
 11500  000E90  9C82               	bcf	3970,6,c	;volatile
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;main.c: 2089: bOn = 0;
 11504  000E92  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11505  000E94                     l14299:
 11506                           
 11507                           ;main.c: 2090: }
 11508                           ;main.c: 2092: if ( val & 0x04 ) {
 11509  000E94  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11510  000E96  D5F1               	goto	l14061
 11511  000E98  D1CE               	goto	l14493
 11512  000E9A                     l14303:
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;main.c: 2103: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11516  000E9A  EC5B  F023         	call	_Busy_eep	;wreg free
 11517  000E9E  0E71               	movlw	113
 11518  000EA0  D9F0               	call	PL2	;call to abstracted procedure
 11519  000EA2  EC2E  F021         	call	_Write_b_eep	;wreg free
 11520                           
 11521                           ;main.c: 2104: rv = Read_b_eep(0x43 + 46 + reg);
 11522  000EA6  D9FD               	call	PL10	;call to abstracted procedure
 11523  000EA8  EC27  F023         	call	_Read_b_eep	;wreg free
 11524  000EAC  0100               	movlb	0	; () banked
 11525  000EAE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;main.c: 2106: if ( val & 0x01 ) {
 11529  000EB0  A04F               	btfss	vscp_writeAppReg@val,0,c
 11530  000EB2  D012               	goto	l14317
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;main.c: 2108: PORTCbits.RC7 = 0;
 11534  000EB4  9E82               	bcf	3970,7,c	;volatile
 11535                           
 11536                           ;main.c: 2109: bOn = 0;
 11537  000EB6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;main.c: 2111: channel_pulse_flags |= 0b0001000000;
 11541  000EB8  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;main.c: 2112: channel_pulse_timer[ 6 ] =
 11545                           ;main.c: 2113: Read_b_eep(0x43 + 46 + 12u) * 256 +
 11546                           ;main.c: 2115: Read_b_eep(0x43 + 46 + 13u);
 11547  000EBA  6A09               	clrf	?_Read_b_eep+1,c
 11548  000EBC  0E7E               	movlw	126
 11549  000EBE  6E08               	movwf	?_Read_b_eep,c
 11550  000EC0  EC27  F023         	call	_Read_b_eep	;wreg free
 11551  000EC4  0100               	movlb	0	; () banked
 11552  000EC6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11553  000EC8  6A09               	clrf	?_Read_b_eep+1,c
 11554  000ECA  0E7D               	movlw	125
 11555  000ECC  6E08               	movwf	?_Read_b_eep,c
 11556  000ECE  EC27  F023         	call	_Read_b_eep	;wreg free
 11557  000ED2  D9E0               	call	PL6	;call to abstracted procedure
 11558  000ED4  D9F5               	call	PL70	;call to abstracted procedure
 11559                           
 11560                           ;main.c: 2117: }
 11561  000ED6  D006               	goto	l14323
 11562  000ED8                     l14317:
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;main.c: 2118: else {
 11566                           ;main.c: 2119: channel_pulse_flags &= 0b1110111111;
 11567  000ED8  0EBF               	movlw	191
 11568  000EDA  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11569  000EDC  0E03               	movlw	3
 11570  000EDE  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;main.c: 2120: PORTCbits.RC7 = 0;
 11574  000EE0  9E82               	bcf	3970,7,c	;volatile
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;main.c: 2121: bOn = 0;
 11578  000EE2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11579  000EE4                     l14323:
 11580                           
 11581                           ;main.c: 2122: }
 11582                           ;main.c: 2124: if ( val & 0x04 ) {
 11583  000EE4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11584  000EE6  D5FB               	goto	l14081
 11585  000EE8  D1A6               	goto	l14493
 11586  000EEA                     l14327:
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;main.c: 2135: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11590  000EEA  EC5B  F023         	call	_Busy_eep	;wreg free
 11591  000EEE  0E71               	movlw	113
 11592  000EF0  D9C8               	call	PL2	;call to abstracted procedure
 11593  000EF2  EC2E  F021         	call	_Write_b_eep	;wreg free
 11594                           
 11595                           ;main.c: 2136: rv = Read_b_eep(0x43 + 46 + reg);
 11596  000EF6  D9D5               	call	PL10	;call to abstracted procedure
 11597  000EF8  EC27  F023         	call	_Read_b_eep	;wreg free
 11598  000EFC  0100               	movlb	0	; () banked
 11599  000EFE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;main.c: 2138: if ( val & 0x01 ) {
 11603  000F00  A04F               	btfss	vscp_writeAppReg@val,0,c
 11604  000F02  D012               	goto	l14341
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;main.c: 2140: PORTAbits.RA2 = 0;
 11608  000F04  9480               	bcf	3968,2,c	;volatile
 11609                           
 11610                           ;main.c: 2141: bOn = 0;
 11611  000F06  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;main.c: 2143: channel_pulse_flags |= 0b0010000000;
 11615  000F08  8F68               	bsf	_channel_pulse_flags& (0+255),7,b
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;main.c: 2144: channel_pulse_timer[ 7 ] =
 11619                           ;main.c: 2145: Read_b_eep(0x43 + 46 + 14u) * 256 +
 11620                           ;main.c: 2147: Read_b_eep(0x43 + 46 + 15u);
 11621  000F0A  6A09               	clrf	?_Read_b_eep+1,c
 11622  000F0C  0E80               	movlw	128
 11623  000F0E  6E08               	movwf	?_Read_b_eep,c
 11624  000F10  EC27  F023         	call	_Read_b_eep	;wreg free
 11625  000F14  0100               	movlb	0	; () banked
 11626  000F16  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11627  000F18  6A09               	clrf	?_Read_b_eep+1,c
 11628  000F1A  0E7F               	movlw	127
 11629  000F1C  6E08               	movwf	?_Read_b_eep,c
 11630  000F1E  EC27  F023         	call	_Read_b_eep	;wreg free
 11631  000F22  D9B8               	call	PL6	;call to abstracted procedure
 11632  000F24  D9F7               	call	PL88	;call to abstracted procedure
 11633                           
 11634                           ;main.c: 2149: }
 11635  000F26  D006               	goto	l14347
 11636  000F28                     l14341:
 11637                           
 11638                           ; BSR set to: 0
 11639                           ;main.c: 2150: else {
 11640                           ;main.c: 2151: channel_pulse_flags &= 0b1101111111;
 11641  000F28  0E7F               	movlw	127
 11642  000F2A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11643  000F2C  0E03               	movlw	3
 11644  000F2E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;main.c: 2152: PORTAbits.RA2 = 0;
 11648  000F30  9480               	bcf	3968,2,c	;volatile
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;main.c: 2153: bOn = 0;
 11652  000F32  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11653  000F34                     l14347:
 11654                           
 11655                           ;main.c: 2154: }
 11656                           ;main.c: 2156: if ( val & 0x04 ) {
 11657  000F34  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11658  000F36  D605               	goto	l14101
 11659  000F38  D17E               	goto	l14493
 11660  000F3A                     l14351:
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;main.c: 2167: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11664  000F3A  EC5B  F023         	call	_Busy_eep	;wreg free
 11665  000F3E  0E71               	movlw	113
 11666  000F40  D9A0               	call	PL2	;call to abstracted procedure
 11667  000F42  EC2E  F021         	call	_Write_b_eep	;wreg free
 11668                           
 11669                           ;main.c: 2168: rv = Read_b_eep(0x43 + 46 + reg);
 11670  000F46  D9AD               	call	PL10	;call to abstracted procedure
 11671  000F48  EC27  F023         	call	_Read_b_eep	;wreg free
 11672  000F4C  0100               	movlb	0	; () banked
 11673  000F4E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;main.c: 2170: if ( val & 0x01 ) {
 11677  000F50  A04F               	btfss	vscp_writeAppReg@val,0,c
 11678  000F52  D012               	goto	l14365
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;main.c: 2172: PORTAbits.RA1 = 0;
 11682  000F54  9280               	bcf	3968,1,c	;volatile
 11683                           
 11684                           ;main.c: 2173: bOn = 0;
 11685  000F56  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;main.c: 2175: channel_pulse_flags |= 0b0100000000;
 11689  000F58  8169               	bsf	(_channel_pulse_flags+1)& (0+255),0,b
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;main.c: 2176: channel_pulse_timer[ 8 ] =
 11693                           ;main.c: 2177: Read_b_eep(0x43 + 46 + 16u) * 256 +
 11694                           ;main.c: 2179: Read_b_eep(0x43 + 46 + 17u);
 11695  000F5A  6A09               	clrf	?_Read_b_eep+1,c
 11696  000F5C  0E82               	movlw	130
 11697  000F5E  6E08               	movwf	?_Read_b_eep,c
 11698  000F60  EC27  F023         	call	_Read_b_eep	;wreg free
 11699  000F64  0100               	movlb	0	; () banked
 11700  000F66  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11701  000F68  6A09               	clrf	?_Read_b_eep+1,c
 11702  000F6A  0E81               	movlw	129
 11703  000F6C  6E08               	movwf	?_Read_b_eep,c
 11704  000F6E  EC27  F023         	call	_Read_b_eep	;wreg free
 11705  000F72  D990               	call	PL6	;call to abstracted procedure
 11706  000F74  D9E4               	call	PL96	;call to abstracted procedure
 11707                           
 11708                           ;main.c: 2181: }
 11709  000F76  D004               	goto	l14371
 11710  000F78                     l14365:
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 2182: else {
 11714                           ;main.c: 2183: channel_pulse_flags &= 0b1011111111;
 11715  000F78  0E02               	movlw	2
 11716  000F7A  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;main.c: 2184: PORTAbits.RA1 = 0;
 11720  000F7C  9280               	bcf	3968,1,c	;volatile
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;main.c: 2185: bOn = 0;
 11724  000F7E  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11725  000F80                     l14371:
 11726                           
 11727                           ;main.c: 2186: }
 11728                           ;main.c: 2188: if ( val & 0x04 ) {
 11729  000F80  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11730  000F82  D611               	goto	l14121
 11731  000F84  D158               	goto	l14493
 11732  000F86                     l14375:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;main.c: 2199: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11736  000F86  EC5B  F023         	call	_Busy_eep	;wreg free
 11737  000F8A  0E71               	movlw	113
 11738  000F8C  D97A               	call	PL2	;call to abstracted procedure
 11739  000F8E  EC2E  F021         	call	_Write_b_eep	;wreg free
 11740                           
 11741                           ;main.c: 2200: rv = Read_b_eep(0x43 + 46 + reg);
 11742  000F92  D987               	call	PL10	;call to abstracted procedure
 11743  000F94  EC27  F023         	call	_Read_b_eep	;wreg free
 11744  000F98  0100               	movlb	0	; () banked
 11745  000F9A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;main.c: 2202: if ( val & 0x01 ) {
 11749  000F9C  A04F               	btfss	vscp_writeAppReg@val,0,c
 11750  000F9E  D012               	goto	l14389
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;main.c: 2204: PORTAbits.RA0 = 0;
 11754  000FA0  9080               	bcf	3968,0,c	;volatile
 11755                           
 11756                           ;main.c: 2205: bOn = 0;
 11757  000FA2  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;main.c: 2207: channel_pulse_flags |= 0b1000000000;
 11761  000FA4  8369               	bsf	(_channel_pulse_flags+1)& (0+255),1,b
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;main.c: 2208: channel_pulse_timer[ 9 ] =
 11765                           ;main.c: 2209: Read_b_eep(0x43 + 46 + 18u) * 256 +
 11766                           ;main.c: 2211: Read_b_eep(0x43 + 46 + 19u);
 11767  000FA6  6A09               	clrf	?_Read_b_eep+1,c
 11768  000FA8  0E84               	movlw	132
 11769  000FAA  6E08               	movwf	?_Read_b_eep,c
 11770  000FAC  EC27  F023         	call	_Read_b_eep	;wreg free
 11771  000FB0  0100               	movlb	0	; () banked
 11772  000FB2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11773  000FB4  6A09               	clrf	?_Read_b_eep+1,c
 11774  000FB6  0E83               	movlw	131
 11775  000FB8  6E08               	movwf	?_Read_b_eep,c
 11776  000FBA  EC27  F023         	call	_Read_b_eep	;wreg free
 11777  000FBE  D96A               	call	PL6	;call to abstracted procedure
 11778  000FC0  D9B7               	call	PL94	;call to abstracted procedure
 11779                           
 11780                           ;main.c: 2213: }
 11781  000FC2  D004               	goto	l14395
 11782  000FC4                     l14389:
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;main.c: 2214: else {
 11786                           ;main.c: 2215: channel_pulse_flags &= 0b0111111111;
 11787  000FC4  0E01               	movlw	1
 11788  000FC6  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;main.c: 2216: PORTAbits.RA0 = 0;
 11792  000FC8  9080               	bcf	3968,0,c	;volatile
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;main.c: 2217: bOn = 0;
 11796  000FCA  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11797  000FCC                     l14395:
 11798                           
 11799                           ;main.c: 2218: }
 11800                           ;main.c: 2220: if ( val & 0x04 ) {
 11801  000FCC  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11802  000FCE  D61D               	goto	l14141
 11803  000FD0  D132               	goto	l14493
 11804  000FD2                     l14401:
 11805                           
 11806                           ; BSR set to: 0
 11807  000FD2  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 11808                           
 11809                           ; Switch size 1, requested type "space"
 11810                           ; Number of cases is 10, Range of values is 24 to 33
 11811                           ; switch strategies available:
 11812                           ; Name         Instructions Cycles
 11813                           ; simple_byte           31    16 (average)
 11814                           ;	Chosen strategy is simple_byte
 11815  000FD4  0A18               	xorlw	24	; case 24
 11816  000FD6  E101 D65B          	bz	l14159
 11817  000FDA  0A01               	xorlw	1	; case 25
 11818  000FDC  E101 D680          	bz	l14183
 11819  000FE0  0A03               	xorlw	3	; case 26
 11820  000FE2  E101 D6BA          	bz	l14207
 11821  000FE6  0A01               	xorlw	1	; case 27
 11822  000FE8  E101 D6DF          	bz	l14231
 11823  000FEC  0A07               	xorlw	7	; case 28
 11824  000FEE  E101 D704          	bz	l14255
 11825  000FF2  0A01               	xorlw	1	; case 29
 11826  000FF4  E101 D729          	bz	l14279
 11827  000FF8  0A03               	xorlw	3	; case 30
 11828  000FFA  E101 D74E          	bz	l14303
 11829  000FFE  0A01               	xorlw	1	; case 31
 11830  001000  E101 D773          	bz	l14327
 11831  001004  0A3F               	xorlw	63	; case 32
 11832  001006  E099               	bz	l14351
 11833  001008  0A01               	xorlw	1	; case 33
 11834  00100A  E0BD               	bz	l14375
 11835  00100C  D114               	goto	l14493
 11836  00100E                     l14403:
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;main.c: 2232: else if ( ( reg >= 34 ) &&
 11840                           ;main.c: 2233: ( reg <= 45 ) ) {
 11841  00100E  0E21               	movlw	33
 11842  001010  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11843  001012  D111               	goto	l14493
 11844                           
 11845                           ; BSR set to: 0
 11846  001014  0E2E               	movlw	46
 11847  001016  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11848  001018  D10E               	goto	l14493
 11849  00101A  EF46  F003         	goto	L35
 11850  00101E                     l14413:
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;main.c: 2241: else if ( 1 == vscp_page_select ) {
 11854  00101E  0452               	decf	_vscp_page_select,w,c
 11855  001020  1053               	iorwf	_vscp_page_select+1,w,c
 11856  001022  E001 D0F3          	bnz	l14481
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;main.c: 2244: if ( (reg >= 0u ) &&
 11860                           ;main.c: 2245: (reg <= 19u ) ) {
 11861  001026  0E14               	movlw	20
 11862  001028  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11863  00102A  D0BB               	goto	l14447
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;main.c: 2248: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11867  00102C  EC5B  F023         	call	_Busy_eep	;wreg free
 11868  001030  0E71               	movlw	113
 11869  001032  D927               	call	PL2	;call to abstracted procedure
 11870  001034  EC2E  F021         	call	_Write_b_eep	;wreg free
 11871                           
 11872                           ;main.c: 2249: rv = Read_b_eep(0x43 + 46 + reg);
 11873  001038  D934               	call	PL10	;call to abstracted procedure
 11874  00103A  EC27  F023         	call	_Read_b_eep	;wreg free
 11875  00103E  0100               	movlb	0	; () banked
 11876  001040  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11877                           
 11878                           ;main.c: 2253: switch ( reg ) {
 11879  001042  D096               	goto	l14445
 11880  001044                     l14423:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;main.c: 2256: channel_pulse_timer[ 0 ] =
 11884                           ;main.c: 2257: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11885                           ;main.c: 2259: Read_b_eep(0x43 + 46 + 1u);
 11886  001044  6A09               	clrf	?_Read_b_eep+1,c
 11887  001046  0E72               	movlw	114
 11888  001048  6E08               	movwf	?_Read_b_eep,c
 11889  00104A  EC27  F023         	call	_Read_b_eep	;wreg free
 11890  00104E  0100               	movlb	0	; () banked
 11891  001050  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11892  001052  6A09               	clrf	?_Read_b_eep+1,c
 11893  001054  0E71               	movlw	113
 11894  001056  6E08               	movwf	?_Read_b_eep,c
 11895  001058  EC27  F023         	call	_Read_b_eep	;wreg free
 11896  00105C  D91B               	call	PL6	;call to abstracted procedure
 11897  00105E  D945               	call	PL82	;call to abstracted procedure
 11898                           
 11899                           ;main.c: 2261: break;
 11900  001060  D0EA               	goto	l14493
 11901  001062                     l14425:
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;main.c: 2264: channel_pulse_timer[ 1 ] =
 11905                           ;main.c: 2265: Read_b_eep(0x43 + 46 + 2u) * 256 +
 11906                           ;main.c: 2267: Read_b_eep(0x43 + 46 + 3u);
 11907  001062  6A09               	clrf	?_Read_b_eep+1,c
 11908  001064  0E74               	movlw	116
 11909  001066  6E08               	movwf	?_Read_b_eep,c
 11910  001068  EC27  F023         	call	_Read_b_eep	;wreg free
 11911  00106C  0100               	movlb	0	; () banked
 11912  00106E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11913  001070  6A09               	clrf	?_Read_b_eep+1,c
 11914  001072  0E73               	movlw	115
 11915  001074  6E08               	movwf	?_Read_b_eep,c
 11916  001076  EC27  F023         	call	_Read_b_eep	;wreg free
 11917  00107A  D90C               	call	PL6	;call to abstracted procedure
 11918  00107C  D928               	call	PL72	;call to abstracted procedure
 11919                           
 11920                           ;main.c: 2269: break;
 11921  00107E  D0DB               	goto	l14493
 11922  001080                     l14427:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;main.c: 2272: channel_pulse_timer[ 2 ] =
 11926                           ;main.c: 2273: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11927                           ;main.c: 2275: Read_b_eep(0x43 + 46 + 5u);
 11928  001080  6A09               	clrf	?_Read_b_eep+1,c
 11929  001082  0E76               	movlw	118
 11930  001084  6E08               	movwf	?_Read_b_eep,c
 11931  001086  EC27  F023         	call	_Read_b_eep	;wreg free
 11932  00108A  0100               	movlb	0	; () banked
 11933  00108C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11934  00108E  6A09               	clrf	?_Read_b_eep+1,c
 11935  001090  0E75               	movlw	117
 11936  001092  6E08               	movwf	?_Read_b_eep,c
 11937  001094  EC27  F023         	call	_Read_b_eep	;wreg free
 11938  001098  D8FD               	call	PL6	;call to abstracted procedure
 11939  00109A  D935               	call	PL86	;call to abstracted procedure
 11940                           
 11941                           ;main.c: 2277: break;
 11942  00109C  D0CC               	goto	l14493
 11943  00109E                     l14429:
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;main.c: 2280: channel_pulse_timer[ 3 ] =
 11947                           ;main.c: 2281: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11948                           ;main.c: 2283: Read_b_eep(0x43 + 46 + 7u);
 11949  00109E  6A09               	clrf	?_Read_b_eep+1,c
 11950  0010A0  0E78               	movlw	120
 11951  0010A2  6E08               	movwf	?_Read_b_eep,c
 11952  0010A4  EC27  F023         	call	_Read_b_eep	;wreg free
 11953  0010A8  0100               	movlb	0	; () banked
 11954  0010AA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11955  0010AC  6A09               	clrf	?_Read_b_eep+1,c
 11956  0010AE  0E77               	movlw	119
 11957  0010B0  6E08               	movwf	?_Read_b_eep,c
 11958  0010B2  EC27  F023         	call	_Read_b_eep	;wreg free
 11959  0010B6  D8EE               	call	PL6	;call to abstracted procedure
 11960  0010B8  D911               	call	PL74	;call to abstracted procedure
 11961                           
 11962                           ;main.c: 2285: break;
 11963  0010BA  D0BD               	goto	l14493
 11964  0010BC                     l14431:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;main.c: 2288: channel_pulse_timer[ 4 ] =
 11968                           ;main.c: 2289: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11969                           ;main.c: 2291: Read_b_eep(0x43 + 46 + 9u);
 11970  0010BC  6A09               	clrf	?_Read_b_eep+1,c
 11971  0010BE  0E7A               	movlw	122
 11972  0010C0  6E08               	movwf	?_Read_b_eep,c
 11973  0010C2  EC27  F023         	call	_Read_b_eep	;wreg free
 11974  0010C6  0100               	movlb	0	; () banked
 11975  0010C8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11976  0010CA  6A09               	clrf	?_Read_b_eep+1,c
 11977  0010CC  0E79               	movlw	121
 11978  0010CE  6E08               	movwf	?_Read_b_eep,c
 11979  0010D0  EC27  F023         	call	_Read_b_eep	;wreg free
 11980  0010D4  D8DF               	call	PL6	;call to abstracted procedure
 11981  0010D6  D910               	call	PL84	;call to abstracted procedure
 11982                           
 11983                           ;main.c: 2293: break;
 11984  0010D8  D0AE               	goto	l14493
 11985  0010DA                     l14433:
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;main.c: 2296: channel_pulse_timer[ 5 ] =
 11989                           ;main.c: 2297: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11990                           ;main.c: 2299: Read_b_eep(0x43 + 46 + 11u);
 11991  0010DA  6A09               	clrf	?_Read_b_eep+1,c
 11992  0010DC  0E7C               	movlw	124
 11993  0010DE  6E08               	movwf	?_Read_b_eep,c
 11994  0010E0  EC27  F023         	call	_Read_b_eep	;wreg free
 11995  0010E4  0100               	movlb	0	; () banked
 11996  0010E6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11997  0010E8  6A09               	clrf	?_Read_b_eep+1,c
 11998  0010EA  0E7B               	movlw	123
 11999  0010EC  6E08               	movwf	?_Read_b_eep,c
 12000  0010EE  EC27  F023         	call	_Read_b_eep	;wreg free
 12001  0010F2  D8D0               	call	PL6	;call to abstracted procedure
 12002  0010F4  D916               	call	PL90	;call to abstracted procedure
 12003                           
 12004                           ;main.c: 2301: break;
 12005  0010F6  D09F               	goto	l14493
 12006  0010F8                     l14435:
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;main.c: 2304: channel_pulse_timer[ 6 ] =
 12010                           ;main.c: 2305: Read_b_eep(0x43 + 46 + 12u) * 256 +
 12011                           ;main.c: 2307: Read_b_eep(0x43 + 46 + 13u);
 12012  0010F8  6A09               	clrf	?_Read_b_eep+1,c
 12013  0010FA  0E7E               	movlw	126
 12014  0010FC  6E08               	movwf	?_Read_b_eep,c
 12015  0010FE  EC27  F023         	call	_Read_b_eep	;wreg free
 12016  001102  0100               	movlb	0	; () banked
 12017  001104  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12018  001106  6A09               	clrf	?_Read_b_eep+1,c
 12019  001108  0E7D               	movlw	125
 12020  00110A  6E08               	movwf	?_Read_b_eep,c
 12021  00110C  EC27  F023         	call	_Read_b_eep	;wreg free
 12022  001110  D8C1               	call	PL6	;call to abstracted procedure
 12023  001112  D8D6               	call	PL70	;call to abstracted procedure
 12024                           
 12025                           ;main.c: 2309: break;
 12026  001114  D090               	goto	l14493
 12027  001116                     l14437:
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;main.c: 2312: channel_pulse_timer[ 7 ] =
 12031                           ;main.c: 2313: Read_b_eep(0x43 + 46 + 14u) * 256 +
 12032                           ;main.c: 2315: Read_b_eep(0x43 + 46 + 15u);
 12033  001116  6A09               	clrf	?_Read_b_eep+1,c
 12034  001118  0E80               	movlw	128
 12035  00111A  6E08               	movwf	?_Read_b_eep,c
 12036  00111C  EC27  F023         	call	_Read_b_eep	;wreg free
 12037  001120  0100               	movlb	0	; () banked
 12038  001122  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12039  001124  6A09               	clrf	?_Read_b_eep+1,c
 12040  001126  0E7F               	movlw	127
 12041  001128  6E08               	movwf	?_Read_b_eep,c
 12042  00112A  EC27  F023         	call	_Read_b_eep	;wreg free
 12043  00112E  D8B2               	call	PL6	;call to abstracted procedure
 12044  001130  D8F1               	call	PL88	;call to abstracted procedure
 12045                           
 12046                           ;main.c: 2317: break;
 12047  001132  D081               	goto	l14493
 12048  001134                     l14439:
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;main.c: 2320: channel_pulse_timer[ 8 ] =
 12052                           ;main.c: 2321: Read_b_eep(0x43 + 46 + 16u) * 256 +
 12053                           ;main.c: 2323: Read_b_eep(0x43 + 46 + 17u);
 12054  001134  6A09               	clrf	?_Read_b_eep+1,c
 12055  001136  0E82               	movlw	130
 12056  001138  6E08               	movwf	?_Read_b_eep,c
 12057  00113A  EC27  F023         	call	_Read_b_eep	;wreg free
 12058  00113E  0100               	movlb	0	; () banked
 12059  001140  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12060  001142  6A09               	clrf	?_Read_b_eep+1,c
 12061  001144  0E81               	movlw	129
 12062  001146  6E08               	movwf	?_Read_b_eep,c
 12063  001148  EC27  F023         	call	_Read_b_eep	;wreg free
 12064  00114C  D8A3               	call	PL6	;call to abstracted procedure
 12065  00114E  D8F7               	call	PL96	;call to abstracted procedure
 12066                           
 12067                           ;main.c: 2325: break;
 12068  001150  D072               	goto	l14493
 12069  001152                     l14441:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;main.c: 2328: channel_pulse_timer[ 9 ] =
 12073                           ;main.c: 2329: Read_b_eep(0x43 + 46 + 18u) * 256 +
 12074                           ;main.c: 2331: Read_b_eep(0x43 + 46 + 19u);
 12075  001152  6A09               	clrf	?_Read_b_eep+1,c
 12076  001154  0E84               	movlw	132
 12077  001156  6E08               	movwf	?_Read_b_eep,c
 12078  001158  EC27  F023         	call	_Read_b_eep	;wreg free
 12079  00115C  0100               	movlb	0	; () banked
 12080  00115E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12081  001160  6A09               	clrf	?_Read_b_eep+1,c
 12082  001162  0E83               	movlw	131
 12083  001164  6E08               	movwf	?_Read_b_eep,c
 12084  001166  EC27  F023         	call	_Read_b_eep	;wreg free
 12085  00116A  D894               	call	PL6	;call to abstracted procedure
 12086  00116C  D8E1               	call	PL94	;call to abstracted procedure
 12087                           
 12088                           ;main.c: 2333: break;
 12089  00116E  D063               	goto	l14493
 12090  001170                     l14445:
 12091                           
 12092                           ; BSR set to: 0
 12093  001170  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12094                           
 12095                           ; Switch size 1, requested type "space"
 12096                           ; Number of cases is 10, Range of values is 1 to 19
 12097                           ; switch strategies available:
 12098                           ; Name         Instructions Cycles
 12099                           ; simple_byte           31    16 (average)
 12100                           ;	Chosen strategy is simple_byte
 12101  001172  0A01               	xorlw	1	; case 1
 12102  001174  E101 D766          	bz	l14423
 12103  001178  0A02               	xorlw	2	; case 3
 12104  00117A  E101 D772          	bz	l14425
 12105  00117E  0A06               	xorlw	6	; case 5
 12106  001180  E101 D77E          	bz	l14427
 12107  001184  0A02               	xorlw	2	; case 7
 12108  001186  E08B               	bz	l14429
 12109  001188  0A0E               	xorlw	14	; case 9
 12110  00118A  E098               	bz	l14431
 12111  00118C  0A02               	xorlw	2	; case 11
 12112  00118E  E0A5               	bz	l14433
 12113  001190  0A06               	xorlw	6	; case 13
 12114  001192  E0B2               	bz	l14435
 12115  001194  0A02               	xorlw	2	; case 15
 12116  001196  E0BF               	bz	l14437
 12117  001198  0A1E               	xorlw	30	; case 17
 12118  00119A  E0CC               	bz	l14439
 12119  00119C  0A02               	xorlw	2	; case 19
 12120  00119E  E0D9               	bz	l14441
 12121  0011A0  D04A               	goto	l14493
 12122  0011A2                     l14447:
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;main.c: 2341: else if ( ( reg >= 20u ) &&
 12126                           ;main.c: 2342: ( reg <= 39u ) ) {
 12127  0011A2  0E13               	movlw	19
 12128  0011A4  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 12129  0011A6  D047               	goto	l14493
 12130                           
 12131                           ; BSR set to: 0
 12132  0011A8  0E28               	movlw	40
 12133  0011AA  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12134  0011AC  D044               	goto	l14493
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;main.c: 2345: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 12138  0011AE  EC5B  F023         	call	_Busy_eep	;wreg free
 12139  0011B2  0E71               	movlw	113
 12140  0011B4  D866               	call	PL2	;call to abstracted procedure
 12141  0011B6  EC2E  F021         	call	_Write_b_eep	;wreg free
 12142                           
 12143                           ;main.c: 2346: rv = Read_b_eep(0x43 + 46 + reg);
 12144  0011BA  D873               	call	PL10	;call to abstracted procedure
 12145  0011BC  EC27  F023         	call	_Read_b_eep	;wreg free
 12146  0011C0  0100               	movlb	0	; () banked
 12147  0011C2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12148                           
 12149                           ; BSR set to: 0
 12150                           
 12151                           ;main.c: 2348: switch ( reg ) {
 12152  0011C4  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12153                           
 12154                           ; Switch size 1, requested type "space"
 12155                           ; Number of cases is 10, Range of values is 21 to 39
 12156                           ; switch strategies available:
 12157                           ; Name         Instructions Cycles
 12158                           ; simple_byte           31    16 (average)
 12159                           ;	Chosen strategy is simple_byte
 12160  0011C6  0A15               	xorlw	21	; case 21
 12161  0011C8  E102 EF3F  F004    	bz	l13961
 12162  0011CE  0A02               	xorlw	2	; case 23
 12163  0011D0  E102 EF76  F004    	bz	l13981
 12164  0011D6  0A0E               	xorlw	14	; case 25
 12165  0011D8  E102 EFA1  F004    	bz	l14001
 12166  0011DE  0A02               	xorlw	2	; case 27
 12167  0011E0  E102 EFD6  F004    	bz	l14021
 12168  0011E6  0A06               	xorlw	6	; case 29
 12169  0011E8  E101 D415          	bz	l14041
 12170  0011EC  0A02               	xorlw	2	; case 31
 12171  0011EE  E101 D444          	bz	l14061
 12172  0011F2  0A3E               	xorlw	62	; case 33
 12173  0011F4  E101 D473          	bz	l14081
 12174  0011F8  0A02               	xorlw	2	; case 35
 12175  0011FA  E101 D4A2          	bz	l14101
 12176  0011FE  0A06               	xorlw	6	; case 37
 12177  001200  E101 D4D1          	bz	l14121
 12178  001204  0A02               	xorlw	2	; case 39
 12179  001206  E101 D500          	bz	l14141
 12180  00120A  D015               	goto	l14493
 12181  00120C                     l14481:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;main.c: 2439: else if ( 2 == vscp_page_select ) {
 12185  00120C  5052               	movf	_vscp_page_select,w,c
 12186  00120E  0A02               	xorlw	2
 12187  001210  1053               	iorwf	_vscp_page_select+1,w,c
 12188  001212  E111               	bnz	l14493
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;main.c: 2441: if ( reg < (0 + 8 * 8) ) {
 12192  001214  0E40               	movlw	64
 12193  001216  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12194  001218  D00E               	goto	l14493
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x43 + 0 + 46 + 40u + reg,val));
 12198  00121A  EC5B  F023         	call	_Busy_eep	;wreg free
 12199  00121E  0E99               	movlw	153
 12200  001220  D830               	call	PL2	;call to abstracted procedure
 12201  001222  EC2E  F021         	call	_Write_b_eep	;wreg free
 12202                           
 12203                           ;main.c: 2447: calculateSetFilterMask();
 12204  001226  ECF4  F011         	call	_calculateSetFilterMask	;wreg free
 12205                           
 12206                           ;main.c: 2448: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 12207  00122A  0E99               	movlw	153
 12208  00122C  D842               	call	PL12	;call to abstracted procedure
 12209  00122E  EC27  F023         	call	_Read_b_eep	;wreg free
 12210  001232                     L32:
 12211  001232  0100               	movlb	0	; () banked
 12212  001234                     L33:
 12213  001234  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12214  001236                     l14493:
 12215                           
 12216                           ;main.c: 2453: }
 12217                           ;main.c: 2455: }
 12218                           ;main.c: 2461: if ( bInfoEvent ) {
 12219  001236  0100               	movlb	0	; () banked
 12220  001238  51DA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
 12221  00123A  E021               	bz	l14505
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;main.c: 2463: unsigned char val;
 12225                           ;main.c: 2464: val = Read_b_eep(0x43 + 14 + ( reg - 14 ));
 12226  00123C  0E43               	movlw	67
 12227  00123E  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12228  001240  6E08               	movwf	?_Read_b_eep,c
 12229  001242  6A09               	clrf	?_Read_b_eep+1,c
 12230  001244  0E00               	movlw	0
 12231  001246  2209               	addwfc	?_Read_b_eep+1,f,c
 12232  001248  EC27  F023         	call	_Read_b_eep	;wreg free
 12233  00124C  0100               	movlb	0	; () banked
 12234  00124E  6FD9               	movwf	vscp_writeAppReg@val_1273& (0+255),b
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;main.c: 2468: if ( bOn ) {
 12238  001250  51DC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
 12239  001252  E00B               	bz	l851
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;main.c: 2470: if ( val & 0x08 ) {
 12243  001254  A7D9               	btfss	vscp_writeAppReg@val_1273& (0+255),3,b
 12244  001256  D013               	goto	l14505
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;main.c: 2471: SendInformationEvent( reg - 14,
 12248                           ;main.c: 2472: 20,
 12249                           ;main.c: 2473: 3 );
 12250  001258  0E14               	movlw	20
 12251  00125A  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12252  00125C  0E03               	movlw	3
 12253  00125E  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12254  001260  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12255  001262  0FF2               	addlw	242
 12256  001264  EC5A  F020         	call	_SendInformationEvent
 12257  001268  D00A               	goto	l14505
 12258  00126A                     l851:
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 2477: else {
 12262                           ;main.c: 2479: if ( val & 0x10 ) {
 12263  00126A  A9D9               	btfss	vscp_writeAppReg@val_1273& (0+255),4,b
 12264  00126C  D008               	goto	l14505
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;main.c: 2480: SendInformationEvent( reg - 14,
 12268                           ;main.c: 2481: 20,
 12269                           ;main.c: 2482: 4 );
 12270  00126E  0E14               	movlw	20
 12271  001270  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12272  001272  0E04               	movlw	4
 12273  001274  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12274  001276  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12275  001278  0FF2               	addlw	242
 12276  00127A  EC5A  F020         	call	_SendInformationEvent
 12277  00127E                     l14505:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;main.c: 2483: }
 12281                           ;main.c: 2485: }
 12282                           ;main.c: 2486: }
 12283                           ;main.c: 2488: return rv;
 12284  00127E  51DB               	movf	vscp_writeAppReg@rv& (0+255),w,b
 12285                           
 12286                           ; BSR set to: 0
 12287  001280  0012               	return	
 12288  001282                     __end_of_vscp_writeAppReg:
 12289                           	opt stack 0
 12290  001282                     PL2:
 12291                           	opt stack 20
 12292  001282  0100               	movlb	0	; () banked
 12293  001284  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12294  001286  6E08               	movwf	?_Write_b_eep,c
 12295  001288  6A09               	clrf	?_Write_b_eep+1,c
 12296  00128A  0E00               	movlw	0
 12297  00128C  2209               	addwfc	?_Write_b_eep+1,f,c
 12298  00128E  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 12299  001292  0C00               	retlw	0
 12300  001294                     __end_ofPL2:
 12301                           	opt stack 0
 12302  001294                     PL6:
 12303                           	opt stack 20
 12304  001294  0100               	movlb	0	; () banked
 12305  001296  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 12306  001298  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 12307  00129A  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 12308  00129C  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 12309  00129E  0101               	movlb	1	; () banked
 12310  0012A0  0012               	return	
 12311  0012A2                     __end_ofPL6:
 12312                           	opt stack 0
 12313  0012A2                     PL10:
 12314                           	opt stack 20
 12315  0012A2  0E71               	movlw	113
 12316  0012A4  0100               	movlb	0	; () banked
 12317  0012A6  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12318  0012A8  6E08               	movwf	?_Read_b_eep,c
 12319  0012AA  6A09               	clrf	?_Read_b_eep+1,c
 12320  0012AC  0E00               	movlw	0
 12321  0012AE  2209               	addwfc	?_Read_b_eep+1,f,c
 12322  0012B0  0C00               	retlw	0
 12323  0012B2                     __end_ofPL10:
 12324                           	opt stack 0
 12325  0012B2                     PL12:
 12326                           	opt stack 20
 12327  0012B2  0100               	movlb	0	; () banked
 12328  0012B4  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12329  0012B6  6E08               	movwf	?_Read_b_eep,c
 12330  0012B8  6A09               	clrf	?_Read_b_eep+1,c
 12331  0012BA  0E00               	movlw	0
 12332  0012BC  2209               	addwfc	?_Read_b_eep+1,f,c
 12333  0012BE  0C00               	retlw	0
 12334  0012C0                     __end_ofPL12:
 12335                           	opt stack 0
 12336  0012C0                     PL70:
 12337                           	opt stack 20
 12338  0012C0  6F0C               	movwf	(_channel_pulse_timer+12)& (0+255),b
 12339  0012C2  0100               	movlb	0	; () banked
 12340  0012C4  0E00               	movlw	0
 12341  0012C6  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12342  0012C8  0101               	movlb	1	; () banked
 12343  0012CA  6F0D               	movwf	(_channel_pulse_timer+13)& (0+255),b
 12344  0012CC  0012               	return	
 12345  0012CE                     __end_ofPL70:
 12346                           	opt stack 0
 12347  0012CE                     PL72:
 12348                           	opt stack 20
 12349  0012CE  6F02               	movwf	(_channel_pulse_timer+2)& (0+255),b
 12350  0012D0  0100               	movlb	0	; () banked
 12351  0012D2  0E00               	movlw	0
 12352  0012D4  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12353  0012D6  0101               	movlb	1	; () banked
 12354  0012D8  6F03               	movwf	(_channel_pulse_timer+3)& (0+255),b
 12355  0012DA  0012               	return	
 12356  0012DC                     __end_ofPL72:
 12357                           	opt stack 0
 12358  0012DC                     PL74:
 12359                           	opt stack 20
 12360  0012DC  6F06               	movwf	(_channel_pulse_timer+6)& (0+255),b
 12361  0012DE  0100               	movlb	0	; () banked
 12362  0012E0  0E00               	movlw	0
 12363  0012E2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12364  0012E4  0101               	movlb	1	; () banked
 12365  0012E6  6F07               	movwf	(_channel_pulse_timer+7)& (0+255),b
 12366  0012E8  0012               	return	
 12367  0012EA                     __end_ofPL74:
 12368                           	opt stack 0
 12369  0012EA                     PL82:
 12370                           	opt stack 20
 12371  0012EA  6F00               	movwf	_channel_pulse_timer& (0+255),b
 12372  0012EC  0100               	movlb	0	; () banked
 12373  0012EE  0E00               	movlw	0
 12374  0012F0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12375  0012F2  0101               	movlb	1	; () banked
 12376  0012F4  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
 12377  0012F6  0012               	return	
 12378  0012F8                     __end_ofPL82:
 12379                           	opt stack 0
 12380  0012F8                     PL84:
 12381                           	opt stack 20
 12382  0012F8  6F08               	movwf	(_channel_pulse_timer+8)& (0+255),b
 12383  0012FA  0100               	movlb	0	; () banked
 12384  0012FC  0E00               	movlw	0
 12385  0012FE  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12386  001300  0101               	movlb	1	; () banked
 12387  001302  6F09               	movwf	(_channel_pulse_timer+9)& (0+255),b
 12388  001304  0012               	return	
 12389  001306                     __end_ofPL84:
 12390                           	opt stack 0
 12391  001306                     PL86:
 12392                           	opt stack 20
 12393  001306  6F04               	movwf	(_channel_pulse_timer+4)& (0+255),b
 12394  001308  0100               	movlb	0	; () banked
 12395  00130A  0E00               	movlw	0
 12396  00130C  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12397  00130E  0101               	movlb	1	; () banked
 12398  001310  6F05               	movwf	(_channel_pulse_timer+5)& (0+255),b
 12399  001312  0012               	return	
 12400  001314                     __end_ofPL86:
 12401                           	opt stack 0
 12402  001314                     PL88:
 12403                           	opt stack 20
 12404  001314  6F0E               	movwf	(_channel_pulse_timer+14)& (0+255),b
 12405  001316  0100               	movlb	0	; () banked
 12406  001318  0E00               	movlw	0
 12407  00131A  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12408  00131C  0101               	movlb	1	; () banked
 12409  00131E  6F0F               	movwf	(_channel_pulse_timer+15)& (0+255),b
 12410  001320  0012               	return	
 12411  001322                     __end_ofPL88:
 12412                           	opt stack 0
 12413  001322                     PL90:
 12414                           	opt stack 20
 12415  001322  6F0A               	movwf	(_channel_pulse_timer+10)& (0+255),b
 12416  001324  0100               	movlb	0	; () banked
 12417  001326  0E00               	movlw	0
 12418  001328  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12419  00132A  0101               	movlb	1	; () banked
 12420  00132C  6F0B               	movwf	(_channel_pulse_timer+11)& (0+255),b
 12421  00132E  0012               	return	
 12422  001330                     __end_ofPL90:
 12423                           	opt stack 0
 12424  001330                     PL94:
 12425                           	opt stack 20
 12426  001330  6F12               	movwf	(_channel_pulse_timer+18)& (0+255),b
 12427  001332  0100               	movlb	0	; () banked
 12428  001334  0E00               	movlw	0
 12429  001336  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12430  001338  0101               	movlb	1	; () banked
 12431  00133A  6F13               	movwf	(_channel_pulse_timer+19)& (0+255),b
 12432  00133C  0012               	return	
 12433  00133E                     __end_ofPL94:
 12434                           	opt stack 0
 12435  00133E                     PL96:
 12436                           	opt stack 20
 12437  00133E  6F10               	movwf	(_channel_pulse_timer+16)& (0+255),b
 12438  001340  0100               	movlb	0	; () banked
 12439  001342  0E00               	movlw	0
 12440  001344  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12441  001346  0101               	movlb	1	; () banked
 12442  001348  6F11               	movwf	(_channel_pulse_timer+17)& (0+255),b
 12443  00134A  0012               	return	
 12444  00134C                     __end_ofPL96:
 12445                           	opt stack 0
 12446                           tblptru	equ	0xFF8
 12447                           tblptrh	equ	0xFF7
 12448                           tblptrl	equ	0xFF6
 12449                           tablat	equ	0xFF5
 12450                           prodh	equ	0xFF4
 12451                           prodl	equ	0xFF3
 12452                           intcon	equ	0xFF2
 12453                           intcon2	equ	0xFF1
 12454                           postinc0	equ	0xFEE
 12455                           wreg	equ	0xFE8
 12456                           indf1	equ	0xFE7
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           plusw2	equ	0xFDB
 12463                           fsr2h	equ	0xFDA
 12464                           fsr2l	equ	0xFD9
 12465                           status	equ	0xFD8
 12466                           
 12467 ;; *************** function _calculateSetFilterMask *****************
 12468 ;; Defined at:
 12469 ;;		line 3633 in file "../main.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;		None
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  rowfilter       4   61[COMRAM] unsigned long 
 12474 ;;  filter          4   57[COMRAM] unsigned long 
 12475 ;;  mask            4   53[COMRAM] unsigned long 
 12476 ;;  rowmask         4   48[COMRAM] unsigned long 
 12477 ;;  i               1   66[COMRAM] unsigned char 
 12478 ;;  j               1   65[COMRAM] unsigned char 
 12479 ;;  lastOID         1   52[COMRAM] unsigned char 
 12480 ;; Return value:  Size  Location     Type
 12481 ;;		None               void
 12482 ;; Registers used:
 12483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12489 ;;      Params:         0       0       0       0       0       0       0
 12490 ;;      Locals:        19       0       0       0       0       0       0
 12491 ;;      Temps:         31       0       0       0       0       0       0
 12492 ;;      Totals:        50       0       0       0       0       0       0
 12493 ;;Total ram usage:       50 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    3
 12496 ;; This function calls:
 12497 ;;		_ECANSetOperationMode
 12498 ;;		__CANIDToRegs
 12499 ;;		_Read_b_eep
 12500 ;; This function is called by:
 12501 ;;		_vscp_writeAppReg
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           	psect	text28
 12506  0023E8                     __ptext28:
 12507                           	opt stack 0
 12508  0023E8                     _calculateSetFilterMask:
 12509                           	opt stack 23
 12510                           
 12511                           ;main.c: 3634: uint8_t i,j;
 12512                           ;main.c: 3635: uint8_t lastOID;
 12513                           ;main.c: 3636: uint32_t rowmask;
 12514                           ;main.c: 3637: uint32_t rowfilter;
 12515                           ;main.c: 3640: uint32_t mask = 0xffffffff;
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;incstack = 0
 12519                           ;incstack = 0
 12520  0023E8  6836               	setf	calculateSetFilterMask@mask,c
 12521  0023EA  6837               	setf	calculateSetFilterMask@mask+1,c
 12522  0023EC  6838               	setf	calculateSetFilterMask@mask+2,c
 12523  0023EE  6839               	setf	calculateSetFilterMask@mask+3,c
 12524                           
 12525                           ;main.c: 3641: uint32_t filter = 0;
 12526  0023F0  6A3A               	clrf	calculateSetFilterMask@filter,c
 12527  0023F2  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 12528  0023F4  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 12529  0023F6  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 12530                           
 12531                           ;main.c: 3644: for ( i=0; i < 8; i++ ) {
 12532  0023F8  6A43               	clrf	calculateSetFilterMask@i,c
 12533  0023FA                     l14515:
 12534                           
 12535                           ;main.c: 3647: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 12536  0023FA  5043               	movf	calculateSetFilterMask@i,w,c
 12537  0023FC  D972               	call	PL22	;call to abstracted procedure
 12538  0023FE  0E44               	movlw	68
 12539  002400  2412               	addwf	??_calculateSetFilterMask,w,c
 12540  002402  6E08               	movwf	?_Read_b_eep,c
 12541  002404  0E00               	movlw	0
 12542  002406  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12543  002408  6E09               	movwf	?_Read_b_eep+1,c
 12544  00240A  EC27  F023         	call	_Read_b_eep	;wreg free
 12545  00240E  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12546  002410  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 12547  002412  D11A               	goto	l14559
 12548                           
 12549                           ;main.c: 3656: rowmask =
 12550                           ;main.c: 3658: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 12551                           ;main.c: 3660: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 12552                           ;main.c: 3662: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 12553                           ;main.c: 3664: 0xff;
 12554  002414  5043               	movf	calculateSetFilterMask@i,w,c
 12555  002416  D965               	call	PL22	;call to abstracted procedure
 12556  002418  0E47               	movlw	71
 12557  00241A  2412               	addwf	??_calculateSetFilterMask,w,c
 12558  00241C  6E08               	movwf	?_Read_b_eep,c
 12559  00241E  0E00               	movlw	0
 12560  002420  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12561  002422  6E09               	movwf	?_Read_b_eep+1,c
 12562  002424  EC27  F023         	call	_Read_b_eep	;wreg free
 12563  002428  D968               	call	PL24	;call to abstracted procedure
 12564  00242A  0E45               	movlw	69
 12565  00242C  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12566  00242E  6E08               	movwf	?_Read_b_eep,c
 12567  002430  0E00               	movlw	0
 12568  002432  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12569  002434  6E09               	movwf	?_Read_b_eep+1,c
 12570  002436  EC27  F023         	call	_Read_b_eep	;wreg free
 12571  00243A  D934               	call	PL20	;call to abstracted procedure
 12572  00243C  EC27  F023         	call	_Read_b_eep	;wreg free
 12573  002440  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12574  002442  0E02               	movlw	2
 12575  002444  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12576  002446  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12577  00244A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12578  00244C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12579  00244E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12580  002450  0E17               	movlw	23
 12581  002452                     u19295:
 12582  002452  90D8               	bcf	status,0,c
 12583  002454  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 12584  002456  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 12585  002458  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 12586  00245A  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 12587  00245C  2EE8               	decfsz	wreg,f,c
 12588  00245E  D7F9               	goto	u19295
 12589  002460  501C               	movf	??_calculateSetFilterMask+10,w,c
 12590  002462  D965               	call	PL28	;call to abstracted procedure
 12591  002464  0EFF               	movlw	255
 12592  002466  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12593  002468  6E31               	movwf	calculateSetFilterMask@rowmask,c
 12594  00246A  502C               	movf	??_calculateSetFilterMask+26,w,c
 12595  00246C  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 12596  00246E  502D               	movf	??_calculateSetFilterMask+27,w,c
 12597  002470  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 12598  002472  502E               	movf	??_calculateSetFilterMask+28,w,c
 12599  002474  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 12600                           
 12601                           ;main.c: 3665: ;
 12602                           ;main.c: 3670: rowfilter =
 12603                           ;main.c: 3672: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 12604                           ;main.c: 3674: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 12605                           ;main.c: 3676: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 12606                           ;main.c: 3679: Read_b_eep(0x43 + 8*i);
 12607  002476  5043               	movf	calculateSetFilterMask@i,w,c
 12608  002478  D934               	call	PL22	;call to abstracted procedure
 12609  00247A  0E48               	movlw	72
 12610  00247C  2412               	addwf	??_calculateSetFilterMask,w,c
 12611  00247E  6E08               	movwf	?_Read_b_eep,c
 12612  002480  0E00               	movlw	0
 12613  002482  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12614  002484  6E09               	movwf	?_Read_b_eep+1,c
 12615  002486  EC27  F023         	call	_Read_b_eep	;wreg free
 12616  00248A  D937               	call	PL24	;call to abstracted procedure
 12617  00248C  0E46               	movlw	70
 12618  00248E  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12619  002490  6E08               	movwf	?_Read_b_eep,c
 12620  002492  0E00               	movlw	0
 12621  002494  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12622  002496  6E09               	movwf	?_Read_b_eep+1,c
 12623  002498  EC27  F023         	call	_Read_b_eep	;wreg free
 12624  00249C  D903               	call	PL20	;call to abstracted procedure
 12625  00249E  EC27  F023         	call	_Read_b_eep	;wreg free
 12626  0024A2  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12627  0024A4  0E01               	movlw	1
 12628  0024A6  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12629  0024A8  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12630  0024AC  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12631  0024AE  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12632  0024B0  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12633  0024B2  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 12634  0024B6  6A25               	clrf	??_calculateSetFilterMask+19,c
 12635  0024B8  6A24               	clrf	??_calculateSetFilterMask+18,c
 12636  0024BA  6A23               	clrf	??_calculateSetFilterMask+17,c
 12637  0024BC  501C               	movf	??_calculateSetFilterMask+10,w,c
 12638  0024BE  D937               	call	PL28	;call to abstracted procedure
 12639  0024C0  5043               	movf	calculateSetFilterMask@i,w,c
 12640  0024C2  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 12641  0024C4  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 12642  0024C6  90D8               	bcf	status,0,c
 12643  0024C8  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12644  0024CA  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12645  0024CC  90D8               	bcf	status,0,c
 12646  0024CE  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12647  0024D0  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12648  0024D2  90D8               	bcf	status,0,c
 12649  0024D4  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12650  0024D6  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12651  0024D8  0E43               	movlw	67
 12652  0024DA  242F               	addwf	??_calculateSetFilterMask+29,w,c
 12653  0024DC  6E08               	movwf	?_Read_b_eep,c
 12654  0024DE  0E00               	movlw	0
 12655  0024E0  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 12656  0024E2  6E09               	movwf	?_Read_b_eep+1,c
 12657  0024E4  EC27  F023         	call	_Read_b_eep	;wreg free
 12658  0024E8  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12659  0024EA  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 12660  0024EC  502C               	movf	??_calculateSetFilterMask+26,w,c
 12661  0024EE  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 12662  0024F0  502D               	movf	??_calculateSetFilterMask+27,w,c
 12663  0024F2  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 12664  0024F4  502E               	movf	??_calculateSetFilterMask+28,w,c
 12665  0024F6  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 12666                           
 12667                           ;main.c: 3681: if ( 0 == i ) filter = rowfilter;
 12668  0024F8  6643               	tstfsz	calculateSetFilterMask@i,c
 12669  0024FA  D008               	goto	l14523
 12670  0024FC  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 12671  002500  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 12672  002504  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 12673  002508  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 12674  00250C                     l14523:
 12675                           
 12676                           ;main.c: 3685: mask &= rowmask;
 12677  00250C  5031               	movf	calculateSetFilterMask@rowmask,w,c
 12678  00250E  1636               	andwf	calculateSetFilterMask@mask,f,c
 12679  002510  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 12680  002512  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 12681  002514  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 12682  002516  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 12683  002518  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 12684  00251A  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 12685                           
 12686                           ;main.c: 3690: for ( j=0; j<32; j++ ) {
 12687  00251C  6A42               	clrf	calculateSetFilterMask@j,c
 12688  00251E                     l14531:
 12689                           
 12690                           ;main.c: 3692: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 12691  00251E  5042               	movf	calculateSetFilterMask@j,w,c
 12692  002520  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 12693  002524  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 12694  002528  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 12695  00252C  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 12696  002530  2AE8               	incf	wreg,f,c
 12697  002532  D005               	goto	u19310
 12698  002534                     u19315:
 12699  002534  90D8               	bcf	status,0,c
 12700  002536  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12701  002538  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 12702  00253A  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 12703  00253C  3212               	rrcf	??_calculateSetFilterMask,f,c
 12704  00253E                     u19310:
 12705  00253E  2EE8               	decfsz	wreg,f,c
 12706  002540  D7F9               	goto	u19315
 12707  002542  0E01               	movlw	1
 12708  002544  1612               	andwf	??_calculateSetFilterMask,f,c
 12709  002546  5042               	movf	calculateSetFilterMask@j,w,c
 12710  002548  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 12711  00254C  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 12712  002550  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 12713  002554  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 12714  002558  2AE8               	incf	wreg,f,c
 12715  00255A  D005               	goto	u19320
 12716  00255C                     u19325:
 12717  00255C  90D8               	bcf	status,0,c
 12718  00255E  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 12719  002560  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 12720  002562  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12721  002564  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 12722  002566                     u19320:
 12723  002566  2EE8               	decfsz	wreg,f,c
 12724  002568  D7F9               	goto	u19325
 12725  00256A  5016               	movf	??_calculateSetFilterMask+4,w,c
 12726  00256C  0B01               	andlw	1
 12727  00256E  1812               	xorwf	??_calculateSetFilterMask,w,c
 12728  002570  E010               	bz	l14535
 12729                           
 12730                           ;main.c: 3693: mask &= ~(1<<j);
 12731  002572  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 12732  002576  D8FD               	call	PL106	;call to abstracted procedure
 12733  002578  D001               	goto	u19344
 12734  00257A                     u19345:
 12735  00257A  D900               	call	PL110	;call to abstracted procedure
 12736  00257C                     u19344:
 12737  00257C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12738  00257E  D7FD               	goto	u19345
 12739  002580  1C13               	comf	??_calculateSetFilterMask+1,w,c
 12740  002582  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12741  002584  1C14               	comf	??_calculateSetFilterMask+2,w,c
 12742  002586  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 12743  002588  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12744  00258A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12745  00258C  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 12746  00258E  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 12747  002590  D8E6               	call	PL60	;call to abstracted procedure
 12748  002592                     l14535:
 12749  002592  2A42               	incf	calculateSetFilterMask@j,f,c
 12750  002594  0E1F               	movlw	31
 12751  002596  6442               	cpfsgt	calculateSetFilterMask@j,c
 12752  002598  D7C2               	goto	l14531
 12753                           
 12754                           ;main.c: 3694: }
 12755                           ;main.c: 3695: }
 12756                           ;main.c: 3701: filter &= rowfilter;
 12757  00259A  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 12758  00259C  163A               	andwf	calculateSetFilterMask@filter,f,c
 12759  00259E  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 12760  0025A0  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 12761  0025A2  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 12762  0025A4  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 12763  0025A6  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 12764  0025A8  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 12765                           
 12766                           ;main.c: 3709: }
 12767                           ;main.c: 3711: if (i) {
 12768                           
 12769                           ;main.c: 3704: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 12770  0025AA  5043               	movf	calculateSetFilterMask@i,w,c
 12771  0025AC  E042               	bz	l14555
 12772                           
 12773                           ;main.c: 3714: for (j = 0; j < 8; j++) {
 12774  0025AE  6A42               	clrf	calculateSetFilterMask@j,c
 12775  0025B0                     l14549:
 12776                           
 12777                           ;main.c: 3715: if ((lastOID >> i & 1)
 12778                           ;main.c: 3716: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 12779  0025B0  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12780  0025B4  5043               	movf	calculateSetFilterMask@i,w,c
 12781  0025B6  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 12782  0025B8  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 12783  0025BA  90D8               	bcf	status,0,c
 12784  0025BC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12785  0025BE  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12786  0025C0  90D8               	bcf	status,0,c
 12787  0025C2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12788  0025C4  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12789  0025C6  90D8               	bcf	status,0,c
 12790  0025C8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12791  0025CA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12792  0025CC  0E43               	movlw	67
 12793  0025CE  2413               	addwf	??_calculateSetFilterMask+1,w,c
 12794  0025D0  6E08               	movwf	?_Read_b_eep,c
 12795  0025D2  0E00               	movlw	0
 12796  0025D4  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 12797  0025D6  6E09               	movwf	?_Read_b_eep+1,c
 12798  0025D8  EC27  F023         	call	_Read_b_eep	;wreg free
 12799  0025DC  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12800  0025DE  2A12               	incf	??_calculateSetFilterMask,f,c
 12801  0025E0  D002               	goto	u19374
 12802  0025E2                     u19375:
 12803  0025E2  90D8               	bcf	status,0,c
 12804  0025E4  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12805  0025E6                     u19374:
 12806  0025E6  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12807  0025E8  D7FC               	goto	u19375
 12808  0025EA  0E01               	movlw	1
 12809  0025EC  1615               	andwf	??_calculateSetFilterMask+3,f,c
 12810  0025EE  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 12811  0025F2  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 12812  0025F6  2A16               	incf	??_calculateSetFilterMask+4,f,c
 12813  0025F8  D002               	goto	u19384
 12814  0025FA                     u19385:
 12815  0025FA  90D8               	bcf	status,0,c
 12816  0025FC  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12817  0025FE                     u19384:
 12818  0025FE  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 12819  002600  D7FC               	goto	u19385
 12820  002602  5017               	movf	??_calculateSetFilterMask+5,w,c
 12821  002604  0B01               	andlw	1
 12822  002606  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 12823  002608  E010               	bz	l14553
 12824                           
 12825                           ;main.c: 3717: mask &= (1 << i);
 12826  00260A  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12827  00260E  D8B1               	call	PL106	;call to abstracted procedure
 12828  002610  D001               	goto	u19404
 12829  002612                     u19405:
 12830  002612  D8B4               	call	PL110	;call to abstracted procedure
 12831  002614                     u19404:
 12832  002614  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12833  002616  D7FD               	goto	u19405
 12834  002618  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 12835  00261C  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 12836  002620  0E00               	movlw	0
 12837  002622  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12838  002624  0EFF               	movlw	255
 12839  002626  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 12840  002628  D89A               	call	PL60	;call to abstracted procedure
 12841  00262A                     l14553:
 12842  00262A  2A42               	incf	calculateSetFilterMask@j,f,c
 12843  00262C  0E07               	movlw	7
 12844  00262E  6442               	cpfsgt	calculateSetFilterMask@j,c
 12845  002630  D7BF               	goto	l14549
 12846  002632                     l14555:
 12847                           
 12848                           ;main.c: 3718: }
 12849                           ;main.c: 3719: }
 12850                           ;main.c: 3721: lastOID = Read_b_eep(0x43 + 8 * i);
 12851  002632  5043               	movf	calculateSetFilterMask@i,w,c
 12852  002634  D856               	call	PL22	;call to abstracted procedure
 12853  002636  0E43               	movlw	67
 12854  002638  2412               	addwf	??_calculateSetFilterMask,w,c
 12855  00263A  6E08               	movwf	?_Read_b_eep,c
 12856  00263C  0E00               	movlw	0
 12857  00263E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12858  002640  6E09               	movwf	?_Read_b_eep+1,c
 12859  002642  EC27  F023         	call	_Read_b_eep	;wreg free
 12860  002646  6E35               	movwf	calculateSetFilterMask@lastOID,c
 12861  002648                     l14559:
 12862  002648  2A43               	incf	calculateSetFilterMask@i,f,c
 12863  00264A  0E07               	movlw	7
 12864  00264C  6443               	cpfsgt	calculateSetFilterMask@i,c
 12865  00264E  D6D5               	goto	l14515
 12866                           
 12867                           ;main.c: 3727: }
 12868                           ;main.c: 3729: }
 12869                           ;main.c: 3730: }
 12870                           ;main.c: 3733: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12871  002650  0E80               	movlw	128
 12872  002652  ECD3  F022         	call	_ECANSetOperationMode
 12873                           
 12874                           ;main.c: 3736: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 12875  002656  010F               	movlb	15	; () banked
 12876  002658  0E0F               	movlw	15	;volatile
 12877  00265A  6E09               	movwf	?__CANIDToRegs+1,c
 12878  00265C  0E1C               	movlw	28	;volatile
 12879  00265E  6E08               	movwf	?__CANIDToRegs,c
 12880  002660  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 12881  002664  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 12882  002668  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 12883  00266C  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 12884  002670  0E01               	movlw	1
 12885  002672  6E0E               	movwf	?__CANIDToRegs+6,c
 12886  002674  ECFD  F01B         	call	__CANIDToRegs	;wreg free
 12887                           
 12888                           ;main.c: 3739: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 12889  002678  010D               	movlb	13	; () banked
 12890  00267A  83D4               	bsf	212,1,b	;volatile
 12891                           
 12892                           ; BSR set to: 13
 12893  00267C  010F               	movlb	15	; () banked
 12894  00267E  0E0F               	movlw	15	;volatile
 12895  002680  6E09               	movwf	?__CANIDToRegs+1,c
 12896  002682  0E04               	movlw	4	;volatile
 12897  002684  6E08               	movwf	?__CANIDToRegs,c
 12898  002686  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 12899  00268A  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 12900  00268E  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 12901  002692  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 12902  002696  0E01               	movlw	1
 12903  002698  6E0E               	movwf	?__CANIDToRegs+6,c
 12904  00269A  ECFD  F01B         	call	__CANIDToRegs	;wreg free
 12905                           
 12906                           ;main.c: 3742: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 12907  00269E  0E00               	movlw	0
 12908  0026A0  EFD3  F022         	goto	_ECANSetOperationMode
 12909  0026A4                     __end_of_calculateSetFilterMask:
 12910                           	opt stack 0
 12911  0026A4                     PL20:
 12912                           	opt stack 23
 12913  0026A4  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 12914  0026A6  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 12915  0026AA  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 12916  0026AC  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 12917  0026AE  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 12918  0026B0  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 12919  0026B4  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 12920  0026B8  6A1D               	clrf	??_calculateSetFilterMask+11,c
 12921  0026BA  6A1C               	clrf	??_calculateSetFilterMask+10,c
 12922  0026BC  5043               	movf	calculateSetFilterMask@i,w,c
 12923  0026BE  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 12924  0026C0  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 12925  0026C2  90D8               	bcf	status,0,c
 12926  0026C4  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12927  0026C6  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12928  0026C8  90D8               	bcf	status,0,c
 12929  0026CA  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12930  0026CC  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12931  0026CE  90D8               	bcf	status,0,c
 12932  0026D0  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12933  0026D2  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12934  0026D4  0E44               	movlw	68
 12935  0026D6  2420               	addwf	??_calculateSetFilterMask+14,w,c
 12936  0026D8  6E08               	movwf	?_Read_b_eep,c
 12937  0026DA  0E00               	movlw	0
 12938  0026DC  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 12939  0026DE  6E09               	movwf	?_Read_b_eep+1,c
 12940  0026E0  0012               	return	
 12941  0026E2                     __end_ofPL20:
 12942                           	opt stack 0
 12943  0026E2                     PL22:
 12944                           	opt stack 23
 12945  0026E2  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 12946  0026E4  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 12947  0026E6  90D8               	bcf	status,0,c
 12948  0026E8  3612               	rlcf	??_calculateSetFilterMask,f,c
 12949  0026EA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12950  0026EC  90D8               	bcf	status,0,c
 12951  0026EE  3612               	rlcf	??_calculateSetFilterMask,f,c
 12952  0026F0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12953  0026F2  90D8               	bcf	status,0,c
 12954  0026F4  3612               	rlcf	??_calculateSetFilterMask,f,c
 12955  0026F6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12956  0026F8  0012               	return	
 12957  0026FA                     __end_ofPL22:
 12958                           	opt stack 0
 12959  0026FA                     PL24:
 12960                           	opt stack 23
 12961  0026FA  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12962  0026FC  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 12963  002700  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 12964  002702  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12965  002704  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 12966  002706  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 12967  00270A  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 12968  00270E  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 12969  002712  6A15               	clrf	??_calculateSetFilterMask+3,c
 12970  002714  5043               	movf	calculateSetFilterMask@i,w,c
 12971  002716  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 12972  002718  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 12973  00271A  90D8               	bcf	status,0,c
 12974  00271C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12975  00271E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12976  002720  90D8               	bcf	status,0,c
 12977  002722  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12978  002724  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12979  002726  90D8               	bcf	status,0,c
 12980  002728  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12981  00272A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12982  00272C  0012               	return	
 12983  00272E                     __end_ofPL24:
 12984                           	opt stack 0
 12985  00272E                     PL28:
 12986                           	opt stack 23
 12987  00272E  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 12988  002730  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 12989  002732  501D               	movf	??_calculateSetFilterMask+11,w,c
 12990  002734  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 12991  002736  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 12992  002738  501E               	movf	??_calculateSetFilterMask+12,w,c
 12993  00273A  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 12994  00273C  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 12995  00273E  501F               	movf	??_calculateSetFilterMask+13,w,c
 12996  002740  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 12997  002742  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 12998  002744  5015               	movf	??_calculateSetFilterMask+3,w,c
 12999  002746  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 13000  002748  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 13001  00274A  5016               	movf	??_calculateSetFilterMask+4,w,c
 13002  00274C  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 13003  00274E  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 13004  002750  5017               	movf	??_calculateSetFilterMask+5,w,c
 13005  002752  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 13006  002754  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 13007  002756  5018               	movf	??_calculateSetFilterMask+6,w,c
 13008  002758  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 13009  00275A  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 13010  00275C  0012               	return	
 13011  00275E                     __end_ofPL28:
 13012                           	opt stack 0
 13013  00275E                     PL60:
 13014                           	opt stack 23
 13015  00275E  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 13016  002760  5015               	movf	??_calculateSetFilterMask+3,w,c
 13017  002762  1636               	andwf	calculateSetFilterMask@mask,f,c
 13018  002764  5016               	movf	??_calculateSetFilterMask+4,w,c
 13019  002766  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 13020  002768  5017               	movf	??_calculateSetFilterMask+5,w,c
 13021  00276A  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 13022  00276C  5018               	movf	??_calculateSetFilterMask+6,w,c
 13023  00276E  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 13024  002770  0012               	return	
 13025  002772                     __end_ofPL60:
 13026                           	opt stack 0
 13027  002772                     PL106:
 13028                           	opt stack 23
 13029  002772  0E01               	movlw	1
 13030  002774  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 13031  002776  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 13032  002778  2A12               	incf	??_calculateSetFilterMask,f,c
 13033  00277A  0012               	return	
 13034  00277C                     __end_ofPL106:
 13035                           	opt stack 0
 13036  00277C                     PL110:
 13037                           	opt stack 23
 13038  00277C  90D8               	bcf	status,0,c
 13039  00277E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13040  002780  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 13041  002782  0012               	return	
 13042  002784                     __end_ofPL110:
 13043                           	opt stack 0
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodh	equ	0xFF4
 13049                           prodl	equ	0xFF3
 13050                           intcon	equ	0xFF2
 13051                           intcon2	equ	0xFF1
 13052                           postinc0	equ	0xFEE
 13053                           wreg	equ	0xFE8
 13054                           indf1	equ	0xFE7
 13055                           fsr1h	equ	0xFE2
 13056                           fsr1l	equ	0xFE1
 13057                           indf2	equ	0xFDF
 13058                           postinc2	equ	0xFDE
 13059                           postdec2	equ	0xFDD
 13060                           plusw2	equ	0xFDB
 13061                           fsr2h	equ	0xFDA
 13062                           fsr2l	equ	0xFD9
 13063                           status	equ	0xFD8
 13064                           
 13065 ;; *************** function _SendInformationEvent *****************
 13066 ;; Defined at:
 13067 ;;		line 2517 in file "../main.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;  idx             1    wreg     unsigned char 
 13070 ;;  eventClass      1   20[BANK0 ] unsigned char 
 13071 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  idx             1   77[COMRAM] unsigned char 
 13074 ;;  data            3   74[COMRAM] unsigned char [3]
 13075 ;; Return value:  Size  Location     Type
 13076 ;;		None               void
 13077 ;; Registers used:
 13078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13079 ;; Tracked objects:
 13080 ;;		On entry : F/0
 13081 ;;		On exit  : F/0
 13082 ;;		Unchanged: 0/0
 13083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13084 ;;      Params:         0       2       0       0       0       0       0
 13085 ;;      Locals:         4       0       0       0       0       0       0
 13086 ;;      Temps:          0       0       0       0       0       0       0
 13087 ;;      Totals:         4       2       0       0       0       0       0
 13088 ;;Total ram usage:        6 bytes
 13089 ;; Hardware stack levels used:    1
 13090 ;; Hardware stack levels required when called:    6
 13091 ;; This function calls:
 13092 ;;		_Read_b_eep
 13093 ;;		_sendVSCPFrame
 13094 ;; This function is called by:
 13095 ;;		_main
 13096 ;;		_doApplicationOneSecondWork
 13097 ;;		_vscp_writeAppReg
 13098 ;;		_doActionOn
 13099 ;;		_doActionOff
 13100 ;;		_doActionPulseOn
 13101 ;;		_doActionPulseOff
 13102 ;;		_doActionToggle
 13103 ;;		_doActionStatus
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           	psect	text29
 13108  0040B4                     __ptext29:
 13109                           	opt stack 0
 13110  0040B4                     _SendInformationEvent:
 13111                           	opt stack 21
 13112                           
 13113                           ;incstack = 0
 13114                           ;incstack = 0
 13115                           ;SendInformationEvent@idx stored from wreg
 13116  0040B4  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;main.c: 2518: uint8_t data[3];
 13120                           ;main.c: 2520: data[ 0 ] = idx;
 13121  0040B8  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;main.c: 2521: data[ 1 ] = Read_b_eep(0x43 + 0);
 13125  0040BC  6A09               	clrf	?_Read_b_eep+1,c
 13126  0040BE  0E43               	movlw	67
 13127  0040C0  6E08               	movwf	?_Read_b_eep,c
 13128  0040C2  EC27  F023         	call	_Read_b_eep	;wreg free
 13129  0040C6  6E4C               	movwf	SendInformationEvent@data+1,c
 13130                           
 13131                           ;main.c: 2522: data[ 2 ] = Read_b_eep(0x43 + 2 + idx);
 13132  0040C8  0E45               	movlw	69
 13133  0040CA  244E               	addwf	SendInformationEvent@idx,w,c
 13134  0040CC  6E08               	movwf	?_Read_b_eep,c
 13135  0040CE  6A09               	clrf	?_Read_b_eep+1,c
 13136  0040D0  0E00               	movlw	0
 13137  0040D2  2209               	addwfc	?_Read_b_eep+1,f,c
 13138  0040D4  EC27  F023         	call	_Read_b_eep	;wreg free
 13139  0040D8  6E4D               	movwf	SendInformationEvent@data+2,c
 13140                           
 13141                           ;main.c: 2523: sendVSCPFrame( eventClass,
 13142                           ;main.c: 2524: eventTypeId,
 13143                           ;main.c: 2525: vscp_nickname,
 13144                           ;main.c: 2526: 0x03,
 13145                           ;main.c: 2527: 3,
 13146                           ;main.c: 2528: data );
 13147  0040DA  0100               	movlb	0	; () banked
 13148  0040DC  C0D0  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 13149  0040E0  6A40               	clrf	?_sendVSCPFrame+1,c
 13150  0040E2  C0D1  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 13151  0040E6  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13152  0040EA  0E03               	movlw	3
 13153  0040EC  6E43               	movwf	?_sendVSCPFrame+4,c
 13154  0040EE  6E44               	movwf	?_sendVSCPFrame+5,c
 13155  0040F0  0E4B               	movlw	low SendInformationEvent@data
 13156  0040F2  6E45               	movwf	?_sendVSCPFrame+6,c
 13157  0040F4  0E00               	movlw	high SendInformationEvent@data
 13158  0040F6  6E46               	movwf	?_sendVSCPFrame+7,c
 13159  0040F8  0E0F               	movlw	15
 13160  0040FA  6E46               	movwf	?_sendVSCPFrame+7,c
 13161  0040FC  0E5F               	movlw	__accesstop+-1
 13162  0040FE  6445               	cpfsgt	?_sendVSCPFrame+6,c
 13163  004100  6A46               	clrf	?_sendVSCPFrame+7,c
 13164  004102  EF3D  F01F         	goto	_sendVSCPFrame	;wreg free
 13165  004106                     __end_of_SendInformationEvent:
 13166                           	opt stack 0
 13167                           tblptru	equ	0xFF8
 13168                           tblptrh	equ	0xFF7
 13169                           tblptrl	equ	0xFF6
 13170                           tablat	equ	0xFF5
 13171                           prodh	equ	0xFF4
 13172                           prodl	equ	0xFF3
 13173                           intcon	equ	0xFF2
 13174                           intcon2	equ	0xFF1
 13175                           postinc0	equ	0xFEE
 13176                           wreg	equ	0xFE8
 13177                           indf1	equ	0xFE7
 13178                           fsr1h	equ	0xFE2
 13179                           fsr1l	equ	0xFE1
 13180                           indf2	equ	0xFDF
 13181                           postinc2	equ	0xFDE
 13182                           postdec2	equ	0xFDD
 13183                           plusw2	equ	0xFDB
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function _vscp_readRegister *****************
 13189 ;; Defined at:
 13190 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  reg             1    wreg     unsigned char 
 13193 ;; Auto vars:     Size  Location     Type
 13194 ;;  reg             1   28[COMRAM] unsigned char 
 13195 ;; Return value:  Size  Location     Type
 13196 ;;                  1    wreg      unsigned char 
 13197 ;; Registers used:
 13198 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13199 ;; Tracked objects:
 13200 ;;		On entry : F/0
 13201 ;;		On exit  : 0/0
 13202 ;;		Unchanged: 0/0
 13203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13204 ;;      Params:         0       0       0       0       0       0       0
 13205 ;;      Locals:         1       0       0       0       0       0       0
 13206 ;;      Temps:          0       0       0       0       0       0       0
 13207 ;;      Totals:         1       0       0       0       0       0       0
 13208 ;;Total ram usage:        1 bytes
 13209 ;; Hardware stack levels used:    1
 13210 ;; Hardware stack levels required when called:    5
 13211 ;; This function calls:
 13212 ;;		_vscp_readAppReg
 13213 ;;		_vscp_readStdReg
 13214 ;; This function is called by:
 13215 ;;		_vscp_handleProtocolEvent
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           	psect	text30
 13220  004574                     __ptext30:
 13221                           	opt stack 0
 13222  004574                     _vscp_readRegister:
 13223                           	opt stack 23
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;incstack = 0
 13227                           ;incstack = 0
 13228                           ;vscp_readRegister@reg stored from wreg
 13229  004574  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 13233  004578  0E7F               	movlw	127
 13234  00457A  641D               	cpfsgt	vscp_readRegister@reg,c
 13235  00457C  D004               	goto	l15005
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 13239  00457E  501D               	movf	vscp_readRegister@reg,w,c
 13240  004580  EC13  F018         	call	_vscp_readStdReg
 13241  004584  D003               	goto	l1360
 13242  004586                     l15005:
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;vscp_firmware.c: 565: else {
 13246                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 13247  004586  501D               	movf	vscp_readRegister@reg,w,c
 13248  004588  EC3E  F017         	call	_vscp_readAppReg
 13249  00458C                     l1360:
 13250  00458C  0012               	return	
 13251  00458E                     __end_of_vscp_readRegister:
 13252                           	opt stack 0
 13253                           tblptru	equ	0xFF8
 13254                           tblptrh	equ	0xFF7
 13255                           tblptrl	equ	0xFF6
 13256                           tablat	equ	0xFF5
 13257                           prodh	equ	0xFF4
 13258                           prodl	equ	0xFF3
 13259                           intcon	equ	0xFF2
 13260                           intcon2	equ	0xFF1
 13261                           postinc0	equ	0xFEE
 13262                           wreg	equ	0xFE8
 13263                           indf1	equ	0xFE7
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           plusw2	equ	0xFDB
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _vscp_readStdReg *****************
 13275 ;; Defined at:
 13276 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;  reg             1    wreg     unsigned char 
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  reg             1   27[COMRAM] unsigned char 
 13281 ;;  code            4   20[COMRAM] unsigned long 
 13282 ;;  idx             1   25[COMRAM] unsigned char 
 13283 ;;  code            4   16[COMRAM] unsigned long 
 13284 ;;  idx             1   24[COMRAM] unsigned char 
 13285 ;;  rv              1   26[COMRAM] unsigned char 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;                  1    wreg      unsigned char 
 13288 ;; Registers used:
 13289 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13290 ;; Tracked objects:
 13291 ;;		On entry : F/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13295 ;;      Params:         0       0       0       0       0       0       0
 13296 ;;      Locals:        12       0       0       0       0       0       0
 13297 ;;      Temps:          5       0       0       0       0       0       0
 13298 ;;      Totals:        17       0       0       0       0       0       0
 13299 ;;Total ram usage:       17 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:    4
 13302 ;; This function calls:
 13303 ;;		_vscp_getMajorVersion
 13304 ;;		_vscp_getMinorVersion
 13305 ;;		_vscp_getSubMinorVersion
 13306 ;;		_vscp_getGUID
 13307 ;;		_vscp_getMDF_URL
 13308 ;;		_vscp_getUserID
 13309 ;;		_vscp_getManufacturerId
 13310 ;;		_vscp_getBootLoaderAlgorithm
 13311 ;;		_vscp_getBufferSize
 13312 ;;		_vscp_getFamilyCode
 13313 ;;		_vscp_getFamilyType
 13314 ;;		_vscp_getRegisterPagesUsed
 13315 ;; This function is called by:
 13316 ;;		_vscp_readRegister
 13317 ;;		_vscp_handleProtocolEvent
 13318 ;; This function uses a non-reentrant model
 13319 ;;
 13320                           
 13321                           	psect	text31
 13322  003026                     __ptext31:
 13323                           	opt stack 0
 13324  003026                     _vscp_readStdReg:
 13325                           	opt stack 24
 13326                           
 13327                           ;incstack = 0
 13328                           ;incstack = 0
 13329                           ;vscp_readStdReg@reg stored from wreg
 13330  003026  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 13334  00302A  6A1B               	clrf	vscp_readStdReg@rv,c
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 13338  00302C  501C               	movf	vscp_readStdReg@reg,w,c
 13339  00302E  0A80               	xorlw	128
 13340  003030  E104               	bnz	l15015
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 13344  003032  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13345                           
 13346                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 13347  003036  6A55               	clrf	_vscp_alarmstatus,c
 13348                           
 13349                           ;vscp_firmware.c: 584: }
 13350  003038  D0B3               	goto	l15103
 13351  00303A                     l15015:
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 13355  00303A  501C               	movf	vscp_readStdReg@reg,w,c
 13356  00303C  0A81               	xorlw	129
 13357  00303E  E102               	bnz	l15019
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;vscp_firmware.c: 588: rv = 1;
 13361  003040  0E01               	movlw	1
 13362  003042  D075               	goto	L47
 13363  003044                     l15019:
 13364                           
 13365                           ; BSR set to: 0
 13366                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 13367  003044  501C               	movf	vscp_readStdReg@reg,w,c
 13368  003046  0A82               	xorlw	130
 13369  003048  E102               	bnz	l15023
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;vscp_firmware.c: 594: rv = 5;
 13373  00304A  0E05               	movlw	5
 13374  00304C  D070               	goto	L47
 13375  00304E                     l15023:
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13379  00304E  501C               	movf	vscp_readStdReg@reg,w,c
 13380  003050  0A83               	xorlw	131
 13381  003052  E102               	bnz	l15027
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;vscp_firmware.c: 600: rv = 0;
 13385  003054  6A1B               	clrf	vscp_readStdReg@rv,c
 13386                           
 13387                           ;vscp_firmware.c: 602: }
 13388  003056  D0A4               	goto	l15103
 13389  003058                     l15027:
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13393  003058  501C               	movf	vscp_readStdReg@reg,w,c
 13394  00305A  0A94               	xorlw	148
 13395  00305C  E103               	bnz	l15031
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13399  00305E  EC66  F023         	call	_vscp_getMajorVersion	;wreg free
 13400  003062  D065               	goto	L47
 13401  003064                     l15031:
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13405  003064  501C               	movf	vscp_readStdReg@reg,w,c
 13406  003066  0A95               	xorlw	149
 13407  003068  E103               	bnz	l15035
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13411  00306A  EC65  F023         	call	_vscp_getMinorVersion	;wreg free
 13412  00306E  D05F               	goto	L47
 13413  003070                     l15035:
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13417  003070  501C               	movf	vscp_readStdReg@reg,w,c
 13418  003072  0A96               	xorlw	150
 13419  003074  E103               	bnz	l15039
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13423  003076  EC64  F023         	call	_vscp_getSubMinorVersion	;wreg free
 13424  00307A  D059               	goto	L47
 13425  00307C                     l15039:
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13429  00307C  0E89               	movlw	137
 13430  00307E  601C               	cpfslt	vscp_readStdReg@reg,c
 13431  003080  D005               	goto	l15043
 13432                           
 13433                           ; BSR set to: 0
 13434                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13435  003082  501C               	movf	vscp_readStdReg@reg,w,c
 13436  003084  0F7C               	addlw	124
 13437  003086  EC0A  F023         	call	_vscp_getUserID
 13438  00308A  D051               	goto	L47
 13439  00308C                     l15043:
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13443                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13444  00308C  0E88               	movlw	136
 13445  00308E  641C               	cpfsgt	vscp_readStdReg@reg,c
 13446  003090  D008               	goto	l15049
 13447                           
 13448                           ; BSR set to: 0
 13449  003092  0E91               	movlw	145
 13450  003094  601C               	cpfslt	vscp_readStdReg@reg,c
 13451  003096  D005               	goto	l15049
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13455  003098  501C               	movf	vscp_readStdReg@reg,w,c
 13456  00309A  0F77               	addlw	119
 13457  00309C  EC00  F023         	call	_vscp_getManufacturerId
 13458  0030A0  D046               	goto	L47
 13459  0030A2                     l15049:
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13463  0030A2  501C               	movf	vscp_readStdReg@reg,w,c
 13464  0030A4  0A91               	xorlw	145
 13465  0030A6  E103               	bnz	l15053
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13469  0030A8  C07E  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 13470                           
 13471                           ;vscp_firmware.c: 639: }
 13472  0030AC  D079               	goto	l15103
 13473  0030AE                     l15053:
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13477  0030AE  501C               	movf	vscp_readStdReg@reg,w,c
 13478  0030B0  0A93               	xorlw	147
 13479  0030B2  E103               	bnz	l15057
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13483  0030B4  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 13484                           
 13485                           ;vscp_firmware.c: 645: }
 13486  0030B8  D073               	goto	l15103
 13487  0030BA                     l15057:
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13491  0030BA  501C               	movf	vscp_readStdReg@reg,w,c
 13492  0030BC  0A92               	xorlw	146
 13493  0030BE  E102               	bnz	l15061
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13497  0030C0  5053               	movf	_vscp_page_select+1,w,c
 13498  0030C2  D035               	goto	L47
 13499  0030C4                     l15061:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13503  0030C4  501C               	movf	vscp_readStdReg@reg,w,c
 13504  0030C6  0A97               	xorlw	151
 13505  0030C8  E103               	bnz	l15065
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13509  0030CA  EC63  F023         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13510  0030CE  D02F               	goto	L47
 13511  0030D0                     l15065:
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13515  0030D0  501C               	movf	vscp_readStdReg@reg,w,c
 13516  0030D2  0A98               	xorlw	152
 13517  0030D4  E103               	bnz	l15069
 13518                           
 13519                           ; BSR set to: 0
 13520                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13521  0030D6  EC62  F023         	call	_vscp_getBufferSize	;wreg free
 13522  0030DA  D029               	goto	L47
 13523  0030DC                     l15069:
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13527  0030DC  501C               	movf	vscp_readStdReg@reg,w,c
 13528  0030DE  0A99               	xorlw	153
 13529  0030E0  E103               	bnz	l15073
 13530                           
 13531                           ; BSR set to: 0
 13532                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13533  0030E2  EC61  F023         	call	_vscp_getRegisterPagesUsed	;wreg free
 13534  0030E6  D023               	goto	L47
 13535  0030E8                     l15073:
 13536                           
 13537                           ; BSR set to: 0
 13538                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13539                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13540  0030E8  0E99               	movlw	153
 13541  0030EA  641C               	cpfsgt	vscp_readStdReg@reg,c
 13542  0030EC  D022               	goto	l15083
 13543                           
 13544                           ; BSR set to: 0
 13545  0030EE  0E9E               	movlw	158
 13546  0030F0  601C               	cpfslt	vscp_readStdReg@reg,c
 13547  0030F2  D01F               	goto	l15083
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13551  0030F4  EC48  F023         	call	_vscp_getFamilyCode	;wreg free
 13552  0030F8  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13553  0030FC  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13554  003100  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13555  003104  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13559  003108  501C               	movf	vscp_readStdReg@reg,w,c
 13560  00310A  0F66               	addlw	102
 13561  00310C  6E19               	movwf	vscp_readStdReg@idx,c
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13565  00310E  5019               	movf	vscp_readStdReg@idx,w,c
 13566  003110  D849               	call	PL64	;call to abstracted procedure
 13567  003112  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13568  003116  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13569  00311A  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13570  00311E  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13571  003122  2AE8               	incf	wreg,f,c
 13572  003124  D001               	goto	u20430
 13573  003126                     u20435:
 13574  003126  D848               	call	PL102	;call to abstracted procedure
 13575  003128                     u20430:
 13576  003128  2EE8               	decfsz	wreg,f,c
 13577  00312A  D7FD               	goto	u20435
 13578  00312C  D024               	goto	L48
 13579  00312E                     L47:
 13580  00312E  6E1B               	movwf	vscp_readStdReg@rv,c
 13581                           
 13582                           ;vscp_firmware.c: 671: }
 13583  003130  D037               	goto	l15103
 13584  003132                     l15083:
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13588                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13589  003132  0E9D               	movlw	157
 13590  003134  641C               	cpfsgt	vscp_readStdReg@reg,c
 13591  003136  D021               	goto	l15093
 13592                           
 13593                           ; BSR set to: 0
 13594  003138  0EA2               	movlw	162
 13595  00313A  601C               	cpfslt	vscp_readStdReg@reg,c
 13596  00313C  D01E               	goto	l15093
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13600  00313E  EC43  F023         	call	_vscp_getFamilyType	;wreg free
 13601  003142  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1486+3
 13602  003146  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1486+2
 13603  00314A  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1486+1
 13604  00314E  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1486
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13608  003152  501C               	movf	vscp_readStdReg@reg,w,c
 13609  003154  0F62               	addlw	98
 13610  003156  6E1A               	movwf	vscp_readStdReg@idx_1487,c
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13614  003158  501A               	movf	vscp_readStdReg@idx_1487,w,c
 13615  00315A  D824               	call	PL64	;call to abstracted procedure
 13616  00315C  C015  F00D         	movff	vscp_readStdReg@code_1486,??_vscp_readStdReg+1
 13617  003160  C016  F00E         	movff	vscp_readStdReg@code_1486+1,??_vscp_readStdReg+2
 13618  003164  C017  F00F         	movff	vscp_readStdReg@code_1486+2,??_vscp_readStdReg+3
 13619  003168  C018  F010         	movff	vscp_readStdReg@code_1486+3,??_vscp_readStdReg+4
 13620  00316C  2AE8               	incf	wreg,f,c
 13621  00316E  D001               	goto	u20460
 13622  003170                     u20465:
 13623  003170  D823               	call	PL102	;call to abstracted procedure
 13624  003172                     u20460:
 13625  003172  2EE8               	decfsz	wreg,f,c
 13626  003174  D7FD               	goto	u20465
 13627  003176                     L48:
 13628  003176  500D               	movf	??_vscp_readStdReg+1,w,c
 13629  003178  D7DA               	goto	L47
 13630  00317A                     l15093:
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13634                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13635  00317A  0ECF               	movlw	207
 13636  00317C  641C               	cpfsgt	vscp_readStdReg@reg,c
 13637  00317E  D008               	goto	l15099
 13638                           
 13639                           ; BSR set to: 0
 13640  003180  0EE0               	movlw	224
 13641  003182  601C               	cpfslt	vscp_readStdReg@reg,c
 13642  003184  D005               	goto	l15099
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13646  003186  501C               	movf	vscp_readStdReg@reg,w,c
 13647  003188  0F30               	addlw	48
 13648  00318A  EC14  F023         	call	_vscp_getGUID
 13649  00318E  D7CF               	goto	L47
 13650  003190                     l15099:
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13654  003190  0EDF               	movlw	223
 13655  003192  641C               	cpfsgt	vscp_readStdReg@reg,c
 13656  003194  D005               	goto	l15103
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13660  003196  501C               	movf	vscp_readStdReg@reg,w,c
 13661  003198  0F20               	addlw	32
 13662  00319A  ECC7  F022         	call	_vscp_getMDF_URL
 13663  00319E  D7C7               	goto	L47
 13664  0031A0                     l15103:
 13665                           
 13666                           ;vscp_firmware.c: 691: }
 13667                           ;vscp_firmware.c: 693: return rv;
 13668  0031A0  501B               	movf	vscp_readStdReg@rv,w,c
 13669  0031A2  0012               	return	
 13670  0031A4                     __end_of_vscp_readStdReg:
 13671                           	opt stack 0
 13672  0031A4                     PL64:
 13673                           	opt stack 24
 13674  0031A4  0803               	sublw	3
 13675  0031A6  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 13676  0031A8  90D8               	bcf	status,0,c
 13677  0031AA  360C               	rlcf	??_vscp_readStdReg,f,c
 13678  0031AC  90D8               	bcf	status,0,c
 13679  0031AE  360C               	rlcf	??_vscp_readStdReg,f,c
 13680  0031B0  90D8               	bcf	status,0,c
 13681  0031B2  360C               	rlcf	??_vscp_readStdReg,f,c
 13682  0031B4  500C               	movf	??_vscp_readStdReg,w,c
 13683  0031B6  0012               	return	
 13684  0031B8                     __end_ofPL64:
 13685                           	opt stack 0
 13686  0031B8                     PL102:
 13687                           	opt stack 24
 13688  0031B8  90D8               	bcf	status,0,c
 13689  0031BA  3210               	rrcf	??_vscp_readStdReg+4,f,c
 13690  0031BC  320F               	rrcf	??_vscp_readStdReg+3,f,c
 13691  0031BE  320E               	rrcf	??_vscp_readStdReg+2,f,c
 13692  0031C0  320D               	rrcf	??_vscp_readStdReg+1,f,c
 13693  0031C2  0012               	return	
 13694  0031C4                     __end_ofPL102:
 13695                           	opt stack 0
 13696                           tblptru	equ	0xFF8
 13697                           tblptrh	equ	0xFF7
 13698                           tblptrl	equ	0xFF6
 13699                           tablat	equ	0xFF5
 13700                           prodh	equ	0xFF4
 13701                           prodl	equ	0xFF3
 13702                           intcon	equ	0xFF2
 13703                           intcon2	equ	0xFF1
 13704                           postinc0	equ	0xFEE
 13705                           wreg	equ	0xFE8
 13706                           indf1	equ	0xFE7
 13707                           fsr1h	equ	0xFE2
 13708                           fsr1l	equ	0xFE1
 13709                           indf2	equ	0xFDF
 13710                           postinc2	equ	0xFDE
 13711                           postdec2	equ	0xFDD
 13712                           plusw2	equ	0xFDB
 13713                           fsr2h	equ	0xFDA
 13714                           fsr2l	equ	0xFD9
 13715                           status	equ	0xFD8
 13716                           
 13717 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13718 ;; Defined at:
 13719 ;;		line 3523 in file "../main.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;		None
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;		None
 13724 ;; Return value:  Size  Location     Type
 13725 ;;                  1    wreg      unsigned char 
 13726 ;; Registers used:
 13727 ;;		wreg
 13728 ;; Tracked objects:
 13729 ;;		On entry : F/0
 13730 ;;		On exit  : F/0
 13731 ;;		Unchanged: F/0
 13732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13733 ;;      Params:         0       0       0       0       0       0       0
 13734 ;;      Locals:         0       0       0       0       0       0       0
 13735 ;;      Temps:          0       0       0       0       0       0       0
 13736 ;;      Totals:         0       0       0       0       0       0       0
 13737 ;;Total ram usage:        0 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:    2
 13740 ;; This function calls:
 13741 ;;		Nothing
 13742 ;; This function is called by:
 13743 ;;		_vscp_readStdReg
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           	psect	text32
 13748  0046C2                     __ptext32:
 13749                           	opt stack 0
 13750  0046C2                     _vscp_getRegisterPagesUsed:
 13751                           	opt stack 25
 13752                           
 13753                           ; BSR set to: 0
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;main.c: 3524: return 3;
 13757                           
 13758                           ;incstack = 0
 13759                           ;incstack = 0
 13760  0046C2  0C03               	retlw	3
 13761  0046C4                     __end_of_vscp_getRegisterPagesUsed:
 13762                           	opt stack 0
 13763                           tblptru	equ	0xFF8
 13764                           tblptrh	equ	0xFF7
 13765                           tblptrl	equ	0xFF6
 13766                           tablat	equ	0xFF5
 13767                           prodh	equ	0xFF4
 13768                           prodl	equ	0xFF3
 13769                           intcon	equ	0xFF2
 13770                           intcon2	equ	0xFF1
 13771                           postinc0	equ	0xFEE
 13772                           wreg	equ	0xFE8
 13773                           indf1	equ	0xFE7
 13774                           fsr1h	equ	0xFE2
 13775                           fsr1l	equ	0xFE1
 13776                           indf2	equ	0xFDF
 13777                           postinc2	equ	0xFDE
 13778                           postdec2	equ	0xFDD
 13779                           plusw2	equ	0xFDB
 13780                           fsr2h	equ	0xFDA
 13781                           fsr2l	equ	0xFD9
 13782                           status	equ	0xFD8
 13783                           
 13784 ;; *************** function _vscp_getFamilyType *****************
 13785 ;; Defined at:
 13786 ;;		line 3504 in file "../main.c"
 13787 ;; Parameters:    Size  Location     Type
 13788 ;;		None
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;		None
 13791 ;; Return value:  Size  Location     Type
 13792 ;;                  4    7[COMRAM] unsigned long 
 13793 ;; Registers used:
 13794 ;;		None
 13795 ;; Tracked objects:
 13796 ;;		On entry : F/0
 13797 ;;		On exit  : F/0
 13798 ;;		Unchanged: F/0
 13799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13800 ;;      Params:         4       0       0       0       0       0       0
 13801 ;;      Locals:         0       0       0       0       0       0       0
 13802 ;;      Temps:          0       0       0       0       0       0       0
 13803 ;;      Totals:         4       0       0       0       0       0       0
 13804 ;;Total ram usage:        4 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    2
 13807 ;; This function calls:
 13808 ;;		Nothing
 13809 ;; This function is called by:
 13810 ;;		_vscp_readStdReg
 13811 ;; This function uses a non-reentrant model
 13812 ;;
 13813                           
 13814                           	psect	text33
 13815  004686                     __ptext33:
 13816                           	opt stack 0
 13817  004686                     _vscp_getFamilyType:
 13818                           	opt stack 25
 13819                           
 13820                           ; BSR set to: 0
 13821                           ;main.c: 3505: return 0;
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;incstack = 0
 13825                           ;incstack = 0
 13826  004686  6A08               	clrf	?_vscp_getFamilyType,c
 13827  004688  6A09               	clrf	?_vscp_getFamilyType+1,c
 13828  00468A  6A0A               	clrf	?_vscp_getFamilyType+2,c
 13829  00468C  6A0B               	clrf	?_vscp_getFamilyType+3,c
 13830                           
 13831                           ; BSR set to: 0
 13832  00468E  0012               	return	
 13833  004690                     __end_of_vscp_getFamilyType:
 13834                           	opt stack 0
 13835                           tblptru	equ	0xFF8
 13836                           tblptrh	equ	0xFF7
 13837                           tblptrl	equ	0xFF6
 13838                           tablat	equ	0xFF5
 13839                           prodh	equ	0xFF4
 13840                           prodl	equ	0xFF3
 13841                           intcon	equ	0xFF2
 13842                           intcon2	equ	0xFF1
 13843                           postinc0	equ	0xFEE
 13844                           wreg	equ	0xFE8
 13845                           indf1	equ	0xFE7
 13846                           fsr1h	equ	0xFE2
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           plusw2	equ	0xFDB
 13852                           fsr2h	equ	0xFDA
 13853                           fsr2l	equ	0xFD9
 13854                           status	equ	0xFD8
 13855                           
 13856 ;; *************** function _vscp_getFamilyCode *****************
 13857 ;; Defined at:
 13858 ;;		line 3495 in file "../main.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;		None
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;		None
 13863 ;; Return value:  Size  Location     Type
 13864 ;;                  4    7[COMRAM] unsigned long 
 13865 ;; Registers used:
 13866 ;;		None
 13867 ;; Tracked objects:
 13868 ;;		On entry : F/0
 13869 ;;		On exit  : F/0
 13870 ;;		Unchanged: F/0
 13871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13872 ;;      Params:         4       0       0       0       0       0       0
 13873 ;;      Locals:         0       0       0       0       0       0       0
 13874 ;;      Temps:          0       0       0       0       0       0       0
 13875 ;;      Totals:         4       0       0       0       0       0       0
 13876 ;;Total ram usage:        4 bytes
 13877 ;; Hardware stack levels used:    1
 13878 ;; Hardware stack levels required when called:    2
 13879 ;; This function calls:
 13880 ;;		Nothing
 13881 ;; This function is called by:
 13882 ;;		_vscp_readStdReg
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text34
 13887  004690                     __ptext34:
 13888                           	opt stack 0
 13889  004690                     _vscp_getFamilyCode:
 13890                           	opt stack 25
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;main.c: 3496: return 0L;
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;incstack = 0
 13897                           ;incstack = 0
 13898  004690  6A08               	clrf	?_vscp_getFamilyCode,c
 13899  004692  6A09               	clrf	?_vscp_getFamilyCode+1,c
 13900  004694  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 13901  004696  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 13902                           
 13903                           ; BSR set to: 0
 13904  004698  0012               	return	
 13905  00469A                     __end_of_vscp_getFamilyCode:
 13906                           	opt stack 0
 13907                           tblptru	equ	0xFF8
 13908                           tblptrh	equ	0xFF7
 13909                           tblptrl	equ	0xFF6
 13910                           tablat	equ	0xFF5
 13911                           prodh	equ	0xFF4
 13912                           prodl	equ	0xFF3
 13913                           intcon	equ	0xFF2
 13914                           intcon2	equ	0xFF1
 13915                           postinc0	equ	0xFEE
 13916                           wreg	equ	0xFE8
 13917                           indf1	equ	0xFE7
 13918                           fsr1h	equ	0xFE2
 13919                           fsr1l	equ	0xFE1
 13920                           indf2	equ	0xFDF
 13921                           postinc2	equ	0xFDE
 13922                           postdec2	equ	0xFDD
 13923                           plusw2	equ	0xFDB
 13924                           fsr2h	equ	0xFDA
 13925                           fsr2l	equ	0xFD9
 13926                           status	equ	0xFD8
 13927                           
 13928 ;; *************** function _vscp_getBufferSize *****************
 13929 ;; Defined at:
 13930 ;;		line 3356 in file "../main.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;		None
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;		None
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  1    wreg      unsigned char 
 13937 ;; Registers used:
 13938 ;;		wreg
 13939 ;; Tracked objects:
 13940 ;;		On entry : F/0
 13941 ;;		On exit  : F/0
 13942 ;;		Unchanged: F/0
 13943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13944 ;;      Params:         0       0       0       0       0       0       0
 13945 ;;      Locals:         0       0       0       0       0       0       0
 13946 ;;      Temps:          0       0       0       0       0       0       0
 13947 ;;      Totals:         0       0       0       0       0       0       0
 13948 ;;Total ram usage:        0 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    2
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_vscp_readStdReg
 13955 ;; This function uses a non-reentrant model
 13956 ;;
 13957                           
 13958                           	psect	text35
 13959  0046C4                     __ptext35:
 13960                           	opt stack 0
 13961  0046C4                     _vscp_getBufferSize:
 13962                           	opt stack 25
 13963                           
 13964                           ; BSR set to: 0
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;main.c: 3357: return 8;
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;incstack = 0
 13971                           ;incstack = 0
 13972  0046C4  0C08               	retlw	8
 13973  0046C6                     __end_of_vscp_getBufferSize:
 13974                           	opt stack 0
 13975                           tblptru	equ	0xFF8
 13976                           tblptrh	equ	0xFF7
 13977                           tblptrl	equ	0xFF6
 13978                           tablat	equ	0xFF5
 13979                           prodh	equ	0xFF4
 13980                           prodl	equ	0xFF3
 13981                           intcon	equ	0xFF2
 13982                           intcon2	equ	0xFF1
 13983                           postinc0	equ	0xFEE
 13984                           wreg	equ	0xFE8
 13985                           indf1	equ	0xFE7
 13986                           fsr1h	equ	0xFE2
 13987                           fsr1l	equ	0xFE1
 13988                           indf2	equ	0xFDF
 13989                           postinc2	equ	0xFDE
 13990                           postdec2	equ	0xFDD
 13991                           plusw2	equ	0xFDB
 13992                           fsr2h	equ	0xFDA
 13993                           fsr2l	equ	0xFD9
 13994                           status	equ	0xFD8
 13995                           
 13996 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13997 ;; Defined at:
 13998 ;;		line 3347 in file "../main.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;		None
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;		None
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  1    wreg      unsigned char 
 14005 ;; Registers used:
 14006 ;;		wreg
 14007 ;; Tracked objects:
 14008 ;;		On entry : F/0
 14009 ;;		On exit  : F/0
 14010 ;;		Unchanged: F/0
 14011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14012 ;;      Params:         0       0       0       0       0       0       0
 14013 ;;      Locals:         0       0       0       0       0       0       0
 14014 ;;      Temps:          0       0       0       0       0       0       0
 14015 ;;      Totals:         0       0       0       0       0       0       0
 14016 ;;Total ram usage:        0 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    2
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		_vscp_readStdReg
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           	psect	text36
 14027  0046C6                     __ptext36:
 14028                           	opt stack 0
 14029  0046C6                     _vscp_getBootLoaderAlgorithm:
 14030                           	opt stack 25
 14031                           
 14032                           ; BSR set to: 0
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;main.c: 3348: return 0x01;
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;incstack = 0
 14039                           ;incstack = 0
 14040  0046C6  0C01               	retlw	1
 14041  0046C8                     __end_of_vscp_getBootLoaderAlgorithm:
 14042                           	opt stack 0
 14043                           tblptru	equ	0xFF8
 14044                           tblptrh	equ	0xFF7
 14045                           tblptrl	equ	0xFF6
 14046                           tablat	equ	0xFF5
 14047                           prodh	equ	0xFF4
 14048                           prodl	equ	0xFF3
 14049                           intcon	equ	0xFF2
 14050                           intcon2	equ	0xFF1
 14051                           postinc0	equ	0xFEE
 14052                           wreg	equ	0xFE8
 14053                           indf1	equ	0xFE7
 14054                           fsr1h	equ	0xFE2
 14055                           fsr1l	equ	0xFE1
 14056                           indf2	equ	0xFDF
 14057                           postinc2	equ	0xFDE
 14058                           postdec2	equ	0xFDD
 14059                           plusw2	equ	0xFDB
 14060                           fsr2h	equ	0xFDA
 14061                           fsr2l	equ	0xFD9
 14062                           status	equ	0xFD8
 14063                           
 14064 ;; *************** function _vscp_getManufacturerId *****************
 14065 ;; Defined at:
 14066 ;;		line 3338 in file "../main.c"
 14067 ;; Parameters:    Size  Location     Type
 14068 ;;  idx             1    wreg     unsigned char 
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;  idx             1    9[COMRAM] unsigned char 
 14071 ;; Return value:  Size  Location     Type
 14072 ;;                  1    wreg      unsigned char 
 14073 ;; Registers used:
 14074 ;;		wreg, status,2, status,0, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14080 ;;      Params:         0       0       0       0       0       0       0
 14081 ;;      Locals:         1       0       0       0       0       0       0
 14082 ;;      Temps:          0       0       0       0       0       0       0
 14083 ;;      Totals:         1       0       0       0       0       0       0
 14084 ;;Total ram usage:        1 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    3
 14087 ;; This function calls:
 14088 ;;		_Read_b_eep
 14089 ;; This function is called by:
 14090 ;;		_vscp_readStdReg
 14091 ;;		_vscp_writeStdReg
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           	psect	text37
 14096  004600                     __ptext37:
 14097                           	opt stack 0
 14098  004600                     _vscp_getManufacturerId:
 14099                           	opt stack 24
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;incstack = 0
 14103                           ;incstack = 0
 14104                           ;vscp_getManufacturerId@idx stored from wreg
 14105  004600  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 14106                           
 14107                           ;main.c: 3339: return Read_b_eep(0x0B + idx);
 14108  004604  0E0B               	movlw	11
 14109  004606  240A               	addwf	vscp_getManufacturerId@idx,w,c
 14110  004608  6E08               	movwf	?_Read_b_eep,c
 14111  00460A  6A09               	clrf	?_Read_b_eep+1,c
 14112  00460C  0E00               	movlw	0
 14113  00460E  2209               	addwfc	?_Read_b_eep+1,f,c
 14114  004610  EF27  F023         	goto	_Read_b_eep	;wreg free
 14115  004614                     __end_of_vscp_getManufacturerId:
 14116                           	opt stack 0
 14117                           tblptru	equ	0xFF8
 14118                           tblptrh	equ	0xFF7
 14119                           tblptrl	equ	0xFF6
 14120                           tablat	equ	0xFF5
 14121                           prodh	equ	0xFF4
 14122                           prodl	equ	0xFF3
 14123                           intcon	equ	0xFF2
 14124                           intcon2	equ	0xFF1
 14125                           postinc0	equ	0xFEE
 14126                           wreg	equ	0xFE8
 14127                           indf1	equ	0xFE7
 14128                           fsr1h	equ	0xFE2
 14129                           fsr1l	equ	0xFE1
 14130                           indf2	equ	0xFDF
 14131                           postinc2	equ	0xFDE
 14132                           postdec2	equ	0xFDD
 14133                           plusw2	equ	0xFDB
 14134                           fsr2h	equ	0xFDA
 14135                           fsr2l	equ	0xFD9
 14136                           status	equ	0xFD8
 14137                           
 14138 ;; *************** function _vscp_getUserID *****************
 14139 ;; Defined at:
 14140 ;;		line 3318 in file "../main.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;  idx             1    wreg     unsigned char 
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;  idx             1    9[COMRAM] unsigned char 
 14145 ;; Return value:  Size  Location     Type
 14146 ;;                  1    wreg      unsigned char 
 14147 ;; Registers used:
 14148 ;;		wreg, status,2, status,0, cstack
 14149 ;; Tracked objects:
 14150 ;;		On entry : 0/0
 14151 ;;		On exit  : 0/0
 14152 ;;		Unchanged: 0/0
 14153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14154 ;;      Params:         0       0       0       0       0       0       0
 14155 ;;      Locals:         1       0       0       0       0       0       0
 14156 ;;      Temps:          0       0       0       0       0       0       0
 14157 ;;      Totals:         1       0       0       0       0       0       0
 14158 ;;Total ram usage:        1 bytes
 14159 ;; Hardware stack levels used:    1
 14160 ;; Hardware stack levels required when called:    3
 14161 ;; This function calls:
 14162 ;;		_Read_b_eep
 14163 ;; This function is called by:
 14164 ;;		_vscp_readStdReg
 14165 ;;		_vscp_writeStdReg
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text38
 14170  004614                     __ptext38:
 14171                           	opt stack 0
 14172  004614                     _vscp_getUserID:
 14173                           	opt stack 24
 14174                           
 14175                           ;incstack = 0
 14176                           ;incstack = 0
 14177                           ;vscp_getUserID@idx stored from wreg
 14178  004614  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 14179                           
 14180                           ;main.c: 3319: return Read_b_eep(0x06 + idx);
 14181  004618  0E06               	movlw	6
 14182  00461A  240A               	addwf	vscp_getUserID@idx,w,c
 14183  00461C  6E08               	movwf	?_Read_b_eep,c
 14184  00461E  6A09               	clrf	?_Read_b_eep+1,c
 14185  004620  0E00               	movlw	0
 14186  004622  2209               	addwfc	?_Read_b_eep+1,f,c
 14187  004624  EF27  F023         	goto	_Read_b_eep	;wreg free
 14188  004628                     __end_of_vscp_getUserID:
 14189                           	opt stack 0
 14190                           tblptru	equ	0xFF8
 14191                           tblptrh	equ	0xFF7
 14192                           tblptrl	equ	0xFF6
 14193                           tablat	equ	0xFF5
 14194                           prodh	equ	0xFF4
 14195                           prodl	equ	0xFF3
 14196                           intcon	equ	0xFF2
 14197                           intcon2	equ	0xFF1
 14198                           postinc0	equ	0xFEE
 14199                           wreg	equ	0xFE8
 14200                           indf1	equ	0xFE7
 14201                           fsr1h	equ	0xFE2
 14202                           fsr1l	equ	0xFE1
 14203                           indf2	equ	0xFDF
 14204                           postinc2	equ	0xFDE
 14205                           postdec2	equ	0xFDD
 14206                           plusw2	equ	0xFDB
 14207                           fsr2h	equ	0xFDA
 14208                           fsr2l	equ	0xFD9
 14209                           status	equ	0xFD8
 14210                           
 14211 ;; *************** function _vscp_getMDF_URL *****************
 14212 ;; Defined at:
 14213 ;;		line 3309 in file "../main.c"
 14214 ;; Parameters:    Size  Location     Type
 14215 ;;  idx             1    wreg     unsigned char 
 14216 ;; Auto vars:     Size  Location     Type
 14217 ;;  idx             1    8[COMRAM] unsigned char 
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  1    wreg      unsigned char 
 14220 ;; Registers used:
 14221 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14222 ;; Tracked objects:
 14223 ;;		On entry : F/0
 14224 ;;		On exit  : F/0
 14225 ;;		Unchanged: F/0
 14226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14227 ;;      Params:         0       0       0       0       0       0       0
 14228 ;;      Locals:         1       0       0       0       0       0       0
 14229 ;;      Temps:          1       0       0       0       0       0       0
 14230 ;;      Totals:         2       0       0       0       0       0       0
 14231 ;;Total ram usage:        2 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:    2
 14234 ;; This function calls:
 14235 ;;		Nothing
 14236 ;; This function is called by:
 14237 ;;		_vscp_readStdReg
 14238 ;;		_vscp_handleProtocolEvent
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           	psect	text39
 14243  00458E                     __ptext39:
 14244                           	opt stack 0
 14245  00458E                     _vscp_getMDF_URL:
 14246                           	opt stack 25
 14247                           
 14248                           ;incstack = 0
 14249                           ;incstack = 0
 14250                           ;vscp_getMDF_URL@idx stored from wreg
 14251  00458E  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;main.c: 3310: return vscp_deviceURL[ idx ];
 14255  004592  5009               	movf	vscp_getMDF_URL@idx,w,c
 14256  004594  0F00               	addlw	low _vscp_deviceURL
 14257  004596  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 14258  004598  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 14259  00459C  0E06               	movlw	high __smallconst
 14260  00459E  6EF7               	movwf	tblptrh,c
 14261  0045A0  0008               	tblrd		*
 14262  0045A2  50F5               	movf	tablat,w,c
 14263                           
 14264                           ; BSR set to: 0
 14265  0045A4  0012               	return	
 14266  0045A6                     __end_of_vscp_getMDF_URL:
 14267                           	opt stack 0
 14268                           tblptru	equ	0xFF8
 14269                           tblptrh	equ	0xFF7
 14270                           tblptrl	equ	0xFF6
 14271                           tablat	equ	0xFF5
 14272                           prodh	equ	0xFF4
 14273                           prodl	equ	0xFF3
 14274                           intcon	equ	0xFF2
 14275                           intcon2	equ	0xFF1
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           fsr1h	equ	0xFE2
 14280                           fsr1l	equ	0xFE1
 14281                           indf2	equ	0xFDF
 14282                           postinc2	equ	0xFDE
 14283                           postdec2	equ	0xFDD
 14284                           plusw2	equ	0xFDB
 14285                           fsr2h	equ	0xFDA
 14286                           fsr2l	equ	0xFD9
 14287                           status	equ	0xFD8
 14288                           
 14289 ;; *************** function _vscp_getGUID *****************
 14290 ;; Defined at:
 14291 ;;		line 3297 in file "../main.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;  idx             1    wreg     unsigned char 
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;  idx             1    9[COMRAM] unsigned char 
 14296 ;; Return value:  Size  Location     Type
 14297 ;;                  1    wreg      unsigned char 
 14298 ;; Registers used:
 14299 ;;		wreg, status,2, status,0, cstack
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14305 ;;      Params:         0       0       0       0       0       0       0
 14306 ;;      Locals:         1       0       0       0       0       0       0
 14307 ;;      Temps:          0       0       0       0       0       0       0
 14308 ;;      Totals:         1       0       0       0       0       0       0
 14309 ;;Total ram usage:        1 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    3
 14312 ;; This function calls:
 14313 ;;		_Read_b_eep
 14314 ;; This function is called by:
 14315 ;;		_vscp_readStdReg
 14316 ;;		_vscp_writeStdReg
 14317 ;;		_vscp_handleProtocolEvent
 14318 ;; This function uses a non-reentrant model
 14319 ;;
 14320                           
 14321                           	psect	text40
 14322  004628                     __ptext40:
 14323                           	opt stack 0
 14324  004628                     _vscp_getGUID:
 14325                           	opt stack 24
 14326                           
 14327                           ; BSR set to: 0
 14328                           ;incstack = 0
 14329                           ;incstack = 0
 14330                           ;vscp_getGUID@idx stored from wreg
 14331  004628  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 14332                           
 14333                           ;main.c: 3298: return Read_b_eep(0x13 + idx);
 14334  00462C  0E13               	movlw	19
 14335  00462E  240A               	addwf	vscp_getGUID@idx,w,c
 14336  004630  6E08               	movwf	?_Read_b_eep,c
 14337  004632  6A09               	clrf	?_Read_b_eep+1,c
 14338  004634  0E00               	movlw	0
 14339  004636  2209               	addwfc	?_Read_b_eep+1,f,c
 14340  004638  EF27  F023         	goto	_Read_b_eep	;wreg free
 14341  00463C                     __end_of_vscp_getGUID:
 14342                           	opt stack 0
 14343                           tblptru	equ	0xFF8
 14344                           tblptrh	equ	0xFF7
 14345                           tblptrl	equ	0xFF6
 14346                           tablat	equ	0xFF5
 14347                           prodh	equ	0xFF4
 14348                           prodl	equ	0xFF3
 14349                           intcon	equ	0xFF2
 14350                           intcon2	equ	0xFF1
 14351                           postinc0	equ	0xFEE
 14352                           wreg	equ	0xFE8
 14353                           indf1	equ	0xFE7
 14354                           fsr1h	equ	0xFE2
 14355                           fsr1l	equ	0xFE1
 14356                           indf2	equ	0xFDF
 14357                           postinc2	equ	0xFDE
 14358                           postdec2	equ	0xFDD
 14359                           plusw2	equ	0xFDB
 14360                           fsr2h	equ	0xFDA
 14361                           fsr2l	equ	0xFD9
 14362                           status	equ	0xFD8
 14363                           
 14364 ;; *************** function _vscp_getSubMinorVersion *****************
 14365 ;; Defined at:
 14366 ;;		line 3286 in file "../main.c"
 14367 ;; Parameters:    Size  Location     Type
 14368 ;;		None
 14369 ;; Auto vars:     Size  Location     Type
 14370 ;;		None
 14371 ;; Return value:  Size  Location     Type
 14372 ;;                  1    wreg      unsigned char 
 14373 ;; Registers used:
 14374 ;;		wreg
 14375 ;; Tracked objects:
 14376 ;;		On entry : F/0
 14377 ;;		On exit  : F/0
 14378 ;;		Unchanged: F/0
 14379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14380 ;;      Params:         0       0       0       0       0       0       0
 14381 ;;      Locals:         0       0       0       0       0       0       0
 14382 ;;      Temps:          0       0       0       0       0       0       0
 14383 ;;      Totals:         0       0       0       0       0       0       0
 14384 ;;Total ram usage:        0 bytes
 14385 ;; Hardware stack levels used:    1
 14386 ;; Hardware stack levels required when called:    2
 14387 ;; This function calls:
 14388 ;;		Nothing
 14389 ;; This function is called by:
 14390 ;;		_vscp_readStdReg
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           	psect	text41
 14395  0046C8                     __ptext41:
 14396                           	opt stack 0
 14397  0046C8                     _vscp_getSubMinorVersion:
 14398                           	opt stack 25
 14399                           
 14400                           ; BSR set to: 0
 14401                           
 14402                           ; BSR set to: 0
 14403                           ;main.c: 3287: return 0;
 14404                           
 14405                           ;incstack = 0
 14406                           ;incstack = 0
 14407  0046C8  0C00               	retlw	0
 14408  0046CA                     __end_of_vscp_getSubMinorVersion:
 14409                           	opt stack 0
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           intcon	equ	0xFF2
 14417                           intcon2	equ	0xFF1
 14418                           postinc0	equ	0xFEE
 14419                           wreg	equ	0xFE8
 14420                           indf1	equ	0xFE7
 14421                           fsr1h	equ	0xFE2
 14422                           fsr1l	equ	0xFE1
 14423                           indf2	equ	0xFDF
 14424                           postinc2	equ	0xFDE
 14425                           postdec2	equ	0xFDD
 14426                           plusw2	equ	0xFDB
 14427                           fsr2h	equ	0xFDA
 14428                           fsr2l	equ	0xFD9
 14429                           status	equ	0xFD8
 14430                           
 14431 ;; *************** function _vscp_getMinorVersion *****************
 14432 ;; Defined at:
 14433 ;;		line 3277 in file "../main.c"
 14434 ;; Parameters:    Size  Location     Type
 14435 ;;		None
 14436 ;; Auto vars:     Size  Location     Type
 14437 ;;		None
 14438 ;; Return value:  Size  Location     Type
 14439 ;;                  1    wreg      unsigned char 
 14440 ;; Registers used:
 14441 ;;		wreg
 14442 ;; Tracked objects:
 14443 ;;		On entry : F/0
 14444 ;;		On exit  : F/0
 14445 ;;		Unchanged: F/0
 14446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14447 ;;      Params:         0       0       0       0       0       0       0
 14448 ;;      Locals:         0       0       0       0       0       0       0
 14449 ;;      Temps:          0       0       0       0       0       0       0
 14450 ;;      Totals:         0       0       0       0       0       0       0
 14451 ;;Total ram usage:        0 bytes
 14452 ;; Hardware stack levels used:    1
 14453 ;; Hardware stack levels required when called:    2
 14454 ;; This function calls:
 14455 ;;		Nothing
 14456 ;; This function is called by:
 14457 ;;		_vscp_readStdReg
 14458 ;; This function uses a non-reentrant model
 14459 ;;
 14460                           
 14461                           	psect	text42
 14462  0046CA                     __ptext42:
 14463                           	opt stack 0
 14464  0046CA                     _vscp_getMinorVersion:
 14465                           	opt stack 25
 14466                           
 14467                           ; BSR set to: 0
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;main.c: 3278: return 0;
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;incstack = 0
 14474                           ;incstack = 0
 14475  0046CA  0C00               	retlw	0
 14476  0046CC                     __end_of_vscp_getMinorVersion:
 14477                           	opt stack 0
 14478                           tblptru	equ	0xFF8
 14479                           tblptrh	equ	0xFF7
 14480                           tblptrl	equ	0xFF6
 14481                           tablat	equ	0xFF5
 14482                           prodh	equ	0xFF4
 14483                           prodl	equ	0xFF3
 14484                           intcon	equ	0xFF2
 14485                           intcon2	equ	0xFF1
 14486                           postinc0	equ	0xFEE
 14487                           wreg	equ	0xFE8
 14488                           indf1	equ	0xFE7
 14489                           fsr1h	equ	0xFE2
 14490                           fsr1l	equ	0xFE1
 14491                           indf2	equ	0xFDF
 14492                           postinc2	equ	0xFDE
 14493                           postdec2	equ	0xFDD
 14494                           plusw2	equ	0xFDB
 14495                           fsr2h	equ	0xFDA
 14496                           fsr2l	equ	0xFD9
 14497                           status	equ	0xFD8
 14498                           
 14499 ;; *************** function _vscp_getMajorVersion *****************
 14500 ;; Defined at:
 14501 ;;		line 3268 in file "../main.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;		None
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      unsigned char 
 14508 ;; Registers used:
 14509 ;;		wreg
 14510 ;; Tracked objects:
 14511 ;;		On entry : F/0
 14512 ;;		On exit  : F/0
 14513 ;;		Unchanged: F/0
 14514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14515 ;;      Params:         0       0       0       0       0       0       0
 14516 ;;      Locals:         0       0       0       0       0       0       0
 14517 ;;      Temps:          0       0       0       0       0       0       0
 14518 ;;      Totals:         0       0       0       0       0       0       0
 14519 ;;Total ram usage:        0 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; Hardware stack levels required when called:    2
 14522 ;; This function calls:
 14523 ;;		Nothing
 14524 ;; This function is called by:
 14525 ;;		_vscp_readStdReg
 14526 ;; This function uses a non-reentrant model
 14527 ;;
 14528                           
 14529                           	psect	text43
 14530  0046CC                     __ptext43:
 14531                           	opt stack 0
 14532  0046CC                     _vscp_getMajorVersion:
 14533                           	opt stack 25
 14534                           
 14535                           ; BSR set to: 0
 14536                           
 14537                           ; BSR set to: 0
 14538                           ;main.c: 3269: return 1;
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;incstack = 0
 14542                           ;incstack = 0
 14543  0046CC  0C01               	retlw	1
 14544  0046CE                     __end_of_vscp_getMajorVersion:
 14545                           	opt stack 0
 14546                           tblptru	equ	0xFF8
 14547                           tblptrh	equ	0xFF7
 14548                           tblptrl	equ	0xFF6
 14549                           tablat	equ	0xFF5
 14550                           prodh	equ	0xFF4
 14551                           prodl	equ	0xFF3
 14552                           intcon	equ	0xFF2
 14553                           intcon2	equ	0xFF1
 14554                           postinc0	equ	0xFEE
 14555                           wreg	equ	0xFE8
 14556                           indf1	equ	0xFE7
 14557                           fsr1h	equ	0xFE2
 14558                           fsr1l	equ	0xFE1
 14559                           indf2	equ	0xFDF
 14560                           postinc2	equ	0xFDE
 14561                           postdec2	equ	0xFDD
 14562                           plusw2	equ	0xFDB
 14563                           fsr2h	equ	0xFDA
 14564                           fsr2l	equ	0xFD9
 14565                           status	equ	0xFD8
 14566                           
 14567 ;; *************** function _vscp_newNodeOnline *****************
 14568 ;; Defined at:
 14569 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14570 ;; Parameters:    Size  Location     Type
 14571 ;;		None
 14572 ;; Auto vars:     Size  Location     Type
 14573 ;;		None
 14574 ;; Return value:  Size  Location     Type
 14575 ;;		None               void
 14576 ;; Registers used:
 14577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14578 ;; Tracked objects:
 14579 ;;		On entry : F/0
 14580 ;;		On exit  : F/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14583 ;;      Params:         0       0       0       0       0       0       0
 14584 ;;      Locals:         0       0       0       0       0       0       0
 14585 ;;      Temps:          1       0       0       0       0       0       0
 14586 ;;      Totals:         1       0       0       0       0       0       0
 14587 ;;Total ram usage:        1 bytes
 14588 ;; Hardware stack levels used:    1
 14589 ;; Hardware stack levels required when called:    7
 14590 ;; This function calls:
 14591 ;;		_vscp_sendEvent
 14592 ;; This function is called by:
 14593 ;;		_vscp_handleProtocolEvent
 14594 ;; This function uses a non-reentrant model
 14595 ;;
 14596                           
 14597                           	psect	text44
 14598  004346                     __ptext44:
 14599                           	opt stack 0
 14600  004346                     _vscp_newNodeOnline:
 14601                           	opt stack 21
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14605                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;incstack = 0
 14609                           ;incstack = 0
 14610  004346  C097  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14611  00434A  0E0F               	movlw	15
 14612  00434C  164C               	andwf	??_vscp_newNodeOnline,f,c
 14613  00434E  044C               	decf	??_vscp_newNodeOnline,w,c
 14614  004350  E10E               	bnz	l1347
 14615                           
 14616                           ; BSR set to: 0
 14617  004352  517E               	movf	_vscp_nickname& (0+255),w,b
 14618  004354  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14619  004358  62DF               	cpfseq	indf2,c
 14620  00435A  D009               	goto	l1347
 14621                           
 14622                           ; BSR set to: 0
 14623                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14624  00435C  0E80               	movlw	128
 14625  00435E  6FA5               	movwf	_vscp_omsg& (0+255),b
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14629  004360  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14633  004362  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 14634  004364  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 14635                           
 14636                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14637  004366  0E03               	movlw	3
 14638  004368  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14642  00436A  EC1A  F022         	call	_vscp_sendEvent	;wreg free
 14643  00436E                     l1347:
 14644                           
 14645                           ; BSR set to: 0
 14646  00436E  0012               	return	
 14647  004370                     __end_of_vscp_newNodeOnline:
 14648                           	opt stack 0
 14649                           tblptru	equ	0xFF8
 14650                           tblptrh	equ	0xFF7
 14651                           tblptrl	equ	0xFF6
 14652                           tablat	equ	0xFF5
 14653                           prodh	equ	0xFF4
 14654                           prodl	equ	0xFF3
 14655                           intcon	equ	0xFF2
 14656                           intcon2	equ	0xFF1
 14657                           postinc0	equ	0xFEE
 14658                           wreg	equ	0xFE8
 14659                           indf1	equ	0xFE7
 14660                           fsr1h	equ	0xFE2
 14661                           fsr1l	equ	0xFE1
 14662                           indf2	equ	0xFDF
 14663                           postinc2	equ	0xFDE
 14664                           postdec2	equ	0xFDD
 14665                           plusw2	equ	0xFDB
 14666                           fsr2h	equ	0xFDA
 14667                           fsr2l	equ	0xFD9
 14668                           status	equ	0xFD8
 14669                           
 14670 ;; *************** function _vscp_handleDropNickname *****************
 14671 ;; Defined at:
 14672 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;		None
 14675 ;; Auto vars:     Size  Location     Type
 14676 ;;  bytes           1   12[COMRAM] unsigned char 
 14677 ;; Return value:  Size  Location     Type
 14678 ;;		None               void
 14679 ;; Registers used:
 14680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14681 ;; Tracked objects:
 14682 ;;		On entry : F/0
 14683 ;;		On exit  : F/0
 14684 ;;		Unchanged: 0/0
 14685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14686 ;;      Params:         0       0       0       0       0       0       0
 14687 ;;      Locals:         1       0       0       0       0       0       0
 14688 ;;      Temps:          0       0       0       0       0       0       0
 14689 ;;      Totals:         1       0       0       0       0       0       0
 14690 ;;Total ram usage:        1 bytes
 14691 ;; Hardware stack levels used:    1
 14692 ;; Hardware stack levels required when called:    5
 14693 ;; This function calls:
 14694 ;;		_vscp_init
 14695 ;;		_vscp_writeNicknamePermanent
 14696 ;; This function is called by:
 14697 ;;		_vscp_handleProtocolEvent
 14698 ;; This function uses a non-reentrant model
 14699 ;;
 14700                           
 14701                           	psect	text45
 14702  004290                     __ptext45:
 14703                           	opt stack 0
 14704  004290                     _vscp_handleDropNickname:
 14705                           	opt stack 23
 14706                           
 14707                           ; BSR set to: 0
 14708                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;incstack = 0
 14712                           ;incstack = 0
 14713  004290  5197               	movf	_vscp_imsg& (0+255),w,b
 14714  004292  0B0F               	andlw	15
 14715  004294  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14719  004296  500D               	movf	vscp_handleDropNickname@bytes,w,c
 14720  004298  E012               	bz	l1343
 14721                           
 14722                           ; BSR set to: 0
 14723  00429A  517E               	movf	_vscp_nickname& (0+255),w,b
 14724  00429C  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14725  0042A0  62DF               	cpfseq	indf2,c
 14726  0042A2  D00D               	goto	l1343
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14730  0042A4  040D               	decf	vscp_handleDropNickname@bytes,w,c
 14731  0042A6  E005               	bz	l1342
 14732                           
 14733                           ; BSR set to: 0
 14734  0042A8  0E01               	movlw	1
 14735  0042AA  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 14736  0042AC  D008               	goto	l1343
 14737                           
 14738                           ; BSR set to: 0
 14739  0042AE  679E               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14740  0042B0  D006               	goto	l1343
 14741  0042B2                     l1342:
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14745  0042B2  697E               	setf	_vscp_nickname& (0+255),b
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14749  0042B4  0EFF               	movlw	255
 14750  0042B6  ECF5  F022         	call	_vscp_writeNicknamePermanent
 14751                           
 14752                           ;vscp_firmware.c: 481: vscp_init();
 14753  0042BA  ECAA  F020         	call	_vscp_init	;wreg free
 14754  0042BE                     l1343:
 14755                           
 14756                           ; BSR set to: 0
 14757  0042BE  0012               	return	
 14758  0042C0                     __end_of_vscp_handleDropNickname:
 14759                           	opt stack 0
 14760                           tblptru	equ	0xFF8
 14761                           tblptrh	equ	0xFF7
 14762                           tblptrl	equ	0xFF6
 14763                           tablat	equ	0xFF5
 14764                           prodh	equ	0xFF4
 14765                           prodl	equ	0xFF3
 14766                           intcon	equ	0xFF2
 14767                           intcon2	equ	0xFF1
 14768                           postinc0	equ	0xFEE
 14769                           wreg	equ	0xFE8
 14770                           indf1	equ	0xFE7
 14771                           fsr1h	equ	0xFE2
 14772                           fsr1l	equ	0xFE1
 14773                           indf2	equ	0xFDF
 14774                           postinc2	equ	0xFDE
 14775                           postdec2	equ	0xFDD
 14776                           plusw2	equ	0xFDB
 14777                           fsr2h	equ	0xFDA
 14778                           fsr2l	equ	0xFD9
 14779                           status	equ	0xFD8
 14780                           
 14781 ;; *************** function _vscp_init *****************
 14782 ;; Defined at:
 14783 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;		None
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;		None
 14788 ;; Return value:  Size  Location     Type
 14789 ;;		None               void
 14790 ;; Registers used:
 14791 ;;		wreg, status,2, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : F/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14797 ;;      Params:         0       0       0       0       0       0       0
 14798 ;;      Locals:         0       0       0       0       0       0       0
 14799 ;;      Temps:          0       0       0       0       0       0       0
 14800 ;;      Totals:         0       0       0       0       0       0       0
 14801 ;;Total ram usage:        0 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    4
 14804 ;; This function calls:
 14805 ;;		_vscp_readNicknamePermanent
 14806 ;; This function is called by:
 14807 ;;		_main
 14808 ;;		_vscp_handleDropNickname
 14809 ;;		_vscp_handleProtocolEvent
 14810 ;; This function uses a non-reentrant model
 14811 ;;
 14812                           
 14813                           	psect	text46
 14814  004154                     __ptext46:
 14815                           	opt stack 0
 14816  004154                     _vscp_init:
 14817                           	opt stack 23
 14818                           
 14819                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;incstack = 0
 14823                           ;incstack = 0
 14824  004154  0E02               	movlw	2
 14825  004156  6E56               	movwf	_vscp_initledfunc,c
 14826                           
 14827                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14828  004158  EC4D  F023         	call	_vscp_readNicknamePermanent	;wreg free
 14829  00415C  0100               	movlb	0	; () banked
 14830  00415E  6F7E               	movwf	_vscp_nickname& (0+255),b
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14834  004160  677E               	tstfsz	_vscp_nickname& (0+255),b
 14835  004162  D001               	goto	l1284
 14836                           
 14837                           ; BSR set to: 0
 14838  004164  697E               	setf	_vscp_nickname& (0+255),b
 14839  004166                     l1284:
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14843  004166  6B97               	clrf	_vscp_imsg& (0+255),b
 14844                           
 14845                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14846  004168  6B98               	clrf	(_vscp_imsg+1)& (0+255),b
 14847                           
 14848                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14849  00416A  6B99               	clrf	(_vscp_imsg+2)& (0+255),b
 14850  00416C  6B9A               	clrf	(_vscp_imsg+3)& (0+255),b
 14851                           
 14852                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14853  00416E  6B9B               	clrf	(_vscp_imsg+4)& (0+255),b
 14854                           
 14855                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14856  004170  6BA5               	clrf	_vscp_omsg& (0+255),b
 14857                           
 14858                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14859  004172  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 14860                           
 14861                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14862  004174  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 14863  004176  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 14864                           
 14865                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14866  004178  6BA9               	clrf	(_vscp_omsg+4)& (0+255),b
 14867                           
 14868                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14869  00417A  6A55               	clrf	_vscp_alarmstatus,c
 14870                           
 14871                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14872  00417C  6A57               	clrf	_vscp_probe_address,c
 14873                           
 14874                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14875  00417E  6B7F               	clrf	_vscp_node_state& (0+255),b
 14876                           
 14877                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14878  004180  6B80               	clrf	_vscp_node_substate& (0+255),b
 14879                           
 14880                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14881  004182  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 14882                           
 14883                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14884  004184  6A52               	clrf	_vscp_page_select,c
 14885  004186  6A53               	clrf	_vscp_page_select+1,c
 14886                           
 14887                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14888  004188  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 14889  00418A  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14890                           
 14891                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14892  00418C  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14893  00418E  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14894                           
 14895                           ;vscp_firmware.c: 155: vscp_second = 0;
 14896  004190  6B82               	clrf	_vscp_second& (0+255),b
 14897                           
 14898                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14899  004192  6B7D               	clrf	_vscp_minute& (0+255),b
 14900                           
 14901                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14902  004194  6B7B               	clrf	_vscp_hour& (0+255),b
 14903                           
 14904                           ; BSR set to: 0
 14905  004196  0012               	return	
 14906  004198                     __end_of_vscp_init:
 14907                           	opt stack 0
 14908                           tblptru	equ	0xFF8
 14909                           tblptrh	equ	0xFF7
 14910                           tblptrl	equ	0xFF6
 14911                           tablat	equ	0xFF5
 14912                           prodh	equ	0xFF4
 14913                           prodl	equ	0xFF3
 14914                           intcon	equ	0xFF2
 14915                           intcon2	equ	0xFF1
 14916                           postinc0	equ	0xFEE
 14917                           wreg	equ	0xFE8
 14918                           indf1	equ	0xFE7
 14919                           fsr1h	equ	0xFE2
 14920                           fsr1l	equ	0xFE1
 14921                           indf2	equ	0xFDF
 14922                           postinc2	equ	0xFDE
 14923                           postdec2	equ	0xFDD
 14924                           plusw2	equ	0xFDB
 14925                           fsr2h	equ	0xFDA
 14926                           fsr2l	equ	0xFD9
 14927                           status	equ	0xFD8
 14928                           
 14929 ;; *************** function _vscp_readNicknamePermanent *****************
 14930 ;; Defined at:
 14931 ;;		line 1373 in file "../main.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;		None
 14934 ;; Auto vars:     Size  Location     Type
 14935 ;;		None
 14936 ;; Return value:  Size  Location     Type
 14937 ;;                  1    wreg      unsigned char 
 14938 ;; Registers used:
 14939 ;;		wreg, status,2, cstack
 14940 ;; Tracked objects:
 14941 ;;		On entry : 0/0
 14942 ;;		On exit  : 0/0
 14943 ;;		Unchanged: 0/0
 14944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14945 ;;      Params:         0       0       0       0       0       0       0
 14946 ;;      Locals:         0       0       0       0       0       0       0
 14947 ;;      Temps:          0       0       0       0       0       0       0
 14948 ;;      Totals:         0       0       0       0       0       0       0
 14949 ;;Total ram usage:        0 bytes
 14950 ;; Hardware stack levels used:    1
 14951 ;; Hardware stack levels required when called:    3
 14952 ;; This function calls:
 14953 ;;		_Read_b_eep
 14954 ;; This function is called by:
 14955 ;;		_vscp_init
 14956 ;; This function uses a non-reentrant model
 14957 ;;
 14958                           
 14959                           	psect	text47
 14960  00469A                     __ptext47:
 14961                           	opt stack 0
 14962  00469A                     _vscp_readNicknamePermanent:
 14963                           	opt stack 23
 14964                           
 14965                           ;main.c: 1374: return Read_b_eep(0x01);
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;incstack = 0
 14969                           ;incstack = 0
 14970  00469A  6A09               	clrf	?_Read_b_eep+1,c
 14971  00469C  0E01               	movlw	1
 14972  00469E  6E08               	movwf	?_Read_b_eep,c
 14973  0046A0  EF27  F023         	goto	_Read_b_eep	;wreg free
 14974  0046A4                     __end_of_vscp_readNicknamePermanent:
 14975                           	opt stack 0
 14976                           tblptru	equ	0xFF8
 14977                           tblptrh	equ	0xFF7
 14978                           tblptrl	equ	0xFF6
 14979                           tablat	equ	0xFF5
 14980                           prodh	equ	0xFF4
 14981                           prodl	equ	0xFF3
 14982                           intcon	equ	0xFF2
 14983                           intcon2	equ	0xFF1
 14984                           postinc0	equ	0xFEE
 14985                           wreg	equ	0xFE8
 14986                           indf1	equ	0xFE7
 14987                           fsr1h	equ	0xFE2
 14988                           fsr1l	equ	0xFE1
 14989                           indf2	equ	0xFDF
 14990                           postinc2	equ	0xFDE
 14991                           postdec2	equ	0xFDD
 14992                           plusw2	equ	0xFDB
 14993                           fsr2h	equ	0xFDA
 14994                           fsr2l	equ	0xFD9
 14995                           status	equ	0xFD8
 14996                           
 14997 ;; *************** function _vscp_handleSetNickname *****************
 14998 ;; Defined at:
 14999 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;		None               void
 15006 ;; Registers used:
 15007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : F/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15013 ;;      Params:         0       0       0       0       0       0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0
 15015 ;;      Temps:          0       0       0       0       0       0       0
 15016 ;;      Totals:         0       0       0       0       0       0       0
 15017 ;;Total ram usage:        0 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    4
 15020 ;; This function calls:
 15021 ;;		_vscp_writeNicknamePermanent
 15022 ;;		_vscp_setSegmentCRC
 15023 ;; This function is called by:
 15024 ;;		_vscp_handleProtocolEvent
 15025 ;; This function uses a non-reentrant model
 15026 ;;
 15027                           
 15028                           	psect	text48
 15029  00445A                     __ptext48:
 15030                           	opt stack 0
 15031  00445A                     _vscp_handleSetNickname:
 15032                           	opt stack 24
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 15036                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 15037                           
 15038                           ;incstack = 0
 15039                           ;incstack = 0
 15040  00445A  5197               	movf	_vscp_imsg& (0+255),w,b
 15041  00445C  0B0F               	andlw	15
 15042  00445E  0A02               	xorlw	2
 15043  004460  E10D               	bnz	l1336
 15044                           
 15045                           ; BSR set to: 0
 15046  004462  517E               	movf	_vscp_nickname& (0+255),w,b
 15047  004464  EE20  F09D         	lfsr	2,_vscp_imsg+6
 15048  004468  62DF               	cpfseq	indf2,c
 15049  00446A  D008               	goto	l1336
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 15053  00446C  C09E  F07E         	movff	_vscp_imsg+7,_vscp_nickname
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 15057  004470  517E               	movf	_vscp_nickname& (0+255),w,b
 15058  004472  ECF5  F022         	call	_vscp_writeNicknamePermanent
 15059                           
 15060                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 15061  004476  0E40               	movlw	64
 15062  004478  ECEA  F022         	call	_vscp_setSegmentCRC
 15063  00447C                     l1336:
 15064  00447C  0012               	return	
 15065  00447E                     __end_of_vscp_handleSetNickname:
 15066                           	opt stack 0
 15067                           tblptru	equ	0xFF8
 15068                           tblptrh	equ	0xFF7
 15069                           tblptrl	equ	0xFF6
 15070                           tablat	equ	0xFF5
 15071                           prodh	equ	0xFF4
 15072                           prodl	equ	0xFF3
 15073                           intcon	equ	0xFF2
 15074                           intcon2	equ	0xFF1
 15075                           postinc0	equ	0xFEE
 15076                           wreg	equ	0xFE8
 15077                           indf1	equ	0xFE7
 15078                           fsr1h	equ	0xFE2
 15079                           fsr1l	equ	0xFE1
 15080                           indf2	equ	0xFDF
 15081                           postinc2	equ	0xFDE
 15082                           postdec2	equ	0xFDD
 15083                           plusw2	equ	0xFDB
 15084                           fsr2h	equ	0xFDA
 15085                           fsr2l	equ	0xFD9
 15086                           status	equ	0xFD8
 15087                           
 15088 ;; *************** function _vscp_handleHeartbeat *****************
 15089 ;; Defined at:
 15090 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;		None
 15093 ;; Auto vars:     Size  Location     Type
 15094 ;;		None
 15095 ;; Return value:  Size  Location     Type
 15096 ;;		None               void
 15097 ;; Registers used:
 15098 ;;		wreg, status,2, status,0, cstack
 15099 ;; Tracked objects:
 15100 ;;		On entry : F/0
 15101 ;;		On exit  : 0/0
 15102 ;;		Unchanged: 0/0
 15103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15104 ;;      Params:         0       0       0       0       0       0       0
 15105 ;;      Locals:         0       0       0       0       0       0       0
 15106 ;;      Temps:          0       0       0       0       0       0       0
 15107 ;;      Totals:         0       0       0       0       0       0       0
 15108 ;;Total ram usage:        0 bytes
 15109 ;; Hardware stack levels used:    1
 15110 ;; Hardware stack levels required when called:    4
 15111 ;; This function calls:
 15112 ;;		_vscp_writeNicknamePermanent
 15113 ;;		_vscp_getSegmentCRC
 15114 ;;		_vscp_setSegmentCRC
 15115 ;; This function is called by:
 15116 ;;		_vscp_handleProtocolEvent
 15117 ;; This function uses a non-reentrant model
 15118 ;;
 15119                           
 15120                           	psect	text49
 15121  00421E                     __ptext49:
 15122                           	opt stack 0
 15123  00421E                     _vscp_handleHeartbeat:
 15124                           	opt stack 24
 15125                           
 15126                           ; BSR set to: 0
 15127                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 15128                           
 15129                           ;incstack = 0
 15130                           ;incstack = 0
 15131  00421E  EC52  F023         	call	_vscp_getSegmentCRC	;wreg free
 15132  004222  0900               	iorlw	0
 15133  004224  E116               	bnz	l14961
 15134                           
 15135                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 15136                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 15137  004226  0100               	movlb	0	; () banked
 15138  004228  5197               	movf	_vscp_imsg& (0+255),w,b
 15139  00422A  0B0F               	andlw	15
 15140  00422C  0A05               	xorlw	5
 15141  00422E  E115               	bnz	l1332
 15142                           
 15143                           ; BSR set to: 0
 15144  004230  EC52  F023         	call	_vscp_getSegmentCRC	;wreg free
 15145  004234  0100               	movlb	0	; () banked
 15146  004236  199D               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 15147  004238  E010               	bz	l1332
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15151  00423A  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15152  00423C  ECEA  F022         	call	_vscp_setSegmentCRC
 15153                           
 15154                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 15155  004240  0100               	movlb	0	; () banked
 15156  004242  697E               	setf	_vscp_nickname& (0+255),b
 15157                           
 15158                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 15159  004244  0EFF               	movlw	255
 15160  004246  ECF5  F022         	call	_vscp_writeNicknamePermanent
 15161                           
 15162                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 15163  00424A  0E01               	movlw	1
 15164  00424C  0100               	movlb	0	; () banked
 15165  00424E  6F7F               	movwf	_vscp_node_state& (0+255),b
 15166  004250  D004               	goto	l1332
 15167  004252                     l14961:
 15168                           
 15169                           ;vscp_firmware.c: 411: else {
 15170                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15171  004252  0100               	movlb	0	; () banked
 15172  004254  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15173  004256  ECEA  F022         	call	_vscp_setSegmentCRC
 15174  00425A                     l1332:
 15175  00425A  0012               	return	
 15176  00425C                     __end_of_vscp_handleHeartbeat:
 15177                           	opt stack 0
 15178                           tblptru	equ	0xFF8
 15179                           tblptrh	equ	0xFF7
 15180                           tblptrl	equ	0xFF6
 15181                           tablat	equ	0xFF5
 15182                           prodh	equ	0xFF4
 15183                           prodl	equ	0xFF3
 15184                           intcon	equ	0xFF2
 15185                           intcon2	equ	0xFF1
 15186                           postinc0	equ	0xFEE
 15187                           wreg	equ	0xFE8
 15188                           indf1	equ	0xFE7
 15189                           fsr1h	equ	0xFE2
 15190                           fsr1l	equ	0xFE1
 15191                           indf2	equ	0xFDF
 15192                           postinc2	equ	0xFDE
 15193                           postdec2	equ	0xFDD
 15194                           plusw2	equ	0xFDB
 15195                           fsr2h	equ	0xFDA
 15196                           fsr2l	equ	0xFD9
 15197                           status	equ	0xFD8
 15198                           
 15199 ;; *************** function _vscp_getMatrixInfo *****************
 15200 ;; Defined at:
 15201 ;;		line 3478 in file "../main.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;  pData           1    wreg     PTR unsigned char 
 15204 ;;		 -> vscp_omsg(13), 
 15205 ;; Auto vars:     Size  Location     Type
 15206 ;;  pData           1    0[COMRAM] PTR unsigned char 
 15207 ;;		 -> vscp_omsg(13), 
 15208 ;;  i               1    7[COMRAM] unsigned char 
 15209 ;; Return value:  Size  Location     Type
 15210 ;;		None               void
 15211 ;; Registers used:
 15212 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15213 ;; Tracked objects:
 15214 ;;		On entry : F/0
 15215 ;;		On exit  : F/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15218 ;;      Params:         0       0       0       0       0       0       0
 15219 ;;      Locals:         1       0       0       0       0       0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0
 15221 ;;      Totals:         1       0       0       0       0       0       0
 15222 ;;Total ram usage:        1 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    2
 15225 ;; This function calls:
 15226 ;;		Nothing
 15227 ;; This function is called by:
 15228 ;;		_vscp_handleProtocolEvent
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           	psect	text50
 15233  0044C4                     __ptext50:
 15234                           	opt stack 0
 15235  0044C4                     _vscp_getMatrixInfo:
 15236                           	opt stack 26
 15237                           
 15238                           ; BSR set to: 0
 15239                           ;main.c: 3479: uint8_t i;
 15240                           ;main.c: 3481: vscp_omsg.data[ 0 ] = 7;
 15241                           
 15242                           ;incstack = 0
 15243                           ;incstack = 0
 15244  0044C4  0E07               	movlw	7
 15245  0044C6  6FAA               	movwf	(_vscp_omsg+5)& (0+255),b
 15246                           
 15247                           ;main.c: 3482: vscp_omsg.data[ 1 ] = 72;
 15248  0044C8  0E48               	movlw	72
 15249  0044CA  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
 15250                           
 15251                           ;main.c: 3485: for ( i = 2; i < 8; i++ ) {
 15252  0044CC  0E02               	movlw	2
 15253  0044CE  6E08               	movwf	vscp_getMatrixInfo@i,c
 15254  0044D0                     l11867:
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;main.c: 3486: vscp_omsg.data[ i ] = 0;
 15258  0044D0  5008               	movf	vscp_getMatrixInfo@i,w,c
 15259  0044D2  0FAA               	addlw	low (_vscp_omsg+5)
 15260  0044D4  6ED9               	movwf	fsr2l,c
 15261  0044D6  6ADA               	clrf	fsr2h,c
 15262  0044D8  6ADF               	clrf	indf2,c
 15263                           
 15264                           ; BSR set to: 0
 15265  0044DA  2A08               	incf	vscp_getMatrixInfo@i,f,c
 15266                           
 15267                           ; BSR set to: 0
 15268  0044DC  0E07               	movlw	7
 15269  0044DE  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 15270  0044E0  D7F7               	goto	l11867
 15271                           
 15272                           ; BSR set to: 0
 15273  0044E2  0C07               	retlw	7
 15274  0044E4                     __end_of_vscp_getMatrixInfo:
 15275                           	opt stack 0
 15276                           tblptru	equ	0xFF8
 15277                           tblptrh	equ	0xFF7
 15278                           tblptrl	equ	0xFF6
 15279                           tablat	equ	0xFF5
 15280                           prodh	equ	0xFF4
 15281                           prodl	equ	0xFF3
 15282                           intcon	equ	0xFF2
 15283                           intcon2	equ	0xFF1
 15284                           postinc0	equ	0xFEE
 15285                           wreg	equ	0xFE8
 15286                           indf1	equ	0xFE7
 15287                           fsr1h	equ	0xFE2
 15288                           fsr1l	equ	0xFE1
 15289                           indf2	equ	0xFDF
 15290                           postinc2	equ	0xFDE
 15291                           postdec2	equ	0xFDD
 15292                           plusw2	equ	0xFDB
 15293                           fsr2h	equ	0xFDA
 15294                           fsr2l	equ	0xFD9
 15295                           status	equ	0xFD8
 15296                           
 15297 ;; *************** function _vscp_goBootloaderMode *****************
 15298 ;; Defined at:
 15299 ;;		line 3462 in file "../main.c"
 15300 ;; Parameters:    Size  Location     Type
 15301 ;;  algorithm       1    wreg     unsigned char 
 15302 ;; Auto vars:     Size  Location     Type
 15303 ;;  algorithm       1   11[COMRAM] unsigned char 
 15304 ;; Return value:  Size  Location     Type
 15305 ;;		None               void
 15306 ;; Registers used:
 15307 ;;		wreg, status,2, status,0, cstack
 15308 ;; Tracked objects:
 15309 ;;		On entry : F/0
 15310 ;;		On exit  : 0/0
 15311 ;;		Unchanged: 0/0
 15312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15313 ;;      Params:         0       0       0       0       0       0       0
 15314 ;;      Locals:         1       0       0       0       0       0       0
 15315 ;;      Temps:          0       0       0       0       0       0       0
 15316 ;;      Totals:         1       0       0       0       0       0       0
 15317 ;;Total ram usage:        1 bytes
 15318 ;; Hardware stack levels used:    1
 15319 ;; Hardware stack levels required when called:    3
 15320 ;; This function calls:
 15321 ;;		_Busy_eep
 15322 ;;		_Write_b_eep
 15323 ;; This function is called by:
 15324 ;;		_vscp_handleProtocolEvent
 15325 ;; This function uses a non-reentrant model
 15326 ;;
 15327                           
 15328                           	psect	text51
 15329  004558                     __ptext51:
 15330                           	opt stack 0
 15331  004558                     _vscp_goBootloaderMode:
 15332                           	opt stack 25
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;incstack = 0
 15336                           ;incstack = 0
 15337                           ;vscp_goBootloaderMode@algorithm stored from wreg
 15338  004558  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 15339                           
 15340                           ; BSR set to: 0
 15341                           ;main.c: 3463: if ( 0x01 != algorithm ) return;
 15342  00455C  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 15343  00455E  E109               	bnz	l1122
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;main.c: 3467: (Busy_eep(), Write_b_eep(0x00,0xff));
 15347  004560  EC5B  F023         	call	_Busy_eep	;wreg free
 15348  004564  6A09               	clrf	?_Write_b_eep+1,c
 15349  004566  6A08               	clrf	?_Write_b_eep,c
 15350  004568  0EFF               	movlw	255
 15351  00456A  680A               	setf	?_Write_b_eep+2,c
 15352  00456C  EC2E  F021         	call	_Write_b_eep	;wreg free
 15353  004570  00FF               	reset		;# 
 15354  004572                     l1122:
 15355  004572  0012               	return	
 15356  004574                     __end_of_vscp_goBootloaderMode:
 15357                           	opt stack 0
 15358                           tblptru	equ	0xFF8
 15359                           tblptrh	equ	0xFF7
 15360                           tblptrl	equ	0xFF6
 15361                           tablat	equ	0xFF5
 15362                           prodh	equ	0xFF4
 15363                           prodl	equ	0xFF3
 15364                           intcon	equ	0xFF2
 15365                           intcon2	equ	0xFF1
 15366                           postinc0	equ	0xFEE
 15367                           wreg	equ	0xFE8
 15368                           indf1	equ	0xFE7
 15369                           fsr1h	equ	0xFE2
 15370                           fsr1l	equ	0xFE1
 15371                           indf2	equ	0xFDF
 15372                           postinc2	equ	0xFDE
 15373                           postdec2	equ	0xFDD
 15374                           plusw2	equ	0xFDB
 15375                           fsr2h	equ	0xFDA
 15376                           fsr2l	equ	0xFD9
 15377                           status	equ	0xFD8
 15378                           
 15379 ;; *************** function _vscp_handleProbeState *****************
 15380 ;; Defined at:
 15381 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;		None
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;		None
 15386 ;; Return value:  Size  Location     Type
 15387 ;;		None               void
 15388 ;; Registers used:
 15389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15390 ;; Tracked objects:
 15391 ;;		On entry : 0/0
 15392 ;;		On exit  : F/0
 15393 ;;		Unchanged: 0/0
 15394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15395 ;;      Params:         0       0       0       0       0       0       0
 15396 ;;      Locals:         0       0       0       0       0       0       0
 15397 ;;      Temps:          0       0       0       0       0       0       0
 15398 ;;      Totals:         0       0       0       0       0       0       0
 15399 ;;Total ram usage:        0 bytes
 15400 ;; Hardware stack levels used:    1
 15401 ;; Hardware stack levels required when called:    8
 15402 ;; This function calls:
 15403 ;;		_vscp_goActiveState
 15404 ;;		_vscp_writeNicknamePermanent
 15405 ;;		_vscp_sendEvent
 15406 ;;		_vscp_setSegmentCRC
 15407 ;; This function is called by:
 15408 ;;		_main
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           	psect	text52
 15413  003DC0                     __ptext52:
 15414                           	opt stack 0
 15415  003DC0                     _vscp_handleProbeState:
 15416                           	opt stack 21
 15417                           
 15418                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15419                           
 15420                           ;incstack = 0
 15421                           ;incstack = 0
 15422  003DC0  D053               	goto	l12945
 15423  003DC2                     l12875:
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15427  003DC2  2857               	incf	_vscp_probe_address,w,c
 15428  003DC4  E010               	bz	l12891
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15432  003DC6  0E81               	movlw	129
 15433  003DC8  6FA5               	movwf	_vscp_omsg& (0+255),b
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15437  003DCA  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15441  003DCC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15442  003DCE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15443                           
 15444                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15445  003DD0  0E02               	movlw	2
 15446  003DD2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15450  003DD4  C057  F0AA         	movff	_vscp_probe_address,_vscp_omsg+5
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15454  003DD8  EC1A  F022         	call	_vscp_sendEvent	;wreg free
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15458  003DDC  0E01               	movlw	1
 15459  003DDE  6F80               	movwf	_vscp_node_substate& (0+255),b
 15460  003DE0                     l12889:
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15464  003DE0  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15465  003DE2  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15466                           
 15467                           ;vscp_firmware.c: 221: }
 15468  003DE4  D048               	goto	l1299
 15469  003DE6                     l12891:
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;vscp_firmware.c: 222: else {
 15473                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15474  003DE6  0E04               	movlw	4
 15475  003DE8  6F7F               	movwf	_vscp_node_state& (0+255),b
 15476                           
 15477                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15478  003DEA  0E81               	movlw	129
 15479  003DEC  6FA5               	movwf	_vscp_omsg& (0+255),b
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15483  003DEE  69AA               	setf	(_vscp_omsg+5)& (0+255),b
 15484                           
 15485                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15486  003DF0  0E07               	movlw	7
 15487  003DF2  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15491  003DF4  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15492  003DF6  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15493                           
 15494                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15495  003DF8  0E03               	movlw	3
 15496  003DFA  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15500  003DFC  EC1A  F022         	call	_vscp_sendEvent	;wreg free
 15501  003E00  D03A               	goto	l1299
 15502  003E02                     l1300:
 15503                           
 15504                           ; BSR set to: 0
 15505                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15506  003E02  AF97               	btfss	_vscp_imsg& (0+255),7,b
 15507  003E04  D00F               	goto	l12915
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15511                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15512  003E06  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
 15513  003E08  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15514  003E0A  E135               	bnz	l1299
 15515                           
 15516                           ; BSR set to: 0
 15517  003E0C  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
 15518  003E0E  0A03               	xorlw	3
 15519  003E10  E132               	bnz	l1299
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15523  003E12  6657               	tstfsz	_vscp_probe_address,c
 15524  003E14  D003               	goto	l12909
 15525                           
 15526                           ; BSR set to: 0
 15527                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15528  003E16  0E02               	movlw	2
 15529  003E18  6F7F               	movwf	_vscp_node_state& (0+255),b
 15530  003E1A  D7E2               	goto	l12889
 15531  003E1C                     l12909:
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;vscp_firmware.c: 257: else {
 15535                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15536  003E1C  2A57               	incf	_vscp_probe_address,f,c
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15540  003E1E  6B80               	clrf	_vscp_node_substate& (0+255),b
 15541  003E20                     l12913:
 15542                           
 15543                           ; BSR set to: 0
 15544                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15545  003E20  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15546  003E22  D029               	goto	l1299
 15547  003E24                     l12915:
 15548                           
 15549                           ; BSR set to: 0
 15550                           ;vscp_firmware.c: 267: else {
 15551                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15552  003E24  0EE9               	movlw	233
 15553  003E26  5D6E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15554  003E28  0E03               	movlw	3
 15555  003E2A  596F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15556  003E2C  E324               	bnc	l1299
 15557                           
 15558                           ; BSR set to: 0
 15559                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15560  003E2E  2B81               	incf	_vscp_probe_cnt& (0+255),f,b
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15564  003E30  0E02               	movlw	2
 15565  003E32  6581               	cpfsgt	_vscp_probe_cnt& (0+255),b
 15566  003E34  D017               	goto	l1307
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15570  003E36  6657               	tstfsz	_vscp_probe_address,c
 15571  003E38  D005               	goto	l1308
 15572                           
 15573                           ; BSR set to: 0
 15574                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15575  003E3A  2A57               	incf	_vscp_probe_address,f,c
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15579  003E3C  6B80               	clrf	_vscp_node_substate& (0+255),b
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15583  003E3E  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15584  003E40  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15585  003E42  D7EE               	goto	l12913
 15586  003E44                     l1308:
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;vscp_firmware.c: 285: else {
 15590                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15591  003E44  C057  F07E         	movff	_vscp_probe_address,_vscp_nickname
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15595  003E48  0E03               	movlw	3
 15596  003E4A  6F7F               	movwf	_vscp_node_state& (0+255),b
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15600  003E4C  6B80               	clrf	_vscp_node_substate& (0+255),b
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15604  003E4E  517E               	movf	_vscp_nickname& (0+255),w,b
 15605  003E50  ECF5  F022         	call	_vscp_writeNicknamePermanent
 15606                           
 15607                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15608  003E54  0E40               	movlw	64
 15609  003E56  ECEA  F022         	call	_vscp_setSegmentCRC
 15610                           
 15611                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15612  003E5A  0100               	movlb	0	; () banked
 15613  003E5C  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15617  003E5E  EC72  F022         	call	_vscp_goActiveState	;wreg free
 15618  003E62  D009               	goto	l1299
 15619  003E64                     l1307:
 15620                           
 15621                           ; BSR set to: 0
 15622                           ;vscp_firmware.c: 300: else {
 15623                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15624  003E64  6B80               	clrf	_vscp_node_substate& (0+255),b
 15625  003E66  D007               	goto	l1299
 15626  003E68                     l12945:
 15627  003E68  0100               	movlb	0	; () banked
 15628  003E6A  5180               	movf	_vscp_node_substate& (0+255),w,b
 15629                           
 15630                           ; Switch size 1, requested type "space"
 15631                           ; Number of cases is 3, Range of values is 0 to 2
 15632                           ; switch strategies available:
 15633                           ; Name         Instructions Cycles
 15634                           ; simple_byte           10     6 (average)
 15635                           ;	Chosen strategy is simple_byte
 15636  003E6C  E0AA               	bz	l12875
 15637  003E6E  0A01               	xorlw	1	; case 1
 15638  003E70  E0C8               	bz	l1300
 15639  003E72  0A03               	xorlw	3	; case 2
 15640  003E74  E1F7               	bnz	l1307
 15641  003E76                     l1299:
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15645  003E76  6B97               	clrf	_vscp_imsg& (0+255),b
 15646                           
 15647                           ; BSR set to: 0
 15648  003E78  0012               	return	
 15649  003E7A                     __end_of_vscp_handleProbeState:
 15650                           	opt stack 0
 15651                           tblptru	equ	0xFF8
 15652                           tblptrh	equ	0xFF7
 15653                           tblptrl	equ	0xFF6
 15654                           tablat	equ	0xFF5
 15655                           prodh	equ	0xFF4
 15656                           prodl	equ	0xFF3
 15657                           intcon	equ	0xFF2
 15658                           intcon2	equ	0xFF1
 15659                           postinc0	equ	0xFEE
 15660                           wreg	equ	0xFE8
 15661                           indf1	equ	0xFE7
 15662                           fsr1h	equ	0xFE2
 15663                           fsr1l	equ	0xFE1
 15664                           indf2	equ	0xFDF
 15665                           postinc2	equ	0xFDE
 15666                           postdec2	equ	0xFDD
 15667                           plusw2	equ	0xFDB
 15668                           fsr2h	equ	0xFDA
 15669                           fsr2l	equ	0xFD9
 15670                           status	equ	0xFD8
 15671                           
 15672 ;; *************** function _vscp_goActiveState *****************
 15673 ;; Defined at:
 15674 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15675 ;; Parameters:    Size  Location     Type
 15676 ;;		None
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;		None
 15679 ;; Return value:  Size  Location     Type
 15680 ;;		None               void
 15681 ;; Registers used:
 15682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15683 ;; Tracked objects:
 15684 ;;		On entry : 0/0
 15685 ;;		On exit  : F/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15688 ;;      Params:         0       0       0       0       0       0       0
 15689 ;;      Locals:         0       0       0       0       0       0       0
 15690 ;;      Temps:          0       0       0       0       0       0       0
 15691 ;;      Totals:         0       0       0       0       0       0       0
 15692 ;;Total ram usage:        0 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    7
 15695 ;; This function calls:
 15696 ;;		_vscp_sendEvent
 15697 ;; This function is called by:
 15698 ;;		_main
 15699 ;;		_vscp_handleProbeState
 15700 ;; This function uses a non-reentrant model
 15701 ;;
 15702                           
 15703                           	psect	text53
 15704  0044E4                     __ptext53:
 15705                           	opt stack 0
 15706  0044E4                     _vscp_goActiveState:
 15707                           	opt stack 21
 15708                           
 15709                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15710                           
 15711                           ; BSR set to: 0
 15712                           ;incstack = 0
 15713                           ;incstack = 0
 15714  0044E4  0E81               	movlw	129
 15715  0044E6  0100               	movlb	0	; () banked
 15716  0044E8  6FA5               	movwf	_vscp_omsg& (0+255),b
 15717                           
 15718                           ; BSR set to: 0
 15719                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15720  0044EA  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15721                           
 15722                           ; BSR set to: 0
 15723                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15724  0044EC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15725  0044EE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15726                           
 15727                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15728  0044F0  0E02               	movlw	2
 15729  0044F2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15733  0044F4  C07E  F0AA         	movff	_vscp_nickname,_vscp_omsg+5
 15734                           
 15735                           ; BSR set to: 0
 15736                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15737  0044F8  EC1A  F022         	call	_vscp_sendEvent	;wreg free
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15741  0044FC  0E01               	movlw	1
 15742  0044FE  6E56               	movwf	_vscp_initledfunc,c
 15743                           
 15744                           ; BSR set to: 0
 15745  004500  0C01               	retlw	1
 15746  004502                     __end_of_vscp_goActiveState:
 15747                           	opt stack 0
 15748                           tblptru	equ	0xFF8
 15749                           tblptrh	equ	0xFF7
 15750                           tblptrl	equ	0xFF6
 15751                           tablat	equ	0xFF5
 15752                           prodh	equ	0xFF4
 15753                           prodl	equ	0xFF3
 15754                           intcon	equ	0xFF2
 15755                           intcon2	equ	0xFF1
 15756                           postinc0	equ	0xFEE
 15757                           wreg	equ	0xFE8
 15758                           indf1	equ	0xFE7
 15759                           fsr1h	equ	0xFE2
 15760                           fsr1l	equ	0xFE1
 15761                           indf2	equ	0xFDF
 15762                           postinc2	equ	0xFDE
 15763                           postdec2	equ	0xFDD
 15764                           plusw2	equ	0xFDB
 15765                           fsr2h	equ	0xFDA
 15766                           fsr2l	equ	0xFD9
 15767                           status	equ	0xFD8
 15768                           
 15769 ;; *************** function _vscp_sendEvent *****************
 15770 ;; Defined at:
 15771 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15772 ;; Parameters:    Size  Location     Type
 15773 ;;		None
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  rv              1    0        unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  1    wreg      unsigned char 
 15778 ;; Registers used:
 15779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : F/0
 15782 ;;		On exit  : F/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15785 ;;      Params:         0       0       0       0       0       0       0
 15786 ;;      Locals:         1       0       0       0       0       0       0
 15787 ;;      Temps:          0       0       0       0       0       0       0
 15788 ;;      Totals:         1       0       0       0       0       0       0
 15789 ;;Total ram usage:        1 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    6
 15792 ;; This function calls:
 15793 ;;		_sendVSCPFrame
 15794 ;; This function is called by:
 15795 ;;		_vscp_handleProbeState
 15796 ;;		_vscp_goActiveState
 15797 ;;		_vscp_sendHeartBeat
 15798 ;;		_vscp_newNodeOnline
 15799 ;;		_vscp_handleProtocolEvent
 15800 ;; This function uses a non-reentrant model
 15801 ;;
 15802                           
 15803                           	psect	text54
 15804  004434                     __ptext54:
 15805                           	opt stack 0
 15806  004434                     _vscp_sendEvent:
 15807                           	opt stack 21
 15808                           
 15809                           ; BSR set to: 0
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;incstack = 0
 15813                           ;incstack = 0
 15814  004434  C0A7  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15815  004438  C0A8  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15816  00443C  C0A9  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15817  004440  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15818  004444  C0A6  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15819  004448  51A5               	movf	_vscp_omsg& (0+255),w,b
 15820  00444A  0B0F               	andlw	15
 15821  00444C  6E44               	movwf	?_sendVSCPFrame+5,c
 15822  00444E  0E00               	movlw	high (_vscp_omsg+5)
 15823  004450  6E46               	movwf	?_sendVSCPFrame+7,c
 15824  004452  0EAA               	movlw	low (_vscp_omsg+5)
 15825  004454  6E45               	movwf	?_sendVSCPFrame+6,c
 15826  004456  EF3D  F01F         	goto	_sendVSCPFrame	;wreg free
 15827  00445A                     __end_of_vscp_sendEvent:
 15828                           	opt stack 0
 15829                           tblptru	equ	0xFF8
 15830                           tblptrh	equ	0xFF7
 15831                           tblptrl	equ	0xFF6
 15832                           tablat	equ	0xFF5
 15833                           prodh	equ	0xFF4
 15834                           prodl	equ	0xFF3
 15835                           intcon	equ	0xFF2
 15836                           intcon2	equ	0xFF1
 15837                           postinc0	equ	0xFEE
 15838                           wreg	equ	0xFE8
 15839                           indf1	equ	0xFE7
 15840                           fsr1h	equ	0xFE2
 15841                           fsr1l	equ	0xFE1
 15842                           indf2	equ	0xFDF
 15843                           postinc2	equ	0xFDE
 15844                           postdec2	equ	0xFDD
 15845                           plusw2	equ	0xFDB
 15846                           fsr2h	equ	0xFDA
 15847                           fsr2l	equ	0xFD9
 15848                           status	equ	0xFD8
 15849                           
 15850 ;; *************** function _sendVSCPFrame *****************
 15851 ;; Defined at:
 15852 ;;		line 3537 in file "../main.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;  vscpclass       2   62[COMRAM] unsigned short 
 15855 ;;  vscptype        1   64[COMRAM] unsigned char 
 15856 ;;  nodeid          1   65[COMRAM] unsigned char 
 15857 ;;  priority        1   66[COMRAM] unsigned char 
 15858 ;;  size            1   67[COMRAM] unsigned char 
 15859 ;;  pData           2   68[COMRAM] PTR unsigned char 
 15860 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 15861 ;; Auto vars:     Size  Location     Type
 15862 ;;  id              4   70[COMRAM] unsigned long 
 15863 ;; Return value:  Size  Location     Type
 15864 ;;                  1    wreg      unsigned char 
 15865 ;; Registers used:
 15866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15867 ;; Tracked objects:
 15868 ;;		On entry : F/0
 15869 ;;		On exit  : F/0
 15870 ;;		Unchanged: 0/0
 15871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15872 ;;      Params:         8       0       0       0       0       0       0
 15873 ;;      Locals:         4       0       0       0       0       0       0
 15874 ;;      Temps:          0      20       0       0       0       0       0
 15875 ;;      Totals:        12      20       0       0       0       0       0
 15876 ;;Total ram usage:       32 bytes
 15877 ;; Hardware stack levels used:    1
 15878 ;; Hardware stack levels required when called:    5
 15879 ;; This function calls:
 15880 ;;		_sendCANFrame
 15881 ;; This function is called by:
 15882 ;;		_doApplicationOneSecondWork
 15883 ;;		_SendInformationEvent
 15884 ;;		_vscp_sendEvent
 15885 ;; This function uses a non-reentrant model
 15886 ;;
 15887                           
 15888                           	psect	text55
 15889  003E7A                     __ptext55:
 15890                           	opt stack 0
 15891  003E7A                     _sendVSCPFrame:
 15892                           	opt stack 23
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;main.c: 3538: uint32_t id = ( (uint32_t)priority << 26 ) |
 15896                           ;main.c: 3539: ( (uint32_t)vscpclass << 16 ) |
 15897                           ;main.c: 3540: ( (uint32_t)vscptype << 8 ) |
 15898                           ;main.c: 3541: nodeid;
 15899                           
 15900                           ; BSR set to: 0
 15901                           ;incstack = 0
 15902                           ;incstack = 0
 15903  003E7A  C041  F0BC         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15904  003E7E  6BBD               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15905  003E80  6BBE               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15906  003E82  6BBF               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15907  003E84  C0BE  F0BF         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15908  003E88  C0BD  F0BE         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15909  003E8C  C0BC  F0BD         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15910  003E90  6BBC               	clrf	??_sendVSCPFrame& (0+255),b
 15911  003E92  503F               	movf	sendVSCPFrame@vscpclass,w,c
 15912  003E94  6FC0               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15913  003E96  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 15914  003E98  6FC1               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15915  003E9A  6BC2               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15916  003E9C  6BC3               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15917  003E9E  C0C1  F0C3         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15918  003EA2  C0C0  F0C2         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15919  003EA6  6BC1               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15920  003EA8  6BC0               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15921  003EAA  C043  F0C4         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15922  003EAE  6BC5               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15923  003EB0  6BC6               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15924  003EB2  6BC7               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15925  003EB4  0E1A               	movlw	26
 15926  003EB6                     u18255:
 15927  003EB6  90D8               	bcf	status,0,c
 15928  003EB8  37C4               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15929  003EBA  37C5               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15930  003EBC  37C6               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15931  003EBE  37C7               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15932  003EC0  2EE8               	decfsz	wreg,f,c
 15933  003EC2  D7F9               	goto	u18255
 15934  003EC4  51C0               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15935  003EC6  11C4               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15936  003EC8  6FC8               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15937  003ECA  51C1               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15938  003ECC  11C5               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15939  003ECE  6FC9               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15940  003ED0  51C2               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15941  003ED2  11C6               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15942  003ED4  6FCA               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15943  003ED6  51C3               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15944  003ED8  11C7               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15945  003EDA  6FCB               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15946  003EDC  51BC               	movf	??_sendVSCPFrame& (0+255),w,b
 15947  003EDE  11C8               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15948  003EE0  6FCC               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15949  003EE2  51BD               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15950  003EE4  11C9               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15951  003EE6  6FCD               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15952  003EE8  51BE               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15953  003EEA  11CA               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15954  003EEC  6FCE               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15955  003EEE  51BF               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15956  003EF0  11CB               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15957  003EF2  6FCF               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15958  003EF4  5042               	movf	sendVSCPFrame@nodeid,w,c
 15959  003EF6  11CC               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15960  003EF8  6E47               	movwf	sendVSCPFrame@id,c
 15961  003EFA  51CD               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15962  003EFC  6E48               	movwf	sendVSCPFrame@id+1,c
 15963  003EFE  51CE               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15964  003F00  6E49               	movwf	sendVSCPFrame@id+2,c
 15965  003F02  51CF               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15966  003F04  6E4A               	movwf	sendVSCPFrame@id+3,c
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;main.c: 3543: if ( !sendCANFrame( id, size, pData ) ) {
 15970  003F06  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 15971  003F0A  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15972  003F0E  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15973  003F12  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15974  003F16  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15975  003F1A  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15976  003F1E  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 15977  003F22  ECEE  F020         	call	_sendCANFrame	;wreg free
 15978  003F26  0900               	iorlw	0
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;main.c: 3544: return 0;
 15982  003F28  0E00               	movlw	0
 15983  003F2A  A4D8               	btfss	status,2,c
 15984                           
 15985                           ; BSR set to: 0
 15986                           ;main.c: 3545: }
 15987                           ;main.c: 3547: return 1;
 15988  003F2C  0E01               	movlw	1
 15989                           
 15990                           ; BSR set to: 0
 15991  003F2E  0012               	return	
 15992  003F30                     __end_of_sendVSCPFrame:
 15993                           	opt stack 0
 15994                           tblptru	equ	0xFF8
 15995                           tblptrh	equ	0xFF7
 15996                           tblptrl	equ	0xFF6
 15997                           tablat	equ	0xFF5
 15998                           prodh	equ	0xFF4
 15999                           prodl	equ	0xFF3
 16000                           intcon	equ	0xFF2
 16001                           intcon2	equ	0xFF1
 16002                           postinc0	equ	0xFEE
 16003                           wreg	equ	0xFE8
 16004                           indf1	equ	0xFE7
 16005                           fsr1h	equ	0xFE2
 16006                           fsr1l	equ	0xFE1
 16007                           indf2	equ	0xFDF
 16008                           postinc2	equ	0xFDE
 16009                           postdec2	equ	0xFDD
 16010                           plusw2	equ	0xFDB
 16011                           fsr2h	equ	0xFDA
 16012                           fsr2l	equ	0xFD9
 16013                           status	equ	0xFD8
 16014                           
 16015 ;; *************** function _sendCANFrame *****************
 16016 ;; Defined at:
 16017 ;;		line 3582 in file "../main.c"
 16018 ;; Parameters:    Size  Location     Type
 16019 ;;  id              4   54[COMRAM] unsigned long 
 16020 ;;  dlc             1   58[COMRAM] unsigned char 
 16021 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 16022 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16023 ;; Auto vars:     Size  Location     Type
 16024 ;;  rv              1   61[COMRAM] unsigned char 
 16025 ;; Return value:  Size  Location     Type
 16026 ;;                  1    wreg      unsigned char 
 16027 ;; Registers used:
 16028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16029 ;; Tracked objects:
 16030 ;;		On entry : F/0
 16031 ;;		On exit  : F/0
 16032 ;;		Unchanged: 0/0
 16033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16034 ;;      Params:         7       0       0       0       0       0       0
 16035 ;;      Locals:         1       0       0       0       0       0       0
 16036 ;;      Temps:          0       0       0       0       0       0       0
 16037 ;;      Totals:         8       0       0       0       0       0       0
 16038 ;;Total ram usage:        8 bytes
 16039 ;; Hardware stack levels used:    1
 16040 ;; Hardware stack levels required when called:    4
 16041 ;; This function calls:
 16042 ;;		_ECANSendMessage
 16043 ;; This function is called by:
 16044 ;;		_sendVSCPFrame
 16045 ;; This function uses a non-reentrant model
 16046 ;;
 16047                           
 16048                           	psect	text56
 16049  0041DC                     __ptext56:
 16050                           	opt stack 0
 16051  0041DC                     _sendCANFrame:
 16052                           	opt stack 23
 16053                           
 16054                           ; BSR set to: 0
 16055                           ;main.c: 3583: uint8_t rv = 0;
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;incstack = 0
 16059                           ;incstack = 0
 16060  0041DC  6A3E               	clrf	sendCANFrame@rv,c
 16061                           
 16062                           ;main.c: 3584: sendTimer = 0;
 16063  0041DE  6B79               	clrf	_sendTimer& (0+255),b
 16064                           
 16065                           ;main.c: 3586: while ( sendTimer < 1 ) {
 16066  0041E0  D017               	goto	l14933
 16067  0041E2                     l14929:
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;main.c: 3587: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16071  0041E2  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 16072  0041E6  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16073  0041EA  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16074  0041EE  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16075  0041F2  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16076  0041F6  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16077  0041FA  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16078  0041FE  0E20               	movlw	32
 16079  004200  6E19               	movwf	?_ECANSendMessage+7,c
 16080  004202  ECE2  F018         	call	_ECANSendMessage	;wreg free
 16081  004206  0900               	iorlw	0
 16082  004208  E003               	bz	l14933
 16083                           
 16084                           ;main.c: 3588: rv = 1;
 16085  00420A  0E01               	movlw	1
 16086  00420C  6E3E               	movwf	sendCANFrame@rv,c
 16087                           
 16088                           ;main.c: 3589: break;
 16089  00420E  D003               	goto	l1153
 16090  004210                     l14933:
 16091  004210  0100               	movlb	0	; () banked
 16092  004212  5179               	movf	_sendTimer& (0+255),w,b
 16093  004214  E0E6               	bz	l14929
 16094  004216                     l1153:
 16095                           
 16096                           ;main.c: 3590: }
 16097                           ;main.c: 3591: }
 16098                           ;main.c: 3593: vscp_omsg.flags = 0;
 16099  004216  0100               	movlb	0	; () banked
 16100  004218  6BA5               	clrf	_vscp_omsg& (0+255),b
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;main.c: 3595: return rv;
 16104  00421A  503E               	movf	sendCANFrame@rv,w,c
 16105                           
 16106                           ; BSR set to: 0
 16107  00421C  0012               	return	
 16108  00421E                     __end_of_sendCANFrame:
 16109                           	opt stack 0
 16110                           tblptru	equ	0xFF8
 16111                           tblptrh	equ	0xFF7
 16112                           tblptrl	equ	0xFF6
 16113                           tablat	equ	0xFF5
 16114                           prodh	equ	0xFF4
 16115                           prodl	equ	0xFF3
 16116                           intcon	equ	0xFF2
 16117                           intcon2	equ	0xFF1
 16118                           postinc0	equ	0xFEE
 16119                           wreg	equ	0xFE8
 16120                           indf1	equ	0xFE7
 16121                           fsr1h	equ	0xFE2
 16122                           fsr1l	equ	0xFE1
 16123                           indf2	equ	0xFDF
 16124                           postinc2	equ	0xFDE
 16125                           postdec2	equ	0xFDD
 16126                           plusw2	equ	0xFDB
 16127                           fsr2h	equ	0xFDA
 16128                           fsr2l	equ	0xFD9
 16129                           status	equ	0xFD8
 16130                           
 16131 ;; *************** function _ECANSendMessage *****************
 16132 ;; Defined at:
 16133 ;;		line 617 in file "../ECAN.c"
 16134 ;; Parameters:    Size  Location     Type
 16135 ;;  id              4   17[COMRAM] unsigned long 
 16136 ;;  data            2   21[COMRAM] PTR unsigned char 
 16137 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16138 ;;  dataLen         1   23[COMRAM] unsigned char 
 16139 ;;  msgFlags        1   24[COMRAM] enum E16315
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 16142 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16143 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16144 ;;		 -> B0CON(1), 
 16145 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 16146 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16147 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16148 ;;		 -> B0CON(1), 
 16149 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 16150 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16151 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16152 ;;		 -> B0CON(1), 
 16153 ;;  i               1   51[COMRAM] unsigned char 
 16154 ;;  temp            1   50[COMRAM] unsigned char 
 16155 ;;  tempBSEL0       1   47[COMRAM] struct .
 16156 ;;  j               1   46[COMRAM] unsigned char 
 16157 ;;  buffers         1   45[COMRAM] unsigned char 
 16158 ;;  mode            1   44[COMRAM] unsigned char 
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      enum E15660
 16161 ;; Registers used:
 16162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : F/0
 16165 ;;		On exit  : 0/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16168 ;;      Params:         8       0       0       0       0       0       0
 16169 ;;      Locals:        28       0       0       0       0       0       0
 16170 ;;      Temps:          1       0       0       0       0       0       0
 16171 ;;      Totals:        37       0       0       0       0       0       0
 16172 ;;Total ram usage:       37 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:    3
 16175 ;; This function calls:
 16176 ;;		__CANIDToRegs
 16177 ;; This function is called by:
 16178 ;;		_sendCANFrame
 16179 ;; This function uses a non-reentrant model
 16180 ;;
 16181                           
 16182                           	psect	text57
 16183  0031C4                     __ptext57:
 16184                           	opt stack 0
 16185  0031C4                     _ECANSendMessage:
 16186                           	opt stack 23
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;ECAN.c: 619: BYTE mode;
 16190                           ;ECAN.c: 620: BYTE buffers;
 16191                           ;ECAN.c: 628: BYTE i,j;
 16192                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16193                           ;ECAN.c: 630: BYTE* pb[9];
 16194                           ;ECAN.c: 631: BYTE temp;
 16195                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16196                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16197                           
 16198                           ; BSR set to: 0
 16199                           ;incstack = 0
 16200                           ;incstack = 0
 16201  0031C4  0E0F               	movlw	15	;volatile
 16202  0031C6  6E1C               	movwf	ECANSendMessage@pb+1,c
 16203  0031C8  0E40               	movlw	64	;volatile
 16204  0031CA  6E1B               	movwf	ECANSendMessage@pb,c
 16205                           
 16206                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16207  0031CC  0E0F               	movlw	15	;volatile
 16208  0031CE  6E1E               	movwf	ECANSendMessage@pb+3,c
 16209  0031D0  0E30               	movlw	48	;volatile
 16210  0031D2  6E1D               	movwf	ECANSendMessage@pb+2,c
 16211                           
 16212                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16213  0031D4  0E0F               	movlw	15	;volatile
 16214  0031D6  6E20               	movwf	ECANSendMessage@pb+5,c
 16215  0031D8  0E20               	movlw	32	;volatile
 16216  0031DA  6E1F               	movwf	ECANSendMessage@pb+4,c
 16217                           
 16218                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16219  0031DC  0E0E               	movlw	14	;volatile
 16220  0031DE  6E22               	movwf	ECANSendMessage@pb+7,c
 16221  0031E0  0E20               	movlw	32	;volatile
 16222  0031E2  6E21               	movwf	ECANSendMessage@pb+6,c
 16223                           
 16224                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16225  0031E4  0E0E               	movlw	14	;volatile
 16226  0031E6  6E24               	movwf	ECANSendMessage@pb+9,c
 16227  0031E8  0E30               	movlw	48	;volatile
 16228  0031EA  6E23               	movwf	ECANSendMessage@pb+8,c
 16229                           
 16230                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16231  0031EC  0E0E               	movlw	14	;volatile
 16232  0031EE  6E26               	movwf	ECANSendMessage@pb+11,c
 16233  0031F0  0E40               	movlw	64	;volatile
 16234  0031F2  6E25               	movwf	ECANSendMessage@pb+10,c
 16235                           
 16236                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16237  0031F4  0E0E               	movlw	14	;volatile
 16238  0031F6  6E28               	movwf	ECANSendMessage@pb+13,c
 16239  0031F8  0E50               	movlw	80	;volatile
 16240  0031FA  6E27               	movwf	ECANSendMessage@pb+12,c
 16241                           
 16242                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16243  0031FC  0E0E               	movlw	14	;volatile
 16244  0031FE  6E2A               	movwf	ECANSendMessage@pb+15,c
 16245  003200  0E60               	movlw	96	;volatile
 16246  003202  6E29               	movwf	ECANSendMessage@pb+14,c
 16247                           
 16248                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16249  003204  0E0E               	movlw	14	;volatile
 16250  003206  6E2C               	movwf	ECANSendMessage@pb+17,c
 16251  003208  0E70               	movlw	112	;volatile
 16252  00320A  6E2B               	movwf	ECANSendMessage@pb+16,c
 16253                           
 16254                           ; BSR set to: 14
 16255                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16256  00320C  5077               	movf	3959,w,c	;volatile
 16257  00320E  0BC0               	andlw	192
 16258  003210  6E2D               	movwf	ECANSendMessage@mode,c
 16259                           
 16260                           ; BSR set to: 14
 16261                           ;ECAN.c: 660: if ( mode == 0x00 )
 16262  003212  662D               	tstfsz	ECANSendMessage@mode,c
 16263  003214  D002               	goto	l12341
 16264                           
 16265                           ; BSR set to: 14
 16266                           ;ECAN.c: 661: buffers = 2;
 16267  003216  0E02               	movlw	2
 16268  003218  D001               	goto	L49
 16269  00321A                     l12341:
 16270                           
 16271                           ; BSR set to: 14
 16272                           ;ECAN.c: 662: else
 16273                           ;ECAN.c: 663: buffers = 8;
 16274  00321A  0E08               	movlw	8
 16275  00321C                     L49:
 16276  00321C  6E2E               	movwf	ECANSendMessage@buffers,c
 16277                           
 16278                           ; BSR set to: 14
 16279                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16280  00321E  010D               	movlb	13	; () banked
 16281  003220  90D8               	bcf	status,0,c
 16282  003222  31F8               	rrcf	248,w,b	;volatile
 16283  003224  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 16284                           
 16285                           ; BSR set to: 13
 16286                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16287  003226  6A34               	clrf	ECANSendMessage@i,c
 16288  003228  D07D               	goto	l12401
 16289  00322A                     l12347:
 16290                           
 16291                           ;ECAN.c: 688: {
 16292                           ;ECAN.c: 693: ptr = pb[i];
 16293  00322A  5034               	movf	ECANSendMessage@i,w,c
 16294  00322C  0D02               	mullw	2
 16295  00322E  50F3               	movf	prodl,w,c
 16296  003230  0F1B               	addlw	low ECANSendMessage@pb
 16297  003232  6ED9               	movwf	fsr2l,c
 16298  003234  6ADA               	clrf	fsr2h,c
 16299  003236  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 16300  00323A  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 16301                           
 16302                           ;ECAN.c: 694: tempPtr = ptr;
 16303  00323E  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16304  003242  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16305                           
 16306                           ;ECAN.c: 702: if ( i > 2 )
 16307  003246  0E02               	movlw	2
 16308  003248  6434               	cpfsgt	ECANSendMessage@i,c
 16309  00324A  D004               	goto	l12359
 16310                           
 16311                           ;ECAN.c: 703: {
 16312                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16313  00324C  90D8               	bcf	status,0,c
 16314  00324E  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16315                           
 16316                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16317  003250  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 16318  003252  D067               	goto	l12399
 16319  003254                     l12359:
 16320                           
 16321                           ;ECAN.c: 714: }
 16322                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16323  003254  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16324  003258  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16325  00325C  50DF               	movf	indf2,w,c
 16326  00325E  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16327  003260  B61A               	btfsc	??_ECANSendMessage,3,c
 16328  003262  D05F               	goto	l12399
 16329                           
 16330                           ;ECAN.c: 721: {
 16331                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16332  003264  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16333  003268  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16334  00326C  0EFC               	movlw	252
 16335  00326E  16DF               	andwf	indf2,f,c
 16336                           
 16337                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16338  003270  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16339  003274  0E03               	movlw	3
 16340  003276  161A               	andwf	??_ECANSendMessage,f,c
 16341  003278  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16342  00327C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16343  003280  501A               	movf	??_ECANSendMessage,w,c
 16344  003282  12DF               	iorwf	indf2,f,c
 16345                           
 16346                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16347  003284  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 16348  003286  D004               	goto	l168
 16349                           
 16350                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16351  003288  5018               	movf	ECANSendMessage@dataLen,w,c
 16352  00328A  0940               	iorlw	64
 16353  00328C  6E33               	movwf	ECANSendMessage@temp,c
 16354  00328E  D002               	goto	l12369
 16355  003290                     l168:
 16356                           
 16357                           ;ECAN.c: 729: else
 16358                           ;ECAN.c: 730: temp = dataLen;
 16359  003290  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16360  003294                     l12369:
 16361                           
 16362                           ;ECAN.c: 732: *(ptr+5) = temp;
 16363  003294  EE20 F005          	lfsr	2,5
 16364  003298  5035               	movf	ECANSendMessage@ptr,w,c
 16365  00329A  26D9               	addwf	fsr2l,f,c
 16366  00329C  5036               	movf	ECANSendMessage@ptr+1,w,c
 16367  00329E  22DA               	addwfc	fsr2h,f,c
 16368  0032A0  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 16369                           
 16370                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16371  0032A4  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 16372  0032A6  D003               	goto	l170
 16373                           
 16374                           ;ECAN.c: 736: temp = 1;
 16375  0032A8  0E01               	movlw	1
 16376  0032AA  6E33               	movwf	ECANSendMessage@temp,c
 16377  0032AC  D001               	goto	l12375
 16378  0032AE                     l170:
 16379                           
 16380                           ;ECAN.c: 738: else
 16381                           ;ECAN.c: 739: temp = 0;
 16382  0032AE  6A33               	clrf	ECANSendMessage@temp,c
 16383  0032B0                     l12375:
 16384                           
 16385                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16386  0032B0  2835               	incf	ECANSendMessage@ptr,w,c
 16387  0032B2  6E08               	movwf	?__CANIDToRegs,c
 16388  0032B4  0E00               	movlw	0
 16389  0032B6  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 16390  0032B8  6E09               	movwf	?__CANIDToRegs+1,c
 16391  0032BA  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16392  0032BE  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16393  0032C2  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16394  0032C6  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16395  0032CA  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16396  0032CE  ECFD  F01B         	call	__CANIDToRegs	;wreg free
 16397                           
 16398                           ;ECAN.c: 745: ptr += 6;
 16399  0032D2  0E06               	movlw	6
 16400  0032D4  2635               	addwf	ECANSendMessage@ptr,f,c
 16401  0032D6  0E00               	movlw	0
 16402  0032D8  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 16403                           
 16404                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16405  0032DA  6A2F               	clrf	ECANSendMessage@j,c
 16406  0032DC  D00F               	goto	l12389
 16407  0032DE                     l12381:
 16408                           
 16409                           ;ECAN.c: 748: *ptr++ = *data++;
 16410  0032DE  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 16411  0032E2  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16412  0032E6  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16413  0032EA  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16414  0032EE  CFDF FFE7          	movff	indf2,indf1
 16415  0032F2  4A16               	infsnz	ECANSendMessage@data,f,c
 16416  0032F4  2A17               	incf	ECANSendMessage@data+1,f,c
 16417  0032F6  4A35               	infsnz	ECANSendMessage@ptr,f,c
 16418  0032F8  2A36               	incf	ECANSendMessage@ptr+1,f,c
 16419  0032FA  2A2F               	incf	ECANSendMessage@j,f,c
 16420  0032FC                     l12389:
 16421  0032FC  5018               	movf	ECANSendMessage@dataLen,w,c
 16422  0032FE  5C2F               	subwf	ECANSendMessage@j,w,c
 16423  003300  E3EE               	bnc	l12381
 16424                           
 16425                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16426  003302  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16427  003306  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16428  00330A  50DF               	movf	indf2,w,c
 16429  00330C  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16430  00330E  B41A               	btfsc	??_ECANSendMessage,2,c
 16431  003310  D006               	goto	l12395
 16432                           
 16433                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16434  003312  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16435  003316  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16436  00331A  0E00               	movlw	0
 16437  00331C  86DB               	bsf	plusw2,3,c
 16438  00331E                     l12395:
 16439                           
 16440                           ;ECAN.c: 755: return TRUE;
 16441  00331E  0E01               	movlw	1
 16442  003320  D005               	goto	l176
 16443  003322                     l12399:
 16444  003322  2A34               	incf	ECANSendMessage@i,f,c
 16445  003324                     l12401:
 16446  003324  502E               	movf	ECANSendMessage@buffers,w,c
 16447  003326  5C34               	subwf	ECANSendMessage@i,w,c
 16448  003328  E380               	bnc	l12347
 16449                           
 16450                           ;ECAN.c: 756: }
 16451                           ;ECAN.c: 757: }
 16452                           ;ECAN.c: 760: return FALSE;
 16453  00332A  0E00               	movlw	0
 16454  00332C                     l176:
 16455  00332C  0012               	return	
 16456  00332E                     __end_of_ECANSendMessage:
 16457                           	opt stack 0
 16458                           tblptru	equ	0xFF8
 16459                           tblptrh	equ	0xFF7
 16460                           tblptrl	equ	0xFF6
 16461                           tablat	equ	0xFF5
 16462                           prodh	equ	0xFF4
 16463                           prodl	equ	0xFF3
 16464                           intcon	equ	0xFF2
 16465                           intcon2	equ	0xFF1
 16466                           postinc0	equ	0xFEE
 16467                           wreg	equ	0xFE8
 16468                           indf1	equ	0xFE7
 16469                           fsr1h	equ	0xFE2
 16470                           fsr1l	equ	0xFE1
 16471                           indf2	equ	0xFDF
 16472                           postinc2	equ	0xFDE
 16473                           postdec2	equ	0xFDD
 16474                           plusw2	equ	0xFDB
 16475                           fsr2h	equ	0xFDA
 16476                           fsr2l	equ	0xFD9
 16477                           status	equ	0xFD8
 16478                           
 16479 ;; *************** function __CANIDToRegs *****************
 16480 ;; Defined at:
 16481 ;;		line 1099 in file "../ECAN.c"
 16482 ;; Parameters:    Size  Location     Type
 16483 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 16484 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), RXM1SIDH(1), 
 16485 ;;		 -> RXF1SIDH(1), B5CON(1), B4CON(1), B3CON(1), 
 16486 ;;		 -> B2CON(1), B1CON(1), B0CON(1), 
 16487 ;;  val             4    9[COMRAM] unsigned long 
 16488 ;;  type            1   13[COMRAM] unsigned char 
 16489 ;; Auto vars:     Size  Location     Type
 16490 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 16491 ;;		 -> _CANIDToRegs@val(4), 
 16492 ;; Return value:  Size  Location     Type
 16493 ;;		None               void
 16494 ;; Registers used:
 16495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16496 ;; Tracked objects:
 16497 ;;		On entry : 0/F
 16498 ;;		On exit  : 0/0
 16499 ;;		Unchanged: 0/0
 16500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16501 ;;      Params:         7       0       0       0       0       0       0
 16502 ;;      Locals:         1       0       0       0       0       0       0
 16503 ;;      Temps:          2       0       0       0       0       0       0
 16504 ;;      Totals:        10       0       0       0       0       0       0
 16505 ;;Total ram usage:       10 bytes
 16506 ;; Hardware stack levels used:    1
 16507 ;; Hardware stack levels required when called:    2
 16508 ;; This function calls:
 16509 ;;		Nothing
 16510 ;; This function is called by:
 16511 ;;		_ECANSendMessage
 16512 ;;		_calculateSetFilterMask
 16513 ;; This function uses a non-reentrant model
 16514 ;;
 16515                           
 16516                           	psect	text58
 16517  0037FA                     __ptext58:
 16518                           	opt stack 0
 16519  0037FA                     __CANIDToRegs:
 16520                           	opt stack 23
 16521                           
 16522                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16523                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16524                           
 16525                           ;incstack = 0
 16526                           ;incstack = 0
 16527  0037FA  0E0A               	movlw	low __CANIDToRegs@val
 16528  0037FC  6E11               	movwf	__CANIDToRegs@Value,c
 16529                           
 16530                           ;ECAN.c: 1104: if ( type == 0 )
 16531  0037FE  660E               	tstfsz	__CANIDToRegs@type,c
 16532  003800  D022               	goto	l12417
 16533                           
 16534                           ;ECAN.c: 1105: {
 16535                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16536  003802  5011               	movf	__CANIDToRegs@Value,w,c
 16537  003804  6ED9               	movwf	fsr2l,c
 16538  003806  6ADA               	clrf	fsr2h,c
 16539  003808  50DF               	movf	indf2,w,c
 16540  00380A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16541  00380C  90D8               	bcf	status,0,c
 16542  00380E  320F               	rrcf	??__CANIDToRegs,f,c
 16543  003810  90D8               	bcf	status,0,c
 16544  003812  320F               	rrcf	??__CANIDToRegs,f,c
 16545  003814  90D8               	bcf	status,0,c
 16546  003816  300F               	rrcf	??__CANIDToRegs,w,c
 16547                           
 16548                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16549  003818  D862               	call	PL48	;call to abstracted procedure
 16550  00381A  2AD9               	incf	fsr2l,f,c
 16551  00381C  6ADA               	clrf	fsr2h,c
 16552  00381E  D872               	call	PL100	;call to abstracted procedure
 16553  003820                     u15985:
 16554  003820  90D8               	bcf	status,0,c
 16555  003822  360F               	rlcf	??__CANIDToRegs,f,c
 16556  003824  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16557  003826  D7FC               	goto	u15985
 16558  003828  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16559                           
 16560                           ;ECAN.c: 1109: ptr++;
 16561                           
 16562                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16563  00382C  D846               	call	PL30	;call to abstracted procedure
 16564  00382E  D86A               	call	PL100	;call to abstracted procedure
 16565  003830                     u15995:
 16566  003830  90D8               	bcf	status,0,c
 16567  003832  360F               	rlcf	??__CANIDToRegs,f,c
 16568  003834  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16569  003836  D7FC               	goto	u15995
 16570  003838  500F               	movf	??__CANIDToRegs,w,c
 16571  00383A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16572  00383E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16573  003842  6EDF               	movwf	indf2,c
 16574                           
 16575                           ;ECAN.c: 1111: }
 16576  003844  D039               	goto	l230
 16577  003846                     l12417:
 16578                           
 16579                           ;ECAN.c: 1112: else
 16580                           ;ECAN.c: 1113: {
 16581                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16582  003846  5011               	movf	__CANIDToRegs@Value,w,c
 16583  003848  D842               	call	PL42	;call to abstracted procedure
 16584  00384A  0E05               	movlw	5
 16585  00384C  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16586  00384E                     u16005:
 16587  00384E  90D8               	bcf	status,0,c
 16588  003850  320F               	rrcf	??__CANIDToRegs,f,c
 16589  003852  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16590  003854  D7FC               	goto	u16005
 16591  003856  500F               	movf	??__CANIDToRegs,w,c
 16592                           
 16593                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16594  003858  D842               	call	PL48	;call to abstracted procedure
 16595  00385A  0E03               	movlw	3
 16596  00385C  D849               	call	PL62	;call to abstracted procedure
 16597  00385E  360F               	rlcf	??__CANIDToRegs,f,c
 16598  003860  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16599                           
 16600                           ;ECAN.c: 1117: ptr++;
 16601                           
 16602                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16603  003864  D82A               	call	PL30	;call to abstracted procedure
 16604  003866  0E02               	movlw	2
 16605  003868  D843               	call	PL62	;call to abstracted procedure
 16606  00386A  340F               	rlcf	??__CANIDToRegs,w,c
 16607  00386C  0BE0               	andlw	224
 16608  00386E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16609  003872  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16610  003876  6EDF               	movwf	indf2,c
 16611                           
 16612                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16613  003878  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16614  00387C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16615  003880  0E00               	movlw	0
 16616  003882  86DB               	bsf	plusw2,3,c
 16617                           
 16618                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16619  003884  5011               	movf	__CANIDToRegs@Value,w,c
 16620  003886  D823               	call	PL42	;call to abstracted procedure
 16621  003888  0E03               	movlw	3
 16622  00388A  160F               	andwf	??__CANIDToRegs,f,c
 16623  00388C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16624                           
 16625                           ;ECAN.c: 1122: ptr++;
 16626                           
 16627                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16628  003890  D814               	call	PL30	;call to abstracted procedure
 16629  003892  2AD9               	incf	fsr2l,f,c
 16630  003894  6ADA               	clrf	fsr2h,c
 16631  003896  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16632  00389A  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16633  00389E  CFDF FFE7          	movff	indf2,indf1
 16634                           
 16635                           ;ECAN.c: 1124: ptr++;
 16636  0038A2  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16637  0038A4  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16638                           
 16639                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16640  0038A6  5011               	movf	__CANIDToRegs@Value,w,c
 16641  0038A8  6ED9               	movwf	fsr2l,c
 16642  0038AA  6ADA               	clrf	fsr2h,c
 16643  0038AC  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16644  0038B0  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16645  0038B4  CFDF FFE7          	movff	indf2,indf1
 16646  0038B8                     l230:
 16647  0038B8  0012               	return	
 16648  0038BA                     __end_of__CANIDToRegs:
 16649                           	opt stack 0
 16650  0038BA                     PL30:
 16651                           	opt stack 23
 16652  0038BA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16653  0038BE  500F               	movf	??__CANIDToRegs,w,c
 16654  0038C0  12DF               	iorwf	indf2,f,c
 16655  0038C2  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16656  0038C4  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16657  0038C6  5011               	movf	__CANIDToRegs@Value,w,c
 16658  0038C8  6ED9               	movwf	fsr2l,c
 16659  0038CA  6ADA               	clrf	fsr2h,c
 16660  0038CC  0012               	return	
 16661  0038CE                     __end_ofPL30:
 16662                           	opt stack 0
 16663  0038CE                     PL42:
 16664                           	opt stack 23
 16665  0038CE  6ED9               	movwf	fsr2l,c
 16666  0038D0  6ADA               	clrf	fsr2h,c
 16667  0038D2  0E02               	movlw	2
 16668  0038D4  26D9               	addwf	fsr2l,f,c
 16669  0038D6  6ADA               	clrf	fsr2h,c
 16670  0038D8  50DF               	movf	indf2,w,c
 16671  0038DA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16672  0038DC  0012               	return	
 16673  0038DE                     __end_ofPL42:
 16674                           	opt stack 0
 16675  0038DE                     PL48:
 16676                           	opt stack 23
 16677  0038DE  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16678  0038E2  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16679  0038E6  6EDF               	movwf	indf2,c
 16680  0038E8  5011               	movf	__CANIDToRegs@Value,w,c
 16681  0038EA  6ED9               	movwf	fsr2l,c
 16682  0038EC  6ADA               	clrf	fsr2h,c
 16683  0038EE  0012               	return	
 16684  0038F0                     __end_ofPL48:
 16685                           	opt stack 0
 16686  0038F0                     PL62:
 16687                           	opt stack 23
 16688  0038F0  26D9               	addwf	fsr2l,f,c
 16689  0038F2  6ADA               	clrf	fsr2h,c
 16690  0038F4  50DF               	movf	indf2,w,c
 16691  0038F6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16692  0038F8  90D8               	bcf	status,0,c
 16693  0038FA  360F               	rlcf	??__CANIDToRegs,f,c
 16694  0038FC  90D8               	bcf	status,0,c
 16695  0038FE  360F               	rlcf	??__CANIDToRegs,f,c
 16696  003900  90D8               	bcf	status,0,c
 16697  003902  0012               	return	
 16698  003904                     __end_ofPL62:
 16699                           	opt stack 0
 16700  003904                     PL100:
 16701                           	opt stack 23
 16702  003904  50DF               	movf	indf2,w,c
 16703  003906  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16704  003908  0E05               	movlw	5
 16705  00390A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16706  00390C  0C05               	retlw	5
 16707  00390E                     __end_ofPL100:
 16708                           	opt stack 0
 16709                           tblptru	equ	0xFF8
 16710                           tblptrh	equ	0xFF7
 16711                           tblptrl	equ	0xFF6
 16712                           tablat	equ	0xFF5
 16713                           prodh	equ	0xFF4
 16714                           prodl	equ	0xFF3
 16715                           intcon	equ	0xFF2
 16716                           intcon2	equ	0xFF1
 16717                           postinc0	equ	0xFEE
 16718                           wreg	equ	0xFE8
 16719                           indf1	equ	0xFE7
 16720                           fsr1h	equ	0xFE2
 16721                           fsr1l	equ	0xFE1
 16722                           indf2	equ	0xFDF
 16723                           postinc2	equ	0xFDE
 16724                           postdec2	equ	0xFDD
 16725                           plusw2	equ	0xFDB
 16726                           fsr2h	equ	0xFDA
 16727                           fsr2l	equ	0xFD9
 16728                           status	equ	0xFD8
 16729                           
 16730 ;; *************** function _vscp_getEvent *****************
 16731 ;; Defined at:
 16732 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16733 ;; Parameters:    Size  Location     Type
 16734 ;;		None
 16735 ;; Auto vars:     Size  Location     Type
 16736 ;;  rv              1   43[COMRAM] unsigned char 
 16737 ;; Return value:  Size  Location     Type
 16738 ;;                  1    wreg      unsigned char 
 16739 ;; Registers used:
 16740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16741 ;; Tracked objects:
 16742 ;;		On entry : F/0
 16743 ;;		On exit  : 0/0
 16744 ;;		Unchanged: 0/0
 16745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16746 ;;      Params:         0       0       0       0       0       0       0
 16747 ;;      Locals:         1       0       0       0       0       0       0
 16748 ;;      Temps:          0       0       0       0       0       0       0
 16749 ;;      Totals:         1       0       0       0       0       0       0
 16750 ;;Total ram usage:        1 bytes
 16751 ;; Hardware stack levels used:    1
 16752 ;; Hardware stack levels required when called:    6
 16753 ;; This function calls:
 16754 ;;		_getVSCPFrame
 16755 ;; This function is called by:
 16756 ;;		_main
 16757 ;; This function uses a non-reentrant model
 16758 ;;
 16759                           
 16760                           	psect	text59
 16761  004370                     __ptext59:
 16762                           	opt stack 0
 16763  004370                     _vscp_getEvent:
 16764                           	opt stack 23
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;vscp_firmware.c: 1309: int8_t rv;
 16768                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16769                           
 16770                           ;incstack = 0
 16771                           ;incstack = 0
 16772  004370  BF97               	btfsc	_vscp_imsg& (0+255),7,b
 16773  004372  D012               	goto	l1533
 16774                           
 16775                           ; BSR set to: 0
 16776                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16777                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16778                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16779                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16780                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16781                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16782  004374  0E9B               	movlw	low (_vscp_imsg+4)
 16783  004376  6E1E               	movwf	?_getVSCPFrame,c
 16784  004378  0E9C               	movlw	low (_vscp_imsg+5)
 16785  00437A  6E1F               	movwf	?_getVSCPFrame+1,c
 16786  00437C  0E98               	movlw	low (_vscp_imsg+1)
 16787  00437E  6E20               	movwf	?_getVSCPFrame+2,c
 16788  004380  0E97               	movlw	low _vscp_imsg
 16789  004382  6E21               	movwf	?_getVSCPFrame+3,c
 16790  004384  0E9D               	movlw	low (_vscp_imsg+6)
 16791  004386  6E22               	movwf	?_getVSCPFrame+4,c
 16792  004388  0E99               	movlw	(_vscp_imsg+2)& (0+255)
 16793  00438A  ECE3  F01F         	call	_getVSCPFrame
 16794  00438E  6E2C               	movwf	vscp_getEvent@rv,c
 16795  004390  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 16796  004392  E002               	bz	l1533
 16797                           
 16798                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16799  004394  0100               	movlb	0	; () banked
 16800  004396  8F97               	bsf	_vscp_imsg& (0+255),7,b
 16801  004398                     l1533:
 16802  004398  0012               	return	
 16803  00439A                     __end_of_vscp_getEvent:
 16804                           	opt stack 0
 16805                           tblptru	equ	0xFF8
 16806                           tblptrh	equ	0xFF7
 16807                           tblptrl	equ	0xFF6
 16808                           tablat	equ	0xFF5
 16809                           prodh	equ	0xFF4
 16810                           prodl	equ	0xFF3
 16811                           intcon	equ	0xFF2
 16812                           intcon2	equ	0xFF1
 16813                           postinc0	equ	0xFEE
 16814                           wreg	equ	0xFE8
 16815                           indf1	equ	0xFE7
 16816                           fsr1h	equ	0xFE2
 16817                           fsr1l	equ	0xFE1
 16818                           indf2	equ	0xFDF
 16819                           postinc2	equ	0xFDE
 16820                           postdec2	equ	0xFDD
 16821                           plusw2	equ	0xFDB
 16822                           fsr2h	equ	0xFDA
 16823                           fsr2l	equ	0xFD9
 16824                           status	equ	0xFD8
 16825                           
 16826 ;; *************** function _getVSCPFrame *****************
 16827 ;; Defined at:
 16828 ;;		line 3561 in file "../main.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16831 ;;		 -> vscp_imsg(14), 
 16832 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 16833 ;;		 -> vscp_imsg(14), 
 16834 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 16835 ;;		 -> vscp_imsg(14), 
 16836 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 16837 ;;		 -> vscp_imsg(14), 
 16838 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 16839 ;;		 -> vscp_imsg(14), 
 16840 ;;  pData           1   33[COMRAM] PTR unsigned char 
 16841 ;;		 -> vscp_imsg(14), 
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 16844 ;;		 -> vscp_imsg(14), 
 16845 ;;  id              4   39[COMRAM] unsigned long 
 16846 ;; Return value:  Size  Location     Type
 16847 ;;                  1    wreg      unsigned char 
 16848 ;; Registers used:
 16849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16850 ;; Tracked objects:
 16851 ;;		On entry : F/0
 16852 ;;		On exit  : 0/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16855 ;;      Params:         5       0       0       0       0       0       0
 16856 ;;      Locals:         5       0       0       0       0       0       0
 16857 ;;      Temps:          4       0       0       0       0       0       0
 16858 ;;      Totals:        14       0       0       0       0       0       0
 16859 ;;Total ram usage:       14 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:    5
 16862 ;; This function calls:
 16863 ;;		_getCANFrame
 16864 ;; This function is called by:
 16865 ;;		_vscp_getEvent
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           	psect	text60
 16870  003FC6                     __ptext60:
 16871                           	opt stack 0
 16872  003FC6                     _getVSCPFrame:
 16873                           	opt stack 23
 16874                           
 16875                           ;incstack = 0
 16876                           ;incstack = 0
 16877                           ;getVSCPFrame@pvscpclass stored from wreg
 16878  003FC6  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;main.c: 3562: uint32_t id;
 16882                           ;main.c: 3564: if ( !getCANFrame(&id, pSize, pData) ) {
 16883  003FCA  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 16884  003FCE  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16885  003FD2  0E28               	movlw	getVSCPFrame@id& (0+255)
 16886  003FD4  EC8D  F021         	call	_getCANFrame
 16887  003FD8  0900               	iorlw	0
 16888  003FDA  E102               	bnz	l11903
 16889                           
 16890                           ;main.c: 3565: return 0;
 16891  003FDC  0E00               	movlw	0
 16892  003FDE  D02E               	goto	l1147
 16893  003FE0                     l11903:
 16894                           
 16895                           ;main.c: 3566: }
 16896                           ;main.c: 3568: *pNodeId = id & 0x0ff;
 16897  003FE0  501F               	movf	getVSCPFrame@pNodeId,w,c
 16898  003FE2  6ED9               	movwf	fsr2l,c
 16899  003FE4  6ADA               	clrf	fsr2h,c
 16900  003FE6  C028  FFDF         	movff	getVSCPFrame@id,indf2
 16901                           
 16902                           ;main.c: 3569: *pvscptype = (id >> 8) & 0xff;
 16903  003FEA  501E               	movf	getVSCPFrame@pvscptype,w,c
 16904  003FEC  6ED9               	movwf	fsr2l,c
 16905  003FEE  6ADA               	clrf	fsr2h,c
 16906  003FF0  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 16907                           
 16908                           ;main.c: 3570: *pvscpclass = (id >> 16) & 0x1ff;
 16909  003FF4  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16910  003FF6  6E23               	movwf	??_getVSCPFrame& (0+255),c
 16911  003FF8  0E01               	movlw	1
 16912  003FFA  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16913  003FFC  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16914  003FFE  5027               	movf	getVSCPFrame@pvscpclass,w,c
 16915  004000  6ED9               	movwf	fsr2l,c
 16916  004002  6ADA               	clrf	fsr2h,c
 16917  004004  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 16918  004008  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16919                           
 16920                           ;main.c: 3571: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16921  00400C  5020               	movf	getVSCPFrame@pPriority,w,c
 16922  00400E  6ED9               	movwf	fsr2l,c
 16923  004010  6ADA               	clrf	fsr2h,c
 16924  004012  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 16925  004016  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16926  00401A  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16927  00401E  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16928  004022  0E1B               	movlw	27
 16929  004024  D005               	goto	u15260
 16930  004026                     u15265:
 16931  004026  90D8               	bcf	status,0,c
 16932  004028  3226               	rrcf	??_getVSCPFrame+3,f,c
 16933  00402A  3225               	rrcf	??_getVSCPFrame+2,f,c
 16934  00402C  3224               	rrcf	??_getVSCPFrame+1,f,c
 16935  00402E  3223               	rrcf	??_getVSCPFrame,f,c
 16936  004030                     u15260:
 16937  004030  2EE8               	decfsz	wreg,f,c
 16938  004032  D7F9               	goto	u15265
 16939  004034  5023               	movf	??_getVSCPFrame,w,c
 16940  004036  0B07               	andlw	7
 16941  004038  6EDF               	movwf	indf2,c
 16942                           
 16943                           ;main.c: 3573: return 1;
 16944  00403A  0E01               	movlw	1
 16945  00403C                     l1147:
 16946  00403C  0012               	return	
 16947  00403E                     __end_of_getVSCPFrame:
 16948                           	opt stack 0
 16949                           tblptru	equ	0xFF8
 16950                           tblptrh	equ	0xFF7
 16951                           tblptrl	equ	0xFF6
 16952                           tablat	equ	0xFF5
 16953                           prodh	equ	0xFF4
 16954                           prodl	equ	0xFF3
 16955                           intcon	equ	0xFF2
 16956                           intcon2	equ	0xFF1
 16957                           postinc0	equ	0xFEE
 16958                           wreg	equ	0xFE8
 16959                           indf1	equ	0xFE7
 16960                           fsr1h	equ	0xFE2
 16961                           fsr1l	equ	0xFE1
 16962                           indf2	equ	0xFDF
 16963                           postinc2	equ	0xFDE
 16964                           postdec2	equ	0xFDD
 16965                           plusw2	equ	0xFDB
 16966                           fsr2h	equ	0xFDA
 16967                           fsr2l	equ	0xFD9
 16968                           status	equ	0xFD8
 16969                           
 16970 ;; *************** function _getCANFrame *****************
 16971 ;; Defined at:
 16972 ;;		line 3603 in file "../main.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;  pid             1    wreg     PTR unsigned long 
 16975 ;;		 -> getVSCPFrame@id(4), 
 16976 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 16977 ;;		 -> vscp_imsg(14), 
 16978 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 16979 ;;		 -> vscp_imsg(14), 
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;  pid             1   27[COMRAM] PTR unsigned long 
 16982 ;;		 -> getVSCPFrame@id(4), 
 16983 ;;  flags           1   28[COMRAM] enum E16425
 16984 ;; Return value:  Size  Location     Type
 16985 ;;                  1    wreg      unsigned char 
 16986 ;; Registers used:
 16987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16988 ;; Tracked objects:
 16989 ;;		On entry : F/0
 16990 ;;		On exit  : 0/0
 16991 ;;		Unchanged: 0/0
 16992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16993 ;;      Params:         2       0       0       0       0       0       0
 16994 ;;      Locals:         2       0       0       0       0       0       0
 16995 ;;      Temps:          0       0       0       0       0       0       0
 16996 ;;      Totals:         4       0       0       0       0       0       0
 16997 ;;Total ram usage:        4 bytes
 16998 ;; Hardware stack levels used:    1
 16999 ;; Hardware stack levels required when called:    4
 17000 ;; This function calls:
 17001 ;;		_ECANReceiveMessage
 17002 ;; This function is called by:
 17003 ;;		_getVSCPFrame
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007                           	psect	text61
 17008  00431A                     __ptext61:
 17009                           	opt stack 0
 17010  00431A                     _getCANFrame:
 17011                           	opt stack 23
 17012                           
 17013                           ;incstack = 0
 17014                           ;incstack = 0
 17015                           ;getCANFrame@pid stored from wreg
 17016  00431A  CFE8 F01C          	movff	wreg,getCANFrame@pid
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;main.c: 3604: ECAN_RX_MSG_FLAGS flags;
 17020                           ;main.c: 3608: if (vscp_imsg.flags & 0x80) return 0;
 17021  00431E  AF97               	btfss	_vscp_imsg& (0+255),7,b
 17022  004320  D002               	goto	l11919
 17023  004322                     l11915:
 17024  004322  0E00               	movlw	0
 17025  004324  D00F               	goto	l1158
 17026  004326                     l11919:
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;main.c: 3610: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 17030  004326  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 17031  00432A  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 17032  00432E  0E1D               	movlw	low getCANFrame@flags
 17033  004330  6E11               	movwf	?_ECANReceiveMessage+2,c
 17034  004332  501C               	movf	getCANFrame@pid,w,c
 17035  004334  EC3A  F016         	call	_ECANReceiveMessage
 17036  004338  0900               	iorlw	0
 17037  00433A  E0F3               	bz	l11915
 17038                           
 17039                           ;main.c: 3613: if (flags & ECAN_RX_RTR_FRAME) return 0;
 17040  00433C  AC1D               	btfss	getCANFrame@flags,6,c
 17041                           
 17042                           ;main.c: 3616: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 17043  00433E  AA1D               	btfss	getCANFrame@flags,5,c
 17044  004340  D7F0               	goto	l11915
 17045                           
 17046                           ;main.c: 3618: return 1;
 17047  004342  0E01               	movlw	1
 17048  004344                     l1158:
 17049  004344  0012               	return	
 17050  004346                     __end_of_getCANFrame:
 17051                           	opt stack 0
 17052                           tblptru	equ	0xFF8
 17053                           tblptrh	equ	0xFF7
 17054                           tblptrl	equ	0xFF6
 17055                           tablat	equ	0xFF5
 17056                           prodh	equ	0xFF4
 17057                           prodl	equ	0xFF3
 17058                           intcon	equ	0xFF2
 17059                           intcon2	equ	0xFF1
 17060                           postinc0	equ	0xFEE
 17061                           wreg	equ	0xFE8
 17062                           indf1	equ	0xFE7
 17063                           fsr1h	equ	0xFE2
 17064                           fsr1l	equ	0xFE1
 17065                           indf2	equ	0xFDF
 17066                           postinc2	equ	0xFDE
 17067                           postdec2	equ	0xFDD
 17068                           plusw2	equ	0xFDB
 17069                           fsr2h	equ	0xFDA
 17070                           fsr2l	equ	0xFD9
 17071                           status	equ	0xFD8
 17072                           
 17073 ;; *************** function _ECANReceiveMessage *****************
 17074 ;; Defined at:
 17075 ;;		line 803 in file "../ECAN.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;  id              1    wreg     PTR unsigned long 
 17078 ;;		 -> getVSCPFrame@id(4), 
 17079 ;;  data            1   14[COMRAM] PTR unsigned char 
 17080 ;;		 -> vscp_imsg(14), 
 17081 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 17082 ;;		 -> vscp_imsg(14), 
 17083 ;;  msgFlags        1   16[COMRAM] PTR enum E16333
 17084 ;;		 -> getCANFrame@flags(1), 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;  id              1   17[COMRAM] PTR unsigned long 
 17087 ;;		 -> getVSCPFrame@id(4), 
 17088 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 17089 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17090 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17091 ;;  savedPtr        2   18[COMRAM] PTR unsigned char 
 17092 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17093 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17094 ;;  temp            1   22[COMRAM] struct .
 17095 ;;  mode            1   21[COMRAM] unsigned char 
 17096 ;;  i               1   20[COMRAM] unsigned char 
 17097 ;; Return value:  Size  Location     Type
 17098 ;;                  1    wreg      enum E15660
 17099 ;; Registers used:
 17100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17101 ;; Tracked objects:
 17102 ;;		On entry : F/0
 17103 ;;		On exit  : 0/0
 17104 ;;		Unchanged: 0/0
 17105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17106 ;;      Params:         3       0       0       0       0       0       0
 17107 ;;      Locals:         8       0       0       0       0       0       0
 17108 ;;      Temps:          0       0       0       0       0       0       0
 17109 ;;      Totals:        11       0       0       0       0       0       0
 17110 ;;Total ram usage:       11 bytes
 17111 ;; Hardware stack levels used:    1
 17112 ;; Hardware stack levels required when called:    3
 17113 ;; This function calls:
 17114 ;;		__ECANPointBuffer
 17115 ;;		__RegsToCANID
 17116 ;; This function is called by:
 17117 ;;		_getCANFrame
 17118 ;; This function uses a non-reentrant model
 17119 ;;
 17120                           
 17121                           	psect	text62
 17122  002C74                     __ptext62:
 17123                           	opt stack 0
 17124  002C74                     _ECANReceiveMessage:
 17125                           	opt stack 23
 17126                           
 17127                           ;incstack = 0
 17128                           ;incstack = 0
 17129                           ;ECANReceiveMessage@id stored from wreg
 17130  002C74  CFE8 F012          	movff	wreg,ECANReceiveMessage@id
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;ECAN.c: 805: BYTE mode;
 17134                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 17135                           ;ECAN.c: 809: char i;
 17136                           ;ECAN.c: 810: BYTE_VAL temp;
 17137                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 17138  002C78  6A54               	clrf	__ECANRxFilterHitInfo,c
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 17142  002C7A  5077               	movf	3959,w,c	;volatile
 17143  002C7C  0BC0               	andlw	192
 17144  002C7E  6E16               	movwf	ECANReceiveMessage@mode,c
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;ECAN.c: 816: if ( mode == 0x00 )
 17148  002C80  6616               	tstfsz	ECANReceiveMessage@mode,c
 17149  002C82  D032               	goto	l9167
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;ECAN.c: 822: {
 17153                           ;ECAN.c: 824: if ( RXB0FUL )
 17154  002C84  AE60               	btfss	3936,7,c	;volatile
 17155  002C86  D012               	goto	l181
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;ECAN.c: 825: {
 17159                           ;ECAN.c: 827: RXB0IF = 0;
 17160  002C88  90A4               	bcf	4004,0,c	;volatile
 17161                           
 17162                           ;ECAN.c: 830: if ( RXB0OVFL )
 17163  002C8A  AE74               	btfss	3956,7,c	;volatile
 17164  002C8C  D006               	goto	l9143
 17165                           
 17166                           ; BSR set to: 0
 17167                           ;ECAN.c: 831: {
 17168                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 17169  002C8E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17170  002C90  6ED9               	movwf	fsr2l,c
 17171  002C92  6ADA               	clrf	fsr2h,c
 17172  002C94  0E00               	movlw	0
 17173  002C96  86DB               	bsf	plusw2,3,c
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;ECAN.c: 833: RXB0OVFL = 0;
 17177  002C98  9E74               	bcf	3956,7,c	;volatile
 17178  002C9A                     l9143:
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;ECAN.c: 834: }
 17182                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 17183  002C9A  A060               	btfss	3936,0,c	;volatile
 17184  002C9C  D002               	bra	u10805
 17185  002C9E  8054               	bsf	__ECANRxFilterHitInfo,0,c
 17186  002CA0  D001               	bra	u10807
 17187  002CA2                     u10805:
 17188  002CA2  9054               	bcf	__ECANRxFilterHitInfo,0,c
 17189  002CA4                     u10807:
 17190                           
 17191                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 17192  002CA4  0E0F               	movlw	15	;volatile
 17193  002CA6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17194  002CA8  0E60               	movlw	96	;volatile
 17195  002CAA  D01A               	goto	L50
 17196  002CAC                     l181:
 17197                           
 17198                           ; BSR set to: 0
 17199                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 17200  002CAC  010F               	movlb	15	; () banked
 17201  002CAE  AF50               	btfss	80,7,b	;volatile
 17202  002CB0  D019               	goto	l9161
 17203                           
 17204                           ; BSR set to: 15
 17205                           ;ECAN.c: 842: {
 17206                           ;ECAN.c: 844: RXB1IF = 0;
 17207  002CB2  92A4               	bcf	4004,1,c	;volatile
 17208                           
 17209                           ;ECAN.c: 847: if ( RXB1OVFL )
 17210  002CB4  AC74               	btfss	3956,6,c	;volatile
 17211  002CB6  D006               	goto	l9153
 17212                           
 17213                           ; BSR set to: 15
 17214                           ;ECAN.c: 848: {
 17215                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 17216  002CB8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17217  002CBA  6ED9               	movwf	fsr2l,c
 17218  002CBC  6ADA               	clrf	fsr2h,c
 17219  002CBE  0E00               	movlw	0
 17220  002CC0  86DB               	bsf	plusw2,3,c
 17221                           
 17222                           ; BSR set to: 15
 17223                           ;ECAN.c: 850: RXB1OVFL = 0;
 17224  002CC2  9C74               	bcf	3956,6,c	;volatile
 17225  002CC4                     l9153:
 17226                           
 17227                           ; BSR set to: 15
 17228                           ;ECAN.c: 851: }
 17229                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 17230  002CC4  5150               	movf	80,w,b	;volatile
 17231  002CC6  0B07               	andlw	7
 17232  002CC8  6E54               	movwf	__ECANRxFilterHitInfo,c
 17233                           
 17234                           ; BSR set to: 15
 17235                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 17236  002CCA  0E02               	movlw	2
 17237  002CCC  6054               	cpfslt	__ECANRxFilterHitInfo,c
 17238  002CCE  D005               	goto	l9159
 17239                           
 17240                           ; BSR set to: 15
 17241                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 17242  002CD0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17243  002CD2  6ED9               	movwf	fsr2l,c
 17244  002CD4  6ADA               	clrf	fsr2h,c
 17245  002CD6  0E00               	movlw	0
 17246  002CD8  8EDB               	bsf	plusw2,7,c
 17247  002CDA                     l9159:
 17248                           
 17249                           ; BSR set to: 15
 17250                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 17251  002CDA  0E0F               	movlw	15	;volatile
 17252  002CDC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17253  002CDE  0E50               	movlw	80	;volatile
 17254  002CE0                     L50:
 17255  002CE0  6E18               	movwf	ECANReceiveMessage@ptr,c
 17256                           
 17257                           ;ECAN.c: 860: }
 17258  002CE2  D065               	goto	l9221
 17259  002CE4                     l9161:
 17260                           
 17261                           ;ECAN.c: 861: else
 17262                           ;ECAN.c: 862: return FALSE;
 17263  002CE4  0E00               	movlw	0
 17264  002CE6  D0C2               	goto	l188
 17265  002CE8                     l9167:
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;ECAN.c: 869: else if ( mode == 0x40 )
 17269  002CE8  5016               	movf	ECANReceiveMessage@mode,w,c
 17270  002CEA  0A40               	xorlw	64
 17271  002CEC  E146               	bnz	l191
 17272                           
 17273                           ; BSR set to: 0
 17274                           ;ECAN.c: 875: {
 17275                           ;ECAN.c: 876: if ( RXB0FUL )
 17276  002CEE  AE60               	btfss	3936,7,c	;volatile
 17277  002CF0  D004               	goto	l192
 17278                           
 17279                           ; BSR set to: 0
 17280                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 17281  002CF2  0E0F               	movlw	15	;volatile
 17282  002CF4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17283  002CF6  0E60               	movlw	96	;volatile
 17284  002CF8  D03E               	goto	L57
 17285  002CFA                     l192:
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17289  002CFA  010F               	movlb	15	; () banked
 17290  002CFC  AF50               	btfss	80,7,b	;volatile
 17291  002CFE  D004               	goto	l194
 17292                           
 17293                           ; BSR set to: 15
 17294                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17295  002D00  0E0F               	movlw	15	;volatile
 17296  002D02  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17297  002D04  0E50               	movlw	80	;volatile
 17298  002D06  D037               	goto	L57
 17299  002D08                     l194:
 17300                           
 17301                           ; BSR set to: 15
 17302                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17303  002D08  010D               	movlb	13
 17304  002D0A  B5F8               	btfsc	248,2,b	;volatile
 17305  002D0C  D007               	goto	l196
 17306  002D0E  010E               	movlb	14
 17307  002D10  AF20               	btfss	32,7,b	;volatile
 17308  002D12  D004               	goto	l196
 17309                           
 17310                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17311  002D14  0E0E               	movlw	14	;volatile
 17312  002D16  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17313  002D18  0E20               	movlw	32	;volatile
 17314  002D1A  D02D               	goto	L57
 17315  002D1C                     l196:
 17316                           
 17317                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17318  002D1C  010D               	movlb	13
 17319  002D1E  B7F8               	btfsc	248,3,b	;volatile
 17320  002D20  D007               	goto	l198
 17321  002D22  010E               	movlb	14
 17322  002D24  AF30               	btfss	48,7,b	;volatile
 17323  002D26  D004               	goto	l198
 17324                           
 17325                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17326  002D28  0E0E               	movlw	14	;volatile
 17327  002D2A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17328  002D2C  0E30               	movlw	48	;volatile
 17329  002D2E  D023               	goto	L57
 17330  002D30                     l198:
 17331                           
 17332                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17333  002D30  010D               	movlb	13
 17334  002D32  B9F8               	btfsc	248,4,b	;volatile
 17335  002D34  D007               	goto	l200
 17336  002D36  010E               	movlb	14
 17337  002D38  AF40               	btfss	64,7,b	;volatile
 17338  002D3A  D004               	goto	l200
 17339                           
 17340                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17341  002D3C  0E0E               	movlw	14	;volatile
 17342  002D3E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17343  002D40  0E40               	movlw	64	;volatile
 17344  002D42  D019               	goto	L57
 17345  002D44                     l200:
 17346                           
 17347                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17348  002D44  010D               	movlb	13
 17349  002D46  BBF8               	btfsc	248,5,b	;volatile
 17350  002D48  D005               	goto	l202
 17351  002D4A  010E               	movlb	14
 17352  002D4C  AF50               	btfss	80,7,b	;volatile
 17353  002D4E  D002               	goto	l202
 17354                           
 17355                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17356  002D50  0E0E               	movlw	14	;volatile
 17357  002D52  D7D7               	goto	L58
 17358  002D54                     l202:
 17359                           
 17360                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17361  002D54  010D               	movlb	13
 17362  002D56  BDF8               	btfsc	248,6,b	;volatile
 17363  002D58  D005               	goto	l204
 17364  002D5A  010E               	movlb	14
 17365  002D5C  AF60               	btfss	96,7,b	;volatile
 17366  002D5E  D002               	goto	l204
 17367                           
 17368                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17369  002D60  0E0E               	movlw	14	;volatile
 17370  002D62  D7C8               	goto	L59
 17371  002D64                     l204:
 17372                           
 17373                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17374  002D64  010D               	movlb	13
 17375  002D66  BFF8               	btfsc	248,7,b	;volatile
 17376  002D68  D7BD               	goto	l9161
 17377  002D6A  010E               	movlb	14
 17378  002D6C  AF70               	btfss	112,7,b	;volatile
 17379  002D6E  D7BA               	goto	l9161
 17380                           
 17381                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17382  002D70  0E0E               	movlw	14	;volatile
 17383  002D72  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17384  002D74  0E70               	movlw	112	;volatile
 17385  002D76                     L57:
 17386  002D76  6E18               	movwf	ECANReceiveMessage@ptr,c
 17387  002D78  D00A               	goto	l9211
 17388  002D7A                     l191:
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;ECAN.c: 910: else
 17392                           ;ECAN.c: 915: {
 17393                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17394  002D7A  AE74               	btfss	3956,7,c	;volatile
 17395  002D7C  D7B3               	goto	l9161
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;ECAN.c: 917: {
 17399                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17400  002D7E  506F               	movf	3951,w,c	;volatile
 17401  002D80  0B07               	andlw	7
 17402  002D82  EC1F  F020         	call	__ECANPointBuffer
 17403  002D86  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17404  002D8A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17405  002D8E                     l9211:
 17406                           
 17407                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17408  002D8E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17409  002D92  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17410  002D96  50DF               	movf	indf2,w,c
 17411  002D98  0B1F               	andlw	31
 17412  002D9A  6E54               	movwf	__ECANRxFilterHitInfo,c
 17413                           
 17414                           ;ECAN.c: 932: RXB1IF = 0;
 17415  002D9C  92A4               	bcf	4004,1,c	;volatile
 17416                           
 17417                           ;ECAN.c: 934: if ( RXB1OVFL )
 17418  002D9E  AC74               	btfss	3956,6,c	;volatile
 17419  002DA0  D006               	goto	l9221
 17420                           
 17421                           ;ECAN.c: 935: {
 17422                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17423  002DA2  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17424  002DA4  6ED9               	movwf	fsr2l,c
 17425  002DA6  6ADA               	clrf	fsr2h,c
 17426  002DA8  0E00               	movlw	0
 17427  002DAA  86DB               	bsf	plusw2,3,c
 17428                           
 17429                           ;ECAN.c: 937: RXB1OVFL = 0;
 17430  002DAC  9C74               	bcf	3956,6,c	;volatile
 17431  002DAE                     l9221:
 17432                           
 17433                           ;ECAN.c: 942: savedPtr = ptr;
 17434  002DAE  C018  F013         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17435  002DB2  C019  F014         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17436                           
 17437                           ;ECAN.c: 943: *msgFlags = 0;
 17438  002DB6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17439  002DB8  6ED9               	movwf	fsr2l,c
 17440  002DBA  6ADA               	clrf	fsr2h,c
 17441  002DBC  6ADF               	clrf	indf2,c
 17442                           
 17443                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17444  002DBE  EE20 F005          	lfsr	2,5
 17445  002DC2  D855               	call	PL78	;call to abstracted procedure
 17446                           
 17447                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17448  002DC4  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17449  002DC6  6ED9               	movwf	fsr2l,c
 17450  002DC8  6ADA               	clrf	fsr2h,c
 17451  002DCA  5017               	movf	ECANReceiveMessage@temp,w,c
 17452  002DCC  0B0F               	andlw	15
 17453  002DCE  6EDF               	movwf	indf2,c
 17454                           
 17455                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17456  002DD0  AC17               	btfss	ECANReceiveMessage@temp,6,c
 17457  002DD2  D005               	goto	l212
 17458                           
 17459                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17460  002DD4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17461  002DD6  6ED9               	movwf	fsr2l,c
 17462  002DD8  6ADA               	clrf	fsr2h,c
 17463  002DDA  0E00               	movlw	0
 17464  002DDC  8CDB               	bsf	plusw2,6,c
 17465  002DDE                     l212:
 17466                           
 17467                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17468  002DDE  EE20 F002          	lfsr	2,2
 17469  002DE2  D845               	call	PL78	;call to abstracted procedure
 17470                           
 17471                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17472  002DE4  A617               	btfss	ECANReceiveMessage@temp,3,c
 17473  002DE6  D008               	goto	l213
 17474                           
 17475                           ;ECAN.c: 956: {
 17476                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17477  002DE8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17478  002DEA  6ED9               	movwf	fsr2l,c
 17479  002DEC  6ADA               	clrf	fsr2h,c
 17480  002DEE  0E00               	movlw	0
 17481  002DF0  8ADB               	bsf	plusw2,5,c
 17482                           
 17483                           ;ECAN.c: 958: temp.Val = 1;
 17484  002DF2  0E01               	movlw	1
 17485  002DF4  6E17               	movwf	ECANReceiveMessage@temp,c
 17486                           
 17487                           ;ECAN.c: 959: }
 17488  002DF6  D001               	goto	l9239
 17489  002DF8                     l213:
 17490                           
 17491                           ;ECAN.c: 960: else
 17492                           ;ECAN.c: 961: temp.Val = 0;
 17493  002DF8  6A17               	clrf	ECANReceiveMessage@temp,c
 17494  002DFA                     l9239:
 17495                           
 17496                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17497  002DFA  2818               	incf	ECANReceiveMessage@ptr,w,c
 17498  002DFC  6E08               	movwf	?__RegsToCANID,c
 17499  002DFE  0E00               	movlw	0
 17500  002E00  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17501  002E02  6E09               	movwf	?__RegsToCANID+1,c
 17502  002E04  C012  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17503  002E08  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17504  002E0C  EC6E  F01B         	call	__RegsToCANID	;wreg free
 17505                           
 17506                           ;ECAN.c: 966: ptr += 6;
 17507  002E10  0E06               	movlw	6
 17508  002E12  2618               	addwf	ECANReceiveMessage@ptr,f,c
 17509  002E14  0E00               	movlw	0
 17510  002E16  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17511                           
 17512                           ;ECAN.c: 967: temp.Val = *dataLen;
 17513  002E18  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17514  002E1A  6ED9               	movwf	fsr2l,c
 17515  002E1C  6ADA               	clrf	fsr2h,c
 17516  002E1E  50DF               	movf	indf2,w,c
 17517  002E20  6E17               	movwf	ECANReceiveMessage@temp,c
 17518                           
 17519                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17520  002E22  6A15               	clrf	ECANReceiveMessage@i,c
 17521  002E24  D00D               	goto	l9255
 17522  002E26                     l9247:
 17523                           
 17524                           ;ECAN.c: 969: *data++ = *ptr++;
 17525  002E26  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17526  002E2A  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17527  002E2E  500F               	movf	ECANReceiveMessage@data,w,c
 17528  002E30  6EE1               	movwf	fsr1l,c
 17529  002E32  6AE2               	clrf	fsr1h,c
 17530  002E34  CFDF FFE7          	movff	indf2,indf1
 17531  002E38  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 17532  002E3A  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 17533  002E3C  2A0F               	incf	ECANReceiveMessage@data,f,c
 17534  002E3E  2A15               	incf	ECANReceiveMessage@i,f,c
 17535  002E40                     l9255:
 17536  002E40  5017               	movf	ECANReceiveMessage@temp,w,c
 17537  002E42  5C15               	subwf	ECANReceiveMessage@i,w,c
 17538  002E44  E3F0               	bnc	l9247
 17539                           
 17540                           ;ECAN.c: 972: if ( IRXIF )
 17541  002E46  AEA4               	btfss	4004,7,c	;volatile
 17542  002E48  D006               	goto	l9261
 17543                           
 17544                           ;ECAN.c: 973: {
 17545                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17546  002E4A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17547  002E4C  6ED9               	movwf	fsr2l,c
 17548  002E4E  6ADA               	clrf	fsr2h,c
 17549  002E50  0E00               	movlw	0
 17550  002E52  88DB               	bsf	plusw2,4,c
 17551                           
 17552                           ;ECAN.c: 975: IRXIF = 0;
 17553  002E54  9EA4               	bcf	4004,7,c	;volatile
 17554  002E56                     l9261:
 17555                           
 17556                           ;ECAN.c: 976: }
 17557                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17558  002E56  C013  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17559  002E5A  C014  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17560  002E5E  0E7F               	movlw	127
 17561  002E60  16DF               	andwf	indf2,f,c
 17562                           
 17563                           ;ECAN.c: 983: if ( mode == 0x80 )
 17564  002E62  5016               	movf	ECANReceiveMessage@mode,w,c
 17565  002E64  0A80               	xorlw	128
 17566  002E66  B4D8               	btfsc	status,2,c
 17567                           
 17568                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17569  002E68  9E74               	bcf	3956,7,c	;volatile
 17570                           
 17571                           ;ECAN.c: 990: return TRUE;
 17572  002E6A  0E01               	movlw	1
 17573  002E6C                     l188:
 17574  002E6C  0012               	return	
 17575  002E6E                     __end_of_ECANReceiveMessage:
 17576                           	opt stack 0
 17577  002E6E                     PL78:
 17578                           	opt stack 23
 17579  002E6E  5018               	movf	ECANReceiveMessage@ptr,w,c
 17580  002E70  26D9               	addwf	fsr2l,f,c
 17581  002E72  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 17582  002E74  22DA               	addwfc	fsr2h,f,c
 17583  002E76  50DF               	movf	indf2,w,c
 17584  002E78  6E17               	movwf	ECANReceiveMessage@temp,c
 17585  002E7A  0012               	return	
 17586  002E7C                     __end_ofPL78:
 17587                           	opt stack 0
 17588                           tblptru	equ	0xFF8
 17589                           tblptrh	equ	0xFF7
 17590                           tblptrl	equ	0xFF6
 17591                           tablat	equ	0xFF5
 17592                           prodh	equ	0xFF4
 17593                           prodl	equ	0xFF3
 17594                           intcon	equ	0xFF2
 17595                           intcon2	equ	0xFF1
 17596                           postinc0	equ	0xFEE
 17597                           wreg	equ	0xFE8
 17598                           indf1	equ	0xFE7
 17599                           fsr1h	equ	0xFE2
 17600                           fsr1l	equ	0xFE1
 17601                           indf2	equ	0xFDF
 17602                           postinc2	equ	0xFDE
 17603                           postdec2	equ	0xFDD
 17604                           plusw2	equ	0xFDB
 17605                           fsr2h	equ	0xFDA
 17606                           fsr2l	equ	0xFD9
 17607                           status	equ	0xFD8
 17608                           
 17609 ;; *************** function __RegsToCANID *****************
 17610 ;; Defined at:
 17611 ;;		line 1156 in file "../ECAN.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 17614 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17615 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17616 ;;  val             1    9[COMRAM] PTR unsigned long 
 17617 ;;		 -> getVSCPFrame@id(4), 
 17618 ;;  type            1   10[COMRAM] unsigned char 
 17619 ;; Auto vars:     Size  Location     Type
 17620 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 17621 ;;		 -> getVSCPFrame@id(4), 
 17622 ;; Return value:  Size  Location     Type
 17623 ;;		None               void
 17624 ;; Registers used:
 17625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17626 ;; Tracked objects:
 17627 ;;		On entry : 0/0
 17628 ;;		On exit  : 0/0
 17629 ;;		Unchanged: 0/0
 17630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17631 ;;      Params:         4       0       0       0       0       0       0
 17632 ;;      Locals:         1       0       0       0       0       0       0
 17633 ;;      Temps:          2       0       0       0       0       0       0
 17634 ;;      Totals:         7       0       0       0       0       0       0
 17635 ;;Total ram usage:        7 bytes
 17636 ;; Hardware stack levels used:    1
 17637 ;; Hardware stack levels required when called:    2
 17638 ;; This function calls:
 17639 ;;		Nothing
 17640 ;; This function is called by:
 17641 ;;		_ECANReceiveMessage
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           	psect	text63
 17646  0036DC                     __ptext63:
 17647                           	opt stack 0
 17648  0036DC                     __RegsToCANID:
 17649                           	opt stack 23
 17650                           
 17651                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17652                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17653                           
 17654                           ;incstack = 0
 17655                           ;incstack = 0
 17656  0036DC  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17657                           
 17658                           ;ECAN.c: 1161: if ( type == 0 )
 17659  0036E0  660B               	tstfsz	__RegsToCANID@type,c
 17660  0036E2  D02B               	goto	l9305
 17661                           
 17662                           ;ECAN.c: 1162: {
 17663                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17664  0036E4  500E               	movf	__RegsToCANID@Value,w,c
 17665  0036E6  6ED9               	movwf	fsr2l,c
 17666  0036E8  D86C               	call	PL56	;call to abstracted procedure
 17667  0036EA  360C               	rlcf	??__RegsToCANID,f,c
 17668  0036EC  90D8               	bcf	status,0,c
 17669  0036EE  360C               	rlcf	??__RegsToCANID,f,c
 17670  0036F0  90D8               	bcf	status,0,c
 17671  0036F2  340C               	rlcf	??__RegsToCANID,w,c
 17672  0036F4  6EDF               	movwf	indf2,c
 17673                           
 17674                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17675  0036F6  500E               	movf	__RegsToCANID@Value,w,c
 17676  0036F8  6ED9               	movwf	fsr2l,c
 17677  0036FA  6ADA               	clrf	fsr2h,c
 17678  0036FC  2AD9               	incf	fsr2l,f,c
 17679  0036FE  6ADA               	clrf	fsr2h,c
 17680  003700  D873               	call	PL66	;call to abstracted procedure
 17681  003702                     u11075:
 17682  003702  90D8               	bcf	status,0,c
 17683  003704  320C               	rrcf	??__RegsToCANID,f,c
 17684  003706  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17685  003708  D7FC               	goto	u11075
 17686  00370A  500C               	movf	??__RegsToCANID,w,c
 17687                           
 17688                           ;ECAN.c: 1166: ptr++;
 17689                           
 17690                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17691  00370C  D863               	call	PL58	;call to abstracted procedure
 17692  00370E  0E05               	movlw	5
 17693  003710  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17694  003712                     u11085:
 17695  003712  90D8               	bcf	status,0,c
 17696  003714  320C               	rrcf	??__RegsToCANID,f,c
 17697  003716  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17698  003718  D7FC               	goto	u11085
 17699  00371A  500E               	movf	__RegsToCANID@Value,w,c
 17700  00371C  6ED9               	movwf	fsr2l,c
 17701  00371E  6ADA               	clrf	fsr2h,c
 17702  003720  500C               	movf	??__RegsToCANID,w,c
 17703  003722  12DF               	iorwf	indf2,f,c
 17704                           
 17705                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17706  003724  D83D               	call	PL40	;call to abstracted procedure
 17707  003726  6ADF               	clrf	indf2,c
 17708                           
 17709                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17710  003728  500E               	movf	__RegsToCANID@Value,w,c
 17711  00372A  6ED9               	movwf	fsr2l,c
 17712  00372C  6ADA               	clrf	fsr2h,c
 17713  00372E  0E03               	movlw	3
 17714  003730  26D9               	addwf	fsr2l,f,c
 17715  003732  6ADA               	clrf	fsr2h,c
 17716  003734  0E00               	movlw	0
 17717  003736  6EDF               	movwf	indf2,c
 17718                           
 17719                           ;ECAN.c: 1170: }
 17720  003738  D032               	goto	l235
 17721  00373A                     l9305:
 17722                           
 17723                           ;ECAN.c: 1171: else
 17724                           ;ECAN.c: 1172: {
 17725                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17726  00373A  D832               	call	PL40	;call to abstracted procedure
 17727  00373C  D855               	call	PL66	;call to abstracted procedure
 17728  00373E                     u11095:
 17729  00373E  90D8               	bcf	status,0,c
 17730  003740  360C               	rlcf	??__RegsToCANID,f,c
 17731  003742  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17732  003744  D7FC               	goto	u11095
 17733  003746  500C               	movf	??__RegsToCANID,w,c
 17734  003748  6EDF               	movwf	indf2,c
 17735                           
 17736                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17737  00374A  500E               	movf	__RegsToCANID@Value,w,c
 17738  00374C  6ED9               	movwf	fsr2l,c
 17739  00374E  6ADA               	clrf	fsr2h,c
 17740  003750  0E03               	movlw	3
 17741  003752  26D9               	addwf	fsr2l,f,c
 17742  003754  D836               	call	PL56	;call to abstracted procedure
 17743  003756  320C               	rrcf	??__RegsToCANID,f,c
 17744  003758  90D8               	bcf	status,0,c
 17745  00375A  320C               	rrcf	??__RegsToCANID,f,c
 17746  00375C  90D8               	bcf	status,0,c
 17747  00375E  300C               	rrcf	??__RegsToCANID,w,c
 17748                           
 17749                           ;ECAN.c: 1176: ptr++;
 17750                           
 17751                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17752  003760  D839               	call	PL58	;call to abstracted procedure
 17753  003762  0E03               	movlw	3
 17754  003764  160C               	andwf	??__RegsToCANID,f,c
 17755  003766  D81C               	call	PL40	;call to abstracted procedure
 17756  003768  500C               	movf	??__RegsToCANID,w,c
 17757  00376A  12DF               	iorwf	indf2,f,c
 17758                           
 17759                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17760  00376C  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17761  003770  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17762  003774  50DF               	movf	indf2,w,c
 17763  003776  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17764  003778  90D8               	bcf	status,0,c
 17765  00377A  320C               	rrcf	??__RegsToCANID,f,c
 17766  00377C  90D8               	bcf	status,0,c
 17767  00377E  320C               	rrcf	??__RegsToCANID,f,c
 17768  003780  90D8               	bcf	status,0,c
 17769  003782  320C               	rrcf	??__RegsToCANID,f,c
 17770  003784  0E1C               	movlw	28
 17771  003786  160C               	andwf	??__RegsToCANID,f,c
 17772  003788  D80B               	call	PL40	;call to abstracted procedure
 17773  00378A  500C               	movf	??__RegsToCANID,w,c
 17774  00378C  12DF               	iorwf	indf2,f,c
 17775                           
 17776                           ;ECAN.c: 1180: ptr++;
 17777                           
 17778                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17779  00378E  D80F               	call	PL52	;call to abstracted procedure
 17780  003790  2AE1               	incf	fsr1l,f,c
 17781  003792  6AE2               	clrf	fsr1h,c
 17782  003794  CFDF FFE7          	movff	indf2,indf1
 17783                           
 17784                           ;ECAN.c: 1182: ptr++;
 17785                           
 17786                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17787  003798  D80A               	call	PL52	;call to abstracted procedure
 17788  00379A  CFDF FFE7          	movff	indf2,indf1
 17789  00379E                     l235:
 17790  00379E  0012               	return	
 17791  0037A0                     __end_of__RegsToCANID:
 17792                           	opt stack 0
 17793  0037A0                     PL40:
 17794                           	opt stack 23
 17795  0037A0  500E               	movf	__RegsToCANID@Value,w,c
 17796  0037A2  6ED9               	movwf	fsr2l,c
 17797  0037A4  6ADA               	clrf	fsr2h,c
 17798  0037A6  0E02               	movlw	2
 17799  0037A8  26D9               	addwf	fsr2l,f,c
 17800  0037AA  6ADA               	clrf	fsr2h,c
 17801  0037AC  0012               	return	
 17802  0037AE                     __end_ofPL40:
 17803                           	opt stack 0
 17804  0037AE                     PL52:
 17805                           	opt stack 23
 17806  0037AE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17807  0037B0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17808  0037B2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17809  0037B6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17810  0037BA  500E               	movf	__RegsToCANID@Value,w,c
 17811  0037BC  6EE1               	movwf	fsr1l,c
 17812  0037BE  6AE2               	clrf	fsr1h,c
 17813  0037C0  0012               	return	
 17814  0037C2                     __end_ofPL52:
 17815                           	opt stack 0
 17816  0037C2                     PL56:
 17817                           	opt stack 23
 17818  0037C2  6ADA               	clrf	fsr2h,c
 17819  0037C4  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17820  0037C8  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17821  0037CC  50E7               	movf	indf1,w,c
 17822  0037CE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17823  0037D0  90D8               	bcf	status,0,c
 17824  0037D2  0012               	return	
 17825  0037D4                     __end_ofPL56:
 17826                           	opt stack 0
 17827  0037D4                     PL58:
 17828                           	opt stack 23
 17829  0037D4  6EDF               	movwf	indf2,c
 17830  0037D6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17831  0037D8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17832  0037DA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17833  0037DE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17834  0037E2  50DF               	movf	indf2,w,c
 17835  0037E4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17836  0037E6  0012               	return	
 17837  0037E8                     __end_ofPL58:
 17838                           	opt stack 0
 17839  0037E8                     PL66:
 17840                           	opt stack 23
 17841  0037E8  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17842  0037EC  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17843  0037F0  50E7               	movf	indf1,w,c
 17844  0037F2  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17845  0037F4  0E05               	movlw	5
 17846  0037F6  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17847  0037F8  0C05               	retlw	5
 17848  0037FA                     __end_ofPL66:
 17849                           	opt stack 0
 17850                           tblptru	equ	0xFF8
 17851                           tblptrh	equ	0xFF7
 17852                           tblptrl	equ	0xFF6
 17853                           tablat	equ	0xFF5
 17854                           prodh	equ	0xFF4
 17855                           prodl	equ	0xFF3
 17856                           intcon	equ	0xFF2
 17857                           intcon2	equ	0xFF1
 17858                           postinc0	equ	0xFEE
 17859                           wreg	equ	0xFE8
 17860                           indf1	equ	0xFE7
 17861                           fsr1h	equ	0xFE2
 17862                           fsr1l	equ	0xFE1
 17863                           indf2	equ	0xFDF
 17864                           postinc2	equ	0xFDE
 17865                           postdec2	equ	0xFDD
 17866                           plusw2	equ	0xFDB
 17867                           fsr2h	equ	0xFDA
 17868                           fsr2l	equ	0xFD9
 17869                           status	equ	0xFD8
 17870                           
 17871 ;; *************** function __ECANPointBuffer *****************
 17872 ;; Defined at:
 17873 ;;		line 1207 in file "../ECAN.c"
 17874 ;; Parameters:    Size  Location     Type
 17875 ;;  b               1    wreg     unsigned char 
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;  b               1   10[COMRAM] unsigned char 
 17878 ;;  pt              2   11[COMRAM] PTR unsigned char 
 17879 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17880 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17881 ;; Return value:  Size  Location     Type
 17882 ;;                  2    7[COMRAM] PTR unsigned char 
 17883 ;; Registers used:
 17884 ;;		wreg, status,2, status,0
 17885 ;; Tracked objects:
 17886 ;;		On entry : F/0
 17887 ;;		On exit  : 0/0
 17888 ;;		Unchanged: 0/0
 17889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17890 ;;      Params:         3       0       0       0       0       0       0
 17891 ;;      Locals:         3       0       0       0       0       0       0
 17892 ;;      Temps:          0       0       0       0       0       0       0
 17893 ;;      Totals:         6       0       0       0       0       0       0
 17894 ;;Total ram usage:        6 bytes
 17895 ;; Hardware stack levels used:    1
 17896 ;; Hardware stack levels required when called:    2
 17897 ;; This function calls:
 17898 ;;		Nothing
 17899 ;; This function is called by:
 17900 ;;		_ECANReceiveMessage
 17901 ;; This function uses a non-reentrant model
 17902 ;;
 17903                           
 17904                           	psect	text64
 17905  00403E                     __ptext64:
 17906                           	opt stack 0
 17907  00403E                     __ECANPointBuffer:
 17908                           	opt stack 23
 17909                           
 17910                           ;incstack = 0
 17911                           ;incstack = 0
 17912                           ;__ECANPointBuffer@b stored from wreg
 17913  00403E  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;ECAN.c: 1208: BYTE* pt;
 17917                           ;ECAN.c: 1210: switch(b)
 17918  004042  D024               	goto	l9291
 17919  004044                     l9273:
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17923  004044  0E0F               	movlw	15	;volatile
 17924  004046  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17925  004048  0E60               	movlw	96	;volatile
 17926  00404A  D01E               	goto	L66
 17927  00404C                     l9275:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17931  00404C  010F               	movlb	15	; () banked
 17932  00404E  0E0F               	movlw	15	;volatile
 17933  004050  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17934  004052  0E50               	movlw	80	;volatile
 17935  004054  D019               	goto	L66
 17936  004056                     l9277:
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17940  004056  010E               	movlb	14	; () banked
 17941  004058  0E0E               	movlw	14	;volatile
 17942  00405A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17943  00405C  0E20               	movlw	32	;volatile
 17944  00405E  D014               	goto	L66
 17945  004060                     l9279:
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17949  004060  010E               	movlb	14	; () banked
 17950  004062  0E0E               	movlw	14	;volatile
 17951  004064  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17952  004066  0E30               	movlw	48	;volatile
 17953  004068  D00F               	goto	L66
 17954  00406A                     l9281:
 17955                           
 17956                           ; BSR set to: 0
 17957                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17958  00406A  010E               	movlb	14	; () banked
 17959  00406C  0E0E               	movlw	14	;volatile
 17960  00406E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17961  004070  0E40               	movlw	64	;volatile
 17962  004072  D00A               	goto	L66
 17963  004074                     l9283:
 17964                           
 17965                           ; BSR set to: 0
 17966                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17967  004074  010E               	movlb	14	; () banked
 17968  004076  0E0E               	movlw	14	;volatile
 17969  004078  D7EB               	goto	L67
 17970  00407A                     l9285:
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17974  00407A  010E               	movlb	14	; () banked
 17975  00407C  0E0E               	movlw	14	;volatile
 17976  00407E  D7E3               	goto	L68
 17977  004080                     l9287:
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17981  004080  010E               	movlb	14	; () banked
 17982  004082  0E0E               	movlw	14	;volatile
 17983  004084  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17984  004086  0E70               	movlw	112	;volatile
 17985  004088                     L66:
 17986  004088  6E0C               	movwf	__ECANPointBuffer@pt,c
 17987                           
 17988                           ;ECAN.c: 1235: break;
 17989  00408A  D00F               	goto	l240
 17990  00408C                     l9291:
 17991                           
 17992                           ; BSR set to: 0
 17993  00408C  500B               	movf	__ECANPointBuffer@b,w,c
 17994                           
 17995                           ; Switch size 1, requested type "space"
 17996                           ; Number of cases is 7, Range of values is 0 to 6
 17997                           ; switch strategies available:
 17998                           ; Name         Instructions Cycles
 17999                           ; simple_byte           22    12 (average)
 18000                           ;	Chosen strategy is simple_byte
 18001  00408E  E0DA               	bz	l9273
 18002  004090  0A01               	xorlw	1	; case 1
 18003  004092  E0DC               	bz	l9275
 18004  004094  0A03               	xorlw	3	; case 2
 18005  004096  E0DF               	bz	l9277
 18006  004098  0A01               	xorlw	1	; case 3
 18007  00409A  E0E2               	bz	l9279
 18008  00409C  0A07               	xorlw	7	; case 4
 18009  00409E  E0E5               	bz	l9281
 18010  0040A0  0A01               	xorlw	1	; case 5
 18011  0040A2  E0E8               	bz	l9283
 18012  0040A4  0A03               	xorlw	3	; case 6
 18013  0040A6  E0E9               	bz	l9285
 18014  0040A8  D7EB               	goto	l9287
 18015  0040AA                     l240:
 18016                           
 18017                           ;ECAN.c: 1237: return (pt);
 18018  0040AA  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 18019  0040AE  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 18020  0040B2  0012               	return	
 18021  0040B4                     __end_of__ECANPointBuffer:
 18022                           	opt stack 0
 18023                           tblptru	equ	0xFF8
 18024                           tblptrh	equ	0xFF7
 18025                           tblptrl	equ	0xFF6
 18026                           tablat	equ	0xFF5
 18027                           prodh	equ	0xFF4
 18028                           prodl	equ	0xFF3
 18029                           intcon	equ	0xFF2
 18030                           intcon2	equ	0xFF1
 18031                           postinc0	equ	0xFEE
 18032                           wreg	equ	0xFE8
 18033                           indf1	equ	0xFE7
 18034                           fsr1h	equ	0xFE2
 18035                           fsr1l	equ	0xFE1
 18036                           indf2	equ	0xFDF
 18037                           postinc2	equ	0xFDE
 18038                           postdec2	equ	0xFDD
 18039                           plusw2	equ	0xFDB
 18040                           fsr2h	equ	0xFDA
 18041                           fsr2l	equ	0xFD9
 18042                           status	equ	0xFD8
 18043                           
 18044 ;; *************** function _vscp_check_pstorage *****************
 18045 ;; Defined at:
 18046 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 18047 ;; Parameters:    Size  Location     Type
 18048 ;;		None
 18049 ;; Auto vars:     Size  Location     Type
 18050 ;;		None
 18051 ;; Return value:  Size  Location     Type
 18052 ;;                  1    wreg      unsigned char 
 18053 ;; Registers used:
 18054 ;;		wreg, status,2, status,0, cstack
 18055 ;; Tracked objects:
 18056 ;;		On entry : 0/0
 18057 ;;		On exit  : 0/0
 18058 ;;		Unchanged: 0/0
 18059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18060 ;;      Params:         0       0       0       0       0       0       0
 18061 ;;      Locals:         0       0       0       0       0       0       0
 18062 ;;      Temps:          0       0       0       0       0       0       0
 18063 ;;      Totals:         0       0       0       0       0       0       0
 18064 ;;Total ram usage:        0 bytes
 18065 ;; Hardware stack levels used:    1
 18066 ;; Hardware stack levels required when called:    4
 18067 ;; This function calls:
 18068 ;;		_vscp_writeNicknamePermanent
 18069 ;;		_vscp_getSegmentCRC
 18070 ;;		_vscp_setSegmentCRC
 18071 ;;		_vscp_setControlByte
 18072 ;; This function is called by:
 18073 ;;		_main
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           	psect	text65
 18078  00447E                     __ptext65:
 18079                           	opt stack 0
 18080  00447E                     _vscp_check_pstorage:
 18081                           	opt stack 25
 18082                           
 18083                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 18084                           
 18085                           ;incstack = 0
 18086                           ;incstack = 0
 18087  00447E  EC52  F023         	call	_vscp_getSegmentCRC	;wreg free
 18088  004482  0BC0               	andlw	192
 18089  004484  0A40               	xorlw	64
 18090  004486  E102               	bnz	l12697
 18091                           
 18092                           ;vscp_firmware.c: 172: return !0;
 18093  004488  0E01               	movlw	1
 18094  00448A  D00A               	goto	l1289
 18095  00448C                     l12697:
 18096                           
 18097                           ;vscp_firmware.c: 173: }
 18098                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 18099  00448C  0EFF               	movlw	255
 18100  00448E  ECF5  F022         	call	_vscp_writeNicknamePermanent
 18101                           
 18102                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 18103  004492  0E00               	movlw	0
 18104  004494  ECEA  F022         	call	_vscp_setSegmentCRC
 18105                           
 18106                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 18107  004498  0EA0               	movlw	160
 18108  00449A  ECDF  F022         	call	_vscp_setControlByte
 18109                           
 18110                           ;vscp_firmware.c: 185: return 0;
 18111  00449E  0E00               	movlw	0
 18112  0044A0                     l1289:
 18113  0044A0  0012               	return	
 18114  0044A2                     __end_of_vscp_check_pstorage:
 18115                           	opt stack 0
 18116                           tblptru	equ	0xFF8
 18117                           tblptrh	equ	0xFF7
 18118                           tblptrl	equ	0xFF6
 18119                           tablat	equ	0xFF5
 18120                           prodh	equ	0xFF4
 18121                           prodl	equ	0xFF3
 18122                           intcon	equ	0xFF2
 18123                           intcon2	equ	0xFF1
 18124                           postinc0	equ	0xFEE
 18125                           wreg	equ	0xFE8
 18126                           indf1	equ	0xFE7
 18127                           fsr1h	equ	0xFE2
 18128                           fsr1l	equ	0xFE1
 18129                           indf2	equ	0xFDF
 18130                           postinc2	equ	0xFDE
 18131                           postdec2	equ	0xFDD
 18132                           plusw2	equ	0xFDB
 18133                           fsr2h	equ	0xFDA
 18134                           fsr2l	equ	0xFD9
 18135                           status	equ	0xFD8
 18136                           
 18137 ;; *************** function _vscp_setControlByte *****************
 18138 ;; Defined at:
 18139 ;;		line 3402 in file "../main.c"
 18140 ;; Parameters:    Size  Location     Type
 18141 ;;  ctrl            1    wreg     unsigned char 
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;  ctrl            1   11[COMRAM] unsigned char 
 18144 ;; Return value:  Size  Location     Type
 18145 ;;		None               void
 18146 ;; Registers used:
 18147 ;;		wreg, status,2, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18153 ;;      Params:         0       0       0       0       0       0       0
 18154 ;;      Locals:         1       0       0       0       0       0       0
 18155 ;;      Temps:          0       0       0       0       0       0       0
 18156 ;;      Totals:         1       0       0       0       0       0       0
 18157 ;;Total ram usage:        1 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    3
 18160 ;; This function calls:
 18161 ;;		_Busy_eep
 18162 ;;		_Write_b_eep
 18163 ;; This function is called by:
 18164 ;;		_vscp_check_pstorage
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           	psect	text66
 18169  0045BE                     __ptext66:
 18170                           	opt stack 0
 18171  0045BE                     _vscp_setControlByte:
 18172                           	opt stack 25
 18173                           
 18174                           ;incstack = 0
 18175                           ;incstack = 0
 18176                           ;vscp_setControlByte@ctrl stored from wreg
 18177  0045BE  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 18178                           
 18179                           ;main.c: 3403: (Busy_eep(), Write_b_eep(0x03,ctrl));
 18180  0045C2  EC5B  F023         	call	_Busy_eep	;wreg free
 18181  0045C6  6A09               	clrf	?_Write_b_eep+1,c
 18182  0045C8  0E03               	movlw	3
 18183  0045CA  6E08               	movwf	?_Write_b_eep,c
 18184  0045CC  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18185  0045D0  EF2E  F021         	goto	_Write_b_eep	;wreg free
 18186  0045D4                     __end_of_vscp_setControlByte:
 18187                           	opt stack 0
 18188                           tblptru	equ	0xFF8
 18189                           tblptrh	equ	0xFF7
 18190                           tblptrl	equ	0xFF6
 18191                           tablat	equ	0xFF5
 18192                           prodh	equ	0xFF4
 18193                           prodl	equ	0xFF3
 18194                           intcon	equ	0xFF2
 18195                           intcon2	equ	0xFF1
 18196                           postinc0	equ	0xFEE
 18197                           wreg	equ	0xFE8
 18198                           indf1	equ	0xFE7
 18199                           fsr1h	equ	0xFE2
 18200                           fsr1l	equ	0xFE1
 18201                           indf2	equ	0xFDF
 18202                           postinc2	equ	0xFDE
 18203                           postdec2	equ	0xFDD
 18204                           plusw2	equ	0xFDB
 18205                           fsr2h	equ	0xFDA
 18206                           fsr2l	equ	0xFD9
 18207                           status	equ	0xFD8
 18208                           
 18209 ;; *************** function _vscp_setSegmentCRC *****************
 18210 ;; Defined at:
 18211 ;;		line 3393 in file "../main.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  crc             1    wreg     unsigned char 
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;  crc             1   11[COMRAM] unsigned char 
 18216 ;; Return value:  Size  Location     Type
 18217 ;;		None               void
 18218 ;; Registers used:
 18219 ;;		wreg, status,2, cstack
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18225 ;;      Params:         0       0       0       0       0       0       0
 18226 ;;      Locals:         1       0       0       0       0       0       0
 18227 ;;      Temps:          0       0       0       0       0       0       0
 18228 ;;      Totals:         1       0       0       0       0       0       0
 18229 ;;Total ram usage:        1 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    3
 18232 ;; This function calls:
 18233 ;;		_Busy_eep
 18234 ;;		_Write_b_eep
 18235 ;; This function is called by:
 18236 ;;		_vscp_check_pstorage
 18237 ;;		_vscp_handleProbeState
 18238 ;;		_vscp_handleHeartbeat
 18239 ;;		_vscp_handleSetNickname
 18240 ;; This function uses a non-reentrant model
 18241 ;;
 18242                           
 18243                           	psect	text67
 18244  0045D4                     __ptext67:
 18245                           	opt stack 0
 18246  0045D4                     _vscp_setSegmentCRC:
 18247                           	opt stack 24
 18248                           
 18249                           ;incstack = 0
 18250                           ;incstack = 0
 18251                           ;vscp_setSegmentCRC@crc stored from wreg
 18252  0045D4  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 18253                           
 18254                           ;main.c: 3394: (Busy_eep(), Write_b_eep(0x02,crc));
 18255  0045D8  EC5B  F023         	call	_Busy_eep	;wreg free
 18256  0045DC  6A09               	clrf	?_Write_b_eep+1,c
 18257  0045DE  0E02               	movlw	2
 18258  0045E0  6E08               	movwf	?_Write_b_eep,c
 18259  0045E2  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 18260  0045E6  EF2E  F021         	goto	_Write_b_eep	;wreg free
 18261  0045EA                     __end_of_vscp_setSegmentCRC:
 18262                           	opt stack 0
 18263                           tblptru	equ	0xFF8
 18264                           tblptrh	equ	0xFF7
 18265                           tblptrl	equ	0xFF6
 18266                           tablat	equ	0xFF5
 18267                           prodh	equ	0xFF4
 18268                           prodl	equ	0xFF3
 18269                           intcon	equ	0xFF2
 18270                           intcon2	equ	0xFF1
 18271                           postinc0	equ	0xFEE
 18272                           wreg	equ	0xFE8
 18273                           indf1	equ	0xFE7
 18274                           fsr1h	equ	0xFE2
 18275                           fsr1l	equ	0xFE1
 18276                           indf2	equ	0xFDF
 18277                           postinc2	equ	0xFDE
 18278                           postdec2	equ	0xFDD
 18279                           plusw2	equ	0xFDB
 18280                           fsr2h	equ	0xFDA
 18281                           fsr2l	equ	0xFD9
 18282                           status	equ	0xFD8
 18283                           
 18284 ;; *************** function _vscp_getSegmentCRC *****************
 18285 ;; Defined at:
 18286 ;;		line 3384 in file "../main.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;		None
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;		None
 18291 ;; Return value:  Size  Location     Type
 18292 ;;                  1    wreg      unsigned char 
 18293 ;; Registers used:
 18294 ;;		wreg, status,2, cstack
 18295 ;; Tracked objects:
 18296 ;;		On entry : 0/0
 18297 ;;		On exit  : 0/0
 18298 ;;		Unchanged: 0/0
 18299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18300 ;;      Params:         0       0       0       0       0       0       0
 18301 ;;      Locals:         0       0       0       0       0       0       0
 18302 ;;      Temps:          0       0       0       0       0       0       0
 18303 ;;      Totals:         0       0       0       0       0       0       0
 18304 ;;Total ram usage:        0 bytes
 18305 ;; Hardware stack levels used:    1
 18306 ;; Hardware stack levels required when called:    3
 18307 ;; This function calls:
 18308 ;;		_Read_b_eep
 18309 ;; This function is called by:
 18310 ;;		_vscp_check_pstorage
 18311 ;;		_vscp_handleHeartbeat
 18312 ;; This function uses a non-reentrant model
 18313 ;;
 18314                           
 18315                           	psect	text68
 18316  0046A4                     __ptext68:
 18317                           	opt stack 0
 18318  0046A4                     _vscp_getSegmentCRC:
 18319                           	opt stack 24
 18320                           
 18321                           ;main.c: 3385: return Read_b_eep(0x02);
 18322                           
 18323                           ;incstack = 0
 18324                           ;incstack = 0
 18325  0046A4  6A09               	clrf	?_Read_b_eep+1,c
 18326  0046A6  0E02               	movlw	2
 18327  0046A8  6E08               	movwf	?_Read_b_eep,c
 18328  0046AA  EF27  F023         	goto	_Read_b_eep	;wreg free
 18329  0046AE                     __end_of_vscp_getSegmentCRC:
 18330                           	opt stack 0
 18331                           tblptru	equ	0xFF8
 18332                           tblptrh	equ	0xFF7
 18333                           tblptrl	equ	0xFF6
 18334                           tablat	equ	0xFF5
 18335                           prodh	equ	0xFF4
 18336                           prodl	equ	0xFF3
 18337                           intcon	equ	0xFF2
 18338                           intcon2	equ	0xFF1
 18339                           postinc0	equ	0xFEE
 18340                           wreg	equ	0xFE8
 18341                           indf1	equ	0xFE7
 18342                           fsr1h	equ	0xFE2
 18343                           fsr1l	equ	0xFE1
 18344                           indf2	equ	0xFDF
 18345                           postinc2	equ	0xFDE
 18346                           postdec2	equ	0xFDD
 18347                           plusw2	equ	0xFDB
 18348                           fsr2h	equ	0xFDA
 18349                           fsr2l	equ	0xFD9
 18350                           status	equ	0xFD8
 18351                           
 18352 ;; *************** function _vscp_writeNicknamePermanent *****************
 18353 ;; Defined at:
 18354 ;;		line 1382 in file "../main.c"
 18355 ;; Parameters:    Size  Location     Type
 18356 ;;  nickname        1    wreg     unsigned char 
 18357 ;; Auto vars:     Size  Location     Type
 18358 ;;  nickname        1   11[COMRAM] unsigned char 
 18359 ;; Return value:  Size  Location     Type
 18360 ;;		None               void
 18361 ;; Registers used:
 18362 ;;		wreg, status,2, cstack
 18363 ;; Tracked objects:
 18364 ;;		On entry : 0/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18368 ;;      Params:         0       0       0       0       0       0       0
 18369 ;;      Locals:         1       0       0       0       0       0       0
 18370 ;;      Temps:          0       0       0       0       0       0       0
 18371 ;;      Totals:         1       0       0       0       0       0       0
 18372 ;;Total ram usage:        1 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:    3
 18375 ;; This function calls:
 18376 ;;		_Busy_eep
 18377 ;;		_Write_b_eep
 18378 ;; This function is called by:
 18379 ;;		_vscp_check_pstorage
 18380 ;;		_vscp_handleProbeState
 18381 ;;		_vscp_handleHeartbeat
 18382 ;;		_vscp_handleSetNickname
 18383 ;;		_vscp_handleDropNickname
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           	psect	text69
 18388  0045EA                     __ptext69:
 18389                           	opt stack 0
 18390  0045EA                     _vscp_writeNicknamePermanent:
 18391                           	opt stack 24
 18392                           
 18393                           ;incstack = 0
 18394                           ;incstack = 0
 18395                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18396  0045EA  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18397                           
 18398                           ;main.c: 1383: (Busy_eep(), Write_b_eep(0x01,nickname));
 18399  0045EE  EC5B  F023         	call	_Busy_eep	;wreg free
 18400  0045F2  6A09               	clrf	?_Write_b_eep+1,c
 18401  0045F4  0E01               	movlw	1
 18402  0045F6  6E08               	movwf	?_Write_b_eep,c
 18403  0045F8  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18404  0045FC  EF2E  F021         	goto	_Write_b_eep	;wreg free
 18405  004600                     __end_of_vscp_writeNicknamePermanent:
 18406                           	opt stack 0
 18407                           tblptru	equ	0xFF8
 18408                           tblptrh	equ	0xFF7
 18409                           tblptrl	equ	0xFF6
 18410                           tablat	equ	0xFF5
 18411                           prodh	equ	0xFF4
 18412                           prodl	equ	0xFF3
 18413                           intcon	equ	0xFF2
 18414                           intcon2	equ	0xFF1
 18415                           postinc0	equ	0xFEE
 18416                           wreg	equ	0xFE8
 18417                           indf1	equ	0xFE7
 18418                           fsr1h	equ	0xFE2
 18419                           fsr1l	equ	0xFE1
 18420                           indf2	equ	0xFDF
 18421                           postinc2	equ	0xFDE
 18422                           postdec2	equ	0xFDD
 18423                           plusw2	equ	0xFDB
 18424                           fsr2h	equ	0xFDA
 18425                           fsr2l	equ	0xFD9
 18426                           status	equ	0xFD8
 18427                           
 18428 ;; *************** function _Write_b_eep *****************
 18429 ;; Defined at:
 18430 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;  badd            2    7[COMRAM] unsigned int 
 18433 ;;  bdat            1    9[COMRAM] unsigned char 
 18434 ;; Auto vars:     Size  Location     Type
 18435 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 18436 ;; Return value:  Size  Location     Type
 18437 ;;		None               void
 18438 ;; Registers used:
 18439 ;;		wreg, status,2
 18440 ;; Tracked objects:
 18441 ;;		On entry : 0/0
 18442 ;;		On exit  : 0/0
 18443 ;;		Unchanged: 0/0
 18444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18445 ;;      Params:         3       0       0       0       0       0       0
 18446 ;;      Locals:         1       0       0       0       0       0       0
 18447 ;;      Temps:          0       0       0       0       0       0       0
 18448 ;;      Totals:         4       0       0       0       0       0       0
 18449 ;;Total ram usage:        4 bytes
 18450 ;; Hardware stack levels used:    1
 18451 ;; Hardware stack levels required when called:    2
 18452 ;; This function calls:
 18453 ;;		Nothing
 18454 ;; This function is called by:
 18455 ;;		_main
 18456 ;;		_init_app_eeprom
 18457 ;;		_vscp_setGUID
 18458 ;;		_vscp_setManufacturerId
 18459 ;;		_vscp_writeNicknamePermanent
 18460 ;;		_vscp_writeAppReg
 18461 ;;		_vscp_setUserID
 18462 ;;		_vscp_setSegmentCRC
 18463 ;;		_vscp_setControlByte
 18464 ;;		_vscp_goBootloaderMode
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           	psect	text70
 18469  00425C                     __ptext70:
 18470                           	opt stack 0
 18471  00425C                     _Write_b_eep:
 18472                           	opt stack 23
 18473                           
 18474                           ;incstack = 0
 18475                           ;incstack = 0
 18476  00425C  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 18477  004260  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 18478  004264  9EA6               	bcf	4006,7,c	;volatile
 18479  004266  9CA6               	bcf	4006,6,c	;volatile
 18480  004268  84A6               	bsf	4006,2,c	;volatile
 18481  00426A  0E00               	movlw	0
 18482  00426C  BEF2               	btfsc	intcon,7,c	;volatile
 18483  00426E  0E01               	movlw	1
 18484  004270  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18485  004272  9EF2               	bcf	intcon,7,c	;volatile
 18486  004274  0E55               	movlw	85
 18487  004276  6EA7               	movwf	4007,c	;volatile
 18488  004278  0EAA               	movlw	170
 18489  00427A  6EA7               	movwf	4007,c	;volatile
 18490  00427C  82A6               	bsf	4006,1,c	;volatile
 18491  00427E                     l1564:
 18492  00427E  B2A6               	btfsc	4006,1,c	;volatile
 18493  004280  D7FE               	goto	l1564
 18494  004282  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18495  004284  D002               	bra	u16685
 18496  004286  9EF2               	bcf	intcon,7,c	;volatile
 18497  004288  D001               	bra	u16686
 18498  00428A                     u16685:
 18499  00428A  8EF2               	bsf	intcon,7,c	;volatile
 18500  00428C                     u16686:
 18501  00428C  94A6               	bcf	4006,2,c	;volatile
 18502  00428E  0012               	return	
 18503  004290                     __end_of_Write_b_eep:
 18504                           	opt stack 0
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           intcon2	equ	0xFF1
 18513                           postinc0	equ	0xFEE
 18514                           wreg	equ	0xFE8
 18515                           indf1	equ	0xFE7
 18516                           fsr1h	equ	0xFE2
 18517                           fsr1l	equ	0xFE1
 18518                           indf2	equ	0xFDF
 18519                           postinc2	equ	0xFDE
 18520                           postdec2	equ	0xFDD
 18521                           plusw2	equ	0xFDB
 18522                           fsr2h	equ	0xFDA
 18523                           fsr2l	equ	0xFD9
 18524                           status	equ	0xFD8
 18525                           
 18526 ;; *************** function _Busy_eep *****************
 18527 ;; Defined at:
 18528 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 18529 ;; Parameters:    Size  Location     Type
 18530 ;;		None
 18531 ;; Auto vars:     Size  Location     Type
 18532 ;;		None
 18533 ;; Return value:  Size  Location     Type
 18534 ;;		None               void
 18535 ;; Registers used:
 18536 ;;		None
 18537 ;; Tracked objects:
 18538 ;;		On entry : 0/0
 18539 ;;		On exit  : 0/0
 18540 ;;		Unchanged: 0/0
 18541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18542 ;;      Params:         0       0       0       0       0       0       0
 18543 ;;      Locals:         0       0       0       0       0       0       0
 18544 ;;      Temps:          0       0       0       0       0       0       0
 18545 ;;      Totals:         0       0       0       0       0       0       0
 18546 ;;Total ram usage:        0 bytes
 18547 ;; Hardware stack levels used:    1
 18548 ;; Hardware stack levels required when called:    2
 18549 ;; This function calls:
 18550 ;;		Nothing
 18551 ;; This function is called by:
 18552 ;;		_main
 18553 ;;		_init_app_eeprom
 18554 ;;		_vscp_setGUID
 18555 ;;		_vscp_setManufacturerId
 18556 ;;		_vscp_writeNicknamePermanent
 18557 ;;		_vscp_writeAppReg
 18558 ;;		_vscp_setUserID
 18559 ;;		_vscp_setSegmentCRC
 18560 ;;		_vscp_setControlByte
 18561 ;;		_vscp_goBootloaderMode
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           	psect	text71
 18566  0046B6                     __ptext71:
 18567                           	opt stack 0
 18568  0046B6                     _Busy_eep:
 18569                           	opt stack 23
 18570  0046B6                     l1539:
 18571  0046B6  A2A6               	btfss	4006,1,c	;volatile
 18572  0046B8  0012               	return	
 18573  0046BA  D7FD               	goto	l1539
 18574  0046BC                     __end_of_Busy_eep:
 18575                           	opt stack 0
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           intcon2	equ	0xFF1
 18584                           postinc0	equ	0xFEE
 18585                           wreg	equ	0xFE8
 18586                           indf1	equ	0xFE7
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _init *****************
 18598 ;; Defined at:
 18599 ;;		line 641 in file "../main.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;		None
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;		None
 18604 ;; Return value:  Size  Location     Type
 18605 ;;		None               void
 18606 ;; Registers used:
 18607 ;;		wreg, status,2, status,0, cstack
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18613 ;;      Params:         0       0       0       0       0       0       0
 18614 ;;      Locals:         0       0       0       0       0       0       0
 18615 ;;      Temps:          0       0       0       0       0       0       0
 18616 ;;      Totals:         0       0       0       0       0       0       0
 18617 ;;Total ram usage:        0 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; Hardware stack levels required when called:    4
 18620 ;; This function calls:
 18621 ;;		_ECANInitialize
 18622 ;;		_WriteTimer0
 18623 ;;		_OpenTimer0
 18624 ;; This function is called by:
 18625 ;;		_main
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           	psect	text72
 18630  004198                     __ptext72:
 18631                           	opt stack 0
 18632  004198                     _init:
 18633                           	opt stack 25
 18634                           
 18635                           ;main.c: 648: ADCON1 = 0x0f;
 18636                           
 18637                           ;incstack = 0
 18638                           ;incstack = 0
 18639  004198  0E0F               	movlw	15
 18640  00419A  6EC1               	movwf	4033,c	;volatile
 18641                           
 18642                           ;main.c: 658: TRISA = 0b00000000;
 18643  00419C  6A92               	clrf	3986,c	;volatile
 18644                           
 18645                           ;main.c: 659: PORTA = 0x00;
 18646  00419E  6A80               	clrf	3968,c	;volatile
 18647                           
 18648                           ;main.c: 671: TRISB = 0b00001000;
 18649  0041A0  0E08               	movlw	8
 18650  0041A2  6E93               	movwf	3987,c	;volatile
 18651                           
 18652                           ;main.c: 672: PORTB = 0x00;
 18653  0041A4  6A81               	clrf	3969,c	;volatile
 18654                           
 18655                           ;main.c: 682: TRISC = 0b00000001;
 18656  0041A6  0E01               	movlw	1
 18657  0041A8  6E94               	movwf	3988,c	;volatile
 18658                           
 18659                           ;main.c: 683: PORTC = 0x00;
 18660  0041AA  6A82               	clrf	3970,c	;volatile
 18661                           
 18662                           ;main.c: 709: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 18663  0041AC  0E92               	movlw	146
 18664  0041AE  EC81  F022         	call	_OpenTimer0
 18665                           
 18666                           ;main.c: 710: WriteTimer0( 0xfb1d );
 18667  0041B2  0EFB               	movlw	251
 18668  0041B4  6E09               	movwf	?_WriteTimer0+1,c
 18669  0041B6  0E1D               	movlw	29
 18670  0041B8  6E08               	movwf	?_WriteTimer0,c
 18671  0041BA  EC1E  F023         	call	_WriteTimer0	;wreg free
 18672                           
 18673                           ;main.c: 713: PORTBbits.RB0 = 0;
 18674  0041BE  9081               	bcf	3969,0,c	;volatile
 18675                           
 18676                           ;main.c: 714: PORTBbits.RB1 = 0;
 18677  0041C0  9281               	bcf	3969,1,c	;volatile
 18678                           
 18679                           ;main.c: 715: PORTCbits.RC3 = 0;
 18680  0041C2  9682               	bcf	3970,3,c	;volatile
 18681                           
 18682                           ;main.c: 716: PORTCbits.RC4 = 0;
 18683  0041C4  9882               	bcf	3970,4,c	;volatile
 18684                           
 18685                           ;main.c: 717: PORTCbits.RC5 = 0;
 18686  0041C6  9A82               	bcf	3970,5,c	;volatile
 18687                           
 18688                           ;main.c: 718: PORTCbits.RC6 = 0;
 18689  0041C8  9C82               	bcf	3970,6,c	;volatile
 18690                           
 18691                           ;main.c: 719: PORTCbits.RC7 = 0;
 18692  0041CA  9E82               	bcf	3970,7,c	;volatile
 18693                           
 18694                           ;main.c: 720: PORTAbits.RA2 = 0;
 18695  0041CC  9480               	bcf	3968,2,c	;volatile
 18696                           
 18697                           ;main.c: 721: PORTAbits.RA1 = 0;
 18698  0041CE  9280               	bcf	3968,1,c	;volatile
 18699                           
 18700                           ;main.c: 722: PORTAbits.RA0 = 0;
 18701  0041D0  9080               	bcf	3968,0,c	;volatile
 18702                           
 18703                           ;main.c: 725: ECANInitialize();
 18704  0041D2  EC98  F01F         	call	_ECANInitialize	;wreg free
 18705                           
 18706                           ;main.c: 746: INTCONbits.PEIE = 1;
 18707  0041D6  8CF2               	bsf	intcon,6,c	;volatile
 18708                           
 18709                           ;main.c: 749: INTCONbits.GIE = 1;
 18710  0041D8  8EF2               	bsf	intcon,7,c	;volatile
 18711  0041DA  0012               	return	
 18712  0041DC                     __end_of_init:
 18713                           	opt stack 0
 18714                           tblptru	equ	0xFF8
 18715                           tblptrh	equ	0xFF7
 18716                           tblptrl	equ	0xFF6
 18717                           tablat	equ	0xFF5
 18718                           prodh	equ	0xFF4
 18719                           prodl	equ	0xFF3
 18720                           intcon	equ	0xFF2
 18721                           intcon2	equ	0xFF1
 18722                           postinc0	equ	0xFEE
 18723                           wreg	equ	0xFE8
 18724                           indf1	equ	0xFE7
 18725                           fsr1h	equ	0xFE2
 18726                           fsr1l	equ	0xFE1
 18727                           indf2	equ	0xFDF
 18728                           postinc2	equ	0xFDE
 18729                           postdec2	equ	0xFDD
 18730                           plusw2	equ	0xFDB
 18731                           fsr2h	equ	0xFDA
 18732                           fsr2l	equ	0xFD9
 18733                           status	equ	0xFD8
 18734                           
 18735 ;; *************** function _OpenTimer0 *****************
 18736 ;; Defined at:
 18737 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;  config          1    wreg     unsigned char 
 18740 ;; Auto vars:     Size  Location     Type
 18741 ;;  config          1    7[COMRAM] unsigned char 
 18742 ;; Return value:  Size  Location     Type
 18743 ;;		None               void
 18744 ;; Registers used:
 18745 ;;		wreg, status,2, status,0
 18746 ;; Tracked objects:
 18747 ;;		On entry : 0/0
 18748 ;;		On exit  : 0/0
 18749 ;;		Unchanged: 0/0
 18750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18751 ;;      Params:         0       0       0       0       0       0       0
 18752 ;;      Locals:         1       0       0       0       0       0       0
 18753 ;;      Temps:          0       0       0       0       0       0       0
 18754 ;;      Totals:         1       0       0       0       0       0       0
 18755 ;;Total ram usage:        1 bytes
 18756 ;; Hardware stack levels used:    1
 18757 ;; Hardware stack levels required when called:    2
 18758 ;; This function calls:
 18759 ;;		Nothing
 18760 ;; This function is called by:
 18761 ;;		_init
 18762 ;; This function uses a non-reentrant model
 18763 ;;
 18764                           
 18765                           	psect	text73
 18766  004502                     __ptext73:
 18767                           	opt stack 0
 18768  004502                     _OpenTimer0:
 18769                           	opt stack 26
 18770                           
 18771                           ;incstack = 0
 18772                           ;incstack = 0
 18773                           ;OpenTimer0@config stored from wreg
 18774  004502  CFE8 F008          	movff	wreg,OpenTimer0@config
 18775  004506  5008               	movf	OpenTimer0@config,w,c
 18776  004508  0B7F               	andlw	127
 18777  00450A  6ED5               	movwf	4053,c	;volatile
 18778  00450C  6AD7               	clrf	4055,c	;volatile
 18779  00450E  6AD6               	clrf	4054,c	;volatile
 18780  004510  94F2               	bcf	intcon,2,c	;volatile
 18781  004512  AE08               	btfss	OpenTimer0@config,7,c
 18782  004514  D002               	goto	l1580
 18783  004516  8AF2               	bsf	intcon,5,c	;volatile
 18784  004518  D001               	goto	l1581
 18785  00451A                     l1580:
 18786  00451A  9AF2               	bcf	intcon,5,c	;volatile
 18787  00451C                     l1581:
 18788  00451C  8ED5               	bsf	4053,7,c	;volatile
 18789  00451E  0012               	return	
 18790  004520                     __end_of_OpenTimer0:
 18791                           	opt stack 0
 18792                           tblptru	equ	0xFF8
 18793                           tblptrh	equ	0xFF7
 18794                           tblptrl	equ	0xFF6
 18795                           tablat	equ	0xFF5
 18796                           prodh	equ	0xFF4
 18797                           prodl	equ	0xFF3
 18798                           intcon	equ	0xFF2
 18799                           intcon2	equ	0xFF1
 18800                           postinc0	equ	0xFEE
 18801                           wreg	equ	0xFE8
 18802                           indf1	equ	0xFE7
 18803                           fsr1h	equ	0xFE2
 18804                           fsr1l	equ	0xFE1
 18805                           indf2	equ	0xFDF
 18806                           postinc2	equ	0xFDE
 18807                           postdec2	equ	0xFDD
 18808                           plusw2	equ	0xFDB
 18809                           fsr2h	equ	0xFDA
 18810                           fsr2l	equ	0xFD9
 18811                           status	equ	0xFD8
 18812                           
 18813 ;; *************** function _WriteTimer0 *****************
 18814 ;; Defined at:
 18815 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18816 ;; Parameters:    Size  Location     Type
 18817 ;;  timer0          2    7[COMRAM] unsigned int 
 18818 ;; Auto vars:     Size  Location     Type
 18819 ;;  timer           2    9[COMRAM] struct Timers
 18820 ;; Return value:  Size  Location     Type
 18821 ;;		None               void
 18822 ;; Registers used:
 18823 ;;		None
 18824 ;; Tracked objects:
 18825 ;;		On entry : 0/0
 18826 ;;		On exit  : 0/0
 18827 ;;		Unchanged: 0/0
 18828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18829 ;;      Params:         2       0       0       0       0       0       0
 18830 ;;      Locals:         2       0       0       0       0       0       0
 18831 ;;      Temps:          0       0       0       0       0       0       0
 18832 ;;      Totals:         4       0       0       0       0       0       0
 18833 ;;Total ram usage:        4 bytes
 18834 ;; Hardware stack levels used:    1
 18835 ;; Hardware stack levels required when called:    2
 18836 ;; This function calls:
 18837 ;;		Nothing
 18838 ;; This function is called by:
 18839 ;;		_init
 18840 ;; This function uses a non-reentrant model
 18841 ;;
 18842                           
 18843                           	psect	text74
 18844  00463C                     __ptext74:
 18845                           	opt stack 0
 18846  00463C                     _WriteTimer0:
 18847                           	opt stack 26
 18848                           
 18849                           ;incstack = 0
 18850                           ;incstack = 0
 18851  00463C  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18852  004640  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18853  004644  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18854  004648  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18855  00464C  0012               	return	
 18856  00464E                     __end_of_WriteTimer0:
 18857                           	opt stack 0
 18858                           tblptru	equ	0xFF8
 18859                           tblptrh	equ	0xFF7
 18860                           tblptrl	equ	0xFF6
 18861                           tablat	equ	0xFF5
 18862                           prodh	equ	0xFF4
 18863                           prodl	equ	0xFF3
 18864                           intcon	equ	0xFF2
 18865                           intcon2	equ	0xFF1
 18866                           postinc0	equ	0xFEE
 18867                           wreg	equ	0xFE8
 18868                           indf1	equ	0xFE7
 18869                           fsr1h	equ	0xFE2
 18870                           fsr1l	equ	0xFE1
 18871                           indf2	equ	0xFDF
 18872                           postinc2	equ	0xFDE
 18873                           postdec2	equ	0xFDD
 18874                           plusw2	equ	0xFDB
 18875                           fsr2h	equ	0xFDA
 18876                           fsr2l	equ	0xFD9
 18877                           status	equ	0xFD8
 18878                           
 18879 ;; *************** function _ECANInitialize *****************
 18880 ;; Defined at:
 18881 ;;		line 168 in file "../ECAN.c"
 18882 ;; Parameters:    Size  Location     Type
 18883 ;;		None
 18884 ;; Auto vars:     Size  Location     Type
 18885 ;;		None
 18886 ;; Return value:  Size  Location     Type
 18887 ;;		None               void
 18888 ;; Registers used:
 18889 ;;		wreg, status,2, status,0, cstack
 18890 ;; Tracked objects:
 18891 ;;		On entry : 0/0
 18892 ;;		On exit  : 0/0
 18893 ;;		Unchanged: 0/0
 18894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18895 ;;      Params:         0       0       0       0       0       0       0
 18896 ;;      Locals:         0       0       0       0       0       0       0
 18897 ;;      Temps:          0       0       0       0       0       0       0
 18898 ;;      Totals:         0       0       0       0       0       0       0
 18899 ;;Total ram usage:        0 bytes
 18900 ;; Hardware stack levels used:    1
 18901 ;; Hardware stack levels required when called:    3
 18902 ;; This function calls:
 18903 ;;		_ECANSetOperationMode
 18904 ;; This function is called by:
 18905 ;;		_init
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           	psect	text75
 18910  003F30                     __ptext75:
 18911                           	opt stack 0
 18912  003F30                     _ECANInitialize:
 18913                           	opt stack 25
 18914                           
 18915                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18916                           
 18917                           ;incstack = 0
 18918                           ;incstack = 0
 18919  003F30  0E80               	movlw	128
 18920  003F32  ECD3  F022         	call	_ECANSetOperationMode
 18921                           
 18922                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18923  003F36  0E09               	movlw	9
 18924  003F38  6E70               	movwf	3952,c	;volatile
 18925                           
 18926                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18927  003F3A  0EFC               	movlw	252
 18928  003F3C  6E71               	movwf	3953,c	;volatile
 18929                           
 18930                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18931                           ;ECAN.c: 181: (0 << 6) |
 18932                           ;ECAN.c: 182: (2-1);
 18933  003F3E  0E01               	movlw	1
 18934  003F40  6E72               	movwf	3954,c	;volatile
 18935                           
 18936                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18937  003F42  0E20               	movlw	32
 18938  003F44  6E73               	movwf	3955,c	;volatile
 18939                           
 18940                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18941  003F46  8E77               	bsf	3959,7,c	;volatile
 18942                           
 18943                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18944  003F48  9C77               	bcf	3959,6,c	;volatile
 18945                           
 18946                           ;ECAN.c: 205: RXB0CON = 0;
 18947  003F4A  6A60               	clrf	3936,c	;volatile
 18948                           
 18949                           ;ECAN.c: 211: RXB1CON = 0;
 18950  003F4C  010F               	movlb	15	; () banked
 18951  003F4E  6B50               	clrf	80,b	;volatile
 18952                           
 18953                           ; BSR set to: 15
 18954                           ;ECAN.c: 221: B0CON = 0;
 18955  003F50  010E               	movlb	14	; () banked
 18956  003F52  6B20               	clrf	32,b	;volatile
 18957                           
 18958                           ; BSR set to: 14
 18959                           ;ECAN.c: 231: B1CON = 0;
 18960  003F54  6B30               	clrf	48,b	;volatile
 18961                           
 18962                           ; BSR set to: 14
 18963                           ;ECAN.c: 241: B2CON = 0;
 18964  003F56  6B40               	clrf	64,b	;volatile
 18965                           
 18966                           ; BSR set to: 14
 18967                           ;ECAN.c: 254: B3CON = 0 << 2;
 18968  003F58  6B50               	clrf	80,b	;volatile
 18969                           
 18970                           ; BSR set to: 14
 18971                           ;ECAN.c: 264: B4CON = 0 << 2;
 18972  003F5A  6B60               	clrf	96,b	;volatile
 18973                           
 18974                           ; BSR set to: 14
 18975                           ;ECAN.c: 274: B5CON = 0 << 2;
 18976  003F5C  6B70               	clrf	112,b	;volatile
 18977                           
 18978                           ; BSR set to: 14
 18979                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18980  003F5E  0EE0               	movlw	224
 18981  003F60  010D               	movlb	13	; () banked
 18982  003F62  6FF8               	movwf	248,b	;volatile
 18983                           
 18984                           ; BSR set to: 13
 18985                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18986  003F64  010F               	movlb	15	; () banked
 18987  003F66  6B00               	clrf	0,b	;volatile
 18988                           
 18989                           ; BSR set to: 15
 18990  003F68  0E08               	movlw	8
 18991  003F6A  6F01               	movwf	1,b	;volatile
 18992                           
 18993                           ; BSR set to: 15
 18994  003F6C  6B02               	clrf	2,b	;volatile
 18995                           
 18996                           ; BSR set to: 15
 18997  003F6E  6B03               	clrf	3,b	;volatile
 18998                           
 18999                           ; BSR set to: 15
 19000                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 19001  003F70  6B04               	clrf	4,b	;volatile
 19002                           
 19003                           ; BSR set to: 15
 19004  003F72  0EE8               	movlw	232
 19005  003F74  6F05               	movwf	5,b	;volatile
 19006                           
 19007                           ; BSR set to: 15
 19008  003F76  0E1A               	movlw	26
 19009  003F78  6F06               	movwf	6,b	;volatile
 19010                           
 19011                           ; BSR set to: 15
 19012  003F7A  6B07               	clrf	7,b	;volatile
 19013                           
 19014                           ; BSR set to: 15
 19015                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 19016  003F7C  0E03               	movlw	3
 19017  003F7E  010D               	movlb	13	; () banked
 19018  003F80  6FD4               	movwf	212,b	;volatile
 19019                           
 19020                           ; BSR set to: 13
 19021                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 19022  003F82  6BD5               	clrf	213,b	;volatile
 19023                           
 19024                           ; BSR set to: 13
 19025                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 19026  003F84  6BE0               	clrf	224,b	;volatile
 19027                           
 19028                           ; BSR set to: 13
 19029                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 19030  003F86  0E11               	movlw	17
 19031  003F88  6FE1               	movwf	225,b	;volatile
 19032                           
 19033                           ; BSR set to: 13
 19034                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 19035  003F8A  6FE2               	movwf	226,b	;volatile
 19036                           
 19037                           ; BSR set to: 13
 19038                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 19039  003F8C  6BE3               	clrf	227,b	;volatile
 19040                           
 19041                           ; BSR set to: 13
 19042                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 19043  003F8E  6BE4               	clrf	228,b	;volatile
 19044                           
 19045                           ; BSR set to: 13
 19046                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 19047  003F90  6BE5               	clrf	229,b	;volatile
 19048                           
 19049                           ; BSR set to: 13
 19050                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 19051  003F92  6BE6               	clrf	230,b	;volatile
 19052                           
 19053                           ; BSR set to: 13
 19054                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 19055  003F94  6BE7               	clrf	231,b	;volatile
 19056                           
 19057                           ; BSR set to: 13
 19058                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 19059  003F96  0E54               	movlw	84
 19060  003F98  6FF0               	movwf	240,b	;volatile
 19061                           
 19062                           ; BSR set to: 13
 19063                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 19064  003F9A  0E05               	movlw	5
 19065  003F9C  6FF1               	movwf	241,b	;volatile
 19066                           
 19067                           ; BSR set to: 13
 19068                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19069  003F9E  6BF2               	clrf	242,b	;volatile
 19070                           
 19071                           ; BSR set to: 13
 19072                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19073  003FA0  6BF2               	clrf	242,b	;volatile
 19074                           
 19075                           ; BSR set to: 13
 19076                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 19077  003FA2  0E0F               	movlw	15
 19078  003FA4  010F               	movlb	15	; () banked
 19079  003FA6  6F18               	movwf	24,b	;volatile
 19080                           
 19081                           ; BSR set to: 15
 19082  003FA8  0EE0               	movlw	224
 19083  003FAA  6F19               	movwf	25,b	;volatile
 19084                           
 19085                           ; BSR set to: 15
 19086  003FAC  6B1A               	clrf	26,b	;volatile
 19087                           
 19088                           ; BSR set to: 15
 19089  003FAE  6B1B               	clrf	27,b	;volatile
 19090                           
 19091                           ; BSR set to: 15
 19092                           ;ECAN.c: 482: RXM0EXIDM = 1;
 19093  003FB0  8719               	bsf	25,3,b	;volatile
 19094                           
 19095                           ; BSR set to: 15
 19096                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 19097  003FB2  0E0F               	movlw	15
 19098  003FB4  6F1C               	movwf	28,b	;volatile
 19099                           
 19100                           ; BSR set to: 15
 19101  003FB6  0EE0               	movlw	224
 19102  003FB8  6F1D               	movwf	29,b	;volatile
 19103                           
 19104                           ; BSR set to: 15
 19105  003FBA  691E               	setf	30,b	;volatile
 19106                           
 19107                           ; BSR set to: 15
 19108  003FBC  6B1F               	clrf	31,b	;volatile
 19109                           
 19110                           ; BSR set to: 15
 19111                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 19112  003FBE  871D               	bsf	29,3,b	;volatile
 19113                           
 19114                           ; BSR set to: 15
 19115                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 19116  003FC0  0E00               	movlw	0
 19117  003FC2  EFD3  F022         	goto	_ECANSetOperationMode
 19118  003FC6                     __end_of_ECANInitialize:
 19119                           	opt stack 0
 19120                           tblptru	equ	0xFF8
 19121                           tblptrh	equ	0xFF7
 19122                           tblptrl	equ	0xFF6
 19123                           tablat	equ	0xFF5
 19124                           prodh	equ	0xFF4
 19125                           prodl	equ	0xFF3
 19126                           intcon	equ	0xFF2
 19127                           intcon2	equ	0xFF1
 19128                           postinc0	equ	0xFEE
 19129                           wreg	equ	0xFE8
 19130                           indf1	equ	0xFE7
 19131                           fsr1h	equ	0xFE2
 19132                           fsr1l	equ	0xFE1
 19133                           indf2	equ	0xFDF
 19134                           postinc2	equ	0xFDE
 19135                           postdec2	equ	0xFDD
 19136                           plusw2	equ	0xFDB
 19137                           fsr2h	equ	0xFDA
 19138                           fsr2l	equ	0xFD9
 19139                           status	equ	0xFD8
 19140                           
 19141 ;; *************** function _ECANSetOperationMode *****************
 19142 ;; Defined at:
 19143 ;;		line 1012 in file "../ECAN.c"
 19144 ;; Parameters:    Size  Location     Type
 19145 ;;  mode            1    wreg     enum E16346
 19146 ;; Auto vars:     Size  Location     Type
 19147 ;;  mode            1    7[COMRAM] enum E16346
 19148 ;; Return value:  Size  Location     Type
 19149 ;;		None               void
 19150 ;; Registers used:
 19151 ;;		wreg, status,2, status,0
 19152 ;; Tracked objects:
 19153 ;;		On entry : 0/0
 19154 ;;		On exit  : 0/0
 19155 ;;		Unchanged: 0/0
 19156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19157 ;;      Params:         0       0       0       0       0       0       0
 19158 ;;      Locals:         1       0       0       0       0       0       0
 19159 ;;      Temps:          0       0       0       0       0       0       0
 19160 ;;      Totals:         1       0       0       0       0       0       0
 19161 ;;Total ram usage:        1 bytes
 19162 ;; Hardware stack levels used:    1
 19163 ;; Hardware stack levels required when called:    2
 19164 ;; This function calls:
 19165 ;;		Nothing
 19166 ;; This function is called by:
 19167 ;;		_ECANInitialize
 19168 ;;		_calculateSetFilterMask
 19169 ;; This function uses a non-reentrant model
 19170 ;;
 19171                           
 19172                           	psect	text76
 19173  0045A6                     __ptext76:
 19174                           	opt stack 0
 19175  0045A6                     _ECANSetOperationMode:
 19176                           	opt stack 23
 19177                           
 19178                           ;incstack = 0
 19179                           ;incstack = 0
 19180                           ;ECANSetOperationMode@mode stored from wreg
 19181  0045A6  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 19182                           
 19183                           ;ECAN.c: 1013: CANCON &= 0x1F;
 19184  0045AA  0E1F               	movlw	31
 19185  0045AC  166F               	andwf	3951,f,c	;volatile
 19186                           
 19187                           ;ECAN.c: 1014: CANCON |= mode;
 19188  0045AE  5008               	movf	ECANSetOperationMode@mode,w,c
 19189  0045B0  126F               	iorwf	3951,f,c	;volatile
 19190  0045B2                     l12331:
 19191  0045B2  506F               	movf	3951,w,c	;volatile
 19192  0045B4  0BE0               	andlw	224
 19193  0045B6  1808               	xorwf	ECANSetOperationMode@mode,w,c
 19194  0045B8  B4D8               	btfsc	status,2,c
 19195  0045BA  0012               	return	
 19196  0045BC  D7FA               	goto	l12331
 19197  0045BE                     __end_of_ECANSetOperationMode:
 19198                           	opt stack 0
 19199                           tblptru	equ	0xFF8
 19200                           tblptrh	equ	0xFF7
 19201                           tblptrl	equ	0xFF6
 19202                           tablat	equ	0xFF5
 19203                           prodh	equ	0xFF4
 19204                           prodl	equ	0xFF3
 19205                           intcon	equ	0xFF2
 19206                           intcon2	equ	0xFF1
 19207                           postinc0	equ	0xFEE
 19208                           wreg	equ	0xFE8
 19209                           indf1	equ	0xFE7
 19210                           fsr1h	equ	0xFE2
 19211                           fsr1l	equ	0xFE1
 19212                           indf2	equ	0xFDF
 19213                           postinc2	equ	0xFDE
 19214                           postdec2	equ	0xFDD
 19215                           plusw2	equ	0xFDB
 19216                           fsr2h	equ	0xFDA
 19217                           fsr2l	equ	0xFD9
 19218                           status	equ	0xFD8
 19219                           
 19220 ;; *************** function _vscp_readAppReg *****************
 19221 ;; Defined at:
 19222 ;;		line 1422 in file "../main.c"
 19223 ;; Parameters:    Size  Location     Type
 19224 ;;  reg             1    wreg     unsigned char 
 19225 ;; Auto vars:     Size  Location     Type
 19226 ;;  reg             1   17[COMRAM] unsigned char 
 19227 ;;  rv              1   16[COMRAM] unsigned char 
 19228 ;; Return value:  Size  Location     Type
 19229 ;;                  1    wreg      unsigned char 
 19230 ;; Registers used:
 19231 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19232 ;; Tracked objects:
 19233 ;;		On entry : F/0
 19234 ;;		On exit  : 0/0
 19235 ;;		Unchanged: 0/0
 19236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19237 ;;      Params:         0       0       0       0       0       0       0
 19238 ;;      Locals:         2       0       0       0       0       0       0
 19239 ;;      Temps:          7       0       0       0       0       0       0
 19240 ;;      Totals:         9       0       0       0       0       0       0
 19241 ;;Total ram usage:        9 bytes
 19242 ;; Hardware stack levels used:    1
 19243 ;; Hardware stack levels required when called:    3
 19244 ;; This function calls:
 19245 ;;		_Read_b_eep
 19246 ;; This function is called by:
 19247 ;;		_vscp_readRegister
 19248 ;;		_vscp_handleProtocolEvent
 19249 ;; This function uses a non-reentrant model
 19250 ;;
 19251                           
 19252                           	psect	text77
 19253  002E7C                     __ptext77:
 19254                           	opt stack 0
 19255  002E7C                     _vscp_readAppReg:
 19256                           	opt stack 24
 19257                           
 19258                           ;incstack = 0
 19259                           ;incstack = 0
 19260                           ;vscp_readAppReg@reg stored from wreg
 19261  002E7C  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 19262                           
 19263                           ; BSR set to: 0
 19264                           ;main.c: 1423: uint8_t rv;
 19265                           ;main.c: 1425: rv = 0x00;
 19266  002E80  6A11               	clrf	vscp_readAppReg@rv,c
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;main.c: 1428: if ( 0 == vscp_page_select ) {
 19270  002E82  5053               	movf	_vscp_page_select+1,w,c
 19271  002E84  1052               	iorwf	_vscp_page_select,w,c
 19272  002E86  E001 D0AD          	bnz	l13863
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;main.c: 1431: if ( reg == 0 ) {
 19276  002E8A  6612               	tstfsz	vscp_readAppReg@reg,c
 19277  002E8C  D006               	goto	l13809
 19278                           
 19279                           ; BSR set to: 0
 19280                           ;main.c: 1432: rv = Read_b_eep(0x43 + 0);
 19281  002E8E  6A09               	clrf	?_Read_b_eep+1,c
 19282  002E90  0E43               	movlw	67
 19283  002E92  6E08               	movwf	?_Read_b_eep,c
 19284  002E94  EC27  F023         	call	_Read_b_eep	;wreg free
 19285  002E98  D0C3               	goto	L69
 19286  002E9A                     l13809:
 19287                           
 19288                           ; BSR set to: 0
 19289                           ;main.c: 1434: else if ( reg == 1 ) {
 19290  002E9A  0412               	decf	vscp_readAppReg@reg,w,c
 19291  002E9C  E106               	bnz	l13813
 19292                           
 19293                           ; BSR set to: 0
 19294                           ;main.c: 1435: rv = Read_b_eep(0x43 + 1);
 19295  002E9E  6A09               	clrf	?_Read_b_eep+1,c
 19296  002EA0  0E44               	movlw	68
 19297  002EA2  6E08               	movwf	?_Read_b_eep,c
 19298  002EA4  EC27  F023         	call	_Read_b_eep	;wreg free
 19299  002EA8  D0BB               	goto	L69
 19300  002EAA                     l13813:
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;main.c: 1437: else if ( ( reg >= 2 ) &&
 19304                           ;main.c: 1438: ( reg <= 11 ) ) {
 19305  002EAA  0E01               	movlw	1
 19306  002EAC  6412               	cpfsgt	vscp_readAppReg@reg,c
 19307  002EAE  D00C               	goto	l13819
 19308                           
 19309                           ; BSR set to: 0
 19310  002EB0  0E0C               	movlw	12
 19311  002EB2  6012               	cpfslt	vscp_readAppReg@reg,c
 19312  002EB4  D009               	goto	l13819
 19313  002EB6                     
 19314                           ; BSR set to: 0
 19315                           ;main.c: 1439: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
 19316  002EB6  0E43               	movlw	67
 19317  002EB8  2412               	addwf	vscp_readAppReg@reg,w,c
 19318  002EBA  6E08               	movwf	?_Read_b_eep,c
 19319  002EBC  6A09               	clrf	?_Read_b_eep+1,c
 19320  002EBE  0E00               	movlw	0
 19321  002EC0  2209               	addwfc	?_Read_b_eep+1,f,c
 19322  002EC2  EC27  F023         	call	_Read_b_eep	;wreg free
 19323  002EC6  D0AC               	goto	L69
 19324  002EC8                     l13819:
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;main.c: 1443: else if ( reg == 12 ) {
 19328  002EC8  5012               	movf	vscp_readAppReg@reg,w,c
 19329  002ECA  0A0C               	xorlw	12
 19330  002ECC  E108               	bnz	l13823
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;main.c: 1444: rv = ( TRISAbits.TRISA0 << 1 ) +
 19334                           ;main.c: 1445: TRISAbits.TRISA1;
 19335  002ECE  3092               	rrcf	3986,w,c	;volatile
 19336  002ED0  0B01               	andlw	1
 19337  002ED2  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19338  002ED4  5092               	movf	3986,w,c	;volatile
 19339  002ED6  0B01               	andlw	1
 19340  002ED8  0D02               	mullw	2
 19341  002EDA  50F3               	movf	prodl,w,c
 19342  002EDC  D035               	goto	L71
 19343  002EDE                     l13823:
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;main.c: 1447: else if ( reg == 13 ) {
 19347  002EDE  5012               	movf	vscp_readAppReg@reg,w,c
 19348  002EE0  0A0D               	xorlw	13
 19349  002EE2  E134               	bnz	l13827
 19350                           
 19351                           ; BSR set to: 0
 19352                           ;main.c: 1448: rv = ( TRISAbits.TRISA2 << 7 ) +
 19353                           ;main.c: 1449: ( TRISCbits.TRISC7 << 6 ) +
 19354                           ;main.c: 1450: ( TRISCbits.TRISC6 << 5 ) +
 19355                           ;main.c: 1451: ( TRISCbits.TRISC5 << 4 ) +
 19356                           ;main.c: 1452: ( TRISCbits.TRISC4 << 3 ) +
 19357                           ;main.c: 1453: ( TRISCbits.TRISC3 << 2 ) +
 19358                           ;main.c: 1454: ( TRISBbits.TRISB1 << 1 ) +
 19359                           ;main.c: 1455: TRISBbits.TRISB0;
 19360  002EE4  5093               	movf	3987,w,c	;volatile
 19361  002EE6  0B01               	andlw	1
 19362  002EE8  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19363  002EEA  3093               	rrcf	3987,w,c	;volatile
 19364  002EEC  0B01               	andlw	1
 19365  002EEE  0D02               	mullw	2
 19366  002EF0  CFF3 F00B          	movff	prodl,??_vscp_readAppReg+1
 19367  002EF4  3094               	rrcf	3988,w,c	;volatile
 19368  002EF6  32E8               	rrcf	wreg,f,c
 19369  002EF8  32E8               	rrcf	wreg,f,c
 19370  002EFA  0B01               	andlw	1
 19371  002EFC  0D04               	mullw	4
 19372  002EFE  CFF3 F00C          	movff	prodl,??_vscp_readAppReg+2
 19373  002F02  3894               	swapf	3988,w,c	;volatile
 19374  002F04  0B01               	andlw	1
 19375  002F06  0D08               	mullw	8
 19376  002F08  CFF3 F00D          	movff	prodl,??_vscp_readAppReg+3
 19377  002F0C  3894               	swapf	3988,w,c	;volatile
 19378  002F0E  32E8               	rrcf	wreg,f,c
 19379  002F10  0B01               	andlw	1
 19380  002F12  0D10               	mullw	16
 19381  002F14  CFF3 F00E          	movff	prodl,??_vscp_readAppReg+4
 19382  002F18  3894               	swapf	3988,w,c	;volatile
 19383  002F1A  32E8               	rrcf	wreg,f,c
 19384  002F1C  32E8               	rrcf	wreg,f,c
 19385  002F1E  0B01               	andlw	1
 19386  002F20  0D20               	mullw	32
 19387  002F22  CFF3 F00F          	movff	prodl,??_vscp_readAppReg+5
 19388  002F26  3494               	rlcf	3988,w,c	;volatile
 19389  002F28  36E8               	rlcf	wreg,f,c
 19390  002F2A  0B01               	andlw	1
 19391  002F2C  0D40               	mullw	64
 19392  002F2E  CFF3 F010          	movff	prodl,??_vscp_readAppReg+6
 19393  002F32  3092               	rrcf	3986,w,c	;volatile
 19394  002F34  32E8               	rrcf	wreg,f,c
 19395  002F36  0B01               	andlw	1
 19396  002F38  0D80               	mullw	128
 19397  002F3A  50F3               	movf	prodl,w,c
 19398  002F3C  2410               	addwf	??_vscp_readAppReg+6,w,c
 19399  002F3E  240F               	addwf	??_vscp_readAppReg+5,w,c
 19400  002F40  240E               	addwf	??_vscp_readAppReg+4,w,c
 19401  002F42  240D               	addwf	??_vscp_readAppReg+3,w,c
 19402  002F44  240C               	addwf	??_vscp_readAppReg+2,w,c
 19403  002F46  240B               	addwf	??_vscp_readAppReg+1,w,c
 19404  002F48                     L71:
 19405  002F48  240A               	addwf	??_vscp_readAppReg,w,c
 19406  002F4A  D06A               	goto	L69
 19407  002F4C                     l13827:
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;main.c: 1457: else if ( ( reg >= 14 ) &&
 19411                           ;main.c: 1458: ( reg <= 23 ) ) {
 19412  002F4C  0E0D               	movlw	13
 19413  002F4E  6412               	cpfsgt	vscp_readAppReg@reg,c
 19414  002F50  D042               	goto	l13857
 19415                           
 19416                           ; BSR set to: 0
 19417  002F52  0E18               	movlw	24
 19418  002F54  6012               	cpfslt	vscp_readAppReg@reg,c
 19419  002F56  D03F               	goto	l13857
 19420  002F58  D028               	goto	l13855
 19421  002F5A                     l13833:
 19422                           
 19423                           ; BSR set to: 0
 19424                           ;main.c: 1464: rv = PORTBbits.RB0;
 19425  002F5A  0E00               	movlw	0
 19426  002F5C  B081               	btfsc	3969,0,c	;volatile
 19427  002F5E  0E01               	movlw	1
 19428  002F60  D05F               	goto	L69
 19429  002F62                     l13835:
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;main.c: 1469: rv = PORTBbits.RB1;
 19433  002F62  0E00               	movlw	0
 19434  002F64  B281               	btfsc	3969,1,c	;volatile
 19435  002F66  0E01               	movlw	1
 19436  002F68  D05B               	goto	L69
 19437  002F6A                     l13837:
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;main.c: 1474: rv = PORTCbits.RC3;
 19441  002F6A  0E00               	movlw	0
 19442  002F6C  B682               	btfsc	3970,3,c	;volatile
 19443  002F6E  0E01               	movlw	1
 19444  002F70  D057               	goto	L69
 19445  002F72                     l13839:
 19446                           
 19447                           ; BSR set to: 0
 19448                           ;main.c: 1479: rv = PORTCbits.RC4;
 19449  002F72  0E00               	movlw	0
 19450  002F74  B882               	btfsc	3970,4,c	;volatile
 19451  002F76  0E01               	movlw	1
 19452  002F78  D053               	goto	L69
 19453  002F7A                     l13841:
 19454                           
 19455                           ; BSR set to: 0
 19456                           ;main.c: 1484: rv = PORTCbits.RC5;
 19457  002F7A  0E00               	movlw	0
 19458  002F7C  BA82               	btfsc	3970,5,c	;volatile
 19459  002F7E  0E01               	movlw	1
 19460  002F80  D04F               	goto	L69
 19461  002F82                     l13843:
 19462                           
 19463                           ; BSR set to: 0
 19464                           ;main.c: 1489: rv = PORTCbits.RC6;
 19465  002F82  0E00               	movlw	0
 19466  002F84  BC82               	btfsc	3970,6,c	;volatile
 19467  002F86  0E01               	movlw	1
 19468  002F88  D04B               	goto	L69
 19469  002F8A                     l13845:
 19470                           
 19471                           ; BSR set to: 0
 19472                           ;main.c: 1494: rv = PORTCbits.RC7;
 19473  002F8A  0E00               	movlw	0
 19474  002F8C  BE82               	btfsc	3970,7,c	;volatile
 19475  002F8E  0E01               	movlw	1
 19476  002F90  D047               	goto	L69
 19477  002F92                     l13847:
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;main.c: 1499: rv = PORTAbits.RA2;
 19481  002F92  0E00               	movlw	0
 19482  002F94  B480               	btfsc	3968,2,c	;volatile
 19483  002F96  0E01               	movlw	1
 19484  002F98  D043               	goto	L69
 19485  002F9A                     l13849:
 19486                           
 19487                           ; BSR set to: 0
 19488                           ;main.c: 1504: rv = PORTAbits.RA1;
 19489  002F9A  0E00               	movlw	0
 19490  002F9C  B280               	btfsc	3968,1,c	;volatile
 19491  002F9E  0E01               	movlw	1
 19492  002FA0  D03F               	goto	L69
 19493  002FA2                     l13851:
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;main.c: 1509: rv = PORTAbits.RA0;
 19497  002FA2  0E00               	movlw	0
 19498  002FA4  B080               	btfsc	3968,0,c	;volatile
 19499  002FA6  0E01               	movlw	1
 19500  002FA8  D03B               	goto	L69
 19501  002FAA                     l13855:
 19502                           
 19503                           ; BSR set to: 0
 19504  002FAA  5012               	movf	vscp_readAppReg@reg,w,c
 19505                           
 19506                           ; Switch size 1, requested type "space"
 19507                           ; Number of cases is 10, Range of values is 14 to 23
 19508                           ; switch strategies available:
 19509                           ; Name         Instructions Cycles
 19510                           ; simple_byte           31    16 (average)
 19511                           ;	Chosen strategy is simple_byte
 19512  002FAC  0A0E               	xorlw	14	; case 14
 19513  002FAE  E0D5               	bz	l13833
 19514  002FB0  0A01               	xorlw	1	; case 15
 19515  002FB2  E0D7               	bz	l13835
 19516  002FB4  0A1F               	xorlw	31	; case 16
 19517  002FB6  E0D9               	bz	l13837
 19518  002FB8  0A01               	xorlw	1	; case 17
 19519  002FBA  E0DB               	bz	l13839
 19520  002FBC  0A03               	xorlw	3	; case 18
 19521  002FBE  E0DD               	bz	l13841
 19522  002FC0  0A01               	xorlw	1	; case 19
 19523  002FC2  E0DF               	bz	l13843
 19524  002FC4  0A07               	xorlw	7	; case 20
 19525  002FC6  E0E1               	bz	l13845
 19526  002FC8  0A01               	xorlw	1	; case 21
 19527  002FCA  E0E3               	bz	l13847
 19528  002FCC  0A03               	xorlw	3	; case 22
 19529  002FCE  E0E5               	bz	l13849
 19530  002FD0  0A01               	xorlw	1	; case 23
 19531  002FD2  E0E7               	bz	l13851
 19532  002FD4  D026               	goto	l13875
 19533  002FD6                     l13857:
 19534                           
 19535                           ; BSR set to: 0
 19536                           ;main.c: 1514: else if ( ( reg >= 24 ) &&
 19537                           ;main.c: 1515: ( reg < 46 ) ) {
 19538  002FD6  0E17               	movlw	23
 19539  002FD8  6412               	cpfsgt	vscp_readAppReg@reg,c
 19540  002FDA  D023               	goto	l13875
 19541                           
 19542                           ; BSR set to: 0
 19543  002FDC  0E2E               	movlw	46
 19544  002FDE  6012               	cpfslt	vscp_readAppReg@reg,c
 19545  002FE0  D020               	goto	l13875
 19546  002FE2  D769               	goto	L70
 19547  002FE4                     l13863:
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;main.c: 1522: else if ( 1 == vscp_page_select ) {
 19551  002FE4  0452               	decf	_vscp_page_select,w,c
 19552  002FE6  1053               	iorwf	_vscp_page_select+1,w,c
 19553  002FE8  E10C               	bnz	l13869
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;main.c: 1523: if ( reg < 40u ) {
 19557  002FEA  0E28               	movlw	40
 19558  002FEC  6012               	cpfslt	vscp_readAppReg@reg,c
 19559  002FEE  D019               	goto	l13875
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;main.c: 1524: rv = Read_b_eep(0x43 + 46 + reg);
 19563  002FF0  0E71               	movlw	113
 19564  002FF2  2412               	addwf	vscp_readAppReg@reg,w,c
 19565  002FF4  6E08               	movwf	?_Read_b_eep,c
 19566  002FF6  6A09               	clrf	?_Read_b_eep+1,c
 19567  002FF8  0E00               	movlw	0
 19568  002FFA  2209               	addwfc	?_Read_b_eep+1,f,c
 19569  002FFC  EC27  F023         	call	_Read_b_eep	;wreg free
 19570  003000  D00F               	goto	L69
 19571  003002                     l13869:
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;main.c: 1528: else if ( 2 == vscp_page_select ) {
 19575  003002  5052               	movf	_vscp_page_select,w,c
 19576  003004  0A02               	xorlw	2
 19577  003006  1053               	iorwf	_vscp_page_select+1,w,c
 19578  003008  E10C               	bnz	l13875
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;main.c: 1529: if ( reg < ( 0 + 8*8 ) ) {
 19582  00300A  0E40               	movlw	64
 19583  00300C  6012               	cpfslt	vscp_readAppReg@reg,c
 19584  00300E  D009               	goto	l13875
 19585                           
 19586                           ; BSR set to: 0
 19587                           ;main.c: 1530: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 19588  003010  0E99               	movlw	153
 19589  003012  2412               	addwf	vscp_readAppReg@reg,w,c
 19590  003014  6E08               	movwf	?_Read_b_eep,c
 19591  003016  6A09               	clrf	?_Read_b_eep+1,c
 19592  003018  0E00               	movlw	0
 19593  00301A  2209               	addwfc	?_Read_b_eep+1,f,c
 19594  00301C  EC27  F023         	call	_Read_b_eep	;wreg free
 19595  003020                     L69:
 19596  003020  6E11               	movwf	vscp_readAppReg@rv,c
 19597  003022                     l13875:
 19598                           
 19599                           ;main.c: 1535: }
 19600                           ;main.c: 1536: }
 19601                           ;main.c: 1538: return rv;
 19602  003022  5011               	movf	vscp_readAppReg@rv,w,c
 19603  003024  0012               	return	
 19604  003026                     __end_of_vscp_readAppReg:
 19605                           	opt stack 0
 19606                           tblptru	equ	0xFF8
 19607                           tblptrh	equ	0xFF7
 19608                           tblptrl	equ	0xFF6
 19609                           tablat	equ	0xFF5
 19610                           prodh	equ	0xFF4
 19611                           prodl	equ	0xFF3
 19612                           intcon	equ	0xFF2
 19613                           intcon2	equ	0xFF1
 19614                           postinc0	equ	0xFEE
 19615                           wreg	equ	0xFE8
 19616                           indf1	equ	0xFE7
 19617                           fsr1h	equ	0xFE2
 19618                           fsr1l	equ	0xFE1
 19619                           indf2	equ	0xFDF
 19620                           postinc2	equ	0xFDE
 19621                           postdec2	equ	0xFDD
 19622                           plusw2	equ	0xFDB
 19623                           fsr2h	equ	0xFDA
 19624                           fsr2l	equ	0xFD9
 19625                           status	equ	0xFD8
 19626                           
 19627 ;; *************** function _Read_b_eep *****************
 19628 ;; Defined at:
 19629 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 19630 ;; Parameters:    Size  Location     Type
 19631 ;;  badd            2    7[COMRAM] unsigned int 
 19632 ;; Auto vars:     Size  Location     Type
 19633 ;;		None
 19634 ;; Return value:  Size  Location     Type
 19635 ;;                  1    wreg      unsigned char 
 19636 ;; Registers used:
 19637 ;;		wreg, status,2
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19643 ;;      Params:         2       0       0       0       0       0       0
 19644 ;;      Locals:         0       0       0       0       0       0       0
 19645 ;;      Temps:          0       0       0       0       0       0       0
 19646 ;;      Totals:         2       0       0       0       0       0       0
 19647 ;;Total ram usage:        2 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; Hardware stack levels required when called:    2
 19650 ;; This function calls:
 19651 ;;		Nothing
 19652 ;; This function is called by:
 19653 ;;		_main
 19654 ;;		_init_app_ram
 19655 ;;		_doApplicationOneSecondWork
 19656 ;;		_vscp_readNicknamePermanent
 19657 ;;		_vscp_getZone
 19658 ;;		_vscp_getSubzone
 19659 ;;		_vscp_readAppReg
 19660 ;;		_vscp_writeAppReg
 19661 ;;		_SendInformationEvent
 19662 ;;		_doDM
 19663 ;;		_doActionOn
 19664 ;;		_doActionOff
 19665 ;;		_doActionPulseOn
 19666 ;;		_doActionPulseOff
 19667 ;;		_doActionToggle
 19668 ;;		_doActionStatus
 19669 ;;		_vscp_getGUID
 19670 ;;		_vscp_getUserID
 19671 ;;		_vscp_getManufacturerId
 19672 ;;		_vscp_getSegmentCRC
 19673 ;;		_calculateSetFilterMask
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           	psect	text78
 19678  00464E                     __ptext78:
 19679                           	opt stack 0
 19680  00464E                     _Read_b_eep:
 19681                           	opt stack 24
 19682                           
 19683                           ;incstack = 0
 19684                           ;incstack = 0
 19685  00464E  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 19686  004652  9CA6               	bcf	4006,6,c	;volatile
 19687  004654  9EA6               	bcf	4006,7,c	;volatile
 19688  004656  80A6               	bsf	4006,0,c	;volatile
 19689  004658  F000               	nop		;# 
 19690  00465A  F000               	nop		;# 
 19691  00465C  50A8               	movf	4008,w,c	;volatile
 19692  00465E  0012               	return	
 19693  004660                     __end_of_Read_b_eep:
 19694                           	opt stack 0
 19695                           tblptru	equ	0xFF8
 19696                           tblptrh	equ	0xFF7
 19697                           tblptrl	equ	0xFF6
 19698                           tablat	equ	0xFF5
 19699                           prodh	equ	0xFF4
 19700                           prodl	equ	0xFF3
 19701                           intcon	equ	0xFF2
 19702                           intcon2	equ	0xFF1
 19703                           postinc0	equ	0xFEE
 19704                           wreg	equ	0xFE8
 19705                           indf1	equ	0xFE7
 19706                           fsr1h	equ	0xFE2
 19707                           fsr1l	equ	0xFE1
 19708                           indf2	equ	0xFDF
 19709                           postinc2	equ	0xFDE
 19710                           postdec2	equ	0xFDD
 19711                           plusw2	equ	0xFDB
 19712                           fsr2h	equ	0xFDA
 19713                           fsr2l	equ	0xFD9
 19714                           status	equ	0xFD8
 19715                           
 19716 ;; *************** function _interrupt_at_low_vector *****************
 19717 ;; Defined at:
 19718 ;;		line 140 in file "../main.c"
 19719 ;; Parameters:    Size  Location     Type
 19720 ;;		None
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;		None               void
 19725 ;; Registers used:
 19726 ;;		wreg, status,2, status,0, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : 0/0
 19729 ;;		On exit  : 0/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19732 ;;      Params:         0       0       0       0       0       0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0
 19734 ;;      Temps:          3       0       0       0       0       0       0
 19735 ;;      Totals:         3       0       0       0       0       0       0
 19736 ;;Total ram usage:        3 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:    1
 19739 ;; This function calls:
 19740 ;;		i1_WriteTimer0
 19741 ;; This function is called by:
 19742 ;;		Interrupt level 1
 19743 ;; This function uses a non-reentrant model
 19744 ;;
 19745                           
 19746                           	psect	intcodelo
 19747  000018                     __pintcodelo:
 19748                           	opt stack 0
 19749  000018                     _interrupt_at_low_vector:
 19750                           	opt stack 20
 19751                           
 19752                           ;incstack = 0
 19753  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 19754  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 19755  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 19756  000024                     
 19757                           ;main.c: 142: if ( INTCONbits.TMR0IF ) {
 19758  000024  A4F2               	btfss	intcon,2,c	;volatile
 19759  000026  D001               	goto	i1u1056_21
 19760  000028  D001               	goto	i1u1056_20
 19761  00002A                     i1u1056_21:
 19762  00002A  D046               	goto	i1l421
 19763  00002C                     i1u1056_20:
 19764  00002C                     
 19765                           ;main.c: 145: WriteTimer0(0xfb1d);
 19766  00002C  0EFB               	movlw	251
 19767  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 19768  000030  0E1D               	movlw	29
 19769  000032  6E01               	movwf	?i1_WriteTimer0,c
 19770  000034  EC30  F023         	call	i1_WriteTimer0	;wreg free
 19771  000038                     
 19772                           ;main.c: 147: vscp_timer++;
 19773  000038  0100               	movlb	0	; () banked
 19774  00003A  4B6E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 19775  00003C  2B6F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 19776  00003E                     
 19777                           ; BSR set to: 0
 19778                           ;main.c: 148: vscp_configtimer++;
 19779  00003E  4B6C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 19780  000040  2B6D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 19781  000042                     
 19782                           ; BSR set to: 0
 19783                           ;main.c: 149: measurement_clock_10ms++;
 19784  000042  0E01               	movlw	1
 19785  000044  2760               	addwf	_measurement_clock_10ms& (0+255),f,b	;volatile
 19786  000046  0E00               	movlw	0
 19787  000048  2361               	addwfc	(_measurement_clock_10ms+1)& (0+255),f,b	;volatile
 19788  00004A  0E00               	movlw	0
 19789  00004C  2362               	addwfc	(_measurement_clock_10ms+2)& (0+255),f,b	;volatile
 19790  00004E  0E00               	movlw	0
 19791  000050  2363               	addwfc	(_measurement_clock_10ms+3)& (0+255),f,b	;volatile
 19792  000052                     
 19793                           ; BSR set to: 0
 19794                           ;main.c: 150: measurement_clock_sec++;
 19795  000052  0E01               	movlw	1
 19796  000054  2764               	addwf	_measurement_clock_sec& (0+255),f,b	;volatile
 19797  000056  0E00               	movlw	0
 19798  000058  2365               	addwfc	(_measurement_clock_sec+1)& (0+255),f,b	;volatile
 19799  00005A  0E00               	movlw	0
 19800  00005C  2366               	addwfc	(_measurement_clock_sec+2)& (0+255),f,b	;volatile
 19801  00005E  0E00               	movlw	0
 19802  000060  2367               	addwfc	(_measurement_clock_sec+3)& (0+255),f,b	;volatile
 19803  000062                     
 19804                           ; BSR set to: 0
 19805                           ;main.c: 153: if ( PORTCbits.RC0 ) {
 19806  000062  A082               	btfss	3970,0,c	;volatile
 19807  000064  D001               	goto	i1u1057_21
 19808  000066  D001               	goto	i1u1057_20
 19809  000068                     i1u1057_21:
 19810  000068  D002               	goto	i1l8883
 19811  00006A                     i1u1057_20:
 19812  00006A                     
 19813                           ; BSR set to: 0
 19814                           ;main.c: 154: vscp_initbtncnt = 0;
 19815  00006A  6B7C               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 19816                           
 19817                           ;main.c: 155: }
 19818  00006C  D001               	goto	i1l413
 19819  00006E                     i1l8883:
 19820                           
 19821                           ; BSR set to: 0
 19822                           ;main.c: 156: else {
 19823                           ;main.c: 158: vscp_initbtncnt++;
 19824  00006E  2B7C               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 19825  000070                     i1l413:
 19826                           
 19827                           ; BSR set to: 0
 19828                           ;main.c: 159: }
 19829                           ;main.c: 162: vscp_statuscnt++;
 19830  000070  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 19831  000072                     
 19832                           ; BSR set to: 0
 19833                           ;main.c: 163: if ( ( 0x02 == vscp_initledfunc ) &&
 19834                           ;main.c: 164: ( vscp_statuscnt > 100 ) ) {
 19835  000072  5056               	movf	_vscp_initledfunc,w,c
 19836  000074  0A02               	xorlw	2
 19837  000076  A4D8               	btfss	status,2,c
 19838  000078  D001               	goto	i1u1058_21
 19839  00007A  D001               	goto	i1u1058_20
 19840  00007C                     i1u1058_21:
 19841  00007C  D00E               	goto	i1l8893
 19842  00007E                     i1u1058_20:
 19843  00007E                     
 19844                           ; BSR set to: 0
 19845  00007E  0E64               	movlw	100
 19846  000080  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 19847  000082  D001               	goto	i1u1059_21
 19848  000084  D001               	goto	i1u1059_20
 19849  000086                     i1u1059_21:
 19850  000086  D009               	goto	i1l8893
 19851  000088                     i1u1059_20:
 19852  000088                     
 19853                           ; BSR set to: 0
 19854                           ;main.c: 166: if ( PORTCbits.RC1 ) {
 19855  000088  A282               	btfss	3970,1,c	;volatile
 19856  00008A  D001               	goto	i1u1060_21
 19857  00008C  D001               	goto	i1u1060_20
 19858  00008E                     i1u1060_21:
 19859  00008E  D002               	goto	i1l415
 19860  000090                     i1u1060_20:
 19861  000090                     
 19862                           ; BSR set to: 0
 19863                           ;main.c: 167: PORTCbits.RC1 = 0;
 19864  000090  9282               	bcf	3970,1,c	;volatile
 19865                           
 19866                           ;main.c: 168: }
 19867  000092  D001               	goto	i1l416
 19868  000094                     i1l415:
 19869                           
 19870                           ; BSR set to: 0
 19871                           ;main.c: 169: else {
 19872                           ;main.c: 170: PORTCbits.RC1 = 1;
 19873  000094  8282               	bsf	3970,1,c	;volatile
 19874  000096                     i1l416:
 19875                           
 19876                           ; BSR set to: 0
 19877                           ;main.c: 171: }
 19878                           ;main.c: 173: vscp_statuscnt = 0;
 19879  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19880                           
 19881                           ;main.c: 175: }
 19882  000098  D00E               	goto	i1l417
 19883  00009A                     i1l8893:
 19884                           
 19885                           ; BSR set to: 0
 19886                           ;main.c: 176: else if (0x01 == vscp_initledfunc) {
 19887  00009A  0456               	decf	_vscp_initledfunc,w,c
 19888  00009C  A4D8               	btfss	status,2,c
 19889  00009E  D001               	goto	i1u1061_21
 19890  0000A0  D001               	goto	i1u1061_20
 19891  0000A2                     i1u1061_21:
 19892  0000A2  D003               	goto	i1l418
 19893  0000A4                     i1u1061_20:
 19894  0000A4                     
 19895                           ; BSR set to: 0
 19896                           ;main.c: 177: PORTCbits.RC1 = 1;
 19897  0000A4  8282               	bsf	3970,1,c	;volatile
 19898                           
 19899                           ;main.c: 178: vscp_statuscnt = 0;
 19900  0000A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19901                           
 19902                           ;main.c: 179: }
 19903  0000A8  D006               	goto	i1l417
 19904  0000AA                     i1l418:
 19905                           
 19906                           ; BSR set to: 0
 19907                           ;main.c: 180: else if (0x00 == vscp_initledfunc) {
 19908  0000AA  6656               	tstfsz	_vscp_initledfunc,c
 19909  0000AC  D001               	goto	i1u1062_21
 19910  0000AE  D001               	goto	i1u1062_20
 19911  0000B0                     i1u1062_21:
 19912  0000B0  D002               	goto	i1l417
 19913  0000B2                     i1u1062_20:
 19914  0000B2                     
 19915                           ; BSR set to: 0
 19916                           ;main.c: 181: PORTCbits.RC1 = 0;
 19917  0000B2  9282               	bcf	3970,1,c	;volatile
 19918                           
 19919                           ;main.c: 182: vscp_statuscnt = 0;
 19920  0000B4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19921  0000B6                     i1l417:
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;main.c: 183: }
 19925                           ;main.c: 185: INTCONbits.TMR0IF = 0;
 19926  0000B6  94F2               	bcf	intcon,2,c	;volatile
 19927  0000B8                     i1l421:
 19928  0000B8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 19929  0000BC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 19930  0000C0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 19931  0000C4  0010               	retfie	
 19932  0000C6                     __end_of_interrupt_at_low_vector:
 19933                           	opt stack 0
 19934                           tblptru	equ	0xFF8
 19935                           tblptrh	equ	0xFF7
 19936                           tblptrl	equ	0xFF6
 19937                           tablat	equ	0xFF5
 19938                           prodh	equ	0xFF4
 19939                           prodl	equ	0xFF3
 19940                           intcon	equ	0xFF2
 19941                           intcon2	equ	0xFF1
 19942                           postinc0	equ	0xFEE
 19943                           wreg	equ	0xFE8
 19944                           indf1	equ	0xFE7
 19945                           fsr1h	equ	0xFE2
 19946                           fsr1l	equ	0xFE1
 19947                           bsr	equ	0xFE0
 19948                           indf2	equ	0xFDF
 19949                           postinc2	equ	0xFDE
 19950                           postdec2	equ	0xFDD
 19951                           plusw2	equ	0xFDB
 19952                           fsr2h	equ	0xFDA
 19953                           fsr2l	equ	0xFD9
 19954                           status	equ	0xFD8
 19955                           
 19956 ;; *************** function i1_WriteTimer0 *****************
 19957 ;; Defined at:
 19958 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19959 ;; Parameters:    Size  Location     Type
 19960 ;;  timer0          2    0[COMRAM] unsigned int 
 19961 ;; Auto vars:     Size  Location     Type
 19962 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 19963 ;; Return value:  Size  Location     Type
 19964 ;;		None               void
 19965 ;; Registers used:
 19966 ;;		None
 19967 ;; Tracked objects:
 19968 ;;		On entry : 0/0
 19969 ;;		On exit  : 0/0
 19970 ;;		Unchanged: 0/0
 19971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19972 ;;      Params:         2       0       0       0       0       0       0
 19973 ;;      Locals:         2       0       0       0       0       0       0
 19974 ;;      Temps:          0       0       0       0       0       0       0
 19975 ;;      Totals:         4       0       0       0       0       0       0
 19976 ;;Total ram usage:        4 bytes
 19977 ;; Hardware stack levels used:    1
 19978 ;; This function calls:
 19979 ;;		Nothing
 19980 ;; This function is called by:
 19981 ;;		_interrupt_at_low_vector
 19982 ;; This function uses a non-reentrant model
 19983 ;;
 19984                           
 19985                           	psect	text80
 19986  004660                     __ptext80:
 19987                           	opt stack 0
 19988  004660                     i1_WriteTimer0:
 19989                           	opt stack 20
 19990                           
 19991                           ;incstack = 0
 19992                           ;incstack = 0
 19993  004660  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 19994  004664  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 19995  004668  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 19996  00466C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 19997  004670  0012               	return	
 19998  004672                     __end_ofi1_WriteTimer0:
 19999                           	opt stack 0
 20000                           tblptru	equ	0xFF8
 20001                           tblptrh	equ	0xFF7
 20002                           tblptrl	equ	0xFF6
 20003                           tablat	equ	0xFF5
 20004                           prodh	equ	0xFF4
 20005                           prodl	equ	0xFF3
 20006                           intcon	equ	0xFF2
 20007                           intcon2	equ	0xFF1
 20008                           postinc0	equ	0xFEE
 20009                           wreg	equ	0xFE8
 20010                           indf1	equ	0xFE7
 20011                           fsr1h	equ	0xFE2
 20012                           fsr1l	equ	0xFE1
 20013                           bsr	equ	0xFE0
 20014                           indf2	equ	0xFDF
 20015                           postinc2	equ	0xFDE
 20016                           postdec2	equ	0xFDD
 20017                           plusw2	equ	0xFDB
 20018                           fsr2h	equ	0xFDA
 20019                           fsr2l	equ	0xFD9
 20020                           status	equ	0xFD8
 20021                           tblptru	equ	0xFF8
 20022                           tblptrh	equ	0xFF7
 20023                           tblptrl	equ	0xFF6
 20024                           tablat	equ	0xFF5
 20025                           prodh	equ	0xFF4
 20026                           prodl	equ	0xFF3
 20027                           intcon	equ	0xFF2
 20028                           intcon2	equ	0xFF1
 20029                           postinc0	equ	0xFEE
 20030                           wreg	equ	0xFE8
 20031                           indf1	equ	0xFE7
 20032                           fsr1h	equ	0xFE2
 20033                           fsr1l	equ	0xFE1
 20034                           bsr	equ	0xFE0
 20035                           indf2	equ	0xFDF
 20036                           postinc2	equ	0xFDE
 20037                           postdec2	equ	0xFDD
 20038                           plusw2	equ	0xFDB
 20039                           fsr2h	equ	0xFDA
 20040                           fsr2l	equ	0xFD9
 20041                           status	equ	0xFD8
 20042                           
 20043                           	psect	rparam
 20044  0000                     tblptru	equ	0xFF8
 20045                           tblptrh	equ	0xFF7
 20046                           tblptrl	equ	0xFF6
 20047                           tablat	equ	0xFF5
 20048                           prodh	equ	0xFF4
 20049                           prodl	equ	0xFF3
 20050                           intcon	equ	0xFF2
 20051                           intcon2	equ	0xFF1
 20052                           postinc0	equ	0xFEE
 20053                           wreg	equ	0xFE8
 20054                           indf1	equ	0xFE7
 20055                           fsr1h	equ	0xFE2
 20056                           fsr1l	equ	0xFE1
 20057                           bsr	equ	0xFE0
 20058                           indf2	equ	0xFDF
 20059                           postinc2	equ	0xFDE
 20060                           postdec2	equ	0xFDD
 20061                           plusw2	equ	0xFDB
 20062                           fsr2h	equ	0xFDA
 20063                           fsr2l	equ	0xFD9
 20064                           status	equ	0xFD8
 20065                           tblptru	equ	0xFF8
 20066                           tblptrh	equ	0xFF7
 20067                           tblptrl	equ	0xFF6
 20068                           tablat	equ	0xFF5
 20069                           prodh	equ	0xFF4
 20070                           prodl	equ	0xFF3
 20071                           intcon	equ	0xFF2
 20072                           intcon2	equ	0xFF1
 20073                           postinc0	equ	0xFEE
 20074                           wreg	equ	0xFE8
 20075                           indf1	equ	0xFE7
 20076                           fsr1h	equ	0xFE2
 20077                           fsr1l	equ	0xFE1
 20078                           bsr	equ	0xFE0
 20079                           indf2	equ	0xFDF
 20080                           postinc2	equ	0xFDE
 20081                           postdec2	equ	0xFDD
 20082                           plusw2	equ	0xFDB
 20083                           fsr2h	equ	0xFDA
 20084                           fsr2l	equ	0xFD9
 20085                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         119
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     67     160
    BANK1           256      3      23
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?_memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    memset@p1	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    memset@p	PTR unsigned char  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), RXM1SIDH(ABS[1]), 
		 -> RXF1SIDH(ABS[1]), B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), 
		 -> B2CON(ABS[1]), B1CON(ABS[1]), B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionPulseOn
    _doDM->_doActionPulseOff
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatusAll->_doActionStatus
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_ram->_memset
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doApplicationOneSecondWork
    _doApplicationOneSecondWork->_SendInformationEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionPulseOff
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  115449
                                              0 BANK1      3     3      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                         _Read_b_eep
               _SendInformationEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                          45    45      0   13530
                                             22 BANK0     45    45      0
                         _Read_b_eep
               _SendInformationEvent
                        _doActionOff
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    3314
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    3230
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                18    18      0   30018
                                             27 BANK0     18    18      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                    _doActionPulseOn
                   _doActionPulseOff
                     _doActionStatus
                  _doActionStatusAll
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       4     3      1    4056
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionStatusAll                                    3     2      1    4176
                                             22 BANK0      3     2      1
                     _doActionStatus
 ---------------------------------------------------------------------------------
 (3) _doActionStatus                                       4     3      1    3996
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOff                                     9     8      1    3954
                                             78 COMRAM     3     2      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOn                                      7     6      1    4038
                                             78 COMRAM     3     2      1
                                             22 BANK0      3     3      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           6     5      1    4080
                                             78 COMRAM     3     2      1
                                             22 BANK0      2     2      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          4     3      1    3912
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   49818
                                             35 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     232
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   16658
                                             79 COMRAM     1     1      0
                                             34 BANK0      1     0      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4202
                                             53 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1994
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                        38    38      0     848
                                             15 COMRAM    38    38      0
                         _Read_b_eep
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     188
                                              7 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    1146
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     222
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                    13    12      1   12246
                                             78 COMRAM     1     0      1
                                             22 BANK0     12    12      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    2586
                                             17 COMRAM    50    50      0
               _ECANSetOperationMode
                       __CANIDToRegs
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    3504
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2893
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1855
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      31
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    3146
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     354
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      42
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     360
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     402
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      99
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    6652
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    3146
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    3146
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPFrame                                       32    24      8    3132
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendCANFrame                                         8     1      7    2832
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (4) _ECANSendMessage                                     37    29      8    2652
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (5) __CANIDToRegs                                        10     3      7     966
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    2371
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    2361
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1954
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1720
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     697
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      86
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     582
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3     138
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     250
                     _ECANInitialize
                        _WriteTimer0
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      84
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      9     9      0     912
                                              9 COMRAM     9     9      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _ECANInitialize
       _ECANSetOperationMode
     _WriteTimer0
     _OpenTimer0
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
     _memset
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _ECANSetOperationMode
         __CANIDToRegs
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _ECANSetOperationMode
           __CANIDToRegs
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
             _memset
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
           _memset
     ___lbmod
   _Read_b_eep
   _SendInformationEvent
     _Read_b_eep
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatusAll
       _doActionStatus
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      3      17       6        9.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     43      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10F      15        0.0%
DATA                 0      0     11B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Jul 03 15:54:07 2015

                __end_of_vscp_readAppReg 3026                    __end_of_sendVSCPFrame 3F30  
                                     PL2 1282                                       PL4 23A4  
                                     PL6 1294                                       PL8 23BA  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 31A4  
                  doActionToggle@dmflags 0001                       doActionPulseOn@arg 004F  
                                    PL10 12A2                                      PL20 26A4  
                                    PL12 12B2                                      PL30 38BA  
                                    PL22 26E2                                      PL14 1914  
                                    PL40 37A0                                      PL32 1948  
                                    PL24 26FA                                      PL16 2C48  
                                    PL50 1992                                      PL42 38CE  
                                    PL34 1964                                      PL26 1936  
                                    PL18 23CC                                      PL60 275E  
                                    PL52 37AE                                      PL44 2C5C  
                                    PL36 1976                                      PL28 272E  
                                    PL70 12C0                                      PL62 38F0  
                                    PL54 1F94                                      PL46 1F7C  
                                    PL38 1984                                      PL80 2A24  
                                    PL72 12CE                                      PL64 31A4  
                                    PL56 37C2                                      PL48 38DE  
                                    PL90 1322                                      PL82 12EA  
                                    PL74 12DC                                      PL66 37E8  
                                    PL58 37D4                                      PL92 1FA8  
                                    PL84 12F8                                      PL76 3478  
                                    PL68 2A12                                      PL94 1330  
                                    PL86 1306                                      PL78 2E6E  
                                    PL96 133E                                      PL88 1314  
                                    PL98 23DA                                      l200 2D44  
                                    l202 2D54                                      l212 2DDE  
                                    l204 2D64                                      l213 2DF8  
                                    l230 38B8                                      l240 40AA  
                                    l170 32AE                                      l235 379E  
                                    l181 2CAC                                      l502 22E8  
                                    l191 2D7A                                      l192 2CFA  
                                    l176 332C                                      l168 3290  
                                    l600 15EA                                      l504 2332  
                                    l601 15F2                                      l441 20BE  
                                    l425 1FD8                       vscp_readStdReg@idx 0019  
                                    l194 2D08                                      l610 1616  
                                    l434 2020                                      l603 15F6  
                                    l196 2D1C                                      l188 2E6C  
                                    l612 161A                                      l604 15FE  
                                    l460 216E                                      l621 16E6  
                                    l613 1622                                      l198 2D30  
                                    l606 1602                                      l550 1442  
                                    l454 2138                                      l615 1626  
                                    l607 160A                                      l720 08AC  
                                    l536 342E                                      l616 162E  
                                    l472 21DA                                      l448 2102  
                                    l641 4432                                      l609 160E  
                                    l618 1632                                      l490 227C  
                                    l466 21A4                                      l731 0970  
                                    l619 163C                                      l484 2246  
                                    l741 0A42                                      l645 440C  
                                    l901 3602                                      l726 0906  
                                    l590 15C2                                      l478 2210  
                                    l751 0B0A                                      l911 363E  
                                    l903 360E                                      l591 15CA  
                                    l736 09DA                                      l920 3DBE  
                                    l496 22B2                                      l761 0BD2  
                                    l913 364A                                      l905 361A  
                                    l746 0AA6                                      l930 3D30  
                                    l594 15D2                                      l851 126A  
                                    l923 3D0C                                      l907 3626  
                                    l595 15DA                        doActionStatus@bOn 0051  
                                    l756 0B6E                                      l940 3D6C  
                                    l932 3D3C                                      l909 3632  
                                    l597 15DE                                      l766 0C36  
                                    l942 3D78                                      l934 3D48  
                                    l926 3D18                                      l598 15E6  
                     vscp_readStdReg@reg 001C                                      l951 34A8  
                                    l871 2A94                                      l936 3D54  
                                    l928 3D24                                      l960 34D8  
                                    l865 2C46                                      l938 3D60  
                                    l970 3514                                      l962 34E4  
                                    l954 34B4                                      l891 36DA  
                                    l964 34F0                                      l956 34C0  
                                    l948 35B8                                      l869 2A7A  
                                    l894 35DE                                      l966 34FC  
                                    l958 34CC                                      l990 3A72  
                                    l982 3A42                                      l896 3678  
                                    l968 3508                                      l992 3A7E  
                                    l984 3A4E                                      l976 3B12  
                                    l897 35EA                                      l994 3A8A  
                                    l986 3A5A                                      l899 35F6  
                                    l979 3A36                                      l996 3A96  
                                    l988 3A66                                      l998 3AA2  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 004F                    doActionToggle@ctrlreg 0050  
                         getVSCPFrame@id 0028            __end_of_vscp_handleProbeState 3E7A  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                                      prod 000FF3  
                 _calculateSetFilterMask 23E8                                      wreg 000FE8  
                 _measurement_clock_10ms 0060                                     PL100 3904  
                                   PL110 277C                                     PL102 31B8  
                                   PL104 19A0                                     PL106 2772  
            ?_doApplicationOneSecondWork 0001                                     PL108 1FB6  
                           __CFG_LVP$OFF 000000                      doActionPulseOff@arg 004F  
                           __CFG_WDT$OFF 000000                                     l1011 3B46  
                                   l1020 3B6A                                     l1012 3B4E  
                                   l1004 3C0A                                     l1021 3B72  
                                   l1030 3B96                                     l1014 3B52  
                                   l1023 3B76                                     l1015 3B5A  
                                   l1007 3B36                                     l1032 3B9A  
                                   l1024 3B7E                                     l1008 3B3E  
                                   l1033 3BA2                                     l1017 3B5E  
                                   l1122 4572                                     l1026 3B82  
                                   l1018 3B66                                     l1035 3BA6  
                                   l1027 3B8A                                     l1300 3E02  
                                   l1036 3BB0                     __size_of_doActionOff 00D6  
                                   l1045 3CE8                                     l1029 3B8E  
                                   l1038 3BF6                                     l1153 4216  
                                   l1147 403C                                     l1307 3E64  
                                   l1059 3CD4                                     l1308 3E44  
                                   l1332 425A                                     l1500 1D76  
                                   l1405 44C2                                     l1158 4344  
                                   l1342 42B2                                     l1343 42BE  
                                   l1431 3A0E                                     l1336 447C  
                                   l1360 458C                                     l1347 436E  
                                   l1284 4166                                     l1356 4152  
                                   l1533 4398                                     l1525 1F7A  
                                   l1289 44A0                                     l1465 1B6E  
                                   l1490 1CFE                                     l1539 46B6  
                                   l1299 3E76                                     l1491 1D3A  
                                   l1580 451A                                     l1564 427E  
                                   l1581 451C                                     l1489 1CEA  
                    vscp_readStdReg@code 0011                vscp_getManufacturerId@idx 000A  
                                   l9211 2D8E                                     l9221 2DAE  
                                   l9143 2C9A                                     l9305 373A  
                                   l9153 2CC4                                     l9161 2CE4  
                                   l9261 2E56                                     l9247 2E26  
                                   l9255 2E40                                     l9239 2DFA  
                                   l9159 2CDA                                     l9167 2CE8  
                                   l9281 406A                                     l9273 4044  
                                   l9283 4074                                     l9275 404C  
                                   l9291 408C                                     l9285 407A  
                                   l9277 4056                                     l9287 4080  
                                   l9279 4060              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                           sendCANFrame@rv 003E  
                     doActionStatusAll@i 00D4                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000D  
                                   ___IT 000101                                     _doDM 2A32  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 1FC0                                     _init 4198  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0622                              _vscp_minute 007D  
                            _vscp_second 0082                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00C6  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 390E  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 403E              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    _B0CON 000E20  
                                  l13101 1BFE                                    l13013 1A36  
                                  _B1CON 000E30                                    l12401 3324  
                                  l14001 0942                                    l13105 1C14  
                                  l13121 1C3A                                    ?_doDM 0001  
                                  l12331 45B2                                    l13211 1D1E  
                                  l13203 1D00                                    l13123 1C3C  
                                  l13043 1A9E                                    l13027 1A42  
                                  l12341 321A                                    l14101 0B42  
                                  l14021 09AC                                    l13133 1C60  
                                  l13125 1C46                                    l13053 1AD2  
                                  l13215 1D26                                    l13151 1C9E  
                                  l13063 1B06                                    _B2CON 000E40  
                                  l12417 3846                                    l14121 0BA6  
                                  l14041 0A16                                    l14009 0982  
                                  l13321 1E46                                    l13313 1E16  
                                  l13233 1D56                                    l13073 1B3A  
                                  l12347 322A                                    l14203 0D2A  
                                  l13219 1D2E                                    l13139 1C8C  
                                  l13091 1BA0                                    l12603 22E0  
                                  l12531 219C                                    l12507 2130  
                                  l12611 2326                                    l12381 32DE  
                                  l15005 4586                                    l14221 0D98  
                                  l14141 0C0A                                    l14109 0B7E  
                                  l14061 0A7A                                    l14029 09EC  
                                  l12197 43BA                                    l12189 43A4  
                                  l13325 1E5E                                    l13317 1E30  
                                  l13229 1D3C                                    l13085 1B72  
                                  l13421 2AAE                                    l13501 137A  
                                  l12613 232C                                    l12461 2010  
                                  l12453 1FFE                                    l11903 3FE0  
                                  l12375 32B0                                    l12359 3254  
                                  l15031 3064                                    l15023 304E  
                                  l15103 31A0                                    l15015 303A  
                                  l14303 0E9A                                    l14231 0DAA  
                                  l14207 0D5A                                    l14151 0C46  
                                  l13343 1EA2                                    l13335 1E88  
                                  l13255 1D78                                    l13183 1CDE  
                                  l13167 1CBE                                    l13095 1BB8  
                                  l13087 1B90                                    l12631 2382  
                                  l12543 21D2                                    l12519 2166  
                                  l12463 2014                                    _B3CON 000E50  
                                  l12369 3294                                    l14401 0FD2  
                                  l14129 0BE2                                    l14081 0ADE  
                                  l14049 0A52                                    l14153 0C82  
                                  l13441 2BB0                                    l13433 2B84  
                                  l13601 155C                                    l13521 13DE  
                                  l13513 13B6                                    l13505 1382  
                                  l12609 22EC                                    l12473 2030  
                                  l12465 201A                                    l12457 2006  
                                  l12617 2336                                    l11915 4322  
                                  l12395 331E                                    l15043 308C  
                                  l15035 3070                                    l15027 3058  
                                  l15019 3044                                    l14323 0EE4  
                                  l14251 0DF4                                    l14227 0DA4  
                                  l14403 100E                                    l12715 3354  
                                  l12811 2824                                    l15115 44B8  
                                  l13347 1ECA                                    l13291 1DEE  
                                  l13603 1560                                    l13531 1410  
                                  l13523 13E8                                    l13515 13C0  
                                  l12643 2396                                    l12555 2208  
                                  l12619 2356                                    l12389 32FC  
                                  l15061 30C4                                    l15053 30AE  
                                  l14341 0F28                                    l14317 0ED8  
                                  l14245 0DE8                                    l14173 0CCE  
                                  l14069 0AB6                                    l14413 101E  
                                  l12733 339A                                    l12805 27B6  
                                  l15133 3958                                    l13269 1DA0  
                                  l13701 3CF4                                    l13453 2BF2  
                                  l13445 2BC6                                    l13437 2B9A  
                                  l13429 2B6E                                    l13461 2C3C  
                                  l13605 158A                                    l13525 13F2  
                                  l13517 13CA                                    l11919 4326  
                                  l12399 3322                                    l15039 307C  
                                  l14431 10BC                                    l14423 1044  
                                  l14351 0F3A                                    l14327 0EEA  
                                  l14255 0DFA                                    l14183 0CE0  
                                  l14159 0C90                                    l12743 33BC  
                                  l12815 286C                                    l15151 39AC  
                                  l15127 3938                                    l13295 1E00  
                                  l13279 1DC2                                    l13615 15CC  
                                  l13527 13FC                                    l13519 13D4  
                                  l13535 141A                                    l12647 239E  
                                  l12591 22AA                                    l12567 223E  
                                  l12495 20EC                                    _B4CON 000E60  
                                  l12913 3E20                                    l15073 30E8  
                                  l15065 30D0                                    l15057 30BA  
                                  l15049 30A2                                    l14505 127E  
                                  l14441 1152                                    l14433 10DA  
                                  l14425 1062                                    l14089 0B1A  
                                  l12761 3402                                    l13297 1E06  
                                  l13369 1F1A                                    l13721 3D38  
                                  l13713 3D20                                    l13449 2BDC  
                                  l13545 1466                                    l13529 1406  
                                  l12497 20F4            __size_of_SendInformationEvent 0052  
                                  l12915 3E24                                    l11867 44D0  
                                  l15083 3132                                    l14531 251E  
                                  l14523 250C                                    l14515 23FA  
                                  l14435 10F8                                    l14427 1080  
                                  l14371 0F80                                    l14347 0F34  
                                  l14275 0E44                                    l14179 0CDA  
                                  l12771 3418                                    l15171 39F4  
                                  l15163 39E0                                    l15147 3992  
                                  l15139 3974                                    l14611 362E  
                                  l14603 3616                                    l13459 2C08  
                                  l13483 4132                                    l13571 14C8  
                                  l13547 1474                                    l12579 2274  
          __size_of_vscp_getMajorVersion 0002                                    l13813 2EAA  
                                  l12909 3E1C                                    l15093 317A  
                                  l15069 30DC                                    l14437 1116  
                                  l14429 109E                                    l14445 1170  
                                  l14365 0F78                                    l14293 0E88  
                                  l14269 0E38                                    l14197 0D1E  
                                  l15149 3996                                    l15181 3A10  
                                  l13741 3D74                                    l13733 3D5C  
                                  l13725 3D44                                    l13717 3D2C  
                                  l13709 3D14                                    l14613 3636  
                                  l13477 4128                                    l13557 1496  
                                  l13823 2EDE                                    l14535 2592  
                                  l14439 1134                                    l14447 11A2  
                                  l14375 0F86                                    l14279 0E4A  
                                  l12951 19B2                                    l13735 3D64  
                                  l13751 3DA6                                    l14631 36C4  
                                  l14615 363A                                    l14607 3622  
                                  l13399 2A3E                                    l13487 413A  
                                  l13655 1640                                    l13671 16FA  
                                  l13567 14B8                                    l13559 14A4  
                                  l13583 14EC                                    _B5CON 000E70  
                                  l13841 2F7A                                    l13833 2F5A  
                                  l13809 2E9A                                    l12697 448C  
                                  l12945 3E68                                    l14553 262A  
                                  l14481 120C                                    l12785 3430  
                                  l12953 19B8                                    l13737 3D68  
                                  l13729 3D50                                    l14721 3A4A  
                                  l14801 3C92                                    l13665 16D2  
                                  l13657 166A                                    l13673 172E  
                                  l13851 2FA2                                    l13843 2F82  
                                  l13835 2F62                                    l13827 2F4C  
                                  l13819 2EC8                                    l12891 3DE6  
                                  l12875 3DC2                                    l15099 3190  
                                  l14555 2632                                    l14395 0FCC  
                                  l14299 0E94                                    l12955 19BE  
                                  l14619 3646                                    l14627 3650  
                                  l14651 34B0                                    l14643 3490  
                                  l14803 3CBA                                    l13579 14DA  
                                  l13845 2F8A                                    l13837 2F6A  
                                  l14549 25B0                                    l14389 0FC4  
                                  l13941 082C                                    l13917 06FA  
                                  l13909 06A8                                    l14493 1236  
                                  l13773 441A                                    l13781 43F4  
                                  l13693 4308                                    l12957 19C4  
                                  l13749 3D7E                                    l14741 3A86  
                                  l14733 3A6E                                    l14725 3A56  
                                  l14717 3A3E                                    l14709 3A1E  
                                  l13685 17E0                                    l13677 1734  
                                  l13847 2F92                                    l13839 2F72  
                                  l13855 2FAA                                    l13863 2FE4  
                                  l14559 2648                                    l12959 19CA  
                                  l14591 35F2                                    l14671 34EC  
                                  l14663 34D4                                    l14655 34BC  
                                  l14743 3A8E                                    l13849 2F9A  
                                  l13857 2FD6                                    l12889 3DE0  
                                  l13961 087E                                    l13689 42F8  
                                  l12993 1A10                                    l12977 1A02  
                                  l14745 3A92                                    l14737 3A7A  
                                  l14729 3A62                                    l14817 4526  
                                  l13875 3022                                    l13891 065C  
                                  l12979 1A08                                    l14595 35FE  
                                  l14587 35E6                                    l14579 35C4  
                                  l14683 3510                                    l14675 34F8  
                                  l14667 34E0                                    l14659 34C8  
                                  l14691 351A                                    l13869 3002  
                                  l14933 4210                                    l13981 08EC  
                                  l13949 0854                                    l14677 3500  
                                  l14693 3542                                    l14765 3AE8  
                                  l14749 3A9E                                    l14757 3AA8  
                                  l14781 3C38                                    l14773 3C16  
                                  l14837 3B40                                    l14829 3B1E  
                                  l13967 08BC                                    l14599 360A  
                                  l14679 3504                                    l14759 3AD0  
                                  l14791 3C6A                                    l14783 3C42  
                                  l14929 41E2                                    l14961 4252  
                                  l13969 08C2                                    l14793 3C74  
                                  l14785 3C4C                                    l13899 0680  
                                  l14699 355A                                    l14795 3C7E  
                                  l14787 3C56                                    l14779 3C2E  
                                  l13989 0918                                    l14797 3C88  
                                  l14789 3C60                                    l14877 3BB4  
                                  l14879 3BDC               __end_of_vscp_goActiveState 4502  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                        _doActionPulseOn 3486                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 4660  
                                  _EEADR 000FA9                          __end_of___lbmod 43C2  
                _vscp_handleDropNickname 4290                                    _BSEL0 000DF8  
                                  _T0CON 000FD5                                    u11075 3702  
                                  u11085 3712                                    u11095 373E  
                                  u10805 2CA2                                    u20430 3128  
                                  u10807 2CA4                                    u20435 3126  
                                  u20460 3172                                    u20465 3170  
                                  u16005 384E                                    u15260 4030  
                                  u15265 4026                                    u16084 206C  
                                  u16085 2068                                    u16094 2090  
                                  u16095 208C                                    u16615 2952  
                                  u16625 2968                                    u18065 1854  
                                  u16635 297E                                    u18075 186A  
                                  u16645 299A                                    u18085 1880  
                                  u19310 253E                                    u16574 27E0  
                                  u18255 3EB6                                    u16575 27DA  
                                  u18095 189C                                    u19320 2566  
                                  u17634 1924                                    u19315 2534  
                                  u17475 2AFC                                    u17635 191E  
                                  u19404 2614                                    u16685 428A  
                                  u19405 2612                                    u19325 255C  
                                  u16686 428C                                    u19344 257C  
                                  u17584 1388                                    u15985 3820  
                                  u19345 257A                                    u17585 1386  
                                  u15995 3830                                    u19374 25E6  
                                  u17854 153A                                    u19375 25E2  
                                  u19295 2452                                    u17855 1536  
                                  u19384 25FE                                    u19385 25FA  
                                  u17874 1590                                    u17875 158E  
                                  u19724 3570                                    u19725 356A  
                                  i1l413 0070                                    i1l421 00B8  
                                  i1l415 0094                                    i1l416 0096  
                                  i1l417 00B6                                    i1l418 00AA  
                                  u19874 3AFE                                    u19875 3AF8  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 46A4  
             _vscp_readNicknamePermanent 469A                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 4628                                    doDM@i 00E8  
                          __CFG_WRTD$OFF 000000                           Read_b_eep@badd 0008  
                         __CFG_EBTRB$OFF 000000                   Write_b_eep@GIE_BIT_VAL 000B  
                           _vscp_getZone 467C                       vscp_writeAppReg@rv 00DB  
                                  _hours 0076                _vscp_getRegisterPagesUsed 46C2  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 440E  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 46C8  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 43E8                             __end_ofPL100 390E  
                           __end_ofPL110 2784                             __end_ofPL102 31C4  
                           __end_ofPL104 19A8                             __end_ofPL106 277C  
                           __end_ofPL108 1FC0                     _ECANSetOperationMode 45A6  
                        __initialization 42C0                             __end_of_doDM 2C48  
                           __end_of_main 23A4                             __end_of_init 41DC  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 464E  
                _interrupt_at_low_vector 0018                         __end_of_Busy_eep 46BC  
                         doDM@class_mask 00DC                           __CFG_OSC$HSPLL 000000  
                  doActionPulseOn@bEvent 0051                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00D7  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0036                                   ??_main 0114  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 19A8                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00FC                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON1 000FC1                         _doActionPulseOff 3A14  
             ECANReceiveMessage@savedPtr 0013                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                            doDM@type_mask 00DF  
                    _channel_pulse_flags 0068                       vscp_writeStdReg@rv 003B  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 4502  
                                 i1l8871 0038                                   i1l8881 006A  
                                 i1l8873 003E                                   i1l8891 0090  
                                 i1l8883 006E                                   i1l8875 0042  
                                 i1l8867 0024                                   i1l8893 009A  
                                 i1l8885 0072                                   i1l8877 0052  
                                 i1l8869 002C                                   i1l8895 00A4  
                                 i1l8887 007E                                   i1l8879 0062  
                                 i1l8897 00B2                                   i1l8889 0088  
                        _init_app_eeprom 332E                      _channel_pulse_timer 0100  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                   doActionStatusAll@arg 00D2                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 4346  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1513 00E8                  __end_of_doActionPulseOn 35BA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 4370  
                                 _doWork 46C0                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00DC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00DD  
             __end_of_vscp_setSegmentCRC 45EA                      vscp_writeAppReg@val 004F  
                                 _memset 42EE                                   clear_0 42C6  
                                 clear_1 42D2                                   clear_2 42DE  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00F5  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 007E  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0010  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                             __accesstop 0060                  __end_of__initialization 42E4  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        _current_iostate 006A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 44A2                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 44A2  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00DE  
                             __end_ofPL2 1294                               __end_ofPL4 23BA  
                             __end_ofPL6 12A2                               __end_ofPL8 23CC  
                         ??_sendCANFrame 003E                               _doActionOn 35BA  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 469A                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01FA                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 4690          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00DE          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 1282                             _debounce_cnt 00B2  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 3478  
            __end_of_vscp_setControlByte 45D4                 __end_of_vscp_writeStdReg 3A14  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0050          __end_of_vscp_handleDropNickname 42C0  
                 doActionPulseOff@bEvent 0051                             _getVSCPFrame 3FC6  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                   doActionPulseOn@dmflags 0001  
             __end_of_vscp_getBufferSize 46C6                                ?_Busy_eep 0001  
                 doActionPulseOn@ctrlreg 0050                    vscp_writeRegister@reg 0050  
                 ??_ECANSetOperationMode 0008                             __IT_INT_MASK 0070  
                           __IT_SAVE_BSR 0071       __size_of_vscp_getRegisterPagesUsed 0002  
        __end_of_vscp_getSubMinorVersion 46CA                         ?_doActionPulseOn 004F  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 26A4                  __size_of_doActionToggle 00F8  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 00DE  
                                _ECANCON 000F77                                  ?_memset 0008  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                        _doActionStatusAll 4520  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00D0                      vscp_writeStdReg@reg 003C  
           __end_of_vscp_doOneSecondWork 4154                       ?_doActionStatusAll 00D2  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 0050          __end_of_interrupt_at_low_vector 00C6  
               vscp_readStdReg@code_1486 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3DC0                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 403E               __end_of_vscp_getMatrixInfo 44E4  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 0001  
                    ??_doActionStatusAll 0052                       _vscp_goActiveState 44E4  
                  doActionStatus@ctrlreg 0050                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 4106             __end_of_vscp_getMajorVersion 46CE  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 4600                   _vscp_setManufacturerId 43E8  
                        _ECANSendMessage 31C4                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0080  
             __end_of_vscp_getSegmentCRC 46AE               ??_vscp_handleProtocolEvent 00DF  
                          ??_getCANFrame 001C        __end_of_vscp_getRegisterPagesUsed 46C4  
               __size_of_vscp_getMDF_URL 0018                 __end_of_doActionPulseOff 3B14  
                                ___lbmod 439A                          getCANFrame@pdlc 001A  
              __end_of_doActionStatusAll 453C                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 0600  
                   __end_of_init_app_ram 2A12                       _vscp_sendHeartBeat 43C2  
                                __pcinit 42C0                           _vscp_deviceURL 0600  
                        __size_of_memset 002C                              ?_doActionOn 004F  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 1FC0                                  __ptext1 46C0  
                                __ptext2 134C                                  __ptext3 4106  
                                __ptext4 43C2                                  __ptext5 4672  
                                __ptext6 467C                                  __ptext7 46BC  
                                __ptext8 2A32                                  __ptext9 3B14  
                         _vscp_getUserID 4614                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionOn@bEvent 00D3  
                  vscp_writeStdReg@value 0036                      ?_vscp_sendHeartBeat 00D0  
               ??_vscp_handleSetNickname 000D                                  _minutes 0077  
                                _seconds 0078                      __end_of_WriteTimer0 464E  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 4290  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
                                main@dir 0116            vscp_handleProtocolEvent@bytes 00EC  
                   end_of_initialization 42E4                          init_app_ram@dir 0034  
                    __end_of_doActionOff 3DC0             __end_of_vscp_handleHeartbeat 425C  
               __size_of_vscp_getSubzone 000A                                i1u1060_20 0090  
                              i1u1060_21 008E                                i1u1061_20 00A4  
                                memset@c 000A                                i1u1061_21 00A2  
                              i1u1062_20 00B2                                i1u1062_21 00B0  
                                memset@n 000C                                  memset@p 000E  
                              i1u1056_20 002C                                i1u1056_21 002A  
                              i1u1057_20 006A                                i1u1057_21 0068  
                              i1u1058_20 007E                                i1u1058_21 007C  
                          __Lmediumconst 0000                                i1u1059_20 0088  
                              i1u1059_21 0086                     __end_of_sendCANFrame 421E  
              vscp_handleProtocolEvent@i 00F9                vscp_handleProtocolEvent@j 00FA  
              vscp_handleProtocolEvent@k 00F3                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 4434                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 453C  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 4600  
            _vscp_writeNicknamePermanent 45EA                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3E7A                   __end_of_vscp_getUserID 4628  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 4198                           _vscp_probe_cnt 0081  
                              _PORTAbits 000F80         doApplicationOneSecondWork@bInput 00FB  
                              _PORTBbits 000F81                         _current_debounce 0075  
                              _PORTCbits 000F82                      __end_of_getCANFrame 4346  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 01AA                         ___lbmod@dividend 0009  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 45D4  
             vscp_handleProtocolEvent@cb 00F1                  __end_of_ECANSendMessage 332E  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00E7  
                   __end_of__RegsToCANID 37A0                    _measurement_clock_sec 0064  
                    __size_of_doActionOn 0122                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 445A                               _vscp_error 46BC  
                   _vscp_doOneSecondWork 4106                       i1WriteTimer0@timer 0003  
                             _vscp_timer 006E                   __end_of_vscp_setUserID 4558  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00FE  
                         _doActionToggle 3B14               __size_of_doActionStatusAll 001C  
                         _doActionStatus 3C0C                          ?_vscp_getUserID 0001  
                         __end_of_doWork 46C2             __end_of_vscp_getMinorVersion 46CC  
                            _WriteTimer0 463C                     _SendInformationEvent 40B4  
                   _vscp_getMajorVersion 46CC                              _Write_b_eep 425C  
                         __end_of_memset 431A                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                              ___DCDelay 00FF                              __end_ofPL10 12B2  
                            __end_ofPL20 26E2                              __end_ofPL12 12C0  
                      ?_vscp_writeAppReg 004F                              __end_ofPL30 38CE  
                            __end_ofPL22 26FA                              __end_ofPL14 1936  
                            __end_ofPL40 37AE                              __end_ofPL32 1964  
                            __end_ofPL24 272E                              __end_ofPL16 2C5C  
                            __end_ofPL50 19A0                              __end_ofPL42 38DE  
                            __end_ofPL34 1976                              __end_ofPL26 1948  
                            __end_ofPL18 23DA                              __end_ofPL60 2772  
                            __end_ofPL52 37C2                              __end_ofPL44 2C74  
                            __end_ofPL36 1984                              __end_ofPL28 275E  
                            __end_ofPL70 12CE                              __end_ofPL62 3904  
                            __end_ofPL54 1FA8                              __end_ofPL46 1F94  
                            __end_ofPL38 1992                              __end_ofPL80 2A32  
                            __end_ofPL72 12DC                              __end_ofPL64 31B8  
                            __end_ofPL56 37D4                              __end_ofPL48 38F0  
                            __end_ofPL90 1330                              __end_ofPL82 12F8  
                            __end_ofPL74 12EA                              __end_ofPL66 37FA  
                            __end_ofPL58 37E8                              __end_ofPL92 1FB6  
                            __end_ofPL84 1306                              __end_ofPL76 3486  
                            __end_ofPL68 2A24                              __end_ofPL94 133E  
                            __end_ofPL86 1314                              __end_ofPL78 2E7C  
                            __end_ofPL96 134C                              __end_ofPL88 1322  
                            __end_ofPL98 23E8                      start_initialization 42C0  
                            _doActionOff 3CEA          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00D2                        ?_vscp_writeStdReg 0036  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0037  
                     _vscp_getFamilyCode 4690                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 4686                 _channel_protection_timer 0083  
                       doDM@class_filter 00DA                       __end_of_Read_b_eep 4660  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 4574  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00F0  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1F7C  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                              _doDM$2393 00E0                                _doDM$2394 00E1  
                              _doDM$2395 00E2                                _doDM$2396 00E3  
                              _doDM$2397 00E4                                _doDM$2398 00E5  
                              _doDM$2399 00E6                    __size_of_init_app_ram 028E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3C0C  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 3CEA  
               __end_of__ECANPointBuffer 40B4                        __CANIDToRegs@type 000E  
                            _getCANFrame 431A                                 ??_doWork 0008  
                     _vscp_getBufferSize 46C4              vscp_handleProtocolEvent@len 00ED  
                         doActionOff@arg 004F              vscp_handleProtocolEvent@pos 00EB  
             __end_of_ECANReceiveMessage 2E6E                      ??_vscp_readRegister 001D  
                               ??_memset 000E           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00D0                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 4672            __end_of_vscp_goBootloaderMode 4574  
                   _vscp_handleHeartbeat 421E                       __end_of_OpenTimer0 4520  
    __size_of_doApplicationOneSecondWork 05C8                      ?_vscp_getBufferSize 0001  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                          __IT_SAVE_STATUS 0072  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00BC  
                          __pcstackBANK1 0114                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0042  
                doActionPulseOff@dmflags 0001                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                  doActionPulseOff@ctrlreg 0050  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 458E  
                           _init_app_ram 2784             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                __pnvBANK0 00FF  
                          __IT_SAVE_WREG 0073                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 44C4                   _vscp_handleSetNickname 445A  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00BC  
                        ?_doActionToggle 004F                           _ECANInitialize 3F30  
                        ?_doActionStatus 004F                                 ?___lbmod 0008  
                      ?_doActionPulseOff 004F                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000A                              __pintcodelo 0018  
                           ??_doActionOn 0050                       ??_doActionPulseOff 00D2  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1503 00EF  
                vscp_readStdReg@idx_1487 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 41DC                              __smallconst 0600  
                      WriteTimer0@timer0 0008                 __size_of_doActionPulseOn 0134  
                     _vscp_getSegmentCRC 46A4                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A           __end_of_vscp_getManufacturerId 4614  
         __end_of_vscp_setManufacturerId 440E                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1502 00EE                          doDM@type_filter 00DE  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 006C  
        SendInformationEvent@eventTypeId 00D1                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 46CA  
                              _sendTimer 0079                       __end_of_doActionOn 36DC  
                 __end_of_ECANInitialize 3FC6                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 439A  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000A  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000C                     __end_of__CANIDToRegs 38BA  
                           __RegsToCANID 36DC                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
                     doActionOff@dmflags 0001              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 4154  
                              _vscp_imsg 0097                                _vscp_hour 007B  
                              _vscp_omsg 00A5                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 05D4                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                       doActionOff@ctrlreg 0050  
               SendInformationEvent@data 004B     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 1914               _doApplicationOneSecondWork 134C  
                       _vscp_page_select 0052                              _INTCON2bits 000FF1  
             __size_of_vscp_readRegister 001A                                 ___DCByte 0074  
                               _Busy_eep 46B6                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 014A             __end_of_vscp_restoreDefaults 46B6  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0012              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 458E  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 004F  
 doApplicationOneSecondWork@iodirections 00F6                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
               vscp_writeAppReg@val_1273 00D9                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008               vscp_writeAppReg@bInfoEvent 00DA  
                             ?_vscp_init 0001                             ?_doActionOff 004F  
                               __ptext10 4520                                 __ptext11 3C0C  
                               __ptext20 46AE                                 __ptext12 3A14  
                               __ptext21 2784                                 __ptext13 3486  
                               __ptext30 4574                                 __ptext22 42EE  
                               __ptext14 35BA                                 __ptext31 3026  
                               __ptext23 332E                                 __ptext15 3CEA  
                               __ptext40 4628                                 __ptext32 46C2  
                               __ptext24 453C                                 __ptext16 19A8  
                               __ptext41 46C8                                 __ptext33 4686  
                               __ptext25 43E8                                 __ptext17 439A  
                               __ptext50 44C4                                 __ptext42 46CA  
                               __ptext34 4690                                 __ptext26 440E  
                               __ptext18 44A2                                 __ptext51 4558  
                               __ptext43 46CC                                 __ptext35 46C4  
                               __ptext27 0622                                 __ptext19 390E  
                               __ptext60 3FC6                                 __ptext52 3DC0  
                               __ptext44 4346                                 __ptext36 46C6  
                               __ptext28 23E8                                 __ptext61 431A  
                               __ptext53 44E4                                 __ptext45 4290  
                               __ptext37 4600                                 __ptext29 40B4  
                               __ptext70 425C                                 __ptext62 2C74  
                               __ptext54 4434                                 __ptext46 4154  
                               __ptext38 4614                                 __ptext71 46B6  
                               __ptext63 36DC                                 __ptext55 3E7A  
                               __ptext47 469A                                 __ptext39 458E  
                               __ptext80 4660                                 __ptext72 4198  
                               __ptext64 403E                                 __ptext56 41DC  
                               __ptext48 445A                                 __ptext73 4502  
                               __ptext65 447E                                 __ptext57 31C4  
                               __ptext49 421E                                 __ptext74 463C  
                               __ptext66 45BE                                 __ptext58 37FA  
                               __ptext75 3F30                                 __ptext67 45D4  
                               __ptext59 4370                                 __ptext76 45A6  
                               __ptext68 46A4                                 __ptext77 2E7C  
                               __ptext69 45EA                                 __ptext78 464E  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00D0  
                          ?_getVSCPFrame 001E                        ??_doActionPulseOn 00D2  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 4672  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000D  
                          __size_of_doDM 0216                            __size_of_main 03E4  
                          __size_of_init 0044                __size_of_vscp_writeAppReg 0C60  
                    _vscp_check_pstorage 447E                            init_app_ram@i 0035  
         vscp_handleProtocolEvent@i_1501 00F4           vscp_handleProtocolEvent@i_1504 00F8  
         vscp_handleProtocolEvent@i_1512 00F2                     __end_of_vscp_getGUID 463C  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 4686  
                      doActionOff@bEvent 0051                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 0001  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 4434  
                     vscp_readAppReg@reg 0012                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00EA                        doActionOn@ctrlreg 00D2  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                       init_app_eeprom@i 000F                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 45BE              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 2E7C                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 007A  
                        _vscp_readStdReg 3026             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 4370                       _ECANReceiveMessage 2C74  
                               memset@p1 0008                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 007C                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 45A6  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 0050  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 0050  
                        _vscp_node_state 007F                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019           doApplicationOneSecondWork@data 00F8  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 02BC  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 00C0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 46C8  
            _vscp_getBootLoaderAlgorithm 46C6         __size_of_interrupt_at_low_vector 00AE  
                 ECANSendMessage@dataLen 0018                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000D  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 4558  
           __end_of_ECANSetOperationMode 45BE                     _vscp_restoreDefaults 46AE  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000A  
                __end_of_vscp_getSubzone 467C              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 44C4  
                     __end_of_vscp_error 46C0                   ECANSendMessage@tempPtr 0031  
              __size_of_doActionPulseOff 0100                 doActionStatusAll@dmflags 00D3  
         __end_of_vscp_handleSetNickname 447E       vscp_handleProtocolEvent@bytes_1508 00F6  
                  ??_vscp_setControlByte 000C                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00D2                             __CANIDToRegs 37FA  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00E6  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00FD  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 0051  
                      doActionToggle@arg 004F  
