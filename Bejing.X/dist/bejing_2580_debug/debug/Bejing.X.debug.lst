

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Nov 10 12:20:47 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    97                           	psect	pa_nodes,global,class=CODE,delta=1
    98  0000                     tblptrh	equ	0xFF7
    99                           tblptrl	equ	0xFF6
   100                           tablat	equ	0xFF5
   101                           prodh	equ	0xFF4
   102                           prodl	equ	0xFF3
   103                           intcon	equ	0xFF2
   104                           intcon2	equ	0xFF1
   105                           wreg	equ	0xFE8
   106                           indf1	equ	0xFE7
   107                           fsr1h	equ	0xFE2
   108                           fsr1l	equ	0xFE1
   109                           indf2	equ	0xFDF
   110                           postinc2	equ	0xFDE
   111                           postdec2	equ	0xFDD
   112                           plusw2	equ	0xFDB
   113                           fsr2h	equ	0xFDA
   114                           fsr2l	equ	0xFD9
   115                           status	equ	0xFD8
   116                           
   117                           	psect	smallconst
   118  0008CA                     __psmallconst:
   119                           	opt stack 0
   120  0008CA                     _vscp_deviceURL:
   121                           	opt stack 0
   122  0008CA  77                 	db	119
   123  0008CB  77                 	db	119
   124  0008CC  77                 	db	119
   125  0008CD  2E                 	db	46
   126  0008CE  65                 	db	101
   127  0008CF  75                 	db	117
   128  0008D0  72                 	db	114
   129  0008D1  6F                 	db	111
   130  0008D2  73                 	db	115
   131  0008D3  6F                 	db	111
   132  0008D4  75                 	db	117
   133  0008D5  72                 	db	114
   134  0008D6  63                 	db	99
   135  0008D7  65                 	db	101
   136  0008D8  2E                 	db	46
   137  0008D9  73                 	db	115
   138  0008DA  65                 	db	101
   139  0008DB  2F                 	db	47
   140  0008DC  62                 	db	98
   141  0008DD  65                 	db	101
   142  0008DE  69                 	db	105
   143  0008DF  6A                 	db	106
   144  0008E0  69                 	db	105
   145  0008E1  6E                 	db	110
   146  0008E2  67                 	db	103
   147  0008E3  5F                 	db	95
   148  0008E4  32                 	db	50
   149  0008E5  2E                 	db	46
   150  0008E6  78                 	db	120
   151  0008E7  6D                 	db	109
   152  0008E8  6C                 	db	108
   153  0008E9  00                 	db	0
   154  0008EA                     __end_of_vscp_deviceURL:
   155                           	opt stack 0
   156  0000                     _ADCON1	set	4033
   157  0000                     _BRGCON1	set	3952
   158  0000                     _BRGCON2	set	3953
   159  0000                     _BRGCON3	set	3954
   160  0000                     _BSEL0	set	3576
   161  0000                     _CANCON	set	3951
   162  0000                     _CIOCON	set	3955
   163  0000                     _ECANCON	set	3959
   164  0000                     _EEADR	set	4009
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EECON2	set	4007
   167  0000                     _EEDATA	set	4008
   168  0000                     _INTCON2bits	set	4081
   169  0000                     _INTCONbits	set	4082
   170  0000                     _MSEL0	set	3568
   171  0000                     _MSEL1	set	3569
   172  0000                     _MSEL2	set	3570
   173  0000                     _PORTA	set	3968
   174  0000                     _PORTAbits	set	3968
   175  0000                     _PORTB	set	3969
   176  0000                     _PORTBbits	set	3969
   177  0000                     _PORTC	set	3970
   178  0000                     _PORTCbits	set	3970
   179  0000                     _RXB1CONbits	set	3920
   180  0000                     _RXF0EIDH	set	3842
   181  0000                     _RXF0EIDL	set	3843
   182  0000                     _RXF0SIDH	set	3840
   183  0000                     _RXF0SIDL	set	3841
   184  0000                     _RXF1EIDH	set	3846
   185  0000                     _RXF1EIDL	set	3847
   186  0000                     _RXF1SIDL	set	3845
   187  0000                     _RXFBCON0	set	3552
   188  0000                     _RXFBCON1	set	3553
   189  0000                     _RXFBCON2	set	3554
   190  0000                     _RXFBCON3	set	3555
   191  0000                     _RXFBCON4	set	3556
   192  0000                     _RXFBCON5	set	3557
   193  0000                     _RXFBCON6	set	3558
   194  0000                     _RXFBCON7	set	3559
   195  0000                     _RXFCON0	set	3540
   196  0000                     _RXFCON1	set	3541
   197  0000                     _RXM0EIDH	set	3866
   198  0000                     _RXM0EIDL	set	3867
   199  0000                     _RXM0SIDH	set	3864
   200  0000                     _RXM0SIDL	set	3865
   201  0000                     _RXM1EIDH	set	3870
   202  0000                     _RXM1EIDL	set	3871
   203  0000                     _RXM1SIDL	set	3869
   204  0000                     _T0CON	set	4053
   205  0000                     _T0CONbits	set	4053
   206  0000                     _TMR0H	set	4055
   207  0000                     _TMR0L	set	4054
   208  0000                     _TRISA	set	3986
   209  0000                     _TRISAbits	set	3986
   210  0000                     _TRISB	set	3987
   211  0000                     _TRISBbits	set	3987
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISCbits	set	3988
   214  0000                     _B0RXFUL	set	28935
   215  0000                     _B0TXEN	set	28610
   216  0000                     _B1RXFUL	set	29063
   217  0000                     _B1TXEN	set	28611
   218  0000                     _B2RXFUL	set	29191
   219  0000                     _B2TXEN	set	28612
   220  0000                     _B3RXFUL	set	29319
   221  0000                     _B3TXEN	set	28613
   222  0000                     _B4RXFUL	set	29447
   223  0000                     _B4TXEN	set	28614
   224  0000                     _B5RXFUL	set	29575
   225  0000                     _B5TXEN	set	28615
   226  0000                     _FIFOEMPTY	set	31655
   227  0000                     _IRXIF	set	32039
   228  0000                     _MDSEL0	set	31678
   229  0000                     _MDSEL1	set	31679
   230  0000                     _RXB0FILHIT0	set	31488
   231  0000                     _RXB0FUL	set	31495
   232  0000                     _RXB0IF	set	32032
   233  0000                     _RXB0OVFL	set	31655
   234  0000                     _RXB1IF	set	32033
   235  0000                     _RXB1OVFL	set	31654
   236  0000                     _RXF1EN	set	28321
   237  0000                     _RXM0EXIDM	set	30923
   238  0000                     _RXM1EXIDEN	set	30955
   239  0000                     _B0CON	set	3616
   240  0000                     _B1CON	set	3632
   241  0000                     _B2CON	set	3648
   242  0000                     _B3CON	set	3664
   243  0000                     _B4CON	set	3680
   244  0000                     _B5CON	set	3696
   245  0000                     _RXB0CON	set	3936
   246  0000                     _RXB1CON	set	3920
   247  0000                     _RXF1SIDH	set	3844
   248  0000                     _RXM1SIDH	set	3868
   249  0000                     _TXB0CON	set	3904
   250  0000                     _TXB1CON	set	3888
   251  0000                     _TXB2CON	set	3872
   252  0008EA  00                 	db	0	; dummy byte at the end
   253  0000                     tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           prodh	equ	0xFF4
   257                           prodl	equ	0xFF3
   258                           intcon	equ	0xFF2
   259                           intcon2	equ	0xFF1
   260                           wreg	equ	0xFE8
   261                           indf1	equ	0xFE7
   262                           fsr1h	equ	0xFE2
   263                           fsr1l	equ	0xFE1
   264                           indf2	equ	0xFDF
   265                           postinc2	equ	0xFDE
   266                           postdec2	equ	0xFDD
   267                           plusw2	equ	0xFDB
   268                           fsr2h	equ	0xFDA
   269                           fsr2l	equ	0xFD9
   270                           status	equ	0xFD8
   271                           
   272                           	psect	nvBANK0
   273  0000FF                     __pnvBANK0:
   274                           	opt stack 0
   275  0000FF                     ___DCDelay:
   276                           	opt stack 0
   277  0000FF                     	ds	1
   278                           
   279                           ; #config settings
   280  0000                     tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           prodh	equ	0xFF4
   284                           prodl	equ	0xFF3
   285                           intcon	equ	0xFF2
   286                           intcon2	equ	0xFF1
   287                           wreg	equ	0xFE8
   288                           indf1	equ	0xFE7
   289                           fsr1h	equ	0xFE2
   290                           fsr1l	equ	0xFE1
   291                           indf2	equ	0xFDF
   292                           postinc2	equ	0xFDE
   293                           postdec2	equ	0xFDD
   294                           plusw2	equ	0xFDB
   295                           fsr2h	equ	0xFDA
   296                           fsr2l	equ	0xFD9
   297                           status	equ	0xFD8
   298                           
   299                           	psect	cinit
   300  00454A                     __pcinit:
   301                           	opt stack 0
   302  00454A                     start_initialization:
   303                           	opt stack 0
   304  00454A                     __initialization:
   305                           	opt stack 0
   306                           
   307                           ; Clear objects allocated to BANK1 (20 bytes)
   308  00454A  EE01  F000         	lfsr	0,__pbssBANK1
   309  00454E  0E14               	movlw	20
   310  004550                     clear_0:
   311  004550  6AEE               	clrf	postinc0,c
   312  004552  06E8               	decf	wreg,f,c
   313  004554  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BANK0 (91 bytes)
   316  004556  EE00  F060         	lfsr	0,__pbssBANK0
   317  00455A  0E5B               	movlw	91
   318  00455C                     clear_1:
   319  00455C  6AEE               	clrf	postinc0,c
   320  00455E  06E8               	decf	wreg,f,c
   321  004560  E1FD               	bnz	clear_1
   322                           
   323                           ; Clear objects allocated to COMRAM (7 bytes)
   324  004562  EE00  F052         	lfsr	0,__pbssCOMRAM
   325  004566  0E07               	movlw	7
   326  004568                     clear_2:
   327  004568  6AEE               	clrf	postinc0,c
   328  00456A  06E8               	decf	wreg,f,c
   329  00456C  E1FD               	bnz	clear_2
   330  00456E                     end_of_initialization:
   331                           	opt stack 0
   332  00456E                     __end_of__initialization:
   333                           	opt stack 0
   334  00456E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  004570  6EF8               	movwf	tblptru,c
   336  004572  0100               	movlb	0
   337  004574  EF45  F011         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           prodh	equ	0xFF4
   343                           prodl	equ	0xFF3
   344                           intcon	equ	0xFF2
   345                           intcon2	equ	0xFF1
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           indf1	equ	0xFE7
   349                           fsr1h	equ	0xFE2
   350                           fsr1l	equ	0xFE1
   351                           indf2	equ	0xFDF
   352                           postinc2	equ	0xFDE
   353                           postdec2	equ	0xFDD
   354                           plusw2	equ	0xFDB
   355                           fsr2h	equ	0xFDA
   356                           fsr2l	equ	0xFD9
   357                           status	equ	0xFD8
   358                           
   359                           	psect	bssCOMRAM
   360  000052                     __pbssCOMRAM:
   361                           	opt stack 0
   362  000052                     _vscp_page_select:
   363                           	opt stack 0
   364  000052                     	ds	2
   365  000054                     __ECANRxFilterHitInfo:
   366                           	opt stack 0
   367  000054                     	ds	1
   368  000055                     _vscp_alarmstatus:
   369                           	opt stack 0
   370  000055                     	ds	1
   371  000056                     _vscp_initledfunc:
   372                           	opt stack 0
   373  000056                     	ds	1
   374  000057                     _vscp_probe_address:
   375                           	opt stack 0
   376  000057                     	ds	1
   377  000058                     _vscp_statuscnt:
   378                           	opt stack 0
   379  000058                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           prodh	equ	0xFF4
   385                           prodl	equ	0xFF3
   386                           intcon	equ	0xFF2
   387                           intcon2	equ	0xFF1
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           indf1	equ	0xFE7
   391                           fsr1h	equ	0xFE2
   392                           fsr1l	equ	0xFE1
   393                           indf2	equ	0xFDF
   394                           postinc2	equ	0xFDE
   395                           postdec2	equ	0xFDD
   396                           plusw2	equ	0xFDB
   397                           fsr2h	equ	0xFDA
   398                           fsr2l	equ	0xFD9
   399                           status	equ	0xFD8
   400                           
   401                           	psect	bssBANK0
   402  000060                     __pbssBANK0:
   403                           	opt stack 0
   404  000060                     _measurement_clock_10ms:
   405                           	opt stack 0
   406  000060                     	ds	4
   407  000064                     _measurement_clock_sec:
   408                           	opt stack 0
   409  000064                     	ds	4
   410  000068                     _channel_pulse_flags:
   411                           	opt stack 0
   412  000068                     	ds	2
   413  00006A                     _current_iostate:
   414                           	opt stack 0
   415  00006A                     	ds	2
   416  00006C                     _vscp_configtimer:
   417                           	opt stack 0
   418  00006C                     	ds	2
   419  00006E                     _vscp_timer:
   420                           	opt stack 0
   421  00006E                     	ds	2
   422  000070                     __IT_INT_MASK:
   423                           	opt stack 0
   424  000070                     	ds	1
   425  000071                     __IT_SAVE_BSR:
   426                           	opt stack 0
   427  000071                     	ds	1
   428  000072                     __IT_SAVE_STATUS:
   429                           	opt stack 0
   430  000072                     	ds	1
   431  000073                     __IT_SAVE_WREG:
   432                           	opt stack 0
   433  000073                     	ds	1
   434  000074                     ___DCByte:
   435                           	opt stack 0
   436  000074                     	ds	1
   437  000075                     _current_debounce:
   438                           	opt stack 0
   439  000075                     	ds	1
   440  000076                     _hours:
   441                           	opt stack 0
   442  000076                     	ds	1
   443  000077                     _minutes:
   444                           	opt stack 0
   445  000077                     	ds	1
   446  000078                     _seconds:
   447                           	opt stack 0
   448  000078                     	ds	1
   449  000079                     _vscp_guid_reset:
   450                           	opt stack 0
   451  000079                     	ds	1
   452  00007A                     _vscp_hour:
   453                           	opt stack 0
   454  00007A                     	ds	1
   455  00007B                     _vscp_initbtncnt:
   456                           	opt stack 0
   457  00007B                     	ds	1
   458  00007C                     _vscp_minute:
   459                           	opt stack 0
   460  00007C                     	ds	1
   461  00007D                     _vscp_nickname:
   462                           	opt stack 0
   463  00007D                     	ds	1
   464  00007E                     _vscp_node_state:
   465                           	opt stack 0
   466  00007E                     	ds	1
   467  00007F                     _vscp_node_substate:
   468                           	opt stack 0
   469  00007F                     	ds	1
   470  000080                     _vscp_probe_cnt:
   471                           	opt stack 0
   472  000080                     	ds	1
   473  000081                     _vscp_second:
   474                           	opt stack 0
   475  000081                     	ds	1
   476  000082                     _channel_protection_timer:
   477                           	opt stack 0
   478  000082                     	ds	20
   479  000096                     _vscp_imsg:
   480                           	opt stack 0
   481  000096                     	ds	14
   482  0000A4                     _vscp_omsg:
   483                           	opt stack 0
   484  0000A4                     	ds	13
   485  0000B1                     _debounce_cnt:
   486                           	opt stack 0
   487  0000B1                     	ds	10
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           prodh	equ	0xFF4
   493                           prodl	equ	0xFF3
   494                           intcon	equ	0xFF2
   495                           intcon2	equ	0xFF1
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           indf1	equ	0xFE7
   499                           fsr1h	equ	0xFE2
   500                           fsr1l	equ	0xFE1
   501                           indf2	equ	0xFDF
   502                           postinc2	equ	0xFDE
   503                           postdec2	equ	0xFDD
   504                           plusw2	equ	0xFDB
   505                           fsr2h	equ	0xFDA
   506                           fsr2l	equ	0xFD9
   507                           status	equ	0xFD8
   508                           
   509                           	psect	bssBANK1
   510  000100                     __pbssBANK1:
   511                           	opt stack 0
   512  000100                     _channel_pulse_timer:
   513                           	opt stack 0
   514  000100                     	ds	20
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           prodh	equ	0xFF4
   520                           prodl	equ	0xFF3
   521                           intcon	equ	0xFF2
   522                           intcon2	equ	0xFF1
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           indf1	equ	0xFE7
   526                           fsr1h	equ	0xFE2
   527                           fsr1l	equ	0xFE1
   528                           indf2	equ	0xFDF
   529                           postinc2	equ	0xFDE
   530                           postdec2	equ	0xFDD
   531                           plusw2	equ	0xFDB
   532                           fsr2h	equ	0xFDA
   533                           fsr2l	equ	0xFD9
   534                           status	equ	0xFD8
   535                           
   536                           	psect	cstackBANK1
   537  000114                     __pcstackBANK1:
   538                           	opt stack 0
   539  000114                     ??_main:
   540                           
   541                           ; 0 bytes @ 0x0
   542  000114                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           prodh	equ	0xFF4
   548                           prodl	equ	0xFF3
   549                           intcon	equ	0xFF2
   550                           intcon2	equ	0xFF1
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           indf1	equ	0xFE7
   554                           fsr1h	equ	0xFE2
   555                           fsr1l	equ	0xFE1
   556                           indf2	equ	0xFDF
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           plusw2	equ	0xFDB
   560                           fsr2h	equ	0xFDA
   561                           fsr2l	equ	0xFD9
   562                           status	equ	0xFD8
   563                           
   564                           	psect	cstackBANK0
   565  0000BB                     __pcstackBANK0:
   566                           	opt stack 0
   567  0000BB                     ??_sendVSCPFrame:
   568                           
   569                           ; 0 bytes @ 0x0
   570  0000BB                     	ds	20
   571  0000CF                     ?_SendInformationEvent:
   572                           	opt stack 0
   573  0000CF                     ?_vscp_sendHeartBeat:
   574                           	opt stack 0
   575  0000CF                     SendInformationEvent@eventClass:
   576                           	opt stack 0
   577  0000CF                     vscp_sendHeartBeat@subzone:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x14
   581  0000CF                     	ds	1
   582  0000D0                     SendInformationEvent@eventTypeId:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x15
   586  0000D0                     	ds	1
   587  0000D1                     ??_doApplicationOneSecondWork:
   588  0000D1                     ??_doActionPulseOn:
   589  0000D1                     ??_doActionPulseOff:
   590  0000D1                     ?_doActionStatusAll:
   591                           	opt stack 0
   592  0000D1                     ??_vscp_writeAppReg:
   593  0000D1                     doActionOn@ctrlreg:
   594                           	opt stack 0
   595  0000D1                     
   596                           ; 1 bytes @ 0x16
   597  0000D1                     	ds	1
   598  0000D2                     doActionOn@bEvent:
   599                           	opt stack 0
   600  0000D2                     doActionStatusAll@dmflags:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x17
   604  0000D2                     	ds	1
   605  0000D3                     doActionStatusAll@i:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x18
   609  0000D3                     	ds	3
   610  0000D6                     ??_doDM:
   611                           
   612                           ; 0 bytes @ 0x1B
   613  0000D6                     	ds	2
   614  0000D8                     vscp_writeAppReg@val_1273:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1D
   618  0000D8                     	ds	1
   619  0000D9                     vscp_writeAppReg@bInfoEvent:
   620                           	opt stack 0
   621  0000D9                     doDM@class_filter:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x1E
   625  0000D9                     	ds	1
   626  0000DA                     vscp_writeAppReg@rv:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x1F
   630  0000DA                     	ds	1
   631  0000DB                     vscp_writeAppReg@bOn:
   632                           	opt stack 0
   633  0000DB                     doDM@class_mask:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x20
   637  0000DB                     	ds	1
   638  0000DC                     vscp_writeAppReg@reg:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x21
   642  0000DC                     	ds	1
   643  0000DD                     ?_vscp_writeRegister:
   644                           	opt stack 0
   645  0000DD                     doDM@type_filter:
   646                           	opt stack 0
   647  0000DD                     vscp_writeRegister@value:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x22
   651  0000DD                     	ds	1
   652  0000DE                     ??_vscp_handleProtocolEvent:
   653  0000DE                     doDM@type_mask:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x23
   657  0000DE                     	ds	1
   658  0000DF                     _doDM$2393:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x24
   662  0000DF                     	ds	1
   663  0000E0                     _doDM$2394:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x25
   667  0000E0                     	ds	1
   668  0000E1                     _doDM$2395:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x26
   672  0000E1                     	ds	1
   673  0000E2                     _doDM$2396:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x27
   677  0000E2                     	ds	1
   678  0000E3                     _doDM$2397:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x28
   682  0000E3                     	ds	1
   683  0000E4                     _doDM$2398:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x29
   687  0000E4                     	ds	1
   688  0000E5                     _doDM$2399:
   689                           	opt stack 0
   690  0000E5                     vscp_handleProtocolEvent@page_save:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x2A
   694  0000E5                     	ds	1
   695  0000E6                     doDM@dmflags:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x2B
   699  0000E6                     	ds	1
   700  0000E7                     doDM@i:
   701                           	opt stack 0
   702  0000E7                     vscp_handleProtocolEvent@page_save_1513:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x2C
   706  0000E7                     	ds	2
   707  0000E9                     vscp_handleProtocolEvent@offset:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x2E
   711  0000E9                     	ds	1
   712  0000EA                     vscp_handleProtocolEvent@pos:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x2F
   716  0000EA                     	ds	1
   717  0000EB                     vscp_handleProtocolEvent@bytes:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x30
   721  0000EB                     	ds	1
   722  0000EC                     vscp_handleProtocolEvent@len:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x31
   726  0000EC                     	ds	1
   727  0000ED                     vscp_handleProtocolEvent@pos_1502:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x32
   731  0000ED                     	ds	1
   732  0000EE                     vscp_handleProtocolEvent@len_1503:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x33
   736  0000EE                     	ds	1
   737  0000EF                     vscp_handleProtocolEvent@bytes_this_time:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x34
   741  0000EF                     	ds	1
   742  0000F0                     vscp_handleProtocolEvent@cb:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x35
   746  0000F0                     	ds	1
   747  0000F1                     vscp_handleProtocolEvent@i_1512:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x36
   751  0000F1                     	ds	1
   752  0000F2                     vscp_handleProtocolEvent@k:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x37
   756  0000F2                     	ds	1
   757  0000F3                     vscp_handleProtocolEvent@i_1501:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x38
   761  0000F3                     	ds	1
   762  0000F4                     vscp_handleProtocolEvent@byte:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x39
   766  0000F4                     	ds	1
   767  0000F5                     doApplicationOneSecondWork@iodirections:
   768                           	opt stack 0
   769  0000F5                     vscp_handleProtocolEvent@bytes_1508:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x3A
   773  0000F5                     	ds	2
   774  0000F7                     vscp_handleProtocolEvent@i_1504:
   775                           	opt stack 0
   776  0000F7                     doApplicationOneSecondWork@data:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x3C
   780  0000F7                     	ds	1
   781  0000F8                     vscp_handleProtocolEvent@i:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x3D
   785  0000F8                     	ds	1
   786  0000F9                     vscp_handleProtocolEvent@j:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x3E
   790  0000F9                     	ds	1
   791  0000FA                     doApplicationOneSecondWork@bInput:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x3F
   795  0000FA                     	ds	1
   796  0000FB                     doApplicationOneSecondWork@bOn:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x40
   800  0000FB                     	ds	1
   801  0000FC                     doApplicationOneSecondWork@ctrlreg:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x41
   805  0000FC                     	ds	1
   806  0000FD                     doApplicationOneSecondWork@i:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x42
   810  0000FD                     	ds	1
   811  0000FE                     main@dir:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x43
   815  0000FE                     	ds	1
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           prodh	equ	0xFF4
   821                           prodl	equ	0xFF3
   822                           intcon	equ	0xFF2
   823                           intcon2	equ	0xFF1
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           indf1	equ	0xFE7
   827                           fsr1h	equ	0xFE2
   828                           fsr1l	equ	0xFE1
   829                           indf2	equ	0xFDF
   830                           postinc2	equ	0xFDE
   831                           postdec2	equ	0xFDD
   832                           plusw2	equ	0xFDB
   833                           fsr2h	equ	0xFDA
   834                           fsr2l	equ	0xFD9
   835                           status	equ	0xFD8
   836                           
   837                           	psect	cstackCOMRAM
   838  000001                     __pcstackCOMRAM:
   839                           	opt stack 0
   840  000001                     ?i1_WriteTimer0:
   841                           	opt stack 0
   842  000001                     i1WriteTimer0@timer0:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x0
   846  000001                     	ds	2
   847  000003                     i1WriteTimer0@timer:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x2
   851  000003                     	ds	2
   852  000005                     ??_interrupt_at_low_vector:
   853                           
   854                           ; 0 bytes @ 0x4
   855  000005                     	ds	3
   856  000008                     ?__CANIDToRegs:
   857                           	opt stack 0
   858  000008                     ?__RegsToCANID:
   859                           	opt stack 0
   860  000008                     ?_WriteTimer0:
   861                           	opt stack 0
   862  000008                     ?_Write_b_eep:
   863                           	opt stack 0
   864  000008                     ??_vscp_getMDF_URL:
   865  000008                     ?_Read_b_eep:
   866                           	opt stack 0
   867  000008                     ?___lbmod:
   868                           	opt stack 0
   869  000008                     ?__ECANPointBuffer:
   870                           	opt stack 0
   871  000008                     ?_memset:
   872                           	opt stack 0
   873  000008                     ?_vscp_getFamilyCode:
   874                           	opt stack 0
   875  000008                     ?_vscp_getFamilyType:
   876                           	opt stack 0
   877  000008                     ECANSetOperationMode@mode:
   878                           	opt stack 0
   879  000008                     vscp_getMatrixInfo@i:
   880                           	opt stack 0
   881  000008                     OpenTimer0@config:
   882                           	opt stack 0
   883  000008                     ___lbmod@divisor:
   884                           	opt stack 0
   885  000008                     __CANIDToRegs@ptr:
   886                           	opt stack 0
   887  000008                     __RegsToCANID@ptr:
   888                           	opt stack 0
   889  000008                     Read_b_eep@badd:
   890                           	opt stack 0
   891  000008                     Write_b_eep@badd:
   892                           	opt stack 0
   893  000008                     WriteTimer0@timer0:
   894                           	opt stack 0
   895  000008                     memset@p1:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x7
   899  000008                     	ds	1
   900  000009                     vscp_getMDF_URL@idx:
   901                           	opt stack 0
   902  000009                     ___lbmod@dividend:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x8
   906  000009                     	ds	1
   907  00000A                     ??_vscp_readAppReg:
   908  00000A                     __RegsToCANID@val:
   909                           	opt stack 0
   910  00000A                     vscp_getGUID@idx:
   911                           	opt stack 0
   912  00000A                     vscp_getUserID@idx:
   913                           	opt stack 0
   914  00000A                     vscp_getManufacturerId@idx:
   915                           	opt stack 0
   916  00000A                     Write_b_eep@bdat:
   917                           	opt stack 0
   918  00000A                     ___lbmod@counter:
   919                           	opt stack 0
   920  00000A                     WriteTimer0@timer:
   921                           	opt stack 0
   922  00000A                     memset@c:
   923                           	opt stack 0
   924  00000A                     __CANIDToRegs@val:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x9
   928  00000A                     	ds	1
   929  00000B                     __RegsToCANID@type:
   930                           	opt stack 0
   931  00000B                     __ECANPointBuffer@b:
   932                           	opt stack 0
   933  00000B                     Write_b_eep@GIE_BIT_VAL:
   934                           	opt stack 0
   935  00000B                     ___lbmod@rem:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0xA
   939  00000B                     	ds	1
   940  00000C                     ??__RegsToCANID:
   941  00000C                     ??_init_app_eeprom:
   942  00000C                     ??_vscp_readStdReg:
   943  00000C                     ?_vscp_setGUID:
   944                           	opt stack 0
   945  00000C                     ?_vscp_setManufacturerId:
   946                           	opt stack 0
   947  00000C                     ?_vscp_setUserID:
   948                           	opt stack 0
   949  00000C                     vscp_setGUID@data:
   950                           	opt stack 0
   951  00000C                     vscp_setManufacturerId@data:
   952                           	opt stack 0
   953  00000C                     vscp_writeNicknamePermanent@nickname:
   954                           	opt stack 0
   955  00000C                     vscp_setUserID@data:
   956                           	opt stack 0
   957  00000C                     vscp_setSegmentCRC@crc:
   958                           	opt stack 0
   959  00000C                     vscp_setControlByte@ctrl:
   960                           	opt stack 0
   961  00000C                     vscp_goBootloaderMode@algorithm:
   962                           	opt stack 0
   963  00000C                     __ECANPointBuffer@pt:
   964                           	opt stack 0
   965  00000C                     memset@n:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0xB
   969  00000C                     	ds	1
   970  00000D                     vscp_setGUID@idx:
   971                           	opt stack 0
   972  00000D                     vscp_setManufacturerId@idx:
   973                           	opt stack 0
   974  00000D                     vscp_setUserID@idx:
   975                           	opt stack 0
   976  00000D                     vscp_handleDropNickname@bytes:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0xC
   980  00000D                     	ds	1
   981  00000E                     __CANIDToRegs@type:
   982                           	opt stack 0
   983  00000E                     __RegsToCANID@Value:
   984                           	opt stack 0
   985  00000E                     init_app_eeprom@j:
   986                           	opt stack 0
   987  00000E                     memset@p:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0xD
   991  00000E                     	ds	1
   992  00000F                     ??__CANIDToRegs:
   993  00000F                     ?_ECANReceiveMessage:
   994                           	opt stack 0
   995  00000F                     ECANReceiveMessage@data:
   996                           	opt stack 0
   997  00000F                     init_app_eeprom@i:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0xE
  1001  00000F                     	ds	1
  1002  000010                     ??_init_app_ram:
  1003  000010                     ECANReceiveMessage@dataLen:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0xF
  1007  000010                     	ds	1
  1008  000011                     ECANReceiveMessage@msgFlags:
  1009                           	opt stack 0
  1010  000011                     __CANIDToRegs@Value:
  1011                           	opt stack 0
  1012  000011                     vscp_readAppReg@rv:
  1013                           	opt stack 0
  1014  000011                     vscp_readStdReg@code:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x10
  1018  000011                     	ds	1
  1019  000012                     ??_calculateSetFilterMask:
  1020  000012                     ?_ECANSendMessage:
  1021                           	opt stack 0
  1022  000012                     vscp_readAppReg@reg:
  1023                           	opt stack 0
  1024  000012                     ECANReceiveMessage@savedPtr:
  1025                           	opt stack 0
  1026  000012                     ECANSendMessage@id:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x11
  1030  000012                     	ds	2
  1031  000014                     ECANReceiveMessage@id:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x13
  1035  000014                     	ds	1
  1036  000015                     ECANReceiveMessage@i:
  1037                           	opt stack 0
  1038  000015                     vscp_readStdReg@code_1486:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x14
  1042  000015                     	ds	1
  1043  000016                     ECANReceiveMessage@mode:
  1044                           	opt stack 0
  1045  000016                     ECANSendMessage@data:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x15
  1049  000016                     	ds	1
  1050  000017                     ECANReceiveMessage@temp:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x16
  1054  000017                     	ds	1
  1055  000018                     ECANSendMessage@dataLen:
  1056                           	opt stack 0
  1057  000018                     ECANReceiveMessage@ptr:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x17
  1061  000018                     	ds	1
  1062  000019                     ECANSendMessage@msgFlags:
  1063                           	opt stack 0
  1064  000019                     vscp_readStdReg@idx:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x18
  1068  000019                     	ds	1
  1069  00001A                     ??_ECANSendMessage:
  1070  00001A                     ?_getCANFrame:
  1071                           	opt stack 0
  1072  00001A                     getCANFrame@pdlc:
  1073                           	opt stack 0
  1074  00001A                     vscp_readStdReg@idx_1487:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x19
  1078  00001A                     	ds	1
  1079  00001B                     getCANFrame@pdata:
  1080                           	opt stack 0
  1081  00001B                     vscp_readStdReg@rv:
  1082                           	opt stack 0
  1083  00001B                     ECANSendMessage@pb:
  1084                           	opt stack 0
  1085                           
  1086                           ; 18 bytes @ 0x1A
  1087  00001B                     	ds	1
  1088  00001C                     getCANFrame@pid:
  1089                           	opt stack 0
  1090  00001C                     vscp_readStdReg@reg:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x1B
  1094  00001C                     	ds	1
  1095  00001D                     getCANFrame@flags:
  1096                           	opt stack 0
  1097  00001D                     vscp_readRegister@reg:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x1C
  1101  00001D                     	ds	1
  1102  00001E                     ?_getVSCPFrame:
  1103                           	opt stack 0
  1104  00001E                     getVSCPFrame@pvscptype:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x1D
  1108  00001E                     	ds	1
  1109  00001F                     getVSCPFrame@pNodeId:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x1E
  1113  00001F                     	ds	1
  1114  000020                     getVSCPFrame@pPriority:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x1F
  1118  000020                     	ds	1
  1119  000021                     getVSCPFrame@pSize:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x20
  1123  000021                     	ds	1
  1124  000022                     getVSCPFrame@pData:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x21
  1128  000022                     	ds	1
  1129  000023                     ??_getVSCPFrame:
  1130                           
  1131                           ; 0 bytes @ 0x22
  1132  000023                     	ds	4
  1133  000027                     getVSCPFrame@pvscpclass:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x26
  1137  000027                     	ds	1
  1138  000028                     getVSCPFrame@id:
  1139                           	opt stack 0
  1140                           
  1141                           ; 4 bytes @ 0x27
  1142  000028                     	ds	4
  1143  00002C                     vscp_getEvent@rv:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x2B
  1147  00002C                     	ds	1
  1148  00002D                     ECANSendMessage@mode:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x2C
  1152  00002D                     	ds	1
  1153  00002E                     ECANSendMessage@buffers:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x2D
  1157  00002E                     	ds	1
  1158  00002F                     ECANSendMessage@j:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x2E
  1162  00002F                     	ds	1
  1163  000030                     ECANSendMessage@tempBSEL0:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x2F
  1167  000030                     	ds	1
  1168  000031                     ECANSendMessage@tempPtr:
  1169                           	opt stack 0
  1170  000031                     calculateSetFilterMask@rowmask:
  1171                           	opt stack 0
  1172                           
  1173                           ; 4 bytes @ 0x30
  1174  000031                     	ds	2
  1175  000033                     ECANSendMessage@temp:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x32
  1179  000033                     	ds	1
  1180  000034                     ECANSendMessage@i:
  1181                           	opt stack 0
  1182  000034                     init_app_ram@dir:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x33
  1186  000034                     	ds	1
  1187  000035                     init_app_ram@i:
  1188                           	opt stack 0
  1189  000035                     calculateSetFilterMask@lastOID:
  1190                           	opt stack 0
  1191  000035                     ECANSendMessage@ptr:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x34
  1195  000035                     	ds	1
  1196  000036                     ?_vscp_writeStdReg:
  1197                           	opt stack 0
  1198  000036                     vscp_writeStdReg@value:
  1199                           	opt stack 0
  1200  000036                     calculateSetFilterMask@mask:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x35
  1204  000036                     	ds	1
  1205  000037                     ??_vscp_writeStdReg:
  1206  000037                     ?_sendCANFrame:
  1207                           	opt stack 0
  1208  000037                     sendCANFrame@id:
  1209                           	opt stack 0
  1210                           
  1211                           ; 4 bytes @ 0x36
  1212  000037                     	ds	3
  1213  00003A                     calculateSetFilterMask@filter:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x39
  1217  00003A                     	ds	1
  1218  00003B                     sendCANFrame@dlc:
  1219                           	opt stack 0
  1220  00003B                     vscp_writeStdReg@rv:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x3A
  1224  00003B                     	ds	1
  1225  00003C                     vscp_writeStdReg@reg:
  1226                           	opt stack 0
  1227  00003C                     sendCANFrame@pdata:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x3B
  1231  00003C                     	ds	2
  1232  00003E                     calculateSetFilterMask@rowfilter:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x3D
  1236  00003E                     	ds	1
  1237  00003F                     ?_sendVSCPFrame:
  1238                           	opt stack 0
  1239  00003F                     sendVSCPFrame@vscpclass:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x3E
  1243  00003F                     	ds	2
  1244  000041                     sendVSCPFrame@vscptype:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x40
  1248  000041                     	ds	1
  1249  000042                     sendVSCPFrame@nodeid:
  1250                           	opt stack 0
  1251  000042                     calculateSetFilterMask@j:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x41
  1255  000042                     	ds	1
  1256  000043                     sendVSCPFrame@priority:
  1257                           	opt stack 0
  1258  000043                     calculateSetFilterMask@i:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x42
  1262  000043                     	ds	1
  1263  000044                     sendVSCPFrame@size:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x43
  1267  000044                     	ds	1
  1268  000045                     sendVSCPFrame@pData:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x44
  1272  000045                     	ds	2
  1273  000047                     sendVSCPFrame@id:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x46
  1277  000047                     	ds	4
  1278  00004B                     SendInformationEvent@data:
  1279                           	opt stack 0
  1280                           
  1281                           ; 3 bytes @ 0x4A
  1282  00004B                     	ds	1
  1283  00004C                     ??_vscp_newNodeOnline:
  1284  00004C                     vscp_sendHeartBeat@zone:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x4B
  1288  00004C                     	ds	1
  1289  00004D                     ??_vscp_doOneSecondWork:
  1290                           
  1291                           ; 0 bytes @ 0x4C
  1292  00004D                     	ds	1
  1293  00004E                     SendInformationEvent@idx:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x4D
  1297  00004E                     	ds	1
  1298  00004F                     ?_doActionOff:
  1299                           	opt stack 0
  1300  00004F                     ?_doActionOn:
  1301                           	opt stack 0
  1302  00004F                     ?_doActionPulseOn:
  1303                           	opt stack 0
  1304  00004F                     ?_doActionPulseOff:
  1305                           	opt stack 0
  1306  00004F                     ?_doActionStatus:
  1307                           	opt stack 0
  1308  00004F                     ?_doActionToggle:
  1309                           	opt stack 0
  1310  00004F                     ?_vscp_writeAppReg:
  1311                           	opt stack 0
  1312  00004F                     vscp_writeAppReg@val:
  1313                           	opt stack 0
  1314  00004F                     doActionOn@arg:
  1315                           	opt stack 0
  1316  00004F                     doActionOff@arg:
  1317                           	opt stack 0
  1318  00004F                     doActionPulseOn@arg:
  1319                           	opt stack 0
  1320  00004F                     doActionPulseOff@arg:
  1321                           	opt stack 0
  1322  00004F                     doActionToggle@arg:
  1323                           	opt stack 0
  1324  00004F                     doActionStatus@arg:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x4E
  1328  00004F                     	ds	1
  1329  000050                     ??_doActionOn:
  1330  000050                     doActionOff@ctrlreg:
  1331                           	opt stack 0
  1332  000050                     doActionPulseOn@ctrlreg:
  1333                           	opt stack 0
  1334  000050                     doActionPulseOff@ctrlreg:
  1335                           	opt stack 0
  1336  000050                     doActionToggle@ctrlreg:
  1337                           	opt stack 0
  1338  000050                     doActionStatus@ctrlreg:
  1339                           	opt stack 0
  1340  000050                     vscp_writeRegister@reg:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x4F
  1344  000050                     	ds	1
  1345  000051                     doActionOff@bEvent:
  1346                           	opt stack 0
  1347  000051                     doActionPulseOn@bEvent:
  1348                           	opt stack 0
  1349  000051                     doActionPulseOff@bEvent:
  1350                           	opt stack 0
  1351  000051                     doActionToggle@bOn:
  1352                           	opt stack 0
  1353  000051                     doActionStatus@bOn:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x50
  1357  000051                     	ds	1
  1358  000052                     tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           prodh	equ	0xFF4
  1363                           prodl	equ	0xFF3
  1364                           intcon	equ	0xFF2
  1365                           intcon2	equ	0xFF1
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           indf1	equ	0xFE7
  1369                           fsr1h	equ	0xFE2
  1370                           fsr1l	equ	0xFE1
  1371                           indf2	equ	0xFDF
  1372                           postinc2	equ	0xFDE
  1373                           postdec2	equ	0xFDD
  1374                           plusw2	equ	0xFDB
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379                           ; 0 bytes @ 0x51
  1380 ;;
  1381 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1382 ;;
  1383 ;; *************** function _main *****************
  1384 ;; Defined at:
  1385 ;;		line 200 in file "../main.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  dir             1   67[BANK0 ] unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;		None               void
  1392 ;; Registers used:
  1393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : F/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1399 ;;      Params:         0       0       0       0       0       0       0
  1400 ;;      Locals:         0       1       0       0       0       0       0
  1401 ;;      Temps:          0       0       2       0       0       0       0
  1402 ;;      Totals:         0       1       2       0       0       0       0
  1403 ;;Total ram usage:        3 bytes
  1404 ;; Hardware stack levels required when called:   10
  1405 ;; This function calls:
  1406 ;;		_init
  1407 ;;		_vscp_check_pstorage
  1408 ;;		_init_app_eeprom
  1409 ;;		_init_app_ram
  1410 ;;		_vscp_init
  1411 ;;		_Busy_eep
  1412 ;;		_Write_b_eep
  1413 ;;		_vscp_getEvent
  1414 ;;		_vscp_goActiveState
  1415 ;;		_vscp_handleProbeState
  1416 ;;		_vscp_handleProtocolEvent
  1417 ;;		_doDM
  1418 ;;		_Read_b_eep
  1419 ;;		_SendInformationEvent
  1420 ;;		_vscp_error
  1421 ;;		_vscp_doOneSecondWork
  1422 ;;		_doApplicationOneSecondWork
  1423 ;;		_doWork
  1424 ;; This function is called by:
  1425 ;;		Startup code after reset
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text0
  1430  00228A                     __ptext0:
  1431                           	opt stack 0
  1432  00228A                     _main:
  1433                           	opt stack 20
  1434                           
  1435                           ;main.c: 202: init();
  1436                           
  1437                           ;incstack = 0
  1438                           ;incstack = 0
  1439  00228A  EC32  F022         	call	_init	;wreg free
  1440                           
  1441                           ;main.c: 206: if ( !vscp_check_pstorage() ) {
  1442  00228E  EC9B  F023         	call	_vscp_check_pstorage	;wreg free
  1443  002292  0900               	iorlw	0
  1444  002294  B4D8               	btfsc	status,2,c
  1445                           
  1446                           ;main.c: 209: init_app_eeprom();
  1447  002296  ECFD  F01A         	call	_init_app_eeprom	;wreg free
  1448                           
  1449                           ;main.c: 211: }
  1450                           ;main.c: 214: init_app_ram();
  1451  00229A  EC22  F015         	call	_init_app_ram	;wreg free
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 217: vscp_init();
  1455  00229E  EC10  F022         	call	_vscp_init	;wreg free
  1456  0022A2                     l425:
  1457                           
  1458                           ; BSR set to: 0
  1459  0022A2  0004               	clrwdt		;# 
  1460                           
  1461                           ;main.c: 223: if ( ( vscp_initbtncnt > 250 ) &&
  1462                           ;main.c: 224: ( 0x01 != vscp_node_state ) ) {
  1463  0022A4  0EFA               	movlw	250
  1464  0022A6  0100               	movlb	0	; () banked
  1465  0022A8  657B               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1466  0022AA  D00E               	goto	l12116
  1467                           
  1468                           ; BSR set to: 0
  1469  0022AC  057E               	decf	_vscp_node_state& (0+255),w,b
  1470  0022AE  E00C               	bz	l12116
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 227: vscp_nickname = 0xff;
  1474  0022B0  697D               	setf	_vscp_nickname& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 228: (Busy_eep(), Write_b_eep(0x01,0xff));
  1478  0022B2  ECB7  F024         	call	_Busy_eep	;wreg free
  1479  0022B6  6A09               	clrf	?_Write_b_eep+1,c
  1480  0022B8  0E01               	movlw	1
  1481  0022BA  6E08               	movwf	?_Write_b_eep,c
  1482  0022BC  0EFF               	movlw	255
  1483  0022BE  680A               	setf	?_Write_b_eep+2,c
  1484  0022C0  EC73  F022         	call	_Write_b_eep	;wreg free
  1485                           
  1486                           ;main.c: 229: vscp_init();
  1487  0022C4  EC10  F022         	call	_vscp_init	;wreg free
  1488  0022C8                     l12116:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 231: }
  1492                           ;main.c: 234: vscp_imsg.flags = 0;
  1493  0022C8  6B96               	clrf	_vscp_imsg& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 235: vscp_getEvent();
  1497  0022CA  EC14  F023         	call	_vscp_getEvent	;wreg free
  1498                           
  1499                           ;main.c: 237: switch ( vscp_node_state ) {
  1500  0022CE  D19B               	goto	l12286
  1501  0022D0                     l12120:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 242: if (0xff == vscp_nickname) {
  1505  0022D0  297D               	incf	_vscp_nickname& (0+255),w,b
  1506  0022D2  E103               	bnz	l12124
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 244: vscp_node_state = 0x01;
  1510  0022D4  0E01               	movlw	1
  1511  0022D6  6F7E               	movwf	_vscp_node_state& (0+255),b
  1512                           
  1513                           ;main.c: 245: }
  1514  0022D8  D1A6               	goto	l12288
  1515  0022DA                     l12124:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 246: else {
  1519                           ;main.c: 248: vscp_node_state = 0x03;
  1520  0022DA  0E03               	movlw	3
  1521  0022DC  6F7E               	movwf	_vscp_node_state& (0+255),b
  1522  0022DE                     l12126:
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;main.c: 249: vscp_goActiveState();
  1526  0022DE  ECCE  F023         	call	_vscp_goActiveState	;wreg free
  1527  0022E2  D1A1               	goto	l12288
  1528  0022E4                     l12128:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 254: vscp_handleProbeState();
  1532  0022E4  EC46  F020         	call	_vscp_handleProbeState	;wreg free
  1533                           
  1534                           ;main.c: 255: break;
  1535  0022E8  D19E               	goto	l12288
  1536  0022EA                     l434:
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 264: if (vscp_imsg.flags & 0x80) {
  1540  0022EA  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1541  0022EC  D008               	goto	l12138
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 266: if ( 0 == vscp_imsg.vscp_class ) {
  1545  0022EE  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1546  0022F0  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1547  0022F2  E103               	bnz	l12136
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 269: vscp_handleProtocolEvent();
  1551  0022F4  EC39  F00E         	call	_vscp_handleProtocolEvent	;wreg free
  1552                           
  1553                           ;main.c: 271: }
  1554  0022F8  D002               	goto	l12138
  1555  0022FA                     l12136:
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;main.c: 272: else {
  1559                           ;main.c: 273: doDM();
  1560  0022FA  EC80  F016         	call	_doDM	;wreg free
  1561  0022FE                     l12138:
  1562                           
  1563                           ;main.c: 274: }
  1564                           ;main.c: 276: }
  1565                           ;main.c: 278: if ( measurement_clock_10ms >= 10 ) {
  1566  0022FE  0E0A               	movlw	10
  1567  002300  0100               	movlb	0	; () banked
  1568  002302  5D60               	subwf	_measurement_clock_10ms& (0+255),w,b	;volatile
  1569  002304  0E00               	movlw	0
  1570  002306  5961               	subwfb	(_measurement_clock_10ms+1)& (0+255),w,b	;volatile
  1571  002308  0E00               	movlw	0
  1572  00230A  5962               	subwfb	(_measurement_clock_10ms+2)& (0+255),w,b	;volatile
  1573  00230C  0E00               	movlw	0
  1574  00230E  5963               	subwfb	(_measurement_clock_10ms+3)& (0+255),w,b	;volatile
  1575  002310  E201 D189          	bnc	l12288
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 280: uint8_t dir =
  1579                           ;main.c: 281: ( Read_b_eep(0x43 + 12) << 8 ) +
  1580                           ;main.c: 283: Read_b_eep(0x43 + 13);
  1581  002314  6A09               	clrf	?_Read_b_eep+1,c
  1582  002316  0E4F               	movlw	79
  1583  002318  6E08               	movwf	?_Read_b_eep,c
  1584  00231A  EC83  F024         	call	_Read_b_eep	;wreg free
  1585  00231E  6A09               	clrf	?_Read_b_eep+1,c
  1586  002320  0E50               	movlw	80
  1587  002322  6E08               	movwf	?_Read_b_eep,c
  1588  002324  EC83  F024         	call	_Read_b_eep	;wreg free
  1589  002328  0100               	movlb	0	; () banked
  1590  00232A  6FFE               	movwf	main@dir& (0+255),b
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 286: measurement_clock_10ms = 0;
  1594  00232C  6B60               	clrf	_measurement_clock_10ms& (0+255),b	;volatile
  1595  00232E  6B61               	clrf	(_measurement_clock_10ms+1)& (0+255),b	;volatile
  1596  002330  6B62               	clrf	(_measurement_clock_10ms+2)& (0+255),b	;volatile
  1597  002332  6B63               	clrf	(_measurement_clock_10ms+3)& (0+255),b	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;main.c: 288: if ( ( dir & ( 1 << current_debounce ) ) &&
  1601                           ;main.c: 289: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1602                           ;main.c: 292: 0x40 ) &&
  1603                           ;main.c: 293: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1604                           ;main.c: 296: 0x80 ) ) {
  1605  002334  C075  F114         	movff	_current_debounce,??_main
  1606  002338  0E01               	movlw	1
  1607  00233A  0101               	movlb	1	; () banked
  1608  00233C  6F15               	movwf	(??_main+1)& (0+255),b
  1609  00233E  2B14               	incf	??_main& (0+255),f,b
  1610  002340  D002               	goto	u15604
  1611  002342                     u15605:
  1612  002342  90D8               	bcf	status,0,c
  1613  002344  3715               	rlcf	(??_main+1)& (0+255),f,b
  1614  002346                     u15604:
  1615  002346  2F14               	decfsz	??_main& (0+255),f,b
  1616  002348  D7FC               	goto	u15605
  1617  00234A  5115               	movf	(??_main+1)& (0+255),w,b
  1618  00234C  0100               	movlb	0	; () banked
  1619  00234E  15FE               	andwf	main@dir& (0+255),w,b
  1620  002350  E101 D14D          	bz	l12276
  1621                           
  1622                           ; BSR set to: 0
  1623  002354  0E65               	movlw	101
  1624  002356  2575               	addwf	_current_debounce& (0+255),w,b
  1625  002358  6E08               	movwf	?_Read_b_eep,c
  1626  00235A  6A09               	clrf	?_Read_b_eep+1,c
  1627  00235C  0E00               	movlw	0
  1628  00235E  2209               	addwfc	?_Read_b_eep+1,f,c
  1629  002360  EC83  F024         	call	_Read_b_eep	;wreg free
  1630  002364  0101               	movlb	1	; () banked
  1631  002366  6F14               	movwf	??_main& (0+255),b
  1632  002368  AD14               	btfss	??_main& (0+255),6,b
  1633  00236A  D141               	goto	l12276
  1634                           
  1635                           ; BSR set to: 1
  1636  00236C  0E65               	movlw	101
  1637  00236E  0100               	movlb	0	; () banked
  1638  002370  2575               	addwf	_current_debounce& (0+255),w,b
  1639  002372  6E08               	movwf	?_Read_b_eep,c
  1640  002374  6A09               	clrf	?_Read_b_eep+1,c
  1641  002376  0E00               	movlw	0
  1642  002378  2209               	addwfc	?_Read_b_eep+1,f,c
  1643  00237A  EC83  F024         	call	_Read_b_eep	;wreg free
  1644  00237E  0101               	movlb	1	; () banked
  1645  002380  6F14               	movwf	??_main& (0+255),b
  1646  002382  BF14               	btfsc	??_main& (0+255),7,b
  1647  002384  D117               	goto	l12274
  1648  002386  D133               	goto	l12276
  1649  002388                     l441:
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;main.c: 301: if (!PORTBbits.RB0) {
  1653  002388  B081               	btfsc	3969,0,c	;volatile
  1654  00238A  D019               	goto	l12162
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 302: debounce_cnt[ current_debounce ]++;
  1658  00238C  5175               	movf	_current_debounce& (0+255),w,b
  1659                           
  1660                           ;main.c: 303: if (debounce_cnt[ current_debounce ] > 3) {
  1661  00238E  D97C               	call	PL8	;call to abstracted procedure
  1662  002390  64DF               	cpfsgt	indf2,c
  1663  002392  D12D               	goto	l12276
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 305: debounce_cnt[ current_debounce ] = 0;
  1667  002394  5175               	movf	_current_debounce& (0+255),w,b
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;main.c: 308: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1671                           ;main.c: 311: 0x04) {
  1672  002396  D96D               	call	PL4	;call to abstracted procedure
  1673  002398  EC83  F024         	call	_Read_b_eep	;wreg free
  1674  00239C  0101               	movlb	1	; () banked
  1675  00239E  6F14               	movwf	??_main& (0+255),b
  1676  0023A0  A514               	btfss	??_main& (0+255),2,b
  1677  0023A2  D009               	goto	l12160
  1678                           
  1679                           ; BSR set to: 1
  1680                           ;main.c: 312: SendInformationEvent(current_debounce,
  1681                           ;main.c: 313: 20,
  1682                           ;main.c: 314: 3);
  1683  0023A4  0E14               	movlw	20
  1684  0023A6  0100               	movlb	0	; () banked
  1685  0023A8  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1686  0023AA  0E03               	movlw	3
  1687  0023AC  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1688  0023AE  5175               	movf	_current_debounce& (0+255),w,b
  1689  0023B0  ECC0  F021         	call	_SendInformationEvent
  1690                           
  1691                           ;main.c: 315: } else {
  1692  0023B4  D11C               	goto	l12276
  1693  0023B6                     l12160:
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 316: SendInformationEvent(current_debounce,
  1697                           ;main.c: 317: 30,
  1698                           ;main.c: 318: 5);
  1699  0023B6  D971               	call	PL18	;call to abstracted procedure
  1700  0023B8  ECC0  F021         	call	_SendInformationEvent
  1701  0023BC  D118               	goto	l12276
  1702  0023BE                     l12162:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 322: debounce_cnt[ current_debounce ] = 0;
  1706  0023BE  5175               	movf	_current_debounce& (0+255),w,b
  1707  0023C0  0FB1               	addlw	low _debounce_cnt
  1708  0023C2  6ED9               	movwf	fsr2l,c
  1709  0023C4  6ADA               	clrf	fsr2h,c
  1710  0023C6  6ADF               	clrf	indf2,c
  1711  0023C8  D112               	goto	l12276
  1712  0023CA                     l448:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 327: if (!PORTBbits.RB1) {
  1716  0023CA  B281               	btfsc	3969,1,c	;volatile
  1717  0023CC  D7F8               	goto	l12162
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 328: debounce_cnt[ current_debounce ]++;
  1721  0023CE  5175               	movf	_current_debounce& (0+255),w,b
  1722                           
  1723                           ;main.c: 329: if (debounce_cnt[ current_debounce ] > 3) {
  1724  0023D0  D95B               	call	PL8	;call to abstracted procedure
  1725  0023D2  64DF               	cpfsgt	indf2,c
  1726  0023D4  D10C               	goto	l12276
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 331: debounce_cnt[ current_debounce ] = 0;
  1730  0023D6  5175               	movf	_current_debounce& (0+255),w,b
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 334: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1734                           ;main.c: 337: 0x04) {
  1735  0023D8  D94C               	call	PL4	;call to abstracted procedure
  1736  0023DA  EC83  F024         	call	_Read_b_eep	;wreg free
  1737  0023DE  0101               	movlb	1	; () banked
  1738  0023E0  6F14               	movwf	??_main& (0+255),b
  1739  0023E2  A514               	btfss	??_main& (0+255),2,b
  1740  0023E4  D009               	goto	l12172
  1741                           
  1742                           ; BSR set to: 1
  1743                           ;main.c: 338: SendInformationEvent(current_debounce,
  1744                           ;main.c: 339: 20,
  1745                           ;main.c: 340: 3);
  1746  0023E6  0E14               	movlw	20
  1747  0023E8  0100               	movlb	0	; () banked
  1748  0023EA  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1749  0023EC  0E03               	movlw	3
  1750  0023EE  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1751  0023F0  5175               	movf	_current_debounce& (0+255),w,b
  1752  0023F2  ECC0  F021         	call	_SendInformationEvent
  1753                           
  1754                           ;main.c: 341: } else {
  1755  0023F6  D0FB               	goto	l12276
  1756  0023F8                     l12172:
  1757                           
  1758                           ; BSR set to: 1
  1759                           ;main.c: 342: SendInformationEvent(current_debounce,
  1760                           ;main.c: 343: 30,
  1761                           ;main.c: 344: 5);
  1762  0023F8  D950               	call	PL18	;call to abstracted procedure
  1763  0023FA  ECC0  F021         	call	_SendInformationEvent
  1764  0023FE  D0F7               	goto	l12276
  1765  002400                     l454:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 353: if (!PORTCbits.RC3) {
  1769  002400  B682               	btfsc	3970,3,c	;volatile
  1770  002402  D7DD               	goto	l12162
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 354: debounce_cnt[ current_debounce ]++;
  1774  002404  5175               	movf	_current_debounce& (0+255),w,b
  1775                           
  1776                           ;main.c: 355: if (debounce_cnt[ current_debounce ] > 3) {
  1777  002406  D940               	call	PL8	;call to abstracted procedure
  1778  002408  64DF               	cpfsgt	indf2,c
  1779  00240A  D0F1               	goto	l12276
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 357: debounce_cnt[ current_debounce ] = 0;
  1783  00240C  5175               	movf	_current_debounce& (0+255),w,b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 360: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1787                           ;main.c: 363: 0x04) {
  1788  00240E  D931               	call	PL4	;call to abstracted procedure
  1789  002410  EC83  F024         	call	_Read_b_eep	;wreg free
  1790  002414  0101               	movlb	1	; () banked
  1791  002416  6F14               	movwf	??_main& (0+255),b
  1792  002418  A514               	btfss	??_main& (0+255),2,b
  1793  00241A  D009               	goto	l12184
  1794                           
  1795                           ; BSR set to: 1
  1796                           ;main.c: 364: SendInformationEvent(current_debounce,
  1797                           ;main.c: 365: 20,
  1798                           ;main.c: 366: 3);
  1799  00241C  0E14               	movlw	20
  1800  00241E  0100               	movlb	0	; () banked
  1801  002420  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1802  002422  0E03               	movlw	3
  1803  002424  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1804  002426  5175               	movf	_current_debounce& (0+255),w,b
  1805  002428  ECC0  F021         	call	_SendInformationEvent
  1806                           
  1807                           ;main.c: 367: } else {
  1808  00242C  D0E0               	goto	l12276
  1809  00242E                     l12184:
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;main.c: 368: SendInformationEvent(current_debounce,
  1813                           ;main.c: 369: 30,
  1814                           ;main.c: 370: 5);
  1815  00242E  D935               	call	PL18	;call to abstracted procedure
  1816  002430  ECC0  F021         	call	_SendInformationEvent
  1817  002434  D0DC               	goto	l12276
  1818  002436                     l460:
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 379: if (!PORTCbits.RC4) {
  1822  002436  B882               	btfsc	3970,4,c	;volatile
  1823  002438  D7C2               	goto	l12162
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 380: debounce_cnt[ current_debounce ]++;
  1827  00243A  5175               	movf	_current_debounce& (0+255),w,b
  1828                           
  1829                           ;main.c: 381: if (debounce_cnt[ current_debounce ] > 3) {
  1830  00243C  D925               	call	PL8	;call to abstracted procedure
  1831  00243E  64DF               	cpfsgt	indf2,c
  1832  002440  D0D6               	goto	l12276
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 383: debounce_cnt[ current_debounce ] = 0;
  1836  002442  5175               	movf	_current_debounce& (0+255),w,b
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 386: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1840                           ;main.c: 389: 0x04) {
  1841  002444  D916               	call	PL4	;call to abstracted procedure
  1842  002446  EC83  F024         	call	_Read_b_eep	;wreg free
  1843  00244A  0101               	movlb	1	; () banked
  1844  00244C  6F14               	movwf	??_main& (0+255),b
  1845  00244E  A514               	btfss	??_main& (0+255),2,b
  1846  002450  D009               	goto	l12196
  1847                           
  1848                           ; BSR set to: 1
  1849                           ;main.c: 390: SendInformationEvent(current_debounce,
  1850                           ;main.c: 391: 20,
  1851                           ;main.c: 392: 3);
  1852  002452  0E14               	movlw	20
  1853  002454  0100               	movlb	0	; () banked
  1854  002456  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1855  002458  0E03               	movlw	3
  1856  00245A  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1857  00245C  5175               	movf	_current_debounce& (0+255),w,b
  1858  00245E  ECC0  F021         	call	_SendInformationEvent
  1859                           
  1860                           ;main.c: 393: } else {
  1861  002462  D0C5               	goto	l12276
  1862  002464                     l12196:
  1863                           
  1864                           ; BSR set to: 1
  1865                           ;main.c: 394: SendInformationEvent(current_debounce,
  1866                           ;main.c: 395: 30,
  1867                           ;main.c: 396: 5);
  1868  002464  D91A               	call	PL18	;call to abstracted procedure
  1869  002466  ECC0  F021         	call	_SendInformationEvent
  1870  00246A  D0C1               	goto	l12276
  1871  00246C                     l466:
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;main.c: 405: if (!PORTCbits.RC5) {
  1875  00246C  BA82               	btfsc	3970,5,c	;volatile
  1876  00246E  D7A7               	goto	l12162
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;main.c: 406: debounce_cnt[ current_debounce ]++;
  1880  002470  5175               	movf	_current_debounce& (0+255),w,b
  1881                           
  1882                           ;main.c: 407: if (debounce_cnt[ current_debounce ] > 3) {
  1883  002472  D90A               	call	PL8	;call to abstracted procedure
  1884  002474  64DF               	cpfsgt	indf2,c
  1885  002476  D0BB               	goto	l12276
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 409: debounce_cnt[ current_debounce ] = 0;
  1889  002478  5175               	movf	_current_debounce& (0+255),w,b
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 412: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1893                           ;main.c: 415: 0x04) {
  1894  00247A  D8FB               	call	PL4	;call to abstracted procedure
  1895  00247C  EC83  F024         	call	_Read_b_eep	;wreg free
  1896  002480  0101               	movlb	1	; () banked
  1897  002482  6F14               	movwf	??_main& (0+255),b
  1898  002484  A514               	btfss	??_main& (0+255),2,b
  1899  002486  D009               	goto	l12208
  1900                           
  1901                           ; BSR set to: 1
  1902                           ;main.c: 416: SendInformationEvent(current_debounce,
  1903                           ;main.c: 417: 20,
  1904                           ;main.c: 418: 3);
  1905  002488  0E14               	movlw	20
  1906  00248A  0100               	movlb	0	; () banked
  1907  00248C  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1908  00248E  0E03               	movlw	3
  1909  002490  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1910  002492  5175               	movf	_current_debounce& (0+255),w,b
  1911  002494  ECC0  F021         	call	_SendInformationEvent
  1912                           
  1913                           ;main.c: 419: } else {
  1914  002498  D0AA               	goto	l12276
  1915  00249A                     l12208:
  1916                           
  1917                           ; BSR set to: 1
  1918                           ;main.c: 420: SendInformationEvent(current_debounce,
  1919                           ;main.c: 421: 30,
  1920                           ;main.c: 422: 5);
  1921  00249A  D8FF               	call	PL18	;call to abstracted procedure
  1922  00249C  ECC0  F021         	call	_SendInformationEvent
  1923  0024A0  D0A6               	goto	l12276
  1924  0024A2                     l472:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 431: if (!PORTCbits.RC6) {
  1928  0024A2  BC82               	btfsc	3970,6,c	;volatile
  1929  0024A4  D78C               	goto	l12162
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 432: debounce_cnt[ current_debounce ]++;
  1933  0024A6  5175               	movf	_current_debounce& (0+255),w,b
  1934                           
  1935                           ;main.c: 433: if (debounce_cnt[ current_debounce ] > 3) {
  1936  0024A8  D8EF               	call	PL8	;call to abstracted procedure
  1937  0024AA  64DF               	cpfsgt	indf2,c
  1938  0024AC  D0A0               	goto	l12276
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 435: debounce_cnt[ current_debounce ] = 0;
  1942  0024AE  5175               	movf	_current_debounce& (0+255),w,b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 438: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1946                           ;main.c: 441: 0x04) {
  1947  0024B0  D8E0               	call	PL4	;call to abstracted procedure
  1948  0024B2  EC83  F024         	call	_Read_b_eep	;wreg free
  1949  0024B6  0101               	movlb	1	; () banked
  1950  0024B8  6F14               	movwf	??_main& (0+255),b
  1951  0024BA  A514               	btfss	??_main& (0+255),2,b
  1952  0024BC  D009               	goto	l12220
  1953                           
  1954                           ; BSR set to: 1
  1955                           ;main.c: 442: SendInformationEvent(current_debounce,
  1956                           ;main.c: 443: 20,
  1957                           ;main.c: 444: 3);
  1958  0024BE  0E14               	movlw	20
  1959  0024C0  0100               	movlb	0	; () banked
  1960  0024C2  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  1961  0024C4  0E03               	movlw	3
  1962  0024C6  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1963  0024C8  5175               	movf	_current_debounce& (0+255),w,b
  1964  0024CA  ECC0  F021         	call	_SendInformationEvent
  1965                           
  1966                           ;main.c: 445: } else {
  1967  0024CE  D08F               	goto	l12276
  1968  0024D0                     l12220:
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;main.c: 446: SendInformationEvent(current_debounce,
  1972                           ;main.c: 447: 30,
  1973                           ;main.c: 448: 5);
  1974  0024D0  D8E4               	call	PL18	;call to abstracted procedure
  1975  0024D2  ECC0  F021         	call	_SendInformationEvent
  1976  0024D6  D08B               	goto	l12276
  1977  0024D8                     l478:
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;main.c: 457: if (!PORTCbits.RC7) {
  1981  0024D8  BE82               	btfsc	3970,7,c	;volatile
  1982  0024DA  D771               	goto	l12162
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;main.c: 458: debounce_cnt[ current_debounce ]++;
  1986  0024DC  5175               	movf	_current_debounce& (0+255),w,b
  1987                           
  1988                           ;main.c: 459: if (debounce_cnt[ current_debounce ] > 3) {
  1989  0024DE  D8D4               	call	PL8	;call to abstracted procedure
  1990  0024E0  64DF               	cpfsgt	indf2,c
  1991  0024E2  D085               	goto	l12276
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 461: debounce_cnt[ current_debounce ] = 0;
  1995  0024E4  5175               	movf	_current_debounce& (0+255),w,b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 464: if (Read_b_eep(0x43 + 24 + current_debounce) &
  1999                           ;main.c: 467: 0x04) {
  2000  0024E6  D8C5               	call	PL4	;call to abstracted procedure
  2001  0024E8  EC83  F024         	call	_Read_b_eep	;wreg free
  2002  0024EC  0101               	movlb	1	; () banked
  2003  0024EE  6F14               	movwf	??_main& (0+255),b
  2004  0024F0  A514               	btfss	??_main& (0+255),2,b
  2005  0024F2  D009               	goto	l12232
  2006                           
  2007                           ; BSR set to: 1
  2008                           ;main.c: 468: SendInformationEvent(current_debounce,
  2009                           ;main.c: 469: 20,
  2010                           ;main.c: 470: 3);
  2011  0024F4  0E14               	movlw	20
  2012  0024F6  0100               	movlb	0	; () banked
  2013  0024F8  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2014  0024FA  0E03               	movlw	3
  2015  0024FC  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2016  0024FE  5175               	movf	_current_debounce& (0+255),w,b
  2017  002500  ECC0  F021         	call	_SendInformationEvent
  2018                           
  2019                           ;main.c: 471: } else {
  2020  002504  D074               	goto	l12276
  2021  002506                     l12232:
  2022                           
  2023                           ; BSR set to: 1
  2024                           ;main.c: 472: SendInformationEvent(current_debounce,
  2025                           ;main.c: 473: 30,
  2026                           ;main.c: 474: 5);
  2027  002506  D8C9               	call	PL18	;call to abstracted procedure
  2028  002508  ECC0  F021         	call	_SendInformationEvent
  2029  00250C  D070               	goto	l12276
  2030  00250E                     l484:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 483: if (!PORTAbits.RA2) {
  2034  00250E  B480               	btfsc	3968,2,c	;volatile
  2035  002510  D756               	goto	l12162
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 484: debounce_cnt[ current_debounce ]++;
  2039  002512  5175               	movf	_current_debounce& (0+255),w,b
  2040                           
  2041                           ;main.c: 485: if (debounce_cnt[ current_debounce ] > 3) {
  2042  002514  D8B9               	call	PL8	;call to abstracted procedure
  2043  002516  64DF               	cpfsgt	indf2,c
  2044  002518  D06A               	goto	l12276
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 487: debounce_cnt[ current_debounce ] = 0;
  2048  00251A  5175               	movf	_current_debounce& (0+255),w,b
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;main.c: 490: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2052                           ;main.c: 493: 0x04) {
  2053  00251C  D8AA               	call	PL4	;call to abstracted procedure
  2054  00251E  EC83  F024         	call	_Read_b_eep	;wreg free
  2055  002522  0101               	movlb	1	; () banked
  2056  002524  6F14               	movwf	??_main& (0+255),b
  2057  002526  A514               	btfss	??_main& (0+255),2,b
  2058  002528  D009               	goto	l12244
  2059                           
  2060                           ; BSR set to: 1
  2061                           ;main.c: 494: SendInformationEvent(current_debounce,
  2062                           ;main.c: 495: 20,
  2063                           ;main.c: 496: 3);
  2064  00252A  0E14               	movlw	20
  2065  00252C  0100               	movlb	0	; () banked
  2066  00252E  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2067  002530  0E03               	movlw	3
  2068  002532  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2069  002534  5175               	movf	_current_debounce& (0+255),w,b
  2070  002536  ECC0  F021         	call	_SendInformationEvent
  2071                           
  2072                           ;main.c: 497: } else {
  2073  00253A  D059               	goto	l12276
  2074  00253C                     l12244:
  2075                           
  2076                           ; BSR set to: 1
  2077                           ;main.c: 498: SendInformationEvent(current_debounce,
  2078                           ;main.c: 499: 30,
  2079                           ;main.c: 500: 5);
  2080  00253C  D8AE               	call	PL18	;call to abstracted procedure
  2081  00253E  ECC0  F021         	call	_SendInformationEvent
  2082  002542  D055               	goto	l12276
  2083  002544                     l490:
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;main.c: 509: if (!PORTAbits.RA1) {
  2087  002544  B280               	btfsc	3968,1,c	;volatile
  2088  002546  D73B               	goto	l12162
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;main.c: 510: debounce_cnt[ current_debounce ]++;
  2092  002548  5175               	movf	_current_debounce& (0+255),w,b
  2093                           
  2094                           ;main.c: 511: if (debounce_cnt[ current_debounce ] > 3) {
  2095  00254A  D89E               	call	PL8	;call to abstracted procedure
  2096  00254C  64DF               	cpfsgt	indf2,c
  2097  00254E  D04F               	goto	l12276
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;main.c: 513: debounce_cnt[ current_debounce ] = 0;
  2101  002550  5175               	movf	_current_debounce& (0+255),w,b
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;main.c: 516: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2105                           ;main.c: 519: 0x04) {
  2106  002552  D88F               	call	PL4	;call to abstracted procedure
  2107  002554  EC83  F024         	call	_Read_b_eep	;wreg free
  2108  002558  0101               	movlb	1	; () banked
  2109  00255A  6F14               	movwf	??_main& (0+255),b
  2110  00255C  A514               	btfss	??_main& (0+255),2,b
  2111  00255E  D009               	goto	l12256
  2112                           
  2113                           ; BSR set to: 1
  2114                           ;main.c: 520: SendInformationEvent(current_debounce,
  2115                           ;main.c: 521: 20,
  2116                           ;main.c: 522: 3);
  2117  002560  0E14               	movlw	20
  2118  002562  0100               	movlb	0	; () banked
  2119  002564  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2120  002566  0E03               	movlw	3
  2121  002568  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2122  00256A  5175               	movf	_current_debounce& (0+255),w,b
  2123  00256C  ECC0  F021         	call	_SendInformationEvent
  2124                           
  2125                           ;main.c: 523: } else {
  2126  002570  D03E               	goto	l12276
  2127  002572                     l12256:
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 524: SendInformationEvent(current_debounce,
  2131                           ;main.c: 525: 30,
  2132                           ;main.c: 526: 5);
  2133  002572  D893               	call	PL18	;call to abstracted procedure
  2134  002574  ECC0  F021         	call	_SendInformationEvent
  2135  002578  D03A               	goto	l12276
  2136  00257A                     l496:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 535: if (!PORTAbits.RA0) {
  2140  00257A  B080               	btfsc	3968,0,c	;volatile
  2141  00257C  D720               	goto	l12162
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;main.c: 536: debounce_cnt[ current_debounce ]++;
  2145  00257E  5175               	movf	_current_debounce& (0+255),w,b
  2146                           
  2147                           ;main.c: 537: if (debounce_cnt[ current_debounce ] > 3) {
  2148  002580  D883               	call	PL8	;call to abstracted procedure
  2149  002582  64DF               	cpfsgt	indf2,c
  2150  002584  D034               	goto	l12276
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 539: debounce_cnt[ current_debounce ] = 0;
  2154  002586  5175               	movf	_current_debounce& (0+255),w,b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;main.c: 542: if (Read_b_eep(0x43 + 24 + current_debounce) &
  2158                           ;main.c: 545: 0x04) {
  2159  002588  D874               	call	PL4	;call to abstracted procedure
  2160  00258A  EC83  F024         	call	_Read_b_eep	;wreg free
  2161  00258E  0101               	movlb	1	; () banked
  2162  002590  6F14               	movwf	??_main& (0+255),b
  2163  002592  A514               	btfss	??_main& (0+255),2,b
  2164  002594  D009               	goto	l12268
  2165                           
  2166                           ; BSR set to: 1
  2167                           ;main.c: 546: SendInformationEvent(current_debounce,
  2168                           ;main.c: 547: 20,
  2169                           ;main.c: 548: 3);
  2170  002596  0E14               	movlw	20
  2171  002598  0100               	movlb	0	; () banked
  2172  00259A  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2173  00259C  0E03               	movlw	3
  2174  00259E  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2175  0025A0  5175               	movf	_current_debounce& (0+255),w,b
  2176  0025A2  ECC0  F021         	call	_SendInformationEvent
  2177                           
  2178                           ;main.c: 549: } else {
  2179  0025A6  D023               	goto	l12276
  2180  0025A8                     l12268:
  2181                           
  2182                           ; BSR set to: 1
  2183                           ;main.c: 550: SendInformationEvent(current_debounce,
  2184                           ;main.c: 551: 30,
  2185                           ;main.c: 552: 5);
  2186  0025A8  D878               	call	PL18	;call to abstracted procedure
  2187  0025AA  ECC0  F021         	call	_SendInformationEvent
  2188  0025AE  D01F               	goto	l12276
  2189  0025B0                     l502:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 561: current_debounce = 0;
  2193  0025B0  6B75               	clrf	_current_debounce& (0+255),b
  2194                           
  2195                           ;main.c: 562: break;
  2196  0025B2  D01D               	goto	l12276
  2197  0025B4                     l12274:
  2198                           
  2199                           ; BSR set to: 1
  2200  0025B4  0100               	movlb	0	; () banked
  2201  0025B6  5175               	movf	_current_debounce& (0+255),w,b
  2202                           
  2203                           ; Switch size 1, requested type "space"
  2204                           ; Number of cases is 10, Range of values is 0 to 9
  2205                           ; switch strategies available:
  2206                           ; Name         Instructions Cycles
  2207                           ; simple_byte           31    16 (average)
  2208                           ;	Chosen strategy is simple_byte
  2209  0025B8  E101 D6E6          	bz	l441
  2210  0025BC  0A01               	xorlw	1	; case 1
  2211  0025BE  E101 D704          	bz	l448
  2212  0025C2  0A03               	xorlw	3	; case 2
  2213  0025C4  E101 D71C          	bz	l454
  2214  0025C8  0A01               	xorlw	1	; case 3
  2215  0025CA  E101 D734          	bz	l460
  2216  0025CE  0A07               	xorlw	7	; case 4
  2217  0025D0  E101 D74C          	bz	l466
  2218  0025D4  0A01               	xorlw	1	; case 5
  2219  0025D6  E101 D764          	bz	l472
  2220  0025DA  0A03               	xorlw	3	; case 6
  2221  0025DC  E101 D77C          	bz	l478
  2222  0025E0  0A01               	xorlw	1	; case 7
  2223  0025E2  E095               	bz	l484
  2224  0025E4  0A0F               	xorlw	15	; case 8
  2225  0025E6  E0AE               	bz	l490
  2226  0025E8  0A01               	xorlw	1	; case 9
  2227  0025EA  E0C7               	bz	l496
  2228  0025EC  D7E1               	goto	l502
  2229  0025EE                     l12276:
  2230                           
  2231                           ;main.c: 565: }
  2232                           ;main.c: 567: current_debounce++;
  2233  0025EE  0100               	movlb	0	; () banked
  2234  0025F0  2B75               	incf	_current_debounce& (0+255),f,b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;main.c: 568: if ( current_debounce > 9 ) current_debounce = 0;
  2238  0025F2  0E09               	movlw	9
  2239  0025F4  6575               	cpfsgt	_current_debounce& (0+255),b
  2240  0025F6  D017               	goto	l12288
  2241                           
  2242                           ; BSR set to: 0
  2243  0025F8  6B75               	clrf	_current_debounce& (0+255),b
  2244  0025FA  D015               	goto	l12288
  2245  0025FC                     l12282:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 575: vscp_error();
  2249  0025FC  ECBA  F024         	call	_vscp_error	;wreg free
  2250                           
  2251                           ;main.c: 576: break;
  2252  002600  D012               	goto	l12288
  2253  002602                     l505:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;main.c: 579: vscp_node_state = 0x00;
  2257  002602  6B7E               	clrf	_vscp_node_state& (0+255),b
  2258                           
  2259                           ;main.c: 580: break;
  2260  002604  D010               	goto	l12288
  2261  002606                     l12286:
  2262  002606  0100               	movlb	0	; () banked
  2263  002608  517E               	movf	_vscp_node_state& (0+255),w,b
  2264                           
  2265                           ; Switch size 1, requested type "space"
  2266                           ; Number of cases is 5, Range of values is 0 to 4
  2267                           ; switch strategies available:
  2268                           ; Name         Instructions Cycles
  2269                           ; simple_byte           16     9 (average)
  2270                           ;	Chosen strategy is simple_byte
  2271  00260A  E101 D661          	bz	l12120
  2272  00260E  0A01               	xorlw	1	; case 1
  2273  002610  E101 D668          	bz	l12128
  2274  002614  0A03               	xorlw	3	; case 2
  2275  002616  E101 D662          	bz	l12126
  2276  00261A  0A01               	xorlw	1	; case 3
  2277  00261C  E101 D665          	bz	l434
  2278  002620  0A07               	xorlw	7	; case 4
  2279  002622  E0EC               	bz	l12282
  2280  002624  D7EE               	goto	l505
  2281  002626                     l12288:
  2282                           
  2283                           ;main.c: 585: if ( measurement_clock_sec > 1000 ) {
  2284  002626  0EE9               	movlw	233
  2285  002628  0100               	movlb	0	; () banked
  2286  00262A  5D64               	subwf	_measurement_clock_sec& (0+255),w,b	;volatile
  2287  00262C  0E03               	movlw	3
  2288  00262E  5965               	subwfb	(_measurement_clock_sec+1)& (0+255),w,b	;volatile
  2289  002630  0E00               	movlw	0
  2290  002632  5966               	subwfb	(_measurement_clock_sec+2)& (0+255),w,b	;volatile
  2291  002634  0E00               	movlw	0
  2292  002636  5967               	subwfb	(_measurement_clock_sec+3)& (0+255),w,b	;volatile
  2293  002638  E30B               	bnc	l12298
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;main.c: 587: measurement_clock_sec = 0;
  2297  00263A  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  2298  00263C  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  2299  00263E  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  2300  002640  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 590: vscp_doOneSecondWork();
  2304  002642  ECE9  F021         	call	_vscp_doOneSecondWork	;wreg free
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 594: if ( 0x03 == vscp_node_state ) {
  2308  002646  517E               	movf	_vscp_node_state& (0+255),w,b
  2309  002648  0A03               	xorlw	3
  2310  00264A  B4D8               	btfsc	status,2,c
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 596: doApplicationOneSecondWork();
  2314  00264C  EC0B  F00B         	call	_doApplicationOneSecondWork	;wreg free
  2315  002650                     l12298:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;main.c: 597: }
  2319                           ;main.c: 599: }
  2320                           ;main.c: 602: if ( seconds > 59 ) {
  2321  002650  0E3B               	movlw	59
  2322  002652  6578               	cpfsgt	_seconds& (0+255),b
  2323  002654  D00B               	goto	l12314
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 604: seconds = 0;
  2327  002656  6B78               	clrf	_seconds& (0+255),b
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;main.c: 605: minutes++;
  2331  002658  2B77               	incf	_minutes& (0+255),f,b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 607: if ( minutes > 59 ) {
  2335  00265A  0E3B               	movlw	59
  2336  00265C  6577               	cpfsgt	_minutes& (0+255),b
  2337  00265E  D002               	goto	l12310
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;main.c: 608: minutes = 0;
  2341  002660  6B77               	clrf	_minutes& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;main.c: 609: hours++;
  2345  002662  2B76               	incf	_hours& (0+255),f,b
  2346  002664                     l12310:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 610: }
  2350                           ;main.c: 612: if ( hours > 23 ) hours = 0;
  2351  002664  0E17               	movlw	23
  2352  002666  6576               	cpfsgt	_hours& (0+255),b
  2353  002668  D001               	goto	l12314
  2354                           
  2355                           ; BSR set to: 0
  2356  00266A  6B76               	clrf	_hours& (0+255),b
  2357  00266C                     l12314:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 614: }
  2361                           ;main.c: 616: doWork();
  2362  00266C  ECBC  F024         	call	_doWork	;wreg free
  2363  002670  D618               	goto	l425
  2364  002672                     __end_of_main:
  2365                           	opt stack 0
  2366  002672                     PL4:
  2367                           	opt stack 20
  2368  002672  0FB1               	addlw	low _debounce_cnt
  2369  002674  6ED9               	movwf	fsr2l,c
  2370  002676  6ADA               	clrf	fsr2h,c
  2371  002678  6ADF               	clrf	indf2,c
  2372  00267A  0E5B               	movlw	91
  2373  00267C  2575               	addwf	_current_debounce& (0+255),w,b
  2374  00267E  6E08               	movwf	?_Read_b_eep,c
  2375  002680  6A09               	clrf	?_Read_b_eep+1,c
  2376  002682  0E00               	movlw	0
  2377  002684  2209               	addwfc	?_Read_b_eep+1,f,c
  2378  002686  0C00               	retlw	0
  2379  002688                     __end_ofPL4:
  2380                           	opt stack 0
  2381  002688                     PL8:
  2382                           	opt stack 20
  2383  002688  0FB1               	addlw	low _debounce_cnt
  2384  00268A  6ED9               	movwf	fsr2l,c
  2385  00268C  6ADA               	clrf	fsr2h,c
  2386  00268E  2ADF               	incf	indf2,f,c
  2387  002690  5175               	movf	_current_debounce& (0+255),w,b
  2388  002692  0FB1               	addlw	low _debounce_cnt
  2389  002694  6ED9               	movwf	fsr2l,c
  2390  002696  6ADA               	clrf	fsr2h,c
  2391  002698  0C03               	retlw	3
  2392  00269A                     __end_ofPL8:
  2393                           	opt stack 0
  2394  00269A                     PL18:
  2395                           	opt stack 20
  2396  00269A  0E1E               	movlw	30
  2397  00269C  0100               	movlb	0	; () banked
  2398  00269E  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2399  0026A0  0E05               	movlw	5
  2400  0026A2  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2401  0026A4  5175               	movf	_current_debounce& (0+255),w,b
  2402  0026A6  0012               	return	
  2403  0026A8                     __end_ofPL18:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           intcon	equ	0xFF2
  2412                           intcon2	equ	0xFF1
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           indf1	equ	0xFE7
  2416                           fsr1h	equ	0xFE2
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           plusw2	equ	0xFDB
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _doWork *****************
  2427 ;; Defined at:
  2428 ;;		line 1399 in file "../main.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;		None               void
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : F/0
  2439 ;;		On exit  : F/0
  2440 ;;		Unchanged: F/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2442 ;;      Params:         0       0       0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0
  2445 ;;      Totals:         0       0       0       0       0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    2
  2449 ;; This function calls:
  2450 ;;		Nothing
  2451 ;; This function is called by:
  2452 ;;		_main
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text1
  2457  004978                     __ptext1:
  2458                           	opt stack 0
  2459  004978                     _doWork:
  2460                           	opt stack 27
  2461                           
  2462                           ; BSR set to: 0
  2463                           
  2464                           ; BSR set to: 0
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;incstack = 0
  2468                           ;incstack = 0
  2469  004978  0012               	return	
  2470  00497A                     __end_of_doWork:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           intcon	equ	0xFF2
  2479                           intcon2	equ	0xFF1
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           indf1	equ	0xFE7
  2483                           fsr1h	equ	0xFE2
  2484                           fsr1l	equ	0xFE1
  2485                           indf2	equ	0xFDF
  2486                           postinc2	equ	0xFDE
  2487                           postdec2	equ	0xFDD
  2488                           plusw2	equ	0xFDB
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function _doApplicationOneSecondWork *****************
  2494 ;; Defined at:
  2495 ;;		line 880 in file "../main.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  data            3   60[BANK0 ] unsigned char [3]
  2500 ;;  iodirections    2   58[BANK0 ] unsigned short 
  2501 ;;  i               1   66[BANK0 ] unsigned char 
  2502 ;;  ctrlreg         1   65[BANK0 ] unsigned char 
  2503 ;;  bOn             1   64[BANK0 ] enum E15660
  2504 ;;  bInput          1   63[BANK0 ] enum E15660
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : F/0
  2511 ;;		On exit  : F/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2514 ;;      Params:         0       0       0       0       0       0       0
  2515 ;;      Locals:         0       9       0       0       0       0       0
  2516 ;;      Temps:          0      36       0       0       0       0       0
  2517 ;;      Totals:         0      45       0       0       0       0       0
  2518 ;;Total ram usage:       45 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    8
  2521 ;; This function calls:
  2522 ;;		_Read_b_eep
  2523 ;;		_SendInformationEvent
  2524 ;;		_doActionOff
  2525 ;;		_sendVSCPFrame
  2526 ;; This function is called by:
  2527 ;;		_main
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text2
  2532  001616                     __ptext2:
  2533                           	opt stack 0
  2534  001616                     _doApplicationOneSecondWork:
  2535                           	opt stack 21
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 882: uint8_t i;
  2539                           ;main.c: 883: uint16_t iodirections;
  2540                           ;main.c: 884: uint8_t ctrlreg;
  2541                           ;main.c: 885: BOOL bOn = 0;
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;incstack = 0
  2545                           ;incstack = 0
  2546  001616  6BFB               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 886: BOOL bInput;
  2550                           ;main.c: 889: iodirections = ( Read_b_eep(0x43 + 12) << 8 ) +
  2551                           ;main.c: 890: Read_b_eep(0x43 + 13);
  2552  001618  6A09               	clrf	?_Read_b_eep+1,c
  2553  00161A  0E50               	movlw	80
  2554  00161C  6E08               	movwf	?_Read_b_eep,c
  2555  00161E  EC83  F024         	call	_Read_b_eep	;wreg free
  2556  001622  0100               	movlb	0	; () banked
  2557  001624  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2558  001626  6A09               	clrf	?_Read_b_eep+1,c
  2559  001628  0E4F               	movlw	79
  2560  00162A  6E08               	movwf	?_Read_b_eep,c
  2561  00162C  EC83  F024         	call	_Read_b_eep	;wreg free
  2562  001630  0100               	movlb	0	; () banked
  2563  001632  6FD3               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2564  001634  6BD2               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2565  001636  51D1               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2566  001638  25D2               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2567  00163A  6FF5               	movwf	doApplicationOneSecondWork@iodirections& (0+255),b
  2568  00163C  0E00               	movlw	0
  2569  00163E  21D3               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2570  001640  6FF6               	movwf	(doApplicationOneSecondWork@iodirections+1)& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 892: for ( i = 0; i < 10; i++ ) {
  2574  001642  6BFD               	clrf	doApplicationOneSecondWork@i& (0+255),b
  2575  001644                     l13168:
  2576                           
  2577                           ; BSR set to: 0
  2578  001644  0E09               	movlw	9
  2579  001646  65FD               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  2580  001648  D001               	goto	l13172
  2581  00164A  D1D9               	goto	l13344
  2582  00164C                     l13172:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 894: if ( iodirections & ( 1 << i ) ) {
  2586  00164C  DB00               	call	PL38	;call to abstracted procedure
  2587  00164E  D001               	goto	u17104
  2588  001650                     u17105:
  2589  001650  DB0C               	call	PL102	;call to abstracted procedure
  2590  001652                     u17104:
  2591  001652  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  2592  001654  D7FD               	goto	u17105
  2593  001656  51F5               	movf	doApplicationOneSecondWork@iodirections& (0+255),w,b
  2594  001658  17D2               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2595  00165A  51F6               	movf	(doApplicationOneSecondWork@iodirections+1)& (0+255),w,b
  2596  00165C  17D3               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  2597  00165E  51D3               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2598  001660  11D2               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2599  001662  E101 D0A8          	bz	l13250
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 899: ctrlreg = Read_b_eep(0x43 + 34 + i);
  2603  001666  0E65               	movlw	101
  2604  001668  25FD               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2605  00166A  6E08               	movwf	?_Read_b_eep,c
  2606  00166C  6A09               	clrf	?_Read_b_eep+1,c
  2607  00166E  0E00               	movlw	0
  2608  001670  2209               	addwfc	?_Read_b_eep+1,f,c
  2609  001672  EC83  F024         	call	_Read_b_eep	;wreg free
  2610  001676  0100               	movlb	0	; () banked
  2611  001678  6FFC               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;main.c: 902: if ( !( ctrlreg & 0x80 ) ) continue;
  2615  00167A  AFFC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2616  00167C  D1BD               	goto	l13340
  2617  00167E  D032               	goto	l13202
  2618  001680                     l13180:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 907: bInput = PORTBbits.RB0;
  2622  001680  0E00               	movlw	0
  2623  001682  B081               	btfsc	3969,0,c	;volatile
  2624  001684  0E01               	movlw	1
  2625  001686  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2626                           
  2627                           ;main.c: 908: break;
  2628  001688  D041               	goto	l551
  2629  00168A                     l13182:
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 911: bInput = PORTBbits.RB1;
  2633  00168A  0E00               	movlw	0
  2634  00168C  B281               	btfsc	3969,1,c	;volatile
  2635  00168E  0E01               	movlw	1
  2636  001690  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2637                           
  2638                           ;main.c: 912: break;
  2639  001692  D03C               	goto	l551
  2640  001694                     l13184:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 915: bInput = PORTCbits.RC3;
  2644  001694  0E00               	movlw	0
  2645  001696  B682               	btfsc	3970,3,c	;volatile
  2646  001698  0E01               	movlw	1
  2647  00169A  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2648                           
  2649                           ;main.c: 916: break;
  2650  00169C  D037               	goto	l551
  2651  00169E                     l13186:
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 919: bInput = PORTCbits.RC4;
  2655  00169E  0E00               	movlw	0
  2656  0016A0  B882               	btfsc	3970,4,c	;volatile
  2657  0016A2  0E01               	movlw	1
  2658  0016A4  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2659                           
  2660                           ;main.c: 920: break;
  2661  0016A6  D032               	goto	l551
  2662  0016A8                     l13188:
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 923: bInput = PORTCbits.RC5;
  2666  0016A8  0E00               	movlw	0
  2667  0016AA  BA82               	btfsc	3970,5,c	;volatile
  2668  0016AC  0E01               	movlw	1
  2669  0016AE  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2670                           
  2671                           ;main.c: 924: break;
  2672  0016B0  D02D               	goto	l551
  2673  0016B2                     l13190:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 927: bInput = PORTCbits.RC6;
  2677  0016B2  0E00               	movlw	0
  2678  0016B4  BC82               	btfsc	3970,6,c	;volatile
  2679  0016B6  0E01               	movlw	1
  2680  0016B8  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2681                           
  2682                           ;main.c: 928: break;
  2683  0016BA  D028               	goto	l551
  2684  0016BC                     l13192:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 931: bInput = PORTCbits.RC7;
  2688  0016BC  0E00               	movlw	0
  2689  0016BE  BE82               	btfsc	3970,7,c	;volatile
  2690  0016C0  0E01               	movlw	1
  2691  0016C2  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2692                           
  2693                           ;main.c: 932: break;
  2694  0016C4  D023               	goto	l551
  2695  0016C6                     l13194:
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;main.c: 935: bInput = PORTAbits.RA2;
  2699  0016C6  0E00               	movlw	0
  2700  0016C8  B480               	btfsc	3968,2,c	;volatile
  2701  0016CA  0E01               	movlw	1
  2702  0016CC  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2703                           
  2704                           ;main.c: 936: break;
  2705  0016CE  D01E               	goto	l551
  2706  0016D0                     l13196:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 939: bInput = PORTAbits.RA1;
  2710  0016D0  0E00               	movlw	0
  2711  0016D2  B280               	btfsc	3968,1,c	;volatile
  2712  0016D4  0E01               	movlw	1
  2713  0016D6  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2714                           
  2715                           ;main.c: 940: break;
  2716  0016D8  D019               	goto	l551
  2717  0016DA                     l13198:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 943: bInput = PORTAbits.RA0;
  2721  0016DA  0E00               	movlw	0
  2722  0016DC  B080               	btfsc	3968,0,c	;volatile
  2723  0016DE  0E01               	movlw	1
  2724  0016E0  6FFA               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2725                           
  2726                           ;main.c: 944: break;
  2727  0016E2  D014               	goto	l551
  2728  0016E4                     l13202:
  2729                           
  2730                           ; BSR set to: 0
  2731  0016E4  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2732                           
  2733                           ; Switch size 1, requested type "space"
  2734                           ; Number of cases is 10, Range of values is 0 to 9
  2735                           ; switch strategies available:
  2736                           ; Name         Instructions Cycles
  2737                           ; simple_byte           31    16 (average)
  2738                           ;	Chosen strategy is simple_byte
  2739  0016E6  E0CC               	bz	l13180
  2740  0016E8  0A01               	xorlw	1	; case 1
  2741  0016EA  E0CF               	bz	l13182
  2742  0016EC  0A03               	xorlw	3	; case 2
  2743  0016EE  E0D2               	bz	l13184
  2744  0016F0  0A01               	xorlw	1	; case 3
  2745  0016F2  E0D5               	bz	l13186
  2746  0016F4  0A07               	xorlw	7	; case 4
  2747  0016F6  E0D8               	bz	l13188
  2748  0016F8  0A01               	xorlw	1	; case 5
  2749  0016FA  E0DB               	bz	l13190
  2750  0016FC  0A03               	xorlw	3	; case 6
  2751  0016FE  E0DE               	bz	l13192
  2752  001700  0A01               	xorlw	1	; case 7
  2753  001702  E0E1               	bz	l13194
  2754  001704  0A0F               	xorlw	15	; case 8
  2755  001706  E0E4               	bz	l13196
  2756  001708  0A01               	xorlw	1	; case 9
  2757  00170A  E0E7               	bz	l13198
  2758  00170C                     l551:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 948: if ( ctrlreg & 0x01 ) {
  2762  00170C  A1FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),0,b
  2763  00170E  D017               	goto	l13214
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;main.c: 950: if ( bInput ) {
  2767  001710  51FA               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2768  001712  E015               	bz	l13214
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 953: if ( !( current_iostate & ( 1 << i ) ) ) {
  2772  001714  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2773  001718  DA62               	call	PL14	;call to abstracted procedure
  2774  00171A  E111               	bnz	l13214
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main.c: 954: if ( ctrlreg & 0x04 ) {
  2778  00171C  A5FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2779  00171E  D008               	goto	l13212
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 955: SendInformationEvent( i,
  2783                           ;main.c: 956: 30,
  2784                           ;main.c: 957: 5 );
  2785  001720  0E1E               	movlw	30
  2786  001722  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2787  001724  0E05               	movlw	5
  2788  001726  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2789  001728  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2790  00172A  ECC0  F021         	call	_SendInformationEvent
  2791                           
  2792                           ;main.c: 958: }
  2793  00172E  D007               	goto	l13214
  2794  001730                     l13212:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 959: else {
  2798                           ;main.c: 960: SendInformationEvent( i,
  2799                           ;main.c: 961: 20,
  2800                           ;main.c: 962: 3 );
  2801  001730  0E14               	movlw	20
  2802  001732  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2803  001734  0E03               	movlw	3
  2804  001736  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2805  001738  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2806  00173A  ECC0  F021         	call	_SendInformationEvent
  2807  00173E                     l13214:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 963: }
  2811                           ;main.c: 964: }
  2812                           ;main.c: 965: }
  2813                           ;main.c: 966: }
  2814                           ;main.c: 969: if ( ctrlreg & 0x02 ) {
  2815  00173E  B3FC               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 971: if ( !bInput ) {
  2819  001740  67FA               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2820  001742  D015               	goto	l13226
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 974: if ( current_iostate & ( 1 << i ) ) {
  2824  001744  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2825  001748  DA4A               	call	PL14	;call to abstracted procedure
  2826  00174A  E011               	bz	l13226
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 975: if ( ctrlreg & 0x04 ) {
  2830  00174C  A5FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2831  00174E  D008               	goto	l13224
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;main.c: 976: SendInformationEvent( i,
  2835                           ;main.c: 977: 30,
  2836                           ;main.c: 978: 6 );
  2837  001750  0E1E               	movlw	30
  2838  001752  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2839  001754  0E06               	movlw	6
  2840  001756  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2841  001758  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2842  00175A  ECC0  F021         	call	_SendInformationEvent
  2843                           
  2844                           ;main.c: 979: }
  2845  00175E  D007               	goto	l13226
  2846  001760                     l13224:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 980: else {
  2850                           ;main.c: 981: SendInformationEvent( i,
  2851                           ;main.c: 982: 20,
  2852                           ;main.c: 983: 4 );
  2853  001760  0E14               	movlw	20
  2854  001762  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2855  001764  0E04               	movlw	4
  2856  001766  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2857  001768  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2858  00176A  ECC0  F021         	call	_SendInformationEvent
  2859  00176E                     l13226:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 984: }
  2863                           ;main.c: 985: }
  2864                           ;main.c: 986: }
  2865                           ;main.c: 987: }
  2866                           ;main.c: 990: if ( ctrlreg & 0x10 ) {
  2867  00176E  A9FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2868  001770  D010               	goto	l13238
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 992: if ( bInput ) {
  2872  001772  51FA               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2873  001774  E00E               	bz	l13238
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 995: if ( !( current_iostate & ( 1 << i ) ) ||
  2877                           ;main.c: 996: ( ctrlreg & 0x20 ) ) {
  2878  001776  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2879  00177A  DA31               	call	PL14	;call to abstracted procedure
  2880  00177C  E002               	bz	l13234
  2881                           
  2882                           ; BSR set to: 0
  2883  00177E  ABFC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2884  001780  D008               	goto	l13238
  2885  001782                     l13234:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 997: SendInformationEvent( i,
  2889                           ;main.c: 998: 1,
  2890                           ;main.c: 999: 2 );
  2891  001782  0E01               	movlw	1
  2892  001784  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2893  001786  0E02               	movlw	2
  2894  001788  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2895  00178A  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2896  00178C  ECC0  F021         	call	_SendInformationEvent
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;main.c: 1000: vscp_alarmstatus |= 0x02;
  2900  001790  8255               	bsf	_vscp_alarmstatus,1,c
  2901  001792                     l13238:
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;main.c: 1001: }
  2905                           ;main.c: 1003: }
  2906                           ;main.c: 1005: }
  2907                           ;main.c: 1008: if ( ctrlreg & 0x08 ) {
  2908  001792  B7FC               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 1010: if (!bInput ) {
  2912  001794  67FA               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2913  001796  D130               	goto	l13340
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;main.c: 1013: if ( current_iostate & ( 1 << i ) ||
  2917                           ;main.c: 1014: ( ctrlreg & 0x20 ) ) {
  2918  001798  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2919  00179C  DA20               	call	PL14	;call to abstracted procedure
  2920  00179E  E102               	bnz	l13246
  2921                           
  2922                           ; BSR set to: 0
  2923  0017A0  ABFC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2924  0017A2  D12A               	goto	l13340
  2925  0017A4                     l13246:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 1015: SendInformationEvent( i,
  2929                           ;main.c: 1016: 1,
  2930                           ;main.c: 1017: 2 );
  2931  0017A4  0E01               	movlw	1
  2932  0017A6  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  2933  0017A8  0E02               	movlw	2
  2934  0017AA  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2935  0017AC  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2936  0017AE  ECC0  F021         	call	_SendInformationEvent
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 1018: vscp_alarmstatus |= 0x04;
  2940  0017B2  8455               	bsf	_vscp_alarmstatus,2,c
  2941  0017B4  D121               	goto	l13340
  2942  0017B6                     l13250:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;main.c: 1026: else {
  2946                           ;main.c: 1031: ctrlreg = Read_b_eep(0x43 + 24 + i);
  2947  0017B6  DA52               	call	PL50	;call to abstracted procedure
  2948  0017B8  EC83  F024         	call	_Read_b_eep	;wreg free
  2949  0017BC  0100               	movlb	0	; () banked
  2950  0017BE  6FFC               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 1034: if ( !( ctrlreg & 0x80 ) ) continue;
  2954  0017C0  AFFC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2955  0017C2  D11A               	goto	l13340
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;main.c: 1038: if ( channel_protection_timer[ i ] ) {
  2959  0017C4  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2960  0017C6  0D02               	mullw	2
  2961  0017C8  50F3               	movf	prodl,w,c
  2962  0017CA  0F82               	addlw	low _channel_protection_timer
  2963  0017CC  6ED9               	movwf	fsr2l,c
  2964  0017CE  6ADA               	clrf	fsr2h,c
  2965  0017D0  50DE               	movf	postinc2,w,c
  2966  0017D2  10DD               	iorwf	postdec2,w,c
  2967  0017D4  E02A               	bz	l13270
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 1040: channel_protection_timer[ i ]--;
  2971  0017D6  DA34               	call	PL36	;call to abstracted procedure
  2972  0017D8  06DE               	decf	postinc2,f,c
  2973  0017DA  0E00               	movlw	0
  2974  0017DC  5ADD               	subwfb	postdec2,f,c
  2975                           
  2976                           ;main.c: 1043: if (!channel_protection_timer[ i ] &&
  2977                           ;main.c: 1044: ( Read_b_eep(0x43 + 24 + i) &
  2978                           ;main.c: 1045: 0x04 ) ) {
  2979  0017DE  DA30               	call	PL36	;call to abstracted procedure
  2980  0017E0  50DE               	movf	postinc2,w,c
  2981  0017E2  10DD               	iorwf	postdec2,w,c
  2982  0017E4  E137               	bnz	l13272
  2983                           
  2984                           ; BSR set to: 0
  2985  0017E6  DA3A               	call	PL50	;call to abstracted procedure
  2986  0017E8  EC83  F024         	call	_Read_b_eep	;wreg free
  2987  0017EC  0100               	movlb	0	; () banked
  2988  0017EE  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2989  0017F0  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2990  0017F2  D030               	goto	l13272
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 1048: doActionOff(0, (1 << i));
  2994  0017F4  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2995  0017F8  0E01               	movlw	1
  2996  0017FA  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2997  0017FC  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  2998  0017FE  D002               	goto	u17374
  2999  001800                     u17375:
  3000  001800  90D8               	bcf	status,0,c
  3001  001802  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3002  001804                     u17374:
  3003  001804  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3004  001806  D7FC               	goto	u17375
  3005  001808  51D2               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3006  00180A  6E4F               	movwf	?_doActionOff,c
  3007  00180C  0E00               	movlw	0
  3008  00180E  ECDB  F01F         	call	_doActionOff
  3009                           
  3010                           ;main.c: 1051: if (ctrlreg & 0x02) {
  3011  001812  0100               	movlb	0	; () banked
  3012  001814  A3FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  3013  001816  D007               	goto	l13268
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 1052: SendInformationEvent( i,
  3017                           ;main.c: 1053: 1,
  3018                           ;main.c: 1054: 2);
  3019  001818  0E01               	movlw	1
  3020  00181A  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  3021  00181C  0E02               	movlw	2
  3022  00181E  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3023  001820  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3024  001822  ECC0  F021         	call	_SendInformationEvent
  3025  001826                     l13268:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 1055: }
  3029                           ;main.c: 1057: vscp_alarmstatus |= 0x01;
  3030  001826  8055               	bsf	_vscp_alarmstatus,0,c
  3031  001828  D015               	goto	l13272
  3032  00182A                     l13270:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;main.c: 1061: else {
  3036                           ;main.c: 1063: channel_protection_timer[ i ] =
  3037                           ;main.c: 1064: Read_b_eep(0x43 + 46 + 20u + i) * 256 +
  3038                           ;main.c: 1066: Read_b_eep(0x43 + 46 + 21u + i);
  3039  00182A  0E85               	movlw	133
  3040  00182C  25FD               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3041  00182E  6E08               	movwf	?_Read_b_eep,c
  3042  001830  6A09               	clrf	?_Read_b_eep+1,c
  3043  001832  0E00               	movlw	0
  3044  001834  2209               	addwfc	?_Read_b_eep+1,f,c
  3045  001836  EC83  F024         	call	_Read_b_eep	;wreg free
  3046  00183A  0100               	movlb	0	; () banked
  3047  00183C  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3048  00183E  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3049  001840  0E86               	movlw	134
  3050  001842  25FD               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3051  001844  6E08               	movwf	?_Read_b_eep,c
  3052  001846  6A09               	clrf	?_Read_b_eep+1,c
  3053  001848  0E00               	movlw	0
  3054  00184A  2209               	addwfc	?_Read_b_eep+1,f,c
  3055  00184C  EC83  F024         	call	_Read_b_eep	;wreg free
  3056  001850  0100               	movlb	0	; () banked
  3057  001852  D9DF               	call	PL32	;call to abstracted procedure
  3058  001854                     l13272:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;main.c: 1068: }
  3062                           ;main.c: 1071: if ( channel_pulse_flags & (1 << i) ) {
  3063  001854  D9FC               	call	PL38	;call to abstracted procedure
  3064  001856  D001               	goto	u17394
  3065  001858                     u17395:
  3066  001858  DA08               	call	PL102	;call to abstracted procedure
  3067  00185A                     u17394:
  3068  00185A  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3069  00185C  D7FD               	goto	u17395
  3070  00185E  5168               	movf	_channel_pulse_flags& (0+255),w,b
  3071  001860  17D2               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3072  001862  5169               	movf	(_channel_pulse_flags+1)& (0+255),w,b
  3073  001864  17D3               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3074  001866  51D3               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3075  001868  11D2               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3076  00186A  E101 D0C5          	bz	l13340
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 1073: if ( channel_pulse_timer[ i ] ) {
  3080  00186E  D9C8               	call	PL26	;call to abstracted procedure
  3081  001870  50DE               	movf	postinc2,w,c
  3082  001872  10DD               	iorwf	postdec2,w,c
  3083  001874  E101 D0A6          	bz	l13338
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;main.c: 1075: channel_pulse_timer[ i ]--;
  3087  001878  0100               	movlb	0	; () banked
  3088  00187A  D9C2               	call	PL26	;call to abstracted procedure
  3089  00187C  06DE               	decf	postinc2,f,c
  3090  00187E  0E00               	movlw	0
  3091  001880  5ADD               	subwfb	postdec2,f,c
  3092                           
  3093                           ;main.c: 1078: if ( !channel_pulse_timer[ i ] ) {
  3094  001882  D9BE               	call	PL26	;call to abstracted procedure
  3095  001884  50DE               	movf	postinc2,w,c
  3096  001886  10DD               	iorwf	postdec2,w,c
  3097  001888  E040               	bz	l13322
  3098  00188A  D0B6               	goto	l13340
  3099  00188C                     l591:
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;main.c: 1083: if ( PORTBbits.RB0 ) {
  3103  00188C  A081               	btfss	3969,0,c	;volatile
  3104  00188E  D002               	goto	l592
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 1084: PORTBbits.RB0 = 0;
  3108  001890  9081               	bcf	3969,0,c	;volatile
  3109  001892  D037               	goto	L9
  3110  001894                     l592:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 1087: else {
  3114                           ;main.c: 1088: PORTBbits.RB0 = 1;
  3115  001894  8081               	bsf	3969,0,c	;volatile
  3116  001896                     l13282:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 1089: bOn = 1;
  3120  001896  0E01               	movlw	1
  3121  001898  6FFB               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  3122  00189A  D04C               	goto	l13324
  3123  00189C                     l595:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 1094: if ( PORTBbits.RB1 ) {
  3127  00189C  A281               	btfss	3969,1,c	;volatile
  3128  00189E  D002               	goto	l596
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 1095: PORTBbits.RB1 = 0;
  3132  0018A0  9281               	bcf	3969,1,c	;volatile
  3133  0018A2  D02F               	goto	L9
  3134  0018A4                     l596:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 1098: else {
  3138                           ;main.c: 1099: PORTBbits.RB1 = 1;
  3139  0018A4  8281               	bsf	3969,1,c	;volatile
  3140  0018A6  D7F7               	goto	l13282
  3141  0018A8                     l598:
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;main.c: 1105: if ( PORTCbits.RC3 ) {
  3145  0018A8  A682               	btfss	3970,3,c	;volatile
  3146  0018AA  D002               	goto	l599
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 1106: PORTCbits.RC3 = 0;
  3150  0018AC  9682               	bcf	3970,3,c	;volatile
  3151  0018AE  D029               	goto	L9
  3152  0018B0                     l599:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 1109: else {
  3156                           ;main.c: 1110: PORTCbits.RC3 = 1;
  3157  0018B0  8682               	bsf	3970,3,c	;volatile
  3158  0018B2  D7F1               	goto	l13282
  3159  0018B4                     l601:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 1116: if ( PORTCbits.RC4 ) {
  3163  0018B4  A882               	btfss	3970,4,c	;volatile
  3164  0018B6  D002               	goto	l602
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 1117: PORTCbits.RC4 = 0;
  3168  0018B8  9882               	bcf	3970,4,c	;volatile
  3169  0018BA  D023               	goto	L9
  3170  0018BC                     l602:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 1120: else {
  3174                           ;main.c: 1121: PORTCbits.RC4 = 1;
  3175  0018BC  8882               	bsf	3970,4,c	;volatile
  3176  0018BE  D7EB               	goto	l13282
  3177  0018C0                     l604:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 1127: if ( PORTCbits.RC5 ) {
  3181  0018C0  AA82               	btfss	3970,5,c	;volatile
  3182  0018C2  D002               	goto	l605
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 1128: PORTCbits.RC5 = 0;
  3186  0018C4  9A82               	bcf	3970,5,c	;volatile
  3187  0018C6  D01D               	goto	L9
  3188  0018C8                     l605:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 1131: else {
  3192                           ;main.c: 1132: PORTCbits.RC5 = 1;
  3193  0018C8  8A82               	bsf	3970,5,c	;volatile
  3194  0018CA  D7E5               	goto	l13282
  3195  0018CC                     l607:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 1138: if ( PORTCbits.RC6 ) {
  3199  0018CC  AC82               	btfss	3970,6,c	;volatile
  3200  0018CE  D002               	goto	l608
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 1139: PORTCbits.RC6 = 0;
  3204  0018D0  9C82               	bcf	3970,6,c	;volatile
  3205  0018D2  D017               	goto	L9
  3206  0018D4                     l608:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 1142: else {
  3210                           ;main.c: 1143: PORTCbits.RC6 = 1;
  3211  0018D4  8C82               	bsf	3970,6,c	;volatile
  3212  0018D6  D7DF               	goto	l13282
  3213  0018D8                     l610:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 1149: if ( PORTCbits.RC7 ) {
  3217  0018D8  AE82               	btfss	3970,7,c	;volatile
  3218  0018DA  D002               	goto	l611
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 1150: PORTCbits.RC7 = 0;
  3222  0018DC  9E82               	bcf	3970,7,c	;volatile
  3223  0018DE  D011               	goto	L9
  3224  0018E0                     l611:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 1153: else {
  3228                           ;main.c: 1154: PORTCbits.RC7 = 1;
  3229  0018E0  8E82               	bsf	3970,7,c	;volatile
  3230  0018E2  D7D9               	goto	l13282
  3231  0018E4                     l613:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;main.c: 1160: if ( PORTAbits.RA2 ) {
  3235  0018E4  A480               	btfss	3968,2,c	;volatile
  3236  0018E6  D002               	goto	l614
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 1161: PORTAbits.RA2 = 0;
  3240  0018E8  9480               	bcf	3968,2,c	;volatile
  3241  0018EA  D00B               	goto	L9
  3242  0018EC                     l614:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 1164: else {
  3246                           ;main.c: 1165: PORTAbits.RA2 = 1;
  3247  0018EC  8480               	bsf	3968,2,c	;volatile
  3248  0018EE  D7D3               	goto	l13282
  3249  0018F0                     l616:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 1171: if ( PORTAbits.RA1 ) {
  3253  0018F0  A280               	btfss	3968,1,c	;volatile
  3254  0018F2  D002               	goto	l617
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 1172: PORTAbits.RA1 = 0;
  3258  0018F4  9280               	bcf	3968,1,c	;volatile
  3259  0018F6  D005               	goto	L9
  3260  0018F8                     l617:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;main.c: 1175: else {
  3264                           ;main.c: 1176: PORTAbits.RA1 = 1;
  3265  0018F8  8280               	bsf	3968,1,c	;volatile
  3266  0018FA  D7CD               	goto	l13282
  3267  0018FC                     l619:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 1182: if ( PORTAbits.RA0 ) {
  3271  0018FC  A080               	btfss	3968,0,c	;volatile
  3272  0018FE  D003               	goto	l620
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;main.c: 1183: PORTAbits.RA0 = 0;
  3276  001900  9080               	bcf	3968,0,c	;volatile
  3277  001902                     L9:
  3278                           
  3279                           ;main.c: 1184: bOn = 0;
  3280  001902  6BFB               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  3281                           
  3282                           ;main.c: 1185: }
  3283  001904  D017               	goto	l13324
  3284  001906                     l620:
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 1186: else {
  3288                           ;main.c: 1187: PORTAbits.RA0 = 1;
  3289  001906  8080               	bsf	3968,0,c	;volatile
  3290  001908  D7C6               	goto	l13282
  3291  00190A                     l13322:
  3292                           
  3293                           ; BSR set to: 1
  3294  00190A  0100               	movlb	0	; () banked
  3295  00190C  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3296                           
  3297                           ; Switch size 1, requested type "space"
  3298                           ; Number of cases is 10, Range of values is 0 to 9
  3299                           ; switch strategies available:
  3300                           ; Name         Instructions Cycles
  3301                           ; simple_byte           31    16 (average)
  3302                           ;	Chosen strategy is simple_byte
  3303  00190E  E0BE               	bz	l591
  3304  001910  0A01               	xorlw	1	; case 1
  3305  001912  E0C4               	bz	l595
  3306  001914  0A03               	xorlw	3	; case 2
  3307  001916  E0C8               	bz	l598
  3308  001918  0A01               	xorlw	1	; case 3
  3309  00191A  E0CC               	bz	l601
  3310  00191C  0A07               	xorlw	7	; case 4
  3311  00191E  E0D0               	bz	l604
  3312  001920  0A01               	xorlw	1	; case 5
  3313  001922  E0D4               	bz	l607
  3314  001924  0A03               	xorlw	3	; case 6
  3315  001926  E0D8               	bz	l610
  3316  001928  0A01               	xorlw	1	; case 7
  3317  00192A  E0DC               	bz	l613
  3318  00192C  0A0F               	xorlw	15	; case 8
  3319  00192E  E0E0               	bz	l616
  3320  001930  0A01               	xorlw	1	; case 9
  3321  001932  E0E4               	bz	l619
  3322  001934                     l13324:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 1194: channel_pulse_timer[ i ] =
  3326                           ;main.c: 1195: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3327                           ;main.c: 1197: Read_b_eep(0x43 + 46 + 0u + 2 * i);
  3328  001934  D97C               	call	PL34	;call to abstracted procedure
  3329  001936  EC83  F024         	call	_Read_b_eep	;wreg free
  3330  00193A  0100               	movlb	0	; () banked
  3331  00193C  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3332  00193E  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3333  001940  D976               	call	PL34	;call to abstracted procedure
  3334  001942  EC83  F024         	call	_Read_b_eep	;wreg free
  3335  001946  0100               	movlb	0	; () banked
  3336  001948  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3337  00194A  0E00               	movlw	0
  3338  00194C  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3339  00194E  D958               	call	PL26	;call to abstracted procedure
  3340  001950  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3341  001954  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;main.c: 1200: if ( bOn ) {
  3345  001958  51FB               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  3346  00195A  E02A               	bz	l622
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 1203: if ( Read_b_eep(0x43 + 24 + i) &
  3350                           ;main.c: 1204: 0x04) {
  3351  00195C  D97F               	call	PL50	;call to abstracted procedure
  3352  00195E  EC83  F024         	call	_Read_b_eep	;wreg free
  3353  001962  0100               	movlb	0	; () banked
  3354  001964  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3355  001966  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3356  001968  D019               	goto	l13332
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 1205: channel_protection_timer[ i ] =
  3360                           ;main.c: 1206: Read_b_eep(0x43 + 46 + 20u + 2 * i) * 256 +
  3361                           ;main.c: 1208: Read_b_eep(0x43 + 46 + 21u + 2 * i);
  3362  00196A  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3363  00196C  0D02               	mullw	2
  3364  00196E  0E85               	movlw	133
  3365  001970  24F3               	addwf	prodl,w,c
  3366  001972  6E08               	movwf	?_Read_b_eep,c
  3367  001974  0E00               	movlw	0
  3368  001976  20F4               	addwfc	prodh,w,c
  3369  001978  6E09               	movwf	?_Read_b_eep+1,c
  3370  00197A  EC83  F024         	call	_Read_b_eep	;wreg free
  3371  00197E  0100               	movlb	0	; () banked
  3372  001980  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3373  001982  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3374  001984  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3375  001986  0D02               	mullw	2
  3376  001988  0E86               	movlw	134
  3377  00198A  24F3               	addwf	prodl,w,c
  3378  00198C  6E08               	movwf	?_Read_b_eep,c
  3379  00198E  0E00               	movlw	0
  3380  001990  20F4               	addwfc	prodh,w,c
  3381  001992  6E09               	movwf	?_Read_b_eep+1,c
  3382  001994  EC83  F024         	call	_Read_b_eep	;wreg free
  3383  001998  0100               	movlb	0	; () banked
  3384  00199A  D93B               	call	PL32	;call to abstracted procedure
  3385  00199C                     l13332:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;main.c: 1210: }
  3389                           ;main.c: 1212: if ( ctrlreg & 0x08 ) {
  3390  00199C  A7FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  3391  00199E  D02C               	goto	l13340
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 1213: SendInformationEvent( i,
  3395                           ;main.c: 1214: 20,
  3396                           ;main.c: 1215: 3);
  3397  0019A0  0E14               	movlw	20
  3398  0019A2  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  3399  0019A4  0E03               	movlw	3
  3400  0019A6  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3401  0019A8  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3402  0019AA  ECC0  F021         	call	_SendInformationEvent
  3403  0019AE  D024               	goto	l13340
  3404  0019B0                     l622:
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;main.c: 1220: else {
  3408                           ;main.c: 1222: if ( ctrlreg & 0x10 ) {
  3409  0019B0  A9FC               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  3410  0019B2  D022               	goto	l13340
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;main.c: 1223: SendInformationEvent( i, 20,
  3414                           ;main.c: 1224: 4);
  3415  0019B4  0E14               	movlw	20
  3416  0019B6  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  3417  0019B8  0E04               	movlw	4
  3418  0019BA  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3419  0019BC  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3420  0019BE  ECC0  F021         	call	_SendInformationEvent
  3421  0019C2  D01A               	goto	l13340
  3422  0019C4                     l13338:
  3423                           
  3424                           ; BSR set to: 1
  3425                           ;main.c: 1232: else {
  3426                           ;main.c: 1234: channel_pulse_timer[ i ] =
  3427                           ;main.c: 1235: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3428                           ;main.c: 1237: Read_b_eep(0x43 + 46 + 1u + 2 * i);
  3429  0019C4  0100               	movlb	0	; () banked
  3430  0019C6  D933               	call	PL34	;call to abstracted procedure
  3431  0019C8  EC83  F024         	call	_Read_b_eep	;wreg free
  3432  0019CC  0100               	movlb	0	; () banked
  3433  0019CE  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3434  0019D0  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3435  0019D2  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3436  0019D4  0D02               	mullw	2
  3437  0019D6  0E72               	movlw	114
  3438  0019D8  24F3               	addwf	prodl,w,c
  3439  0019DA  6E08               	movwf	?_Read_b_eep,c
  3440  0019DC  0E00               	movlw	0
  3441  0019DE  20F4               	addwfc	prodh,w,c
  3442  0019E0  6E09               	movwf	?_Read_b_eep+1,c
  3443  0019E2  EC83  F024         	call	_Read_b_eep	;wreg free
  3444  0019E6  0100               	movlb	0	; () banked
  3445  0019E8  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3446  0019EA  0E00               	movlw	0
  3447  0019EC  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3448  0019EE  D908               	call	PL26	;call to abstracted procedure
  3449  0019F0  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3450  0019F4  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3451  0019F8                     l13340:
  3452  0019F8  0100               	movlb	0	; () banked
  3453  0019FA  2BFD               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  3454  0019FC  D623               	goto	l13168
  3455  0019FE                     l13344:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 1239: }
  3459                           ;main.c: 1241: }
  3460                           ;main.c: 1243: }
  3461                           ;main.c: 1245: }
  3462                           ;main.c: 1249: if ( Read_b_eep(0x43 + 45) ) {
  3463  0019FE  6A09               	clrf	?_Read_b_eep+1,c
  3464  001A00  0E70               	movlw	112
  3465  001A02  6E08               	movwf	?_Read_b_eep,c
  3466  001A04  EC83  F024         	call	_Read_b_eep	;wreg free
  3467  001A08  0900               	iorlw	0
  3468  001A0A  E04F               	bz	l13352
  3469                           
  3470                           ;main.c: 1251: uint8_t data[ 3 ];
  3471                           ;main.c: 1253: data[ 0 ] = 0;
  3472  001A0C  0100               	movlb	0	; () banked
  3473  001A0E  6BF7               	clrf	doApplicationOneSecondWork@data& (0+255),b
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;main.c: 1254: data[ 1 ] = ( PORTAbits.RA0 << 1 ) +
  3477                           ;main.c: 1255: PORTAbits.RA1;
  3478  001A10  3080               	rrcf	3968,w,c	;volatile
  3479  001A12  0B01               	andlw	1
  3480  001A14  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3481  001A16  5080               	movf	3968,w,c	;volatile
  3482  001A18  0B01               	andlw	1
  3483  001A1A  0D02               	mullw	2
  3484  001A1C  50F3               	movf	prodl,w,c
  3485  001A1E  25D1               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3486  001A20  6FF8               	movwf	(doApplicationOneSecondWork@data+1)& (0+255),b
  3487                           
  3488                           ;main.c: 1256: data[ 2 ] = ( PORTAbits.RA2 << 7 ) +
  3489                           ;main.c: 1257: ( PORTCbits.RC7 << 6 ) +
  3490                           ;main.c: 1258: ( PORTCbits.RC6 << 5 ) +
  3491                           ;main.c: 1259: ( PORTCbits.RC5 << 4 ) +
  3492                           ;main.c: 1260: ( PORTCbits.RC4 << 3 ) +
  3493                           ;main.c: 1261: ( PORTCbits.RC3 << 2 ) +
  3494                           ;main.c: 1262: ( PORTBbits.RB1 << 1 ) +
  3495                           ;main.c: 1263: PORTBbits.RB0;
  3496  001A22  5081               	movf	3969,w,c	;volatile
  3497  001A24  0B01               	andlw	1
  3498  001A26  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3499  001A28  3081               	rrcf	3969,w,c	;volatile
  3500  001A2A  0B01               	andlw	1
  3501  001A2C  0D02               	mullw	2
  3502  001A2E  CFF3 F0D2          	movff	prodl,??_doApplicationOneSecondWork+1
  3503  001A32  3082               	rrcf	3970,w,c	;volatile
  3504  001A34  32E8               	rrcf	wreg,f,c
  3505  001A36  32E8               	rrcf	wreg,f,c
  3506  001A38  0B01               	andlw	1
  3507  001A3A  0D04               	mullw	4
  3508  001A3C  CFF3 F0D3          	movff	prodl,??_doApplicationOneSecondWork+2
  3509  001A40  3882               	swapf	3970,w,c	;volatile
  3510  001A42  0B01               	andlw	1
  3511  001A44  0D08               	mullw	8
  3512  001A46  CFF3 F0D4          	movff	prodl,??_doApplicationOneSecondWork+3
  3513  001A4A  3882               	swapf	3970,w,c	;volatile
  3514  001A4C  32E8               	rrcf	wreg,f,c
  3515  001A4E  0B01               	andlw	1
  3516  001A50  0D10               	mullw	16
  3517  001A52  CFF3 F0D5          	movff	prodl,??_doApplicationOneSecondWork+4
  3518  001A56  3882               	swapf	3970,w,c	;volatile
  3519  001A58  32E8               	rrcf	wreg,f,c
  3520  001A5A  32E8               	rrcf	wreg,f,c
  3521  001A5C  0B01               	andlw	1
  3522  001A5E  0D20               	mullw	32
  3523  001A60  CFF3 F0D6          	movff	prodl,??_doApplicationOneSecondWork+5
  3524  001A64  3482               	rlcf	3970,w,c	;volatile
  3525  001A66  36E8               	rlcf	wreg,f,c
  3526  001A68  0B01               	andlw	1
  3527  001A6A  0D40               	mullw	64
  3528  001A6C  CFF3 F0D7          	movff	prodl,??_doApplicationOneSecondWork+6
  3529  001A70  3080               	rrcf	3968,w,c	;volatile
  3530  001A72  32E8               	rrcf	wreg,f,c
  3531  001A74  0B01               	andlw	1
  3532  001A76  0D80               	mullw	128
  3533  001A78  50F3               	movf	prodl,w,c
  3534  001A7A  25D7               	addwf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3535  001A7C  25D6               	addwf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3536  001A7E  25D5               	addwf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3537  001A80  25D4               	addwf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3538  001A82  25D3               	addwf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3539  001A84  25D2               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3540  001A86  25D1               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3541  001A88  6FF9               	movwf	(doApplicationOneSecondWork@data+2)& (0+255),b
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;main.c: 1266: sendVSCPFrame( 15,
  3545                           ;main.c: 1267: 1,
  3546                           ;main.c: 1268: vscp_nickname,
  3547                           ;main.c: 1269: 0x03,
  3548                           ;main.c: 1270: 3,
  3549                           ;main.c: 1271: data );
  3550  001A8A  6A40               	clrf	?_sendVSCPFrame+1,c
  3551  001A8C  0E0F               	movlw	15
  3552  001A8E  6E3F               	movwf	?_sendVSCPFrame,c
  3553  001A90  0E01               	movlw	1
  3554  001A92  6E41               	movwf	?_sendVSCPFrame+2,c
  3555  001A94  C07D  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3556  001A98  0E03               	movlw	3
  3557  001A9A  6E43               	movwf	?_sendVSCPFrame+4,c
  3558  001A9C  6E44               	movwf	?_sendVSCPFrame+5,c
  3559  001A9E  0E00               	movlw	high doApplicationOneSecondWork@data
  3560  001AA0  6E46               	movwf	?_sendVSCPFrame+7,c
  3561  001AA2  0EF7               	movlw	low doApplicationOneSecondWork@data
  3562  001AA4  6E45               	movwf	?_sendVSCPFrame+6,c
  3563  001AA6  ECA3  F020         	call	_sendVSCPFrame	;wreg free
  3564  001AAA                     l13352:
  3565                           
  3566                           ;main.c: 1272: }
  3567                           ;main.c: 1275: current_iostate = ( PORTAbits.RA0 << 9 ) +
  3568                           ;main.c: 1276: ( PORTAbits.RA1 << 8 ) +
  3569                           ;main.c: 1277: ( PORTAbits.RA2 << 7 ) +
  3570                           ;main.c: 1278: ( PORTCbits.RC7 << 6 ) +
  3571                           ;main.c: 1279: ( PORTCbits.RC6 << 5 ) +
  3572                           ;main.c: 1280: ( PORTCbits.RC5 << 4 ) +
  3573                           ;main.c: 1281: ( PORTCbits.RC4 << 3 ) +
  3574                           ;main.c: 1282: ( PORTCbits.RC3 << 2 ) +
  3575                           ;main.c: 1283: ( PORTBbits.RB1 << 1 ) +
  3576                           ;main.c: 1284: PORTBbits.RB0;
  3577  001AAA  5081               	movf	3969,w,c	;volatile
  3578  001AAC  0B01               	andlw	1
  3579  001AAE  0100               	movlb	0	; () banked
  3580  001AB0  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3581  001AB2  3081               	rrcf	3969,w,c	;volatile
  3582  001AB4  0B01               	andlw	1
  3583  001AB6  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3584  001AB8  90D8               	bcf	status,0,c
  3585  001ABA  35D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3586  001ABC  6FD3               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3587  001ABE  6BD4               	clrf	(??_doApplicationOneSecondWork+3)& (0+255),b
  3588  001AC0  37D4               	rlcf	(??_doApplicationOneSecondWork+3)& (0+255),f,b
  3589  001AC2  3082               	rrcf	3970,w,c	;volatile
  3590  001AC4  32E8               	rrcf	wreg,f,c
  3591  001AC6  32E8               	rrcf	wreg,f,c
  3592  001AC8  0B01               	andlw	1
  3593  001ACA  6FD5               	movwf	(??_doApplicationOneSecondWork+4)& (0+255),b
  3594  001ACC  6BD6               	clrf	(??_doApplicationOneSecondWork+5)& (0+255),b
  3595  001ACE  90D8               	bcf	status,0,c
  3596  001AD0  37D5               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3597  001AD2  37D6               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3598  001AD4  90D8               	bcf	status,0,c
  3599  001AD6  37D5               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3600  001AD8  37D6               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3601  001ADA  3882               	swapf	3970,w,c	;volatile
  3602  001ADC  0B01               	andlw	1
  3603  001ADE  6FD7               	movwf	(??_doApplicationOneSecondWork+6)& (0+255),b
  3604  001AE0  6BD8               	clrf	(??_doApplicationOneSecondWork+7)& (0+255),b
  3605  001AE2  90D8               	bcf	status,0,c
  3606  001AE4  37D7               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3607  001AE6  37D8               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3608  001AE8  90D8               	bcf	status,0,c
  3609  001AEA  37D7               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3610  001AEC  37D8               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3611  001AEE  90D8               	bcf	status,0,c
  3612  001AF0  37D7               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3613  001AF2  37D8               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3614  001AF4  3882               	swapf	3970,w,c	;volatile
  3615  001AF6  32E8               	rrcf	wreg,f,c
  3616  001AF8  0B01               	andlw	1
  3617  001AFA  6FD9               	movwf	(??_doApplicationOneSecondWork+8)& (0+255),b
  3618  001AFC  6BDA               	clrf	(??_doApplicationOneSecondWork+9)& (0+255),b
  3619  001AFE  3BD9               	swapf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3620  001B00  3BDA               	swapf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3621  001B02  0EF0               	movlw	240
  3622  001B04  17DA               	andwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3623  001B06  51D9               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3624  001B08  0B0F               	andlw	15
  3625  001B0A  13DA               	iorwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3626  001B0C  0EF0               	movlw	240
  3627  001B0E  17D9               	andwf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3628  001B10  3882               	swapf	3970,w,c	;volatile
  3629  001B12  32E8               	rrcf	wreg,f,c
  3630  001B14  32E8               	rrcf	wreg,f,c
  3631  001B16  0B01               	andlw	1
  3632  001B18  6FDB               	movwf	(??_doApplicationOneSecondWork+10)& (0+255),b
  3633  001B1A  6BDC               	clrf	(??_doApplicationOneSecondWork+11)& (0+255),b
  3634  001B1C  0E05               	movlw	5
  3635  001B1E                     u17585:
  3636  001B1E  90D8               	bcf	status,0,c
  3637  001B20  37DB               	rlcf	(??_doApplicationOneSecondWork+10)& (0+255),f,b
  3638  001B22  37DC               	rlcf	(??_doApplicationOneSecondWork+11)& (0+255),f,b
  3639  001B24  2EE8               	decfsz	wreg,f,c
  3640  001B26  D7FB               	goto	u17585
  3641  001B28  3482               	rlcf	3970,w,c	;volatile
  3642  001B2A  36E8               	rlcf	wreg,f,c
  3643  001B2C  0B01               	andlw	1
  3644  001B2E  6FDD               	movwf	(??_doApplicationOneSecondWork+12)& (0+255),b
  3645  001B30  6BDE               	clrf	(??_doApplicationOneSecondWork+13)& (0+255),b
  3646  001B32  0E06               	movlw	6
  3647  001B34                     u17595:
  3648  001B34  90D8               	bcf	status,0,c
  3649  001B36  37DD               	rlcf	(??_doApplicationOneSecondWork+12)& (0+255),f,b
  3650  001B38  37DE               	rlcf	(??_doApplicationOneSecondWork+13)& (0+255),f,b
  3651  001B3A  2EE8               	decfsz	wreg,f,c
  3652  001B3C  D7FB               	goto	u17595
  3653  001B3E  3080               	rrcf	3968,w,c	;volatile
  3654  001B40  32E8               	rrcf	wreg,f,c
  3655  001B42  0B01               	andlw	1
  3656  001B44  6FDF               	movwf	(??_doApplicationOneSecondWork+14)& (0+255),b
  3657  001B46  6BE0               	clrf	(??_doApplicationOneSecondWork+15)& (0+255),b
  3658  001B48  0E07               	movlw	7
  3659  001B4A                     u17605:
  3660  001B4A  90D8               	bcf	status,0,c
  3661  001B4C  37DF               	rlcf	(??_doApplicationOneSecondWork+14)& (0+255),f,b
  3662  001B4E  37E0               	rlcf	(??_doApplicationOneSecondWork+15)& (0+255),f,b
  3663  001B50  2EE8               	decfsz	wreg,f,c
  3664  001B52  D7FB               	goto	u17605
  3665  001B54  3080               	rrcf	3968,w,c	;volatile
  3666  001B56  0B01               	andlw	1
  3667  001B58  6FE2               	movwf	(??_doApplicationOneSecondWork+17)& (0+255),b
  3668  001B5A  6BE1               	clrf	(??_doApplicationOneSecondWork+16)& (0+255),b
  3669  001B5C  5080               	movf	3968,w,c	;volatile
  3670  001B5E  0B01               	andlw	1
  3671  001B60  6FE3               	movwf	(??_doApplicationOneSecondWork+18)& (0+255),b
  3672  001B62  6BE4               	clrf	(??_doApplicationOneSecondWork+19)& (0+255),b
  3673  001B64  0E09               	movlw	9
  3674  001B66                     u17615:
  3675  001B66  90D8               	bcf	status,0,c
  3676  001B68  37E3               	rlcf	(??_doApplicationOneSecondWork+18)& (0+255),f,b
  3677  001B6A  37E4               	rlcf	(??_doApplicationOneSecondWork+19)& (0+255),f,b
  3678  001B6C  2EE8               	decfsz	wreg,f,c
  3679  001B6E  D7FB               	goto	u17615
  3680  001B70  51E1               	movf	(??_doApplicationOneSecondWork+16)& (0+255),w,b
  3681  001B72  25E3               	addwf	(??_doApplicationOneSecondWork+18)& (0+255),w,b
  3682  001B74  6FE5               	movwf	(??_doApplicationOneSecondWork+20)& (0+255),b
  3683  001B76  51E2               	movf	(??_doApplicationOneSecondWork+17)& (0+255),w,b
  3684  001B78  21E4               	addwfc	(??_doApplicationOneSecondWork+19)& (0+255),w,b
  3685  001B7A  6FE6               	movwf	(??_doApplicationOneSecondWork+21)& (0+255),b
  3686  001B7C  51DF               	movf	(??_doApplicationOneSecondWork+14)& (0+255),w,b
  3687  001B7E  25E5               	addwf	(??_doApplicationOneSecondWork+20)& (0+255),w,b
  3688  001B80  6FE7               	movwf	(??_doApplicationOneSecondWork+22)& (0+255),b
  3689  001B82  51E0               	movf	(??_doApplicationOneSecondWork+15)& (0+255),w,b
  3690  001B84  21E6               	addwfc	(??_doApplicationOneSecondWork+21)& (0+255),w,b
  3691  001B86  6FE8               	movwf	(??_doApplicationOneSecondWork+23)& (0+255),b
  3692  001B88  51DD               	movf	(??_doApplicationOneSecondWork+12)& (0+255),w,b
  3693  001B8A  25E7               	addwf	(??_doApplicationOneSecondWork+22)& (0+255),w,b
  3694  001B8C  6FE9               	movwf	(??_doApplicationOneSecondWork+24)& (0+255),b
  3695  001B8E  51DE               	movf	(??_doApplicationOneSecondWork+13)& (0+255),w,b
  3696  001B90  21E8               	addwfc	(??_doApplicationOneSecondWork+23)& (0+255),w,b
  3697  001B92  6FEA               	movwf	(??_doApplicationOneSecondWork+25)& (0+255),b
  3698  001B94  51DB               	movf	(??_doApplicationOneSecondWork+10)& (0+255),w,b
  3699  001B96  25E9               	addwf	(??_doApplicationOneSecondWork+24)& (0+255),w,b
  3700  001B98  6FEB               	movwf	(??_doApplicationOneSecondWork+26)& (0+255),b
  3701  001B9A  51DC               	movf	(??_doApplicationOneSecondWork+11)& (0+255),w,b
  3702  001B9C  21EA               	addwfc	(??_doApplicationOneSecondWork+25)& (0+255),w,b
  3703  001B9E  6FEC               	movwf	(??_doApplicationOneSecondWork+27)& (0+255),b
  3704  001BA0  51D9               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3705  001BA2  25EB               	addwf	(??_doApplicationOneSecondWork+26)& (0+255),w,b
  3706  001BA4  6FED               	movwf	(??_doApplicationOneSecondWork+28)& (0+255),b
  3707  001BA6  51DA               	movf	(??_doApplicationOneSecondWork+9)& (0+255),w,b
  3708  001BA8  21EC               	addwfc	(??_doApplicationOneSecondWork+27)& (0+255),w,b
  3709  001BAA  6FEE               	movwf	(??_doApplicationOneSecondWork+29)& (0+255),b
  3710  001BAC  51D7               	movf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3711  001BAE  25ED               	addwf	(??_doApplicationOneSecondWork+28)& (0+255),w,b
  3712  001BB0  6FEF               	movwf	(??_doApplicationOneSecondWork+30)& (0+255),b
  3713  001BB2  51D8               	movf	(??_doApplicationOneSecondWork+7)& (0+255),w,b
  3714  001BB4  21EE               	addwfc	(??_doApplicationOneSecondWork+29)& (0+255),w,b
  3715  001BB6  6FF0               	movwf	(??_doApplicationOneSecondWork+31)& (0+255),b
  3716  001BB8  51D5               	movf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3717  001BBA  25EF               	addwf	(??_doApplicationOneSecondWork+30)& (0+255),w,b
  3718  001BBC  6FF1               	movwf	(??_doApplicationOneSecondWork+32)& (0+255),b
  3719  001BBE  51D6               	movf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3720  001BC0  21F0               	addwfc	(??_doApplicationOneSecondWork+31)& (0+255),w,b
  3721  001BC2  6FF2               	movwf	(??_doApplicationOneSecondWork+33)& (0+255),b
  3722  001BC4  51D3               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3723  001BC6  25F1               	addwf	(??_doApplicationOneSecondWork+32)& (0+255),w,b
  3724  001BC8  6FF3               	movwf	(??_doApplicationOneSecondWork+34)& (0+255),b
  3725  001BCA  51D4               	movf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3726  001BCC  21F2               	addwfc	(??_doApplicationOneSecondWork+33)& (0+255),w,b
  3727  001BCE  6FF4               	movwf	(??_doApplicationOneSecondWork+35)& (0+255),b
  3728  001BD0  51D1               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  3729  001BD2  25F3               	addwf	(??_doApplicationOneSecondWork+34)& (0+255),w,b
  3730  001BD4  6F6A               	movwf	_current_iostate& (0+255),b
  3731  001BD6  0E00               	movlw	0
  3732  001BD8  21F4               	addwfc	(??_doApplicationOneSecondWork+35)& (0+255),w,b
  3733  001BDA  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736  001BDC  0012               	return	
  3737  001BDE                     __end_of_doApplicationOneSecondWork:
  3738                           	opt stack 0
  3739  001BDE                     PL14:
  3740                           	opt stack 21
  3741  001BDE  0E01               	movlw	1
  3742  001BE0  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3743  001BE2  6BD3               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3744  001BE4  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3745  001BE6  D003               	goto	u17154
  3746  001BE8                     u17155:
  3747  001BE8  90D8               	bcf	status,0,c
  3748  001BEA  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3749  001BEC  37D3               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3750  001BEE                     u17154:
  3751  001BEE  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3752  001BF0  D7FB               	goto	u17155
  3753  001BF2  516A               	movf	_current_iostate& (0+255),w,b
  3754  001BF4  17D2               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3755  001BF6  516B               	movf	(_current_iostate+1)& (0+255),w,b
  3756  001BF8  17D3               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3757  001BFA  51D3               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3758  001BFC  11D2               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3759  001BFE  0012               	return	
  3760  001C00                     __end_ofPL14:
  3761                           	opt stack 0
  3762  001C00                     PL26:
  3763                           	opt stack 21
  3764  001C00  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3765  001C02  0D02               	mullw	2
  3766  001C04  0E00               	movlw	low _channel_pulse_timer
  3767  001C06  24F3               	addwf	prodl,w,c
  3768  001C08  6ED9               	movwf	fsr2l,c
  3769  001C0A  0E01               	movlw	high _channel_pulse_timer
  3770  001C0C  20F4               	addwfc	prodh,w,c
  3771  001C0E  6EDA               	movwf	fsr2h,c
  3772  001C10  0012               	return	
  3773  001C12                     __end_ofPL26:
  3774                           	opt stack 0
  3775  001C12                     PL32:
  3776                           	opt stack 21
  3777  001C12  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3778  001C14  0E00               	movlw	0
  3779  001C16  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3780  001C18  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3781  001C1A  0D02               	mullw	2
  3782  001C1C  50F3               	movf	prodl,w,c
  3783  001C1E  0F82               	addlw	low _channel_protection_timer
  3784  001C20  6ED9               	movwf	fsr2l,c
  3785  001C22  6ADA               	clrf	fsr2h,c
  3786  001C24  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3787  001C28  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3788  001C2C  0012               	return	
  3789  001C2E                     __end_ofPL32:
  3790                           	opt stack 0
  3791  001C2E                     PL34:
  3792                           	opt stack 21
  3793  001C2E  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3794  001C30  0D02               	mullw	2
  3795  001C32  0E71               	movlw	113
  3796  001C34  24F3               	addwf	prodl,w,c
  3797  001C36  6E08               	movwf	?_Read_b_eep,c
  3798  001C38  0E00               	movlw	0
  3799  001C3A  20F4               	addwfc	prodh,w,c
  3800  001C3C  6E09               	movwf	?_Read_b_eep+1,c
  3801  001C3E  0012               	return	
  3802  001C40                     __end_ofPL34:
  3803                           	opt stack 0
  3804  001C40                     PL36:
  3805                           	opt stack 21
  3806  001C40  51FD               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3807  001C42  0D02               	mullw	2
  3808  001C44  50F3               	movf	prodl,w,c
  3809  001C46  0F82               	addlw	low _channel_protection_timer
  3810  001C48  6ED9               	movwf	fsr2l,c
  3811  001C4A  6ADA               	clrf	fsr2h,c
  3812  001C4C  0012               	return	
  3813  001C4E                     __end_ofPL36:
  3814                           	opt stack 0
  3815  001C4E                     PL38:
  3816                           	opt stack 21
  3817  001C4E  C0FD  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3818  001C52  0E01               	movlw	1
  3819  001C54  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3820  001C56  6BD3               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3821  001C58  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3822  001C5A  0012               	return	
  3823  001C5C                     __end_ofPL38:
  3824                           	opt stack 0
  3825  001C5C                     PL50:
  3826                           	opt stack 21
  3827  001C5C  0E5B               	movlw	91
  3828  001C5E  25FD               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3829  001C60  6E08               	movwf	?_Read_b_eep,c
  3830  001C62  6A09               	clrf	?_Read_b_eep+1,c
  3831  001C64  0E00               	movlw	0
  3832  001C66  2209               	addwfc	?_Read_b_eep+1,f,c
  3833  001C68  0C00               	retlw	0
  3834  001C6A                     __end_ofPL50:
  3835                           	opt stack 0
  3836  001C6A                     PL102:
  3837                           	opt stack 21
  3838  001C6A  90D8               	bcf	status,0,c
  3839  001C6C  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3840  001C6E  37D3               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3841  001C70  0012               	return	
  3842  001C72                     __end_ofPL102:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           intcon2	equ	0xFF1
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           indf1	equ	0xFE7
  3855                           fsr1h	equ	0xFE2
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           plusw2	equ	0xFDB
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           
  3865 ;; *************** function _vscp_doOneSecondWork *****************
  3866 ;; Defined at:
  3867 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;		None
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;		None               void
  3874 ;; Registers used:
  3875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : F/0
  3878 ;;		On exit  : F/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3881 ;;      Params:         0       0       0       0       0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0
  3883 ;;      Temps:          1       0       0       0       0       0       0
  3884 ;;      Totals:         1       0       0       0       0       0       0
  3885 ;;Total ram usage:        1 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    8
  3888 ;; This function calls:
  3889 ;;		_vscp_getZone
  3890 ;;		_vscp_getSubzone
  3891 ;;		_vscp_sendHeartBeat
  3892 ;; This function is called by:
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text3
  3898  0043D2                     __ptext3:
  3899                           	opt stack 0
  3900  0043D2                     _vscp_doOneSecondWork:
  3901                           	opt stack 21
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;vscp_firmware.c: 526: ++vscp_second;
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;incstack = 0
  3908                           ;incstack = 0
  3909  0043D2  2B81               	incf	_vscp_second& (0+255),f,b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  3913  0043D4  0E3B               	movlw	59
  3914  0043D6  6581               	cpfsgt	_vscp_second& (0+255),b
  3915  0043D8  D00D               	goto	l13144
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;vscp_firmware.c: 529: vscp_second = 0;
  3919  0043DA  6B81               	clrf	_vscp_second& (0+255),b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;vscp_firmware.c: 530: vscp_minute++;
  3923  0043DC  2B7C               	incf	_vscp_minute& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  3927  0043DE  517E               	movf	_vscp_node_state& (0+255),w,b
  3928  0043E0  0A03               	xorlw	3
  3929  0043E2  E108               	bnz	l13144
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  3933                           ;vscp_firmware.c: 535: vscp_getSubzone());
  3934  0043E4  EC95  F024         	call	_vscp_getSubzone	;wreg free
  3935  0043E8  0100               	movlb	0	; () banked
  3936  0043EA  6FCF               	movwf	?_vscp_sendHeartBeat& (0+255),b
  3937  0043EC  EC9A  F024         	call	_vscp_getZone	;wreg free
  3938  0043F0  EC3D  F023         	call	_vscp_sendHeartBeat
  3939  0043F4                     l13144:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;vscp_firmware.c: 536: }
  3943                           ;vscp_firmware.c: 537: }
  3944                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  3945  0043F4  0E3B               	movlw	59
  3946  0043F6  657C               	cpfsgt	_vscp_minute& (0+255),b
  3947  0043F8  D002               	goto	l13150
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;vscp_firmware.c: 540: vscp_minute = 0;
  3951  0043FA  6B7C               	clrf	_vscp_minute& (0+255),b
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;vscp_firmware.c: 541: vscp_hour++;
  3955  0043FC  2B7A               	incf	_vscp_hour& (0+255),f,b
  3956  0043FE                     l13150:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;vscp_firmware.c: 542: }
  3960                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  3961  0043FE  0E17               	movlw	23
  3962  004400  657A               	cpfsgt	_vscp_hour& (0+255),b
  3963  004402  D001               	goto	l13154
  3964                           
  3965                           ; BSR set to: 0
  3966  004404  6B7A               	clrf	_vscp_hour& (0+255),b
  3967  004406                     l13154:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  3971  004406  517E               	movf	_vscp_node_state& (0+255),w,b
  3972  004408  0A03               	xorlw	3
  3973  00440A  E109               	bnz	l1357
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  3977  00440C  2B79               	incf	_vscp_guid_reset& (0+255),f,b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  3981  00440E  C079  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  3982  004412  0E0F               	movlw	15
  3983  004414  164D               	andwf	??_vscp_doOneSecondWork,f,c
  3984  004416  0E02               	movlw	2
  3985  004418  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  3986  00441A  B0D8               	btfsc	status,0,c
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  3990  00441C  6B79               	clrf	_vscp_guid_reset& (0+255),b
  3991  00441E                     l1357:
  3992                           
  3993                           ; BSR set to: 0
  3994  00441E  0012               	return	
  3995  004420                     __end_of_vscp_doOneSecondWork:
  3996                           	opt stack 0
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           intcon	equ	0xFF2
  4004                           intcon2	equ	0xFF1
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           indf1	equ	0xFE7
  4008                           fsr1h	equ	0xFE2
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           plusw2	equ	0xFDB
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _vscp_sendHeartBeat *****************
  4019 ;; Defined at:
  4020 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  zone            1    wreg     unsigned char 
  4023 ;;  subzone         1   20[BANK0 ] unsigned char 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  zone            1   75[COMRAM] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;		None               void
  4028 ;; Registers used:
  4029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : F/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4035 ;;      Params:         0       1       0       0       0       0       0
  4036 ;;      Locals:         1       0       0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0
  4038 ;;      Totals:         1       1       0       0       0       0       0
  4039 ;;Total ram usage:        2 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    7
  4042 ;; This function calls:
  4043 ;;		_vscp_sendEvent
  4044 ;; This function is called by:
  4045 ;;		_vscp_doOneSecondWork
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text4
  4050  00467A                     __ptext4:
  4051                           	opt stack 0
  4052  00467A                     _vscp_sendHeartBeat:
  4053                           	opt stack 21
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;incstack = 0
  4057                           ;incstack = 0
  4058                           ;vscp_sendHeartBeat@zone stored from wreg
  4059  00467A  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  4060                           
  4061                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4062  00467E  0E83               	movlw	131
  4063  004680  0100               	movlb	0	; () banked
  4064  004682  6FA4               	movwf	_vscp_omsg& (0+255),b
  4065                           
  4066                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4067  004684  0E07               	movlw	7
  4068  004686  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  4069                           
  4070                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4071  004688  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  4072  00468A  0E14               	movlw	20
  4073  00468C  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  4074                           
  4075                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4076  00468E  0E09               	movlw	9
  4077  004690  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4081  004692  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  4085  004694  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  4089  004698  C0CF  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;vscp_firmware.c: 388: vscp_sendEvent();
  4093  00469C  EF76  F023         	goto	_vscp_sendEvent	;wreg free
  4094  0046A0                     __end_of_vscp_sendHeartBeat:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           indf1	equ	0xFE7
  4107                           fsr1h	equ	0xFE2
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           plusw2	equ	0xFDB
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _vscp_getSubzone *****************
  4118 ;; Defined at:
  4119 ;;		line 1388 in file "../main.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      unsigned char 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : F/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         0       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    3
  4140 ;; This function calls:
  4141 ;;		_Read_b_eep
  4142 ;; This function is called by:
  4143 ;;		_vscp_doOneSecondWork
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text5
  4148  00492A                     __ptext5:
  4149                           	opt stack 0
  4150  00492A                     _vscp_getSubzone:
  4151                           	opt stack 25
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;main.c: 1389: return Read_b_eep(0x43 + 1);
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;incstack = 0
  4158                           ;incstack = 0
  4159  00492A  6A09               	clrf	?_Read_b_eep+1,c
  4160  00492C  0E44               	movlw	68
  4161  00492E  6E08               	movwf	?_Read_b_eep,c
  4162  004930  EF83  F024         	goto	_Read_b_eep	;wreg free
  4163  004934                     __end_of_vscp_getSubzone:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           intcon2	equ	0xFF1
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           fsr1h	equ	0xFE2
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           plusw2	equ	0xFDB
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _vscp_getZone *****************
  4187 ;; Defined at:
  4188 ;;		line 1379 in file "../main.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      unsigned char 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : F/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4202 ;;      Params:         0       0       0       0       0       0       0
  4203 ;;      Locals:         0       0       0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0
  4205 ;;      Totals:         0       0       0       0       0       0       0
  4206 ;;Total ram usage:        0 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    3
  4209 ;; This function calls:
  4210 ;;		_Read_b_eep
  4211 ;; This function is called by:
  4212 ;;		_vscp_doOneSecondWork
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text6
  4217  004934                     __ptext6:
  4218                           	opt stack 0
  4219  004934                     _vscp_getZone:
  4220                           	opt stack 25
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;main.c: 1380: return Read_b_eep(0x43 + 0);
  4224                           
  4225                           ;incstack = 0
  4226                           ;incstack = 0
  4227  004934  6A09               	clrf	?_Read_b_eep+1,c
  4228  004936  0E43               	movlw	67
  4229  004938  6E08               	movwf	?_Read_b_eep,c
  4230  00493A  EF83  F024         	goto	_Read_b_eep	;wreg free
  4231  00493E                     __end_of_vscp_getZone:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           intcon2	equ	0xFF1
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           indf1	equ	0xFE7
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function _vscp_error *****************
  4255 ;; Defined at:
  4256 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		None
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         0       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    2
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text7
  4285  004974                     __ptext7:
  4286                           	opt stack 0
  4287  004974                     _vscp_error:
  4288                           	opt stack 27
  4289                           
  4290                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  4291                           
  4292                           ;incstack = 0
  4293                           ;incstack = 0
  4294  004974  6A56               	clrf	_vscp_initledfunc,c
  4295  004976  0012               	return	
  4296  004978                     __end_of_vscp_error:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           intcon2	equ	0xFF1
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           indf1	equ	0xFE7
  4309                           fsr1h	equ	0xFE2
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           plusw2	equ	0xFDB
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function _doDM *****************
  4320 ;; Defined at:
  4321 ;;		line 2524 in file "../main.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  class_mask      2   32[BANK0 ] unsigned short 
  4326 ;;  class_filter    2   30[BANK0 ] unsigned short 
  4327 ;;  i               1   44[BANK0 ] unsigned char 
  4328 ;;  dmflags         1   43[BANK0 ] unsigned char 
  4329 ;;  type_mask       1   35[BANK0 ] unsigned char 
  4330 ;;  type_filter     1   34[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : F/0
  4337 ;;		On exit  : F/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4340 ;;      Params:         0       0       0       0       0       0       0
  4341 ;;      Locals:         0      15       0       0       0       0       0
  4342 ;;      Temps:          0       3       0       0       0       0       0
  4343 ;;      Totals:         0      18       0       0       0       0       0
  4344 ;;Total ram usage:       18 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    9
  4347 ;; This function calls:
  4348 ;;		_Read_b_eep
  4349 ;;		_doActionOff
  4350 ;;		_doActionOn
  4351 ;;		_doActionPulseOn
  4352 ;;		_doActionPulseOff
  4353 ;;		_doActionStatus
  4354 ;;		_doActionStatusAll
  4355 ;;		_doActionToggle
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text8
  4362  002D00                     __ptext8:
  4363                           	opt stack 0
  4364  002D00                     _doDM:
  4365                           	opt stack 20
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;main.c: 2525: unsigned char i;
  4369                           ;main.c: 2526: unsigned char dmflags;
  4370                           ;main.c: 2527: unsigned short class_filter;
  4371                           ;main.c: 2528: unsigned short class_mask;
  4372                           ;main.c: 2529: unsigned char type_filter;
  4373                           ;main.c: 2530: unsigned char type_mask;
  4374                           ;main.c: 2533: if ( 0 == vscp_imsg.vscp_class ) return;
  4375                           
  4376                           ;incstack = 0
  4377                           ;incstack = 0
  4378  002D00  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  4379  002D02  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  4380  002D04  E101 D105          	bz	l866
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;main.c: 2535: for (i = 0; i<8; i++) {
  4384  002D08  6BE7               	clrf	doDM@i& (0+255),b
  4385  002D0A                     l13052:
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;main.c: 2538: dmflags = Read_b_eep(0x43 + 46 + 40u + 0 + 1 + (8 * i));
  4389  002D0A  51E7               	movf	doDM@i& (0+255),w,b
  4390  002D0C  D90D               	call	PL44	;call to abstracted procedure
  4391  002D0E  0E9A               	movlw	154
  4392  002D10  25D6               	addwf	??_doDM& (0+255),w,b
  4393  002D12  6E08               	movwf	?_Read_b_eep,c
  4394  002D14  0E00               	movlw	0
  4395  002D16  21D7               	addwfc	(??_doDM+1)& (0+255),w,b
  4396  002D18  6E09               	movwf	?_Read_b_eep+1,c
  4397  002D1A  EC83  F024         	call	_Read_b_eep	;wreg free
  4398  002D1E  0100               	movlb	0	; () banked
  4399  002D20  6FE6               	movwf	doDM@dmflags& (0+255),b
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 2546: if ( dmflags & 0x80 ) {
  4403  002D22  AFE6               	btfss	doDM@dmflags& (0+255),7,b
  4404  002D24  D0F1               	goto	l13114
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;main.c: 2549: if ( ( dmflags & 0x40 ) &&
  4408                           ;main.c: 2550: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i)) ) ) {
  4409  002D26  ADE6               	btfss	doDM@dmflags& (0+255),6,b
  4410  002D28  D00E               	goto	l870
  4411                           
  4412                           ; BSR set to: 0
  4413  002D2A  51E7               	movf	doDM@i& (0+255),w,b
  4414  002D2C  D8FD               	call	PL44	;call to abstracted procedure
  4415  002D2E  0E99               	movlw	153
  4416  002D30  25D6               	addwf	??_doDM& (0+255),w,b
  4417  002D32  6E08               	movwf	?_Read_b_eep,c
  4418  002D34  0E00               	movlw	0
  4419  002D36  21D7               	addwfc	(??_doDM+1)& (0+255),w,b
  4420  002D38  6E09               	movwf	?_Read_b_eep+1,c
  4421  002D3A  EC83  F024         	call	_Read_b_eep	;wreg free
  4422  002D3E  0100               	movlb	0	; () banked
  4423  002D40  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  4424  002D42  E001 D0E1          	bnz	l13114
  4425  002D46                     l870:
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;main.c: 2552: }
  4429                           ;main.c: 2555: if ( dmflags & 0x10 ) {
  4430  002D46  A9E6               	btfss	doDM@dmflags& (0+255),4,b
  4431  002D48  D00B               	goto	l872
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;main.c: 2556: if ( 255 != vscp_imsg.data[ 1 ] ) {
  4435  002D4A  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  4436  002D4C  E009               	bz	l872
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 2557: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 0) ) {
  4440  002D4E  6A09               	clrf	?_Read_b_eep+1,c
  4441  002D50  0E43               	movlw	67
  4442  002D52  6E08               	movwf	?_Read_b_eep,c
  4443  002D54  EC83  F024         	call	_Read_b_eep	;wreg free
  4444  002D58  0100               	movlb	0	; () banked
  4445  002D5A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4446  002D5C  E001 D0D4          	bnz	l13114
  4447  002D60                     l872:
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;main.c: 2559: }
  4451                           ;main.c: 2560: }
  4452                           ;main.c: 2561: }
  4453                           ;main.c: 2564: if ( dmflags & 0x08 ) {
  4454  002D60  A7E6               	btfss	doDM@dmflags& (0+255),3,b
  4455  002D62  D00B               	goto	l13074
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;main.c: 2565: if ( 255 != vscp_imsg.data[ 2 ] ) {
  4459  002D64  299E               	incf	(_vscp_imsg+8)& (0+255),w,b
  4460  002D66  E009               	bz	l13074
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 2566: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 1) ) {
  4464  002D68  6A09               	clrf	?_Read_b_eep+1,c
  4465  002D6A  0E44               	movlw	68
  4466  002D6C  6E08               	movwf	?_Read_b_eep,c
  4467  002D6E  EC83  F024         	call	_Read_b_eep	;wreg free
  4468  002D72  0100               	movlb	0	; () banked
  4469  002D74  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4470  002D76  E001 D0C7          	bnz	l13114
  4471  002D7A                     l13074:
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 2568: }
  4475                           ;main.c: 2569: }
  4476                           ;main.c: 2570: }
  4477                           ;main.c: 2572: class_filter = ( ( dmflags & 0x01) << 8 ) +
  4478                           ;main.c: 2573: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 3);
  4479  002D7A  51E7               	movf	doDM@i& (0+255),w,b
  4480  002D7C  0D08               	mullw	8
  4481  002D7E  0E9C               	movlw	156
  4482  002D80  24F3               	addwf	prodl,w,c
  4483  002D82  6E08               	movwf	?_Read_b_eep,c
  4484  002D84  0E00               	movlw	0
  4485  002D86  20F4               	addwfc	prodh,w,c
  4486  002D88  6E09               	movwf	?_Read_b_eep+1,c
  4487  002D8A  EC83  F024         	call	_Read_b_eep	;wreg free
  4488  002D8E  0100               	movlb	0	; () banked
  4489  002D90  6FD6               	movwf	??_doDM& (0+255),b
  4490  002D92  51E6               	movf	doDM@dmflags& (0+255),w,b
  4491  002D94  0B01               	andlw	1
  4492  002D96  6FD8               	movwf	(??_doDM+2)& (0+255),b
  4493  002D98  6BD7               	clrf	(??_doDM+1)& (0+255),b
  4494  002D9A  51D6               	movf	??_doDM& (0+255),w,b
  4495  002D9C  25D7               	addwf	(??_doDM+1)& (0+255),w,b
  4496  002D9E  6FD9               	movwf	doDM@class_filter& (0+255),b
  4497  002DA0  0E00               	movlw	0
  4498  002DA2  21D8               	addwfc	(??_doDM+2)& (0+255),w,b
  4499  002DA4  6FDA               	movwf	(doDM@class_filter+1)& (0+255),b
  4500                           
  4501                           ;main.c: 2579: class_mask = ( ( dmflags & 0x02 ) << 7 ) +
  4502                           ;main.c: 2580: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 2);
  4503  002DA6  51E7               	movf	doDM@i& (0+255),w,b
  4504  002DA8  0D08               	mullw	8
  4505  002DAA  0E9B               	movlw	155
  4506  002DAC  24F3               	addwf	prodl,w,c
  4507  002DAE  6E08               	movwf	?_Read_b_eep,c
  4508  002DB0  0E00               	movlw	0
  4509  002DB2  20F4               	addwfc	prodh,w,c
  4510  002DB4  6E09               	movwf	?_Read_b_eep+1,c
  4511  002DB6  EC83  F024         	call	_Read_b_eep	;wreg free
  4512  002DBA  0100               	movlb	0	; () banked
  4513  002DBC  6FD6               	movwf	??_doDM& (0+255),b
  4514  002DBE  51E6               	movf	doDM@dmflags& (0+255),w,b
  4515  002DC0  0B02               	andlw	2
  4516  002DC2  6FD7               	movwf	(??_doDM+1)& (0+255),b
  4517  002DC4  6BD8               	clrf	(??_doDM+2)& (0+255),b
  4518  002DC6  0E07               	movlw	7
  4519  002DC8                     u16995:
  4520  002DC8  90D8               	bcf	status,0,c
  4521  002DCA  37D7               	rlcf	(??_doDM+1)& (0+255),f,b
  4522  002DCC  37D8               	rlcf	(??_doDM+2)& (0+255),f,b
  4523  002DCE  2EE8               	decfsz	wreg,f,c
  4524  002DD0  D7FB               	goto	u16995
  4525  002DD2  51D6               	movf	??_doDM& (0+255),w,b
  4526  002DD4  25D7               	addwf	(??_doDM+1)& (0+255),w,b
  4527  002DD6  6FDB               	movwf	doDM@class_mask& (0+255),b
  4528  002DD8  0E00               	movlw	0
  4529  002DDA  21D8               	addwfc	(??_doDM+2)& (0+255),w,b
  4530  002DDC  6FDC               	movwf	(doDM@class_mask+1)& (0+255),b
  4531                           
  4532                           ;main.c: 2586: type_filter = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 5);
  4533  002DDE  51E7               	movf	doDM@i& (0+255),w,b
  4534  002DE0  0D08               	mullw	8
  4535  002DE2  0E9E               	movlw	158
  4536  002DE4  24F3               	addwf	prodl,w,c
  4537  002DE6  6E08               	movwf	?_Read_b_eep,c
  4538  002DE8  0E00               	movlw	0
  4539  002DEA  20F4               	addwfc	prodh,w,c
  4540  002DEC  6E09               	movwf	?_Read_b_eep+1,c
  4541  002DEE  EC83  F024         	call	_Read_b_eep	;wreg free
  4542  002DF2  0100               	movlb	0	; () banked
  4543  002DF4  6FDD               	movwf	doDM@type_filter& (0+255),b
  4544                           
  4545                           ;main.c: 2592: type_mask = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 4);
  4546  002DF6  51E7               	movf	doDM@i& (0+255),w,b
  4547  002DF8  0D08               	mullw	8
  4548  002DFA  0E9D               	movlw	157
  4549  002DFC  24F3               	addwf	prodl,w,c
  4550  002DFE  6E08               	movwf	?_Read_b_eep,c
  4551  002E00  0E00               	movlw	0
  4552  002E02  20F4               	addwfc	prodh,w,c
  4553  002E04  6E09               	movwf	?_Read_b_eep+1,c
  4554  002E06  EC83  F024         	call	_Read_b_eep	;wreg free
  4555  002E0A  0100               	movlb	0	; () banked
  4556  002E0C  6FDE               	movwf	doDM@type_mask& (0+255),b
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;main.c: 2598: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  4560                           ;main.c: 2599: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  4561  002E0E  EE20  F098         	lfsr	2,_vscp_imsg+2
  4562  002E12  CFDE F0D6          	movff	postinc2,??_doDM
  4563  002E16  CFDD F0D7          	movff	postdec2,??_doDM+1
  4564  002E1A  51D9               	movf	doDM@class_filter& (0+255),w,b
  4565  002E1C  1BD6               	xorwf	??_doDM& (0+255),f,b
  4566  002E1E  51DA               	movf	(doDM@class_filter+1)& (0+255),w,b
  4567  002E20  1BD7               	xorwf	(??_doDM+1)& (0+255),f,b
  4568  002E22  51DB               	movf	doDM@class_mask& (0+255),w,b
  4569  002E24  17D6               	andwf	??_doDM& (0+255),f,b
  4570  002E26  51DC               	movf	(doDM@class_mask+1)& (0+255),w,b
  4571  002E28  17D7               	andwf	(??_doDM+1)& (0+255),f,b
  4572  002E2A  51D7               	movf	(??_doDM+1)& (0+255),w,b
  4573  002E2C  11D6               	iorwf	??_doDM& (0+255),w,b
  4574  002E2E  E16C               	bnz	l13114
  4575                           
  4576                           ; BSR set to: 0
  4577  002E30  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  4578  002E32  19DD               	xorwf	doDM@type_filter& (0+255),w,b
  4579  002E34  15DE               	andwf	doDM@type_mask& (0+255),w,b
  4580  002E36  E04E               	bz	l13112
  4581  002E38  D067               	goto	l13114
  4582  002E3A                     l13082:
  4583                           
  4584                           ;main.c: 2610: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4585  002E3A  D86C               	call	PL16	;call to abstracted procedure
  4586  002E3C  EC83  F024         	call	_Read_b_eep	;wreg free
  4587  002E40  0100               	movlb	0	; () banked
  4588  002E42  6FDF               	movwf	_doDM$2393& (0+255),b
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;main.c: 2610: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4592  002E44  C0DF  F04F         	movff	_doDM$2393,?_doActionOn
  4593  002E48  51E6               	movf	doDM@dmflags& (0+255),w,b
  4594  002E4A  EC43  F01C         	call	_doActionOn
  4595                           
  4596                           ;main.c: 2613: break;
  4597  002E4E  D05C               	goto	l13114
  4598  002E50                     l13086:
  4599                           
  4600                           ;main.c: 2616: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4601  002E50  D861               	call	PL16	;call to abstracted procedure
  4602  002E52  EC83  F024         	call	_Read_b_eep	;wreg free
  4603  002E56  0100               	movlb	0	; () banked
  4604  002E58  6FE0               	movwf	_doDM$2394& (0+255),b
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;main.c: 2616: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4608  002E5A  C0E0  F04F         	movff	_doDM$2394,?_doActionOff
  4609  002E5E  51E6               	movf	doDM@dmflags& (0+255),w,b
  4610  002E60  ECDB  F01F         	call	_doActionOff
  4611                           
  4612                           ;main.c: 2619: break;
  4613  002E64  D051               	goto	l13114
  4614  002E66                     l13090:
  4615                           
  4616                           ;main.c: 2622: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4617  002E66  D856               	call	PL16	;call to abstracted procedure
  4618  002E68  EC83  F024         	call	_Read_b_eep	;wreg free
  4619  002E6C  0100               	movlb	0	; () banked
  4620  002E6E  6FE1               	movwf	_doDM$2395& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;main.c: 2622: doActionPulseOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4624  002E70  C0E1  F04F         	movff	_doDM$2395,?_doActionPulseOn
  4625  002E74  51E6               	movf	doDM@dmflags& (0+255),w,b
  4626  002E76  ECA9  F01B         	call	_doActionPulseOn
  4627                           
  4628                           ;main.c: 2625: break;
  4629  002E7A  D046               	goto	l13114
  4630  002E7C                     l13094:
  4631                           
  4632                           ;main.c: 2628: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4633  002E7C  D84B               	call	PL16	;call to abstracted procedure
  4634  002E7E  EC83  F024         	call	_Read_b_eep	;wreg free
  4635  002E82  0100               	movlb	0	; () banked
  4636  002E84  6FE2               	movwf	_doDM$2396& (0+255),b
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;main.c: 2628: doActionPulseOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) 
      +                          );
  4640  002E86  C0E2  F04F         	movff	_doDM$2396,?_doActionPulseOff
  4641  002E8A  51E6               	movf	doDM@dmflags& (0+255),w,b
  4642  002E8C  EC70  F01E         	call	_doActionPulseOff
  4643                           
  4644                           ;main.c: 2631: break;
  4645  002E90  D03B               	goto	l13114
  4646  002E92                     l13098:
  4647                           
  4648                           ;main.c: 2634: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4649  002E92  D840               	call	PL16	;call to abstracted procedure
  4650  002E94  EC83  F024         	call	_Read_b_eep	;wreg free
  4651  002E98  0100               	movlb	0	; () banked
  4652  002E9A  6FE3               	movwf	_doDM$2397& (0+255),b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;main.c: 2634: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4656  002E9C  C0E3  F04F         	movff	_doDM$2397,?_doActionStatus
  4657  002EA0  51E6               	movf	doDM@dmflags& (0+255),w,b
  4658  002EA2  EC6C  F01F         	call	_doActionStatus
  4659                           
  4660                           ;main.c: 2637: break;
  4661  002EA6  D030               	goto	l13114
  4662  002EA8                     l13102:
  4663                           
  4664                           ;main.c: 2640: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4665  002EA8  D835               	call	PL16	;call to abstracted procedure
  4666  002EAA  EC83  F024         	call	_Read_b_eep	;wreg free
  4667  002EAE  0100               	movlb	0	; () banked
  4668  002EB0  6FE4               	movwf	_doDM$2398& (0+255),b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;main.c: 2640: doActionStatusAll( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7)
      +                           );
  4672  002EB2  C0E4  F0D1         	movff	_doDM$2398,?_doActionStatusAll
  4673  002EB6  51E6               	movf	doDM@dmflags& (0+255),w,b
  4674  002EB8  ECEC  F023         	call	_doActionStatusAll
  4675                           
  4676                           ;main.c: 2643: break;
  4677  002EBC  D025               	goto	l13114
  4678  002EBE                     l13106:
  4679                           
  4680                           ;main.c: 2646: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4681  002EBE  D82A               	call	PL16	;call to abstracted procedure
  4682  002EC0  EC83  F024         	call	_Read_b_eep	;wreg free
  4683  002EC4  0100               	movlb	0	; () banked
  4684  002EC6  6FE5               	movwf	_doDM$2399& (0+255),b
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;main.c: 2646: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4688  002EC8  C0E5  F04F         	movff	_doDM$2399,?_doActionToggle
  4689  002ECC  51E6               	movf	doDM@dmflags& (0+255),w,b
  4690  002ECE  ECF0  F01E         	call	_doActionToggle
  4691                           
  4692                           ;main.c: 2649: break;
  4693  002ED2  D01A               	goto	l13114
  4694  002ED4                     l13112:
  4695                           
  4696                           ; BSR set to: 0
  4697  002ED4  51E7               	movf	doDM@i& (0+255),w,b
  4698  002ED6  0D08               	mullw	8
  4699  002ED8  0E9F               	movlw	159
  4700  002EDA  24F3               	addwf	prodl,w,c
  4701  002EDC  6E08               	movwf	?_Read_b_eep,c
  4702  002EDE  0E00               	movlw	0
  4703  002EE0  20F4               	addwfc	prodh,w,c
  4704  002EE2  6E09               	movwf	?_Read_b_eep+1,c
  4705  002EE4  EC83  F024         	call	_Read_b_eep	;wreg free
  4706                           
  4707                           ; Switch size 1, requested type "space"
  4708                           ; Number of cases is 8, Range of values is 0 to 7
  4709                           ; switch strategies available:
  4710                           ; Name         Instructions Cycles
  4711                           ; simple_byte           25    13 (average)
  4712                           ;	Chosen strategy is simple_byte
  4713  002EE8  0A00               	xorlw	0	; case 0
  4714  002EEA  E00E               	bz	l13114
  4715  002EEC  0A01               	xorlw	1	; case 1
  4716  002EEE  E0A5               	bz	l13082
  4717  002EF0  0A03               	xorlw	3	; case 2
  4718  002EF2  E0AE               	bz	l13086
  4719  002EF4  0A01               	xorlw	1	; case 3
  4720  002EF6  E0B7               	bz	l13090
  4721  002EF8  0A07               	xorlw	7	; case 4
  4722  002EFA  E0C0               	bz	l13094
  4723  002EFC  0A01               	xorlw	1	; case 5
  4724  002EFE  E0DF               	bz	l13106
  4725  002F00  0A03               	xorlw	3	; case 6
  4726  002F02  E0C7               	bz	l13098
  4727  002F04  0A01               	xorlw	1	; case 7
  4728  002F06  E0D0               	bz	l13102
  4729  002F08                     l13114:
  4730  002F08  0100               	movlb	0	; () banked
  4731  002F0A  2BE7               	incf	doDM@i& (0+255),f,b
  4732                           
  4733                           ; BSR set to: 0
  4734  002F0C  0E07               	movlw	7
  4735  002F0E  65E7               	cpfsgt	doDM@i& (0+255),b
  4736  002F10  D6FC               	goto	l13052
  4737  002F12                     l866:
  4738                           
  4739                           ; BSR set to: 0
  4740  002F12  0012               	return	
  4741  002F14                     __end_of_doDM:
  4742                           	opt stack 0
  4743  002F14                     PL16:
  4744                           	opt stack 20
  4745  002F14  0100               	movlb	0	; () banked
  4746  002F16  51E7               	movf	doDM@i& (0+255),w,b
  4747  002F18  0D08               	mullw	8
  4748  002F1A  0EA0               	movlw	160
  4749  002F1C  24F3               	addwf	prodl,w,c
  4750  002F1E  6E08               	movwf	?_Read_b_eep,c
  4751  002F20  0E00               	movlw	0
  4752  002F22  20F4               	addwfc	prodh,w,c
  4753  002F24  6E09               	movwf	?_Read_b_eep+1,c
  4754  002F26  0012               	return	
  4755  002F28                     __end_ofPL16:
  4756                           	opt stack 0
  4757  002F28                     PL44:
  4758                           	opt stack 20
  4759  002F28  6FD6               	movwf	??_doDM& (0+255),b
  4760  002F2A  6BD7               	clrf	(??_doDM+1)& (0+255),b
  4761  002F2C  90D8               	bcf	status,0,c
  4762  002F2E  37D6               	rlcf	??_doDM& (0+255),f,b
  4763  002F30  37D7               	rlcf	(??_doDM+1)& (0+255),f,b
  4764  002F32  90D8               	bcf	status,0,c
  4765  002F34  37D6               	rlcf	??_doDM& (0+255),f,b
  4766  002F36  37D7               	rlcf	(??_doDM+1)& (0+255),f,b
  4767  002F38  90D8               	bcf	status,0,c
  4768  002F3A  37D6               	rlcf	??_doDM& (0+255),f,b
  4769  002F3C  37D7               	rlcf	(??_doDM+1)& (0+255),f,b
  4770  002F3E  0012               	return	
  4771  002F40                     __end_ofPL44:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           indf1	equ	0xFE7
  4784                           fsr1h	equ	0xFE2
  4785                           fsr1l	equ	0xFE1
  4786                           indf2	equ	0xFDF
  4787                           postinc2	equ	0xFDE
  4788                           postdec2	equ	0xFDD
  4789                           plusw2	equ	0xFDB
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _doActionToggle *****************
  4795 ;; Defined at:
  4796 ;;		line 2997 in file "../main.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  dmflags         1    wreg     unsigned char 
  4799 ;;  arg             1   78[COMRAM] unsigned char 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  dmflags         1    0[COMRAM] unsigned char 
  4802 ;;  bOn             1   80[COMRAM] enum E15660
  4803 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;		None               void
  4806 ;; Registers used:
  4807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : F/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4813 ;;      Params:         1       0       0       0       0       0       0
  4814 ;;      Locals:         2       0       0       0       0       0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0
  4816 ;;      Totals:         3       0       0       0       0       0       0
  4817 ;;Total ram usage:        3 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    7
  4820 ;; This function calls:
  4821 ;;		_Read_b_eep
  4822 ;;		_SendInformationEvent
  4823 ;; This function is called by:
  4824 ;;		_doDM
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text9
  4829  003DE0                     __ptext9:
  4830                           	opt stack 0
  4831  003DE0                     _doActionToggle:
  4832                           	opt stack 21
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;main.c: 2998: unsigned char ctrlreg;
  4836                           ;main.c: 2999: BOOL bOn = 0;
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;incstack = 0
  4840                           ;incstack = 0
  4841  003DE0  6A51               	clrf	doActionToggle@bOn,c
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;main.c: 3002: if ( arg > 9 ) return;
  4845  003DE2  0E09               	movlw	9
  4846  003DE4  644F               	cpfsgt	doActionToggle@arg,c
  4847  003DE6  D001               	goto	l14496
  4848  003DE8  D076               	goto	l1005
  4849  003DEA                     l14496:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;main.c: 3004: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  4853  003DEA  0E5B               	movlw	91
  4854  003DEC  244F               	addwf	doActionToggle@arg,w,c
  4855  003DEE  6E08               	movwf	?_Read_b_eep,c
  4856  003DF0  6A09               	clrf	?_Read_b_eep+1,c
  4857  003DF2  0E00               	movlw	0
  4858  003DF4  2209               	addwfc	?_Read_b_eep+1,f,c
  4859  003DF6  EC83  F024         	call	_Read_b_eep	;wreg free
  4860  003DFA  6E50               	movwf	doActionToggle@ctrlreg,c
  4861                           
  4862                           ;main.c: 3007: if ( !( ctrlreg & 0x80 ) ) return;
  4863  003DFC  AE50               	btfss	doActionToggle@ctrlreg,7,c
  4864  003DFE  D06B               	goto	l1005
  4865  003E00  D03F               	goto	l14544
  4866  003E02                     l1008:
  4867                           
  4868                           ;main.c: 3012: if ( PORTBbits.RB0 ) {
  4869  003E02  A081               	btfss	3969,0,c	;volatile
  4870  003E04  D002               	goto	l1009
  4871                           
  4872                           ;main.c: 3013: PORTBbits.RB0 = 0;
  4873  003E06  9081               	bcf	3969,0,c	;volatile
  4874  003E08  D037               	goto	L18
  4875  003E0A                     l1009:
  4876                           
  4877                           ;main.c: 3016: else {
  4878                           ;main.c: 3017: PORTBbits.RB0 = 1;
  4879  003E0A  8081               	bsf	3969,0,c	;volatile
  4880  003E0C                     l14504:
  4881                           
  4882                           ;main.c: 3018: bOn = 1;
  4883  003E0C  0E01               	movlw	1
  4884  003E0E  6E51               	movwf	doActionToggle@bOn,c
  4885  003E10  D04B               	goto	l14546
  4886  003E12                     l1012:
  4887                           
  4888                           ;main.c: 3023: if ( PORTBbits.RB1 ) {
  4889  003E12  A281               	btfss	3969,1,c	;volatile
  4890  003E14  D002               	goto	l1013
  4891                           
  4892                           ;main.c: 3024: PORTBbits.RB1 = 0;
  4893  003E16  9281               	bcf	3969,1,c	;volatile
  4894  003E18  D02F               	goto	L18
  4895  003E1A                     l1013:
  4896                           
  4897                           ;main.c: 3027: else {
  4898                           ;main.c: 3028: PORTBbits.RB1 = 1;
  4899  003E1A  8281               	bsf	3969,1,c	;volatile
  4900  003E1C  D7F7               	goto	l14504
  4901  003E1E                     l1015:
  4902                           
  4903                           ;main.c: 3034: if ( PORTCbits.RC3 ) {
  4904  003E1E  A682               	btfss	3970,3,c	;volatile
  4905  003E20  D002               	goto	l1016
  4906                           
  4907                           ;main.c: 3035: PORTCbits.RC3 = 0;
  4908  003E22  9682               	bcf	3970,3,c	;volatile
  4909  003E24  D029               	goto	L18
  4910  003E26                     l1016:
  4911                           
  4912                           ;main.c: 3038: else {
  4913                           ;main.c: 3039: PORTCbits.RC3 = 1;
  4914  003E26  8682               	bsf	3970,3,c	;volatile
  4915  003E28  D7F1               	goto	l14504
  4916  003E2A                     l1018:
  4917                           
  4918                           ;main.c: 3045: if ( PORTCbits.RC4 ) {
  4919  003E2A  A882               	btfss	3970,4,c	;volatile
  4920  003E2C  D002               	goto	l1019
  4921                           
  4922                           ;main.c: 3046: PORTCbits.RC4 = 0;
  4923  003E2E  9882               	bcf	3970,4,c	;volatile
  4924  003E30  D023               	goto	L18
  4925  003E32                     l1019:
  4926                           
  4927                           ;main.c: 3049: else {
  4928                           ;main.c: 3050: PORTCbits.RC4 = 1;
  4929  003E32  8882               	bsf	3970,4,c	;volatile
  4930  003E34  D7EB               	goto	l14504
  4931  003E36                     l1021:
  4932                           
  4933                           ;main.c: 3056: if ( PORTCbits.RC5 ) {
  4934  003E36  AA82               	btfss	3970,5,c	;volatile
  4935  003E38  D002               	goto	l1022
  4936                           
  4937                           ;main.c: 3057: PORTCbits.RC5 = 0;
  4938  003E3A  9A82               	bcf	3970,5,c	;volatile
  4939  003E3C  D01D               	goto	L18
  4940  003E3E                     l1022:
  4941                           
  4942                           ;main.c: 3060: else {
  4943                           ;main.c: 3061: PORTCbits.RC5 = 1;
  4944  003E3E  8A82               	bsf	3970,5,c	;volatile
  4945  003E40  D7E5               	goto	l14504
  4946  003E42                     l1024:
  4947                           
  4948                           ;main.c: 3067: if ( PORTCbits.RC6 ) {
  4949  003E42  AC82               	btfss	3970,6,c	;volatile
  4950  003E44  D002               	goto	l1025
  4951                           
  4952                           ;main.c: 3068: PORTCbits.RC6 = 0;
  4953  003E46  9C82               	bcf	3970,6,c	;volatile
  4954  003E48  D017               	goto	L18
  4955  003E4A                     l1025:
  4956                           
  4957                           ;main.c: 3071: else {
  4958                           ;main.c: 3072: PORTCbits.RC6 = 1;
  4959  003E4A  8C82               	bsf	3970,6,c	;volatile
  4960  003E4C  D7DF               	goto	l14504
  4961  003E4E                     l1027:
  4962                           
  4963                           ;main.c: 3078: if ( PORTCbits.RC7 ) {
  4964  003E4E  AE82               	btfss	3970,7,c	;volatile
  4965  003E50  D002               	goto	l1028
  4966                           
  4967                           ;main.c: 3079: PORTCbits.RC7 = 0;
  4968  003E52  9E82               	bcf	3970,7,c	;volatile
  4969  003E54  D011               	goto	L18
  4970  003E56                     l1028:
  4971                           
  4972                           ;main.c: 3082: else {
  4973                           ;main.c: 3083: PORTCbits.RC7 = 1;
  4974  003E56  8E82               	bsf	3970,7,c	;volatile
  4975  003E58  D7D9               	goto	l14504
  4976  003E5A                     l1030:
  4977                           
  4978                           ;main.c: 3089: if ( PORTAbits.RA2 ) {
  4979  003E5A  A480               	btfss	3968,2,c	;volatile
  4980  003E5C  D002               	goto	l1031
  4981                           
  4982                           ;main.c: 3090: PORTAbits.RA2 = 0;
  4983  003E5E  9480               	bcf	3968,2,c	;volatile
  4984  003E60  D00B               	goto	L18
  4985  003E62                     l1031:
  4986                           
  4987                           ;main.c: 3093: else {
  4988                           ;main.c: 3094: PORTAbits.RA2 = 1;
  4989  003E62  8480               	bsf	3968,2,c	;volatile
  4990  003E64  D7D3               	goto	l14504
  4991  003E66                     l1033:
  4992                           
  4993                           ;main.c: 3100: if ( PORTAbits.RA1 ) {
  4994  003E66  A280               	btfss	3968,1,c	;volatile
  4995  003E68  D002               	goto	l1034
  4996                           
  4997                           ;main.c: 3101: PORTAbits.RA1 = 0;
  4998  003E6A  9280               	bcf	3968,1,c	;volatile
  4999  003E6C  D005               	goto	L18
  5000  003E6E                     l1034:
  5001                           
  5002                           ;main.c: 3104: else {
  5003                           ;main.c: 3105: PORTAbits.RA1 = 1;
  5004  003E6E  8280               	bsf	3968,1,c	;volatile
  5005  003E70  D7CD               	goto	l14504
  5006  003E72                     l1036:
  5007                           
  5008                           ;main.c: 3111: if ( PORTAbits.RA0 ) {
  5009  003E72  A080               	btfss	3968,0,c	;volatile
  5010  003E74  D003               	goto	l1037
  5011                           
  5012                           ;main.c: 3112: PORTAbits.RA0 = 0;
  5013  003E76  9080               	bcf	3968,0,c	;volatile
  5014  003E78                     L18:
  5015                           
  5016                           ;main.c: 3113: bOn = 0;
  5017  003E78  6A51               	clrf	doActionToggle@bOn,c
  5018                           
  5019                           ;main.c: 3114: }
  5020  003E7A  D016               	goto	l14546
  5021  003E7C                     l1037:
  5022                           
  5023                           ;main.c: 3115: else {
  5024                           ;main.c: 3116: PORTAbits.RA0 = 1;
  5025  003E7C  8080               	bsf	3968,0,c	;volatile
  5026  003E7E  D7C6               	goto	l14504
  5027  003E80                     l14544:
  5028  003E80  504F               	movf	doActionToggle@arg,w,c
  5029                           
  5030                           ; Switch size 1, requested type "space"
  5031                           ; Number of cases is 10, Range of values is 0 to 9
  5032                           ; switch strategies available:
  5033                           ; Name         Instructions Cycles
  5034                           ; simple_byte           31    16 (average)
  5035                           ;	Chosen strategy is simple_byte
  5036  003E82  E0BF               	bz	l1008
  5037  003E84  0A01               	xorlw	1	; case 1
  5038  003E86  E0C5               	bz	l1012
  5039  003E88  0A03               	xorlw	3	; case 2
  5040  003E8A  E0C9               	bz	l1015
  5041  003E8C  0A01               	xorlw	1	; case 3
  5042  003E8E  E0CD               	bz	l1018
  5043  003E90  0A07               	xorlw	7	; case 4
  5044  003E92  E0D1               	bz	l1021
  5045  003E94  0A01               	xorlw	1	; case 5
  5046  003E96  E0D5               	bz	l1024
  5047  003E98  0A03               	xorlw	3	; case 6
  5048  003E9A  E0D9               	bz	l1027
  5049  003E9C  0A01               	xorlw	1	; case 7
  5050  003E9E  E0DD               	bz	l1030
  5051  003EA0  0A0F               	xorlw	15	; case 8
  5052  003EA2  E0E1               	bz	l1033
  5053  003EA4  0A01               	xorlw	1	; case 9
  5054  003EA6  E0E5               	bz	l1036
  5055  003EA8                     l14546:
  5056                           
  5057                           ;main.c: 3122: if ( bOn ) {
  5058  003EA8  5051               	movf	doActionToggle@bOn,w,c
  5059  003EAA  E00B               	bz	l1039
  5060                           
  5061                           ;main.c: 3125: if ( ctrlreg & 0x08 ) {
  5062  003EAC  A650               	btfss	doActionToggle@ctrlreg,3,c
  5063  003EAE  D013               	goto	l1005
  5064                           
  5065                           ;main.c: 3126: SendInformationEvent( arg,
  5066                           ;main.c: 3127: 20,
  5067                           ;main.c: 3128: 3 );
  5068  003EB0  0E14               	movlw	20
  5069  003EB2  0100               	movlb	0	; () banked
  5070  003EB4  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  5071  003EB6  0E03               	movlw	3
  5072  003EB8  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5073  003EBA  504F               	movf	doActionToggle@arg,w,c
  5074  003EBC  ECC0  F021         	call	_SendInformationEvent
  5075  003EC0  D00A               	goto	l1005
  5076  003EC2                     l1039:
  5077                           
  5078                           ;main.c: 3132: else {
  5079                           ;main.c: 3135: if ( ctrlreg & 0x10 ) {
  5080  003EC2  A850               	btfss	doActionToggle@ctrlreg,4,c
  5081  003EC4  D008               	goto	l1005
  5082                           
  5083                           ;main.c: 3136: SendInformationEvent( arg,
  5084                           ;main.c: 3137: 20,
  5085                           ;main.c: 3138: 4 );
  5086  003EC6  0E14               	movlw	20
  5087  003EC8  0100               	movlb	0	; () banked
  5088  003ECA  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  5089  003ECC  0E04               	movlw	4
  5090  003ECE  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5091  003ED0  504F               	movf	doActionToggle@arg,w,c
  5092  003ED2  ECC0  F021         	call	_SendInformationEvent
  5093  003ED6                     l1005:
  5094  003ED6  0012               	return	
  5095  003ED8                     __end_of_doActionToggle:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           intcon2	equ	0xFF1
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           indf1	equ	0xFE7
  5108                           fsr1h	equ	0xFE2
  5109                           fsr1l	equ	0xFE1
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           plusw2	equ	0xFDB
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _doActionStatusAll *****************
  5119 ;; Defined at:
  5120 ;;		line 3233 in file "../main.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  dmflags         1    wreg     unsigned char 
  5123 ;;  arg             1   22[BANK0 ] unsigned char 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  dmflags         1   23[BANK0 ] unsigned char 
  5126 ;;  i               1   24[BANK0 ] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;		None               void
  5129 ;; Registers used:
  5130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : F/0
  5133 ;;		On exit  : F/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5136 ;;      Params:         0       1       0       0       0       0       0
  5137 ;;      Locals:         0       2       0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0
  5139 ;;      Totals:         0       3       0       0       0       0       0
  5140 ;;Total ram usage:        3 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    8
  5143 ;; This function calls:
  5144 ;;		_doActionStatus
  5145 ;; This function is called by:
  5146 ;;		_doDM
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text10
  5151  0047D8                     __ptext10:
  5152                           	opt stack 0
  5153  0047D8                     _doActionStatusAll:
  5154                           	opt stack 20
  5155                           
  5156                           ;incstack = 0
  5157                           ;incstack = 0
  5158                           ;doActionStatusAll@dmflags stored from wreg
  5159  0047D8  CFE8 F0D2          	movff	wreg,doActionStatusAll@dmflags
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;main.c: 3234: uint8_t i;
  5163                           ;main.c: 3236: for ( i=0; i<9; i++ ) {
  5164  0047DC  6BD3               	clrf	doActionStatusAll@i& (0+255),b
  5165  0047DE                     l14484:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;main.c: 3237: doActionStatus( dmflags, i );
  5169  0047DE  C0D3  F04F         	movff	doActionStatusAll@i,?_doActionStatus
  5170  0047E2  51D2               	movf	doActionStatusAll@dmflags& (0+255),w,b
  5171  0047E4  EC6C  F01F         	call	_doActionStatus
  5172  0047E8  0100               	movlb	0	; () banked
  5173  0047EA  2BD3               	incf	doActionStatusAll@i& (0+255),f,b
  5174                           
  5175                           ; BSR set to: 0
  5176  0047EC  0E08               	movlw	8
  5177  0047EE  65D3               	cpfsgt	doActionStatusAll@i& (0+255),b
  5178  0047F0  D7F6               	goto	l14484
  5179                           
  5180                           ; BSR set to: 0
  5181  0047F2  0C08               	retlw	8
  5182  0047F4                     __end_of_doActionStatusAll:
  5183                           	opt stack 0
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           intcon2	equ	0xFF1
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           indf1	equ	0xFE7
  5195                           fsr1h	equ	0xFE2
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           plusw2	equ	0xFDB
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function _doActionStatus *****************
  5206 ;; Defined at:
  5207 ;;		line 3151 in file "../main.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  dmflags         1    wreg     unsigned char 
  5210 ;;  arg             1   78[COMRAM] unsigned char 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;  dmflags         1    0[COMRAM] unsigned char 
  5213 ;;  bOn             1   80[COMRAM] enum E15660
  5214 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : F/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5224 ;;      Params:         1       0       0       0       0       0       0
  5225 ;;      Locals:         2       0       0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0
  5227 ;;      Totals:         3       0       0       0       0       0       0
  5228 ;;Total ram usage:        3 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    7
  5231 ;; This function calls:
  5232 ;;		_Read_b_eep
  5233 ;;		_SendInformationEvent
  5234 ;; This function is called by:
  5235 ;;		_doDM
  5236 ;;		_doActionStatusAll
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text11
  5241  003ED8                     __ptext11:
  5242                           	opt stack 0
  5243  003ED8                     _doActionStatus:
  5244                           	opt stack 20
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;main.c: 3152: unsigned char ctrlreg;
  5248                           ;main.c: 3153: BOOL bOn = 0;
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;incstack = 0
  5252                           ;incstack = 0
  5253  003ED8  6A51               	clrf	doActionStatus@bOn,c
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;main.c: 3156: if ( arg > 9 ) return;
  5257  003EDA  0E09               	movlw	9
  5258  003EDC  644F               	cpfsgt	doActionStatus@arg,c
  5259  003EDE  D001               	goto	l14440
  5260  003EE0  D069               	goto	l1046
  5261  003EE2                     l14440:
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;main.c: 3158: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5265  003EE2  0E5B               	movlw	91
  5266  003EE4  244F               	addwf	doActionStatus@arg,w,c
  5267  003EE6  6E08               	movwf	?_Read_b_eep,c
  5268  003EE8  6A09               	clrf	?_Read_b_eep+1,c
  5269  003EEA  0E00               	movlw	0
  5270  003EEC  2209               	addwfc	?_Read_b_eep+1,f,c
  5271  003EEE  EC83  F024         	call	_Read_b_eep	;wreg free
  5272  003EF2  6E50               	movwf	doActionStatus@ctrlreg,c
  5273                           
  5274                           ;main.c: 3161: if ( !( ctrlreg & 0x80 ) ) return;
  5275  003EF4  AE50               	btfss	doActionStatus@ctrlreg,7,c
  5276  003EF6  D05E               	goto	l1046
  5277  003EF8  D032               	goto	l14468
  5278  003EFA                     l14446:
  5279                           
  5280                           ;main.c: 3166: bOn = PORTBbits.RB0;
  5281  003EFA  0E00               	movlw	0
  5282  003EFC  B081               	btfsc	3969,0,c	;volatile
  5283  003EFE  0E01               	movlw	1
  5284  003F00  6E51               	movwf	doActionStatus@bOn,c
  5285                           
  5286                           ;main.c: 3167: break;
  5287  003F02  D041               	goto	l14470
  5288  003F04                     l14448:
  5289                           
  5290                           ;main.c: 3170: bOn = PORTBbits.RB1;
  5291  003F04  0E00               	movlw	0
  5292  003F06  B281               	btfsc	3969,1,c	;volatile
  5293  003F08  0E01               	movlw	1
  5294  003F0A  6E51               	movwf	doActionStatus@bOn,c
  5295                           
  5296                           ;main.c: 3171: break;
  5297  003F0C  D03C               	goto	l14470
  5298  003F0E                     l14450:
  5299                           
  5300                           ;main.c: 3174: bOn = PORTCbits.RC3;
  5301  003F0E  0E00               	movlw	0
  5302  003F10  B682               	btfsc	3970,3,c	;volatile
  5303  003F12  0E01               	movlw	1
  5304  003F14  6E51               	movwf	doActionStatus@bOn,c
  5305                           
  5306                           ;main.c: 3175: break;
  5307  003F16  D037               	goto	l14470
  5308  003F18                     l14452:
  5309                           
  5310                           ;main.c: 3178: bOn = PORTCbits.RC4;
  5311  003F18  0E00               	movlw	0
  5312  003F1A  B882               	btfsc	3970,4,c	;volatile
  5313  003F1C  0E01               	movlw	1
  5314  003F1E  6E51               	movwf	doActionStatus@bOn,c
  5315                           
  5316                           ;main.c: 3179: break;
  5317  003F20  D032               	goto	l14470
  5318  003F22                     l14454:
  5319                           
  5320                           ;main.c: 3182: bOn = PORTCbits.RC5;
  5321  003F22  0E00               	movlw	0
  5322  003F24  BA82               	btfsc	3970,5,c	;volatile
  5323  003F26  0E01               	movlw	1
  5324  003F28  6E51               	movwf	doActionStatus@bOn,c
  5325                           
  5326                           ;main.c: 3183: break;
  5327  003F2A  D02D               	goto	l14470
  5328  003F2C                     l14456:
  5329                           
  5330                           ;main.c: 3186: bOn = PORTCbits.RC6;
  5331  003F2C  0E00               	movlw	0
  5332  003F2E  BC82               	btfsc	3970,6,c	;volatile
  5333  003F30  0E01               	movlw	1
  5334  003F32  6E51               	movwf	doActionStatus@bOn,c
  5335                           
  5336                           ;main.c: 3187: break;
  5337  003F34  D028               	goto	l14470
  5338  003F36                     l14458:
  5339                           
  5340                           ;main.c: 3190: bOn = PORTCbits.RC7;
  5341  003F36  0E00               	movlw	0
  5342  003F38  BE82               	btfsc	3970,7,c	;volatile
  5343  003F3A  0E01               	movlw	1
  5344  003F3C  6E51               	movwf	doActionStatus@bOn,c
  5345                           
  5346                           ;main.c: 3191: break;
  5347  003F3E  D023               	goto	l14470
  5348  003F40                     l14460:
  5349                           
  5350                           ;main.c: 3194: bOn = PORTAbits.RA2;
  5351  003F40  0E00               	movlw	0
  5352  003F42  B480               	btfsc	3968,2,c	;volatile
  5353  003F44  0E01               	movlw	1
  5354  003F46  6E51               	movwf	doActionStatus@bOn,c
  5355                           
  5356                           ;main.c: 3195: break;
  5357  003F48  D01E               	goto	l14470
  5358  003F4A                     l14462:
  5359                           
  5360                           ;main.c: 3198: bOn = PORTAbits.RA1;
  5361  003F4A  0E00               	movlw	0
  5362  003F4C  B280               	btfsc	3968,1,c	;volatile
  5363  003F4E  0E01               	movlw	1
  5364  003F50  6E51               	movwf	doActionStatus@bOn,c
  5365                           
  5366                           ;main.c: 3199: break;
  5367  003F52  D019               	goto	l14470
  5368  003F54                     l14464:
  5369                           
  5370                           ;main.c: 3202: bOn = PORTAbits.RA0;
  5371  003F54  0E00               	movlw	0
  5372  003F56  B080               	btfsc	3968,0,c	;volatile
  5373  003F58  0E01               	movlw	1
  5374  003F5A  6E51               	movwf	doActionStatus@bOn,c
  5375                           
  5376                           ;main.c: 3203: break;
  5377  003F5C  D014               	goto	l14470
  5378  003F5E                     l14468:
  5379  003F5E  504F               	movf	doActionStatus@arg,w,c
  5380                           
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 10, Range of values is 0 to 9
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte           31    16 (average)
  5386                           ;	Chosen strategy is simple_byte
  5387  003F60  E0CC               	bz	l14446
  5388  003F62  0A01               	xorlw	1	; case 1
  5389  003F64  E0CF               	bz	l14448
  5390  003F66  0A03               	xorlw	3	; case 2
  5391  003F68  E0D2               	bz	l14450
  5392  003F6A  0A01               	xorlw	1	; case 3
  5393  003F6C  E0D5               	bz	l14452
  5394  003F6E  0A07               	xorlw	7	; case 4
  5395  003F70  E0D8               	bz	l14454
  5396  003F72  0A01               	xorlw	1	; case 5
  5397  003F74  E0DB               	bz	l14456
  5398  003F76  0A03               	xorlw	3	; case 6
  5399  003F78  E0DE               	bz	l14458
  5400  003F7A  0A01               	xorlw	1	; case 7
  5401  003F7C  E0E1               	bz	l14460
  5402  003F7E  0A0F               	xorlw	15	; case 8
  5403  003F80  E0E4               	bz	l14462
  5404  003F82  0A01               	xorlw	1	; case 9
  5405  003F84  E0E7               	bz	l14464
  5406  003F86                     l14470:
  5407                           
  5408                           ;main.c: 3207: if ( bOn ) {
  5409  003F86  5051               	movf	doActionStatus@bOn,w,c
  5410  003F88  E00B               	bz	l1060
  5411                           
  5412                           ;main.c: 3210: if ( ctrlreg & 0x10 ) {
  5413  003F8A  A850               	btfss	doActionStatus@ctrlreg,4,c
  5414  003F8C  D013               	goto	l1046
  5415                           
  5416                           ;main.c: 3211: SendInformationEvent( arg,
  5417                           ;main.c: 3212: 20,
  5418                           ;main.c: 3213: 4 );
  5419  003F8E  0E14               	movlw	20
  5420  003F90  0100               	movlb	0	; () banked
  5421  003F92  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  5422  003F94  0E04               	movlw	4
  5423  003F96  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5424  003F98  504F               	movf	doActionStatus@arg,w,c
  5425  003F9A  ECC0  F021         	call	_SendInformationEvent
  5426  003F9E  D00A               	goto	l1046
  5427  003FA0                     l1060:
  5428                           
  5429                           ;main.c: 3217: else {
  5430                           ;main.c: 3219: if ( ctrlreg & 0x10 ) {
  5431  003FA0  A850               	btfss	doActionStatus@ctrlreg,4,c
  5432  003FA2  D008               	goto	l1046
  5433                           
  5434                           ;main.c: 3220: SendInformationEvent( arg,
  5435                           ;main.c: 3221: 20,
  5436                           ;main.c: 3222: 4 );
  5437  003FA4  0E14               	movlw	20
  5438  003FA6  0100               	movlb	0	; () banked
  5439  003FA8  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  5440  003FAA  0E04               	movlw	4
  5441  003FAC  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5442  003FAE  504F               	movf	doActionStatus@arg,w,c
  5443  003FB0  ECC0  F021         	call	_SendInformationEvent
  5444  003FB4                     l1046:
  5445  003FB4  0012               	return	
  5446  003FB6                     __end_of_doActionStatus:
  5447                           	opt stack 0
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           indf1	equ	0xFE7
  5459                           fsr1h	equ	0xFE2
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           plusw2	equ	0xFDB
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _doActionPulseOff *****************
  5470 ;; Defined at:
  5471 ;;		line 2917 in file "../main.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  dmflags         1    wreg     unsigned char 
  5474 ;;  arg             1   78[COMRAM] unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  dmflags         1    0[COMRAM] unsigned char 
  5477 ;;  bEvent          1   80[COMRAM] enum E15660
  5478 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;		None               void
  5481 ;; Registers used:
  5482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : F/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5488 ;;      Params:         1       0       0       0       0       0       0
  5489 ;;      Locals:         2       0       0       0       0       0       0
  5490 ;;      Temps:          0       5       0       0       0       0       0
  5491 ;;      Totals:         3       5       0       0       0       0       0
  5492 ;;Total ram usage:        8 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    7
  5495 ;; This function calls:
  5496 ;;		_Read_b_eep
  5497 ;;		_SendInformationEvent
  5498 ;; This function is called by:
  5499 ;;		_doDM
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text12
  5504  003CE0                     __ptext12:
  5505                           	opt stack 0
  5506  003CE0                     _doActionPulseOff:
  5507                           	opt stack 21
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;main.c: 2918: unsigned char ctrlreg;
  5511                           ;main.c: 2919: BOOL bEvent = 0;
  5512                           
  5513                           ;incstack = 0
  5514                           ;incstack = 0
  5515  003CE0  6A51               	clrf	doActionPulseOff@bEvent,c
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;main.c: 2922: if ( arg > 9 ) return;
  5519  003CE2  0E09               	movlw	9
  5520  003CE4  644F               	cpfsgt	doActionPulseOff@arg,c
  5521  003CE6  D001               	goto	l14376
  5522  003CE8  D07A               	goto	l977
  5523  003CEA                     l14376:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;main.c: 2924: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5527  003CEA  0E5B               	movlw	91
  5528  003CEC  244F               	addwf	doActionPulseOff@arg,w,c
  5529  003CEE  6E08               	movwf	?_Read_b_eep,c
  5530  003CF0  6A09               	clrf	?_Read_b_eep+1,c
  5531  003CF2  0E00               	movlw	0
  5532  003CF4  2209               	addwfc	?_Read_b_eep+1,f,c
  5533  003CF6  EC83  F024         	call	_Read_b_eep	;wreg free
  5534  003CFA  6E50               	movwf	doActionPulseOff@ctrlreg,c
  5535                           
  5536                           ;main.c: 2927: if ( !( ctrlreg & 0x80 ) ) return;
  5537  003CFC  AE50               	btfss	doActionPulseOff@ctrlreg,7,c
  5538  003CFE  D06F               	goto	l977
  5539  003D00  D039               	goto	l14424
  5540  003D02                     l980:
  5541                           
  5542                           ;main.c: 2932: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5543  003D02  A081               	btfss	3969,0,c	;volatile
  5544  003D04  D002               	goto	l14384
  5545  003D06  0E01               	movlw	1
  5546  003D08  6E51               	movwf	doActionPulseOff@bEvent,c
  5547  003D0A                     l14384:
  5548                           
  5549                           ;main.c: 2933: PORTBbits.RB0 = 0;
  5550  003D0A  9081               	bcf	3969,0,c	;volatile
  5551                           
  5552                           ;main.c: 2934: break;
  5553  003D0C  D047               	goto	l14426
  5554  003D0E                     l983:
  5555                           
  5556                           ;main.c: 2937: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5557  003D0E  A281               	btfss	3969,1,c	;volatile
  5558  003D10  D002               	goto	l14388
  5559  003D12  0E01               	movlw	1
  5560  003D14  6E51               	movwf	doActionPulseOff@bEvent,c
  5561  003D16                     l14388:
  5562                           
  5563                           ;main.c: 2938: PORTBbits.RB1 = 0;
  5564  003D16  9281               	bcf	3969,1,c	;volatile
  5565                           
  5566                           ;main.c: 2939: break;
  5567  003D18  D041               	goto	l14426
  5568  003D1A                     l985:
  5569                           
  5570                           ;main.c: 2942: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5571  003D1A  A682               	btfss	3970,3,c	;volatile
  5572  003D1C  D002               	goto	l14392
  5573  003D1E  0E01               	movlw	1
  5574  003D20  6E51               	movwf	doActionPulseOff@bEvent,c
  5575  003D22                     l14392:
  5576                           
  5577                           ;main.c: 2943: PORTCbits.RC3 = 0;
  5578  003D22  9682               	bcf	3970,3,c	;volatile
  5579                           
  5580                           ;main.c: 2944: break;
  5581  003D24  D03B               	goto	l14426
  5582  003D26                     l987:
  5583                           
  5584                           ;main.c: 2947: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5585  003D26  A882               	btfss	3970,4,c	;volatile
  5586  003D28  D002               	goto	l14396
  5587  003D2A  0E01               	movlw	1
  5588  003D2C  6E51               	movwf	doActionPulseOff@bEvent,c
  5589  003D2E                     l14396:
  5590                           
  5591                           ;main.c: 2948: PORTCbits.RC4 = 0;
  5592  003D2E  9882               	bcf	3970,4,c	;volatile
  5593                           
  5594                           ;main.c: 2949: break;
  5595  003D30  D035               	goto	l14426
  5596  003D32                     l989:
  5597                           
  5598                           ;main.c: 2952: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5599  003D32  AA82               	btfss	3970,5,c	;volatile
  5600  003D34  D002               	goto	l14400
  5601  003D36  0E01               	movlw	1
  5602  003D38  6E51               	movwf	doActionPulseOff@bEvent,c
  5603  003D3A                     l14400:
  5604                           
  5605                           ;main.c: 2953: PORTCbits.RC5 = 0;
  5606  003D3A  9A82               	bcf	3970,5,c	;volatile
  5607                           
  5608                           ;main.c: 2954: break;
  5609  003D3C  D02F               	goto	l14426
  5610  003D3E                     l991:
  5611                           
  5612                           ;main.c: 2957: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5613  003D3E  AC82               	btfss	3970,6,c	;volatile
  5614  003D40  D002               	goto	l14404
  5615  003D42  0E01               	movlw	1
  5616  003D44  6E51               	movwf	doActionPulseOff@bEvent,c
  5617  003D46                     l14404:
  5618                           
  5619                           ;main.c: 2958: PORTCbits.RC6 = 0;
  5620  003D46  9C82               	bcf	3970,6,c	;volatile
  5621                           
  5622                           ;main.c: 2959: break;
  5623  003D48  D029               	goto	l14426
  5624  003D4A                     l993:
  5625                           
  5626                           ;main.c: 2962: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5627  003D4A  AE82               	btfss	3970,7,c	;volatile
  5628  003D4C  D002               	goto	l14408
  5629  003D4E  0E01               	movlw	1
  5630  003D50  6E51               	movwf	doActionPulseOff@bEvent,c
  5631  003D52                     l14408:
  5632                           
  5633                           ;main.c: 2963: PORTCbits.RC7 = 0;
  5634  003D52  9E82               	bcf	3970,7,c	;volatile
  5635                           
  5636                           ;main.c: 2964: break;
  5637  003D54  D023               	goto	l14426
  5638  003D56                     l995:
  5639                           
  5640                           ;main.c: 2967: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5641  003D56  A480               	btfss	3968,2,c	;volatile
  5642  003D58  D002               	goto	l14412
  5643  003D5A                     l14410:
  5644  003D5A  0E01               	movlw	1
  5645  003D5C  6E51               	movwf	doActionPulseOff@bEvent,c
  5646  003D5E                     l14412:
  5647                           
  5648                           ;main.c: 2968: PORTAbits.RA2 = 0;
  5649  003D5E  9480               	bcf	3968,2,c	;volatile
  5650                           
  5651                           ;main.c: 2969: break;
  5652  003D60  D01D               	goto	l14426
  5653  003D62                     l997:
  5654                           
  5655                           ;main.c: 2972: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5656  003D62  A280               	btfss	3968,1,c	;volatile
  5657  003D64  D002               	goto	l14416
  5658  003D66  0E01               	movlw	1
  5659  003D68  6E51               	movwf	doActionPulseOff@bEvent,c
  5660  003D6A                     l14416:
  5661                           
  5662                           ;main.c: 2973: PORTAbits.RA1 = 0;
  5663  003D6A  9280               	bcf	3968,1,c	;volatile
  5664                           
  5665                           ;main.c: 2974: break;
  5666  003D6C  D017               	goto	l14426
  5667  003D6E                     l999:
  5668                           
  5669                           ;main.c: 2977: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5670  003D6E  B080               	btfsc	3968,0,c	;volatile
  5671  003D70  D7F4               	goto	l14410
  5672  003D72  D7F5               	goto	l14412
  5673  003D74                     l14424:
  5674  003D74  504F               	movf	doActionPulseOff@arg,w,c
  5675                           
  5676                           ; Switch size 1, requested type "space"
  5677                           ; Number of cases is 10, Range of values is 0 to 9
  5678                           ; switch strategies available:
  5679                           ; Name         Instructions Cycles
  5680                           ; simple_byte           31    16 (average)
  5681                           ;	Chosen strategy is simple_byte
  5682  003D76  E0C5               	bz	l980
  5683  003D78  0A01               	xorlw	1	; case 1
  5684  003D7A  E0C9               	bz	l983
  5685  003D7C  0A03               	xorlw	3	; case 2
  5686  003D7E  E0CD               	bz	l985
  5687  003D80  0A01               	xorlw	1	; case 3
  5688  003D82  E0D1               	bz	l987
  5689  003D84  0A07               	xorlw	7	; case 4
  5690  003D86  E0D5               	bz	l989
  5691  003D88  0A01               	xorlw	1	; case 5
  5692  003D8A  E0D9               	bz	l991
  5693  003D8C  0A03               	xorlw	3	; case 6
  5694  003D8E  E0DD               	bz	l993
  5695  003D90  0A01               	xorlw	1	; case 7
  5696  003D92  E0E1               	bz	l995
  5697  003D94  0A0F               	xorlw	15	; case 8
  5698  003D96  E0E5               	bz	l997
  5699  003D98  0A01               	xorlw	1	; case 9
  5700  003D9A  E0E9               	bz	l999
  5701  003D9C                     l14426:
  5702                           
  5703                           ;main.c: 2984: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  5704  003D9C  5051               	movf	doActionPulseOff@bEvent,w,c
  5705  003D9E  A4D8               	btfss	status,2,c
  5706  003DA0  A850               	btfss	doActionPulseOff@ctrlreg,4,c
  5707  003DA2  D008               	goto	l14432
  5708                           
  5709                           ;main.c: 2985: SendInformationEvent( arg, 20, 4 );
  5710  003DA4  0E14               	movlw	20
  5711  003DA6  0100               	movlb	0	; () banked
  5712  003DA8  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  5713  003DAA  0E04               	movlw	4
  5714  003DAC  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5715  003DAE  504F               	movf	doActionPulseOff@arg,w,c
  5716  003DB0  ECC0  F021         	call	_SendInformationEvent
  5717  003DB4                     l14432:
  5718                           
  5719                           ;main.c: 2986: }
  5720                           ;main.c: 2988: channel_pulse_flags &= ~( 1 << arg );
  5721  003DB4  C04F  F0D1         	movff	doActionPulseOff@arg,??_doActionPulseOff
  5722  003DB8  0E01               	movlw	1
  5723  003DBA  0100               	movlb	0	; () banked
  5724  003DBC  6FD2               	movwf	(??_doActionPulseOff+1)& (0+255),b
  5725  003DBE  6BD3               	clrf	(??_doActionPulseOff+2)& (0+255),b
  5726  003DC0  2BD1               	incf	??_doActionPulseOff& (0+255),f,b
  5727  003DC2  D003               	goto	u19394
  5728  003DC4                     u19395:
  5729  003DC4  90D8               	bcf	status,0,c
  5730  003DC6  37D2               	rlcf	(??_doActionPulseOff+1)& (0+255),f,b
  5731  003DC8  37D3               	rlcf	(??_doActionPulseOff+2)& (0+255),f,b
  5732  003DCA                     u19394:
  5733  003DCA  2FD1               	decfsz	??_doActionPulseOff& (0+255),f,b
  5734  003DCC  D7FB               	goto	u19395
  5735  003DCE  1DD2               	comf	(??_doActionPulseOff+1)& (0+255),w,b
  5736  003DD0  6FD4               	movwf	(??_doActionPulseOff+3)& (0+255),b
  5737  003DD2  1DD3               	comf	(??_doActionPulseOff+2)& (0+255),w,b
  5738  003DD4  6FD5               	movwf	(??_doActionPulseOff+4)& (0+255),b
  5739  003DD6  51D4               	movf	(??_doActionPulseOff+3)& (0+255),w,b
  5740  003DD8  1768               	andwf	_channel_pulse_flags& (0+255),f,b
  5741  003DDA  51D5               	movf	(??_doActionPulseOff+4)& (0+255),w,b
  5742  003DDC  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
  5743  003DDE                     l977:
  5744  003DDE  0012               	return	
  5745  003DE0                     __end_of_doActionPulseOff:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           intcon2	equ	0xFF1
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           indf1	equ	0xFE7
  5758                           fsr1h	equ	0xFE2
  5759                           fsr1l	equ	0xFE1
  5760                           indf2	equ	0xFDF
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           plusw2	equ	0xFDB
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _doActionPulseOn *****************
  5769 ;; Defined at:
  5770 ;;		line 2833 in file "../main.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  dmflags         1    wreg     unsigned char 
  5773 ;;  arg             1   78[COMRAM] unsigned char 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  dmflags         1    0[COMRAM] unsigned char 
  5776 ;;  bEvent          1   80[COMRAM] enum E15660
  5777 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;		None               void
  5780 ;; Registers used:
  5781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : F/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         1       0       0       0       0       0       0
  5788 ;;      Locals:         2       0       0       0       0       0       0
  5789 ;;      Temps:          0       3       0       0       0       0       0
  5790 ;;      Totals:         3       3       0       0       0       0       0
  5791 ;;Total ram usage:        6 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    7
  5794 ;; This function calls:
  5795 ;;		_Read_b_eep
  5796 ;;		_SendInformationEvent
  5797 ;; This function is called by:
  5798 ;;		_doDM
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text13
  5803  003752                     __ptext13:
  5804                           	opt stack 0
  5805  003752                     _doActionPulseOn:
  5806                           	opt stack 21
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;main.c: 2834: unsigned char ctrlreg;
  5810                           ;main.c: 2835: BOOL bEvent = 0;
  5811                           
  5812                           ;incstack = 0
  5813                           ;incstack = 0
  5814  003752  6A51               	clrf	doActionPulseOn@bEvent,c
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;main.c: 2838: if ( arg > 9 ) return;
  5818  003754  0E09               	movlw	9
  5819  003756  644F               	cpfsgt	doActionPulseOn@arg,c
  5820  003758  D001               	goto	l14310
  5821  00375A  D094               	goto	l949
  5822  00375C                     l14310:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;main.c: 2840: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  5826  00375C  0E5B               	movlw	91
  5827  00375E  244F               	addwf	doActionPulseOn@arg,w,c
  5828  003760  6E08               	movwf	?_Read_b_eep,c
  5829  003762  6A09               	clrf	?_Read_b_eep+1,c
  5830  003764  0E00               	movlw	0
  5831  003766  2209               	addwfc	?_Read_b_eep+1,f,c
  5832  003768  EC83  F024         	call	_Read_b_eep	;wreg free
  5833  00376C  6E50               	movwf	doActionPulseOn@ctrlreg,c
  5834                           
  5835                           ;main.c: 2843: if ( !( ctrlreg & 0x80 ) ) return;
  5836  00376E  AE50               	btfss	doActionPulseOn@ctrlreg,7,c
  5837  003770  D089               	goto	l949
  5838  003772  D039               	goto	l14358
  5839  003774                     l952:
  5840                           
  5841                           ;main.c: 2848: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  5842  003774  A081               	btfss	3969,0,c	;volatile
  5843  003776  D002               	goto	l14318
  5844  003778  0E01               	movlw	1
  5845  00377A  6E51               	movwf	doActionPulseOn@bEvent,c
  5846  00377C                     l14318:
  5847                           
  5848                           ;main.c: 2849: PORTBbits.RB0 = 0;
  5849  00377C  9081               	bcf	3969,0,c	;volatile
  5850                           
  5851                           ;main.c: 2850: break;
  5852  00377E  D047               	goto	l14360
  5853  003780                     l955:
  5854                           
  5855                           ;main.c: 2853: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  5856  003780  A281               	btfss	3969,1,c	;volatile
  5857  003782  D002               	goto	l14322
  5858  003784  0E01               	movlw	1
  5859  003786  6E51               	movwf	doActionPulseOn@bEvent,c
  5860  003788                     l14322:
  5861                           
  5862                           ;main.c: 2854: PORTBbits.RB1 = 0;
  5863  003788  9281               	bcf	3969,1,c	;volatile
  5864                           
  5865                           ;main.c: 2855: break;
  5866  00378A  D041               	goto	l14360
  5867  00378C                     l957:
  5868                           
  5869                           ;main.c: 2858: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  5870  00378C  A682               	btfss	3970,3,c	;volatile
  5871  00378E  D002               	goto	l14326
  5872  003790  0E01               	movlw	1
  5873  003792  6E51               	movwf	doActionPulseOn@bEvent,c
  5874  003794                     l14326:
  5875                           
  5876                           ;main.c: 2859: PORTCbits.RC3 = 0;
  5877  003794  9682               	bcf	3970,3,c	;volatile
  5878                           
  5879                           ;main.c: 2860: break;
  5880  003796  D03B               	goto	l14360
  5881  003798                     l959:
  5882                           
  5883                           ;main.c: 2863: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  5884  003798  A882               	btfss	3970,4,c	;volatile
  5885  00379A  D002               	goto	l14330
  5886  00379C  0E01               	movlw	1
  5887  00379E  6E51               	movwf	doActionPulseOn@bEvent,c
  5888  0037A0                     l14330:
  5889                           
  5890                           ;main.c: 2864: PORTCbits.RC4 = 0;
  5891  0037A0  9882               	bcf	3970,4,c	;volatile
  5892                           
  5893                           ;main.c: 2865: break;
  5894  0037A2  D035               	goto	l14360
  5895  0037A4                     l961:
  5896                           
  5897                           ;main.c: 2868: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  5898  0037A4  AA82               	btfss	3970,5,c	;volatile
  5899  0037A6  D002               	goto	l14334
  5900  0037A8  0E01               	movlw	1
  5901  0037AA  6E51               	movwf	doActionPulseOn@bEvent,c
  5902  0037AC                     l14334:
  5903                           
  5904                           ;main.c: 2869: PORTCbits.RC5 = 0;
  5905  0037AC  9A82               	bcf	3970,5,c	;volatile
  5906                           
  5907                           ;main.c: 2870: break;
  5908  0037AE  D02F               	goto	l14360
  5909  0037B0                     l963:
  5910                           
  5911                           ;main.c: 2873: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  5912  0037B0  AC82               	btfss	3970,6,c	;volatile
  5913  0037B2  D002               	goto	l14338
  5914  0037B4  0E01               	movlw	1
  5915  0037B6  6E51               	movwf	doActionPulseOn@bEvent,c
  5916  0037B8                     l14338:
  5917                           
  5918                           ;main.c: 2874: PORTCbits.RC6 = 0;
  5919  0037B8  9C82               	bcf	3970,6,c	;volatile
  5920                           
  5921                           ;main.c: 2875: break;
  5922  0037BA  D029               	goto	l14360
  5923  0037BC                     l965:
  5924                           
  5925                           ;main.c: 2878: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  5926  0037BC  AE82               	btfss	3970,7,c	;volatile
  5927  0037BE  D002               	goto	l14342
  5928  0037C0  0E01               	movlw	1
  5929  0037C2  6E51               	movwf	doActionPulseOn@bEvent,c
  5930  0037C4                     l14342:
  5931                           
  5932                           ;main.c: 2879: PORTCbits.RC7 = 0;
  5933  0037C4  9E82               	bcf	3970,7,c	;volatile
  5934                           
  5935                           ;main.c: 2880: break;
  5936  0037C6  D023               	goto	l14360
  5937  0037C8                     l967:
  5938                           
  5939                           ;main.c: 2883: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  5940  0037C8  A480               	btfss	3968,2,c	;volatile
  5941  0037CA  D002               	goto	l14346
  5942  0037CC                     l14344:
  5943  0037CC  0E01               	movlw	1
  5944  0037CE  6E51               	movwf	doActionPulseOn@bEvent,c
  5945  0037D0                     l14346:
  5946                           
  5947                           ;main.c: 2884: PORTAbits.RA2 = 0;
  5948  0037D0  9480               	bcf	3968,2,c	;volatile
  5949                           
  5950                           ;main.c: 2885: break;
  5951  0037D2  D01D               	goto	l14360
  5952  0037D4                     l969:
  5953                           
  5954                           ;main.c: 2888: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  5955  0037D4  A280               	btfss	3968,1,c	;volatile
  5956  0037D6  D002               	goto	l14350
  5957  0037D8  0E01               	movlw	1
  5958  0037DA  6E51               	movwf	doActionPulseOn@bEvent,c
  5959  0037DC                     l14350:
  5960                           
  5961                           ;main.c: 2889: PORTAbits.RA1 = 0;
  5962  0037DC  9280               	bcf	3968,1,c	;volatile
  5963                           
  5964                           ;main.c: 2890: break;
  5965  0037DE  D017               	goto	l14360
  5966  0037E0                     l971:
  5967                           
  5968                           ;main.c: 2893: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  5969  0037E0  B080               	btfsc	3968,0,c	;volatile
  5970  0037E2  D7F4               	goto	l14344
  5971  0037E4  D7F5               	goto	l14346
  5972  0037E6                     l14358:
  5973  0037E6  504F               	movf	doActionPulseOn@arg,w,c
  5974                           
  5975                           ; Switch size 1, requested type "space"
  5976                           ; Number of cases is 10, Range of values is 0 to 9
  5977                           ; switch strategies available:
  5978                           ; Name         Instructions Cycles
  5979                           ; simple_byte           31    16 (average)
  5980                           ;	Chosen strategy is simple_byte
  5981  0037E8  E0C5               	bz	l952
  5982  0037EA  0A01               	xorlw	1	; case 1
  5983  0037EC  E0C9               	bz	l955
  5984  0037EE  0A03               	xorlw	3	; case 2
  5985  0037F0  E0CD               	bz	l957
  5986  0037F2  0A01               	xorlw	1	; case 3
  5987  0037F4  E0D1               	bz	l959
  5988  0037F6  0A07               	xorlw	7	; case 4
  5989  0037F8  E0D5               	bz	l961
  5990  0037FA  0A01               	xorlw	1	; case 5
  5991  0037FC  E0D9               	bz	l963
  5992  0037FE  0A03               	xorlw	3	; case 6
  5993  003800  E0DD               	bz	l965
  5994  003802  0A01               	xorlw	1	; case 7
  5995  003804  E0E1               	bz	l967
  5996  003806  0A0F               	xorlw	15	; case 8
  5997  003808  E0E5               	bz	l969
  5998  00380A  0A01               	xorlw	1	; case 9
  5999  00380C  E0E9               	bz	l971
  6000  00380E                     l14360:
  6001                           
  6002                           ;main.c: 2900: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6003  00380E  5051               	movf	doActionPulseOn@bEvent,w,c
  6004  003810  A4D8               	btfss	status,2,c
  6005  003812  A850               	btfss	doActionPulseOn@ctrlreg,4,c
  6006  003814  D008               	goto	l14366
  6007                           
  6008                           ;main.c: 2901: SendInformationEvent( arg, 20, 4 );
  6009  003816  0E14               	movlw	20
  6010  003818  0100               	movlb	0	; () banked
  6011  00381A  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  6012  00381C  0E04               	movlw	4
  6013  00381E  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6014  003820  504F               	movf	doActionPulseOn@arg,w,c
  6015  003822  ECC0  F021         	call	_SendInformationEvent
  6016  003826                     l14366:
  6017                           
  6018                           ;main.c: 2902: }
  6019                           ;main.c: 2904: channel_pulse_flags |= ( 1 << arg );
  6020  003826  C04F  F0D1         	movff	doActionPulseOn@arg,??_doActionPulseOn
  6021  00382A  0E01               	movlw	1
  6022  00382C  0100               	movlb	0	; () banked
  6023  00382E  6FD2               	movwf	(??_doActionPulseOn+1)& (0+255),b
  6024  003830  6BD3               	clrf	(??_doActionPulseOn+2)& (0+255),b
  6025  003832  2BD1               	incf	??_doActionPulseOn& (0+255),f,b
  6026  003834  D003               	goto	u19244
  6027  003836                     u19245:
  6028  003836  90D8               	bcf	status,0,c
  6029  003838  37D2               	rlcf	(??_doActionPulseOn+1)& (0+255),f,b
  6030  00383A  37D3               	rlcf	(??_doActionPulseOn+2)& (0+255),f,b
  6031  00383C                     u19244:
  6032  00383C  2FD1               	decfsz	??_doActionPulseOn& (0+255),f,b
  6033  00383E  D7FB               	goto	u19245
  6034  003840  51D2               	movf	(??_doActionPulseOn+1)& (0+255),w,b
  6035  003842  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  6036  003844  51D3               	movf	(??_doActionPulseOn+2)& (0+255),w,b
  6037  003846  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 2905: channel_pulse_timer[ 0 ] =
  6041                           ;main.c: 2906: Read_b_eep(0x43 + 46 + 0u + arg) * 256 +
  6042                           ;main.c: 2908: Read_b_eep(0x43 + 46 + 1u + arg);
  6043  003848  0E72               	movlw	114
  6044  00384A  244F               	addwf	doActionPulseOn@arg,w,c
  6045  00384C  6E08               	movwf	?_Read_b_eep,c
  6046  00384E  6A09               	clrf	?_Read_b_eep+1,c
  6047  003850  0E00               	movlw	0
  6048  003852  2209               	addwfc	?_Read_b_eep+1,f,c
  6049  003854  EC83  F024         	call	_Read_b_eep	;wreg free
  6050  003858  0100               	movlb	0	; () banked
  6051  00385A  6FD1               	movwf	??_doActionPulseOn& (0+255),b
  6052  00385C  0E71               	movlw	113
  6053  00385E  244F               	addwf	doActionPulseOn@arg,w,c
  6054  003860  6E08               	movwf	?_Read_b_eep,c
  6055  003862  6A09               	clrf	?_Read_b_eep+1,c
  6056  003864  0E00               	movlw	0
  6057  003866  2209               	addwfc	?_Read_b_eep+1,f,c
  6058  003868  EC83  F024         	call	_Read_b_eep	;wreg free
  6059  00386C  0100               	movlb	0	; () banked
  6060  00386E  6FD3               	movwf	(??_doActionPulseOn+2)& (0+255),b
  6061  003870  6BD2               	clrf	(??_doActionPulseOn+1)& (0+255),b
  6062  003872  51D1               	movf	??_doActionPulseOn& (0+255),w,b
  6063  003874  25D2               	addwf	(??_doActionPulseOn+1)& (0+255),w,b
  6064  003876  0101               	movlb	1	; () banked
  6065  003878  6F00               	movwf	_channel_pulse_timer& (0+255),b
  6066  00387A  0100               	movlb	0	; () banked
  6067  00387C  0E00               	movlw	0
  6068  00387E  21D3               	addwfc	(??_doActionPulseOn+2)& (0+255),w,b
  6069  003880  0101               	movlb	1	; () banked
  6070  003882  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
  6071  003884                     l949:
  6072  003884  0012               	return	
  6073  003886                     __end_of_doActionPulseOn:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           intcon2	equ	0xFF1
  6083                           postinc0	equ	0xFEE
  6084                           wreg	equ	0xFE8
  6085                           indf1	equ	0xFE7
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           plusw2	equ	0xFDB
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _doActionOn *****************
  6097 ;; Defined at:
  6098 ;;		line 2666 in file "../main.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  dmflags         1    wreg     unsigned char 
  6101 ;;  arg             1   78[COMRAM] unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  dmflags         1    0[COMRAM] unsigned char 
  6104 ;;  bEvent          1   23[BANK0 ] enum E15660
  6105 ;;  ctrlreg         1   22[BANK0 ] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;		None               void
  6108 ;; Registers used:
  6109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : F/0
  6112 ;;		On exit  : F/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6115 ;;      Params:         1       0       0       0       0       0       0
  6116 ;;      Locals:         0       2       0       0       0       0       0
  6117 ;;      Temps:          2       0       0       0       0       0       0
  6118 ;;      Totals:         3       2       0       0       0       0       0
  6119 ;;Total ram usage:        5 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    7
  6122 ;; This function calls:
  6123 ;;		_Read_b_eep
  6124 ;;		_SendInformationEvent
  6125 ;; This function is called by:
  6126 ;;		_doDM
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text14
  6131  003886                     __ptext14:
  6132                           	opt stack 0
  6133  003886                     _doActionOn:
  6134                           	opt stack 21
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;main.c: 2667: unsigned char ctrlreg;
  6138                           ;main.c: 2668: BOOL bEvent = 0;
  6139                           
  6140                           ;incstack = 0
  6141                           ;incstack = 0
  6142  003886  6BD2               	clrf	doActionOn@bEvent& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;main.c: 2671: if ( arg > 9 ) return;
  6146  003888  0E09               	movlw	9
  6147  00388A  644F               	cpfsgt	doActionOn@arg,c
  6148  00388C  D001               	goto	l14246
  6149  00388E  D08B               	goto	l892
  6150  003890                     l14246:
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;main.c: 2673: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6154  003890  0E5B               	movlw	91
  6155  003892  244F               	addwf	doActionOn@arg,w,c
  6156  003894  6E08               	movwf	?_Read_b_eep,c
  6157  003896  6A09               	clrf	?_Read_b_eep+1,c
  6158  003898  0E00               	movlw	0
  6159  00389A  2209               	addwfc	?_Read_b_eep+1,f,c
  6160  00389C  EC83  F024         	call	_Read_b_eep	;wreg free
  6161  0038A0  0100               	movlb	0	; () banked
  6162  0038A2  6FD1               	movwf	doActionOn@ctrlreg& (0+255),b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;main.c: 2676: if ( !( ctrlreg & 0x80 ) ) return;
  6166  0038A4  AFD1               	btfss	doActionOn@ctrlreg& (0+255),7,b
  6167  0038A6  D07F               	goto	l892
  6168  0038A8  D039               	goto	l14294
  6169  0038AA                     l895:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;main.c: 2681: if ( 0 == PORTBbits.RB0 ) bEvent = 1;
  6173  0038AA  B081               	btfsc	3969,0,c	;volatile
  6174  0038AC  D002               	goto	l14254
  6175                           
  6176                           ; BSR set to: 0
  6177  0038AE  0E01               	movlw	1
  6178  0038B0  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6179  0038B2                     l14254:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;main.c: 2682: PORTBbits.RB0 = 1;
  6183  0038B2  8081               	bsf	3969,0,c	;volatile
  6184                           
  6185                           ;main.c: 2683: break;
  6186  0038B4  D047               	goto	l897
  6187  0038B6                     l898:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 2686: if ( 0 == PORTBbits.RB1 ) bEvent = 1;
  6191  0038B6  B281               	btfsc	3969,1,c	;volatile
  6192  0038B8  D002               	goto	l14258
  6193                           
  6194                           ; BSR set to: 0
  6195  0038BA  0E01               	movlw	1
  6196  0038BC  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6197  0038BE                     l14258:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;main.c: 2687: PORTBbits.RB1 = 1;
  6201  0038BE  8281               	bsf	3969,1,c	;volatile
  6202                           
  6203                           ;main.c: 2688: break;
  6204  0038C0  D041               	goto	l897
  6205  0038C2                     l900:
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 2691: if ( 0 == PORTCbits.RC3 ) bEvent = 1;
  6209  0038C2  B682               	btfsc	3970,3,c	;volatile
  6210  0038C4  D002               	goto	l14262
  6211                           
  6212                           ; BSR set to: 0
  6213  0038C6  0E01               	movlw	1
  6214  0038C8  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6215  0038CA                     l14262:
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;main.c: 2692: PORTCbits.RC3 = 1;
  6219  0038CA  8682               	bsf	3970,3,c	;volatile
  6220                           
  6221                           ;main.c: 2693: break;
  6222  0038CC  D03B               	goto	l897
  6223  0038CE                     l902:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;main.c: 2696: if ( 0 == PORTCbits.RC4 ) bEvent = 1;
  6227  0038CE  B882               	btfsc	3970,4,c	;volatile
  6228  0038D0  D002               	goto	l14266
  6229                           
  6230                           ; BSR set to: 0
  6231  0038D2  0E01               	movlw	1
  6232  0038D4  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6233  0038D6                     l14266:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;main.c: 2697: PORTCbits.RC4 = 1;
  6237  0038D6  8882               	bsf	3970,4,c	;volatile
  6238                           
  6239                           ;main.c: 2698: break;
  6240  0038D8  D035               	goto	l897
  6241  0038DA                     l904:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;main.c: 2701: if ( 0 == PORTCbits.RC5 ) bEvent = 1;
  6245  0038DA  BA82               	btfsc	3970,5,c	;volatile
  6246  0038DC  D002               	goto	l14270
  6247                           
  6248                           ; BSR set to: 0
  6249  0038DE  0E01               	movlw	1
  6250  0038E0  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6251  0038E2                     l14270:
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;main.c: 2702: PORTCbits.RC5 = 1;
  6255  0038E2  8A82               	bsf	3970,5,c	;volatile
  6256                           
  6257                           ;main.c: 2703: break;
  6258  0038E4  D02F               	goto	l897
  6259  0038E6                     l906:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;main.c: 2706: if ( 0 == PORTCbits.RC6 ) bEvent = 1;
  6263  0038E6  BC82               	btfsc	3970,6,c	;volatile
  6264  0038E8  D002               	goto	l14274
  6265                           
  6266                           ; BSR set to: 0
  6267  0038EA  0E01               	movlw	1
  6268  0038EC  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6269  0038EE                     l14274:
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;main.c: 2707: PORTCbits.RC6 = 1;
  6273  0038EE  8C82               	bsf	3970,6,c	;volatile
  6274                           
  6275                           ;main.c: 2708: break;
  6276  0038F0  D029               	goto	l897
  6277  0038F2                     l908:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 2711: if ( 0 == PORTCbits.RC7 ) bEvent = 1;
  6281  0038F2  BE82               	btfsc	3970,7,c	;volatile
  6282  0038F4  D002               	goto	l14278
  6283                           
  6284                           ; BSR set to: 0
  6285  0038F6  0E01               	movlw	1
  6286  0038F8  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6287  0038FA                     l14278:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;main.c: 2712: PORTCbits.RC7 = 1;
  6291  0038FA  8E82               	bsf	3970,7,c	;volatile
  6292                           
  6293                           ;main.c: 2713: break;
  6294  0038FC  D023               	goto	l897
  6295  0038FE                     l910:
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 2716: if ( 0 == PORTAbits.RA2 ) bEvent = 1;
  6299  0038FE  B480               	btfsc	3968,2,c	;volatile
  6300  003900  D002               	goto	l14282
  6301  003902                     l14280:
  6302                           
  6303                           ; BSR set to: 0
  6304  003902  0E01               	movlw	1
  6305  003904  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6306  003906                     l14282:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 2717: PORTAbits.RA2 = 1;
  6310  003906  8480               	bsf	3968,2,c	;volatile
  6311                           
  6312                           ;main.c: 2718: break;
  6313  003908  D01D               	goto	l897
  6314  00390A                     l912:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 2721: if ( 0 == PORTAbits.RA1 ) bEvent = 1;
  6318  00390A  B280               	btfsc	3968,1,c	;volatile
  6319  00390C  D002               	goto	l14286
  6320                           
  6321                           ; BSR set to: 0
  6322  00390E  0E01               	movlw	1
  6323  003910  6FD2               	movwf	doActionOn@bEvent& (0+255),b
  6324  003912                     l14286:
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;main.c: 2722: PORTAbits.RA1 = 1;
  6328  003912  8280               	bsf	3968,1,c	;volatile
  6329                           
  6330                           ;main.c: 2723: break;
  6331  003914  D017               	goto	l897
  6332  003916                     l914:
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;main.c: 2726: if ( 0 == PORTAbits.RA0 ) bEvent = 1;
  6336  003916  A080               	btfss	3968,0,c	;volatile
  6337  003918  D7F4               	goto	l14280
  6338  00391A  D7F5               	goto	l14282
  6339  00391C                     l14294:
  6340                           
  6341                           ; BSR set to: 0
  6342  00391C  504F               	movf	doActionOn@arg,w,c
  6343                           
  6344                           ; Switch size 1, requested type "space"
  6345                           ; Number of cases is 10, Range of values is 0 to 9
  6346                           ; switch strategies available:
  6347                           ; Name         Instructions Cycles
  6348                           ; simple_byte           31    16 (average)
  6349                           ;	Chosen strategy is simple_byte
  6350  00391E  E0C5               	bz	l895
  6351  003920  0A01               	xorlw	1	; case 1
  6352  003922  E0C9               	bz	l898
  6353  003924  0A03               	xorlw	3	; case 2
  6354  003926  E0CD               	bz	l900
  6355  003928  0A01               	xorlw	1	; case 3
  6356  00392A  E0D1               	bz	l902
  6357  00392C  0A07               	xorlw	7	; case 4
  6358  00392E  E0D5               	bz	l904
  6359  003930  0A01               	xorlw	1	; case 5
  6360  003932  E0D9               	bz	l906
  6361  003934  0A03               	xorlw	3	; case 6
  6362  003936  E0DD               	bz	l908
  6363  003938  0A01               	xorlw	1	; case 7
  6364  00393A  E0E1               	bz	l910
  6365  00393C  0A0F               	xorlw	15	; case 8
  6366  00393E  E0E5               	bz	l912
  6367  003940  0A01               	xorlw	1	; case 9
  6368  003942  E0E9               	bz	l914
  6369  003944                     l897:
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 2732: if ( ctrlreg & 0x04 ) {
  6373  003944  A5D1               	btfss	doActionOn@ctrlreg& (0+255),2,b
  6374  003946  D024               	goto	l14298
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 2733: channel_protection_timer[ arg ] =
  6378                           ;main.c: 2734: Read_b_eep(0x43 + 46 + 20u + 2 * arg) * 256 +
  6379                           ;main.c: 2738: Read_b_eep(0x43 + 46 + 21u + 2 * arg);
  6380  003948  504F               	movf	doActionOn@arg,w,c
  6381  00394A  0D02               	mullw	2
  6382  00394C  0E85               	movlw	133
  6383  00394E  24F3               	addwf	prodl,w,c
  6384  003950  6E08               	movwf	?_Read_b_eep,c
  6385  003952  0E00               	movlw	0
  6386  003954  20F4               	addwfc	prodh,w,c
  6387  003956  6E09               	movwf	?_Read_b_eep+1,c
  6388  003958  EC83  F024         	call	_Read_b_eep	;wreg free
  6389  00395C  6E51               	movwf	(??_doActionOn+1)& (0+255),c
  6390  00395E  6A50               	clrf	??_doActionOn& (0+255),c
  6391  003960  504F               	movf	doActionOn@arg,w,c
  6392  003962  0D02               	mullw	2
  6393  003964  0E86               	movlw	134
  6394  003966  24F3               	addwf	prodl,w,c
  6395  003968  6E08               	movwf	?_Read_b_eep,c
  6396  00396A  0E00               	movlw	0
  6397  00396C  20F4               	addwfc	prodh,w,c
  6398  00396E  6E09               	movwf	?_Read_b_eep+1,c
  6399  003970  EC83  F024         	call	_Read_b_eep	;wreg free
  6400  003974  2650               	addwf	??_doActionOn,f,c
  6401  003976  0E00               	movlw	0
  6402  003978  2251               	addwfc	??_doActionOn+1,f,c
  6403  00397A  504F               	movf	doActionOn@arg,w,c
  6404  00397C  0D02               	mullw	2
  6405  00397E  50F3               	movf	prodl,w,c
  6406  003980  0100               	movlb	0	; () banked
  6407  003982  0F82               	addlw	low _channel_protection_timer
  6408  003984  6ED9               	movwf	fsr2l,c
  6409  003986  6ADA               	clrf	fsr2h,c
  6410  003988  C050  FFDE         	movff	??_doActionOn,postinc2
  6411  00398C  C051  FFDD         	movff	??_doActionOn+1,postdec2
  6412  003990                     l14298:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;main.c: 2742: }
  6416                           ;main.c: 2745: if ( bEvent && ( ctrlreg & 0x08 ) ) {
  6417  003990  51D2               	movf	doActionOn@bEvent& (0+255),w,b
  6418  003992  A4D8               	btfss	status,2,c
  6419                           
  6420                           ; BSR set to: 0
  6421  003994  A7D1               	btfss	doActionOn@ctrlreg& (0+255),3,b
  6422  003996  D007               	goto	l892
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;main.c: 2746: SendInformationEvent( arg, 20, 3 );
  6426  003998  0E14               	movlw	20
  6427  00399A  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  6428  00399C  0E03               	movlw	3
  6429  00399E  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6430  0039A0  504F               	movf	doActionOn@arg,w,c
  6431  0039A2  ECC0  F021         	call	_SendInformationEvent
  6432  0039A6                     l892:
  6433                           
  6434                           ; BSR set to: 0
  6435  0039A6  0012               	return	
  6436  0039A8                     __end_of_doActionOn:
  6437                           	opt stack 0
  6438                           tblptru	equ	0xFF8
  6439                           tblptrh	equ	0xFF7
  6440                           tblptrl	equ	0xFF6
  6441                           tablat	equ	0xFF5
  6442                           prodh	equ	0xFF4
  6443                           prodl	equ	0xFF3
  6444                           intcon	equ	0xFF2
  6445                           intcon2	equ	0xFF1
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           plusw2	equ	0xFDB
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _doActionOff *****************
  6460 ;; Defined at:
  6461 ;;		line 2756 in file "../main.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  dmflags         1    wreg     unsigned char 
  6464 ;;  arg             1   78[COMRAM] unsigned char 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  dmflags         1    0[COMRAM] unsigned char 
  6467 ;;  bEvent          1   80[COMRAM] enum E15660
  6468 ;;  ctrlreg         1   79[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : F/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6478 ;;      Params:         1       0       0       0       0       0       0
  6479 ;;      Locals:         2       0       0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0
  6481 ;;      Totals:         3       0       0       0       0       0       0
  6482 ;;Total ram usage:        3 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    7
  6485 ;; This function calls:
  6486 ;;		_Read_b_eep
  6487 ;;		_SendInformationEvent
  6488 ;; This function is called by:
  6489 ;;		_doApplicationOneSecondWork
  6490 ;;		_doDM
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text15
  6495  003FB6                     __ptext15:
  6496                           	opt stack 0
  6497  003FB6                     _doActionOff:
  6498                           	opt stack 21
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;main.c: 2757: unsigned char ctrlreg;
  6502                           ;main.c: 2758: BOOL bEvent = 0;
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;incstack = 0
  6506                           ;incstack = 0
  6507  003FB6  6A51               	clrf	doActionOff@bEvent,c
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;main.c: 2761: if ( arg > 9 ) return;
  6511  003FB8  0E09               	movlw	9
  6512  003FBA  644F               	cpfsgt	doActionOff@arg,c
  6513  003FBC  D001               	goto	l13368
  6514  003FBE  D065               	goto	l921
  6515  003FC0                     l13368:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;main.c: 2763: ctrlreg = Read_b_eep(0x43 + 24 + arg);
  6519  003FC0  0E5B               	movlw	91
  6520  003FC2  244F               	addwf	doActionOff@arg,w,c
  6521  003FC4  6E08               	movwf	?_Read_b_eep,c
  6522  003FC6  6A09               	clrf	?_Read_b_eep+1,c
  6523  003FC8  0E00               	movlw	0
  6524  003FCA  2209               	addwfc	?_Read_b_eep+1,f,c
  6525  003FCC  EC83  F024         	call	_Read_b_eep	;wreg free
  6526  003FD0  6E50               	movwf	doActionOff@ctrlreg,c
  6527                           
  6528                           ;main.c: 2766: if ( !( ctrlreg & 0x80 ) ) return;
  6529  003FD2  AE50               	btfss	doActionOff@ctrlreg,7,c
  6530  003FD4  D05A               	goto	l921
  6531  003FD6  D039               	goto	l13416
  6532  003FD8                     l924:
  6533                           
  6534                           ;main.c: 2771: if ( 1 == PORTBbits.RB0 ) bEvent = 1;
  6535  003FD8  A081               	btfss	3969,0,c	;volatile
  6536  003FDA  D002               	goto	l13376
  6537  003FDC  0E01               	movlw	1
  6538  003FDE  6E51               	movwf	doActionOff@bEvent,c
  6539  003FE0                     l13376:
  6540                           
  6541                           ;main.c: 2772: PORTBbits.RB0 = 0;
  6542  003FE0  9081               	bcf	3969,0,c	;volatile
  6543                           
  6544                           ;main.c: 2773: break;
  6545  003FE2  D047               	goto	l13418
  6546  003FE4                     l927:
  6547                           
  6548                           ;main.c: 2776: if ( 1 == PORTBbits.RB1 ) bEvent = 1;
  6549  003FE4  A281               	btfss	3969,1,c	;volatile
  6550  003FE6  D002               	goto	l13380
  6551  003FE8  0E01               	movlw	1
  6552  003FEA  6E51               	movwf	doActionOff@bEvent,c
  6553  003FEC                     l13380:
  6554                           
  6555                           ;main.c: 2777: PORTBbits.RB1 = 0;
  6556  003FEC  9281               	bcf	3969,1,c	;volatile
  6557                           
  6558                           ;main.c: 2778: break;
  6559  003FEE  D041               	goto	l13418
  6560  003FF0                     l929:
  6561                           
  6562                           ;main.c: 2781: if ( 1 == PORTCbits.RC3 ) bEvent = 1;
  6563  003FF0  A682               	btfss	3970,3,c	;volatile
  6564  003FF2  D002               	goto	l13384
  6565  003FF4  0E01               	movlw	1
  6566  003FF6  6E51               	movwf	doActionOff@bEvent,c
  6567  003FF8                     l13384:
  6568                           
  6569                           ;main.c: 2782: PORTCbits.RC3 = 0;
  6570  003FF8  9682               	bcf	3970,3,c	;volatile
  6571                           
  6572                           ;main.c: 2783: break;
  6573  003FFA  D03B               	goto	l13418
  6574  003FFC                     l931:
  6575                           
  6576                           ;main.c: 2786: if ( 1 == PORTCbits.RC4 ) bEvent = 1;
  6577  003FFC  A882               	btfss	3970,4,c	;volatile
  6578  003FFE  D002               	goto	l13388
  6579  004000  0E01               	movlw	1
  6580  004002  6E51               	movwf	doActionOff@bEvent,c
  6581  004004                     l13388:
  6582                           
  6583                           ;main.c: 2787: PORTCbits.RC4 = 0;
  6584  004004  9882               	bcf	3970,4,c	;volatile
  6585                           
  6586                           ;main.c: 2788: break;
  6587  004006  D035               	goto	l13418
  6588  004008                     l933:
  6589                           
  6590                           ;main.c: 2791: if ( 1 == PORTCbits.RC5 ) bEvent = 1;
  6591  004008  AA82               	btfss	3970,5,c	;volatile
  6592  00400A  D002               	goto	l13392
  6593  00400C  0E01               	movlw	1
  6594  00400E  6E51               	movwf	doActionOff@bEvent,c
  6595  004010                     l13392:
  6596                           
  6597                           ;main.c: 2792: PORTCbits.RC5 = 0;
  6598  004010  9A82               	bcf	3970,5,c	;volatile
  6599                           
  6600                           ;main.c: 2793: break;
  6601  004012  D02F               	goto	l13418
  6602  004014                     l935:
  6603                           
  6604                           ;main.c: 2796: if ( 1 == PORTCbits.RC6 ) bEvent = 1;
  6605  004014  AC82               	btfss	3970,6,c	;volatile
  6606  004016  D002               	goto	l13396
  6607  004018  0E01               	movlw	1
  6608  00401A  6E51               	movwf	doActionOff@bEvent,c
  6609  00401C                     l13396:
  6610                           
  6611                           ;main.c: 2797: PORTCbits.RC6 = 0;
  6612  00401C  9C82               	bcf	3970,6,c	;volatile
  6613                           
  6614                           ;main.c: 2798: break;
  6615  00401E  D029               	goto	l13418
  6616  004020                     l937:
  6617                           
  6618                           ;main.c: 2801: if ( 1 == PORTCbits.RC7 ) bEvent = 1;
  6619  004020  AE82               	btfss	3970,7,c	;volatile
  6620  004022  D002               	goto	l13400
  6621  004024  0E01               	movlw	1
  6622  004026  6E51               	movwf	doActionOff@bEvent,c
  6623  004028                     l13400:
  6624                           
  6625                           ;main.c: 2802: PORTCbits.RC7 = 0;
  6626  004028  9E82               	bcf	3970,7,c	;volatile
  6627                           
  6628                           ;main.c: 2803: break;
  6629  00402A  D023               	goto	l13418
  6630  00402C                     l939:
  6631                           
  6632                           ;main.c: 2806: if ( 1 == PORTAbits.RA2 ) bEvent = 1;
  6633  00402C  A480               	btfss	3968,2,c	;volatile
  6634  00402E  D002               	goto	l13404
  6635  004030                     l13402:
  6636  004030  0E01               	movlw	1
  6637  004032  6E51               	movwf	doActionOff@bEvent,c
  6638  004034                     l13404:
  6639                           
  6640                           ;main.c: 2807: PORTAbits.RA2 = 0;
  6641  004034  9480               	bcf	3968,2,c	;volatile
  6642                           
  6643                           ;main.c: 2808: break;
  6644  004036  D01D               	goto	l13418
  6645  004038                     l941:
  6646                           
  6647                           ;main.c: 2811: if ( 1 == PORTAbits.RA1 ) bEvent = 1;
  6648  004038  A280               	btfss	3968,1,c	;volatile
  6649  00403A  D002               	goto	l13408
  6650  00403C  0E01               	movlw	1
  6651  00403E  6E51               	movwf	doActionOff@bEvent,c
  6652  004040                     l13408:
  6653                           
  6654                           ;main.c: 2812: PORTAbits.RA1 = 0;
  6655  004040  9280               	bcf	3968,1,c	;volatile
  6656                           
  6657                           ;main.c: 2813: break;
  6658  004042  D017               	goto	l13418
  6659  004044                     l943:
  6660                           
  6661                           ;main.c: 2816: if ( 1 == PORTAbits.RA0 ) bEvent = 1;
  6662  004044  B080               	btfsc	3968,0,c	;volatile
  6663  004046  D7F4               	goto	l13402
  6664  004048  D7F5               	goto	l13404
  6665  00404A                     l13416:
  6666  00404A  504F               	movf	doActionOff@arg,w,c
  6667                           
  6668                           ; Switch size 1, requested type "space"
  6669                           ; Number of cases is 10, Range of values is 0 to 9
  6670                           ; switch strategies available:
  6671                           ; Name         Instructions Cycles
  6672                           ; simple_byte           31    16 (average)
  6673                           ;	Chosen strategy is simple_byte
  6674  00404C  E0C5               	bz	l924
  6675  00404E  0A01               	xorlw	1	; case 1
  6676  004050  E0C9               	bz	l927
  6677  004052  0A03               	xorlw	3	; case 2
  6678  004054  E0CD               	bz	l929
  6679  004056  0A01               	xorlw	1	; case 3
  6680  004058  E0D1               	bz	l931
  6681  00405A  0A07               	xorlw	7	; case 4
  6682  00405C  E0D5               	bz	l933
  6683  00405E  0A01               	xorlw	1	; case 5
  6684  004060  E0D9               	bz	l935
  6685  004062  0A03               	xorlw	3	; case 6
  6686  004064  E0DD               	bz	l937
  6687  004066  0A01               	xorlw	1	; case 7
  6688  004068  E0E1               	bz	l939
  6689  00406A  0A0F               	xorlw	15	; case 8
  6690  00406C  E0E5               	bz	l941
  6691  00406E  0A01               	xorlw	1	; case 9
  6692  004070  E0E9               	bz	l943
  6693  004072                     l13418:
  6694                           
  6695                           ;main.c: 2823: if ( bEvent && ( ctrlreg & 0x10 ) ) {
  6696  004072  5051               	movf	doActionOff@bEvent,w,c
  6697  004074  A4D8               	btfss	status,2,c
  6698  004076  A850               	btfss	doActionOff@ctrlreg,4,c
  6699  004078  D008               	goto	l921
  6700                           
  6701                           ;main.c: 2824: SendInformationEvent( arg, 20, 4 );
  6702  00407A  0E14               	movlw	20
  6703  00407C  0100               	movlb	0	; () banked
  6704  00407E  6FCF               	movwf	?_SendInformationEvent& (0+255),b
  6705  004080  0E04               	movlw	4
  6706  004082  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6707  004084  504F               	movf	doActionOff@arg,w,c
  6708  004086  ECC0  F021         	call	_SendInformationEvent
  6709  00408A                     l921:
  6710  00408A  0012               	return	
  6711  00408C                     __end_of_doActionOff:
  6712                           	opt stack 0
  6713                           tblptru	equ	0xFF8
  6714                           tblptrh	equ	0xFF7
  6715                           tblptrl	equ	0xFF6
  6716                           tablat	equ	0xFF5
  6717                           prodh	equ	0xFF4
  6718                           prodl	equ	0xFF3
  6719                           intcon	equ	0xFF2
  6720                           intcon2	equ	0xFF1
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           indf1	equ	0xFE7
  6724                           fsr1h	equ	0xFE2
  6725                           fsr1l	equ	0xFE1
  6726                           indf2	equ	0xFDF
  6727                           postinc2	equ	0xFDE
  6728                           postdec2	equ	0xFDD
  6729                           plusw2	equ	0xFDB
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734 ;; *************** function _vscp_handleProtocolEvent *****************
  6735 ;; Defined at:
  6736 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  bytes           1   48[BANK0 ] unsigned char 
  6741 ;;  page_save       2   44[BANK0 ] unsigned short 
  6742 ;;  i               1   54[BANK0 ] unsigned char 
  6743 ;;  bytes           2   58[BANK0 ] unsigned short 
  6744 ;;  page_save       2   42[BANK0 ] unsigned short 
  6745 ;;  byte            1   57[BANK0 ] unsigned char 
  6746 ;;  cb              1   53[BANK0 ] unsigned char 
  6747 ;;  bytes_this_t    1   52[BANK0 ] unsigned char 
  6748 ;;  j               1   62[BANK0 ] unsigned char 
  6749 ;;  i               1   60[BANK0 ] unsigned char 
  6750 ;;  k               1   55[BANK0 ] unsigned char 
  6751 ;;  i               1   56[BANK0 ] unsigned char 
  6752 ;;  len             1   51[BANK0 ] unsigned char 
  6753 ;;  pos             1   50[BANK0 ] unsigned char 
  6754 ;;  i               1   61[BANK0 ] unsigned char 
  6755 ;;  len             1   49[BANK0 ] unsigned char 
  6756 ;;  pos             1   47[BANK0 ] unsigned char 
  6757 ;;  offset          1   46[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : F/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6767 ;;      Params:         0       0       0       0       0       0       0
  6768 ;;      Locals:         0      21       0       0       0       0       0
  6769 ;;      Temps:          0       7       0       0       0       0       0
  6770 ;;      Totals:         0      28       0       0       0       0       0
  6771 ;;Total ram usage:       28 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    9
  6774 ;; This function calls:
  6775 ;;		_vscp_init
  6776 ;;		_vscp_readAppReg
  6777 ;;		_vscp_writeAppReg
  6778 ;;		_vscp_sendEvent
  6779 ;;		_vscp_getGUID
  6780 ;;		_vscp_getMDF_URL
  6781 ;;		_vscp_goBootloaderMode
  6782 ;;		_vscp_getMatrixInfo
  6783 ;;		_vscp_handleHeartbeat
  6784 ;;		_vscp_handleSetNickname
  6785 ;;		_vscp_handleDropNickname
  6786 ;;		_vscp_newNodeOnline
  6787 ;;		_vscp_readRegister
  6788 ;;		_vscp_readStdReg
  6789 ;;		_vscp_writeRegister
  6790 ;;		_vscp_writeStdReg
  6791 ;;		___lbmod
  6792 ;; This function is called by:
  6793 ;;		_main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text16
  6798  001C72                     __ptext16:
  6799                           	opt stack 0
  6800  001C72                     _vscp_handleProtocolEvent:
  6801                           	opt stack 20
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  6805                           
  6806                           ;incstack = 0
  6807                           ;incstack = 0
  6808  001C72  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  6809  001C74  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  6810  001C76  E101 D2B5          	bz	l13036
  6811  001C7A  D2E4               	goto	l1526
  6812  001C7C                     l12618:
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  6816  001C7C  EC54  F022         	call	_vscp_handleHeartbeat	;wreg free
  6817                           
  6818                           ;vscp_firmware.c: 807: break;
  6819  001C80  D2E1               	goto	l1526
  6820  001C82                     l12620:
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  6824  001C82  ECFF  F022         	call	_vscp_newNodeOnline	;wreg free
  6825                           
  6826                           ;vscp_firmware.c: 812: break;
  6827  001C86  D2DE               	goto	l1526
  6828  001C88                     l12622:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  6832  001C88  EC89  F023         	call	_vscp_handleSetNickname	;wreg free
  6833                           
  6834                           ;vscp_firmware.c: 817: break;
  6835  001C8C  D2DB               	goto	l1526
  6836  001C8E                     l12624:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  6840  001C8E  EC8D  F022         	call	_vscp_handleDropNickname	;wreg free
  6841                           
  6842                           ;vscp_firmware.c: 822: break;
  6843  001C92  D2D8               	goto	l1526
  6844  001C94                     l12626:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  6848                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6849  001C94  5196               	movf	_vscp_imsg& (0+255),w,b
  6850  001C96  0B0F               	andlw	15
  6851  001C98  0A02               	xorlw	2
  6852  001C9A  E001 D2D3          	bnz	l1526
  6853                           
  6854                           ; BSR set to: 0
  6855  001C9E  517D               	movf	_vscp_nickname& (0+255),w,b
  6856  001CA0  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6857  001CA4  62DF               	cpfseq	indf2,c
  6858  001CA6  D2CE               	goto	l1526
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  6862  001CA8  0E80               	movlw	128
  6863  001CAA  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6864  001CAC  D012               	goto	l12646
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  6868  001CAE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  6869  001CB0  ECA4  F018         	call	_vscp_readAppReg
  6870  001CB4                     L19:
  6871  001CB4  0100               	movlb	0	; () banked
  6872  001CB6                     L20:
  6873  001CB6  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  6877  001CB8  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  6881  001CBC  0E03               	movlw	3
  6882  001CBE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  6886  001CC0  0E82               	movlw	130
  6887  001CC2  6FA4               	movwf	_vscp_omsg& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  6891  001CC4  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6892  001CC6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  6896  001CC8  0E0A               	movlw	10
  6897  001CCA  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6898  001CCC                     l12644:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;vscp_firmware.c: 843: vscp_sendEvent();
  6902  001CCC  EC76  F023         	call	_vscp_sendEvent	;wreg free
  6903                           
  6904                           ;vscp_firmware.c: 844: }
  6905  001CD0  D2B9               	goto	l1526
  6906  001CD2                     l12646:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;vscp_firmware.c: 845: else {
  6910                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  6911                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  6912  001CD2  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  6913  001CD4  EC79  F019         	call	_vscp_readStdReg
  6914  001CD8  D7ED               	goto	L19
  6915  001CDA                     l12660:
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  6919                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6920  001CDA  5196               	movf	_vscp_imsg& (0+255),w,b
  6921  001CDC  0B0F               	andlw	15
  6922  001CDE  0A03               	xorlw	3
  6923  001CE0  E001 D2B0          	bnz	l1526
  6924                           
  6925                           ; BSR set to: 0
  6926  001CE4  517D               	movf	_vscp_nickname& (0+255),w,b
  6927  001CE6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6928  001CEA  62DF               	cpfseq	indf2,c
  6929  001CEC  D2AB               	goto	l1526
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  6933  001CEE  0E80               	movlw	128
  6934  001CF0  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  6935  001CF2  D006               	goto	l12680
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  6939                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6940  001CF4  C09E  F04F         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  6941  001CF8  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  6942  001CFA  EC76  F004         	call	_vscp_writeAppReg
  6943  001CFE  D7DB               	goto	L20
  6944  001D00                     l12680:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;vscp_firmware.c: 888: else {
  6948                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  6949                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  6950  001D00  C09E  F036         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  6951  001D04  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  6952  001D06  ECED  F01D         	call	_vscp_writeStdReg
  6953  001D0A  D7D4               	goto	L19
  6954  001D0C                     l12694:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  6958                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  6959                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  6960                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  6961                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  6962                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  6963                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  6964  001D0C  517D               	movf	_vscp_nickname& (0+255),w,b
  6965  001D0E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6966  001D12  62DF               	cpfseq	indf2,c
  6967  001D14  D297               	goto	l1526
  6968                           
  6969                           ; BSR set to: 0
  6970  001D16  0E00               	movlw	0
  6971  001D18  EC70  F024         	call	_vscp_getGUID
  6972  001D1C  0100               	movlb	0	; () banked
  6973  001D1E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6974  001D20  E001 D290          	bnz	l1526
  6975                           
  6976                           ; BSR set to: 0
  6977  001D24  0E03               	movlw	3
  6978  001D26  EC70  F024         	call	_vscp_getGUID
  6979  001D2A  0100               	movlb	0	; () banked
  6980  001D2C  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  6981  001D2E  E001 D289          	bnz	l1526
  6982                           
  6983                           ; BSR set to: 0
  6984  001D32  0E05               	movlw	5
  6985  001D34  EC70  F024         	call	_vscp_getGUID
  6986  001D38  0100               	movlb	0	; () banked
  6987  001D3A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  6988  001D3C  E001 D282          	bnz	l1526
  6989                           
  6990                           ; BSR set to: 0
  6991  001D40  0E07               	movlw	7
  6992  001D42  EC70  F024         	call	_vscp_getGUID
  6993  001D46  0100               	movlb	0	; () banked
  6994  001D48  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  6995  001D4A  E001 D27B          	bnz	l1526
  6996                           
  6997                           ; BSR set to: 0
  6998  001D4E  5053               	movf	_vscp_page_select+1,w,c
  6999  001D50  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7000  001D52  E001 D277          	bnz	l1526
  7001                           
  7002                           ; BSR set to: 0
  7003  001D56  5052               	movf	_vscp_page_select,w,c
  7004  001D58  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  7005  001D5C  62DF               	cpfseq	indf2,c
  7006  001D5E  D272               	goto	l1526
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7010  001D60  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7011  001D62  EC08  F024         	call	_vscp_goBootloaderMode
  7012  001D66  D26E               	goto	l1526
  7013  001D68                     l12710:
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7017                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7018                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7019                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7020  001D68  0E00               	movlw	0
  7021  001D6A  EC70  F024         	call	_vscp_getGUID
  7022  001D6E  0100               	movlb	0	; () banked
  7023  001D70  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7024  001D72  E173               	bnz	l12754
  7025                           
  7026                           ; BSR set to: 0
  7027  001D74  0E01               	movlw	1
  7028  001D76  EC70  F024         	call	_vscp_getGUID
  7029  001D7A  0100               	movlb	0	; () banked
  7030  001D7C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7031  001D7E  E16D               	bnz	l12754
  7032                           
  7033                           ; BSR set to: 0
  7034  001D80  0E02               	movlw	2
  7035  001D82  EC70  F024         	call	_vscp_getGUID
  7036  001D86  0100               	movlb	0	; () banked
  7037  001D88  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7038  001D8A  E167               	bnz	l12754
  7039                           
  7040                           ; BSR set to: 0
  7041  001D8C  0E03               	movlw	3
  7042  001D8E  EC70  F024         	call	_vscp_getGUID
  7043  001D92  0100               	movlb	0	; () banked
  7044  001D94  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7045  001D96  E161               	bnz	l12754
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7049  001D98  8979               	bsf	_vscp_guid_reset& (0+255),4,b
  7050  001D9A  D05F               	goto	l12754
  7051  001D9C                     l12720:
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7055                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7056                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7057                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7058  001D9C  0E04               	movlw	4
  7059  001D9E  EC70  F024         	call	_vscp_getGUID
  7060  001DA2  0100               	movlb	0	; () banked
  7061  001DA4  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7062  001DA6  E159               	bnz	l12754
  7063                           
  7064                           ; BSR set to: 0
  7065  001DA8  0E05               	movlw	5
  7066  001DAA  EC70  F024         	call	_vscp_getGUID
  7067  001DAE  0100               	movlb	0	; () banked
  7068  001DB0  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7069  001DB2  E153               	bnz	l12754
  7070                           
  7071                           ; BSR set to: 0
  7072  001DB4  0E06               	movlw	6
  7073  001DB6  EC70  F024         	call	_vscp_getGUID
  7074  001DBA  0100               	movlb	0	; () banked
  7075  001DBC  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7076  001DBE  E14D               	bnz	l12754
  7077                           
  7078                           ; BSR set to: 0
  7079  001DC0  0E07               	movlw	7
  7080  001DC2  EC70  F024         	call	_vscp_getGUID
  7081  001DC6  0100               	movlb	0	; () banked
  7082  001DC8  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7083  001DCA  E147               	bnz	l12754
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7087  001DCC  8B79               	bsf	_vscp_guid_reset& (0+255),5,b
  7088  001DCE  D045               	goto	l12754
  7089  001DD0                     l12730:
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7093                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7094                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7095                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7096  001DD0  0E08               	movlw	8
  7097  001DD2  EC70  F024         	call	_vscp_getGUID
  7098  001DD6  0100               	movlb	0	; () banked
  7099  001DD8  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7100  001DDA  E13F               	bnz	l12754
  7101                           
  7102                           ; BSR set to: 0
  7103  001DDC  0E09               	movlw	9
  7104  001DDE  EC70  F024         	call	_vscp_getGUID
  7105  001DE2  0100               	movlb	0	; () banked
  7106  001DE4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7107  001DE6  E139               	bnz	l12754
  7108                           
  7109                           ; BSR set to: 0
  7110  001DE8  0E0A               	movlw	10
  7111  001DEA  EC70  F024         	call	_vscp_getGUID
  7112  001DEE  0100               	movlb	0	; () banked
  7113  001DF0  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7114  001DF2  E133               	bnz	l12754
  7115                           
  7116                           ; BSR set to: 0
  7117  001DF4  0E0B               	movlw	11
  7118  001DF6  EC70  F024         	call	_vscp_getGUID
  7119  001DFA  0100               	movlb	0	; () banked
  7120  001DFC  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7121  001DFE  E12D               	bnz	l12754
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7125  001E00  8D79               	bsf	_vscp_guid_reset& (0+255),6,b
  7126  001E02  D02B               	goto	l12754
  7127  001E04                     l12740:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7131                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7132                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7133                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7134  001E04  0E0C               	movlw	12
  7135  001E06  EC70  F024         	call	_vscp_getGUID
  7136  001E0A  0100               	movlb	0	; () banked
  7137  001E0C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7138  001E0E  E125               	bnz	l12754
  7139                           
  7140                           ; BSR set to: 0
  7141  001E10  0E0D               	movlw	13
  7142  001E12  EC70  F024         	call	_vscp_getGUID
  7143  001E16  0100               	movlb	0	; () banked
  7144  001E18  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7145  001E1A  E11F               	bnz	l12754
  7146                           
  7147                           ; BSR set to: 0
  7148  001E1C  0E0E               	movlw	14
  7149  001E1E  EC70  F024         	call	_vscp_getGUID
  7150  001E22  0100               	movlb	0	; () banked
  7151  001E24  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7152  001E26  E119               	bnz	l12754
  7153                           
  7154                           ; BSR set to: 0
  7155  001E28  0E0F               	movlw	15
  7156  001E2A  EC70  F024         	call	_vscp_getGUID
  7157  001E2E  0100               	movlb	0	; () banked
  7158  001E30  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7159  001E32  E113               	bnz	l12754
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7163  001E34  8F79               	bsf	_vscp_guid_reset& (0+255),7,b
  7164  001E36  D011               	goto	l12754
  7165  001E38                     l1466:
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7169  001E38  6B79               	clrf	_vscp_guid_reset& (0+255),b
  7170                           
  7171                           ;vscp_firmware.c: 965: break;
  7172  001E3A  D00F               	goto	l12754
  7173  001E3C                     l12752:
  7174                           
  7175                           ; BSR set to: 0
  7176  001E3C  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7177  001E3E  0B0F               	andlw	15
  7178  001E40  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7179  001E42  6BDF               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7180                           
  7181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7182                           ; Switch size 1, requested type "space"
  7183                           ; Number of cases is 1, Range of values is 0 to 0
  7184                           ; switch strategies available:
  7185                           ; Name         Instructions Cycles
  7186                           ; simple_byte            4     3 (average)
  7187                           ;	Chosen strategy is simple_byte
  7188  001E44  51DF               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7189  001E46  E1F8               	bnz	l1466
  7190                           
  7191                           ; BSR set to: 0
  7192                           ; Switch size 1, requested type "space"
  7193                           ; Number of cases is 4, Range of values is 0 to 3
  7194                           ; switch strategies available:
  7195                           ; Name         Instructions Cycles
  7196                           ; simple_byte           13     7 (average)
  7197                           ;	Chosen strategy is simple_byte
  7198  001E48  51DE               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7199  001E4A  E08E               	bz	l12710
  7200  001E4C  0A01               	xorlw	1	; case 1
  7201  001E4E  E0A6               	bz	l12720
  7202  001E50  0A03               	xorlw	3	; case 2
  7203  001E52  E0BE               	bz	l12730
  7204  001E54  0A01               	xorlw	1	; case 3
  7205  001E56  E0D6               	bz	l12740
  7206  001E58  D7EF               	goto	l1466
  7207  001E5A                     l12754:
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7211  001E5A  5179               	movf	_vscp_guid_reset& (0+255),w,b
  7212  001E5C  0BF0               	andlw	240
  7213  001E5E  0AF0               	xorlw	240
  7214  001E60  E001 D1F0          	bnz	l1526
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;vscp_firmware.c: 970: vscp_init();
  7218  001E64  EC10  F022         	call	_vscp_init	;wreg free
  7219  001E68  D1ED               	goto	l1526
  7220  001E6A                     l12758:
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7224  001E6A  517D               	movf	_vscp_nickname& (0+255),w,b
  7225  001E6C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7226  001E70  62DF               	cpfseq	indf2,c
  7227  001E72  D1E8               	goto	l1526
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;vscp_firmware.c: 978: uint8_t i;
  7231                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7232  001E74  6BEA               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7233                           
  7234                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7235  001E76  C09D  F0E9         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7236                           
  7237                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7238  001E7A  C09E  F0EC         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7239                           
  7240                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7241  001E7E  6BF8               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7242  001E80  D042               	goto	l12790
  7243  001E82                     l12762:
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7247  001E82  0E07               	movlw	7
  7248  001E84  6E08               	movwf	?___lbmod,c
  7249  001E86  51F8               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7250  001E88  EC29  F023         	call	___lbmod
  7251  001E8C  0100               	movlb	0	; () banked
  7252  001E8E  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7253  001E90  51DE               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7254  001E92  0FAA               	addlw	low (_vscp_omsg+6)
  7255  001E94  6ED9               	movwf	fsr2l,c
  7256  001E96  6ADA               	clrf	fsr2h,c
  7257  001E98  51E9               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7258  001E9A  25F8               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7259  001E9C  EC16  F024         	call	_vscp_readRegister
  7260  001EA0  6EDF               	movwf	indf2,c
  7261                           
  7262                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7263  001EA2  0E07               	movlw	7
  7264  001EA4  6E08               	movwf	?___lbmod,c
  7265  001EA6  0100               	movlb	0	; () banked
  7266  001EA8  51F8               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7267  001EAA  EC29  F023         	call	___lbmod
  7268  001EAE  0A06               	xorlw	6
  7269  001EB0  E00B               	bz	l12768
  7270  001EB2  0EFF               	movlw	255
  7271  001EB4  0100               	movlb	0	; () banked
  7272  001EB6  25EC               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7273  001EB8  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7274  001EBA  6BDF               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7275  001EBC  0EFF               	movlw	255
  7276  001EBE  23DF               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7277  001EC0  51F8               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7278  001EC2  19DE               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7279  001EC4  11DF               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7280  001EC6  E11E               	bnz	l12788
  7281  001EC8                     l12768:
  7282                           
  7283                           ;vscp_firmware.c: 988: uint8_t bytes;
  7284                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7285  001EC8  0E07               	movlw	7
  7286  001ECA  6E08               	movwf	?___lbmod,c
  7287  001ECC  0100               	movlb	0	; () banked
  7288  001ECE  51F8               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7289  001ED0  EC29  F023         	call	___lbmod
  7290  001ED4  0A06               	xorlw	6
  7291  001ED6  E103               	bnz	l12772
  7292                           
  7293                           ;vscp_firmware.c: 991: bytes = 7;
  7294  001ED8  0E07               	movlw	7
  7295  001EDA  0100               	movlb	0	; () banked
  7296  001EDC  D009               	goto	L21
  7297  001EDE                     l12772:
  7298                           
  7299                           ;vscp_firmware.c: 993: else {
  7300                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7301  001EDE  0E07               	movlw	7
  7302  001EE0  6E08               	movwf	?___lbmod,c
  7303  001EE2  0100               	movlb	0	; () banked
  7304  001EE4  51F8               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7305  001EE6  EC29  F023         	call	___lbmod
  7306  001EEA  0100               	movlb	0	; () banked
  7307  001EEC  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7308  001EEE  29DE               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7309  001EF0                     L21:
  7310  001EF0  6FEB               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;vscp_firmware.c: 995: }
  7314                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7315  001EF2  51EB               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7316  001EF4  0F81               	addlw	129
  7317  001EF6  6FA4               	movwf	_vscp_omsg& (0+255),b
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7327  001EF8  D9BC               	call	PL92	;call to abstracted procedure
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7331  001EFA  C0EA  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  7335  001EFE  EC76  F023         	call	_vscp_sendEvent	;wreg free
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;vscp_firmware.c: 1005: pos++;
  7339  001F02  2BEA               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  7340  001F04                     l12788:
  7341                           
  7342                           ; BSR set to: 0
  7343  001F04  2BF8               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  7344  001F06                     l12790:
  7345                           
  7346                           ; BSR set to: 0
  7347  001F06  51EC               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  7348  001F08  5DF8               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7349  001F0A  E301 D19B          	bc	l1526
  7350  001F0E  D7B9               	goto	l12762
  7351  001F10                     l12792:
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7355  001F10  517D               	movf	_vscp_nickname& (0+255),w,b
  7356  001F12  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7357  001F16  62DF               	cpfseq	indf2,c
  7358  001F18  D195               	goto	l1526
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;vscp_firmware.c: 1014: uint8_t i;
  7362                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  7363  001F1A  C09D  F0ED         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1502
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  7367  001F1E  5196               	movf	_vscp_imsg& (0+255),w,b
  7368  001F20  0FFE               	addlw	254
  7369  001F22  0B07               	andlw	7
  7370  001F24  6FEE               	movwf	vscp_handleProtocolEvent@len_1503& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  7374  001F26  6BF3               	clrf	vscp_handleProtocolEvent@i_1501& (0+255),b
  7375  001F28  D016               	goto	l12806
  7376  001F2A                     l12800:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  7380  001F2A  51F3               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7381  001F2C  0F9E               	addlw	low (_vscp_imsg+8)
  7382  001F2E  6ED9               	movwf	fsr2l,c
  7383  001F30  6ADA               	clrf	fsr2h,c
  7384  001F32  50DF               	movf	indf2,w,c
  7385  001F34  6FDD               	movwf	?_vscp_writeRegister& (0+255),b
  7386  001F36  51ED               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7387  001F38  25F3               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7388  001F3A  ECAD  F023         	call	_vscp_writeRegister
  7389                           
  7390                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  7391  001F3E  0100               	movlb	0	; () banked
  7392  001F40  51F3               	movf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7393  001F42  0FAA               	addlw	low (_vscp_omsg+6)
  7394  001F44  6ED9               	movwf	fsr2l,c
  7395  001F46  6ADA               	clrf	fsr2h,c
  7396  001F48  51ED               	movf	vscp_handleProtocolEvent@pos_1502& (0+255),w,b
  7397  001F4A  25F3               	addwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7398  001F4C  EC16  F024         	call	_vscp_readRegister
  7399  001F50  6EDF               	movwf	indf2,c
  7400  001F52  0100               	movlb	0	; () banked
  7401  001F54  2BF3               	incf	vscp_handleProtocolEvent@i_1501& (0+255),f,b
  7402  001F56                     l12806:
  7403                           
  7404                           ; BSR set to: 0
  7405  001F56  51EE               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7406  001F58  5DF3               	subwf	vscp_handleProtocolEvent@i_1501& (0+255),w,b
  7407  001F5A  E3E7               	bnc	l12800
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;vscp_firmware.c: 1022: }
  7411                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  7415                           
  7416                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  7417  001F5C  D98A               	call	PL92	;call to abstracted procedure
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  7421  001F5E  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  7425  001F60  51EE               	movf	vscp_handleProtocolEvent@len_1503& (0+255),w,b
  7426  001F62  0F81               	addlw	129
  7427  001F64  6FA4               	movwf	_vscp_omsg& (0+255),b
  7428  001F66  D6B2               	goto	l12644
  7429  001F68                     l12818:
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7433  001F68  517D               	movf	_vscp_nickname& (0+255),w,b
  7434  001F6A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7435  001F6E  62DF               	cpfseq	indf2,c
  7436  001F70  D169               	goto	l1526
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7440                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  7441                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  7442  001F72  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7443  001F74  ECA4  F018         	call	_vscp_readAppReg
  7444  001F78  0100               	movlb	0	; () banked
  7445  001F7A  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7446  001F7C  29DE               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7447  001F7E  6E4F               	movwf	?_vscp_writeAppReg,c
  7448  001F80  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7449  001F82  EC76  F004         	call	_vscp_writeAppReg
  7450  001F86  D697               	goto	L20
  7451  001F88                     l12834:
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7455  001F88  517D               	movf	_vscp_nickname& (0+255),w,b
  7456  001F8A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7457  001F8E  62DF               	cpfseq	indf2,c
  7458  001F90  D159               	goto	l1526
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7462                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  7463                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  7464  001F92  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7465  001F94  ECA4  F018         	call	_vscp_readAppReg
  7466  001F98  0100               	movlb	0	; () banked
  7467  001F9A  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7468  001F9C  05DE               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  7469  001F9E  6E4F               	movwf	?_vscp_writeAppReg,c
  7470  001FA0  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7471  001FA2  EC76  F004         	call	_vscp_writeAppReg
  7472  001FA6  D687               	goto	L20
  7473  001FA8                     l12850:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  7477                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  7478  001FA8  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  7479  001FAA  197D               	xorwf	_vscp_nickname& (0+255),w,b
  7480  001FAC  E003               	bz	l1490
  7481                           
  7482                           ; BSR set to: 0
  7483  001FAE  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  7484  001FB0  E001 D148          	bnz	l1526
  7485  001FB4                     l1490:
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  7489  001FB4  6BF2               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  7493  001FB6  0E03               	movlw	3
  7494  001FB8  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  7495                           
  7496                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  7497  001FBA  0E88               	movlw	136
  7498  001FBC  6FA4               	movwf	_vscp_omsg& (0+255),b
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  7502  001FBE  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  7503  001FC0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  7504                           
  7505                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  7506  001FC2  0E20               	movlw	32
  7507  001FC4  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  7511  001FC6  6BF7               	clrf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7512  001FC8                     l1491:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;vscp_firmware.c: 1091: {
  7516                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  7520  001FC8  D95B               	call	PL106	;call to abstracted procedure
  7521  001FCA                     l12870:
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  7525  001FCA  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7526  001FCC  0FA9               	addlw	low (_vscp_omsg+5)
  7527  001FCE  6ED9               	movwf	fsr2l,c
  7528  001FD0  6ADA               	clrf	fsr2h,c
  7529  001FD2  51F2               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7530  001FD4  080F               	sublw	15
  7531  001FD6  EC70  F024         	call	_vscp_getGUID
  7532  001FDA  6EDF               	movwf	indf2,c
  7533  001FDC  0100               	movlb	0	; () banked
  7534  001FDE  2BF2               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;vscp_firmware.c: 1096: if (k > 16)
  7538  001FE0  0E10               	movlw	16
  7539  001FE2  65F2               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7540  001FE4  D001               	goto	l12878
  7541  001FE6  D004               	goto	l12882
  7542  001FE8                     l12878:
  7543                           
  7544                           ; BSR set to: 0
  7545  001FE8  2BF9               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548  001FEA  0E07               	movlw	7
  7549  001FEC  65F9               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7550  001FEE  D7ED               	goto	l12870
  7551  001FF0                     l12882:
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;vscp_firmware.c: 1098: }
  7555                           ;vscp_firmware.c: 1100: if (k > 16)
  7556  001FF0  0E10               	movlw	16
  7557  001FF2  65F2               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7558  001FF4  D001               	goto	l12886
  7559  001FF6  D006               	goto	l1492
  7560  001FF8                     l12886:
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  7564  001FF8  EC76  F023         	call	_vscp_sendEvent	;wreg free
  7565                           
  7566                           ; BSR set to: 0
  7567  001FFC  2BF7               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7568                           
  7569                           ; BSR set to: 0
  7570  001FFE  0E02               	movlw	2
  7571  002000  65F7               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7572  002002  D7E2               	goto	l1491
  7573  002004                     l1492:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;vscp_firmware.c: 1104: }
  7577                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  7578  002004  6BF9               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  7579  002006                     l12896:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;vscp_firmware.c: 1107: {
  7583                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  7584  002006  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7585  002008  EC23  F024         	call	_vscp_getMDF_URL
  7586  00200C  0900               	iorlw	0
  7587  00200E  E008               	bz	l12900
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  7591  002010  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7592  002012  0FAC               	addlw	low (_vscp_omsg+8)
  7593  002014  6ED9               	movwf	fsr2l,c
  7594  002016  6ADA               	clrf	fsr2h,c
  7595  002018  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7596  00201A  EC23  F024         	call	_vscp_getMDF_URL
  7597  00201E  D005               	goto	L22
  7598  002020                     l12900:
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;vscp_firmware.c: 1110: else
  7602                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  7603  002020  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7604  002022  0FAC               	addlw	low (_vscp_omsg+8)
  7605  002024  6ED9               	movwf	fsr2l,c
  7606  002026  6ADA               	clrf	fsr2h,c
  7607  002028  0E00               	movlw	0
  7608  00202A                     L22:
  7609  00202A  6EDF               	movwf	indf2,c
  7610                           
  7611                           ; BSR set to: 0
  7612  00202C  2BF9               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7613                           
  7614                           ; BSR set to: 0
  7615  00202E  0E04               	movlw	4
  7616  002030  65F9               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7617  002032  D7E9               	goto	l12896
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;vscp_firmware.c: 1112: }
  7621                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  7622  002034  EC76  F023         	call	_vscp_sendEvent	;wreg free
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;vscp_firmware.c: 1116: k = 5;
  7626  002038  0E05               	movlw	5
  7627  00203A  6FF2               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  7631  00203C  0E03               	movlw	3
  7632  00203E  6FF7               	movwf	vscp_handleProtocolEvent@i_1504& (0+255),b
  7633  002040                     l1501:
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;vscp_firmware.c: 1118: {
  7637                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  7641  002040  D91F               	call	PL106	;call to abstracted procedure
  7642  002042                     l12922:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  7646  002042  51F9               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7647  002044  0FA9               	addlw	low (_vscp_omsg+5)
  7648  002046  6ED9               	movwf	fsr2l,c
  7649  002048  6ADA               	clrf	fsr2h,c
  7650  00204A  51F2               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7651  00204C  EC23  F024         	call	_vscp_getMDF_URL
  7652  002050  6EDF               	movwf	indf2,c
  7653                           
  7654                           ; BSR set to: 0
  7655  002052  2BF2               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7656                           
  7657                           ; BSR set to: 0
  7658  002054  2BF9               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7659                           
  7660                           ; BSR set to: 0
  7661  002056  0E07               	movlw	7
  7662  002058  65F9               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7663  00205A  D7F3               	goto	l12922
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;vscp_firmware.c: 1123: }
  7667                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  7668  00205C  EC76  F023         	call	_vscp_sendEvent	;wreg free
  7669                           
  7670                           ; BSR set to: 0
  7671  002060  2BF7               	incf	vscp_handleProtocolEvent@i_1504& (0+255),f,b
  7672                           
  7673                           ; BSR set to: 0
  7674  002062  0E06               	movlw	6
  7675  002064  65F7               	cpfsgt	vscp_handleProtocolEvent@i_1504& (0+255),b
  7676  002066  D7EC               	goto	l1501
  7677  002068  D0ED               	goto	l1526
  7678  00206A                     l12936:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7682  00206A  517D               	movf	_vscp_nickname& (0+255),w,b
  7683  00206C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7684  002070  62DF               	cpfseq	indf2,c
  7685  002072  D0E8               	goto	l1526
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  7689  002074  0E03               	movlw	3
  7690  002076  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  7691                           
  7692                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  7693  002078  0E87               	movlw	135
  7694  00207A  6FA4               	movwf	_vscp_omsg& (0+255),b
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  7698  00207C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  7699  00207E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  7700                           
  7701                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  7702  002080  0E22               	movlw	34
  7703  002082  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  7707  002084  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  7708  002086  ECBE  F023         	call	_vscp_getMatrixInfo
  7709  00208A  D620               	goto	l12644
  7710  00208C                     l12946:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  7714  00208C  517D               	movf	_vscp_nickname& (0+255),w,b
  7715  00208E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7716  002092  62DF               	cpfseq	indf2,c
  7717  002094  D0D7               	goto	l1526
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  7721  002096  6BF4               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  7725                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  7726  002098  C096  F0DE         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  7727  00209C  0E0F               	movlw	15
  7728  00209E  17DE               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7729  0020A0  0E04               	movlw	4
  7730  0020A2  5DDE               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7731  0020A4  E312               	bnc	l12962
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  7735  0020A6  C0A0  F0F5         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1508
  7736  0020AA  6BF6               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  7740  0020AC  51F6               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7741  0020AE  11F5               	iorwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7742  0020B0  E103               	bnz	l12958
  7743                           
  7744                           ; BSR set to: 0
  7745  0020B2  0E01               	movlw	1
  7746  0020B4  6FF6               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7747  0020B6  6BF5               	clrf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7748  0020B8                     l12958:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  7752  0020B8  0E01               	movlw	1
  7753  0020BA  5DF5               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7754  0020BC  0E01               	movlw	1
  7755  0020BE  59F6               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7756  0020C0  E307               	bnc	l12964
  7757                           
  7758                           ; BSR set to: 0
  7759  0020C2  0E01               	movlw	1
  7760  0020C4  6FF6               	movwf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7761  0020C6  0E00               	movlw	0
  7762  0020C8  D002               	goto	L24
  7763  0020CA                     l12962:
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;vscp_firmware.c: 1173: else {
  7767                           ;vscp_firmware.c: 1174: bytes = 1;
  7768  0020CA  6BF6               	clrf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),b
  7769  0020CC  0E01               	movlw	1
  7770  0020CE                     L24:
  7771  0020CE  6FF5               	movwf	vscp_handleProtocolEvent@bytes_1508& (0+255),b
  7772  0020D0                     l12964:
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;vscp_firmware.c: 1175: }
  7776                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  7777  0020D0  C052  F0E5         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  7778  0020D4  C053  F0E6         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  7782  0020D8  D8B6               	call	PL46	;call to abstracted procedure
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  7786  0020DA  0E07               	movlw	7
  7787  0020DC  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  7803  0020DE  D8BF               	call	PL54	;call to abstracted procedure
  7804  0020E0                     l12980:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  7808  0020E0  51F4               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7809  0020E2  5DF5               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7810  0020E4  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7811  0020E6  0E00               	movlw	0
  7812  0020E8  59F6               	subwfb	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7813  0020EA  6FDF               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7814  0020EC  0E04               	movlw	4
  7815  0020EE  5DDE               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7816  0020F0  0E00               	movlw	0
  7817  0020F2  59DF               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7818  0020F4  E302               	bnc	l12984
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  7822  0020F6  0E04               	movlw	4
  7823  0020F8  D002               	goto	L25
  7824  0020FA                     l12984:
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;vscp_firmware.c: 1198: else {
  7828                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  7829  0020FA  51F4               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7830  0020FC  5DF5               	subwf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7831  0020FE                     L25:
  7832  0020FE  6FEF               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;vscp_firmware.c: 1200: }
  7836                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  7837  002100  51EF               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7838  002102  0F84               	addlw	132
  7839  002104  6FA4               	movwf	_vscp_omsg& (0+255),b
  7840                           
  7841                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  7842                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  7843  002106  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  7844  002108  25F4               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7845  00210A  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  7849  00210C  6BF0               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  7850  00210E  D00C               	goto	l12992
  7851  002110                     l12988:
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  7855                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  7856  002110  51F0               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7857  002112  0FAD               	addlw	low (_vscp_omsg+9)
  7858  002114  6ED9               	movwf	fsr2l,c
  7859  002116  6ADA               	clrf	fsr2h,c
  7860  002118  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  7861  00211A  25F4               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7862  00211C  25F0               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7863  00211E  EC16  F024         	call	_vscp_readRegister
  7864  002122  6EDF               	movwf	indf2,c
  7865  002124  0100               	movlb	0	; () banked
  7866  002126  2BF0               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  7867  002128                     l12992:
  7868                           
  7869                           ; BSR set to: 0
  7870  002128  51EF               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7871  00212A  5DF0               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  7872  00212C  E3F1               	bnc	l12988
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;vscp_firmware.c: 1211: }
  7876                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  7877  00212E  EC76  F023         	call	_vscp_sendEvent	;wreg free
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  7881  002132  51EF               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  7882  002134  27F4               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  7886  002136  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  7890  002138  51F4               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7891  00213A  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7892  00213C  6BDF               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7893  00213E  51F5               	movf	vscp_handleProtocolEvent@bytes_1508& (0+255),w,b
  7894  002140  5DDE               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7895  002142  51F6               	movf	(vscp_handleProtocolEvent@bytes_1508+1)& (0+255),w,b
  7896  002144  59DF               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7897  002146  E3CC               	bnc	l12980
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  7901  002148  C0E5  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  7902  00214C  C0E6  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  7903  002150  D079               	goto	l1526
  7904  002152                     l13002:
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  7908  002152  517D               	movf	_vscp_nickname& (0+255),w,b
  7909  002154  EE20  F09C         	lfsr	2,_vscp_imsg+6
  7910  002158  62DF               	cpfseq	indf2,c
  7911  00215A  D074               	goto	l1526
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;vscp_firmware.c: 1234: uint8_t i;
  7915                           ;vscp_firmware.c: 1235: uint16_t page_save;
  7916                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  7917  00215C  C052  F0E7         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1513
  7918  002160  C053  F0E8         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1513+1
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  7922  002164  D870               	call	PL46	;call to abstracted procedure
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  7926  002166  C09F  F0F1         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1512
  7927                           
  7928                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  7929                           ;vscp_firmware.c: 1248: i++) {
  7930  00216A  D014               	goto	l13014
  7931  00216C                     l13010:
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  7935                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  7936  00216C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  7937  00216E  08A0               	sublw	low (_vscp_imsg+10)
  7938  002170  25F1               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7939  002172  6ED9               	movwf	fsr2l,c
  7940  002174  6ADA               	clrf	fsr2h,c
  7941  002176  50DF               	movf	indf2,w,c
  7942  002178  6FDD               	movwf	?_vscp_writeRegister& (0+255),b
  7943  00217A  51F1               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7944  00217C  ECAD  F023         	call	_vscp_writeRegister
  7945  002180  0100               	movlb	0	; () banked
  7946  002182  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7947  002184  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  7948  002186  08AD               	sublw	low (_vscp_omsg+9)
  7949  002188  25F1               	addwf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7950  00218A  6ED9               	movwf	fsr2l,c
  7951  00218C  6ADA               	clrf	fsr2h,c
  7952  00218E  C0DE  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7953                           
  7954                           ; BSR set to: 0
  7955  002192  2BF1               	incf	vscp_handleProtocolEvent@i_1512& (0+255),f,b
  7956  002194                     l13014:
  7957                           
  7958                           ; BSR set to: 0
  7959  002194  5196               	movf	_vscp_imsg& (0+255),w,b
  7960  002196  0B0F               	andlw	15
  7961  002198  6FDE               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7962  00219A  6BDF               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7963  00219C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  7964  00219E  27DE               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7965  0021A0  0E00               	movlw	0
  7966  0021A2  23DF               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7967  0021A4  0EFC               	movlw	252
  7968  0021A6  25DE               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7969  0021A8  6FE0               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  7970  0021AA  0EFF               	movlw	255
  7971  0021AC  21DF               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7972  0021AE  6FE1               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  7973  0021B0  51F1               	movf	vscp_handleProtocolEvent@i_1512& (0+255),w,b
  7974  0021B2  6FE2               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  7975  0021B4  6BE3               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  7976  0021B6  51E3               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  7977  0021B8  0A80               	xorlw	128
  7978  0021BA  6FE4               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  7979  0021BC  51E0               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  7980  0021BE  5DE2               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  7981  0021C0  51E1               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  7982  0021C2  0A80               	xorlw	128
  7983  0021C4  59E4               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  7984  0021C6  E3D2               	bnc	l13010
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;vscp_firmware.c: 1251: }
  7988                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  7989  0021C8  C0E7  F052         	movff	vscp_handleProtocolEvent@page_save_1513,_vscp_page_select
  7990  0021CC  C0E8  F053         	movff	vscp_handleProtocolEvent@page_save_1513+1,_vscp_page_select+1
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  7994  0021D0  0E07               	movlw	7
  7995  0021D2  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  7999  0021D4  5196               	movf	_vscp_imsg& (0+255),w,b
  8000  0021D6  0B0F               	andlw	15
  8001  0021D8  0F80               	addlw	128
  8002  0021DA  6FA4               	movwf	_vscp_omsg& (0+255),b
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8018  0021DC  D840               	call	PL54	;call to abstracted procedure
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8022  0021DE  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  8023  0021E2  D574               	goto	l12644
  8024  0021E4                     l13036:
  8025                           
  8026                           ; BSR set to: 0
  8027  0021E4  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  8028                           
  8029                           ; Switch size 1, requested type "space"
  8030                           ; Number of cases is 16, Range of values is 1 to 38
  8031                           ; switch strategies available:
  8032                           ; Name         Instructions Cycles
  8033                           ; simple_byte           49    25 (average)
  8034                           ;	Chosen strategy is simple_byte
  8035  0021E6  0A01               	xorlw	1	; case 1
  8036  0021E8  E101 D548          	bz	l12618
  8037  0021EC  0A03               	xorlw	3	; case 2
  8038  0021EE  E101 D548          	bz	l12620
  8039  0021F2  0A04               	xorlw	4	; case 6
  8040  0021F4  E101 D548          	bz	l12622
  8041  0021F8  0A0E               	xorlw	14	; case 8
  8042  0021FA  E101 D548          	bz	l12624
  8043  0021FE  0A01               	xorlw	1	; case 9
  8044  002200  E101 D548          	bz	l12626
  8045  002204  0A02               	xorlw	2	; case 11
  8046  002206  E101 D568          	bz	l12660
  8047  00220A  0A07               	xorlw	7	; case 12
  8048  00220C  E101 D57E          	bz	l12694
  8049  002210  0A1B               	xorlw	27	; case 23
  8050  002212  E101 D613          	bz	l12752
  8051  002216  0A0F               	xorlw	15	; case 24
  8052  002218  E101 D627          	bz	l12758
  8053  00221C  0A01               	xorlw	1	; case 25
  8054  00221E  E101 D677          	bz	l12792
  8055  002222  0A04               	xorlw	4	; case 29
  8056  002224  E101 D6A0          	bz	l12818
  8057  002228  0A03               	xorlw	3	; case 30
  8058  00222A  E101 D6AD          	bz	l12834
  8059  00222E  0A01               	xorlw	1	; case 31
  8060  002230  E101 D6BA          	bz	l12850
  8061  002234  0A3E               	xorlw	62	; case 33
  8062  002236  E101 D718          	bz	l12936
  8063  00223A  0A04               	xorlw	4	; case 37
  8064  00223C  E101 D726          	bz	l12946
  8065  002240  0A03               	xorlw	3	; case 38
  8066  002242  E087               	bz	l13002
  8067  002244                     l1526:
  8068  002244  0012               	return	
  8069  002246                     __end_of_vscp_handleProtocolEvent:
  8070                           	opt stack 0
  8071  002246                     PL46:
  8072                           	opt stack 20
  8073  002246  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  8074  002248  C09D  F0DE         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8075  00224C  6BDF               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8076  00224E  C0DE  F0DF         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8077  002252  6BDE               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8078  002254  11DE               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8079  002256  6E52               	movwf	_vscp_page_select,c
  8080  002258  51DF               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8081  00225A  6E53               	movwf	_vscp_page_select+1,c
  8082  00225C  0012               	return	
  8083  00225E                     __end_ofPL46:
  8084                           	opt stack 0
  8085  00225E                     PL54:
  8086                           	opt stack 20
  8087  00225E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  8088  002260  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  8089  002262  0E27               	movlw	39
  8090  002264  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  8091  002266  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  8092  002268  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  8093  00226C  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  8094  002270  0012               	return	
  8095  002272                     __end_ofPL54:
  8096                           	opt stack 0
  8097  002272                     PL92:
  8098                           	opt stack 20
  8099  002272  0E07               	movlw	7
  8100  002274  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  8101  002276  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  8102  002278  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  8103  00227A  0E1A               	movlw	26
  8104  00227C  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  8105  00227E  0C1A               	retlw	26
  8106  002280                     __end_ofPL92:
  8107                           	opt stack 0
  8108  002280                     PL106:
  8109                           	opt stack 20
  8110  002280  C0F7  F0A9         	movff	vscp_handleProtocolEvent@i_1504,_vscp_omsg+5
  8111  002284  0E01               	movlw	1
  8112  002286  6FF9               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8113  002288  0C01               	retlw	1
  8114  00228A                     __end_ofPL106:
  8115                           	opt stack 0
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           postinc0	equ	0xFEE
  8125                           wreg	equ	0xFE8
  8126                           indf1	equ	0xFE7
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           plusw2	equ	0xFDB
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function ___lbmod *****************
  8138 ;; Defined at:
  8139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  dividend        1    wreg     unsigned char 
  8142 ;;  divisor         1    7[COMRAM] unsigned char 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  dividend        1    8[COMRAM] unsigned char 
  8145 ;;  rem             1   10[COMRAM] unsigned char 
  8146 ;;  counter         1    9[COMRAM] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      unsigned char 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0
  8151 ;; Tracked objects:
  8152 ;;		On entry : F/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         1       0       0       0       0       0       0
  8157 ;;      Locals:         3       0       0       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0       0       0
  8159 ;;      Totals:         4       0       0       0       0       0       0
  8160 ;;Total ram usage:        4 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    2
  8163 ;; This function calls:
  8164 ;;		Nothing
  8165 ;; This function is called by:
  8166 ;;		_vscp_handleProtocolEvent
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text17
  8171  004652                     __ptext17:
  8172                           	opt stack 0
  8173  004652                     ___lbmod:
  8174                           	opt stack 26
  8175                           
  8176                           ;incstack = 0
  8177                           ;incstack = 0
  8178                           ;___lbmod@dividend stored from wreg
  8179  004652  CFE8 F009          	movff	wreg,___lbmod@dividend
  8180                           
  8181                           ; BSR set to: 0
  8182  004656  0E08               	movlw	8
  8183  004658  6E0A               	movwf	___lbmod@counter,c
  8184                           
  8185                           ; BSR set to: 0
  8186  00465A  6A0B               	clrf	___lbmod@rem,c
  8187  00465C                     l8842:
  8188  00465C  90D8               	bcf	status,0,c
  8189  00465E  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  8190  004660  340B               	rlcf	___lbmod@rem& (0+255),w,c
  8191  004662  6E0B               	movwf	___lbmod@rem,c
  8192  004664  90D8               	bcf	status,0,c
  8193  004666  3609               	rlcf	___lbmod@dividend,f,c
  8194  004668  5008               	movf	___lbmod@divisor,w,c
  8195  00466A  5C0B               	subwf	___lbmod@rem,w,c
  8196  00466C  E302               	bnc	l8850
  8197  00466E  5008               	movf	___lbmod@divisor,w,c
  8198  004670  5E0B               	subwf	___lbmod@rem,f,c
  8199  004672                     l8850:
  8200  004672  2E0A               	decfsz	___lbmod@counter,f,c
  8201  004674  D7F3               	goto	l8842
  8202  004676  500B               	movf	___lbmod@rem,w,c
  8203  004678  0012               	return	
  8204  00467A                     __end_of___lbmod:
  8205                           	opt stack 0
  8206                           tblptru	equ	0xFF8
  8207                           tblptrh	equ	0xFF7
  8208                           tblptrl	equ	0xFF6
  8209                           tablat	equ	0xFF5
  8210                           prodh	equ	0xFF4
  8211                           prodl	equ	0xFF3
  8212                           intcon	equ	0xFF2
  8213                           intcon2	equ	0xFF1
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           indf1	equ	0xFE7
  8217                           fsr1h	equ	0xFE2
  8218                           fsr1l	equ	0xFE1
  8219                           indf2	equ	0xFDF
  8220                           postinc2	equ	0xFDE
  8221                           postdec2	equ	0xFDD
  8222                           plusw2	equ	0xFDB
  8223                           fsr2h	equ	0xFDA
  8224                           fsr2l	equ	0xFD9
  8225                           status	equ	0xFD8
  8226                           
  8227 ;; *************** function _vscp_writeRegister *****************
  8228 ;; Defined at:
  8229 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;  reg             1    wreg     unsigned char 
  8232 ;;  value           1   34[BANK0 ] unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  reg             1   79[COMRAM] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      unsigned char 
  8237 ;; Registers used:
  8238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : F/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8244 ;;      Params:         0       1       0       0       0       0       0
  8245 ;;      Locals:         1       0       0       0       0       0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0
  8247 ;;      Totals:         1       1       0       0       0       0       0
  8248 ;;Total ram usage:        2 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    8
  8251 ;; This function calls:
  8252 ;;		_vscp_writeAppReg
  8253 ;;		_vscp_writeStdReg
  8254 ;; This function is called by:
  8255 ;;		_vscp_handleProtocolEvent
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text18
  8260  00475A                     __ptext18:
  8261                           	opt stack 0
  8262  00475A                     _vscp_writeRegister:
  8263                           	opt stack 20
  8264                           
  8265                           ;incstack = 0
  8266                           ;incstack = 0
  8267                           ;vscp_writeRegister@reg stored from wreg
  8268  00475A  CFE8 F050          	movff	wreg,vscp_writeRegister@reg
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8272  00475E  0E7F               	movlw	127
  8273  004760  6450               	cpfsgt	vscp_writeRegister@reg,c
  8274  004762  D006               	goto	l14780
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8278  004764  C0DD  F036         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8279  004768  5050               	movf	vscp_writeRegister@reg,w,c
  8280  00476A  ECED  F01D         	call	_vscp_writeStdReg
  8281  00476E  D005               	goto	l1406
  8282  004770                     l14780:
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 705: else {
  8286                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8287  004770  C0DD  F04F         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8288  004774  5050               	movf	vscp_writeRegister@reg,w,c
  8289  004776  EC76  F004         	call	_vscp_writeAppReg
  8290  00477A                     l1406:
  8291  00477A  0012               	return	
  8292  00477C                     __end_of_vscp_writeRegister:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           intcon	equ	0xFF2
  8301                           intcon2	equ	0xFF1
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           indf1	equ	0xFE7
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           plusw2	equ	0xFDB
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _vscp_writeStdReg *****************
  8316 ;; Defined at:
  8317 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  reg             1    wreg     unsigned char 
  8320 ;;  value           1   53[COMRAM] unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  reg             1   59[COMRAM] unsigned char 
  8323 ;;  rv              1   58[COMRAM] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      unsigned char 
  8326 ;; Registers used:
  8327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : F/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8333 ;;      Params:         1       0       0       0       0       0       0
  8334 ;;      Locals:         2       0       0       0       0       0       0
  8335 ;;      Temps:          4       0       0       0       0       0       0
  8336 ;;      Totals:         7       0       0       0       0       0       0
  8337 ;;Total ram usage:        7 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    5
  8340 ;; This function calls:
  8341 ;;		_vscp_setGUID
  8342 ;;		_vscp_setManufacturerId
  8343 ;;		_vscp_getGUID
  8344 ;;		_vscp_getUserID
  8345 ;;		_vscp_setUserID
  8346 ;;		_vscp_getManufacturerId
  8347 ;;		_vscp_restoreDefaults
  8348 ;; This function is called by:
  8349 ;;		_vscp_writeRegister
  8350 ;;		_vscp_handleProtocolEvent
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text19
  8355  003BDA                     __ptext19:
  8356                           	opt stack 0
  8357  003BDA                     _vscp_writeStdReg:
  8358                           	opt stack 23
  8359                           
  8360                           ;incstack = 0
  8361                           ;incstack = 0
  8362                           ;vscp_writeStdReg@reg stored from wreg
  8363  003BDA  CFE8 F03C          	movff	wreg,vscp_writeStdReg@reg
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  8367  003BDE  1C36               	comf	vscp_writeStdReg@value,w,c
  8368  003BE0  6E3B               	movwf	vscp_writeStdReg@rv,c
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  8372                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  8373  003BE2  0E83               	movlw	131
  8374  003BE4  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8375  003BE6  D00E               	goto	l14792
  8376                           
  8377                           ; BSR set to: 0
  8378  003BE8  0E89               	movlw	137
  8379  003BEA  603C               	cpfslt	vscp_writeStdReg@reg,c
  8380  003BEC  D00B               	goto	l14792
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  8384  003BEE  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  8385  003BF2  503C               	movf	vscp_writeStdReg@reg,w,c
  8386  003BF4  0F7C               	addlw	124
  8387  003BF6  ECFA  F023         	call	_vscp_setUserID
  8388                           
  8389                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  8390  003BFA  503C               	movf	vscp_writeStdReg@reg,w,c
  8391  003BFC  0F7C               	addlw	124
  8392  003BFE  EC66  F024         	call	_vscp_getUserID
  8393  003C02  D069               	goto	L31
  8394  003C04                     l14792:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  8398  003C04  503C               	movf	vscp_writeStdReg@reg,w,c
  8399  003C06  0A92               	xorlw	146
  8400  003C08  E10D               	bnz	l14798
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  8404  003C0A  5036               	movf	vscp_writeStdReg@value,w,c
  8405  003C0C  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8406  003C0E  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8407  003C10  5052               	movf	_vscp_page_select,w,c
  8408  003C12  6E39               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  8409  003C14  6A3A               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  8410  003C16  1037               	iorwf	??_vscp_writeStdReg,w,c
  8411  003C18  6E52               	movwf	_vscp_page_select,c
  8412  003C1A  5038               	movf	??_vscp_writeStdReg+1,w,c
  8413  003C1C  103A               	iorwf	??_vscp_writeStdReg+3,w,c
  8414  003C1E  6E53               	movwf	_vscp_page_select+1,c
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  8418  003C20  5053               	movf	_vscp_page_select+1,w,c
  8419  003C22  D059               	goto	L31
  8420  003C24                     l14798:
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  8424  003C24  503C               	movf	vscp_writeStdReg@reg,w,c
  8425  003C26  0A93               	xorlw	147
  8426  003C28  E10B               	bnz	l14804
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  8430  003C2A  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8431  003C2C  5053               	movf	_vscp_page_select+1,w,c
  8432  003C2E  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8433  003C30  5036               	movf	vscp_writeStdReg@value,w,c
  8434  003C32  1037               	iorwf	??_vscp_writeStdReg,w,c
  8435  003C34  6E52               	movwf	_vscp_page_select,c
  8436  003C36  5038               	movf	??_vscp_writeStdReg+1,w,c
  8437  003C38  6E53               	movwf	_vscp_page_select+1,c
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  8441  003C3A  C052  F03B         	movff	_vscp_page_select,vscp_writeStdReg@rv
  8442                           
  8443                           ;vscp_firmware.c: 737: }
  8444  003C3E  D04E               	goto	l14846
  8445  003C40                     l14804:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  8449  003C40  0E88               	movlw	136
  8450  003C42  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8451  003C44  D019               	goto	l14816
  8452                           
  8453                           ; BSR set to: 0
  8454  003C46  0E91               	movlw	145
  8455  003C48  603C               	cpfslt	vscp_writeStdReg@reg,c
  8456  003C4A  D016               	goto	l14816
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8460                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  8461  003C4C  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8462  003C50  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8463  003C54  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8464  003C56  2838               	incf	??_vscp_writeStdReg+1,w,c
  8465  003C58  E102               	bnz	l14812
  8466                           
  8467                           ; BSR set to: 0
  8468  003C5A  2852               	incf	_vscp_page_select,w,c
  8469  003C5C  E002               	bz	l14814
  8470  003C5E                     l14812:
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;vscp_firmware.c: 747: rv = ~value;
  8474  003C5E  1C36               	comf	vscp_writeStdReg@value,w,c
  8475  003C60  D03A               	goto	L31
  8476  003C62                     l14814:
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;vscp_firmware.c: 749: else {
  8480                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  8481  003C62  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  8482  003C66  503C               	movf	vscp_writeStdReg@reg,w,c
  8483  003C68  0F77               	addlw	119
  8484  003C6A  EC50  F023         	call	_vscp_setManufacturerId
  8485                           
  8486                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  8487  003C6E  503C               	movf	vscp_writeStdReg@reg,w,c
  8488  003C70  0F77               	addlw	119
  8489  003C72  EC5C  F024         	call	_vscp_getManufacturerId
  8490  003C76  D02F               	goto	L31
  8491  003C78                     l14816:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  8495  003C78  0ECF               	movlw	207
  8496  003C7A  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8497  003C7C  D017               	goto	l14828
  8498                           
  8499                           ; BSR set to: 0
  8500  003C7E  0EE0               	movlw	224
  8501  003C80  603C               	cpfslt	vscp_writeStdReg@reg,c
  8502  003C82  D014               	goto	l14828
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8506                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  8507  003C84  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8508  003C88  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8509  003C8C  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8510  003C8E  2838               	incf	??_vscp_writeStdReg+1,w,c
  8511  003C90  E1E6               	bnz	l14812
  8512                           
  8513                           ; BSR set to: 0
  8514  003C92  2852               	incf	_vscp_page_select,w,c
  8515  003C94  E1E4               	bnz	l14812
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 762: else {
  8519                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  8520  003C96  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  8521  003C9A  503C               	movf	vscp_writeStdReg@reg,w,c
  8522  003C9C  0F30               	addlw	48
  8523  003C9E  EC63  F023         	call	_vscp_setGUID
  8524                           
  8525                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  8526  003CA2  503C               	movf	vscp_writeStdReg@reg,w,c
  8527  003CA4  0F30               	addlw	48
  8528  003CA6  EC70  F024         	call	_vscp_getGUID
  8529  003CAA  D015               	goto	L31
  8530  003CAC                     l14828:
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  8534  003CAC  503C               	movf	vscp_writeStdReg@reg,w,c
  8535  003CAE  0AA2               	xorlw	162
  8536  003CB0  E1D6               	bnz	l14812
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  8540  003CB2  5036               	movf	vscp_writeStdReg@value,w,c
  8541  003CB4  0A55               	xorlw	85
  8542  003CB6  E104               	bnz	l14836
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  8546  003CB8  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  8547  003CBA  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;vscp_firmware.c: 771: rv = 0x55;
  8551  003CBC  0E55               	movlw	85
  8552  003CBE  D00B               	goto	L31
  8553  003CC0                     l14836:
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  8557  003CC0  5036               	movf	vscp_writeStdReg@value,w,c
  8558  003CC2  0AAA               	xorlw	170
  8559  003CC4  E10B               	bnz	l14846
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  8563  003CC6  0EE8               	movlw	232
  8564  003CC8  5D6C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  8565  003CCA  0E03               	movlw	3
  8566  003CCC  596D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  8567  003CCE  E205               	bc	l1432
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  8571  003CD0  ECB3  F024         	call	_vscp_restoreDefaults	;wreg free
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;vscp_firmware.c: 776: rv = 0xaa;
  8575  003CD4  0EAA               	movlw	170
  8576  003CD6                     L31:
  8577  003CD6  6E3B               	movwf	vscp_writeStdReg@rv,c
  8578                           
  8579                           ;vscp_firmware.c: 777: }
  8580  003CD8  D001               	goto	l14846
  8581  003CDA                     l1432:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 778: else {
  8585                           ;vscp_firmware.c: 779: rv = 0;
  8586  003CDA  6A3B               	clrf	vscp_writeStdReg@rv,c
  8587  003CDC                     l14846:
  8588                           
  8589                           ;vscp_firmware.c: 787: }
  8590                           ;vscp_firmware.c: 789: return rv;
  8591  003CDC  503B               	movf	vscp_writeStdReg@rv,w,c
  8592  003CDE  0012               	return	
  8593  003CE0                     __end_of_vscp_writeStdReg:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           prodh	equ	0xFF4
  8600                           prodl	equ	0xFF3
  8601                           intcon	equ	0xFF2
  8602                           intcon2	equ	0xFF1
  8603                           postinc0	equ	0xFEE
  8604                           wreg	equ	0xFE8
  8605                           indf1	equ	0xFE7
  8606                           fsr1h	equ	0xFE2
  8607                           fsr1l	equ	0xFE1
  8608                           indf2	equ	0xFDF
  8609                           postinc2	equ	0xFDE
  8610                           postdec2	equ	0xFDD
  8611                           plusw2	equ	0xFDB
  8612                           fsr2h	equ	0xFDA
  8613                           fsr2l	equ	0xFD9
  8614                           status	equ	0xFD8
  8615                           
  8616 ;; *************** function _vscp_restoreDefaults *****************
  8617 ;; Defined at:
  8618 ;;		line 3498 in file "../main.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;		None               void
  8625 ;; Registers used:
  8626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : F/0
  8629 ;;		On exit  : F/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8632 ;;      Params:         0       0       0       0       0       0       0
  8633 ;;      Locals:         0       0       0       0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0
  8635 ;;      Totals:         0       0       0       0       0       0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		_init_app_eeprom
  8641 ;;		_init_app_ram
  8642 ;; This function is called by:
  8643 ;;		_vscp_writeStdReg
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text20
  8648  004966                     __ptext20:
  8649                           	opt stack 0
  8650  004966                     _vscp_restoreDefaults:
  8651                           	opt stack 23
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;main.c: 3499: init_app_eeprom();
  8655                           
  8656                           ;incstack = 0
  8657                           ;incstack = 0
  8658  004966  ECFD  F01A         	call	_init_app_eeprom	;wreg free
  8659                           
  8660                           ;main.c: 3500: init_app_ram();
  8661  00496A  EF22  F015         	goto	_init_app_ram	;wreg free
  8662  00496E                     __end_of_vscp_restoreDefaults:
  8663                           	opt stack 0
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           intcon2	equ	0xFF1
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           indf1	equ	0xFE7
  8675                           fsr1h	equ	0xFE2
  8676                           fsr1l	equ	0xFE1
  8677                           indf2	equ	0xFDF
  8678                           postinc2	equ	0xFDE
  8679                           postdec2	equ	0xFDD
  8680                           plusw2	equ	0xFDB
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function _init_app_ram *****************
  8686 ;; Defined at:
  8687 ;;		line 744 in file "../main.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;		None
  8690 ;; Auto vars:     Size  Location     Type
  8691 ;;  i               1   52[COMRAM] unsigned char 
  8692 ;;  dir             1   51[COMRAM] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;		None               void
  8695 ;; Registers used:
  8696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : F/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8702 ;;      Params:         0       0       0       0       0       0       0
  8703 ;;      Locals:         2       0       0       0       0       0       0
  8704 ;;      Temps:         36       0       0       0       0       0       0
  8705 ;;      Totals:        38       0       0       0       0       0       0
  8706 ;;Total ram usage:       38 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    3
  8709 ;; This function calls:
  8710 ;;		_Read_b_eep
  8711 ;;		_memset
  8712 ;; This function is called by:
  8713 ;;		_main
  8714 ;;		_vscp_restoreDefaults
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           	psect	text21
  8719  002A44                     __ptext21:
  8720                           	opt stack 0
  8721  002A44                     _init_app_ram:
  8722                           	opt stack 23
  8723                           
  8724                           ;main.c: 745: uint8_t i;
  8725                           ;main.c: 746: uint8_t dir;
  8726                           ;main.c: 748: measurement_clock_sec = 0;
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;incstack = 0
  8730                           ;incstack = 0
  8731  002A44  0100               	movlb	0	; () banked
  8732  002A46  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  8733  002A48  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  8734  002A4A  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  8735  002A4C  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  8736                           
  8737                           ;main.c: 750: seconds = 0;
  8738  002A4E  6B78               	clrf	_seconds& (0+255),b
  8739                           
  8740                           ;main.c: 751: minutes = 0;
  8741  002A50  6B77               	clrf	_minutes& (0+255),b
  8742                           
  8743                           ;main.c: 752: hours = 0;
  8744  002A52  6B76               	clrf	_hours& (0+255),b
  8745                           
  8746                           ;main.c: 754: channel_pulse_flags = 0;
  8747  002A54  6B68               	clrf	_channel_pulse_flags& (0+255),b
  8748  002A56  6B69               	clrf	(_channel_pulse_flags+1)& (0+255),b
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;main.c: 757: memset( channel_pulse_timer, 0, sizeof( channel_pulse_timer ) );
  8752  002A58  0101               	movlb	1	; () banked
  8753  002A5A  0E01               	movlw	high _channel_pulse_timer
  8754  002A5C  6E09               	movwf	?_memset+1,c
  8755  002A5E  0E00               	movlw	low _channel_pulse_timer
  8756  002A60  D948               	call	PL80	;call to abstracted procedure
  8757  002A62  ECD3  F022         	call	_memset	;wreg free
  8758                           
  8759                           ;main.c: 758: memset( channel_protection_timer, 0, sizeof( channel_protection_timer ) );
  8760  002A66  0100               	movlb	0	; () banked
  8761  002A68  0E00               	movlw	high _channel_protection_timer
  8762  002A6A  6E09               	movwf	?_memset+1,c
  8763  002A6C  0E82               	movlw	low _channel_protection_timer
  8764  002A6E  D941               	call	PL80	;call to abstracted procedure
  8765  002A70  ECD3  F022         	call	_memset	;wreg free
  8766                           
  8767                           ;main.c: 760: for ( i=0; i<10; i++ ) {
  8768  002A74  6A35               	clrf	init_app_ram@i,c
  8769  002A76                     l12472:
  8770                           
  8771                           ;main.c: 763: if ( Read_b_eep(0x43 + 24 + i) &
  8772                           ;main.c: 764: 0x01 ) {
  8773  002A76  0E5B               	movlw	91
  8774  002A78  2435               	addwf	init_app_ram@i,w,c
  8775  002A7A  6E08               	movwf	?_Read_b_eep,c
  8776  002A7C  6A09               	clrf	?_Read_b_eep+1,c
  8777  002A7E  0E00               	movlw	0
  8778  002A80  2209               	addwfc	?_Read_b_eep+1,f,c
  8779  002A82  EC83  F024         	call	_Read_b_eep	;wreg free
  8780  002A86  6E10               	movwf	??_init_app_ram& (0+255),c
  8781  002A88  A010               	btfss	??_init_app_ram,0,c
  8782  002A8A  D02C               	goto	l12478
  8783                           
  8784                           ;main.c: 766: channel_pulse_flags |= (1<<i);
  8785  002A8C  C035  F010         	movff	init_app_ram@i,??_init_app_ram
  8786  002A90  0E01               	movlw	1
  8787  002A92  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8788  002A94  6A12               	clrf	(??_init_app_ram+2)& (0+255),c
  8789  002A96  2A10               	incf	??_init_app_ram,f,c
  8790  002A98  D003               	goto	u16094
  8791  002A9A                     u16095:
  8792  002A9A  90D8               	bcf	status,0,c
  8793  002A9C  3611               	rlcf	??_init_app_ram+1,f,c
  8794  002A9E  3612               	rlcf	??_init_app_ram+2,f,c
  8795  002AA0                     u16094:
  8796  002AA0  2E10               	decfsz	??_init_app_ram,f,c
  8797  002AA2  D7FB               	goto	u16095
  8798  002AA4  5011               	movf	??_init_app_ram+1,w,c
  8799  002AA6  0100               	movlb	0	; () banked
  8800  002AA8  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  8801  002AAA  5012               	movf	??_init_app_ram+2,w,c
  8802  002AAC  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;main.c: 767: channel_pulse_timer[ i ] =
  8806                           ;main.c: 768: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8807                           ;main.c: 769: Read_b_eep(0x43 + 46 + 1u + i);
  8808  002AAE  0E71               	movlw	113
  8809  002AB0  2435               	addwf	init_app_ram@i,w,c
  8810  002AB2  6E08               	movwf	?_Read_b_eep,c
  8811  002AB4  6A09               	clrf	?_Read_b_eep+1,c
  8812  002AB6  0E00               	movlw	0
  8813  002AB8  2209               	addwfc	?_Read_b_eep+1,f,c
  8814  002ABA  EC83  F024         	call	_Read_b_eep	;wreg free
  8815  002ABE  D910               	call	PL68	;call to abstracted procedure
  8816  002AC0  EC83  F024         	call	_Read_b_eep	;wreg free
  8817  002AC4  2610               	addwf	??_init_app_ram,f,c
  8818  002AC6  0E00               	movlw	0
  8819  002AC8  2211               	addwfc	??_init_app_ram+1,f,c
  8820  002ACA  5035               	movf	init_app_ram@i,w,c
  8821  002ACC  0D02               	mullw	2
  8822  002ACE  0101               	movlb	1	; () banked
  8823  002AD0  0E00               	movlw	low _channel_pulse_timer
  8824  002AD2  24F3               	addwf	prodl,w,c
  8825  002AD4  6ED9               	movwf	fsr2l,c
  8826  002AD6  0E01               	movlw	high _channel_pulse_timer
  8827  002AD8  20F4               	addwfc	prodh,w,c
  8828  002ADA  6EDA               	movwf	fsr2h,c
  8829  002ADC  C010  FFDE         	movff	??_init_app_ram,postinc2
  8830  002AE0  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8831  002AE4                     l12478:
  8832                           
  8833                           ;main.c: 770: }
  8834                           ;main.c: 773: if ( Read_b_eep(0x43 + 29 + i) & 0x04) {
  8835  002AE4  0E60               	movlw	96
  8836  002AE6  2435               	addwf	init_app_ram@i,w,c
  8837  002AE8  6E08               	movwf	?_Read_b_eep,c
  8838  002AEA  6A09               	clrf	?_Read_b_eep+1,c
  8839  002AEC  0E00               	movlw	0
  8840  002AEE  2209               	addwfc	?_Read_b_eep+1,f,c
  8841  002AF0  EC83  F024         	call	_Read_b_eep	;wreg free
  8842  002AF4  6E10               	movwf	??_init_app_ram& (0+255),c
  8843  002AF6  A410               	btfss	??_init_app_ram,2,c
  8844  002AF8  D019               	goto	l12482
  8845                           
  8846                           ;main.c: 774: channel_protection_timer[ i ] =
  8847                           ;main.c: 775: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8848                           ;main.c: 776: Read_b_eep(0x43 + 46 + 1u + i);
  8849  002AFA  0E71               	movlw	113
  8850  002AFC  2435               	addwf	init_app_ram@i,w,c
  8851  002AFE  6E08               	movwf	?_Read_b_eep,c
  8852  002B00  6A09               	clrf	?_Read_b_eep+1,c
  8853  002B02  0E00               	movlw	0
  8854  002B04  2209               	addwfc	?_Read_b_eep+1,f,c
  8855  002B06  EC83  F024         	call	_Read_b_eep	;wreg free
  8856  002B0A  D8EA               	call	PL68	;call to abstracted procedure
  8857  002B0C  EC83  F024         	call	_Read_b_eep	;wreg free
  8858  002B10  2610               	addwf	??_init_app_ram,f,c
  8859  002B12  0E00               	movlw	0
  8860  002B14  2211               	addwfc	??_init_app_ram+1,f,c
  8861  002B16  5035               	movf	init_app_ram@i,w,c
  8862  002B18  0D02               	mullw	2
  8863  002B1A  50F3               	movf	prodl,w,c
  8864  002B1C  0100               	movlb	0	; () banked
  8865  002B1E  0F82               	addlw	low _channel_protection_timer
  8866  002B20  6ED9               	movwf	fsr2l,c
  8867  002B22  6ADA               	clrf	fsr2h,c
  8868  002B24  C010  FFDE         	movff	??_init_app_ram,postinc2
  8869  002B28  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  8870  002B2C                     l12482:
  8871  002B2C  2A35               	incf	init_app_ram@i,f,c
  8872  002B2E  0E09               	movlw	9
  8873  002B30  6435               	cpfsgt	init_app_ram@i,c
  8874  002B32  D7A1               	goto	l12472
  8875                           
  8876                           ;main.c: 777: }
  8877                           ;main.c: 779: }
  8878                           ;main.c: 781: dir = Read_b_eep(0x43 + 12);
  8879  002B34  6A09               	clrf	?_Read_b_eep+1,c
  8880  002B36  0E4F               	movlw	79
  8881  002B38  6E08               	movwf	?_Read_b_eep,c
  8882  002B3A  EC83  F024         	call	_Read_b_eep	;wreg free
  8883  002B3E  6E34               	movwf	init_app_ram@dir,c
  8884                           
  8885                           ;main.c: 782: TRISA = ( dir & 0x03 ) | 0b00000000;
  8886  002B40  5034               	movf	init_app_ram@dir,w,c
  8887  002B42  0B03               	andlw	3
  8888  002B44  6E92               	movwf	3986,c	;volatile
  8889                           
  8890                           ;main.c: 784: dir = Read_b_eep(0x43 + 13);
  8891  002B46  6A09               	clrf	?_Read_b_eep+1,c
  8892  002B48  0E50               	movlw	80
  8893  002B4A  6E08               	movwf	?_Read_b_eep,c
  8894  002B4C  EC83  F024         	call	_Read_b_eep	;wreg free
  8895  002B50  6E34               	movwf	init_app_ram@dir,c
  8896                           
  8897                           ;main.c: 785: TRISB = ( dir & 0x03 ) | 0b00001000;
  8898  002B52  5034               	movf	init_app_ram@dir,w,c
  8899  002B54  0B03               	andlw	3
  8900  002B56  0908               	iorlw	8
  8901  002B58  6E93               	movwf	3987,c	;volatile
  8902                           
  8903                           ;main.c: 787: dir = ( dir >> 5 ) & 0b00000100;
  8904  002B5A  3834               	swapf	init_app_ram@dir,w,c
  8905  002B5C  42E8               	rrncf	wreg,f,c
  8906  002B5E  0B07               	andlw	7
  8907  002B60  0B04               	andlw	4
  8908  002B62  6E34               	movwf	init_app_ram@dir,c
  8909                           
  8910                           ;main.c: 788: TRISA |= dir;
  8911  002B64  5034               	movf	init_app_ram@dir,w,c
  8912  002B66  1292               	iorwf	3986,f,c	;volatile
  8913                           
  8914                           ;main.c: 791: if ( Read_b_eep(0x43 + 44) & 0x01 ) {
  8915  002B68  6A09               	clrf	?_Read_b_eep+1,c
  8916  002B6A  0E6F               	movlw	111
  8917  002B6C  6E08               	movwf	?_Read_b_eep,c
  8918  002B6E  EC83  F024         	call	_Read_b_eep	;wreg free
  8919  002B72  6E10               	movwf	??_init_app_ram& (0+255),c
  8920  002B74  B010               	btfsc	??_init_app_ram,0,c
  8921                           
  8922                           ;main.c: 792: INTCON2bits.RBPU = 0;
  8923  002B76  9EF1               	bcf	intcon2,7,c	;volatile
  8924                           
  8925                           ;main.c: 793: }
  8926                           ;main.c: 795: dir = ( Read_b_eep(0x43 + 13) << 1 ) & 0b11111000;
  8927  002B78  6A09               	clrf	?_Read_b_eep+1,c
  8928  002B7A  0E50               	movlw	80
  8929  002B7C  6E08               	movwf	?_Read_b_eep,c
  8930  002B7E  EC83  F024         	call	_Read_b_eep	;wreg free
  8931  002B82  6E10               	movwf	??_init_app_ram& (0+255),c
  8932  002B84  90D8               	bcf	status,0,c
  8933  002B86  3410               	rlcf	??_init_app_ram,w,c
  8934  002B88  0BF8               	andlw	248
  8935  002B8A  6E34               	movwf	init_app_ram@dir,c
  8936                           
  8937                           ;main.c: 796: TRISC = dir | 0b00000001;
  8938  002B8C  5034               	movf	init_app_ram@dir,w,c
  8939  002B8E  0901               	iorlw	1
  8940  002B90  6E94               	movwf	3988,c	;volatile
  8941                           
  8942                           ;main.c: 798: memset( debounce_cnt, 0, sizeof( debounce_cnt ) );
  8943  002B92  0100               	movlb	0	; () banked
  8944  002B94  0E00               	movlw	high _debounce_cnt
  8945  002B96  6E09               	movwf	?_memset+1,c
  8946  002B98  0EB1               	movlw	low _debounce_cnt
  8947  002B9A  6E08               	movwf	?_memset,c
  8948  002B9C  6A0B               	clrf	?_memset+3,c
  8949  002B9E  6A0A               	clrf	?_memset+2,c
  8950  002BA0  6A0D               	clrf	?_memset+5,c
  8951  002BA2  0E0A               	movlw	10
  8952  002BA4  6E0C               	movwf	?_memset+4,c
  8953  002BA6  ECD3  F022         	call	_memset	;wreg free
  8954                           
  8955                           ;main.c: 799: current_debounce = 0;
  8956  002BAA  0100               	movlb	0	; () banked
  8957  002BAC  6B75               	clrf	_current_debounce& (0+255),b
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;main.c: 802: current_iostate = ( PORTAbits.RA0 << 9 ) +
  8961                           ;main.c: 803: ( PORTAbits.RA1 << 8 ) +
  8962                           ;main.c: 804: ( PORTAbits.RA2 << 7 ) +
  8963                           ;main.c: 805: ( PORTCbits.RC7 << 6 ) +
  8964                           ;main.c: 806: ( PORTCbits.RC6 << 5 ) +
  8965                           ;main.c: 807: ( PORTCbits.RC5 << 4 ) +
  8966                           ;main.c: 808: ( PORTCbits.RC4 << 3 ) +
  8967                           ;main.c: 809: ( PORTCbits.RC3 << 2 ) +
  8968                           ;main.c: 810: ( PORTBbits.RB1 << 1 ) +
  8969                           ;main.c: 811: PORTBbits.RB0;
  8970  002BAE  5081               	movf	3969,w,c	;volatile
  8971  002BB0  0B01               	andlw	1
  8972  002BB2  6E10               	movwf	??_init_app_ram& (0+255),c
  8973  002BB4  3081               	rrcf	3969,w,c	;volatile
  8974  002BB6  0B01               	andlw	1
  8975  002BB8  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8976  002BBA  90D8               	bcf	status,0,c
  8977  002BBC  3411               	rlcf	??_init_app_ram+1,w,c
  8978  002BBE  6E12               	movwf	(??_init_app_ram+2)& (0+255),c
  8979  002BC0  6A13               	clrf	(??_init_app_ram+3)& (0+255),c
  8980  002BC2  3613               	rlcf	(??_init_app_ram+3)& (0+255),f,c
  8981  002BC4  3082               	rrcf	3970,w,c	;volatile
  8982  002BC6  32E8               	rrcf	wreg,f,c
  8983  002BC8  32E8               	rrcf	wreg,f,c
  8984  002BCA  0B01               	andlw	1
  8985  002BCC  6E14               	movwf	(??_init_app_ram+4)& (0+255),c
  8986  002BCE  6A15               	clrf	(??_init_app_ram+5)& (0+255),c
  8987  002BD0  90D8               	bcf	status,0,c
  8988  002BD2  3614               	rlcf	??_init_app_ram+4,f,c
  8989  002BD4  3615               	rlcf	??_init_app_ram+5,f,c
  8990  002BD6  90D8               	bcf	status,0,c
  8991  002BD8  3614               	rlcf	??_init_app_ram+4,f,c
  8992  002BDA  3615               	rlcf	??_init_app_ram+5,f,c
  8993  002BDC  3882               	swapf	3970,w,c	;volatile
  8994  002BDE  0B01               	andlw	1
  8995  002BE0  6E16               	movwf	(??_init_app_ram+6)& (0+255),c
  8996  002BE2  6A17               	clrf	(??_init_app_ram+7)& (0+255),c
  8997  002BE4  90D8               	bcf	status,0,c
  8998  002BE6  3616               	rlcf	??_init_app_ram+6,f,c
  8999  002BE8  3617               	rlcf	??_init_app_ram+7,f,c
  9000  002BEA  90D8               	bcf	status,0,c
  9001  002BEC  3616               	rlcf	??_init_app_ram+6,f,c
  9002  002BEE  3617               	rlcf	??_init_app_ram+7,f,c
  9003  002BF0  90D8               	bcf	status,0,c
  9004  002BF2  3616               	rlcf	??_init_app_ram+6,f,c
  9005  002BF4  3617               	rlcf	??_init_app_ram+7,f,c
  9006  002BF6  3882               	swapf	3970,w,c	;volatile
  9007  002BF8  32E8               	rrcf	wreg,f,c
  9008  002BFA  0B01               	andlw	1
  9009  002BFC  6E18               	movwf	(??_init_app_ram+8)& (0+255),c
  9010  002BFE  6A19               	clrf	(??_init_app_ram+9)& (0+255),c
  9011  002C00  3A18               	swapf	??_init_app_ram+8,f,c
  9012  002C02  3A19               	swapf	??_init_app_ram+9,f,c
  9013  002C04  0EF0               	movlw	240
  9014  002C06  1619               	andwf	??_init_app_ram+9,f,c
  9015  002C08  5018               	movf	??_init_app_ram+8,w,c
  9016  002C0A  0B0F               	andlw	15
  9017  002C0C  1219               	iorwf	??_init_app_ram+9,f,c
  9018  002C0E  0EF0               	movlw	240
  9019  002C10  1618               	andwf	??_init_app_ram+8,f,c
  9020  002C12  3882               	swapf	3970,w,c	;volatile
  9021  002C14  32E8               	rrcf	wreg,f,c
  9022  002C16  32E8               	rrcf	wreg,f,c
  9023  002C18  0B01               	andlw	1
  9024  002C1A  6E1A               	movwf	(??_init_app_ram+10)& (0+255),c
  9025  002C1C  6A1B               	clrf	(??_init_app_ram+11)& (0+255),c
  9026  002C1E  0E05               	movlw	5
  9027  002C20                     u16135:
  9028  002C20  90D8               	bcf	status,0,c
  9029  002C22  361A               	rlcf	??_init_app_ram+10,f,c
  9030  002C24  361B               	rlcf	??_init_app_ram+11,f,c
  9031  002C26  2EE8               	decfsz	wreg,f,c
  9032  002C28  D7FB               	goto	u16135
  9033  002C2A  3482               	rlcf	3970,w,c	;volatile
  9034  002C2C  36E8               	rlcf	wreg,f,c
  9035  002C2E  0B01               	andlw	1
  9036  002C30  6E1C               	movwf	(??_init_app_ram+12)& (0+255),c
  9037  002C32  6A1D               	clrf	(??_init_app_ram+13)& (0+255),c
  9038  002C34  0E06               	movlw	6
  9039  002C36                     u16145:
  9040  002C36  90D8               	bcf	status,0,c
  9041  002C38  361C               	rlcf	??_init_app_ram+12,f,c
  9042  002C3A  361D               	rlcf	??_init_app_ram+13,f,c
  9043  002C3C  2EE8               	decfsz	wreg,f,c
  9044  002C3E  D7FB               	goto	u16145
  9045  002C40  3080               	rrcf	3968,w,c	;volatile
  9046  002C42  32E8               	rrcf	wreg,f,c
  9047  002C44  0B01               	andlw	1
  9048  002C46  6E1E               	movwf	(??_init_app_ram+14)& (0+255),c
  9049  002C48  6A1F               	clrf	(??_init_app_ram+15)& (0+255),c
  9050  002C4A  0E07               	movlw	7
  9051  002C4C                     u16155:
  9052  002C4C  90D8               	bcf	status,0,c
  9053  002C4E  361E               	rlcf	??_init_app_ram+14,f,c
  9054  002C50  361F               	rlcf	??_init_app_ram+15,f,c
  9055  002C52  2EE8               	decfsz	wreg,f,c
  9056  002C54  D7FB               	goto	u16155
  9057  002C56  3080               	rrcf	3968,w,c	;volatile
  9058  002C58  0B01               	andlw	1
  9059  002C5A  6E21               	movwf	(??_init_app_ram+17)& (0+255),c
  9060  002C5C  6A20               	clrf	(??_init_app_ram+16)& (0+255),c
  9061  002C5E  5080               	movf	3968,w,c	;volatile
  9062  002C60  0B01               	andlw	1
  9063  002C62  6E22               	movwf	(??_init_app_ram+18)& (0+255),c
  9064  002C64  6A23               	clrf	(??_init_app_ram+19)& (0+255),c
  9065  002C66  0E09               	movlw	9
  9066  002C68                     u16165:
  9067  002C68  90D8               	bcf	status,0,c
  9068  002C6A  3622               	rlcf	??_init_app_ram+18,f,c
  9069  002C6C  3623               	rlcf	??_init_app_ram+19,f,c
  9070  002C6E  2EE8               	decfsz	wreg,f,c
  9071  002C70  D7FB               	goto	u16165
  9072  002C72  5020               	movf	??_init_app_ram+16,w,c
  9073  002C74  2422               	addwf	??_init_app_ram+18,w,c
  9074  002C76  6E24               	movwf	(??_init_app_ram+20)& (0+255),c
  9075  002C78  5021               	movf	??_init_app_ram+17,w,c
  9076  002C7A  2023               	addwfc	??_init_app_ram+19,w,c
  9077  002C7C  6E25               	movwf	(??_init_app_ram+21)& (0+255),c
  9078  002C7E  501E               	movf	??_init_app_ram+14,w,c
  9079  002C80  2424               	addwf	??_init_app_ram+20,w,c
  9080  002C82  6E26               	movwf	(??_init_app_ram+22)& (0+255),c
  9081  002C84  501F               	movf	??_init_app_ram+15,w,c
  9082  002C86  2025               	addwfc	??_init_app_ram+21,w,c
  9083  002C88  6E27               	movwf	(??_init_app_ram+23)& (0+255),c
  9084  002C8A  501C               	movf	??_init_app_ram+12,w,c
  9085  002C8C  2426               	addwf	??_init_app_ram+22,w,c
  9086  002C8E  6E28               	movwf	(??_init_app_ram+24)& (0+255),c
  9087  002C90  501D               	movf	??_init_app_ram+13,w,c
  9088  002C92  2027               	addwfc	??_init_app_ram+23,w,c
  9089  002C94  6E29               	movwf	(??_init_app_ram+25)& (0+255),c
  9090  002C96  501A               	movf	??_init_app_ram+10,w,c
  9091  002C98  2428               	addwf	??_init_app_ram+24,w,c
  9092  002C9A  6E2A               	movwf	(??_init_app_ram+26)& (0+255),c
  9093  002C9C  501B               	movf	??_init_app_ram+11,w,c
  9094  002C9E  2029               	addwfc	??_init_app_ram+25,w,c
  9095  002CA0  6E2B               	movwf	(??_init_app_ram+27)& (0+255),c
  9096  002CA2  5018               	movf	??_init_app_ram+8,w,c
  9097  002CA4  242A               	addwf	??_init_app_ram+26,w,c
  9098  002CA6  6E2C               	movwf	(??_init_app_ram+28)& (0+255),c
  9099  002CA8  5019               	movf	??_init_app_ram+9,w,c
  9100  002CAA  202B               	addwfc	??_init_app_ram+27,w,c
  9101  002CAC  6E2D               	movwf	(??_init_app_ram+29)& (0+255),c
  9102  002CAE  5016               	movf	??_init_app_ram+6,w,c
  9103  002CB0  242C               	addwf	??_init_app_ram+28,w,c
  9104  002CB2  6E2E               	movwf	(??_init_app_ram+30)& (0+255),c
  9105  002CB4  5017               	movf	??_init_app_ram+7,w,c
  9106  002CB6  202D               	addwfc	??_init_app_ram+29,w,c
  9107  002CB8  6E2F               	movwf	(??_init_app_ram+31)& (0+255),c
  9108  002CBA  5014               	movf	??_init_app_ram+4,w,c
  9109  002CBC  242E               	addwf	??_init_app_ram+30,w,c
  9110  002CBE  6E30               	movwf	(??_init_app_ram+32)& (0+255),c
  9111  002CC0  5015               	movf	??_init_app_ram+5,w,c
  9112  002CC2  202F               	addwfc	??_init_app_ram+31,w,c
  9113  002CC4  6E31               	movwf	(??_init_app_ram+33)& (0+255),c
  9114  002CC6  5012               	movf	??_init_app_ram+2,w,c
  9115  002CC8  2430               	addwf	??_init_app_ram+32,w,c
  9116  002CCA  6E32               	movwf	(??_init_app_ram+34)& (0+255),c
  9117  002CCC  5013               	movf	??_init_app_ram+3,w,c
  9118  002CCE  2031               	addwfc	??_init_app_ram+33,w,c
  9119  002CD0  6E33               	movwf	(??_init_app_ram+35)& (0+255),c
  9120  002CD2  5010               	movf	??_init_app_ram,w,c
  9121  002CD4  2432               	addwf	??_init_app_ram+34,w,c
  9122  002CD6  6F6A               	movwf	_current_iostate& (0+255),b
  9123  002CD8  0E00               	movlw	0
  9124  002CDA  2033               	addwfc	??_init_app_ram+35,w,c
  9125  002CDC  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  9126                           
  9127                           ; BSR set to: 0
  9128  002CDE  0012               	return	
  9129  002CE0                     __end_of_init_app_ram:
  9130                           	opt stack 0
  9131  002CE0                     PL68:
  9132                           	opt stack 23
  9133  002CE0  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  9134  002CE2  6A10               	clrf	??_init_app_ram& (0+255),c
  9135  002CE4  0E72               	movlw	114
  9136  002CE6  2435               	addwf	init_app_ram@i,w,c
  9137  002CE8  6E08               	movwf	?_Read_b_eep,c
  9138  002CEA  6A09               	clrf	?_Read_b_eep+1,c
  9139  002CEC  0E00               	movlw	0
  9140  002CEE  2209               	addwfc	?_Read_b_eep+1,f,c
  9141  002CF0  0C00               	retlw	0
  9142  002CF2                     __end_ofPL68:
  9143                           	opt stack 0
  9144  002CF2                     PL80:
  9145                           	opt stack 23
  9146  002CF2  6E08               	movwf	?_memset,c
  9147  002CF4  6A0B               	clrf	?_memset+3,c
  9148  002CF6  6A0A               	clrf	?_memset+2,c
  9149  002CF8  6A0D               	clrf	?_memset+5,c
  9150  002CFA  0E14               	movlw	20
  9151  002CFC  6E0C               	movwf	?_memset+4,c
  9152  002CFE  0C14               	retlw	20
  9153  002D00                     __end_ofPL80:
  9154                           	opt stack 0
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           indf1	equ	0xFE7
  9166                           fsr1h	equ	0xFE2
  9167                           fsr1l	equ	0xFE1
  9168                           indf2	equ	0xFDF
  9169                           postinc2	equ	0xFDE
  9170                           postdec2	equ	0xFDD
  9171                           plusw2	equ	0xFDB
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176 ;; *************** function _memset *****************
  9177 ;; Defined at:
  9178 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  p1              2    7[COMRAM] PTR void 
  9181 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9182 ;;  c               2    9[COMRAM] int 
  9183 ;;  n               2   11[COMRAM] unsigned int 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  p               2   13[COMRAM] PTR unsigned char 
  9186 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  2    7[COMRAM] PTR void 
  9189 ;; Registers used:
  9190 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9191 ;; Tracked objects:
  9192 ;;		On entry : E/1
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9196 ;;      Params:         6       0       0       0       0       0       0
  9197 ;;      Locals:         2       0       0       0       0       0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0
  9199 ;;      Totals:         8       0       0       0       0       0       0
  9200 ;;Total ram usage:        8 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    2
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_init_app_ram
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text22
  9211  0045A6                     __ptext22:
  9212                           	opt stack 0
  9213  0045A6                     _memset:
  9214                           	opt stack 23
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;incstack = 0
  9218                           ;incstack = 0
  9219  0045A6  C008  F00E         	movff	memset@p1,memset@p
  9220  0045AA  C009  F00F         	movff	memset@p1+1,memset@p+1
  9221  0045AE  D008               	goto	l13360
  9222  0045B0                     l13356:
  9223  0045B0  C00E  FFD9         	movff	memset@p,fsr2l
  9224  0045B4  C00F  FFDA         	movff	memset@p+1,fsr2h
  9225  0045B8  C00A  FFDF         	movff	memset@c,indf2
  9226  0045BC  4A0E               	infsnz	memset@p,f,c
  9227  0045BE  2A0F               	incf	memset@p+1,f,c
  9228  0045C0                     l13360:
  9229  0045C0  060C               	decf	memset@n,f,c
  9230  0045C2  A0D8               	btfss	status,0,c
  9231  0045C4  060D               	decf	memset@n+1,f,c
  9232  0045C6  280C               	incf	memset@n& (0+255),w,c
  9233  0045C8  B4D8               	btfsc	status,2,c
  9234  0045CA  280D               	incf	(memset@n+1)& (0+255),w,c
  9235  0045CC  B4D8               	btfsc	status,2,c
  9236  0045CE  0012               	return	
  9237  0045D0  D7EF               	goto	l13356
  9238  0045D2                     __end_of_memset:
  9239                           	opt stack 0
  9240                           tblptru	equ	0xFF8
  9241                           tblptrh	equ	0xFF7
  9242                           tblptrl	equ	0xFF6
  9243                           tablat	equ	0xFF5
  9244                           prodh	equ	0xFF4
  9245                           prodl	equ	0xFF3
  9246                           intcon	equ	0xFF2
  9247                           intcon2	equ	0xFF1
  9248                           postinc0	equ	0xFEE
  9249                           wreg	equ	0xFE8
  9250                           indf1	equ	0xFE7
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           plusw2	equ	0xFDB
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function _init_app_eeprom *****************
  9262 ;; Defined at:
  9263 ;;		line 820 in file "../main.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  i               1   14[COMRAM] unsigned char 
  9268 ;;  j               1   13[COMRAM] unsigned char 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		wreg, status,2, status,0, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9278 ;;      Params:         0       0       0       0       0       0       0
  9279 ;;      Locals:         2       0       0       0       0       0       0
  9280 ;;      Temps:          2       0       0       0       0       0       0
  9281 ;;      Totals:         4       0       0       0       0       0       0
  9282 ;;Total ram usage:        4 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    3
  9285 ;; This function calls:
  9286 ;;		_Busy_eep
  9287 ;;		_Write_b_eep
  9288 ;; This function is called by:
  9289 ;;		_main
  9290 ;;		_vscp_restoreDefaults
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text23
  9295  0035FA                     __ptext23:
  9296                           	opt stack 0
  9297  0035FA                     _init_app_eeprom:
  9298                           	opt stack 23
  9299                           
  9300                           ;main.c: 821: unsigned char i, j;
  9301                           ;main.c: 823: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  9302                           
  9303                           ;incstack = 0
  9304                           ;incstack = 0
  9305  0035FA  ECB7  F024         	call	_Busy_eep	;wreg free
  9306  0035FE  6A09               	clrf	?_Write_b_eep+1,c
  9307  003600  0E43               	movlw	67
  9308  003602  6E08               	movwf	?_Write_b_eep,c
  9309  003604  0E00               	movlw	0
  9310  003606  6A0A               	clrf	?_Write_b_eep+2,c
  9311  003608  EC73  F022         	call	_Write_b_eep	;wreg free
  9312                           
  9313                           ;main.c: 824: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  9314  00360C  ECB7  F024         	call	_Busy_eep	;wreg free
  9315  003610  6A09               	clrf	?_Write_b_eep+1,c
  9316  003612  0E44               	movlw	68
  9317  003614  6E08               	movwf	?_Write_b_eep,c
  9318  003616  0E00               	movlw	0
  9319  003618  6A0A               	clrf	?_Write_b_eep+2,c
  9320  00361A  EC73  F022         	call	_Write_b_eep	;wreg free
  9321                           
  9322                           ;main.c: 826: for ( i=0; i<10; i++ ) {
  9323  00361E  6A0F               	clrf	init_app_eeprom@i,c
  9324  003620                     l12382:
  9325                           
  9326                           ;main.c: 827: (Busy_eep(), Write_b_eep(0x43 + 2 + i,i));
  9327  003620  ECB7  F024         	call	_Busy_eep	;wreg free
  9328  003624  0E45               	movlw	69
  9329  003626  240F               	addwf	init_app_eeprom@i,w,c
  9330  003628  6E08               	movwf	?_Write_b_eep,c
  9331  00362A  6A09               	clrf	?_Write_b_eep+1,c
  9332  00362C  0E00               	movlw	0
  9333  00362E  2209               	addwfc	?_Write_b_eep+1,f,c
  9334  003630  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  9335  003634  EC73  F022         	call	_Write_b_eep	;wreg free
  9336  003638  2A0F               	incf	init_app_eeprom@i,f,c
  9337  00363A  0E09               	movlw	9
  9338  00363C  640F               	cpfsgt	init_app_eeprom@i,c
  9339  00363E  D7F0               	goto	l12382
  9340                           
  9341                           ;main.c: 828: }
  9342                           ;main.c: 830: (Busy_eep(), Write_b_eep(0x43 + 12,0x00));
  9343  003640  ECB7  F024         	call	_Busy_eep	;wreg free
  9344  003644  6A09               	clrf	?_Write_b_eep+1,c
  9345  003646  0E4F               	movlw	79
  9346  003648  6E08               	movwf	?_Write_b_eep,c
  9347  00364A  0E00               	movlw	0
  9348  00364C  6A0A               	clrf	?_Write_b_eep+2,c
  9349  00364E  EC73  F022         	call	_Write_b_eep	;wreg free
  9350                           
  9351                           ;main.c: 831: (Busy_eep(), Write_b_eep(0x43 + 13,0x00));
  9352  003652  ECB7  F024         	call	_Busy_eep	;wreg free
  9353  003656  6A09               	clrf	?_Write_b_eep+1,c
  9354  003658  0E50               	movlw	80
  9355  00365A  6E08               	movwf	?_Write_b_eep,c
  9356  00365C  0E00               	movlw	0
  9357  00365E  6A0A               	clrf	?_Write_b_eep+2,c
  9358  003660  EC73  F022         	call	_Write_b_eep	;wreg free
  9359                           
  9360                           ;main.c: 833: for ( i=0; i<10; i++ ) {
  9361  003664  6A0F               	clrf	init_app_eeprom@i,c
  9362  003666                     l12400:
  9363                           
  9364                           ;main.c: 834: (Busy_eep(), Write_b_eep(0x43 + 24 + i,0x08 | 0x10 | 0x80));
  9365  003666  ECB7  F024         	call	_Busy_eep	;wreg free
  9366  00366A  0E5B               	movlw	91
  9367  00366C  240F               	addwf	init_app_eeprom@i,w,c
  9368  00366E  6E08               	movwf	?_Write_b_eep,c
  9369  003670  6A09               	clrf	?_Write_b_eep+1,c
  9370  003672  0E00               	movlw	0
  9371  003674  2209               	addwfc	?_Write_b_eep+1,f,c
  9372  003676  0E98               	movlw	152
  9373  003678  6E0A               	movwf	?_Write_b_eep+2,c
  9374  00367A  EC73  F022         	call	_Write_b_eep	;wreg free
  9375  00367E  2A0F               	incf	init_app_eeprom@i,f,c
  9376  003680  0E09               	movlw	9
  9377  003682  640F               	cpfsgt	init_app_eeprom@i,c
  9378  003684  D7F0               	goto	l12400
  9379                           
  9380                           ;main.c: 838: }
  9381                           ;main.c: 840: for ( i=0; i<10; i++ ) {
  9382  003686  6A0F               	clrf	init_app_eeprom@i,c
  9383  003688                     l12410:
  9384                           
  9385                           ;main.c: 841: (Busy_eep(), Write_b_eep(0x43 + 34 + i,0x01 | 0x02 | 0x80));
  9386  003688  ECB7  F024         	call	_Busy_eep	;wreg free
  9387  00368C  0E65               	movlw	101
  9388  00368E  240F               	addwf	init_app_eeprom@i,w,c
  9389  003690  6E08               	movwf	?_Write_b_eep,c
  9390  003692  6A09               	clrf	?_Write_b_eep+1,c
  9391  003694  0E00               	movlw	0
  9392  003696  2209               	addwfc	?_Write_b_eep+1,f,c
  9393  003698  0E83               	movlw	131
  9394  00369A  6E0A               	movwf	?_Write_b_eep+2,c
  9395  00369C  EC73  F022         	call	_Write_b_eep	;wreg free
  9396  0036A0  2A0F               	incf	init_app_eeprom@i,f,c
  9397  0036A2  0E09               	movlw	9
  9398  0036A4  640F               	cpfsgt	init_app_eeprom@i,c
  9399  0036A6  D7F0               	goto	l12410
  9400                           
  9401                           ;main.c: 845: }
  9402                           ;main.c: 847: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  9403  0036A8  ECB7  F024         	call	_Busy_eep	;wreg free
  9404  0036AC  6A09               	clrf	?_Write_b_eep+1,c
  9405  0036AE  0E6F               	movlw	111
  9406  0036B0  6E08               	movwf	?_Write_b_eep,c
  9407  0036B2  0E00               	movlw	0
  9408  0036B4  6A0A               	clrf	?_Write_b_eep+2,c
  9409  0036B6  EC73  F022         	call	_Write_b_eep	;wreg free
  9410                           
  9411                           ;main.c: 849: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  9412  0036BA  ECB7  F024         	call	_Busy_eep	;wreg free
  9413  0036BE  6A09               	clrf	?_Write_b_eep+1,c
  9414  0036C0  0E70               	movlw	112
  9415  0036C2  6E08               	movwf	?_Write_b_eep,c
  9416  0036C4  0E00               	movlw	0
  9417  0036C6  6A0A               	clrf	?_Write_b_eep+2,c
  9418  0036C8  EC73  F022         	call	_Write_b_eep	;wreg free
  9419                           
  9420                           ;main.c: 851: for ( i=0; i<20; i++ ) {
  9421  0036CC  6A0F               	clrf	init_app_eeprom@i,c
  9422  0036CE                     l12428:
  9423                           
  9424                           ;main.c: 852: (Busy_eep(), Write_b_eep(0x43 + 46 + 0u + i,0));
  9425  0036CE  ECB7  F024         	call	_Busy_eep	;wreg free
  9426  0036D2  0E71               	movlw	113
  9427  0036D4  D837               	call	PL76	;call to abstracted procedure
  9428  0036D6  EC73  F022         	call	_Write_b_eep	;wreg free
  9429  0036DA  2A0F               	incf	init_app_eeprom@i,f,c
  9430  0036DC  0E13               	movlw	19
  9431  0036DE  640F               	cpfsgt	init_app_eeprom@i,c
  9432  0036E0  D7F6               	goto	l12428
  9433                           
  9434                           ;main.c: 855: }
  9435                           ;main.c: 857: for ( i=0; i<20; i++ ) {
  9436  0036E2  6A0F               	clrf	init_app_eeprom@i,c
  9437  0036E4                     l12438:
  9438                           
  9439                           ;main.c: 858: (Busy_eep(), Write_b_eep(0x43 + 46 + 20u + i,0));
  9440  0036E4  ECB7  F024         	call	_Busy_eep	;wreg free
  9441  0036E8  0E85               	movlw	133
  9442  0036EA  D82C               	call	PL76	;call to abstracted procedure
  9443  0036EC  EC73  F022         	call	_Write_b_eep	;wreg free
  9444  0036F0  2A0F               	incf	init_app_eeprom@i,f,c
  9445  0036F2  0E13               	movlw	19
  9446  0036F4  640F               	cpfsgt	init_app_eeprom@i,c
  9447  0036F6  D7F6               	goto	l12438
  9448                           
  9449                           ;main.c: 861: }
  9450                           ;main.c: 865: for ( i = 0; i < 8; i++ ) {
  9451  0036F8  6A0F               	clrf	init_app_eeprom@i,c
  9452  0036FA                     l537:
  9453                           
  9454                           ;main.c: 866: for ( j = 0; j < 8; j++ ) {
  9455  0036FA  6A0E               	clrf	init_app_eeprom@j,c
  9456  0036FC                     l12452:
  9457                           
  9458                           ;main.c: 867: (Busy_eep(), Write_b_eep(0x43 + 46 + 40u + 0 + i * 8 + j,0));
  9459  0036FC  ECB7  F024         	call	_Busy_eep	;wreg free
  9460  003700  500E               	movf	init_app_eeprom@j,w,c
  9461  003702  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  9462  003706  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  9463  003708  90D8               	bcf	status,0,c
  9464  00370A  360C               	rlcf	??_init_app_eeprom,f,c
  9465  00370C  360D               	rlcf	??_init_app_eeprom+1,f,c
  9466  00370E  90D8               	bcf	status,0,c
  9467  003710  360C               	rlcf	??_init_app_eeprom,f,c
  9468  003712  360D               	rlcf	??_init_app_eeprom+1,f,c
  9469  003714  90D8               	bcf	status,0,c
  9470  003716  360C               	rlcf	??_init_app_eeprom,f,c
  9471  003718  360D               	rlcf	??_init_app_eeprom+1,f,c
  9472  00371A  260C               	addwf	??_init_app_eeprom,f,c
  9473  00371C  0E00               	movlw	0
  9474  00371E  220D               	addwfc	??_init_app_eeprom+1,f,c
  9475  003720  0E99               	movlw	153
  9476  003722  240C               	addwf	??_init_app_eeprom,w,c
  9477  003724  6E08               	movwf	?_Write_b_eep,c
  9478  003726  0E00               	movlw	0
  9479  003728  200D               	addwfc	??_init_app_eeprom+1,w,c
  9480  00372A  6E09               	movwf	?_Write_b_eep+1,c
  9481  00372C  0E00               	movlw	0
  9482  00372E  6A0A               	clrf	?_Write_b_eep+2,c
  9483  003730  EC73  F022         	call	_Write_b_eep	;wreg free
  9484  003734  2A0E               	incf	init_app_eeprom@j,f,c
  9485  003736  0E07               	movlw	7
  9486  003738  640E               	cpfsgt	init_app_eeprom@j,c
  9487  00373A  D7E0               	goto	l12452
  9488  00373C  2A0F               	incf	init_app_eeprom@i,f,c
  9489  00373E  640F               	cpfsgt	init_app_eeprom@i,c
  9490  003740  D7DC               	goto	l537
  9491  003742  0C07               	retlw	7
  9492  003744                     __end_of_init_app_eeprom:
  9493                           	opt stack 0
  9494  003744                     PL76:
  9495                           	opt stack 23
  9496  003744  240F               	addwf	init_app_eeprom@i,w,c
  9497  003746  6E08               	movwf	?_Write_b_eep,c
  9498  003748  6A09               	clrf	?_Write_b_eep+1,c
  9499  00374A  0E00               	movlw	0
  9500  00374C  2209               	addwfc	?_Write_b_eep+1,f,c
  9501  00374E  6A0A               	clrf	?_Write_b_eep+2,c
  9502  003750  0C00               	retlw	0
  9503  003752                     __end_ofPL76:
  9504                           	opt stack 0
  9505                           tblptru	equ	0xFF8
  9506                           tblptrh	equ	0xFF7
  9507                           tblptrl	equ	0xFF6
  9508                           tablat	equ	0xFF5
  9509                           prodh	equ	0xFF4
  9510                           prodl	equ	0xFF3
  9511                           intcon	equ	0xFF2
  9512                           intcon2	equ	0xFF1
  9513                           postinc0	equ	0xFEE
  9514                           wreg	equ	0xFE8
  9515                           indf1	equ	0xFE7
  9516                           fsr1h	equ	0xFE2
  9517                           fsr1l	equ	0xFE1
  9518                           indf2	equ	0xFDF
  9519                           postinc2	equ	0xFDE
  9520                           postdec2	equ	0xFDD
  9521                           plusw2	equ	0xFDB
  9522                           fsr2h	equ	0xFDA
  9523                           fsr2l	equ	0xFD9
  9524                           status	equ	0xFD8
  9525                           
  9526 ;; *************** function _vscp_setUserID *****************
  9527 ;; Defined at:
  9528 ;;		line 3313 in file "../main.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  idx             1    wreg     unsigned char 
  9531 ;;  data            1   11[COMRAM] unsigned char 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  idx             1   12[COMRAM] unsigned char 
  9534 ;; Return value:  Size  Location     Type
  9535 ;;		None               void
  9536 ;; Registers used:
  9537 ;;		wreg, status,2, status,0, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : F/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9543 ;;      Params:         1       0       0       0       0       0       0
  9544 ;;      Locals:         1       0       0       0       0       0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0
  9546 ;;      Totals:         2       0       0       0       0       0       0
  9547 ;;Total ram usage:        2 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    3
  9550 ;; This function calls:
  9551 ;;		_Busy_eep
  9552 ;;		_Write_b_eep
  9553 ;; This function is called by:
  9554 ;;		_vscp_writeStdReg
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           	psect	text24
  9559  0047F4                     __ptext24:
  9560                           	opt stack 0
  9561  0047F4                     _vscp_setUserID:
  9562                           	opt stack 24
  9563                           
  9564                           ;incstack = 0
  9565                           ;incstack = 0
  9566                           ;vscp_setUserID@idx stored from wreg
  9567  0047F4  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;main.c: 3314: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  9571  0047F8  ECB7  F024         	call	_Busy_eep	;wreg free
  9572  0047FC  0E06               	movlw	6
  9573  0047FE  240D               	addwf	vscp_setUserID@idx,w,c
  9574  004800  6E08               	movwf	?_Write_b_eep,c
  9575  004802  6A09               	clrf	?_Write_b_eep+1,c
  9576  004804  0E00               	movlw	0
  9577  004806  2209               	addwfc	?_Write_b_eep+1,f,c
  9578  004808  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9579  00480C  EF73  F022         	goto	_Write_b_eep	;wreg free
  9580  004810                     __end_of_vscp_setUserID:
  9581                           	opt stack 0
  9582                           tblptru	equ	0xFF8
  9583                           tblptrh	equ	0xFF7
  9584                           tblptrl	equ	0xFF6
  9585                           tablat	equ	0xFF5
  9586                           prodh	equ	0xFF4
  9587                           prodl	equ	0xFF3
  9588                           intcon	equ	0xFF2
  9589                           intcon2	equ	0xFF1
  9590                           postinc0	equ	0xFEE
  9591                           wreg	equ	0xFE8
  9592                           indf1	equ	0xFE7
  9593                           fsr1h	equ	0xFE2
  9594                           fsr1l	equ	0xFE1
  9595                           indf2	equ	0xFDF
  9596                           postinc2	equ	0xFDE
  9597                           postdec2	equ	0xFDD
  9598                           plusw2	equ	0xFDB
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function _vscp_setManufacturerId *****************
  9604 ;; Defined at:
  9605 ;;		line 1332 in file "../main.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  idx             1    wreg     unsigned char 
  9608 ;;  data            1   11[COMRAM] unsigned char 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;  idx             1   12[COMRAM] unsigned char 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : F/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9620 ;;      Params:         1       0       0       0       0       0       0
  9621 ;;      Locals:         1       0       0       0       0       0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0
  9623 ;;      Totals:         2       0       0       0       0       0       0
  9624 ;;Total ram usage:        2 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    3
  9627 ;; This function calls:
  9628 ;;		_Busy_eep
  9629 ;;		_Write_b_eep
  9630 ;; This function is called by:
  9631 ;;		_vscp_writeStdReg
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           	psect	text25
  9636  0046A0                     __ptext25:
  9637                           	opt stack 0
  9638  0046A0                     _vscp_setManufacturerId:
  9639                           	opt stack 24
  9640                           
  9641                           ;incstack = 0
  9642                           ;incstack = 0
  9643                           ;vscp_setManufacturerId@idx stored from wreg
  9644  0046A0  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;main.c: 1333: if ( idx>7 ) return;
  9648  0046A4  0E07               	movlw	7
  9649  0046A6  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  9650  0046A8  D001               	goto	l13448
  9651  0046AA  D00C               	goto	l646
  9652  0046AC                     l13448:
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;main.c: 1334: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  9656  0046AC  ECB7  F024         	call	_Busy_eep	;wreg free
  9657  0046B0  0E0B               	movlw	11
  9658  0046B2  240D               	addwf	vscp_setManufacturerId@idx,w,c
  9659  0046B4  6E08               	movwf	?_Write_b_eep,c
  9660  0046B6  6A09               	clrf	?_Write_b_eep+1,c
  9661  0046B8  0E00               	movlw	0
  9662  0046BA  2209               	addwfc	?_Write_b_eep+1,f,c
  9663  0046BC  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9664  0046C0  EC73  F022         	call	_Write_b_eep	;wreg free
  9665  0046C4                     l646:
  9666  0046C4  0012               	return	
  9667  0046C6                     __end_of_vscp_setManufacturerId:
  9668                           	opt stack 0
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           intcon2	equ	0xFF1
  9677                           postinc0	equ	0xFEE
  9678                           wreg	equ	0xFE8
  9679                           indf1	equ	0xFE7
  9680                           fsr1h	equ	0xFE2
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           postdec2	equ	0xFDD
  9685                           plusw2	equ	0xFDB
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _vscp_setGUID *****************
  9691 ;; Defined at:
  9692 ;;		line 1320 in file "../main.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  idx             1    wreg     unsigned char 
  9695 ;;  data            1   11[COMRAM] unsigned char 
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;  idx             1   12[COMRAM] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : F/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9707 ;;      Params:         1       0       0       0       0       0       0
  9708 ;;      Locals:         1       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0
  9710 ;;      Totals:         2       0       0       0       0       0       0
  9711 ;;Total ram usage:        2 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    3
  9714 ;; This function calls:
  9715 ;;		_Busy_eep
  9716 ;;		_Write_b_eep
  9717 ;; This function is called by:
  9718 ;;		_vscp_writeStdReg
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text26
  9723  0046C6                     __ptext26:
  9724                           	opt stack 0
  9725  0046C6                     _vscp_setGUID:
  9726                           	opt stack 24
  9727                           
  9728                           ;incstack = 0
  9729                           ;incstack = 0
  9730                           ;vscp_setGUID@idx stored from wreg
  9731  0046C6  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;main.c: 1321: if ( idx>15 ) return;
  9735  0046CA  0E0F               	movlw	15
  9736  0046CC  640D               	cpfsgt	vscp_setGUID@idx,c
  9737  0046CE  D001               	goto	l13440
  9738  0046D0  D00C               	goto	l642
  9739  0046D2                     l13440:
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;main.c: 1322: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  9743  0046D2  ECB7  F024         	call	_Busy_eep	;wreg free
  9744  0046D6  0E13               	movlw	19
  9745  0046D8  240D               	addwf	vscp_setGUID@idx,w,c
  9746  0046DA  6E08               	movwf	?_Write_b_eep,c
  9747  0046DC  6A09               	clrf	?_Write_b_eep+1,c
  9748  0046DE  0E00               	movlw	0
  9749  0046E0  2209               	addwfc	?_Write_b_eep+1,f,c
  9750  0046E2  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9751  0046E6  EC73  F022         	call	_Write_b_eep	;wreg free
  9752  0046EA                     l642:
  9753  0046EA  0012               	return	
  9754  0046EC                     __end_of_vscp_setGUID:
  9755                           	opt stack 0
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon2	equ	0xFF1
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           indf1	equ	0xFE7
  9767                           fsr1h	equ	0xFE2
  9768                           fsr1l	equ	0xFE1
  9769                           indf2	equ	0xFDF
  9770                           postinc2	equ	0xFDE
  9771                           postdec2	equ	0xFDD
  9772                           plusw2	equ	0xFDB
  9773                           fsr2h	equ	0xFDA
  9774                           fsr2l	equ	0xFD9
  9775                           status	equ	0xFD8
  9776                           
  9777 ;; *************** function _vscp_writeAppReg *****************
  9778 ;; Defined at:
  9779 ;;		line 1535 in file "../main.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  reg             1    wreg     unsigned char 
  9782 ;;  val             1   78[COMRAM] unsigned char 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  reg             1   33[BANK0 ] unsigned char 
  9785 ;;  val             1   29[BANK0 ] unsigned char 
  9786 ;;  bOn             1   32[BANK0 ] enum E15660
  9787 ;;  rv              1   31[BANK0 ] unsigned char 
  9788 ;;  bInfoEvent      1   30[BANK0 ] enum E15660
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      unsigned char 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9793 ;; Tracked objects:
  9794 ;;		On entry : F/0
  9795 ;;		On exit  : F/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9798 ;;      Params:         1       0       0       0       0       0       0
  9799 ;;      Locals:         0       5       0       0       0       0       0
  9800 ;;      Temps:          0       7       0       0       0       0       0
  9801 ;;      Totals:         1      12       0       0       0       0       0
  9802 ;;Total ram usage:       13 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    7
  9805 ;; This function calls:
  9806 ;;		_Busy_eep
  9807 ;;		_Write_b_eep
  9808 ;;		_Read_b_eep
  9809 ;;		_SendInformationEvent
  9810 ;;		_calculateSetFilterMask
  9811 ;; This function is called by:
  9812 ;;		_vscp_writeRegister
  9813 ;;		_vscp_handleProtocolEvent
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           	psect	text27
  9818  0008EC                     __ptext27:
  9819                           	opt stack 0
  9820  0008EC                     _vscp_writeAppReg:
  9821                           	opt stack 20
  9822                           
  9823                           ;incstack = 0
  9824                           ;incstack = 0
  9825                           ;vscp_writeAppReg@reg stored from wreg
  9826  0008EC  CFE8 F0DC          	movff	wreg,vscp_writeAppReg@reg
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;main.c: 1536: uint8_t rv;
  9830                           ;main.c: 1537: BOOL bInfoEvent = 0;
  9831  0008F0  6BD9               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  9832                           
  9833                           ;main.c: 1538: BOOL bOn = 0;
  9834  0008F2  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;main.c: 1540: rv = ~val;
  9838  0008F4  1C4F               	comf	vscp_writeAppReg@val,w,c
  9839  0008F6  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
  9840                           
  9841                           ;main.c: 1543: if ( 0 == vscp_page_select ) {
  9842  0008F8  5053               	movf	_vscp_page_select+1,w,c
  9843  0008FA  1052               	iorwf	_vscp_page_select,w,c
  9844  0008FC  E002 EF74  F009    	bnz	l14080
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;main.c: 1546: if ( reg == 0 ) {
  9848  000902  67DC               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  9849  000904  D010               	goto	l13558
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;main.c: 1547: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  9853  000906  ECB7  F024         	call	_Busy_eep	;wreg free
  9854  00090A  6A09               	clrf	?_Write_b_eep+1,c
  9855  00090C  0E43               	movlw	67
  9856  00090E  6E08               	movwf	?_Write_b_eep,c
  9857  000910  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9858  000914  EC73  F022         	call	_Write_b_eep	;wreg free
  9859                           
  9860                           ;main.c: 1548: rv = Read_b_eep(0x43 + 0);
  9861  000918  6A09               	clrf	?_Read_b_eep+1,c
  9862  00091A  0E43               	movlw	67
  9863  00091C  6E08               	movwf	?_Read_b_eep,c
  9864  00091E  EC83  F024         	call	_Read_b_eep	;wreg free
  9865  000922  EF7E  F00A         	goto	L32
  9866  000926                     l13558:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;main.c: 1550: else if ( reg == 1 ) {
  9870  000926  05DC               	decf	vscp_writeAppReg@reg& (0+255),w,b
  9871  000928  E110               	bnz	l13566
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;main.c: 1552: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  9875  00092A  ECB7  F024         	call	_Busy_eep	;wreg free
  9876  00092E  6A09               	clrf	?_Write_b_eep+1,c
  9877  000930  0E44               	movlw	68
  9878  000932  6E08               	movwf	?_Write_b_eep,c
  9879  000934  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9880  000938  EC73  F022         	call	_Write_b_eep	;wreg free
  9881                           
  9882                           ;main.c: 1553: rv = Read_b_eep(0x43 + 1);
  9883  00093C  6A09               	clrf	?_Read_b_eep+1,c
  9884  00093E  0E44               	movlw	68
  9885  000940  6E08               	movwf	?_Read_b_eep,c
  9886  000942  EC83  F024         	call	_Read_b_eep	;wreg free
  9887  000946  EF7E  F00A         	goto	L32
  9888  00094A                     l13566:
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;main.c: 1556: else if ( ( reg >= 2 ) &&
  9892                           ;main.c: 1557: ( reg <= 11 ) ) {
  9893  00094A  0E01               	movlw	1
  9894  00094C  65DC               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9895  00094E  D011               	goto	l13576
  9896                           
  9897                           ; BSR set to: 0
  9898  000950  0E0C               	movlw	12
  9899  000952  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9900  000954  D00E               	goto	l13576
  9901  000956                     
  9902                           ; BSR set to: 0
  9903                           ;main.c: 1558: (Busy_eep(), Write_b_eep(0x43 + 2 + ( reg - 2 ),val));
  9904  000956  ECB7  F024         	call	_Busy_eep	;wreg free
  9905  00095A  0E43               	movlw	67
  9906  00095C  ECA6  F00A         	call	PL2	;call to abstracted procedure
  9907  000960  EC73  F022         	call	_Write_b_eep	;wreg free
  9908                           
  9909                           ;main.c: 1561: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
  9910  000964  0E43               	movlw	67
  9911  000966  ECBE  F00A         	call	PL12	;call to abstracted procedure
  9912  00096A  EC83  F024         	call	_Read_b_eep	;wreg free
  9913  00096E  EF7E  F00A         	goto	L32
  9914  000972                     l13576:
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;main.c: 1565: else if ( reg == 12 ) {
  9918  000972  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9919  000974  0A0C               	xorlw	12
  9920  000976  E126               	bnz	l13584
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;main.c: 1567: (Busy_eep(), Write_b_eep(0x43 + 12,( val & 0x03 )));
  9924  000978  ECB7  F024         	call	_Busy_eep	;wreg free
  9925  00097C  6A09               	clrf	?_Write_b_eep+1,c
  9926  00097E  0E4F               	movlw	79
  9927  000980  6E08               	movwf	?_Write_b_eep,c
  9928  000982  504F               	movf	vscp_writeAppReg@val,w,c
  9929  000984  0B03               	andlw	3
  9930  000986  6E0A               	movwf	?_Write_b_eep+2,c
  9931  000988  EC73  F022         	call	_Write_b_eep	;wreg free
  9932  00098C  0E01               	movlw	1
  9933                           
  9934                           ;main.c: 1570: TRISAbits.TRISA0 = ( val & 0x02 ) ? 1 : 0;
  9935  00098E  A24F               	btfss	vscp_writeAppReg@val,1,c
  9936  000990  0E00               	movlw	0
  9937  000992  0100               	movlb	0	; () banked
  9938  000994  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
  9939  000996  5092               	movf	3986,w,c	;volatile
  9940  000998  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9941  00099A  0BFE               	andlw	-2
  9942  00099C  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9943  00099E  6E92               	movwf	3986,c	;volatile
  9944  0009A0  0E01               	movlw	1
  9945                           
  9946                           ;main.c: 1571: TRISAbits.TRISA1 = ( val & 0x01 ) ? 1 : 0;
  9947  0009A2  A04F               	btfss	vscp_writeAppReg@val,0,c
  9948  0009A4  0E00               	movlw	0
  9949  0009A6  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
  9950  0009A8  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9951  0009AA  5092               	movf	3986,w,c	;volatile
  9952  0009AC  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9953  0009AE  0BFD               	andlw	-3
  9954  0009B0  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9955  0009B2  6E92               	movwf	3986,c	;volatile
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;main.c: 1573: rv = ( TRISAbits.TRISA0 << 1 ) + TRISAbits.TRISA1;
  9959  0009B4  3092               	rrcf	3986,w,c	;volatile
  9960  0009B6  0B01               	andlw	1
  9961  0009B8  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
  9962  0009BA  5092               	movf	3986,w,c	;volatile
  9963  0009BC  0B01               	andlw	1
  9964  0009BE  0D02               	mullw	2
  9965  0009C0  50F3               	movf	prodl,w,c
  9966  0009C2  D096               	goto	L36
  9967  0009C4                     l13584:
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;main.c: 1575: else if ( reg == 13 ) {
  9971  0009C4  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9972  0009C6  0A0D               	xorlw	13
  9973  0009C8  E001 D095          	bnz	l13608
  9974                           
  9975                           ; BSR set to: 0
  9976                           ;main.c: 1577: (Busy_eep(), Write_b_eep(0x43 + 13,val));
  9977  0009CC  ECB7  F024         	call	_Busy_eep	;wreg free
  9978  0009D0  6A09               	clrf	?_Write_b_eep+1,c
  9979  0009D2  0E50               	movlw	80
  9980  0009D4  6E08               	movwf	?_Write_b_eep,c
  9981  0009D6  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9982  0009DA  EC73  F022         	call	_Write_b_eep	;wreg free
  9983  0009DE  0E01               	movlw	1
  9984                           
  9985                           ;main.c: 1581: TRISAbits.TRISA2 = ( val & 0x80 ) ? 1 : 0;
  9986  0009E0  AE4F               	btfss	vscp_writeAppReg@val,7,c
  9987  0009E2  0E00               	movlw	0
  9988  0009E4  0100               	movlb	0	; () banked
  9989  0009E6  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
  9990  0009E8  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9991  0009EA  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
  9992  0009EC  5092               	movf	3986,w,c	;volatile
  9993  0009EE  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9994  0009F0  0BFB               	andlw	-5
  9995  0009F2  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
  9996  0009F4  6E92               	movwf	3986,c	;volatile
  9997  0009F6  0E01               	movlw	1
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;main.c: 1582: TRISCbits.TRISC7 = ( val & 0x40 ) ? 1 : 0;
 10001  0009F8  AC4F               	btfss	vscp_writeAppReg@val,6,c
 10002  0009FA  0E00               	movlw	0
 10003  0009FC  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10004  0009FE  33D1               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10005  000A00  33D1               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10006  000A02  5094               	movf	3988,w,c	;volatile
 10007  000A04  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10008  000A06  0B7F               	andlw	-129
 10009  000A08  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10010  000A0A  6E94               	movwf	3988,c	;volatile
 10011  000A0C  0E01               	movlw	1
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;main.c: 1583: TRISCbits.TRISC6 = ( val & 0x20 ) ? 1 : 0;
 10015  000A0E  AA4F               	btfss	vscp_writeAppReg@val,5,c
 10016  000A10  0E00               	movlw	0
 10017  000A12  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10018  000A14  3BD1               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10019  000A16  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10020  000A18  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10021  000A1A  5094               	movf	3988,w,c	;volatile
 10022  000A1C  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10023  000A1E  0BBF               	andlw	-65
 10024  000A20  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10025  000A22  6E94               	movwf	3988,c	;volatile
 10026  000A24  0E01               	movlw	1
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;main.c: 1584: TRISCbits.TRISC5 = ( val & 0x10 ) ? 1 : 0;
 10030  000A26  A84F               	btfss	vscp_writeAppReg@val,4,c
 10031  000A28  0E00               	movlw	0
 10032  000A2A  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10033  000A2C  3BD1               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10034  000A2E  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10035  000A30  5094               	movf	3988,w,c	;volatile
 10036  000A32  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10037  000A34  0BDF               	andlw	-33
 10038  000A36  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10039  000A38  6E94               	movwf	3988,c	;volatile
 10040  000A3A  0E01               	movlw	1
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;main.c: 1585: TRISCbits.TRISC4 = ( val & 0x08 ) ? 1 : 0;
 10044  000A3C  A64F               	btfss	vscp_writeAppReg@val,3,c
 10045  000A3E  0E00               	movlw	0
 10046  000A40  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10047  000A42  3BD1               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10048  000A44  5094               	movf	3988,w,c	;volatile
 10049  000A46  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10050  000A48  0BEF               	andlw	-17
 10051  000A4A  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10052  000A4C  6E94               	movwf	3988,c	;volatile
 10053  000A4E  0E01               	movlw	1
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;main.c: 1586: TRISCbits.TRISC3 = ( val & 0x04 ) ? 1 : 0;
 10057  000A50  A44F               	btfss	vscp_writeAppReg@val,2,c
 10058  000A52  0E00               	movlw	0
 10059  000A54  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10060  000A56  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10061  000A58  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10062  000A5A  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10063  000A5C  5094               	movf	3988,w,c	;volatile
 10064  000A5E  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10065  000A60  0BF7               	andlw	-9
 10066  000A62  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10067  000A64  6E94               	movwf	3988,c	;volatile
 10068  000A66  0E01               	movlw	1
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;main.c: 1587: TRISBbits.TRISB1 = ( val & 0x02 ) ? 1 : 0;
 10072  000A68  A24F               	btfss	vscp_writeAppReg@val,1,c
 10073  000A6A  0E00               	movlw	0
 10074  000A6C  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10075  000A6E  47D1               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10076  000A70  5093               	movf	3987,w,c	;volatile
 10077  000A72  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10078  000A74  0BFD               	andlw	-3
 10079  000A76  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10080  000A78  6E93               	movwf	3987,c	;volatile
 10081  000A7A  0E01               	movlw	1
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;main.c: 1588: TRISBbits.TRISB0 = ( val & 0x01 ) ? 1 : 0;
 10085  000A7C  A04F               	btfss	vscp_writeAppReg@val,0,c
 10086  000A7E  0E00               	movlw	0
 10087  000A80  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10088  000A82  5093               	movf	3987,w,c	;volatile
 10089  000A84  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10090  000A86  0BFE               	andlw	-2
 10091  000A88  19D1               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10092  000A8A  6E93               	movwf	3987,c	;volatile
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;main.c: 1590: rv = ( TRISAbits.TRISA2 << 7 ) +
 10096                           ;main.c: 1591: ( TRISCbits.TRISC7 << 6 ) +
 10097                           ;main.c: 1592: ( TRISCbits.TRISC6 << 5 ) +
 10098                           ;main.c: 1593: ( TRISCbits.TRISC5 << 4 ) +
 10099                           ;main.c: 1594: ( TRISCbits.TRISC4 << 3 ) +
 10100                           ;main.c: 1595: ( TRISCbits.TRISC3 << 2 ) +
 10101                           ;main.c: 1596: ( TRISBbits.TRISB1 << 1 ) +
 10102                           ;main.c: 1597: TRISBbits.TRISB0;
 10103  000A8C  5093               	movf	3987,w,c	;volatile
 10104  000A8E  0B01               	andlw	1
 10105  000A90  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10106  000A92  3093               	rrcf	3987,w,c	;volatile
 10107  000A94  0B01               	andlw	1
 10108  000A96  0D02               	mullw	2
 10109  000A98  CFF3 F0D2          	movff	prodl,??_vscp_writeAppReg+1
 10110  000A9C  3094               	rrcf	3988,w,c	;volatile
 10111  000A9E  32E8               	rrcf	wreg,f,c
 10112  000AA0  32E8               	rrcf	wreg,f,c
 10113  000AA2  0B01               	andlw	1
 10114  000AA4  0D04               	mullw	4
 10115  000AA6  CFF3 F0D3          	movff	prodl,??_vscp_writeAppReg+2
 10116  000AAA  3894               	swapf	3988,w,c	;volatile
 10117  000AAC  0B01               	andlw	1
 10118  000AAE  0D08               	mullw	8
 10119  000AB0  CFF3 F0D4          	movff	prodl,??_vscp_writeAppReg+3
 10120  000AB4  3894               	swapf	3988,w,c	;volatile
 10121  000AB6  32E8               	rrcf	wreg,f,c
 10122  000AB8  0B01               	andlw	1
 10123  000ABA  0D10               	mullw	16
 10124  000ABC  CFF3 F0D5          	movff	prodl,??_vscp_writeAppReg+4
 10125  000AC0  3894               	swapf	3988,w,c	;volatile
 10126  000AC2  32E8               	rrcf	wreg,f,c
 10127  000AC4  32E8               	rrcf	wreg,f,c
 10128  000AC6  0B01               	andlw	1
 10129  000AC8  0D20               	mullw	32
 10130  000ACA  CFF3 F0D6          	movff	prodl,??_vscp_writeAppReg+5
 10131  000ACE  3494               	rlcf	3988,w,c	;volatile
 10132  000AD0  36E8               	rlcf	wreg,f,c
 10133  000AD2  0B01               	andlw	1
 10134  000AD4  0D40               	mullw	64
 10135  000AD6  CFF3 F0D7          	movff	prodl,??_vscp_writeAppReg+6
 10136  000ADA  3092               	rrcf	3986,w,c	;volatile
 10137  000ADC  32E8               	rrcf	wreg,f,c
 10138  000ADE  0B01               	andlw	1
 10139  000AE0  0D80               	mullw	128
 10140  000AE2  50F3               	movf	prodl,w,c
 10141  000AE4  25D7               	addwf	(??_vscp_writeAppReg+6)& (0+255),w,b
 10142  000AE6  25D6               	addwf	(??_vscp_writeAppReg+5)& (0+255),w,b
 10143  000AE8  25D5               	addwf	(??_vscp_writeAppReg+4)& (0+255),w,b
 10144  000AEA  25D4               	addwf	(??_vscp_writeAppReg+3)& (0+255),w,b
 10145  000AEC  25D3               	addwf	(??_vscp_writeAppReg+2)& (0+255),w,b
 10146  000AEE  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10147  000AF0                     L36:
 10148  000AF0  25D1               	addwf	??_vscp_writeAppReg& (0+255),w,b
 10149  000AF2  EF7F  F00A         	goto	L33
 10150  000AF6                     l13608:
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;main.c: 1601: else if ( (reg >= 14) && (reg <= 23) ) {
 10154  000AF6  0E0D               	movlw	13
 10155  000AF8  65DC               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 10156  000AFA  D228               	goto	l13820
 10157                           
 10158                           ; BSR set to: 0
 10159  000AFC  0E18               	movlw	24
 10160  000AFE  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 10161  000B00  D225               	goto	l13820
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;main.c: 1604: if ( Read_b_eep(0x43 + 24 + ( reg - 14 )) &
 10165                           ;main.c: 1607: 0x80 ) {
 10166  000B02  0E4D               	movlw	77
 10167  000B04  25DC               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 10168  000B06  6E08               	movwf	?_Read_b_eep,c
 10169  000B08  6A09               	clrf	?_Read_b_eep+1,c
 10170  000B0A  0E00               	movlw	0
 10171  000B0C  2209               	addwfc	?_Read_b_eep+1,f,c
 10172  000B0E  EC83  F024         	call	_Read_b_eep	;wreg free
 10173  000B12  0100               	movlb	0	; () banked
 10174  000B14  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10175  000B16  BFD1               	btfsc	??_vscp_writeAppReg& (0+255),7,b
 10176  000B18  D1FB               	goto	l13818
 10177  000B1A  EF80  F00A         	goto	l14160
 10178  000B1E                     l13616:
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;main.c: 1614: bInfoEvent = 1;
 10182  000B1E  0E01               	movlw	1
 10183  000B20  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;main.c: 1616: if ( 1 == val ) {
 10187  000B22  044F               	decf	vscp_writeAppReg@val,w,c
 10188  000B24  E128               	bnz	l721
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;main.c: 1618: PORTBbits.RB0 = 1;
 10192  000B26  8081               	bsf	3969,0,c	;volatile
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;main.c: 1619: rv = PORTBbits.RB0;
 10196  000B28  0E00               	movlw	0
 10197  000B2A  B081               	btfsc	3969,0,c	;volatile
 10198  000B2C  0E01               	movlw	1
 10199  000B2E  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;main.c: 1620: bOn = 1;
 10203  000B30  0E01               	movlw	1
 10204  000B32  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;main.c: 1623: if ( Read_b_eep(0x43 + 24) & 0x04 ) {
 10208  000B34  6A09               	clrf	?_Read_b_eep+1,c
 10209  000B36  0E5B               	movlw	91
 10210  000B38  6E08               	movwf	?_Read_b_eep,c
 10211  000B3A  EC83  F024         	call	_Read_b_eep	;wreg free
 10212  000B3E  0100               	movlb	0	; () banked
 10213  000B40  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10214  000B42  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10215  000B44  EF80  F00A         	goto	l14160
 10216  000B48                     l13628:
 10217                           
 10218                           ;main.c: 1624: channel_protection_timer[ 0 ] =
 10219                           ;main.c: 1625: Read_b_eep(0x43 + 46 + 20u) * 256 +
 10220                           ;main.c: 1627: Read_b_eep(0x43 + 46 + 21u);
 10221  000B48  6A09               	clrf	?_Read_b_eep+1,c
 10222  000B4A  0E86               	movlw	134
 10223  000B4C  6E08               	movwf	?_Read_b_eep,c
 10224  000B4E  EC83  F024         	call	_Read_b_eep	;wreg free
 10225  000B52  0100               	movlb	0	; () banked
 10226  000B54  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10227  000B56  6A09               	clrf	?_Read_b_eep+1,c
 10228  000B58  0E85               	movlw	133
 10229  000B5A  6E08               	movwf	?_Read_b_eep,c
 10230  000B5C  EC83  F024         	call	_Read_b_eep	;wreg free
 10231  000B60  0100               	movlb	0	; () banked
 10232  000B62  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10233  000B64  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10234  000B66  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10235  000B68  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10236  000B6A  6F82               	movwf	_channel_protection_timer& (0+255),b
 10237  000B6C  0E00               	movlw	0
 10238  000B6E  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10239  000B70  6F83               	movwf	(_channel_protection_timer+1)& (0+255),b
 10240  000B72  EF80  F00A         	goto	l14160
 10241  000B76                     l721:
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;main.c: 1632: else if (0 == val) {
 10245  000B76  664F               	tstfsz	vscp_writeAppReg@val,c
 10246  000B78  EF80  F00A         	goto	l14160
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;main.c: 1633: PORTBbits.RB0 = 0;
 10250  000B7C  9081               	bcf	3969,0,c	;volatile
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;main.c: 1634: rv = PORTBbits.RB0;
 10254  000B7E  0E00               	movlw	0
 10255  000B80  B081               	btfsc	3969,0,c	;volatile
 10256  000B82  0E01               	movlw	1
 10257  000B84  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10258  000B86                     l13634:
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;main.c: 1635: bOn = 0;
 10262  000B86  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 10263  000B88  EF80  F00A         	goto	l14160
 10264  000B8C                     l13636:
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;main.c: 1642: bInfoEvent = 1;
 10268  000B8C  0E01               	movlw	1
 10269  000B8E  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;main.c: 1644: if (1 == val) {
 10273  000B90  044F               	decf	vscp_writeAppReg@val,w,c
 10274  000B92  E11E               	bnz	l727
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;main.c: 1646: PORTBbits.RB1 = 1;
 10278  000B94  8281               	bsf	3969,1,c	;volatile
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;main.c: 1647: rv = PORTBbits.RB1;
 10282  000B96  0E00               	movlw	0
 10283  000B98  B281               	btfsc	3969,1,c	;volatile
 10284  000B9A  0E01               	movlw	1
 10285  000B9C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;main.c: 1648: bOn = 1;
 10289  000B9E  0E01               	movlw	1
 10290  000BA0  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;main.c: 1650: if (Read_b_eep(0x43 + 25) & 0x04) {
 10294  000BA2  6A09               	clrf	?_Read_b_eep+1,c
 10295  000BA4  0E5C               	movlw	92
 10296  000BA6  6E08               	movwf	?_Read_b_eep,c
 10297  000BA8  EC83  F024         	call	_Read_b_eep	;wreg free
 10298  000BAC  0100               	movlb	0	; () banked
 10299  000BAE  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10300  000BB0  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10301  000BB2  EF80  F00A         	goto	l14160
 10302  000BB6                     l13648:
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;main.c: 1651: channel_protection_timer[ 1 ] =
 10306                           ;main.c: 1652: Read_b_eep(0x43 + 46 + 22u) * 256 +
 10307                           ;main.c: 1654: Read_b_eep(0x43 + 46 + 23u);
 10308  000BB6  6A09               	clrf	?_Read_b_eep+1,c
 10309  000BB8  0E88               	movlw	136
 10310  000BBA  6E08               	movwf	?_Read_b_eep,c
 10311  000BBC  EC83  F024         	call	_Read_b_eep	;wreg free
 10312  000BC0  0100               	movlb	0	; () banked
 10313  000BC2  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10314  000BC4  6A09               	clrf	?_Read_b_eep+1,c
 10315  000BC6  0E87               	movlw	135
 10316  000BC8  6E08               	movwf	?_Read_b_eep,c
 10317  000BCA  EC83  F024         	call	_Read_b_eep	;wreg free
 10318  000BCE  D220               	goto	L34
 10319  000BD0                     l727:
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;main.c: 1659: else if (0 == val) {
 10323  000BD0  664F               	tstfsz	vscp_writeAppReg@val,c
 10324  000BD2  EF80  F00A         	goto	l14160
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;main.c: 1660: PORTBbits.RB1 = 0;
 10328  000BD6  9281               	bcf	3969,1,c	;volatile
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;main.c: 1661: rv = PORTBbits.RB1;
 10332  000BD8  0E00               	movlw	0
 10333  000BDA  B281               	btfsc	3969,1,c	;volatile
 10334  000BDC  0E01               	movlw	1
 10335  000BDE  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10336  000BE0  D7D2               	goto	l13634
 10337  000BE2                     l13656:
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;main.c: 1669: bInfoEvent = 1;
 10341  000BE2  0E01               	movlw	1
 10342  000BE4  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;main.c: 1671: if (1 == val) {
 10346  000BE6  044F               	decf	vscp_writeAppReg@val,w,c
 10347  000BE8  E128               	bnz	l732
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;main.c: 1673: PORTCbits.RC3 = 1;
 10351  000BEA  8682               	bsf	3970,3,c	;volatile
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;main.c: 1674: rv = PORTCbits.RC3;
 10355  000BEC  0E00               	movlw	0
 10356  000BEE  B682               	btfsc	3970,3,c	;volatile
 10357  000BF0  0E01               	movlw	1
 10358  000BF2  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;main.c: 1675: bOn = 1;
 10362  000BF4  0E01               	movlw	1
 10363  000BF6  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366                           ;main.c: 1677: if ( Read_b_eep(0x43 + 26) & 0x04) {
 10367  000BF8  6A09               	clrf	?_Read_b_eep+1,c
 10368  000BFA  0E5D               	movlw	93
 10369  000BFC  6E08               	movwf	?_Read_b_eep,c
 10370  000BFE  EC83  F024         	call	_Read_b_eep	;wreg free
 10371  000C02  0100               	movlb	0	; () banked
 10372  000C04  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10373  000C06  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10374  000C08  EF80  F00A         	goto	l14160
 10375  000C0C                     l13668:
 10376                           
 10377                           ;main.c: 1678: channel_protection_timer[ 2 ] =
 10378                           ;main.c: 1679: Read_b_eep(0x43 + 46 + 24u) * 256 +
 10379                           ;main.c: 1681: Read_b_eep(0x43 + 46 + 25u);
 10380  000C0C  6A09               	clrf	?_Read_b_eep+1,c
 10381  000C0E  0E8A               	movlw	138
 10382  000C10  6E08               	movwf	?_Read_b_eep,c
 10383  000C12  EC83  F024         	call	_Read_b_eep	;wreg free
 10384  000C16  0100               	movlb	0	; () banked
 10385  000C18  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10386  000C1A  6A09               	clrf	?_Read_b_eep+1,c
 10387  000C1C  0E89               	movlw	137
 10388  000C1E  6E08               	movwf	?_Read_b_eep,c
 10389  000C20  EC83  F024         	call	_Read_b_eep	;wreg free
 10390  000C24  0100               	movlb	0	; () banked
 10391  000C26  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10392  000C28  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10393  000C2A  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10394  000C2C  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10395  000C2E  6F86               	movwf	(_channel_protection_timer+4)& (0+255),b
 10396  000C30  0E00               	movlw	0
 10397  000C32  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10398  000C34  6F87               	movwf	(_channel_protection_timer+5)& (0+255),b
 10399  000C36  EF80  F00A         	goto	l14160
 10400  000C3A                     l732:
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;main.c: 1686: else if (0 == val) {
 10404  000C3A  664F               	tstfsz	vscp_writeAppReg@val,c
 10405  000C3C  EF80  F00A         	goto	l14160
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;main.c: 1687: PORTCbits.RC3 = 0;
 10409  000C40  9682               	bcf	3970,3,c	;volatile
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;main.c: 1688: rv = PORTCbits.RC3;
 10413  000C42  0E00               	movlw	0
 10414  000C44  B682               	btfsc	3970,3,c	;volatile
 10415  000C46  0E01               	movlw	1
 10416  000C48  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10417  000C4A  D79D               	goto	l13634
 10418  000C4C                     l13676:
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;main.c: 1697: bInfoEvent = 1;
 10422  000C4C  0E01               	movlw	1
 10423  000C4E  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;main.c: 1699: if (1 == val) {
 10427  000C50  044F               	decf	vscp_writeAppReg@val,w,c
 10428  000C52  E128               	bnz	l737
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;main.c: 1701: PORTCbits.RC4 = 1;
 10432  000C54  8882               	bsf	3970,4,c	;volatile
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;main.c: 1702: rv = PORTCbits.RC4;
 10436  000C56  0E00               	movlw	0
 10437  000C58  B882               	btfsc	3970,4,c	;volatile
 10438  000C5A  0E01               	movlw	1
 10439  000C5C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;main.c: 1703: bOn = 1;
 10443  000C5E  0E01               	movlw	1
 10444  000C60  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10445                           
 10446                           ; BSR set to: 0
 10447                           ;main.c: 1705: if (Read_b_eep(0x43 + 27) & 0x04) {
 10448  000C62  6A09               	clrf	?_Read_b_eep+1,c
 10449  000C64  0E5E               	movlw	94
 10450  000C66  6E08               	movwf	?_Read_b_eep,c
 10451  000C68  EC83  F024         	call	_Read_b_eep	;wreg free
 10452  000C6C  0100               	movlb	0	; () banked
 10453  000C6E  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10454  000C70  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10455  000C72  EF80  F00A         	goto	l14160
 10456  000C76                     l13688:
 10457                           
 10458                           ;main.c: 1706: channel_protection_timer[ 3 ] =
 10459                           ;main.c: 1707: Read_b_eep(0x43 + 46 + 26u) * 256 +
 10460                           ;main.c: 1709: Read_b_eep(0x43 + 46 + 27u);
 10461  000C76  6A09               	clrf	?_Read_b_eep+1,c
 10462  000C78  0E8C               	movlw	140
 10463  000C7A  6E08               	movwf	?_Read_b_eep,c
 10464  000C7C  EC83  F024         	call	_Read_b_eep	;wreg free
 10465  000C80  0100               	movlb	0	; () banked
 10466  000C82  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10467  000C84  6A09               	clrf	?_Read_b_eep+1,c
 10468  000C86  0E8B               	movlw	139
 10469  000C88  6E08               	movwf	?_Read_b_eep,c
 10470  000C8A  EC83  F024         	call	_Read_b_eep	;wreg free
 10471  000C8E  0100               	movlb	0	; () banked
 10472  000C90  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10473  000C92  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10474  000C94  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10475  000C96  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10476  000C98  6F88               	movwf	(_channel_protection_timer+6)& (0+255),b
 10477  000C9A  0E00               	movlw	0
 10478  000C9C  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10479  000C9E  6F89               	movwf	(_channel_protection_timer+7)& (0+255),b
 10480  000CA0  EF80  F00A         	goto	l14160
 10481  000CA4                     l737:
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;main.c: 1714: else if (0 == val) {
 10485  000CA4  664F               	tstfsz	vscp_writeAppReg@val,c
 10486  000CA6  EF80  F00A         	goto	l14160
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;main.c: 1715: PORTCbits.RC4 = 0;
 10490  000CAA  9882               	bcf	3970,4,c	;volatile
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;main.c: 1716: rv = PORTCbits.RC4;
 10494  000CAC  0E00               	movlw	0
 10495  000CAE  B882               	btfsc	3970,4,c	;volatile
 10496  000CB0  0E01               	movlw	1
 10497  000CB2  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10498  000CB4  D768               	goto	l13634
 10499  000CB6                     l13696:
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;main.c: 1725: bInfoEvent = 1;
 10503  000CB6  0E01               	movlw	1
 10504  000CB8  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;main.c: 1727: if (1 == val) {
 10508  000CBA  044F               	decf	vscp_writeAppReg@val,w,c
 10509  000CBC  E127               	bnz	l742
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;main.c: 1729: PORTCbits.RC5 = 1;
 10513  000CBE  8A82               	bsf	3970,5,c	;volatile
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;main.c: 1730: rv = PORTCbits.RC5;
 10517  000CC0  0E00               	movlw	0
 10518  000CC2  BA82               	btfsc	3970,5,c	;volatile
 10519  000CC4  0E01               	movlw	1
 10520  000CC6  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;main.c: 1731: bOn = 1;
 10524  000CC8  0E01               	movlw	1
 10525  000CCA  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;main.c: 1733: if (Read_b_eep(0x43 + 28) & 0x04) {
 10529  000CCC  6A09               	clrf	?_Read_b_eep+1,c
 10530  000CCE  0E5F               	movlw	95
 10531  000CD0  6E08               	movwf	?_Read_b_eep,c
 10532  000CD2  EC83  F024         	call	_Read_b_eep	;wreg free
 10533  000CD6  0100               	movlb	0	; () banked
 10534  000CD8  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10535  000CDA  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10536  000CDC  EF80  F00A         	goto	l14160
 10537  000CE0                     l13708:
 10538                           
 10539                           ;main.c: 1734: channel_protection_timer[ 4 ] =
 10540                           ;main.c: 1735: Read_b_eep(0x43 + 46 + 28u) * 256 +
 10541                           ;main.c: 1737: Read_b_eep(0x43 + 46 + 29u);
 10542  000CE0  6A09               	clrf	?_Read_b_eep+1,c
 10543  000CE2  0E8E               	movlw	142
 10544  000CE4  6E08               	movwf	?_Read_b_eep,c
 10545  000CE6  EC83  F024         	call	_Read_b_eep	;wreg free
 10546  000CEA  0100               	movlb	0	; () banked
 10547  000CEC  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10548  000CEE  6A09               	clrf	?_Read_b_eep+1,c
 10549  000CF0  0E8D               	movlw	141
 10550  000CF2  6E08               	movwf	?_Read_b_eep,c
 10551  000CF4  EC83  F024         	call	_Read_b_eep	;wreg free
 10552  000CF8  0100               	movlb	0	; () banked
 10553  000CFA  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10554  000CFC  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10555  000CFE  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10556  000D00  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10557  000D02  6F8A               	movwf	(_channel_protection_timer+8)& (0+255),b
 10558  000D04  0E00               	movlw	0
 10559  000D06  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10560  000D08  6F8B               	movwf	(_channel_protection_timer+9)& (0+255),b
 10561  000D0A  D3FA               	goto	l14160
 10562  000D0C                     l742:
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;main.c: 1742: else if (0 == val) {
 10566  000D0C  664F               	tstfsz	vscp_writeAppReg@val,c
 10567  000D0E  D3F8               	goto	l14160
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;main.c: 1743: PORTCbits.RC5 = 0;
 10571  000D10  9A82               	bcf	3970,5,c	;volatile
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 1744: rv = PORTCbits.RC5;
 10575  000D12  0E00               	movlw	0
 10576  000D14  BA82               	btfsc	3970,5,c	;volatile
 10577  000D16  0E01               	movlw	1
 10578  000D18  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10579  000D1A  D735               	goto	l13634
 10580  000D1C                     l13716:
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;main.c: 1753: bInfoEvent = 1;
 10584  000D1C  0E01               	movlw	1
 10585  000D1E  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;main.c: 1755: if (1 == val) {
 10589  000D20  044F               	decf	vscp_writeAppReg@val,w,c
 10590  000D22  E126               	bnz	l747
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;main.c: 1757: PORTCbits.RC6 = 1;
 10594  000D24  8C82               	bsf	3970,6,c	;volatile
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;main.c: 1758: rv = PORTCbits.RC6;
 10598  000D26  0E00               	movlw	0
 10599  000D28  BC82               	btfsc	3970,6,c	;volatile
 10600  000D2A  0E01               	movlw	1
 10601  000D2C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;main.c: 1759: bOn = 1;
 10605  000D2E  0E01               	movlw	1
 10606  000D30  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;main.c: 1761: if (Read_b_eep(0x43 + 29) & 0x04) {
 10610  000D32  6A09               	clrf	?_Read_b_eep+1,c
 10611  000D34  0E60               	movlw	96
 10612  000D36  6E08               	movwf	?_Read_b_eep,c
 10613  000D38  EC83  F024         	call	_Read_b_eep	;wreg free
 10614  000D3C  0100               	movlb	0	; () banked
 10615  000D3E  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10616  000D40  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10617  000D42  D3DE               	goto	l14160
 10618  000D44                     l13728:
 10619                           
 10620                           ;main.c: 1762: channel_protection_timer[ 5 ] =
 10621                           ;main.c: 1763: Read_b_eep(0x43 + 46 + 30u) * 256 +
 10622                           ;main.c: 1765: Read_b_eep(0x43 + 46 + 31u);
 10623  000D44  6A09               	clrf	?_Read_b_eep+1,c
 10624  000D46  0E90               	movlw	144
 10625  000D48  6E08               	movwf	?_Read_b_eep,c
 10626  000D4A  EC83  F024         	call	_Read_b_eep	;wreg free
 10627  000D4E  0100               	movlb	0	; () banked
 10628  000D50  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10629  000D52  6A09               	clrf	?_Read_b_eep+1,c
 10630  000D54  0E8F               	movlw	143
 10631  000D56  6E08               	movwf	?_Read_b_eep,c
 10632  000D58  EC83  F024         	call	_Read_b_eep	;wreg free
 10633  000D5C  0100               	movlb	0	; () banked
 10634  000D5E  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10635  000D60  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10636  000D62  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10637  000D64  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10638  000D66  6F8C               	movwf	(_channel_protection_timer+10)& (0+255),b
 10639  000D68  0E00               	movlw	0
 10640  000D6A  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10641  000D6C  6F8D               	movwf	(_channel_protection_timer+11)& (0+255),b
 10642  000D6E  D3C8               	goto	l14160
 10643  000D70                     l747:
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;main.c: 1770: else if (0 == val) {
 10647  000D70  664F               	tstfsz	vscp_writeAppReg@val,c
 10648  000D72  D3C6               	goto	l14160
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;main.c: 1771: PORTCbits.RC6 = 0;
 10652  000D74  9C82               	bcf	3970,6,c	;volatile
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;main.c: 1772: rv = PORTCbits.RC6;
 10656  000D76  0E00               	movlw	0
 10657  000D78  BC82               	btfsc	3970,6,c	;volatile
 10658  000D7A  0E01               	movlw	1
 10659  000D7C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10660  000D7E  D703               	goto	l13634
 10661  000D80                     l13736:
 10662                           
 10663                           ; BSR set to: 0
 10664                           ;main.c: 1780: bInfoEvent = 1;
 10665  000D80  0E01               	movlw	1
 10666  000D82  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;main.c: 1782: if (1 == val) {
 10670  000D84  044F               	decf	vscp_writeAppReg@val,w,c
 10671  000D86  E126               	bnz	l752
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;main.c: 1784: PORTCbits.RC7 = 1;
 10675  000D88  8E82               	bsf	3970,7,c	;volatile
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;main.c: 1785: rv = PORTCbits.RC7;
 10679  000D8A  0E00               	movlw	0
 10680  000D8C  BE82               	btfsc	3970,7,c	;volatile
 10681  000D8E  0E01               	movlw	1
 10682  000D90  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;main.c: 1786: bOn = 1;
 10686  000D92  0E01               	movlw	1
 10687  000D94  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;main.c: 1788: if (Read_b_eep(0x43 + 30) & 0x04) {
 10691  000D96  6A09               	clrf	?_Read_b_eep+1,c
 10692  000D98  0E61               	movlw	97
 10693  000D9A  6E08               	movwf	?_Read_b_eep,c
 10694  000D9C  EC83  F024         	call	_Read_b_eep	;wreg free
 10695  000DA0  0100               	movlb	0	; () banked
 10696  000DA2  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10697  000DA4  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10698  000DA6  D3AC               	goto	l14160
 10699  000DA8                     l13748:
 10700                           
 10701                           ;main.c: 1789: channel_protection_timer[ 6 ] =
 10702                           ;main.c: 1790: Read_b_eep(0x43 + 46 + 32u) * 256 +
 10703                           ;main.c: 1792: Read_b_eep(0x43 + 46 + 33u);
 10704  000DA8  6A09               	clrf	?_Read_b_eep+1,c
 10705  000DAA  0E92               	movlw	146
 10706  000DAC  6E08               	movwf	?_Read_b_eep,c
 10707  000DAE  EC83  F024         	call	_Read_b_eep	;wreg free
 10708  000DB2  0100               	movlb	0	; () banked
 10709  000DB4  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10710  000DB6  6A09               	clrf	?_Read_b_eep+1,c
 10711  000DB8  0E91               	movlw	145
 10712  000DBA  6E08               	movwf	?_Read_b_eep,c
 10713  000DBC  EC83  F024         	call	_Read_b_eep	;wreg free
 10714  000DC0  0100               	movlb	0	; () banked
 10715  000DC2  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10716  000DC4  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10717  000DC6  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10718  000DC8  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10719  000DCA  6F8E               	movwf	(_channel_protection_timer+12)& (0+255),b
 10720  000DCC  0E00               	movlw	0
 10721  000DCE  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10722  000DD0  6F8F               	movwf	(_channel_protection_timer+13)& (0+255),b
 10723  000DD2  D396               	goto	l14160
 10724  000DD4                     l752:
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;main.c: 1797: else if (0 == val) {
 10728  000DD4  664F               	tstfsz	vscp_writeAppReg@val,c
 10729  000DD6  D394               	goto	l14160
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;main.c: 1798: PORTCbits.RC7 = 0;
 10733  000DD8  9E82               	bcf	3970,7,c	;volatile
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;main.c: 1799: rv = PORTCbits.RC7;
 10737  000DDA  0E00               	movlw	0
 10738  000DDC  BE82               	btfsc	3970,7,c	;volatile
 10739  000DDE  0E01               	movlw	1
 10740  000DE0  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10741  000DE2  D6D1               	goto	l13634
 10742  000DE4                     l13756:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;main.c: 1807: bInfoEvent = 1;
 10746  000DE4  0E01               	movlw	1
 10747  000DE6  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;main.c: 1809: if (1 == val) {
 10751  000DE8  044F               	decf	vscp_writeAppReg@val,w,c
 10752  000DEA  E126               	bnz	l757
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;main.c: 1811: PORTAbits.RA2 = 1;
 10756  000DEC  8480               	bsf	3968,2,c	;volatile
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 1812: rv = PORTAbits.RA2;
 10760  000DEE  0E00               	movlw	0
 10761  000DF0  B480               	btfsc	3968,2,c	;volatile
 10762  000DF2  0E01               	movlw	1
 10763  000DF4  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;main.c: 1813: bOn = 1;
 10767  000DF6  0E01               	movlw	1
 10768  000DF8  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;main.c: 1815: if (Read_b_eep(0x43 + 31) & 0x04) {
 10772  000DFA  6A09               	clrf	?_Read_b_eep+1,c
 10773  000DFC  0E62               	movlw	98
 10774  000DFE  6E08               	movwf	?_Read_b_eep,c
 10775  000E00  EC83  F024         	call	_Read_b_eep	;wreg free
 10776  000E04  0100               	movlb	0	; () banked
 10777  000E06  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10778  000E08  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10779  000E0A  D37A               	goto	l14160
 10780  000E0C                     l13768:
 10781                           
 10782                           ;main.c: 1816: channel_protection_timer[ 7 ] =
 10783                           ;main.c: 1817: Read_b_eep(0x43 + 46 + 34u) * 256 +
 10784                           ;main.c: 1819: Read_b_eep(0x43 + 46 + 35u);
 10785  000E0C  6A09               	clrf	?_Read_b_eep+1,c
 10786  000E0E  0E94               	movlw	148
 10787  000E10  6E08               	movwf	?_Read_b_eep,c
 10788  000E12  EC83  F024         	call	_Read_b_eep	;wreg free
 10789  000E16  0100               	movlb	0	; () banked
 10790  000E18  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10791  000E1A  6A09               	clrf	?_Read_b_eep+1,c
 10792  000E1C  0E93               	movlw	147
 10793  000E1E  6E08               	movwf	?_Read_b_eep,c
 10794  000E20  EC83  F024         	call	_Read_b_eep	;wreg free
 10795  000E24  0100               	movlb	0	; () banked
 10796  000E26  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10797  000E28  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10798  000E2A  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10799  000E2C  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10800  000E2E  6F90               	movwf	(_channel_protection_timer+14)& (0+255),b
 10801  000E30  0E00               	movlw	0
 10802  000E32  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10803  000E34  6F91               	movwf	(_channel_protection_timer+15)& (0+255),b
 10804  000E36  D364               	goto	l14160
 10805  000E38                     l757:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;main.c: 1824: else if (0 == val) {
 10809  000E38  664F               	tstfsz	vscp_writeAppReg@val,c
 10810  000E3A  D362               	goto	l14160
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;main.c: 1825: PORTAbits.RA2 = 0;
 10814  000E3C  9480               	bcf	3968,2,c	;volatile
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;main.c: 1826: rv = PORTAbits.RA2;
 10818  000E3E  0E00               	movlw	0
 10819  000E40  B480               	btfsc	3968,2,c	;volatile
 10820  000E42  0E01               	movlw	1
 10821  000E44  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10822  000E46  D69F               	goto	l13634
 10823  000E48                     l13776:
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;main.c: 1834: bInfoEvent = 1;
 10827  000E48  0E01               	movlw	1
 10828  000E4A  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;main.c: 1836: if (1 == val) {
 10832  000E4C  044F               	decf	vscp_writeAppReg@val,w,c
 10833  000E4E  E126               	bnz	l762
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;main.c: 1838: PORTAbits.RA1 = 1;
 10837  000E50  8280               	bsf	3968,1,c	;volatile
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1839: rv = PORTAbits.RA1;
 10841  000E52  0E00               	movlw	0
 10842  000E54  B280               	btfsc	3968,1,c	;volatile
 10843  000E56  0E01               	movlw	1
 10844  000E58  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;main.c: 1840: bOn = 1;
 10848  000E5A  0E01               	movlw	1
 10849  000E5C  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;main.c: 1842: if ( Read_b_eep(0x43 + 32) & 0x04 ) {
 10853  000E5E  6A09               	clrf	?_Read_b_eep+1,c
 10854  000E60  0E63               	movlw	99
 10855  000E62  6E08               	movwf	?_Read_b_eep,c
 10856  000E64  EC83  F024         	call	_Read_b_eep	;wreg free
 10857  000E68  0100               	movlb	0	; () banked
 10858  000E6A  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10859  000E6C  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10860  000E6E  D348               	goto	l14160
 10861  000E70                     l13788:
 10862                           
 10863                           ;main.c: 1843: channel_protection_timer[ 8 ] =
 10864                           ;main.c: 1844: Read_b_eep(0x43 + 46 + 36u) * 256 +
 10865                           ;main.c: 1846: Read_b_eep(0x43 + 46 + 37u);
 10866  000E70  6A09               	clrf	?_Read_b_eep+1,c
 10867  000E72  0E96               	movlw	150
 10868  000E74  6E08               	movwf	?_Read_b_eep,c
 10869  000E76  EC83  F024         	call	_Read_b_eep	;wreg free
 10870  000E7A  0100               	movlb	0	; () banked
 10871  000E7C  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10872  000E7E  6A09               	clrf	?_Read_b_eep+1,c
 10873  000E80  0E95               	movlw	149
 10874  000E82  6E08               	movwf	?_Read_b_eep,c
 10875  000E84  EC83  F024         	call	_Read_b_eep	;wreg free
 10876  000E88  0100               	movlb	0	; () banked
 10877  000E8A  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10878  000E8C  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10879  000E8E  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10880  000E90  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10881  000E92  6F92               	movwf	(_channel_protection_timer+16)& (0+255),b
 10882  000E94  0E00               	movlw	0
 10883  000E96  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10884  000E98  6F93               	movwf	(_channel_protection_timer+17)& (0+255),b
 10885  000E9A  D332               	goto	l14160
 10886  000E9C                     l762:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 1851: else if ( 0 == val ) {
 10890  000E9C  664F               	tstfsz	vscp_writeAppReg@val,c
 10891  000E9E  D330               	goto	l14160
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;main.c: 1852: PORTAbits.RA1 = 0;
 10895  000EA0  9280               	bcf	3968,1,c	;volatile
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;main.c: 1853: rv = PORTAbits.RA1;
 10899  000EA2  0E00               	movlw	0
 10900  000EA4  B280               	btfsc	3968,1,c	;volatile
 10901  000EA6  0E01               	movlw	1
 10902  000EA8  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10903  000EAA  D66D               	goto	l13634
 10904  000EAC                     l13796:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;main.c: 1861: bInfoEvent = 1;
 10908  000EAC  0E01               	movlw	1
 10909  000EAE  6FD9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;main.c: 1863: if ( 1 == val ) {
 10913  000EB0  044F               	decf	vscp_writeAppReg@val,w,c
 10914  000EB2  E126               	bnz	l767
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;main.c: 1865: PORTAbits.RA0 = 1;
 10918  000EB4  8080               	bsf	3968,0,c	;volatile
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;main.c: 1866: rv = PORTAbits.RA0;
 10922  000EB6  0E00               	movlw	0
 10923  000EB8  B080               	btfsc	3968,0,c	;volatile
 10924  000EBA  0E01               	movlw	1
 10925  000EBC  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;main.c: 1867: bOn = 1;
 10929  000EBE  0E01               	movlw	1
 10930  000EC0  6FDB               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;main.c: 1869: if ( Read_b_eep(0x43 + 33) & 0x04 ) {
 10934  000EC2  6A09               	clrf	?_Read_b_eep+1,c
 10935  000EC4  0E64               	movlw	100
 10936  000EC6  6E08               	movwf	?_Read_b_eep,c
 10937  000EC8  EC83  F024         	call	_Read_b_eep	;wreg free
 10938  000ECC  0100               	movlb	0	; () banked
 10939  000ECE  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10940  000ED0  A5D1               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10941  000ED2  D316               	goto	l14160
 10942  000ED4                     l13808:
 10943                           
 10944                           ;main.c: 1870: channel_protection_timer[ 9 ] =
 10945                           ;main.c: 1871: Read_b_eep(0x43 + 46 + 38u) * 256 +
 10946                           ;main.c: 1873: Read_b_eep(0x43 + 46 + 39u);
 10947  000ED4  6A09               	clrf	?_Read_b_eep+1,c
 10948  000ED6  0E98               	movlw	152
 10949  000ED8  6E08               	movwf	?_Read_b_eep,c
 10950  000EDA  EC83  F024         	call	_Read_b_eep	;wreg free
 10951  000EDE  0100               	movlb	0	; () banked
 10952  000EE0  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 10953  000EE2  6A09               	clrf	?_Read_b_eep+1,c
 10954  000EE4  0E97               	movlw	151
 10955  000EE6  6E08               	movwf	?_Read_b_eep,c
 10956  000EE8  EC83  F024         	call	_Read_b_eep	;wreg free
 10957  000EEC  0100               	movlb	0	; () banked
 10958  000EEE  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10959  000EF0  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10960  000EF2  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 10961  000EF4  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10962  000EF6  6F94               	movwf	(_channel_protection_timer+18)& (0+255),b
 10963  000EF8  0E00               	movlw	0
 10964  000EFA  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10965  000EFC  6F95               	movwf	(_channel_protection_timer+19)& (0+255),b
 10966  000EFE  D300               	goto	l14160
 10967  000F00                     l767:
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;main.c: 1878: else if ( 0 == val ) {
 10971  000F00  664F               	tstfsz	vscp_writeAppReg@val,c
 10972  000F02  D2FE               	goto	l14160
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;main.c: 1879: PORTAbits.RA0 = 0;
 10976  000F04  9080               	bcf	3968,0,c	;volatile
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;main.c: 1880: rv = PORTAbits.RA0;
 10980  000F06  0E00               	movlw	0
 10981  000F08  B080               	btfsc	3968,0,c	;volatile
 10982  000F0A  0E01               	movlw	1
 10983  000F0C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 10984  000F0E  D63B               	goto	l13634
 10985  000F10                     l13818:
 10986                           
 10987                           ; BSR set to: 0
 10988  000F10  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 10989                           
 10990                           ; Switch size 1, requested type "space"
 10991                           ; Number of cases is 10, Range of values is 14 to 23
 10992                           ; switch strategies available:
 10993                           ; Name         Instructions Cycles
 10994                           ; simple_byte           31    16 (average)
 10995                           ;	Chosen strategy is simple_byte
 10996  000F12  0A0E               	xorlw	14	; case 14
 10997  000F14  E101 D603          	bz	l13616
 10998  000F18  0A01               	xorlw	1	; case 15
 10999  000F1A  E101 D637          	bz	l13636
 11000  000F1E  0A1F               	xorlw	31	; case 16
 11001  000F20  E101 D65F          	bz	l13656
 11002  000F24  0A01               	xorlw	1	; case 17
 11003  000F26  E101 D691          	bz	l13676
 11004  000F2A  0A03               	xorlw	3	; case 18
 11005  000F2C  E101 D6C3          	bz	l13696
 11006  000F30  0A01               	xorlw	1	; case 19
 11007  000F32  E101 D6F3          	bz	l13716
 11008  000F36  0A07               	xorlw	7	; case 20
 11009  000F38  E101 D722          	bz	l13736
 11010  000F3C  0A01               	xorlw	1	; case 21
 11011  000F3E  E101 D751          	bz	l13756
 11012  000F42  0A03               	xorlw	3	; case 22
 11013  000F44  E081               	bz	l13776
 11014  000F46  0A01               	xorlw	1	; case 23
 11015  000F48  E0B1               	bz	l13796
 11016                           
 11017                           ;main.c: 1886: }
 11018                           ;main.c: 1887: }
 11019  000F4A  D2DA               	goto	l14160
 11020  000F4C                     l13820:
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;main.c: 1890: else if ( (reg >= 24 ) &&
 11024                           ;main.c: 1891: (reg <= 33) ) {
 11025  000F4C  0E17               	movlw	23
 11026  000F4E  65DC               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11027  000F50  D1C3               	goto	l14070
 11028                           
 11029                           ; BSR set to: 0
 11030  000F52  0E22               	movlw	34
 11031  000F54  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11032  000F56  D1C0               	goto	l14070
 11033  000F58  D1A1               	goto	l14068
 11034  000F5A                     l13826:
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;main.c: 1897: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11038  000F5A  ECB7  F024         	call	_Busy_eep	;wreg free
 11039  000F5E  0E71               	movlw	113
 11040  000F60  DAF5               	call	PL2	;call to abstracted procedure
 11041  000F62  EC73  F022         	call	_Write_b_eep	;wreg free
 11042                           
 11043                           ;main.c: 1898: rv = Read_b_eep(0x43 + 46 + reg);
 11044  000F66  DB02               	call	PL10	;call to abstracted procedure
 11045  000F68  EC83  F024         	call	_Read_b_eep	;wreg free
 11046  000F6C  0100               	movlb	0	; () banked
 11047  000F6E  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;main.c: 1900: if ( val & 0x01 ) {
 11051  000F70  A04F               	btfss	vscp_writeAppReg@val,0,c
 11052  000F72  D012               	goto	l13840
 11053                           
 11054                           ; BSR set to: 0
 11055                           ;main.c: 1902: PORTBbits.RB0 = 0;
 11056  000F74  9081               	bcf	3969,0,c	;volatile
 11057                           
 11058                           ;main.c: 1903: bOn = 0;
 11059  000F76  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;main.c: 1905: channel_pulse_flags |= 0b0000000001;
 11063  000F78  8168               	bsf	_channel_pulse_flags& (0+255),0,b
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;main.c: 1906: channel_pulse_timer[ 0 ] =
 11067                           ;main.c: 1907: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11068                           ;main.c: 1909: Read_b_eep(0x43 + 46 + 0u);
 11069  000F7A  6A09               	clrf	?_Read_b_eep+1,c
 11070  000F7C  0E71               	movlw	113
 11071  000F7E  6E08               	movwf	?_Read_b_eep,c
 11072  000F80  EC83  F024         	call	_Read_b_eep	;wreg free
 11073  000F84  0100               	movlb	0	; () banked
 11074  000F86  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11075  000F88  6A09               	clrf	?_Read_b_eep+1,c
 11076  000F8A  0E71               	movlw	113
 11077  000F8C  6E08               	movwf	?_Read_b_eep,c
 11078  000F8E  EC83  F024         	call	_Read_b_eep	;wreg free
 11079  000F92  DAE5               	call	PL6	;call to abstracted procedure
 11080  000F94  DB0F               	call	PL82	;call to abstracted procedure
 11081                           
 11082                           ;main.c: 1911: }
 11083  000F96  D006               	goto	l13846
 11084  000F98                     l13840:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;main.c: 1912: else {
 11088                           ;main.c: 1913: channel_pulse_flags &= 0b1111111110;
 11089  000F98  0EFE               	movlw	254
 11090  000F9A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11091  000F9C  0E03               	movlw	3
 11092  000F9E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;main.c: 1914: PORTBbits.RB0 = 0;
 11096  000FA0  9081               	bcf	3969,0,c	;volatile
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;main.c: 1915: bOn = 0;
 11100  000FA2  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11101  000FA4                     l13846:
 11102                           
 11103                           ;main.c: 1916: }
 11104                           ;main.c: 1918: if ( val & 0x04 ) {
 11105  000FA4  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11106  000FA6  D5D0               	goto	l13628
 11107  000FA8  D2AB               	goto	l14160
 11108  000FAA                     l13850:
 11109                           
 11110                           ; BSR set to: 0
 11111                           ;main.c: 1929: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11112  000FAA  ECB7  F024         	call	_Busy_eep	;wreg free
 11113  000FAE  0E71               	movlw	113
 11114  000FB0  DACD               	call	PL2	;call to abstracted procedure
 11115  000FB2  EC73  F022         	call	_Write_b_eep	;wreg free
 11116                           
 11117                           ;main.c: 1930: rv = Read_b_eep(0x43 + 46 + reg);
 11118  000FB6  DADA               	call	PL10	;call to abstracted procedure
 11119  000FB8  EC83  F024         	call	_Read_b_eep	;wreg free
 11120  000FBC  0100               	movlb	0	; () banked
 11121  000FBE  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;main.c: 1932: if ( val & 0x02 ) {
 11125  000FC0  A24F               	btfss	vscp_writeAppReg@val,1,c
 11126  000FC2  D012               	goto	l13864
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;main.c: 1934: PORTBbits.RB1 = 0;
 11130  000FC4  9281               	bcf	3969,1,c	;volatile
 11131                           
 11132                           ;main.c: 1935: bOn = 0;
 11133  000FC6  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;main.c: 1937: channel_pulse_flags |= 0b0000000010;
 11137  000FC8  8368               	bsf	_channel_pulse_flags& (0+255),1,b
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;main.c: 1938: channel_pulse_timer[ 1 ] =
 11141                           ;main.c: 1939: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11142                           ;main.c: 1941: Read_b_eep(0x43 + 46 + 1u);
 11143  000FCA  6A09               	clrf	?_Read_b_eep+1,c
 11144  000FCC  0E72               	movlw	114
 11145  000FCE  6E08               	movwf	?_Read_b_eep,c
 11146  000FD0  EC83  F024         	call	_Read_b_eep	;wreg free
 11147  000FD4  0100               	movlb	0	; () banked
 11148  000FD6  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11149  000FD8  6A09               	clrf	?_Read_b_eep+1,c
 11150  000FDA  0E71               	movlw	113
 11151  000FDC  6E08               	movwf	?_Read_b_eep,c
 11152  000FDE  EC83  F024         	call	_Read_b_eep	;wreg free
 11153  000FE2  DABD               	call	PL6	;call to abstracted procedure
 11154  000FE4  DAD9               	call	PL72	;call to abstracted procedure
 11155                           
 11156                           ;main.c: 1943: }
 11157  000FE6  D006               	goto	l13870
 11158  000FE8                     l13864:
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;main.c: 1944: else {
 11162                           ;main.c: 1945: channel_pulse_flags &= 0b1111111101;
 11163  000FE8  0EFD               	movlw	253
 11164  000FEA  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11165  000FEC  0E03               	movlw	3
 11166  000FEE  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;main.c: 1946: PORTBbits.RB1 = 0;
 11170  000FF0  9281               	bcf	3969,1,c	;volatile
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;main.c: 1947: bOn = 0;
 11174  000FF2  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11175  000FF4                     l13870:
 11176                           
 11177                           ;main.c: 1948: }
 11178                           ;main.c: 1950: if ( val & 0x04 ) {
 11179  000FF4  A44F               	btfss	vscp_writeAppReg@val,2,c
 11180  000FF6  D284               	goto	l14160
 11181                           
 11182                           ;main.c: 1951: channel_protection_timer[ 1 ] =
 11183                           ;main.c: 1952: Read_b_eep(0x43 + 46 + 20u) * 256 +
 11184                           ;main.c: 1954: Read_b_eep(0x43 + 46 + 21u);
 11185  000FF8  6A09               	clrf	?_Read_b_eep+1,c
 11186  000FFA  0E86               	movlw	134
 11187  000FFC  6E08               	movwf	?_Read_b_eep,c
 11188  000FFE  EC83  F024         	call	_Read_b_eep	;wreg free
 11189  001002  0100               	movlb	0	; () banked
 11190  001004  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11191  001006  6A09               	clrf	?_Read_b_eep+1,c
 11192  001008  0E85               	movlw	133
 11193  00100A  6E08               	movwf	?_Read_b_eep,c
 11194  00100C  EC83  F024         	call	_Read_b_eep	;wreg free
 11195  001010                     L34:
 11196  001010  0100               	movlb	0	; () banked
 11197  001012  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11198  001014  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11199  001016  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 11200  001018  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11201  00101A  6F84               	movwf	(_channel_protection_timer+2)& (0+255),b
 11202  00101C  0E00               	movlw	0
 11203  00101E  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11204  001020  6F85               	movwf	(_channel_protection_timer+3)& (0+255),b
 11205  001022  D26E               	goto	l14160
 11206  001024                     l13874:
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;main.c: 1961: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11210  001024  ECB7  F024         	call	_Busy_eep	;wreg free
 11211  001028  0E71               	movlw	113
 11212  00102A  DA90               	call	PL2	;call to abstracted procedure
 11213  00102C  EC73  F022         	call	_Write_b_eep	;wreg free
 11214                           
 11215                           ;main.c: 1962: rv = Read_b_eep(0x43 + 46 + reg);
 11216  001030  DA9D               	call	PL10	;call to abstracted procedure
 11217  001032  EC83  F024         	call	_Read_b_eep	;wreg free
 11218  001036  0100               	movlb	0	; () banked
 11219  001038  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;main.c: 1964: if ( val & 0x01 ) {
 11223  00103A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11224  00103C  D012               	goto	l13888
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;main.c: 1966: PORTCbits.RC3 = 0;
 11228  00103E  9682               	bcf	3970,3,c	;volatile
 11229                           
 11230                           ;main.c: 1967: bOn = 0;
 11231  001040  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;main.c: 1969: channel_pulse_flags |= 0b0000000100;
 11235  001042  8568               	bsf	_channel_pulse_flags& (0+255),2,b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;main.c: 1970: channel_pulse_timer[ 2 ] =
 11239                           ;main.c: 1971: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11240                           ;main.c: 1973: Read_b_eep(0x43 + 46 + 5u);
 11241  001044  6A09               	clrf	?_Read_b_eep+1,c
 11242  001046  0E76               	movlw	118
 11243  001048  6E08               	movwf	?_Read_b_eep,c
 11244  00104A  EC83  F024         	call	_Read_b_eep	;wreg free
 11245  00104E  0100               	movlb	0	; () banked
 11246  001050  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11247  001052  6A09               	clrf	?_Read_b_eep+1,c
 11248  001054  0E75               	movlw	117
 11249  001056  6E08               	movwf	?_Read_b_eep,c
 11250  001058  EC83  F024         	call	_Read_b_eep	;wreg free
 11251  00105C  DA80               	call	PL6	;call to abstracted procedure
 11252  00105E  DAB8               	call	PL86	;call to abstracted procedure
 11253                           
 11254                           ;main.c: 1975: }
 11255  001060  D006               	goto	l13894
 11256  001062                     l13888:
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;main.c: 1976: else {
 11260                           ;main.c: 1977: channel_pulse_flags &= 0b1111111011;
 11261  001062  0EFB               	movlw	251
 11262  001064  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11263  001066  0E03               	movlw	3
 11264  001068  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;main.c: 1978: PORTCbits.RC3 = 0;
 11268  00106A  9682               	bcf	3970,3,c	;volatile
 11269                           
 11270                           ; BSR set to: 0
 11271                           ;main.c: 1979: bOn = 0;
 11272  00106C  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11273  00106E                     l13894:
 11274                           
 11275                           ;main.c: 1980: }
 11276                           ;main.c: 1982: if ( val & 0x04 ) {
 11277  00106E  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11278  001070  D5CD               	goto	l13668
 11279  001072  D246               	goto	l14160
 11280  001074                     l13898:
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;main.c: 1993: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11284  001074  ECB7  F024         	call	_Busy_eep	;wreg free
 11285  001078  0E71               	movlw	113
 11286  00107A  DA68               	call	PL2	;call to abstracted procedure
 11287  00107C  EC73  F022         	call	_Write_b_eep	;wreg free
 11288                           
 11289                           ;main.c: 1994: rv = Read_b_eep(0x43 + 46 + reg);
 11290  001080  DA75               	call	PL10	;call to abstracted procedure
 11291  001082  EC83  F024         	call	_Read_b_eep	;wreg free
 11292  001086  0100               	movlb	0	; () banked
 11293  001088  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;main.c: 1996: if ( val & 0x01 ) {
 11297  00108A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11298  00108C  D012               	goto	l13912
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 1998: PORTCbits.RC4 = 0;
 11302  00108E  9882               	bcf	3970,4,c	;volatile
 11303                           
 11304                           ;main.c: 1999: bOn = 0;
 11305  001090  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;main.c: 2001: channel_pulse_flags |= 0b0000001000;
 11309  001092  8768               	bsf	_channel_pulse_flags& (0+255),3,b
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;main.c: 2002: channel_pulse_timer[ 3 ] =
 11313                           ;main.c: 2003: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11314                           ;main.c: 2005: Read_b_eep(0x43 + 46 + 7u);
 11315  001094  6A09               	clrf	?_Read_b_eep+1,c
 11316  001096  0E78               	movlw	120
 11317  001098  6E08               	movwf	?_Read_b_eep,c
 11318  00109A  EC83  F024         	call	_Read_b_eep	;wreg free
 11319  00109E  0100               	movlb	0	; () banked
 11320  0010A0  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11321  0010A2  6A09               	clrf	?_Read_b_eep+1,c
 11322  0010A4  0E77               	movlw	119
 11323  0010A6  6E08               	movwf	?_Read_b_eep,c
 11324  0010A8  EC83  F024         	call	_Read_b_eep	;wreg free
 11325  0010AC  DA58               	call	PL6	;call to abstracted procedure
 11326  0010AE  DA7B               	call	PL74	;call to abstracted procedure
 11327                           
 11328                           ;main.c: 2007: }
 11329  0010B0  D006               	goto	l13918
 11330  0010B2                     l13912:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;main.c: 2008: else {
 11334                           ;main.c: 2009: channel_pulse_flags &= 0b1111110111;
 11335  0010B2  0EF7               	movlw	247
 11336  0010B4  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11337  0010B6  0E03               	movlw	3
 11338  0010B8  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;main.c: 2010: PORTCbits.RC4 = 0;
 11342  0010BA  9882               	bcf	3970,4,c	;volatile
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;main.c: 2011: bOn = 0;
 11346  0010BC  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11347  0010BE                     l13918:
 11348                           
 11349                           ;main.c: 2012: }
 11350                           ;main.c: 2014: if ( val & 0x04 ) {
 11351  0010BE  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11352  0010C0  D5DA               	goto	l13688
 11353  0010C2  D21E               	goto	l14160
 11354  0010C4                     l13922:
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;main.c: 2025: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11358  0010C4  ECB7  F024         	call	_Busy_eep	;wreg free
 11359  0010C8  0E71               	movlw	113
 11360  0010CA  DA40               	call	PL2	;call to abstracted procedure
 11361  0010CC  EC73  F022         	call	_Write_b_eep	;wreg free
 11362                           
 11363                           ;main.c: 2026: rv = Read_b_eep(0x43 + 46 + reg);
 11364  0010D0  DA4D               	call	PL10	;call to abstracted procedure
 11365  0010D2  EC83  F024         	call	_Read_b_eep	;wreg free
 11366  0010D6  0100               	movlb	0	; () banked
 11367  0010D8  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;main.c: 2028: if ( val & 0x04 ) {
 11371  0010DA  A44F               	btfss	vscp_writeAppReg@val,2,c
 11372  0010DC  D012               	goto	l13936
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;main.c: 2030: PORTCbits.RC5 = 0;
 11376  0010DE  9A82               	bcf	3970,5,c	;volatile
 11377                           
 11378                           ;main.c: 2031: bOn = 0;
 11379  0010E0  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;main.c: 2033: channel_pulse_flags |= 0b0000010000;
 11383  0010E2  8968               	bsf	_channel_pulse_flags& (0+255),4,b
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;main.c: 2034: channel_pulse_timer[ 4 ] =
 11387                           ;main.c: 2035: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11388                           ;main.c: 2037: Read_b_eep(0x43 + 46 + 9u);
 11389  0010E4  6A09               	clrf	?_Read_b_eep+1,c
 11390  0010E6  0E7A               	movlw	122
 11391  0010E8  6E08               	movwf	?_Read_b_eep,c
 11392  0010EA  EC83  F024         	call	_Read_b_eep	;wreg free
 11393  0010EE  0100               	movlb	0	; () banked
 11394  0010F0  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11395  0010F2  6A09               	clrf	?_Read_b_eep+1,c
 11396  0010F4  0E79               	movlw	121
 11397  0010F6  6E08               	movwf	?_Read_b_eep,c
 11398  0010F8  EC83  F024         	call	_Read_b_eep	;wreg free
 11399  0010FC  DA30               	call	PL6	;call to abstracted procedure
 11400  0010FE  DA61               	call	PL84	;call to abstracted procedure
 11401                           
 11402                           ;main.c: 2039: }
 11403  001100  D006               	goto	l13942
 11404  001102                     l13936:
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;main.c: 2040: else {
 11408                           ;main.c: 2041: channel_pulse_flags &= 0b1111101111;
 11409  001102  0EEF               	movlw	239
 11410  001104  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11411  001106  0E03               	movlw	3
 11412  001108  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;main.c: 2042: PORTCbits.RC5 = 0;
 11416  00110A  9A82               	bcf	3970,5,c	;volatile
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;main.c: 2043: bOn = 0;
 11420  00110C  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11421  00110E                     l13942:
 11422                           
 11423                           ;main.c: 2044: }
 11424                           ;main.c: 2046: if ( val & 0x04 ) {
 11425  00110E  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11426  001110  D5E7               	goto	l13708
 11427  001112  D1F6               	goto	l14160
 11428  001114                     l13946:
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;main.c: 2057: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11432  001114  ECB7  F024         	call	_Busy_eep	;wreg free
 11433  001118  0E71               	movlw	113
 11434  00111A  DA18               	call	PL2	;call to abstracted procedure
 11435  00111C  EC73  F022         	call	_Write_b_eep	;wreg free
 11436                           
 11437                           ;main.c: 2058: rv = Read_b_eep(0x43 + 46 + reg);
 11438  001120  DA25               	call	PL10	;call to abstracted procedure
 11439  001122  EC83  F024         	call	_Read_b_eep	;wreg free
 11440  001126  0100               	movlb	0	; () banked
 11441  001128  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;main.c: 2060: if ( val & 0x01 ) {
 11445  00112A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11446  00112C  D012               	goto	l13960
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;main.c: 2062: PORTCbits.RC6 = 0;
 11450  00112E  9C82               	bcf	3970,6,c	;volatile
 11451                           
 11452                           ;main.c: 2063: bOn = 0;
 11453  001130  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;main.c: 2065: channel_pulse_flags |= 0b0000100000;
 11457  001132  8B68               	bsf	_channel_pulse_flags& (0+255),5,b
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;main.c: 2066: channel_pulse_timer[ 5 ] =
 11461                           ;main.c: 2067: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11462                           ;main.c: 2069: Read_b_eep(0x43 + 46 + 11u);
 11463  001134  6A09               	clrf	?_Read_b_eep+1,c
 11464  001136  0E7C               	movlw	124
 11465  001138  6E08               	movwf	?_Read_b_eep,c
 11466  00113A  EC83  F024         	call	_Read_b_eep	;wreg free
 11467  00113E  0100               	movlb	0	; () banked
 11468  001140  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11469  001142  6A09               	clrf	?_Read_b_eep+1,c
 11470  001144  0E7B               	movlw	123
 11471  001146  6E08               	movwf	?_Read_b_eep,c
 11472  001148  EC83  F024         	call	_Read_b_eep	;wreg free
 11473  00114C  DA08               	call	PL6	;call to abstracted procedure
 11474  00114E  DA4E               	call	PL90	;call to abstracted procedure
 11475                           
 11476                           ;main.c: 2071: }
 11477  001150  D006               	goto	l13966
 11478  001152                     l13960:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;main.c: 2072: else {
 11482                           ;main.c: 2073: channel_pulse_flags &= 0b1111011111;
 11483  001152  0EDF               	movlw	223
 11484  001154  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11485  001156  0E03               	movlw	3
 11486  001158  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;main.c: 2074: PORTCbits.RC6 = 0;
 11490  00115A  9C82               	bcf	3970,6,c	;volatile
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;main.c: 2075: bOn = 0;
 11494  00115C  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11495  00115E                     l13966:
 11496                           
 11497                           ;main.c: 2076: }
 11498                           ;main.c: 2078: if ( val & 0x04 ) {
 11499  00115E  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11500  001160  D5F1               	goto	l13728
 11501  001162  D1CE               	goto	l14160
 11502  001164                     l13970:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;main.c: 2089: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11506  001164  ECB7  F024         	call	_Busy_eep	;wreg free
 11507  001168  0E71               	movlw	113
 11508  00116A  D9F0               	call	PL2	;call to abstracted procedure
 11509  00116C  EC73  F022         	call	_Write_b_eep	;wreg free
 11510                           
 11511                           ;main.c: 2090: rv = Read_b_eep(0x43 + 46 + reg);
 11512  001170  D9FD               	call	PL10	;call to abstracted procedure
 11513  001172  EC83  F024         	call	_Read_b_eep	;wreg free
 11514  001176  0100               	movlb	0	; () banked
 11515  001178  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;main.c: 2092: if ( val & 0x01 ) {
 11519  00117A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11520  00117C  D012               	goto	l13984
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;main.c: 2094: PORTCbits.RC7 = 0;
 11524  00117E  9E82               	bcf	3970,7,c	;volatile
 11525                           
 11526                           ;main.c: 2095: bOn = 0;
 11527  001180  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;main.c: 2097: channel_pulse_flags |= 0b0001000000;
 11531  001182  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;main.c: 2098: channel_pulse_timer[ 6 ] =
 11535                           ;main.c: 2099: Read_b_eep(0x43 + 46 + 12u) * 256 +
 11536                           ;main.c: 2101: Read_b_eep(0x43 + 46 + 13u);
 11537  001184  6A09               	clrf	?_Read_b_eep+1,c
 11538  001186  0E7E               	movlw	126
 11539  001188  6E08               	movwf	?_Read_b_eep,c
 11540  00118A  EC83  F024         	call	_Read_b_eep	;wreg free
 11541  00118E  0100               	movlb	0	; () banked
 11542  001190  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11543  001192  6A09               	clrf	?_Read_b_eep+1,c
 11544  001194  0E7D               	movlw	125
 11545  001196  6E08               	movwf	?_Read_b_eep,c
 11546  001198  EC83  F024         	call	_Read_b_eep	;wreg free
 11547  00119C  D9E0               	call	PL6	;call to abstracted procedure
 11548  00119E  D9F5               	call	PL70	;call to abstracted procedure
 11549                           
 11550                           ;main.c: 2103: }
 11551  0011A0  D006               	goto	l13990
 11552  0011A2                     l13984:
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;main.c: 2104: else {
 11556                           ;main.c: 2105: channel_pulse_flags &= 0b1110111111;
 11557  0011A2  0EBF               	movlw	191
 11558  0011A4  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11559  0011A6  0E03               	movlw	3
 11560  0011A8  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;main.c: 2106: PORTCbits.RC7 = 0;
 11564  0011AA  9E82               	bcf	3970,7,c	;volatile
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;main.c: 2107: bOn = 0;
 11568  0011AC  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11569  0011AE                     l13990:
 11570                           
 11571                           ;main.c: 2108: }
 11572                           ;main.c: 2110: if ( val & 0x04 ) {
 11573  0011AE  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11574  0011B0  D5FB               	goto	l13748
 11575  0011B2  D1A6               	goto	l14160
 11576  0011B4                     l13994:
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 2121: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11580  0011B4  ECB7  F024         	call	_Busy_eep	;wreg free
 11581  0011B8  0E71               	movlw	113
 11582  0011BA  D9C8               	call	PL2	;call to abstracted procedure
 11583  0011BC  EC73  F022         	call	_Write_b_eep	;wreg free
 11584                           
 11585                           ;main.c: 2122: rv = Read_b_eep(0x43 + 46 + reg);
 11586  0011C0  D9D5               	call	PL10	;call to abstracted procedure
 11587  0011C2  EC83  F024         	call	_Read_b_eep	;wreg free
 11588  0011C6  0100               	movlb	0	; () banked
 11589  0011C8  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;main.c: 2124: if ( val & 0x01 ) {
 11593  0011CA  A04F               	btfss	vscp_writeAppReg@val,0,c
 11594  0011CC  D012               	goto	l14008
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;main.c: 2126: PORTAbits.RA2 = 0;
 11598  0011CE  9480               	bcf	3968,2,c	;volatile
 11599                           
 11600                           ;main.c: 2127: bOn = 0;
 11601  0011D0  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;main.c: 2129: channel_pulse_flags |= 0b0010000000;
 11605  0011D2  8F68               	bsf	_channel_pulse_flags& (0+255),7,b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;main.c: 2130: channel_pulse_timer[ 7 ] =
 11609                           ;main.c: 2131: Read_b_eep(0x43 + 46 + 14u) * 256 +
 11610                           ;main.c: 2133: Read_b_eep(0x43 + 46 + 15u);
 11611  0011D4  6A09               	clrf	?_Read_b_eep+1,c
 11612  0011D6  0E80               	movlw	128
 11613  0011D8  6E08               	movwf	?_Read_b_eep,c
 11614  0011DA  EC83  F024         	call	_Read_b_eep	;wreg free
 11615  0011DE  0100               	movlb	0	; () banked
 11616  0011E0  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11617  0011E2  6A09               	clrf	?_Read_b_eep+1,c
 11618  0011E4  0E7F               	movlw	127
 11619  0011E6  6E08               	movwf	?_Read_b_eep,c
 11620  0011E8  EC83  F024         	call	_Read_b_eep	;wreg free
 11621  0011EC  D9B8               	call	PL6	;call to abstracted procedure
 11622  0011EE  D9F7               	call	PL88	;call to abstracted procedure
 11623                           
 11624                           ;main.c: 2135: }
 11625  0011F0  D006               	goto	l14014
 11626  0011F2                     l14008:
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;main.c: 2136: else {
 11630                           ;main.c: 2137: channel_pulse_flags &= 0b1101111111;
 11631  0011F2  0E7F               	movlw	127
 11632  0011F4  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11633  0011F6  0E03               	movlw	3
 11634  0011F8  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;main.c: 2138: PORTAbits.RA2 = 0;
 11638  0011FA  9480               	bcf	3968,2,c	;volatile
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;main.c: 2139: bOn = 0;
 11642  0011FC  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11643  0011FE                     l14014:
 11644                           
 11645                           ;main.c: 2140: }
 11646                           ;main.c: 2142: if ( val & 0x04 ) {
 11647  0011FE  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11648  001200  D605               	goto	l13768
 11649  001202  D17E               	goto	l14160
 11650  001204                     l14018:
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;main.c: 2153: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11654  001204  ECB7  F024         	call	_Busy_eep	;wreg free
 11655  001208  0E71               	movlw	113
 11656  00120A  D9A0               	call	PL2	;call to abstracted procedure
 11657  00120C  EC73  F022         	call	_Write_b_eep	;wreg free
 11658                           
 11659                           ;main.c: 2154: rv = Read_b_eep(0x43 + 46 + reg);
 11660  001210  D9AD               	call	PL10	;call to abstracted procedure
 11661  001212  EC83  F024         	call	_Read_b_eep	;wreg free
 11662  001216  0100               	movlb	0	; () banked
 11663  001218  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;main.c: 2156: if ( val & 0x01 ) {
 11667  00121A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11668  00121C  D012               	goto	l14032
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;main.c: 2158: PORTAbits.RA1 = 0;
 11672  00121E  9280               	bcf	3968,1,c	;volatile
 11673                           
 11674                           ;main.c: 2159: bOn = 0;
 11675  001220  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;main.c: 2161: channel_pulse_flags |= 0b0100000000;
 11679  001222  8169               	bsf	(_channel_pulse_flags+1)& (0+255),0,b
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;main.c: 2162: channel_pulse_timer[ 8 ] =
 11683                           ;main.c: 2163: Read_b_eep(0x43 + 46 + 16u) * 256 +
 11684                           ;main.c: 2165: Read_b_eep(0x43 + 46 + 17u);
 11685  001224  6A09               	clrf	?_Read_b_eep+1,c
 11686  001226  0E82               	movlw	130
 11687  001228  6E08               	movwf	?_Read_b_eep,c
 11688  00122A  EC83  F024         	call	_Read_b_eep	;wreg free
 11689  00122E  0100               	movlb	0	; () banked
 11690  001230  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11691  001232  6A09               	clrf	?_Read_b_eep+1,c
 11692  001234  0E81               	movlw	129
 11693  001236  6E08               	movwf	?_Read_b_eep,c
 11694  001238  EC83  F024         	call	_Read_b_eep	;wreg free
 11695  00123C  D990               	call	PL6	;call to abstracted procedure
 11696  00123E  D9E4               	call	PL96	;call to abstracted procedure
 11697                           
 11698                           ;main.c: 2167: }
 11699  001240  D004               	goto	l14038
 11700  001242                     l14032:
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;main.c: 2168: else {
 11704                           ;main.c: 2169: channel_pulse_flags &= 0b1011111111;
 11705  001242  0E02               	movlw	2
 11706  001244  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;main.c: 2170: PORTAbits.RA1 = 0;
 11710  001246  9280               	bcf	3968,1,c	;volatile
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 2171: bOn = 0;
 11714  001248  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11715  00124A                     l14038:
 11716                           
 11717                           ;main.c: 2172: }
 11718                           ;main.c: 2174: if ( val & 0x04 ) {
 11719  00124A  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11720  00124C  D611               	goto	l13788
 11721  00124E  D158               	goto	l14160
 11722  001250                     l14042:
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;main.c: 2185: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11726  001250  ECB7  F024         	call	_Busy_eep	;wreg free
 11727  001254  0E71               	movlw	113
 11728  001256  D97A               	call	PL2	;call to abstracted procedure
 11729  001258  EC73  F022         	call	_Write_b_eep	;wreg free
 11730                           
 11731                           ;main.c: 2186: rv = Read_b_eep(0x43 + 46 + reg);
 11732  00125C  D987               	call	PL10	;call to abstracted procedure
 11733  00125E  EC83  F024         	call	_Read_b_eep	;wreg free
 11734  001262  0100               	movlb	0	; () banked
 11735  001264  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;main.c: 2188: if ( val & 0x01 ) {
 11739  001266  A04F               	btfss	vscp_writeAppReg@val,0,c
 11740  001268  D012               	goto	l14056
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;main.c: 2190: PORTAbits.RA0 = 0;
 11744  00126A  9080               	bcf	3968,0,c	;volatile
 11745                           
 11746                           ;main.c: 2191: bOn = 0;
 11747  00126C  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;main.c: 2193: channel_pulse_flags |= 0b1000000000;
 11751  00126E  8369               	bsf	(_channel_pulse_flags+1)& (0+255),1,b
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;main.c: 2194: channel_pulse_timer[ 9 ] =
 11755                           ;main.c: 2195: Read_b_eep(0x43 + 46 + 18u) * 256 +
 11756                           ;main.c: 2197: Read_b_eep(0x43 + 46 + 19u);
 11757  001270  6A09               	clrf	?_Read_b_eep+1,c
 11758  001272  0E84               	movlw	132
 11759  001274  6E08               	movwf	?_Read_b_eep,c
 11760  001276  EC83  F024         	call	_Read_b_eep	;wreg free
 11761  00127A  0100               	movlb	0	; () banked
 11762  00127C  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11763  00127E  6A09               	clrf	?_Read_b_eep+1,c
 11764  001280  0E83               	movlw	131
 11765  001282  6E08               	movwf	?_Read_b_eep,c
 11766  001284  EC83  F024         	call	_Read_b_eep	;wreg free
 11767  001288  D96A               	call	PL6	;call to abstracted procedure
 11768  00128A  D9B7               	call	PL94	;call to abstracted procedure
 11769                           
 11770                           ;main.c: 2199: }
 11771  00128C  D004               	goto	l14062
 11772  00128E                     l14056:
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;main.c: 2200: else {
 11776                           ;main.c: 2201: channel_pulse_flags &= 0b0111111111;
 11777  00128E  0E01               	movlw	1
 11778  001290  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;main.c: 2202: PORTAbits.RA0 = 0;
 11782  001292  9080               	bcf	3968,0,c	;volatile
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;main.c: 2203: bOn = 0;
 11786  001294  6BDB               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11787  001296                     l14062:
 11788                           
 11789                           ;main.c: 2204: }
 11790                           ;main.c: 2206: if ( val & 0x04 ) {
 11791  001296  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11792  001298  D61D               	goto	l13808
 11793  00129A  D132               	goto	l14160
 11794  00129C                     l14068:
 11795                           
 11796                           ; BSR set to: 0
 11797  00129C  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 11798                           
 11799                           ; Switch size 1, requested type "space"
 11800                           ; Number of cases is 10, Range of values is 24 to 33
 11801                           ; switch strategies available:
 11802                           ; Name         Instructions Cycles
 11803                           ; simple_byte           31    16 (average)
 11804                           ;	Chosen strategy is simple_byte
 11805  00129E  0A18               	xorlw	24	; case 24
 11806  0012A0  E101 D65B          	bz	l13826
 11807  0012A4  0A01               	xorlw	1	; case 25
 11808  0012A6  E101 D680          	bz	l13850
 11809  0012AA  0A03               	xorlw	3	; case 26
 11810  0012AC  E101 D6BA          	bz	l13874
 11811  0012B0  0A01               	xorlw	1	; case 27
 11812  0012B2  E101 D6DF          	bz	l13898
 11813  0012B6  0A07               	xorlw	7	; case 28
 11814  0012B8  E101 D704          	bz	l13922
 11815  0012BC  0A01               	xorlw	1	; case 29
 11816  0012BE  E101 D729          	bz	l13946
 11817  0012C2  0A03               	xorlw	3	; case 30
 11818  0012C4  E101 D74E          	bz	l13970
 11819  0012C8  0A01               	xorlw	1	; case 31
 11820  0012CA  E101 D773          	bz	l13994
 11821  0012CE  0A3F               	xorlw	63	; case 32
 11822  0012D0  E099               	bz	l14018
 11823  0012D2  0A01               	xorlw	1	; case 33
 11824  0012D4  E0BD               	bz	l14042
 11825  0012D6  D114               	goto	l14160
 11826  0012D8                     l14070:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 2218: else if ( ( reg >= 34 ) &&
 11830                           ;main.c: 2219: ( reg <= 45 ) ) {
 11831  0012D8  0E21               	movlw	33
 11832  0012DA  65DC               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11833  0012DC  D111               	goto	l14160
 11834                           
 11835                           ; BSR set to: 0
 11836  0012DE  0E2E               	movlw	46
 11837  0012E0  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11838  0012E2  D10E               	goto	l14160
 11839  0012E4  EFAB  F004         	goto	L35
 11840  0012E8                     l14080:
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;main.c: 2227: else if ( 1 == vscp_page_select ) {
 11844  0012E8  0452               	decf	_vscp_page_select,w,c
 11845  0012EA  1053               	iorwf	_vscp_page_select+1,w,c
 11846  0012EC  E001 D0F3          	bnz	l14148
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;main.c: 2230: if ( (reg >= 0u ) &&
 11850                           ;main.c: 2231: (reg <= 19u ) ) {
 11851  0012F0  0E14               	movlw	20
 11852  0012F2  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11853  0012F4  D0BB               	goto	l14114
 11854                           
 11855                           ; BSR set to: 0
 11856                           ;main.c: 2234: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11857  0012F6  ECB7  F024         	call	_Busy_eep	;wreg free
 11858  0012FA  0E71               	movlw	113
 11859  0012FC  D927               	call	PL2	;call to abstracted procedure
 11860  0012FE  EC73  F022         	call	_Write_b_eep	;wreg free
 11861                           
 11862                           ;main.c: 2235: rv = Read_b_eep(0x43 + 46 + reg);
 11863  001302  D934               	call	PL10	;call to abstracted procedure
 11864  001304  EC83  F024         	call	_Read_b_eep	;wreg free
 11865  001308  0100               	movlb	0	; () banked
 11866  00130A  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 11867                           
 11868                           ;main.c: 2239: switch ( reg ) {
 11869  00130C  D096               	goto	l14112
 11870  00130E                     l14090:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;main.c: 2242: channel_pulse_timer[ 0 ] =
 11874                           ;main.c: 2243: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11875                           ;main.c: 2245: Read_b_eep(0x43 + 46 + 1u);
 11876  00130E  6A09               	clrf	?_Read_b_eep+1,c
 11877  001310  0E72               	movlw	114
 11878  001312  6E08               	movwf	?_Read_b_eep,c
 11879  001314  EC83  F024         	call	_Read_b_eep	;wreg free
 11880  001318  0100               	movlb	0	; () banked
 11881  00131A  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11882  00131C  6A09               	clrf	?_Read_b_eep+1,c
 11883  00131E  0E71               	movlw	113
 11884  001320  6E08               	movwf	?_Read_b_eep,c
 11885  001322  EC83  F024         	call	_Read_b_eep	;wreg free
 11886  001326  D91B               	call	PL6	;call to abstracted procedure
 11887  001328  D945               	call	PL82	;call to abstracted procedure
 11888                           
 11889                           ;main.c: 2247: break;
 11890  00132A  D0EA               	goto	l14160
 11891  00132C                     l14092:
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;main.c: 2250: channel_pulse_timer[ 1 ] =
 11895                           ;main.c: 2251: Read_b_eep(0x43 + 46 + 2u) * 256 +
 11896                           ;main.c: 2253: Read_b_eep(0x43 + 46 + 3u);
 11897  00132C  6A09               	clrf	?_Read_b_eep+1,c
 11898  00132E  0E74               	movlw	116
 11899  001330  6E08               	movwf	?_Read_b_eep,c
 11900  001332  EC83  F024         	call	_Read_b_eep	;wreg free
 11901  001336  0100               	movlb	0	; () banked
 11902  001338  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11903  00133A  6A09               	clrf	?_Read_b_eep+1,c
 11904  00133C  0E73               	movlw	115
 11905  00133E  6E08               	movwf	?_Read_b_eep,c
 11906  001340  EC83  F024         	call	_Read_b_eep	;wreg free
 11907  001344  D90C               	call	PL6	;call to abstracted procedure
 11908  001346  D928               	call	PL72	;call to abstracted procedure
 11909                           
 11910                           ;main.c: 2255: break;
 11911  001348  D0DB               	goto	l14160
 11912  00134A                     l14094:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;main.c: 2258: channel_pulse_timer[ 2 ] =
 11916                           ;main.c: 2259: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11917                           ;main.c: 2261: Read_b_eep(0x43 + 46 + 5u);
 11918  00134A  6A09               	clrf	?_Read_b_eep+1,c
 11919  00134C  0E76               	movlw	118
 11920  00134E  6E08               	movwf	?_Read_b_eep,c
 11921  001350  EC83  F024         	call	_Read_b_eep	;wreg free
 11922  001354  0100               	movlb	0	; () banked
 11923  001356  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11924  001358  6A09               	clrf	?_Read_b_eep+1,c
 11925  00135A  0E75               	movlw	117
 11926  00135C  6E08               	movwf	?_Read_b_eep,c
 11927  00135E  EC83  F024         	call	_Read_b_eep	;wreg free
 11928  001362  D8FD               	call	PL6	;call to abstracted procedure
 11929  001364  D935               	call	PL86	;call to abstracted procedure
 11930                           
 11931                           ;main.c: 2263: break;
 11932  001366  D0CC               	goto	l14160
 11933  001368                     l14096:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;main.c: 2266: channel_pulse_timer[ 3 ] =
 11937                           ;main.c: 2267: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11938                           ;main.c: 2269: Read_b_eep(0x43 + 46 + 7u);
 11939  001368  6A09               	clrf	?_Read_b_eep+1,c
 11940  00136A  0E78               	movlw	120
 11941  00136C  6E08               	movwf	?_Read_b_eep,c
 11942  00136E  EC83  F024         	call	_Read_b_eep	;wreg free
 11943  001372  0100               	movlb	0	; () banked
 11944  001374  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11945  001376  6A09               	clrf	?_Read_b_eep+1,c
 11946  001378  0E77               	movlw	119
 11947  00137A  6E08               	movwf	?_Read_b_eep,c
 11948  00137C  EC83  F024         	call	_Read_b_eep	;wreg free
 11949  001380  D8EE               	call	PL6	;call to abstracted procedure
 11950  001382  D911               	call	PL74	;call to abstracted procedure
 11951                           
 11952                           ;main.c: 2271: break;
 11953  001384  D0BD               	goto	l14160
 11954  001386                     l14098:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;main.c: 2274: channel_pulse_timer[ 4 ] =
 11958                           ;main.c: 2275: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11959                           ;main.c: 2277: Read_b_eep(0x43 + 46 + 9u);
 11960  001386  6A09               	clrf	?_Read_b_eep+1,c
 11961  001388  0E7A               	movlw	122
 11962  00138A  6E08               	movwf	?_Read_b_eep,c
 11963  00138C  EC83  F024         	call	_Read_b_eep	;wreg free
 11964  001390  0100               	movlb	0	; () banked
 11965  001392  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11966  001394  6A09               	clrf	?_Read_b_eep+1,c
 11967  001396  0E79               	movlw	121
 11968  001398  6E08               	movwf	?_Read_b_eep,c
 11969  00139A  EC83  F024         	call	_Read_b_eep	;wreg free
 11970  00139E  D8DF               	call	PL6	;call to abstracted procedure
 11971  0013A0  D910               	call	PL84	;call to abstracted procedure
 11972                           
 11973                           ;main.c: 2279: break;
 11974  0013A2  D0AE               	goto	l14160
 11975  0013A4                     l14100:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;main.c: 2282: channel_pulse_timer[ 5 ] =
 11979                           ;main.c: 2283: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11980                           ;main.c: 2285: Read_b_eep(0x43 + 46 + 11u);
 11981  0013A4  6A09               	clrf	?_Read_b_eep+1,c
 11982  0013A6  0E7C               	movlw	124
 11983  0013A8  6E08               	movwf	?_Read_b_eep,c
 11984  0013AA  EC83  F024         	call	_Read_b_eep	;wreg free
 11985  0013AE  0100               	movlb	0	; () banked
 11986  0013B0  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 11987  0013B2  6A09               	clrf	?_Read_b_eep+1,c
 11988  0013B4  0E7B               	movlw	123
 11989  0013B6  6E08               	movwf	?_Read_b_eep,c
 11990  0013B8  EC83  F024         	call	_Read_b_eep	;wreg free
 11991  0013BC  D8D0               	call	PL6	;call to abstracted procedure
 11992  0013BE  D916               	call	PL90	;call to abstracted procedure
 11993                           
 11994                           ;main.c: 2287: break;
 11995  0013C0  D09F               	goto	l14160
 11996  0013C2                     l14102:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;main.c: 2290: channel_pulse_timer[ 6 ] =
 12000                           ;main.c: 2291: Read_b_eep(0x43 + 46 + 12u) * 256 +
 12001                           ;main.c: 2293: Read_b_eep(0x43 + 46 + 13u);
 12002  0013C2  6A09               	clrf	?_Read_b_eep+1,c
 12003  0013C4  0E7E               	movlw	126
 12004  0013C6  6E08               	movwf	?_Read_b_eep,c
 12005  0013C8  EC83  F024         	call	_Read_b_eep	;wreg free
 12006  0013CC  0100               	movlb	0	; () banked
 12007  0013CE  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 12008  0013D0  6A09               	clrf	?_Read_b_eep+1,c
 12009  0013D2  0E7D               	movlw	125
 12010  0013D4  6E08               	movwf	?_Read_b_eep,c
 12011  0013D6  EC83  F024         	call	_Read_b_eep	;wreg free
 12012  0013DA  D8C1               	call	PL6	;call to abstracted procedure
 12013  0013DC  D8D6               	call	PL70	;call to abstracted procedure
 12014                           
 12015                           ;main.c: 2295: break;
 12016  0013DE  D090               	goto	l14160
 12017  0013E0                     l14104:
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;main.c: 2298: channel_pulse_timer[ 7 ] =
 12021                           ;main.c: 2299: Read_b_eep(0x43 + 46 + 14u) * 256 +
 12022                           ;main.c: 2301: Read_b_eep(0x43 + 46 + 15u);
 12023  0013E0  6A09               	clrf	?_Read_b_eep+1,c
 12024  0013E2  0E80               	movlw	128
 12025  0013E4  6E08               	movwf	?_Read_b_eep,c
 12026  0013E6  EC83  F024         	call	_Read_b_eep	;wreg free
 12027  0013EA  0100               	movlb	0	; () banked
 12028  0013EC  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 12029  0013EE  6A09               	clrf	?_Read_b_eep+1,c
 12030  0013F0  0E7F               	movlw	127
 12031  0013F2  6E08               	movwf	?_Read_b_eep,c
 12032  0013F4  EC83  F024         	call	_Read_b_eep	;wreg free
 12033  0013F8  D8B2               	call	PL6	;call to abstracted procedure
 12034  0013FA  D8F1               	call	PL88	;call to abstracted procedure
 12035                           
 12036                           ;main.c: 2303: break;
 12037  0013FC  D081               	goto	l14160
 12038  0013FE                     l14106:
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;main.c: 2306: channel_pulse_timer[ 8 ] =
 12042                           ;main.c: 2307: Read_b_eep(0x43 + 46 + 16u) * 256 +
 12043                           ;main.c: 2309: Read_b_eep(0x43 + 46 + 17u);
 12044  0013FE  6A09               	clrf	?_Read_b_eep+1,c
 12045  001400  0E82               	movlw	130
 12046  001402  6E08               	movwf	?_Read_b_eep,c
 12047  001404  EC83  F024         	call	_Read_b_eep	;wreg free
 12048  001408  0100               	movlb	0	; () banked
 12049  00140A  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 12050  00140C  6A09               	clrf	?_Read_b_eep+1,c
 12051  00140E  0E81               	movlw	129
 12052  001410  6E08               	movwf	?_Read_b_eep,c
 12053  001412  EC83  F024         	call	_Read_b_eep	;wreg free
 12054  001416  D8A3               	call	PL6	;call to abstracted procedure
 12055  001418  D8F7               	call	PL96	;call to abstracted procedure
 12056                           
 12057                           ;main.c: 2311: break;
 12058  00141A  D072               	goto	l14160
 12059  00141C                     l14108:
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;main.c: 2314: channel_pulse_timer[ 9 ] =
 12063                           ;main.c: 2315: Read_b_eep(0x43 + 46 + 18u) * 256 +
 12064                           ;main.c: 2317: Read_b_eep(0x43 + 46 + 19u);
 12065  00141C  6A09               	clrf	?_Read_b_eep+1,c
 12066  00141E  0E84               	movlw	132
 12067  001420  6E08               	movwf	?_Read_b_eep,c
 12068  001422  EC83  F024         	call	_Read_b_eep	;wreg free
 12069  001426  0100               	movlb	0	; () banked
 12070  001428  6FD1               	movwf	??_vscp_writeAppReg& (0+255),b
 12071  00142A  6A09               	clrf	?_Read_b_eep+1,c
 12072  00142C  0E83               	movlw	131
 12073  00142E  6E08               	movwf	?_Read_b_eep,c
 12074  001430  EC83  F024         	call	_Read_b_eep	;wreg free
 12075  001434  D894               	call	PL6	;call to abstracted procedure
 12076  001436  D8E1               	call	PL94	;call to abstracted procedure
 12077                           
 12078                           ;main.c: 2319: break;
 12079  001438  D063               	goto	l14160
 12080  00143A                     l14112:
 12081                           
 12082                           ; BSR set to: 0
 12083  00143A  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12084                           
 12085                           ; Switch size 1, requested type "space"
 12086                           ; Number of cases is 10, Range of values is 1 to 19
 12087                           ; switch strategies available:
 12088                           ; Name         Instructions Cycles
 12089                           ; simple_byte           31    16 (average)
 12090                           ;	Chosen strategy is simple_byte
 12091  00143C  0A01               	xorlw	1	; case 1
 12092  00143E  E101 D766          	bz	l14090
 12093  001442  0A02               	xorlw	2	; case 3
 12094  001444  E101 D772          	bz	l14092
 12095  001448  0A06               	xorlw	6	; case 5
 12096  00144A  E101 D77E          	bz	l14094
 12097  00144E  0A02               	xorlw	2	; case 7
 12098  001450  E08B               	bz	l14096
 12099  001452  0A0E               	xorlw	14	; case 9
 12100  001454  E098               	bz	l14098
 12101  001456  0A02               	xorlw	2	; case 11
 12102  001458  E0A5               	bz	l14100
 12103  00145A  0A06               	xorlw	6	; case 13
 12104  00145C  E0B2               	bz	l14102
 12105  00145E  0A02               	xorlw	2	; case 15
 12106  001460  E0BF               	bz	l14104
 12107  001462  0A1E               	xorlw	30	; case 17
 12108  001464  E0CC               	bz	l14106
 12109  001466  0A02               	xorlw	2	; case 19
 12110  001468  E0D9               	bz	l14108
 12111  00146A  D04A               	goto	l14160
 12112  00146C                     l14114:
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;main.c: 2327: else if ( ( reg >= 20u ) &&
 12116                           ;main.c: 2328: ( reg <= 39u ) ) {
 12117  00146C  0E13               	movlw	19
 12118  00146E  65DC               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 12119  001470  D047               	goto	l14160
 12120                           
 12121                           ; BSR set to: 0
 12122  001472  0E28               	movlw	40
 12123  001474  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12124  001476  D044               	goto	l14160
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;main.c: 2331: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 12128  001478  ECB7  F024         	call	_Busy_eep	;wreg free
 12129  00147C  0E71               	movlw	113
 12130  00147E  D866               	call	PL2	;call to abstracted procedure
 12131  001480  EC73  F022         	call	_Write_b_eep	;wreg free
 12132                           
 12133                           ;main.c: 2332: rv = Read_b_eep(0x43 + 46 + reg);
 12134  001484  D873               	call	PL10	;call to abstracted procedure
 12135  001486  EC83  F024         	call	_Read_b_eep	;wreg free
 12136  00148A  0100               	movlb	0	; () banked
 12137  00148C  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 12138                           
 12139                           ; BSR set to: 0
 12140                           
 12141                           ;main.c: 2334: switch ( reg ) {
 12142  00148E  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12143                           
 12144                           ; Switch size 1, requested type "space"
 12145                           ; Number of cases is 10, Range of values is 21 to 39
 12146                           ; switch strategies available:
 12147                           ; Name         Instructions Cycles
 12148                           ; simple_byte           31    16 (average)
 12149                           ;	Chosen strategy is simple_byte
 12150  001490  0A15               	xorlw	21	; case 21
 12151  001492  E102 EFA4  F005    	bz	l13628
 12152  001498  0A02               	xorlw	2	; case 23
 12153  00149A  E102 EFDB  F005    	bz	l13648
 12154  0014A0  0A0E               	xorlw	14	; case 25
 12155  0014A2  E102 EF06  F006    	bz	l13668
 12156  0014A8  0A02               	xorlw	2	; case 27
 12157  0014AA  E102 EF3B  F006    	bz	l13688
 12158  0014B0  0A06               	xorlw	6	; case 29
 12159  0014B2  E101 D415          	bz	l13708
 12160  0014B6  0A02               	xorlw	2	; case 31
 12161  0014B8  E101 D444          	bz	l13728
 12162  0014BC  0A3E               	xorlw	62	; case 33
 12163  0014BE  E101 D473          	bz	l13748
 12164  0014C2  0A02               	xorlw	2	; case 35
 12165  0014C4  E101 D4A2          	bz	l13768
 12166  0014C8  0A06               	xorlw	6	; case 37
 12167  0014CA  E101 D4D1          	bz	l13788
 12168  0014CE  0A02               	xorlw	2	; case 39
 12169  0014D0  E101 D500          	bz	l13808
 12170  0014D4  D015               	goto	l14160
 12171  0014D6                     l14148:
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 2425: else if ( 2 == vscp_page_select ) {
 12175  0014D6  5052               	movf	_vscp_page_select,w,c
 12176  0014D8  0A02               	xorlw	2
 12177  0014DA  1053               	iorwf	_vscp_page_select+1,w,c
 12178  0014DC  E111               	bnz	l14160
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;main.c: 2427: if ( reg < (0 + 8 * 8) ) {
 12182  0014DE  0E40               	movlw	64
 12183  0014E0  61DC               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12184  0014E2  D00E               	goto	l14160
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;main.c: 2428: (Busy_eep(), Write_b_eep(0x43 + 0 + 46 + 40u + reg,val));
 12188  0014E4  ECB7  F024         	call	_Busy_eep	;wreg free
 12189  0014E8  0E99               	movlw	153
 12190  0014EA  D830               	call	PL2	;call to abstracted procedure
 12191  0014EC  EC73  F022         	call	_Write_b_eep	;wreg free
 12192                           
 12193                           ;main.c: 2433: calculateSetFilterMask();
 12194  0014F0  EC54  F013         	call	_calculateSetFilterMask	;wreg free
 12195                           
 12196                           ;main.c: 2434: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 12197  0014F4  0E99               	movlw	153
 12198  0014F6  D842               	call	PL12	;call to abstracted procedure
 12199  0014F8  EC83  F024         	call	_Read_b_eep	;wreg free
 12200  0014FC                     L32:
 12201  0014FC  0100               	movlb	0	; () banked
 12202  0014FE                     L33:
 12203  0014FE  6FDA               	movwf	vscp_writeAppReg@rv& (0+255),b
 12204  001500                     l14160:
 12205                           
 12206                           ;main.c: 2439: }
 12207                           ;main.c: 2441: }
 12208                           ;main.c: 2447: if ( bInfoEvent ) {
 12209  001500  0100               	movlb	0	; () banked
 12210  001502  51D9               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
 12211  001504  E021               	bz	l14172
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;main.c: 2449: unsigned char val;
 12215                           ;main.c: 2450: val = Read_b_eep(0x43 + 14 + ( reg - 14 ));
 12216  001506  0E43               	movlw	67
 12217  001508  25DC               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12218  00150A  6E08               	movwf	?_Read_b_eep,c
 12219  00150C  6A09               	clrf	?_Read_b_eep+1,c
 12220  00150E  0E00               	movlw	0
 12221  001510  2209               	addwfc	?_Read_b_eep+1,f,c
 12222  001512  EC83  F024         	call	_Read_b_eep	;wreg free
 12223  001516  0100               	movlb	0	; () banked
 12224  001518  6FD8               	movwf	vscp_writeAppReg@val_1273& (0+255),b
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;main.c: 2454: if ( bOn ) {
 12228  00151A  51DB               	movf	vscp_writeAppReg@bOn& (0+255),w,b
 12229  00151C  E00B               	bz	l852
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;main.c: 2456: if ( val & 0x08 ) {
 12233  00151E  A7D8               	btfss	vscp_writeAppReg@val_1273& (0+255),3,b
 12234  001520  D013               	goto	l14172
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;main.c: 2457: SendInformationEvent( reg - 14,
 12238                           ;main.c: 2458: 20,
 12239                           ;main.c: 2459: 3 );
 12240  001522  0E14               	movlw	20
 12241  001524  6FCF               	movwf	?_SendInformationEvent& (0+255),b
 12242  001526  0E03               	movlw	3
 12243  001528  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12244  00152A  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12245  00152C  0FF2               	addlw	242
 12246  00152E  ECC0  F021         	call	_SendInformationEvent
 12247  001532  D00A               	goto	l14172
 12248  001534                     l852:
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;main.c: 2463: else {
 12252                           ;main.c: 2465: if ( val & 0x10 ) {
 12253  001534  A9D8               	btfss	vscp_writeAppReg@val_1273& (0+255),4,b
 12254  001536  D008               	goto	l14172
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;main.c: 2466: SendInformationEvent( reg - 14,
 12258                           ;main.c: 2467: 20,
 12259                           ;main.c: 2468: 4 );
 12260  001538  0E14               	movlw	20
 12261  00153A  6FCF               	movwf	?_SendInformationEvent& (0+255),b
 12262  00153C  0E04               	movlw	4
 12263  00153E  6FD0               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12264  001540  51DC               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12265  001542  0FF2               	addlw	242
 12266  001544  ECC0  F021         	call	_SendInformationEvent
 12267  001548                     l14172:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;main.c: 2469: }
 12271                           ;main.c: 2471: }
 12272                           ;main.c: 2472: }
 12273                           ;main.c: 2474: return rv;
 12274  001548  51DA               	movf	vscp_writeAppReg@rv& (0+255),w,b
 12275                           
 12276                           ; BSR set to: 0
 12277  00154A  0012               	return	
 12278  00154C                     __end_of_vscp_writeAppReg:
 12279                           	opt stack 0
 12280  00154C                     PL2:
 12281                           	opt stack 20
 12282  00154C  0100               	movlb	0	; () banked
 12283  00154E  25DC               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12284  001550  6E08               	movwf	?_Write_b_eep,c
 12285  001552  6A09               	clrf	?_Write_b_eep+1,c
 12286  001554  0E00               	movlw	0
 12287  001556  2209               	addwfc	?_Write_b_eep+1,f,c
 12288  001558  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 12289  00155C  0C00               	retlw	0
 12290  00155E                     __end_ofPL2:
 12291                           	opt stack 0
 12292  00155E                     PL6:
 12293                           	opt stack 20
 12294  00155E  0100               	movlb	0	; () banked
 12295  001560  6FD3               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 12296  001562  6BD2               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 12297  001564  51D1               	movf	??_vscp_writeAppReg& (0+255),w,b
 12298  001566  25D2               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 12299  001568  0101               	movlb	1	; () banked
 12300  00156A  0012               	return	
 12301  00156C                     __end_ofPL6:
 12302                           	opt stack 0
 12303  00156C                     PL10:
 12304                           	opt stack 20
 12305  00156C  0E71               	movlw	113
 12306  00156E  0100               	movlb	0	; () banked
 12307  001570  25DC               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12308  001572  6E08               	movwf	?_Read_b_eep,c
 12309  001574  6A09               	clrf	?_Read_b_eep+1,c
 12310  001576  0E00               	movlw	0
 12311  001578  2209               	addwfc	?_Read_b_eep+1,f,c
 12312  00157A  0C00               	retlw	0
 12313  00157C                     __end_ofPL10:
 12314                           	opt stack 0
 12315  00157C                     PL12:
 12316                           	opt stack 20
 12317  00157C  0100               	movlb	0	; () banked
 12318  00157E  25DC               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12319  001580  6E08               	movwf	?_Read_b_eep,c
 12320  001582  6A09               	clrf	?_Read_b_eep+1,c
 12321  001584  0E00               	movlw	0
 12322  001586  2209               	addwfc	?_Read_b_eep+1,f,c
 12323  001588  0C00               	retlw	0
 12324  00158A                     __end_ofPL12:
 12325                           	opt stack 0
 12326  00158A                     PL70:
 12327                           	opt stack 20
 12328  00158A  6F0C               	movwf	(_channel_pulse_timer+12)& (0+255),b
 12329  00158C  0100               	movlb	0	; () banked
 12330  00158E  0E00               	movlw	0
 12331  001590  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12332  001592  0101               	movlb	1	; () banked
 12333  001594  6F0D               	movwf	(_channel_pulse_timer+13)& (0+255),b
 12334  001596  0012               	return	
 12335  001598                     __end_ofPL70:
 12336                           	opt stack 0
 12337  001598                     PL72:
 12338                           	opt stack 20
 12339  001598  6F02               	movwf	(_channel_pulse_timer+2)& (0+255),b
 12340  00159A  0100               	movlb	0	; () banked
 12341  00159C  0E00               	movlw	0
 12342  00159E  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12343  0015A0  0101               	movlb	1	; () banked
 12344  0015A2  6F03               	movwf	(_channel_pulse_timer+3)& (0+255),b
 12345  0015A4  0012               	return	
 12346  0015A6                     __end_ofPL72:
 12347                           	opt stack 0
 12348  0015A6                     PL74:
 12349                           	opt stack 20
 12350  0015A6  6F06               	movwf	(_channel_pulse_timer+6)& (0+255),b
 12351  0015A8  0100               	movlb	0	; () banked
 12352  0015AA  0E00               	movlw	0
 12353  0015AC  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12354  0015AE  0101               	movlb	1	; () banked
 12355  0015B0  6F07               	movwf	(_channel_pulse_timer+7)& (0+255),b
 12356  0015B2  0012               	return	
 12357  0015B4                     __end_ofPL74:
 12358                           	opt stack 0
 12359  0015B4                     PL82:
 12360                           	opt stack 20
 12361  0015B4  6F00               	movwf	_channel_pulse_timer& (0+255),b
 12362  0015B6  0100               	movlb	0	; () banked
 12363  0015B8  0E00               	movlw	0
 12364  0015BA  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12365  0015BC  0101               	movlb	1	; () banked
 12366  0015BE  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
 12367  0015C0  0012               	return	
 12368  0015C2                     __end_ofPL82:
 12369                           	opt stack 0
 12370  0015C2                     PL84:
 12371                           	opt stack 20
 12372  0015C2  6F08               	movwf	(_channel_pulse_timer+8)& (0+255),b
 12373  0015C4  0100               	movlb	0	; () banked
 12374  0015C6  0E00               	movlw	0
 12375  0015C8  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12376  0015CA  0101               	movlb	1	; () banked
 12377  0015CC  6F09               	movwf	(_channel_pulse_timer+9)& (0+255),b
 12378  0015CE  0012               	return	
 12379  0015D0                     __end_ofPL84:
 12380                           	opt stack 0
 12381  0015D0                     PL86:
 12382                           	opt stack 20
 12383  0015D0  6F04               	movwf	(_channel_pulse_timer+4)& (0+255),b
 12384  0015D2  0100               	movlb	0	; () banked
 12385  0015D4  0E00               	movlw	0
 12386  0015D6  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12387  0015D8  0101               	movlb	1	; () banked
 12388  0015DA  6F05               	movwf	(_channel_pulse_timer+5)& (0+255),b
 12389  0015DC  0012               	return	
 12390  0015DE                     __end_ofPL86:
 12391                           	opt stack 0
 12392  0015DE                     PL88:
 12393                           	opt stack 20
 12394  0015DE  6F0E               	movwf	(_channel_pulse_timer+14)& (0+255),b
 12395  0015E0  0100               	movlb	0	; () banked
 12396  0015E2  0E00               	movlw	0
 12397  0015E4  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12398  0015E6  0101               	movlb	1	; () banked
 12399  0015E8  6F0F               	movwf	(_channel_pulse_timer+15)& (0+255),b
 12400  0015EA  0012               	return	
 12401  0015EC                     __end_ofPL88:
 12402                           	opt stack 0
 12403  0015EC                     PL90:
 12404                           	opt stack 20
 12405  0015EC  6F0A               	movwf	(_channel_pulse_timer+10)& (0+255),b
 12406  0015EE  0100               	movlb	0	; () banked
 12407  0015F0  0E00               	movlw	0
 12408  0015F2  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12409  0015F4  0101               	movlb	1	; () banked
 12410  0015F6  6F0B               	movwf	(_channel_pulse_timer+11)& (0+255),b
 12411  0015F8  0012               	return	
 12412  0015FA                     __end_ofPL90:
 12413                           	opt stack 0
 12414  0015FA                     PL94:
 12415                           	opt stack 20
 12416  0015FA  6F12               	movwf	(_channel_pulse_timer+18)& (0+255),b
 12417  0015FC  0100               	movlb	0	; () banked
 12418  0015FE  0E00               	movlw	0
 12419  001600  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12420  001602  0101               	movlb	1	; () banked
 12421  001604  6F13               	movwf	(_channel_pulse_timer+19)& (0+255),b
 12422  001606  0012               	return	
 12423  001608                     __end_ofPL94:
 12424                           	opt stack 0
 12425  001608                     PL96:
 12426                           	opt stack 20
 12427  001608  6F10               	movwf	(_channel_pulse_timer+16)& (0+255),b
 12428  00160A  0100               	movlb	0	; () banked
 12429  00160C  0E00               	movlw	0
 12430  00160E  21D3               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12431  001610  0101               	movlb	1	; () banked
 12432  001612  6F11               	movwf	(_channel_pulse_timer+17)& (0+255),b
 12433  001614  0012               	return	
 12434  001616                     __end_ofPL96:
 12435                           	opt stack 0
 12436                           tblptru	equ	0xFF8
 12437                           tblptrh	equ	0xFF7
 12438                           tblptrl	equ	0xFF6
 12439                           tablat	equ	0xFF5
 12440                           prodh	equ	0xFF4
 12441                           prodl	equ	0xFF3
 12442                           intcon	equ	0xFF2
 12443                           intcon2	equ	0xFF1
 12444                           postinc0	equ	0xFEE
 12445                           wreg	equ	0xFE8
 12446                           indf1	equ	0xFE7
 12447                           fsr1h	equ	0xFE2
 12448                           fsr1l	equ	0xFE1
 12449                           indf2	equ	0xFDF
 12450                           postinc2	equ	0xFDE
 12451                           postdec2	equ	0xFDD
 12452                           plusw2	equ	0xFDB
 12453                           fsr2h	equ	0xFDA
 12454                           fsr2l	equ	0xFD9
 12455                           status	equ	0xFD8
 12456                           
 12457 ;; *************** function _calculateSetFilterMask *****************
 12458 ;; Defined at:
 12459 ;;		line 3619 in file "../main.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  rowfilter       4   61[COMRAM] unsigned long 
 12464 ;;  filter          4   57[COMRAM] unsigned long 
 12465 ;;  mask            4   53[COMRAM] unsigned long 
 12466 ;;  rowmask         4   48[COMRAM] unsigned long 
 12467 ;;  i               1   66[COMRAM] unsigned char 
 12468 ;;  j               1   65[COMRAM] unsigned char 
 12469 ;;  lastOID         1   52[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;		None               void
 12472 ;; Registers used:
 12473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12479 ;;      Params:         0       0       0       0       0       0       0
 12480 ;;      Locals:        19       0       0       0       0       0       0
 12481 ;;      Temps:         31       0       0       0       0       0       0
 12482 ;;      Totals:        50       0       0       0       0       0       0
 12483 ;;Total ram usage:       50 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    3
 12486 ;; This function calls:
 12487 ;;		_ECANSetOperationMode
 12488 ;;		__CANIDToRegs
 12489 ;;		_Read_b_eep
 12490 ;; This function is called by:
 12491 ;;		_vscp_writeAppReg
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text28
 12496  0026A8                     __ptext28:
 12497                           	opt stack 0
 12498  0026A8                     _calculateSetFilterMask:
 12499                           	opt stack 23
 12500                           
 12501                           ;main.c: 3620: uint8_t i,j;
 12502                           ;main.c: 3621: uint8_t lastOID;
 12503                           ;main.c: 3622: uint32_t rowmask;
 12504                           ;main.c: 3623: uint32_t rowfilter;
 12505                           ;main.c: 3626: uint32_t mask = 0xffffffff;
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;incstack = 0
 12509                           ;incstack = 0
 12510  0026A8  6836               	setf	calculateSetFilterMask@mask,c
 12511  0026AA  6837               	setf	calculateSetFilterMask@mask+1,c
 12512  0026AC  6838               	setf	calculateSetFilterMask@mask+2,c
 12513  0026AE  6839               	setf	calculateSetFilterMask@mask+3,c
 12514                           
 12515                           ;main.c: 3627: uint32_t filter = 0;
 12516  0026B0  6A3A               	clrf	calculateSetFilterMask@filter,c
 12517  0026B2  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 12518  0026B4  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 12519  0026B6  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 12520                           
 12521                           ;main.c: 3630: for ( i=0; i < 8; i++ ) {
 12522  0026B8  6A43               	clrf	calculateSetFilterMask@i,c
 12523  0026BA                     l14182:
 12524                           
 12525                           ;main.c: 3633: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 12526  0026BA  5043               	movf	calculateSetFilterMask@i,w,c
 12527  0026BC  D972               	call	PL22	;call to abstracted procedure
 12528  0026BE  0E44               	movlw	68
 12529  0026C0  2412               	addwf	??_calculateSetFilterMask,w,c
 12530  0026C2  6E08               	movwf	?_Read_b_eep,c
 12531  0026C4  0E00               	movlw	0
 12532  0026C6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12533  0026C8  6E09               	movwf	?_Read_b_eep+1,c
 12534  0026CA  EC83  F024         	call	_Read_b_eep	;wreg free
 12535  0026CE  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12536  0026D0  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 12537  0026D2  D11A               	goto	l14226
 12538                           
 12539                           ;main.c: 3642: rowmask =
 12540                           ;main.c: 3644: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 12541                           ;main.c: 3646: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 12542                           ;main.c: 3648: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 12543                           ;main.c: 3650: 0xff;
 12544  0026D4  5043               	movf	calculateSetFilterMask@i,w,c
 12545  0026D6  D965               	call	PL22	;call to abstracted procedure
 12546  0026D8  0E47               	movlw	71
 12547  0026DA  2412               	addwf	??_calculateSetFilterMask,w,c
 12548  0026DC  6E08               	movwf	?_Read_b_eep,c
 12549  0026DE  0E00               	movlw	0
 12550  0026E0  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12551  0026E2  6E09               	movwf	?_Read_b_eep+1,c
 12552  0026E4  EC83  F024         	call	_Read_b_eep	;wreg free
 12553  0026E8  D968               	call	PL24	;call to abstracted procedure
 12554  0026EA  0E45               	movlw	69
 12555  0026EC  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12556  0026EE  6E08               	movwf	?_Read_b_eep,c
 12557  0026F0  0E00               	movlw	0
 12558  0026F2  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12559  0026F4  6E09               	movwf	?_Read_b_eep+1,c
 12560  0026F6  EC83  F024         	call	_Read_b_eep	;wreg free
 12561  0026FA  D934               	call	PL20	;call to abstracted procedure
 12562  0026FC  EC83  F024         	call	_Read_b_eep	;wreg free
 12563  002700  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12564  002702  0E02               	movlw	2
 12565  002704  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12566  002706  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12567  00270A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12568  00270C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12569  00270E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12570  002710  0E17               	movlw	23
 12571  002712                     u18815:
 12572  002712  90D8               	bcf	status,0,c
 12573  002714  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 12574  002716  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 12575  002718  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 12576  00271A  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 12577  00271C  2EE8               	decfsz	wreg,f,c
 12578  00271E  D7F9               	goto	u18815
 12579  002720  501C               	movf	??_calculateSetFilterMask+10,w,c
 12580  002722  D965               	call	PL28	;call to abstracted procedure
 12581  002724  0EFF               	movlw	255
 12582  002726  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12583  002728  6E31               	movwf	calculateSetFilterMask@rowmask,c
 12584  00272A  502C               	movf	??_calculateSetFilterMask+26,w,c
 12585  00272C  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 12586  00272E  502D               	movf	??_calculateSetFilterMask+27,w,c
 12587  002730  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 12588  002732  502E               	movf	??_calculateSetFilterMask+28,w,c
 12589  002734  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 12590                           
 12591                           ;main.c: 3651: ;
 12592                           ;main.c: 3656: rowfilter =
 12593                           ;main.c: 3658: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 12594                           ;main.c: 3660: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 12595                           ;main.c: 3662: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 12596                           ;main.c: 3665: Read_b_eep(0x43 + 8*i);
 12597  002736  5043               	movf	calculateSetFilterMask@i,w,c
 12598  002738  D934               	call	PL22	;call to abstracted procedure
 12599  00273A  0E48               	movlw	72
 12600  00273C  2412               	addwf	??_calculateSetFilterMask,w,c
 12601  00273E  6E08               	movwf	?_Read_b_eep,c
 12602  002740  0E00               	movlw	0
 12603  002742  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12604  002744  6E09               	movwf	?_Read_b_eep+1,c
 12605  002746  EC83  F024         	call	_Read_b_eep	;wreg free
 12606  00274A  D937               	call	PL24	;call to abstracted procedure
 12607  00274C  0E46               	movlw	70
 12608  00274E  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12609  002750  6E08               	movwf	?_Read_b_eep,c
 12610  002752  0E00               	movlw	0
 12611  002754  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12612  002756  6E09               	movwf	?_Read_b_eep+1,c
 12613  002758  EC83  F024         	call	_Read_b_eep	;wreg free
 12614  00275C  D903               	call	PL20	;call to abstracted procedure
 12615  00275E  EC83  F024         	call	_Read_b_eep	;wreg free
 12616  002762  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12617  002764  0E01               	movlw	1
 12618  002766  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12619  002768  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12620  00276C  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12621  00276E  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12622  002770  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12623  002772  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 12624  002776  6A25               	clrf	??_calculateSetFilterMask+19,c
 12625  002778  6A24               	clrf	??_calculateSetFilterMask+18,c
 12626  00277A  6A23               	clrf	??_calculateSetFilterMask+17,c
 12627  00277C  501C               	movf	??_calculateSetFilterMask+10,w,c
 12628  00277E  D937               	call	PL28	;call to abstracted procedure
 12629  002780  5043               	movf	calculateSetFilterMask@i,w,c
 12630  002782  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 12631  002784  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 12632  002786  90D8               	bcf	status,0,c
 12633  002788  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12634  00278A  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12635  00278C  90D8               	bcf	status,0,c
 12636  00278E  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12637  002790  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12638  002792  90D8               	bcf	status,0,c
 12639  002794  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12640  002796  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12641  002798  0E43               	movlw	67
 12642  00279A  242F               	addwf	??_calculateSetFilterMask+29,w,c
 12643  00279C  6E08               	movwf	?_Read_b_eep,c
 12644  00279E  0E00               	movlw	0
 12645  0027A0  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 12646  0027A2  6E09               	movwf	?_Read_b_eep+1,c
 12647  0027A4  EC83  F024         	call	_Read_b_eep	;wreg free
 12648  0027A8  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12649  0027AA  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 12650  0027AC  502C               	movf	??_calculateSetFilterMask+26,w,c
 12651  0027AE  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 12652  0027B0  502D               	movf	??_calculateSetFilterMask+27,w,c
 12653  0027B2  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 12654  0027B4  502E               	movf	??_calculateSetFilterMask+28,w,c
 12655  0027B6  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 12656                           
 12657                           ;main.c: 3667: if ( 0 == i ) filter = rowfilter;
 12658  0027B8  6643               	tstfsz	calculateSetFilterMask@i,c
 12659  0027BA  D008               	goto	l14190
 12660  0027BC  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 12661  0027C0  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 12662  0027C4  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 12663  0027C8  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 12664  0027CC                     l14190:
 12665                           
 12666                           ;main.c: 3671: mask &= rowmask;
 12667  0027CC  5031               	movf	calculateSetFilterMask@rowmask,w,c
 12668  0027CE  1636               	andwf	calculateSetFilterMask@mask,f,c
 12669  0027D0  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 12670  0027D2  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 12671  0027D4  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 12672  0027D6  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 12673  0027D8  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 12674  0027DA  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 12675                           
 12676                           ;main.c: 3676: for ( j=0; j<32; j++ ) {
 12677  0027DC  6A42               	clrf	calculateSetFilterMask@j,c
 12678  0027DE                     l14198:
 12679                           
 12680                           ;main.c: 3678: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 12681  0027DE  5042               	movf	calculateSetFilterMask@j,w,c
 12682  0027E0  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 12683  0027E4  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 12684  0027E8  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 12685  0027EC  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 12686  0027F0  2AE8               	incf	wreg,f,c
 12687  0027F2  D005               	goto	u18830
 12688  0027F4                     u18835:
 12689  0027F4  90D8               	bcf	status,0,c
 12690  0027F6  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12691  0027F8  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 12692  0027FA  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 12693  0027FC  3212               	rrcf	??_calculateSetFilterMask,f,c
 12694  0027FE                     u18830:
 12695  0027FE  2EE8               	decfsz	wreg,f,c
 12696  002800  D7F9               	goto	u18835
 12697  002802  0E01               	movlw	1
 12698  002804  1612               	andwf	??_calculateSetFilterMask,f,c
 12699  002806  5042               	movf	calculateSetFilterMask@j,w,c
 12700  002808  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 12701  00280C  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 12702  002810  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 12703  002814  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 12704  002818  2AE8               	incf	wreg,f,c
 12705  00281A  D005               	goto	u18840
 12706  00281C                     u18845:
 12707  00281C  90D8               	bcf	status,0,c
 12708  00281E  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 12709  002820  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 12710  002822  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12711  002824  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 12712  002826                     u18840:
 12713  002826  2EE8               	decfsz	wreg,f,c
 12714  002828  D7F9               	goto	u18845
 12715  00282A  5016               	movf	??_calculateSetFilterMask+4,w,c
 12716  00282C  0B01               	andlw	1
 12717  00282E  1812               	xorwf	??_calculateSetFilterMask,w,c
 12718  002830  E010               	bz	l14202
 12719                           
 12720                           ;main.c: 3679: mask &= ~(1<<j);
 12721  002832  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 12722  002836  D8FD               	call	PL104	;call to abstracted procedure
 12723  002838  D001               	goto	u18864
 12724  00283A                     u18865:
 12725  00283A  D900               	call	PL108	;call to abstracted procedure
 12726  00283C                     u18864:
 12727  00283C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12728  00283E  D7FD               	goto	u18865
 12729  002840  1C13               	comf	??_calculateSetFilterMask+1,w,c
 12730  002842  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12731  002844  1C14               	comf	??_calculateSetFilterMask+2,w,c
 12732  002846  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 12733  002848  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12734  00284A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12735  00284C  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 12736  00284E  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 12737  002850  D8E6               	call	PL60	;call to abstracted procedure
 12738  002852                     l14202:
 12739  002852  2A42               	incf	calculateSetFilterMask@j,f,c
 12740  002854  0E1F               	movlw	31
 12741  002856  6442               	cpfsgt	calculateSetFilterMask@j,c
 12742  002858  D7C2               	goto	l14198
 12743                           
 12744                           ;main.c: 3680: }
 12745                           ;main.c: 3681: }
 12746                           ;main.c: 3687: filter &= rowfilter;
 12747  00285A  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 12748  00285C  163A               	andwf	calculateSetFilterMask@filter,f,c
 12749  00285E  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 12750  002860  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 12751  002862  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 12752  002864  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 12753  002866  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 12754  002868  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 12755                           
 12756                           ;main.c: 3695: }
 12757                           ;main.c: 3697: if (i) {
 12758                           
 12759                           ;main.c: 3690: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 12760  00286A  5043               	movf	calculateSetFilterMask@i,w,c
 12761  00286C  E042               	bz	l14222
 12762                           
 12763                           ;main.c: 3700: for (j = 0; j < 8; j++) {
 12764  00286E  6A42               	clrf	calculateSetFilterMask@j,c
 12765  002870                     l14216:
 12766                           
 12767                           ;main.c: 3701: if ((lastOID >> i & 1)
 12768                           ;main.c: 3702: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 12769  002870  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12770  002874  5043               	movf	calculateSetFilterMask@i,w,c
 12771  002876  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 12772  002878  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 12773  00287A  90D8               	bcf	status,0,c
 12774  00287C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12775  00287E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12776  002880  90D8               	bcf	status,0,c
 12777  002882  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12778  002884  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12779  002886  90D8               	bcf	status,0,c
 12780  002888  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12781  00288A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12782  00288C  0E43               	movlw	67
 12783  00288E  2413               	addwf	??_calculateSetFilterMask+1,w,c
 12784  002890  6E08               	movwf	?_Read_b_eep,c
 12785  002892  0E00               	movlw	0
 12786  002894  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 12787  002896  6E09               	movwf	?_Read_b_eep+1,c
 12788  002898  EC83  F024         	call	_Read_b_eep	;wreg free
 12789  00289C  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12790  00289E  2A12               	incf	??_calculateSetFilterMask,f,c
 12791  0028A0  D002               	goto	u18894
 12792  0028A2                     u18895:
 12793  0028A2  90D8               	bcf	status,0,c
 12794  0028A4  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12795  0028A6                     u18894:
 12796  0028A6  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12797  0028A8  D7FC               	goto	u18895
 12798  0028AA  0E01               	movlw	1
 12799  0028AC  1615               	andwf	??_calculateSetFilterMask+3,f,c
 12800  0028AE  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 12801  0028B2  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 12802  0028B6  2A16               	incf	??_calculateSetFilterMask+4,f,c
 12803  0028B8  D002               	goto	u18904
 12804  0028BA                     u18905:
 12805  0028BA  90D8               	bcf	status,0,c
 12806  0028BC  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12807  0028BE                     u18904:
 12808  0028BE  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 12809  0028C0  D7FC               	goto	u18905
 12810  0028C2  5017               	movf	??_calculateSetFilterMask+5,w,c
 12811  0028C4  0B01               	andlw	1
 12812  0028C6  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 12813  0028C8  E010               	bz	l14220
 12814                           
 12815                           ;main.c: 3703: mask &= (1 << i);
 12816  0028CA  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12817  0028CE  D8B1               	call	PL104	;call to abstracted procedure
 12818  0028D0  D001               	goto	u18924
 12819  0028D2                     u18925:
 12820  0028D2  D8B4               	call	PL108	;call to abstracted procedure
 12821  0028D4                     u18924:
 12822  0028D4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12823  0028D6  D7FD               	goto	u18925
 12824  0028D8  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 12825  0028DC  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 12826  0028E0  0E00               	movlw	0
 12827  0028E2  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12828  0028E4  0EFF               	movlw	255
 12829  0028E6  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 12830  0028E8  D89A               	call	PL60	;call to abstracted procedure
 12831  0028EA                     l14220:
 12832  0028EA  2A42               	incf	calculateSetFilterMask@j,f,c
 12833  0028EC  0E07               	movlw	7
 12834  0028EE  6442               	cpfsgt	calculateSetFilterMask@j,c
 12835  0028F0  D7BF               	goto	l14216
 12836  0028F2                     l14222:
 12837                           
 12838                           ;main.c: 3704: }
 12839                           ;main.c: 3705: }
 12840                           ;main.c: 3707: lastOID = Read_b_eep(0x43 + 8 * i);
 12841  0028F2  5043               	movf	calculateSetFilterMask@i,w,c
 12842  0028F4  D856               	call	PL22	;call to abstracted procedure
 12843  0028F6  0E43               	movlw	67
 12844  0028F8  2412               	addwf	??_calculateSetFilterMask,w,c
 12845  0028FA  6E08               	movwf	?_Read_b_eep,c
 12846  0028FC  0E00               	movlw	0
 12847  0028FE  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12848  002900  6E09               	movwf	?_Read_b_eep+1,c
 12849  002902  EC83  F024         	call	_Read_b_eep	;wreg free
 12850  002906  6E35               	movwf	calculateSetFilterMask@lastOID,c
 12851  002908                     l14226:
 12852  002908  2A43               	incf	calculateSetFilterMask@i,f,c
 12853  00290A  0E07               	movlw	7
 12854  00290C  6443               	cpfsgt	calculateSetFilterMask@i,c
 12855  00290E  D6D5               	goto	l14182
 12856                           
 12857                           ;main.c: 3713: }
 12858                           ;main.c: 3715: }
 12859                           ;main.c: 3716: }
 12860                           ;main.c: 3719: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12861  002910  0E80               	movlw	128
 12862  002912  EC2F  F024         	call	_ECANSetOperationMode
 12863                           
 12864                           ;main.c: 3722: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 12865  002916  010F               	movlb	15	; () banked
 12866  002918  0E0F               	movlw	15	;volatile
 12867  00291A  6E09               	movwf	?__CANIDToRegs+1,c
 12868  00291C  0E1C               	movlw	28	;volatile
 12869  00291E  6E08               	movwf	?__CANIDToRegs,c
 12870  002920  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 12871  002924  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 12872  002928  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 12873  00292C  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 12874  002930  0E01               	movlw	1
 12875  002932  6E0E               	movwf	?__CANIDToRegs+6,c
 12876  002934  EC63  F01D         	call	__CANIDToRegs	;wreg free
 12877                           
 12878                           ;main.c: 3725: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 12879  002938  010D               	movlb	13	; () banked
 12880  00293A  83D4               	bsf	212,1,b	;volatile
 12881                           
 12882                           ; BSR set to: 13
 12883  00293C  010F               	movlb	15	; () banked
 12884  00293E  0E0F               	movlw	15	;volatile
 12885  002940  6E09               	movwf	?__CANIDToRegs+1,c
 12886  002942  0E04               	movlw	4	;volatile
 12887  002944  6E08               	movwf	?__CANIDToRegs,c
 12888  002946  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 12889  00294A  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 12890  00294E  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 12891  002952  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 12892  002956  0E01               	movlw	1
 12893  002958  6E0E               	movwf	?__CANIDToRegs+6,c
 12894  00295A  EC63  F01D         	call	__CANIDToRegs	;wreg free
 12895                           
 12896                           ;main.c: 3728: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 12897  00295E  0E00               	movlw	0
 12898  002960  EF2F  F024         	goto	_ECANSetOperationMode
 12899  002964                     __end_of_calculateSetFilterMask:
 12900                           	opt stack 0
 12901  002964                     PL20:
 12902                           	opt stack 23
 12903  002964  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 12904  002966  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 12905  00296A  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 12906  00296C  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 12907  00296E  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 12908  002970  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 12909  002974  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 12910  002978  6A1D               	clrf	??_calculateSetFilterMask+11,c
 12911  00297A  6A1C               	clrf	??_calculateSetFilterMask+10,c
 12912  00297C  5043               	movf	calculateSetFilterMask@i,w,c
 12913  00297E  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 12914  002980  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 12915  002982  90D8               	bcf	status,0,c
 12916  002984  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12917  002986  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12918  002988  90D8               	bcf	status,0,c
 12919  00298A  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12920  00298C  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12921  00298E  90D8               	bcf	status,0,c
 12922  002990  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 12923  002992  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 12924  002994  0E44               	movlw	68
 12925  002996  2420               	addwf	??_calculateSetFilterMask+14,w,c
 12926  002998  6E08               	movwf	?_Read_b_eep,c
 12927  00299A  0E00               	movlw	0
 12928  00299C  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 12929  00299E  6E09               	movwf	?_Read_b_eep+1,c
 12930  0029A0  0012               	return	
 12931  0029A2                     __end_ofPL20:
 12932                           	opt stack 0
 12933  0029A2                     PL22:
 12934                           	opt stack 23
 12935  0029A2  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 12936  0029A4  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 12937  0029A6  90D8               	bcf	status,0,c
 12938  0029A8  3612               	rlcf	??_calculateSetFilterMask,f,c
 12939  0029AA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12940  0029AC  90D8               	bcf	status,0,c
 12941  0029AE  3612               	rlcf	??_calculateSetFilterMask,f,c
 12942  0029B0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12943  0029B2  90D8               	bcf	status,0,c
 12944  0029B4  3612               	rlcf	??_calculateSetFilterMask,f,c
 12945  0029B6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12946  0029B8  0012               	return	
 12947  0029BA                     __end_ofPL22:
 12948                           	opt stack 0
 12949  0029BA                     PL24:
 12950                           	opt stack 23
 12951  0029BA  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12952  0029BC  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 12953  0029C0  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 12954  0029C2  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12955  0029C4  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 12956  0029C6  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 12957  0029CA  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 12958  0029CE  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 12959  0029D2  6A15               	clrf	??_calculateSetFilterMask+3,c
 12960  0029D4  5043               	movf	calculateSetFilterMask@i,w,c
 12961  0029D6  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 12962  0029D8  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 12963  0029DA  90D8               	bcf	status,0,c
 12964  0029DC  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12965  0029DE  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12966  0029E0  90D8               	bcf	status,0,c
 12967  0029E2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12968  0029E4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12969  0029E6  90D8               	bcf	status,0,c
 12970  0029E8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 12971  0029EA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 12972  0029EC  0012               	return	
 12973  0029EE                     __end_ofPL24:
 12974                           	opt stack 0
 12975  0029EE                     PL28:
 12976                           	opt stack 23
 12977  0029EE  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 12978  0029F0  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 12979  0029F2  501D               	movf	??_calculateSetFilterMask+11,w,c
 12980  0029F4  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 12981  0029F6  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 12982  0029F8  501E               	movf	??_calculateSetFilterMask+12,w,c
 12983  0029FA  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 12984  0029FC  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 12985  0029FE  501F               	movf	??_calculateSetFilterMask+13,w,c
 12986  002A00  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 12987  002A02  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 12988  002A04  5015               	movf	??_calculateSetFilterMask+3,w,c
 12989  002A06  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 12990  002A08  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 12991  002A0A  5016               	movf	??_calculateSetFilterMask+4,w,c
 12992  002A0C  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 12993  002A0E  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 12994  002A10  5017               	movf	??_calculateSetFilterMask+5,w,c
 12995  002A12  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 12996  002A14  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 12997  002A16  5018               	movf	??_calculateSetFilterMask+6,w,c
 12998  002A18  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 12999  002A1A  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 13000  002A1C  0012               	return	
 13001  002A1E                     __end_ofPL28:
 13002                           	opt stack 0
 13003  002A1E                     PL60:
 13004                           	opt stack 23
 13005  002A1E  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 13006  002A20  5015               	movf	??_calculateSetFilterMask+3,w,c
 13007  002A22  1636               	andwf	calculateSetFilterMask@mask,f,c
 13008  002A24  5016               	movf	??_calculateSetFilterMask+4,w,c
 13009  002A26  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 13010  002A28  5017               	movf	??_calculateSetFilterMask+5,w,c
 13011  002A2A  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 13012  002A2C  5018               	movf	??_calculateSetFilterMask+6,w,c
 13013  002A2E  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 13014  002A30  0012               	return	
 13015  002A32                     __end_ofPL60:
 13016                           	opt stack 0
 13017  002A32                     PL104:
 13018                           	opt stack 23
 13019  002A32  0E01               	movlw	1
 13020  002A34  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 13021  002A36  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 13022  002A38  2A12               	incf	??_calculateSetFilterMask,f,c
 13023  002A3A  0012               	return	
 13024  002A3C                     __end_ofPL104:
 13025                           	opt stack 0
 13026  002A3C                     PL108:
 13027                           	opt stack 23
 13028  002A3C  90D8               	bcf	status,0,c
 13029  002A3E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13030  002A40  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 13031  002A42  0012               	return	
 13032  002A44                     __end_ofPL108:
 13033                           	opt stack 0
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           intcon2	equ	0xFF1
 13042                           postinc0	equ	0xFEE
 13043                           wreg	equ	0xFE8
 13044                           indf1	equ	0xFE7
 13045                           fsr1h	equ	0xFE2
 13046                           fsr1l	equ	0xFE1
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           postdec2	equ	0xFDD
 13050                           plusw2	equ	0xFDB
 13051                           fsr2h	equ	0xFDA
 13052                           fsr2l	equ	0xFD9
 13053                           status	equ	0xFD8
 13054                           
 13055 ;; *************** function _SendInformationEvent *****************
 13056 ;; Defined at:
 13057 ;;		line 2503 in file "../main.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  idx             1    wreg     unsigned char 
 13060 ;;  eventClass      1   20[BANK0 ] unsigned char 
 13061 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 13062 ;; Auto vars:     Size  Location     Type
 13063 ;;  idx             1   77[COMRAM] unsigned char 
 13064 ;;  data            3   74[COMRAM] unsigned char [3]
 13065 ;; Return value:  Size  Location     Type
 13066 ;;		None               void
 13067 ;; Registers used:
 13068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13069 ;; Tracked objects:
 13070 ;;		On entry : F/0
 13071 ;;		On exit  : F/0
 13072 ;;		Unchanged: 0/0
 13073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13074 ;;      Params:         0       2       0       0       0       0       0
 13075 ;;      Locals:         4       0       0       0       0       0       0
 13076 ;;      Temps:          0       0       0       0       0       0       0
 13077 ;;      Totals:         4       2       0       0       0       0       0
 13078 ;;Total ram usage:        6 bytes
 13079 ;; Hardware stack levels used:    1
 13080 ;; Hardware stack levels required when called:    6
 13081 ;; This function calls:
 13082 ;;		_Read_b_eep
 13083 ;;		_sendVSCPFrame
 13084 ;; This function is called by:
 13085 ;;		_main
 13086 ;;		_doApplicationOneSecondWork
 13087 ;;		_vscp_writeAppReg
 13088 ;;		_doActionOn
 13089 ;;		_doActionOff
 13090 ;;		_doActionPulseOn
 13091 ;;		_doActionPulseOff
 13092 ;;		_doActionToggle
 13093 ;;		_doActionStatus
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           	psect	text29
 13098  004380                     __ptext29:
 13099                           	opt stack 0
 13100  004380                     _SendInformationEvent:
 13101                           	opt stack 21
 13102                           
 13103                           ;incstack = 0
 13104                           ;incstack = 0
 13105                           ;SendInformationEvent@idx stored from wreg
 13106  004380  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;main.c: 2504: uint8_t data[3];
 13110                           ;main.c: 2506: data[ 0 ] = idx;
 13111  004384  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;main.c: 2507: data[ 1 ] = Read_b_eep(0x43 + 0);
 13115  004388  6A09               	clrf	?_Read_b_eep+1,c
 13116  00438A  0E43               	movlw	67
 13117  00438C  6E08               	movwf	?_Read_b_eep,c
 13118  00438E  EC83  F024         	call	_Read_b_eep	;wreg free
 13119  004392  6E4C               	movwf	SendInformationEvent@data+1,c
 13120                           
 13121                           ;main.c: 2508: data[ 2 ] = Read_b_eep(0x43 + 2 + idx);
 13122  004394  0E45               	movlw	69
 13123  004396  244E               	addwf	SendInformationEvent@idx,w,c
 13124  004398  6E08               	movwf	?_Read_b_eep,c
 13125  00439A  6A09               	clrf	?_Read_b_eep+1,c
 13126  00439C  0E00               	movlw	0
 13127  00439E  2209               	addwfc	?_Read_b_eep+1,f,c
 13128  0043A0  EC83  F024         	call	_Read_b_eep	;wreg free
 13129  0043A4  6E4D               	movwf	SendInformationEvent@data+2,c
 13130                           
 13131                           ;main.c: 2509: sendVSCPFrame( eventClass,
 13132                           ;main.c: 2510: eventTypeId,
 13133                           ;main.c: 2511: vscp_nickname,
 13134                           ;main.c: 2512: 0x03,
 13135                           ;main.c: 2513: 3,
 13136                           ;main.c: 2514: data );
 13137  0043A6  0100               	movlb	0	; () banked
 13138  0043A8  C0CF  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 13139  0043AC  6A40               	clrf	?_sendVSCPFrame+1,c
 13140  0043AE  C0D0  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 13141  0043B2  C07D  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13142  0043B6  0E03               	movlw	3
 13143  0043B8  6E43               	movwf	?_sendVSCPFrame+4,c
 13144  0043BA  6E44               	movwf	?_sendVSCPFrame+5,c
 13145  0043BC  0E4B               	movlw	low SendInformationEvent@data
 13146  0043BE  6E45               	movwf	?_sendVSCPFrame+6,c
 13147  0043C0  0E00               	movlw	high SendInformationEvent@data
 13148  0043C2  6E46               	movwf	?_sendVSCPFrame+7,c
 13149  0043C4  0E0F               	movlw	15
 13150  0043C6  6E46               	movwf	?_sendVSCPFrame+7,c
 13151  0043C8  0E5F               	movlw	__accesstop+-1
 13152  0043CA  6445               	cpfsgt	?_sendVSCPFrame+6,c
 13153  0043CC  6A46               	clrf	?_sendVSCPFrame+7,c
 13154  0043CE  EFA3  F020         	goto	_sendVSCPFrame	;wreg free
 13155  0043D2                     __end_of_SendInformationEvent:
 13156                           	opt stack 0
 13157                           tblptru	equ	0xFF8
 13158                           tblptrh	equ	0xFF7
 13159                           tblptrl	equ	0xFF6
 13160                           tablat	equ	0xFF5
 13161                           prodh	equ	0xFF4
 13162                           prodl	equ	0xFF3
 13163                           intcon	equ	0xFF2
 13164                           intcon2	equ	0xFF1
 13165                           postinc0	equ	0xFEE
 13166                           wreg	equ	0xFE8
 13167                           indf1	equ	0xFE7
 13168                           fsr1h	equ	0xFE2
 13169                           fsr1l	equ	0xFE1
 13170                           indf2	equ	0xFDF
 13171                           postinc2	equ	0xFDE
 13172                           postdec2	equ	0xFDD
 13173                           plusw2	equ	0xFDB
 13174                           fsr2h	equ	0xFDA
 13175                           fsr2l	equ	0xFD9
 13176                           status	equ	0xFD8
 13177                           
 13178 ;; *************** function _vscp_readRegister *****************
 13179 ;; Defined at:
 13180 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;  reg             1    wreg     unsigned char 
 13183 ;; Auto vars:     Size  Location     Type
 13184 ;;  reg             1   28[COMRAM] unsigned char 
 13185 ;; Return value:  Size  Location     Type
 13186 ;;                  1    wreg      unsigned char 
 13187 ;; Registers used:
 13188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13189 ;; Tracked objects:
 13190 ;;		On entry : F/0
 13191 ;;		On exit  : 0/0
 13192 ;;		Unchanged: 0/0
 13193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13194 ;;      Params:         0       0       0       0       0       0       0
 13195 ;;      Locals:         1       0       0       0       0       0       0
 13196 ;;      Temps:          0       0       0       0       0       0       0
 13197 ;;      Totals:         1       0       0       0       0       0       0
 13198 ;;Total ram usage:        1 bytes
 13199 ;; Hardware stack levels used:    1
 13200 ;; Hardware stack levels required when called:    5
 13201 ;; This function calls:
 13202 ;;		_vscp_readAppReg
 13203 ;;		_vscp_readStdReg
 13204 ;; This function is called by:
 13205 ;;		_vscp_handleProtocolEvent
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           	psect	text30
 13210  00482C                     __ptext30:
 13211                           	opt stack 0
 13212  00482C                     _vscp_readRegister:
 13213                           	opt stack 23
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;incstack = 0
 13217                           ;incstack = 0
 13218                           ;vscp_readRegister@reg stored from wreg
 13219  00482C  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 13220                           
 13221                           ; BSR set to: 0
 13222                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 13223  004830  0E7F               	movlw	127
 13224  004832  641D               	cpfsgt	vscp_readRegister@reg,c
 13225  004834  D004               	goto	l14670
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 13229  004836  501D               	movf	vscp_readRegister@reg,w,c
 13230  004838  EC79  F019         	call	_vscp_readStdReg
 13231  00483C  D003               	goto	l1361
 13232  00483E                     l14670:
 13233                           
 13234                           ; BSR set to: 0
 13235                           ;vscp_firmware.c: 565: else {
 13236                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 13237  00483E  501D               	movf	vscp_readRegister@reg,w,c
 13238  004840  ECA4  F018         	call	_vscp_readAppReg
 13239  004844                     l1361:
 13240  004844  0012               	return	
 13241  004846                     __end_of_vscp_readRegister:
 13242                           	opt stack 0
 13243                           tblptru	equ	0xFF8
 13244                           tblptrh	equ	0xFF7
 13245                           tblptrl	equ	0xFF6
 13246                           tablat	equ	0xFF5
 13247                           prodh	equ	0xFF4
 13248                           prodl	equ	0xFF3
 13249                           intcon	equ	0xFF2
 13250                           intcon2	equ	0xFF1
 13251                           postinc0	equ	0xFEE
 13252                           wreg	equ	0xFE8
 13253                           indf1	equ	0xFE7
 13254                           fsr1h	equ	0xFE2
 13255                           fsr1l	equ	0xFE1
 13256                           indf2	equ	0xFDF
 13257                           postinc2	equ	0xFDE
 13258                           postdec2	equ	0xFDD
 13259                           plusw2	equ	0xFDB
 13260                           fsr2h	equ	0xFDA
 13261                           fsr2l	equ	0xFD9
 13262                           status	equ	0xFD8
 13263                           
 13264 ;; *************** function _vscp_readStdReg *****************
 13265 ;; Defined at:
 13266 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  reg             1    wreg     unsigned char 
 13269 ;; Auto vars:     Size  Location     Type
 13270 ;;  reg             1   27[COMRAM] unsigned char 
 13271 ;;  code            4   20[COMRAM] unsigned long 
 13272 ;;  idx             1   25[COMRAM] unsigned char 
 13273 ;;  code            4   16[COMRAM] unsigned long 
 13274 ;;  idx             1   24[COMRAM] unsigned char 
 13275 ;;  rv              1   26[COMRAM] unsigned char 
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      unsigned char 
 13278 ;; Registers used:
 13279 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13280 ;; Tracked objects:
 13281 ;;		On entry : F/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13285 ;;      Params:         0       0       0       0       0       0       0
 13286 ;;      Locals:        12       0       0       0       0       0       0
 13287 ;;      Temps:          5       0       0       0       0       0       0
 13288 ;;      Totals:        17       0       0       0       0       0       0
 13289 ;;Total ram usage:       17 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    4
 13292 ;; This function calls:
 13293 ;;		_vscp_getMajorVersion
 13294 ;;		_vscp_getMinorVersion
 13295 ;;		_vscp_getSubMinorVersion
 13296 ;;		_vscp_getGUID
 13297 ;;		_vscp_getMDF_URL
 13298 ;;		_vscp_getUserID
 13299 ;;		_vscp_getManufacturerId
 13300 ;;		_vscp_getBootLoaderAlgorithm
 13301 ;;		_vscp_getBufferSize
 13302 ;;		_vscp_getFamilyCode
 13303 ;;		_vscp_getFamilyType
 13304 ;;		_vscp_getRegisterPagesUsed
 13305 ;; This function is called by:
 13306 ;;		_vscp_readRegister
 13307 ;;		_vscp_handleProtocolEvent
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           	psect	text31
 13312  0032F2                     __ptext31:
 13313                           	opt stack 0
 13314  0032F2                     _vscp_readStdReg:
 13315                           	opt stack 24
 13316                           
 13317                           ;incstack = 0
 13318                           ;incstack = 0
 13319                           ;vscp_readStdReg@reg stored from wreg
 13320  0032F2  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 13324  0032F6  6A1B               	clrf	vscp_readStdReg@rv,c
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 13328  0032F8  501C               	movf	vscp_readStdReg@reg,w,c
 13329  0032FA  0A80               	xorlw	128
 13330  0032FC  E104               	bnz	l14680
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 13334  0032FE  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13335                           
 13336                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 13337  003302  6A55               	clrf	_vscp_alarmstatus,c
 13338                           
 13339                           ;vscp_firmware.c: 584: }
 13340  003304  D0B3               	goto	l14768
 13341  003306                     l14680:
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 13345  003306  501C               	movf	vscp_readStdReg@reg,w,c
 13346  003308  0A81               	xorlw	129
 13347  00330A  E102               	bnz	l14684
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;vscp_firmware.c: 588: rv = 1;
 13351  00330C  0E01               	movlw	1
 13352  00330E  D075               	goto	L47
 13353  003310                     l14684:
 13354                           
 13355                           ; BSR set to: 0
 13356                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 13357  003310  501C               	movf	vscp_readStdReg@reg,w,c
 13358  003312  0A82               	xorlw	130
 13359  003314  E102               	bnz	l14688
 13360                           
 13361                           ; BSR set to: 0
 13362                           ;vscp_firmware.c: 594: rv = 5;
 13363  003316  0E05               	movlw	5
 13364  003318  D070               	goto	L47
 13365  00331A                     l14688:
 13366                           
 13367                           ; BSR set to: 0
 13368                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13369  00331A  501C               	movf	vscp_readStdReg@reg,w,c
 13370  00331C  0A83               	xorlw	131
 13371  00331E  E102               	bnz	l14692
 13372                           
 13373                           ; BSR set to: 0
 13374                           ;vscp_firmware.c: 600: rv = 0;
 13375  003320  6A1B               	clrf	vscp_readStdReg@rv,c
 13376                           
 13377                           ;vscp_firmware.c: 602: }
 13378  003322  D0A4               	goto	l14768
 13379  003324                     l14692:
 13380                           
 13381                           ; BSR set to: 0
 13382                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13383  003324  501C               	movf	vscp_readStdReg@reg,w,c
 13384  003326  0A94               	xorlw	148
 13385  003328  E103               	bnz	l14696
 13386                           
 13387                           ; BSR set to: 0
 13388                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13389  00332A  ECC2  F024         	call	_vscp_getMajorVersion	;wreg free
 13390  00332E  D065               	goto	L47
 13391  003330                     l14696:
 13392                           
 13393                           ; BSR set to: 0
 13394                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13395  003330  501C               	movf	vscp_readStdReg@reg,w,c
 13396  003332  0A95               	xorlw	149
 13397  003334  E103               	bnz	l14700
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13401  003336  ECC1  F024         	call	_vscp_getMinorVersion	;wreg free
 13402  00333A  D05F               	goto	L47
 13403  00333C                     l14700:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13407  00333C  501C               	movf	vscp_readStdReg@reg,w,c
 13408  00333E  0A96               	xorlw	150
 13409  003340  E103               	bnz	l14704
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13413  003342  ECC0  F024         	call	_vscp_getSubMinorVersion	;wreg free
 13414  003346  D059               	goto	L47
 13415  003348                     l14704:
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13419  003348  0E89               	movlw	137
 13420  00334A  601C               	cpfslt	vscp_readStdReg@reg,c
 13421  00334C  D005               	goto	l14708
 13422                           
 13423                           ; BSR set to: 0
 13424                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13425  00334E  501C               	movf	vscp_readStdReg@reg,w,c
 13426  003350  0F7C               	addlw	124
 13427  003352  EC66  F024         	call	_vscp_getUserID
 13428  003356  D051               	goto	L47
 13429  003358                     l14708:
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13433                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13434  003358  0E88               	movlw	136
 13435  00335A  641C               	cpfsgt	vscp_readStdReg@reg,c
 13436  00335C  D008               	goto	l14714
 13437                           
 13438                           ; BSR set to: 0
 13439  00335E  0E91               	movlw	145
 13440  003360  601C               	cpfslt	vscp_readStdReg@reg,c
 13441  003362  D005               	goto	l14714
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13445  003364  501C               	movf	vscp_readStdReg@reg,w,c
 13446  003366  0F77               	addlw	119
 13447  003368  EC5C  F024         	call	_vscp_getManufacturerId
 13448  00336C  D046               	goto	L47
 13449  00336E                     l14714:
 13450                           
 13451                           ; BSR set to: 0
 13452                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13453  00336E  501C               	movf	vscp_readStdReg@reg,w,c
 13454  003370  0A91               	xorlw	145
 13455  003372  E103               	bnz	l14718
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13459  003374  C07D  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 13460                           
 13461                           ;vscp_firmware.c: 639: }
 13462  003378  D079               	goto	l14768
 13463  00337A                     l14718:
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13467  00337A  501C               	movf	vscp_readStdReg@reg,w,c
 13468  00337C  0A93               	xorlw	147
 13469  00337E  E103               	bnz	l14722
 13470                           
 13471                           ; BSR set to: 0
 13472                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13473  003380  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 13474                           
 13475                           ;vscp_firmware.c: 645: }
 13476  003384  D073               	goto	l14768
 13477  003386                     l14722:
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13481  003386  501C               	movf	vscp_readStdReg@reg,w,c
 13482  003388  0A92               	xorlw	146
 13483  00338A  E102               	bnz	l14726
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13487  00338C  5053               	movf	_vscp_page_select+1,w,c
 13488  00338E  D035               	goto	L47
 13489  003390                     l14726:
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13493  003390  501C               	movf	vscp_readStdReg@reg,w,c
 13494  003392  0A97               	xorlw	151
 13495  003394  E103               	bnz	l14730
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13499  003396  ECBF  F024         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13500  00339A  D02F               	goto	L47
 13501  00339C                     l14730:
 13502                           
 13503                           ; BSR set to: 0
 13504                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13505  00339C  501C               	movf	vscp_readStdReg@reg,w,c
 13506  00339E  0A98               	xorlw	152
 13507  0033A0  E103               	bnz	l14734
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13511  0033A2  ECBE  F024         	call	_vscp_getBufferSize	;wreg free
 13512  0033A6  D029               	goto	L47
 13513  0033A8                     l14734:
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13517  0033A8  501C               	movf	vscp_readStdReg@reg,w,c
 13518  0033AA  0A99               	xorlw	153
 13519  0033AC  E103               	bnz	l14738
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13523  0033AE  ECBD  F024         	call	_vscp_getRegisterPagesUsed	;wreg free
 13524  0033B2  D023               	goto	L47
 13525  0033B4                     l14738:
 13526                           
 13527                           ; BSR set to: 0
 13528                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13529                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13530  0033B4  0E99               	movlw	153
 13531  0033B6  641C               	cpfsgt	vscp_readStdReg@reg,c
 13532  0033B8  D022               	goto	l14748
 13533                           
 13534                           ; BSR set to: 0
 13535  0033BA  0E9E               	movlw	158
 13536  0033BC  601C               	cpfslt	vscp_readStdReg@reg,c
 13537  0033BE  D01F               	goto	l14748
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13541  0033C0  ECA4  F024         	call	_vscp_getFamilyCode	;wreg free
 13542  0033C4  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13543  0033C8  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13544  0033CC  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13545  0033D0  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13549  0033D4  501C               	movf	vscp_readStdReg@reg,w,c
 13550  0033D6  0F66               	addlw	102
 13551  0033D8  6E19               	movwf	vscp_readStdReg@idx,c
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13555  0033DA  5019               	movf	vscp_readStdReg@idx,w,c
 13556  0033DC  D849               	call	PL64	;call to abstracted procedure
 13557  0033DE  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13558  0033E2  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13559  0033E6  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13560  0033EA  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13561  0033EE  2AE8               	incf	wreg,f,c
 13562  0033F0  D001               	goto	u19940
 13563  0033F2                     u19945:
 13564  0033F2  D848               	call	PL100	;call to abstracted procedure
 13565  0033F4                     u19940:
 13566  0033F4  2EE8               	decfsz	wreg,f,c
 13567  0033F6  D7FD               	goto	u19945
 13568  0033F8  D024               	goto	L48
 13569  0033FA                     L47:
 13570  0033FA  6E1B               	movwf	vscp_readStdReg@rv,c
 13571                           
 13572                           ;vscp_firmware.c: 671: }
 13573  0033FC  D037               	goto	l14768
 13574  0033FE                     l14748:
 13575                           
 13576                           ; BSR set to: 0
 13577                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13578                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13579  0033FE  0E9D               	movlw	157
 13580  003400  641C               	cpfsgt	vscp_readStdReg@reg,c
 13581  003402  D021               	goto	l14758
 13582                           
 13583                           ; BSR set to: 0
 13584  003404  0EA2               	movlw	162
 13585  003406  601C               	cpfslt	vscp_readStdReg@reg,c
 13586  003408  D01E               	goto	l14758
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13590  00340A  EC9F  F024         	call	_vscp_getFamilyType	;wreg free
 13591  00340E  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1486+3
 13592  003412  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1486+2
 13593  003416  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1486+1
 13594  00341A  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1486
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13598  00341E  501C               	movf	vscp_readStdReg@reg,w,c
 13599  003420  0F62               	addlw	98
 13600  003422  6E1A               	movwf	vscp_readStdReg@idx_1487,c
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13604  003424  501A               	movf	vscp_readStdReg@idx_1487,w,c
 13605  003426  D824               	call	PL64	;call to abstracted procedure
 13606  003428  C015  F00D         	movff	vscp_readStdReg@code_1486,??_vscp_readStdReg+1
 13607  00342C  C016  F00E         	movff	vscp_readStdReg@code_1486+1,??_vscp_readStdReg+2
 13608  003430  C017  F00F         	movff	vscp_readStdReg@code_1486+2,??_vscp_readStdReg+3
 13609  003434  C018  F010         	movff	vscp_readStdReg@code_1486+3,??_vscp_readStdReg+4
 13610  003438  2AE8               	incf	wreg,f,c
 13611  00343A  D001               	goto	u19970
 13612  00343C                     u19975:
 13613  00343C  D823               	call	PL100	;call to abstracted procedure
 13614  00343E                     u19970:
 13615  00343E  2EE8               	decfsz	wreg,f,c
 13616  003440  D7FD               	goto	u19975
 13617  003442                     L48:
 13618  003442  500D               	movf	??_vscp_readStdReg+1,w,c
 13619  003444  D7DA               	goto	L47
 13620  003446                     l14758:
 13621                           
 13622                           ; BSR set to: 0
 13623                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13624                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13625  003446  0ECF               	movlw	207
 13626  003448  641C               	cpfsgt	vscp_readStdReg@reg,c
 13627  00344A  D008               	goto	l14764
 13628                           
 13629                           ; BSR set to: 0
 13630  00344C  0EE0               	movlw	224
 13631  00344E  601C               	cpfslt	vscp_readStdReg@reg,c
 13632  003450  D005               	goto	l14764
 13633                           
 13634                           ; BSR set to: 0
 13635                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13636  003452  501C               	movf	vscp_readStdReg@reg,w,c
 13637  003454  0F30               	addlw	48
 13638  003456  EC70  F024         	call	_vscp_getGUID
 13639  00345A  D7CF               	goto	L47
 13640  00345C                     l14764:
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13644  00345C  0EDF               	movlw	223
 13645  00345E  641C               	cpfsgt	vscp_readStdReg@reg,c
 13646  003460  D005               	goto	l14768
 13647                           
 13648                           ; BSR set to: 0
 13649                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13650  003462  501C               	movf	vscp_readStdReg@reg,w,c
 13651  003464  0F20               	addlw	32
 13652  003466  EC23  F024         	call	_vscp_getMDF_URL
 13653  00346A  D7C7               	goto	L47
 13654  00346C                     l14768:
 13655                           
 13656                           ;vscp_firmware.c: 691: }
 13657                           ;vscp_firmware.c: 693: return rv;
 13658  00346C  501B               	movf	vscp_readStdReg@rv,w,c
 13659  00346E  0012               	return	
 13660  003470                     __end_of_vscp_readStdReg:
 13661                           	opt stack 0
 13662  003470                     PL64:
 13663                           	opt stack 24
 13664  003470  0803               	sublw	3
 13665  003472  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 13666  003474  90D8               	bcf	status,0,c
 13667  003476  360C               	rlcf	??_vscp_readStdReg,f,c
 13668  003478  90D8               	bcf	status,0,c
 13669  00347A  360C               	rlcf	??_vscp_readStdReg,f,c
 13670  00347C  90D8               	bcf	status,0,c
 13671  00347E  360C               	rlcf	??_vscp_readStdReg,f,c
 13672  003480  500C               	movf	??_vscp_readStdReg,w,c
 13673  003482  0012               	return	
 13674  003484                     __end_ofPL64:
 13675                           	opt stack 0
 13676  003484                     PL100:
 13677                           	opt stack 24
 13678  003484  90D8               	bcf	status,0,c
 13679  003486  3210               	rrcf	??_vscp_readStdReg+4,f,c
 13680  003488  320F               	rrcf	??_vscp_readStdReg+3,f,c
 13681  00348A  320E               	rrcf	??_vscp_readStdReg+2,f,c
 13682  00348C  320D               	rrcf	??_vscp_readStdReg+1,f,c
 13683  00348E  0012               	return	
 13684  003490                     __end_ofPL100:
 13685                           	opt stack 0
 13686                           tblptru	equ	0xFF8
 13687                           tblptrh	equ	0xFF7
 13688                           tblptrl	equ	0xFF6
 13689                           tablat	equ	0xFF5
 13690                           prodh	equ	0xFF4
 13691                           prodl	equ	0xFF3
 13692                           intcon	equ	0xFF2
 13693                           intcon2	equ	0xFF1
 13694                           postinc0	equ	0xFEE
 13695                           wreg	equ	0xFE8
 13696                           indf1	equ	0xFE7
 13697                           fsr1h	equ	0xFE2
 13698                           fsr1l	equ	0xFE1
 13699                           indf2	equ	0xFDF
 13700                           postinc2	equ	0xFDE
 13701                           postdec2	equ	0xFDD
 13702                           plusw2	equ	0xFDB
 13703                           fsr2h	equ	0xFDA
 13704                           fsr2l	equ	0xFD9
 13705                           status	equ	0xFD8
 13706                           
 13707 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13708 ;; Defined at:
 13709 ;;		line 3509 in file "../main.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;		None
 13712 ;; Auto vars:     Size  Location     Type
 13713 ;;		None
 13714 ;; Return value:  Size  Location     Type
 13715 ;;                  1    wreg      unsigned char 
 13716 ;; Registers used:
 13717 ;;		wreg
 13718 ;; Tracked objects:
 13719 ;;		On entry : F/0
 13720 ;;		On exit  : F/0
 13721 ;;		Unchanged: F/0
 13722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13723 ;;      Params:         0       0       0       0       0       0       0
 13724 ;;      Locals:         0       0       0       0       0       0       0
 13725 ;;      Temps:          0       0       0       0       0       0       0
 13726 ;;      Totals:         0       0       0       0       0       0       0
 13727 ;;Total ram usage:        0 bytes
 13728 ;; Hardware stack levels used:    1
 13729 ;; Hardware stack levels required when called:    2
 13730 ;; This function calls:
 13731 ;;		Nothing
 13732 ;; This function is called by:
 13733 ;;		_vscp_readStdReg
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           	psect	text32
 13738  00497A                     __ptext32:
 13739                           	opt stack 0
 13740  00497A                     _vscp_getRegisterPagesUsed:
 13741                           	opt stack 25
 13742                           
 13743                           ; BSR set to: 0
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;main.c: 3510: return 3;
 13747                           
 13748                           ;incstack = 0
 13749                           ;incstack = 0
 13750  00497A  0C03               	retlw	3
 13751  00497C                     __end_of_vscp_getRegisterPagesUsed:
 13752                           	opt stack 0
 13753                           tblptru	equ	0xFF8
 13754                           tblptrh	equ	0xFF7
 13755                           tblptrl	equ	0xFF6
 13756                           tablat	equ	0xFF5
 13757                           prodh	equ	0xFF4
 13758                           prodl	equ	0xFF3
 13759                           intcon	equ	0xFF2
 13760                           intcon2	equ	0xFF1
 13761                           postinc0	equ	0xFEE
 13762                           wreg	equ	0xFE8
 13763                           indf1	equ	0xFE7
 13764                           fsr1h	equ	0xFE2
 13765                           fsr1l	equ	0xFE1
 13766                           indf2	equ	0xFDF
 13767                           postinc2	equ	0xFDE
 13768                           postdec2	equ	0xFDD
 13769                           plusw2	equ	0xFDB
 13770                           fsr2h	equ	0xFDA
 13771                           fsr2l	equ	0xFD9
 13772                           status	equ	0xFD8
 13773                           
 13774 ;; *************** function _vscp_getFamilyType *****************
 13775 ;; Defined at:
 13776 ;;		line 3490 in file "../main.c"
 13777 ;; Parameters:    Size  Location     Type
 13778 ;;		None
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;		None
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  4    7[COMRAM] unsigned long 
 13783 ;; Registers used:
 13784 ;;		None
 13785 ;; Tracked objects:
 13786 ;;		On entry : F/0
 13787 ;;		On exit  : F/0
 13788 ;;		Unchanged: F/0
 13789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13790 ;;      Params:         4       0       0       0       0       0       0
 13791 ;;      Locals:         0       0       0       0       0       0       0
 13792 ;;      Temps:          0       0       0       0       0       0       0
 13793 ;;      Totals:         4       0       0       0       0       0       0
 13794 ;;Total ram usage:        4 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    2
 13797 ;; This function calls:
 13798 ;;		Nothing
 13799 ;; This function is called by:
 13800 ;;		_vscp_readStdReg
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           	psect	text33
 13805  00493E                     __ptext33:
 13806                           	opt stack 0
 13807  00493E                     _vscp_getFamilyType:
 13808                           	opt stack 25
 13809                           
 13810                           ; BSR set to: 0
 13811                           ;main.c: 3491: return 0;
 13812                           
 13813                           ; BSR set to: 0
 13814                           ;incstack = 0
 13815                           ;incstack = 0
 13816  00493E  6A08               	clrf	?_vscp_getFamilyType,c
 13817  004940  6A09               	clrf	?_vscp_getFamilyType+1,c
 13818  004942  6A0A               	clrf	?_vscp_getFamilyType+2,c
 13819  004944  6A0B               	clrf	?_vscp_getFamilyType+3,c
 13820                           
 13821                           ; BSR set to: 0
 13822  004946  0012               	return	
 13823  004948                     __end_of_vscp_getFamilyType:
 13824                           	opt stack 0
 13825                           tblptru	equ	0xFF8
 13826                           tblptrh	equ	0xFF7
 13827                           tblptrl	equ	0xFF6
 13828                           tablat	equ	0xFF5
 13829                           prodh	equ	0xFF4
 13830                           prodl	equ	0xFF3
 13831                           intcon	equ	0xFF2
 13832                           intcon2	equ	0xFF1
 13833                           postinc0	equ	0xFEE
 13834                           wreg	equ	0xFE8
 13835                           indf1	equ	0xFE7
 13836                           fsr1h	equ	0xFE2
 13837                           fsr1l	equ	0xFE1
 13838                           indf2	equ	0xFDF
 13839                           postinc2	equ	0xFDE
 13840                           postdec2	equ	0xFDD
 13841                           plusw2	equ	0xFDB
 13842                           fsr2h	equ	0xFDA
 13843                           fsr2l	equ	0xFD9
 13844                           status	equ	0xFD8
 13845                           
 13846 ;; *************** function _vscp_getFamilyCode *****************
 13847 ;; Defined at:
 13848 ;;		line 3481 in file "../main.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;		None
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;		None
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  4    7[COMRAM] unsigned long 
 13855 ;; Registers used:
 13856 ;;		None
 13857 ;; Tracked objects:
 13858 ;;		On entry : F/0
 13859 ;;		On exit  : F/0
 13860 ;;		Unchanged: F/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13862 ;;      Params:         4       0       0       0       0       0       0
 13863 ;;      Locals:         0       0       0       0       0       0       0
 13864 ;;      Temps:          0       0       0       0       0       0       0
 13865 ;;      Totals:         4       0       0       0       0       0       0
 13866 ;;Total ram usage:        4 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    2
 13869 ;; This function calls:
 13870 ;;		Nothing
 13871 ;; This function is called by:
 13872 ;;		_vscp_readStdReg
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text34
 13877  004948                     __ptext34:
 13878                           	opt stack 0
 13879  004948                     _vscp_getFamilyCode:
 13880                           	opt stack 25
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;main.c: 3482: return 0L;
 13884                           
 13885                           ; BSR set to: 0
 13886                           ;incstack = 0
 13887                           ;incstack = 0
 13888  004948  6A08               	clrf	?_vscp_getFamilyCode,c
 13889  00494A  6A09               	clrf	?_vscp_getFamilyCode+1,c
 13890  00494C  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 13891  00494E  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 13892                           
 13893                           ; BSR set to: 0
 13894  004950  0012               	return	
 13895  004952                     __end_of_vscp_getFamilyCode:
 13896                           	opt stack 0
 13897                           tblptru	equ	0xFF8
 13898                           tblptrh	equ	0xFF7
 13899                           tblptrl	equ	0xFF6
 13900                           tablat	equ	0xFF5
 13901                           prodh	equ	0xFF4
 13902                           prodl	equ	0xFF3
 13903                           intcon	equ	0xFF2
 13904                           intcon2	equ	0xFF1
 13905                           postinc0	equ	0xFEE
 13906                           wreg	equ	0xFE8
 13907                           indf1	equ	0xFE7
 13908                           fsr1h	equ	0xFE2
 13909                           fsr1l	equ	0xFE1
 13910                           indf2	equ	0xFDF
 13911                           postinc2	equ	0xFDE
 13912                           postdec2	equ	0xFDD
 13913                           plusw2	equ	0xFDB
 13914                           fsr2h	equ	0xFDA
 13915                           fsr2l	equ	0xFD9
 13916                           status	equ	0xFD8
 13917                           
 13918 ;; *************** function _vscp_getBufferSize *****************
 13919 ;; Defined at:
 13920 ;;		line 3342 in file "../main.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;		None
 13923 ;; Auto vars:     Size  Location     Type
 13924 ;;		None
 13925 ;; Return value:  Size  Location     Type
 13926 ;;                  1    wreg      unsigned char 
 13927 ;; Registers used:
 13928 ;;		wreg
 13929 ;; Tracked objects:
 13930 ;;		On entry : F/0
 13931 ;;		On exit  : F/0
 13932 ;;		Unchanged: F/0
 13933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13934 ;;      Params:         0       0       0       0       0       0       0
 13935 ;;      Locals:         0       0       0       0       0       0       0
 13936 ;;      Temps:          0       0       0       0       0       0       0
 13937 ;;      Totals:         0       0       0       0       0       0       0
 13938 ;;Total ram usage:        0 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; Hardware stack levels required when called:    2
 13941 ;; This function calls:
 13942 ;;		Nothing
 13943 ;; This function is called by:
 13944 ;;		_vscp_readStdReg
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           	psect	text35
 13949  00497C                     __ptext35:
 13950                           	opt stack 0
 13951  00497C                     _vscp_getBufferSize:
 13952                           	opt stack 25
 13953                           
 13954                           ; BSR set to: 0
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;main.c: 3343: return 8;
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;incstack = 0
 13961                           ;incstack = 0
 13962  00497C  0C08               	retlw	8
 13963  00497E                     __end_of_vscp_getBufferSize:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           intcon2	equ	0xFF1
 13973                           postinc0	equ	0xFEE
 13974                           wreg	equ	0xFE8
 13975                           indf1	equ	0xFE7
 13976                           fsr1h	equ	0xFE2
 13977                           fsr1l	equ	0xFE1
 13978                           indf2	equ	0xFDF
 13979                           postinc2	equ	0xFDE
 13980                           postdec2	equ	0xFDD
 13981                           plusw2	equ	0xFDB
 13982                           fsr2h	equ	0xFDA
 13983                           fsr2l	equ	0xFD9
 13984                           status	equ	0xFD8
 13985                           
 13986 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13987 ;; Defined at:
 13988 ;;		line 3333 in file "../main.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;		None
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;		None
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      unsigned char 
 13995 ;; Registers used:
 13996 ;;		wreg
 13997 ;; Tracked objects:
 13998 ;;		On entry : F/0
 13999 ;;		On exit  : F/0
 14000 ;;		Unchanged: F/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14002 ;;      Params:         0       0       0       0       0       0       0
 14003 ;;      Locals:         0       0       0       0       0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0
 14005 ;;      Totals:         0       0       0       0       0       0       0
 14006 ;;Total ram usage:        0 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    2
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_vscp_readStdReg
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text36
 14017  00497E                     __ptext36:
 14018                           	opt stack 0
 14019  00497E                     _vscp_getBootLoaderAlgorithm:
 14020                           	opt stack 25
 14021                           
 14022                           ; BSR set to: 0
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;main.c: 3334: return 0x01;
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;incstack = 0
 14029                           ;incstack = 0
 14030  00497E  0C01               	retlw	1
 14031  004980                     __end_of_vscp_getBootLoaderAlgorithm:
 14032                           	opt stack 0
 14033                           tblptru	equ	0xFF8
 14034                           tblptrh	equ	0xFF7
 14035                           tblptrl	equ	0xFF6
 14036                           tablat	equ	0xFF5
 14037                           prodh	equ	0xFF4
 14038                           prodl	equ	0xFF3
 14039                           intcon	equ	0xFF2
 14040                           intcon2	equ	0xFF1
 14041                           postinc0	equ	0xFEE
 14042                           wreg	equ	0xFE8
 14043                           indf1	equ	0xFE7
 14044                           fsr1h	equ	0xFE2
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           plusw2	equ	0xFDB
 14050                           fsr2h	equ	0xFDA
 14051                           fsr2l	equ	0xFD9
 14052                           status	equ	0xFD8
 14053                           
 14054 ;; *************** function _vscp_getManufacturerId *****************
 14055 ;; Defined at:
 14056 ;;		line 3324 in file "../main.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;  idx             1    wreg     unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  idx             1    9[COMRAM] unsigned char 
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  1    wreg      unsigned char 
 14063 ;; Registers used:
 14064 ;;		wreg, status,2, status,0, cstack
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14070 ;;      Params:         0       0       0       0       0       0       0
 14071 ;;      Locals:         1       0       0       0       0       0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0
 14073 ;;      Totals:         1       0       0       0       0       0       0
 14074 ;;Total ram usage:        1 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    3
 14077 ;; This function calls:
 14078 ;;		_Read_b_eep
 14079 ;; This function is called by:
 14080 ;;		_vscp_readStdReg
 14081 ;;		_vscp_writeStdReg
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text37
 14086  0048B8                     __ptext37:
 14087                           	opt stack 0
 14088  0048B8                     _vscp_getManufacturerId:
 14089                           	opt stack 24
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;incstack = 0
 14093                           ;incstack = 0
 14094                           ;vscp_getManufacturerId@idx stored from wreg
 14095  0048B8  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 14096                           
 14097                           ;main.c: 3325: return Read_b_eep(0x0B + idx);
 14098  0048BC  0E0B               	movlw	11
 14099  0048BE  240A               	addwf	vscp_getManufacturerId@idx,w,c
 14100  0048C0  6E08               	movwf	?_Read_b_eep,c
 14101  0048C2  6A09               	clrf	?_Read_b_eep+1,c
 14102  0048C4  0E00               	movlw	0
 14103  0048C6  2209               	addwfc	?_Read_b_eep+1,f,c
 14104  0048C8  EF83  F024         	goto	_Read_b_eep	;wreg free
 14105  0048CC                     __end_of_vscp_getManufacturerId:
 14106                           	opt stack 0
 14107                           tblptru	equ	0xFF8
 14108                           tblptrh	equ	0xFF7
 14109                           tblptrl	equ	0xFF6
 14110                           tablat	equ	0xFF5
 14111                           prodh	equ	0xFF4
 14112                           prodl	equ	0xFF3
 14113                           intcon	equ	0xFF2
 14114                           intcon2	equ	0xFF1
 14115                           postinc0	equ	0xFEE
 14116                           wreg	equ	0xFE8
 14117                           indf1	equ	0xFE7
 14118                           fsr1h	equ	0xFE2
 14119                           fsr1l	equ	0xFE1
 14120                           indf2	equ	0xFDF
 14121                           postinc2	equ	0xFDE
 14122                           postdec2	equ	0xFDD
 14123                           plusw2	equ	0xFDB
 14124                           fsr2h	equ	0xFDA
 14125                           fsr2l	equ	0xFD9
 14126                           status	equ	0xFD8
 14127                           
 14128 ;; *************** function _vscp_getUserID *****************
 14129 ;; Defined at:
 14130 ;;		line 3304 in file "../main.c"
 14131 ;; Parameters:    Size  Location     Type
 14132 ;;  idx             1    wreg     unsigned char 
 14133 ;; Auto vars:     Size  Location     Type
 14134 ;;  idx             1    9[COMRAM] unsigned char 
 14135 ;; Return value:  Size  Location     Type
 14136 ;;                  1    wreg      unsigned char 
 14137 ;; Registers used:
 14138 ;;		wreg, status,2, status,0, cstack
 14139 ;; Tracked objects:
 14140 ;;		On entry : 0/0
 14141 ;;		On exit  : 0/0
 14142 ;;		Unchanged: 0/0
 14143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14144 ;;      Params:         0       0       0       0       0       0       0
 14145 ;;      Locals:         1       0       0       0       0       0       0
 14146 ;;      Temps:          0       0       0       0       0       0       0
 14147 ;;      Totals:         1       0       0       0       0       0       0
 14148 ;;Total ram usage:        1 bytes
 14149 ;; Hardware stack levels used:    1
 14150 ;; Hardware stack levels required when called:    3
 14151 ;; This function calls:
 14152 ;;		_Read_b_eep
 14153 ;; This function is called by:
 14154 ;;		_vscp_readStdReg
 14155 ;;		_vscp_writeStdReg
 14156 ;; This function uses a non-reentrant model
 14157 ;;
 14158                           
 14159                           	psect	text38
 14160  0048CC                     __ptext38:
 14161                           	opt stack 0
 14162  0048CC                     _vscp_getUserID:
 14163                           	opt stack 24
 14164                           
 14165                           ;incstack = 0
 14166                           ;incstack = 0
 14167                           ;vscp_getUserID@idx stored from wreg
 14168  0048CC  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 14169                           
 14170                           ;main.c: 3305: return Read_b_eep(0x06 + idx);
 14171  0048D0  0E06               	movlw	6
 14172  0048D2  240A               	addwf	vscp_getUserID@idx,w,c
 14173  0048D4  6E08               	movwf	?_Read_b_eep,c
 14174  0048D6  6A09               	clrf	?_Read_b_eep+1,c
 14175  0048D8  0E00               	movlw	0
 14176  0048DA  2209               	addwfc	?_Read_b_eep+1,f,c
 14177  0048DC  EF83  F024         	goto	_Read_b_eep	;wreg free
 14178  0048E0                     __end_of_vscp_getUserID:
 14179                           	opt stack 0
 14180                           tblptru	equ	0xFF8
 14181                           tblptrh	equ	0xFF7
 14182                           tblptrl	equ	0xFF6
 14183                           tablat	equ	0xFF5
 14184                           prodh	equ	0xFF4
 14185                           prodl	equ	0xFF3
 14186                           intcon	equ	0xFF2
 14187                           intcon2	equ	0xFF1
 14188                           postinc0	equ	0xFEE
 14189                           wreg	equ	0xFE8
 14190                           indf1	equ	0xFE7
 14191                           fsr1h	equ	0xFE2
 14192                           fsr1l	equ	0xFE1
 14193                           indf2	equ	0xFDF
 14194                           postinc2	equ	0xFDE
 14195                           postdec2	equ	0xFDD
 14196                           plusw2	equ	0xFDB
 14197                           fsr2h	equ	0xFDA
 14198                           fsr2l	equ	0xFD9
 14199                           status	equ	0xFD8
 14200                           
 14201 ;; *************** function _vscp_getMDF_URL *****************
 14202 ;; Defined at:
 14203 ;;		line 3295 in file "../main.c"
 14204 ;; Parameters:    Size  Location     Type
 14205 ;;  idx             1    wreg     unsigned char 
 14206 ;; Auto vars:     Size  Location     Type
 14207 ;;  idx             1    8[COMRAM] unsigned char 
 14208 ;; Return value:  Size  Location     Type
 14209 ;;                  1    wreg      unsigned char 
 14210 ;; Registers used:
 14211 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14212 ;; Tracked objects:
 14213 ;;		On entry : F/0
 14214 ;;		On exit  : F/0
 14215 ;;		Unchanged: F/0
 14216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14217 ;;      Params:         0       0       0       0       0       0       0
 14218 ;;      Locals:         1       0       0       0       0       0       0
 14219 ;;      Temps:          1       0       0       0       0       0       0
 14220 ;;      Totals:         2       0       0       0       0       0       0
 14221 ;;Total ram usage:        2 bytes
 14222 ;; Hardware stack levels used:    1
 14223 ;; Hardware stack levels required when called:    2
 14224 ;; This function calls:
 14225 ;;		Nothing
 14226 ;; This function is called by:
 14227 ;;		_vscp_readStdReg
 14228 ;;		_vscp_handleProtocolEvent
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           	psect	text39
 14233  004846                     __ptext39:
 14234                           	opt stack 0
 14235  004846                     _vscp_getMDF_URL:
 14236                           	opt stack 25
 14237                           
 14238                           ;incstack = 0
 14239                           ;incstack = 0
 14240                           ;vscp_getMDF_URL@idx stored from wreg
 14241  004846  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;main.c: 3296: return vscp_deviceURL[ idx ];
 14245  00484A  5009               	movf	vscp_getMDF_URL@idx,w,c
 14246  00484C  0FCA               	addlw	low _vscp_deviceURL
 14247  00484E  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 14248  004850  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 14249  004854  0E08               	movlw	high __smallconst
 14250  004856  6EF7               	movwf	tblptrh,c
 14251  004858  0008               	tblrd		*
 14252  00485A  50F5               	movf	tablat,w,c
 14253                           
 14254                           ; BSR set to: 0
 14255  00485C  0012               	return	
 14256  00485E                     __end_of_vscp_getMDF_URL:
 14257                           	opt stack 0
 14258                           tblptru	equ	0xFF8
 14259                           tblptrh	equ	0xFF7
 14260                           tblptrl	equ	0xFF6
 14261                           tablat	equ	0xFF5
 14262                           prodh	equ	0xFF4
 14263                           prodl	equ	0xFF3
 14264                           intcon	equ	0xFF2
 14265                           intcon2	equ	0xFF1
 14266                           postinc0	equ	0xFEE
 14267                           wreg	equ	0xFE8
 14268                           indf1	equ	0xFE7
 14269                           fsr1h	equ	0xFE2
 14270                           fsr1l	equ	0xFE1
 14271                           indf2	equ	0xFDF
 14272                           postinc2	equ	0xFDE
 14273                           postdec2	equ	0xFDD
 14274                           plusw2	equ	0xFDB
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279 ;; *************** function _vscp_getGUID *****************
 14280 ;; Defined at:
 14281 ;;		line 3283 in file "../main.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  idx             1    wreg     unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  idx             1    9[COMRAM] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;                  1    wreg      unsigned char 
 14288 ;; Registers used:
 14289 ;;		wreg, status,2, status,0, cstack
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14295 ;;      Params:         0       0       0       0       0       0       0
 14296 ;;      Locals:         1       0       0       0       0       0       0
 14297 ;;      Temps:          0       0       0       0       0       0       0
 14298 ;;      Totals:         1       0       0       0       0       0       0
 14299 ;;Total ram usage:        1 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    3
 14302 ;; This function calls:
 14303 ;;		_Read_b_eep
 14304 ;; This function is called by:
 14305 ;;		_vscp_readStdReg
 14306 ;;		_vscp_writeStdReg
 14307 ;;		_vscp_handleProtocolEvent
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           	psect	text40
 14312  0048E0                     __ptext40:
 14313                           	opt stack 0
 14314  0048E0                     _vscp_getGUID:
 14315                           	opt stack 24
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;incstack = 0
 14319                           ;incstack = 0
 14320                           ;vscp_getGUID@idx stored from wreg
 14321  0048E0  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 14322                           
 14323                           ;main.c: 3284: return Read_b_eep(0x13 + idx);
 14324  0048E4  0E13               	movlw	19
 14325  0048E6  240A               	addwf	vscp_getGUID@idx,w,c
 14326  0048E8  6E08               	movwf	?_Read_b_eep,c
 14327  0048EA  6A09               	clrf	?_Read_b_eep+1,c
 14328  0048EC  0E00               	movlw	0
 14329  0048EE  2209               	addwfc	?_Read_b_eep+1,f,c
 14330  0048F0  EF83  F024         	goto	_Read_b_eep	;wreg free
 14331  0048F4                     __end_of_vscp_getGUID:
 14332                           	opt stack 0
 14333                           tblptru	equ	0xFF8
 14334                           tblptrh	equ	0xFF7
 14335                           tblptrl	equ	0xFF6
 14336                           tablat	equ	0xFF5
 14337                           prodh	equ	0xFF4
 14338                           prodl	equ	0xFF3
 14339                           intcon	equ	0xFF2
 14340                           intcon2	equ	0xFF1
 14341                           postinc0	equ	0xFEE
 14342                           wreg	equ	0xFE8
 14343                           indf1	equ	0xFE7
 14344                           fsr1h	equ	0xFE2
 14345                           fsr1l	equ	0xFE1
 14346                           indf2	equ	0xFDF
 14347                           postinc2	equ	0xFDE
 14348                           postdec2	equ	0xFDD
 14349                           plusw2	equ	0xFDB
 14350                           fsr2h	equ	0xFDA
 14351                           fsr2l	equ	0xFD9
 14352                           status	equ	0xFD8
 14353                           
 14354 ;; *************** function _vscp_getSubMinorVersion *****************
 14355 ;; Defined at:
 14356 ;;		line 3272 in file "../main.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;		None
 14359 ;; Auto vars:     Size  Location     Type
 14360 ;;		None
 14361 ;; Return value:  Size  Location     Type
 14362 ;;                  1    wreg      unsigned char 
 14363 ;; Registers used:
 14364 ;;		wreg
 14365 ;; Tracked objects:
 14366 ;;		On entry : F/0
 14367 ;;		On exit  : F/0
 14368 ;;		Unchanged: F/0
 14369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14370 ;;      Params:         0       0       0       0       0       0       0
 14371 ;;      Locals:         0       0       0       0       0       0       0
 14372 ;;      Temps:          0       0       0       0       0       0       0
 14373 ;;      Totals:         0       0       0       0       0       0       0
 14374 ;;Total ram usage:        0 bytes
 14375 ;; Hardware stack levels used:    1
 14376 ;; Hardware stack levels required when called:    2
 14377 ;; This function calls:
 14378 ;;		Nothing
 14379 ;; This function is called by:
 14380 ;;		_vscp_readStdReg
 14381 ;; This function uses a non-reentrant model
 14382 ;;
 14383                           
 14384                           	psect	text41
 14385  004980                     __ptext41:
 14386                           	opt stack 0
 14387  004980                     _vscp_getSubMinorVersion:
 14388                           	opt stack 25
 14389                           
 14390                           ; BSR set to: 0
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;main.c: 3273: return 0;
 14394                           
 14395                           ;incstack = 0
 14396                           ;incstack = 0
 14397  004980  0C00               	retlw	0
 14398  004982                     __end_of_vscp_getSubMinorVersion:
 14399                           	opt stack 0
 14400                           tblptru	equ	0xFF8
 14401                           tblptrh	equ	0xFF7
 14402                           tblptrl	equ	0xFF6
 14403                           tablat	equ	0xFF5
 14404                           prodh	equ	0xFF4
 14405                           prodl	equ	0xFF3
 14406                           intcon	equ	0xFF2
 14407                           intcon2	equ	0xFF1
 14408                           postinc0	equ	0xFEE
 14409                           wreg	equ	0xFE8
 14410                           indf1	equ	0xFE7
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           plusw2	equ	0xFDB
 14417                           fsr2h	equ	0xFDA
 14418                           fsr2l	equ	0xFD9
 14419                           status	equ	0xFD8
 14420                           
 14421 ;; *************** function _vscp_getMinorVersion *****************
 14422 ;; Defined at:
 14423 ;;		line 3263 in file "../main.c"
 14424 ;; Parameters:    Size  Location     Type
 14425 ;;		None
 14426 ;; Auto vars:     Size  Location     Type
 14427 ;;		None
 14428 ;; Return value:  Size  Location     Type
 14429 ;;                  1    wreg      unsigned char 
 14430 ;; Registers used:
 14431 ;;		wreg
 14432 ;; Tracked objects:
 14433 ;;		On entry : F/0
 14434 ;;		On exit  : F/0
 14435 ;;		Unchanged: F/0
 14436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14437 ;;      Params:         0       0       0       0       0       0       0
 14438 ;;      Locals:         0       0       0       0       0       0       0
 14439 ;;      Temps:          0       0       0       0       0       0       0
 14440 ;;      Totals:         0       0       0       0       0       0       0
 14441 ;;Total ram usage:        0 bytes
 14442 ;; Hardware stack levels used:    1
 14443 ;; Hardware stack levels required when called:    2
 14444 ;; This function calls:
 14445 ;;		Nothing
 14446 ;; This function is called by:
 14447 ;;		_vscp_readStdReg
 14448 ;; This function uses a non-reentrant model
 14449 ;;
 14450                           
 14451                           	psect	text42
 14452  004982                     __ptext42:
 14453                           	opt stack 0
 14454  004982                     _vscp_getMinorVersion:
 14455                           	opt stack 25
 14456                           
 14457                           ; BSR set to: 0
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;main.c: 3264: return 0;
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;incstack = 0
 14464                           ;incstack = 0
 14465  004982  0C00               	retlw	0
 14466  004984                     __end_of_vscp_getMinorVersion:
 14467                           	opt stack 0
 14468                           tblptru	equ	0xFF8
 14469                           tblptrh	equ	0xFF7
 14470                           tblptrl	equ	0xFF6
 14471                           tablat	equ	0xFF5
 14472                           prodh	equ	0xFF4
 14473                           prodl	equ	0xFF3
 14474                           intcon	equ	0xFF2
 14475                           intcon2	equ	0xFF1
 14476                           postinc0	equ	0xFEE
 14477                           wreg	equ	0xFE8
 14478                           indf1	equ	0xFE7
 14479                           fsr1h	equ	0xFE2
 14480                           fsr1l	equ	0xFE1
 14481                           indf2	equ	0xFDF
 14482                           postinc2	equ	0xFDE
 14483                           postdec2	equ	0xFDD
 14484                           plusw2	equ	0xFDB
 14485                           fsr2h	equ	0xFDA
 14486                           fsr2l	equ	0xFD9
 14487                           status	equ	0xFD8
 14488                           
 14489 ;; *************** function _vscp_getMajorVersion *****************
 14490 ;; Defined at:
 14491 ;;		line 3254 in file "../main.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;		None
 14494 ;; Auto vars:     Size  Location     Type
 14495 ;;		None
 14496 ;; Return value:  Size  Location     Type
 14497 ;;                  1    wreg      unsigned char 
 14498 ;; Registers used:
 14499 ;;		wreg
 14500 ;; Tracked objects:
 14501 ;;		On entry : F/0
 14502 ;;		On exit  : F/0
 14503 ;;		Unchanged: F/0
 14504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14505 ;;      Params:         0       0       0       0       0       0       0
 14506 ;;      Locals:         0       0       0       0       0       0       0
 14507 ;;      Temps:          0       0       0       0       0       0       0
 14508 ;;      Totals:         0       0       0       0       0       0       0
 14509 ;;Total ram usage:        0 bytes
 14510 ;; Hardware stack levels used:    1
 14511 ;; Hardware stack levels required when called:    2
 14512 ;; This function calls:
 14513 ;;		Nothing
 14514 ;; This function is called by:
 14515 ;;		_vscp_readStdReg
 14516 ;; This function uses a non-reentrant model
 14517 ;;
 14518                           
 14519                           	psect	text43
 14520  004984                     __ptext43:
 14521                           	opt stack 0
 14522  004984                     _vscp_getMajorVersion:
 14523                           	opt stack 25
 14524                           
 14525                           ; BSR set to: 0
 14526                           
 14527                           ; BSR set to: 0
 14528                           ;main.c: 3255: return 1;
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;incstack = 0
 14532                           ;incstack = 0
 14533  004984  0C01               	retlw	1
 14534  004986                     __end_of_vscp_getMajorVersion:
 14535                           	opt stack 0
 14536                           tblptru	equ	0xFF8
 14537                           tblptrh	equ	0xFF7
 14538                           tblptrl	equ	0xFF6
 14539                           tablat	equ	0xFF5
 14540                           prodh	equ	0xFF4
 14541                           prodl	equ	0xFF3
 14542                           intcon	equ	0xFF2
 14543                           intcon2	equ	0xFF1
 14544                           postinc0	equ	0xFEE
 14545                           wreg	equ	0xFE8
 14546                           indf1	equ	0xFE7
 14547                           fsr1h	equ	0xFE2
 14548                           fsr1l	equ	0xFE1
 14549                           indf2	equ	0xFDF
 14550                           postinc2	equ	0xFDE
 14551                           postdec2	equ	0xFDD
 14552                           plusw2	equ	0xFDB
 14553                           fsr2h	equ	0xFDA
 14554                           fsr2l	equ	0xFD9
 14555                           status	equ	0xFD8
 14556                           
 14557 ;; *************** function _vscp_newNodeOnline *****************
 14558 ;; Defined at:
 14559 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;		None
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;		None
 14564 ;; Return value:  Size  Location     Type
 14565 ;;		None               void
 14566 ;; Registers used:
 14567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14568 ;; Tracked objects:
 14569 ;;		On entry : F/0
 14570 ;;		On exit  : F/0
 14571 ;;		Unchanged: 0/0
 14572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14573 ;;      Params:         0       0       0       0       0       0       0
 14574 ;;      Locals:         0       0       0       0       0       0       0
 14575 ;;      Temps:          1       0       0       0       0       0       0
 14576 ;;      Totals:         1       0       0       0       0       0       0
 14577 ;;Total ram usage:        1 bytes
 14578 ;; Hardware stack levels used:    1
 14579 ;; Hardware stack levels required when called:    7
 14580 ;; This function calls:
 14581 ;;		_vscp_sendEvent
 14582 ;; This function is called by:
 14583 ;;		_vscp_handleProtocolEvent
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           	psect	text44
 14588  0045FE                     __ptext44:
 14589                           	opt stack 0
 14590  0045FE                     _vscp_newNodeOnline:
 14591                           	opt stack 21
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14595                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;incstack = 0
 14599                           ;incstack = 0
 14600  0045FE  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14601  004602  0E0F               	movlw	15
 14602  004604  164C               	andwf	??_vscp_newNodeOnline,f,c
 14603  004606  044C               	decf	??_vscp_newNodeOnline,w,c
 14604  004608  E10E               	bnz	l1348
 14605                           
 14606                           ; BSR set to: 0
 14607  00460A  517D               	movf	_vscp_nickname& (0+255),w,b
 14608  00460C  EE20  F09C         	lfsr	2,_vscp_imsg+6
 14609  004610  62DF               	cpfseq	indf2,c
 14610  004612  D009               	goto	l1348
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14614  004614  0E80               	movlw	128
 14615  004616  6FA4               	movwf	_vscp_omsg& (0+255),b
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14619  004618  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14623  00461A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 14624  00461C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 14625                           
 14626                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14627  00461E  0E03               	movlw	3
 14628  004620  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14632  004622  EC76  F023         	call	_vscp_sendEvent	;wreg free
 14633  004626                     l1348:
 14634                           
 14635                           ; BSR set to: 0
 14636  004626  0012               	return	
 14637  004628                     __end_of_vscp_newNodeOnline:
 14638                           	opt stack 0
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           intcon	equ	0xFF2
 14646                           intcon2	equ	0xFF1
 14647                           postinc0	equ	0xFEE
 14648                           wreg	equ	0xFE8
 14649                           indf1	equ	0xFE7
 14650                           fsr1h	equ	0xFE2
 14651                           fsr1l	equ	0xFE1
 14652                           indf2	equ	0xFDF
 14653                           postinc2	equ	0xFDE
 14654                           postdec2	equ	0xFDD
 14655                           plusw2	equ	0xFDB
 14656                           fsr2h	equ	0xFDA
 14657                           fsr2l	equ	0xFD9
 14658                           status	equ	0xFD8
 14659                           
 14660 ;; *************** function _vscp_handleDropNickname *****************
 14661 ;; Defined at:
 14662 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;		None
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;  bytes           1   12[COMRAM] unsigned char 
 14667 ;; Return value:  Size  Location     Type
 14668 ;;		None               void
 14669 ;; Registers used:
 14670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14671 ;; Tracked objects:
 14672 ;;		On entry : F/0
 14673 ;;		On exit  : F/0
 14674 ;;		Unchanged: 0/0
 14675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14676 ;;      Params:         0       0       0       0       0       0       0
 14677 ;;      Locals:         1       0       0       0       0       0       0
 14678 ;;      Temps:          0       0       0       0       0       0       0
 14679 ;;      Totals:         1       0       0       0       0       0       0
 14680 ;;Total ram usage:        1 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    5
 14683 ;; This function calls:
 14684 ;;		_vscp_init
 14685 ;;		_vscp_writeNicknamePermanent
 14686 ;; This function is called by:
 14687 ;;		_vscp_handleProtocolEvent
 14688 ;; This function uses a non-reentrant model
 14689 ;;
 14690                           
 14691                           	psect	text45
 14692  00451A                     __ptext45:
 14693                           	opt stack 0
 14694  00451A                     _vscp_handleDropNickname:
 14695                           	opt stack 23
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;incstack = 0
 14702                           ;incstack = 0
 14703  00451A  5196               	movf	_vscp_imsg& (0+255),w,b
 14704  00451C  0B0F               	andlw	15
 14705  00451E  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 14706                           
 14707                           ; BSR set to: 0
 14708                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14709  004520  500D               	movf	vscp_handleDropNickname@bytes,w,c
 14710  004522  E012               	bz	l1344
 14711                           
 14712                           ; BSR set to: 0
 14713  004524  517D               	movf	_vscp_nickname& (0+255),w,b
 14714  004526  EE20  F09C         	lfsr	2,_vscp_imsg+6
 14715  00452A  62DF               	cpfseq	indf2,c
 14716  00452C  D00D               	goto	l1344
 14717                           
 14718                           ; BSR set to: 0
 14719                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14720  00452E  040D               	decf	vscp_handleDropNickname@bytes,w,c
 14721  004530  E005               	bz	l1343
 14722                           
 14723                           ; BSR set to: 0
 14724  004532  0E01               	movlw	1
 14725  004534  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 14726  004536  D008               	goto	l1344
 14727                           
 14728                           ; BSR set to: 0
 14729  004538  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14730  00453A  D006               	goto	l1344
 14731  00453C                     l1343:
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14735  00453C  697D               	setf	_vscp_nickname& (0+255),b
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14739  00453E  0EFF               	movlw	255
 14740  004540  EC51  F024         	call	_vscp_writeNicknamePermanent
 14741                           
 14742                           ;vscp_firmware.c: 481: vscp_init();
 14743  004544  EC10  F022         	call	_vscp_init	;wreg free
 14744  004548                     l1344:
 14745                           
 14746                           ; BSR set to: 0
 14747  004548  0012               	return	
 14748  00454A                     __end_of_vscp_handleDropNickname:
 14749                           	opt stack 0
 14750                           tblptru	equ	0xFF8
 14751                           tblptrh	equ	0xFF7
 14752                           tblptrl	equ	0xFF6
 14753                           tablat	equ	0xFF5
 14754                           prodh	equ	0xFF4
 14755                           prodl	equ	0xFF3
 14756                           intcon	equ	0xFF2
 14757                           intcon2	equ	0xFF1
 14758                           postinc0	equ	0xFEE
 14759                           wreg	equ	0xFE8
 14760                           indf1	equ	0xFE7
 14761                           fsr1h	equ	0xFE2
 14762                           fsr1l	equ	0xFE1
 14763                           indf2	equ	0xFDF
 14764                           postinc2	equ	0xFDE
 14765                           postdec2	equ	0xFDD
 14766                           plusw2	equ	0xFDB
 14767                           fsr2h	equ	0xFDA
 14768                           fsr2l	equ	0xFD9
 14769                           status	equ	0xFD8
 14770                           
 14771 ;; *************** function _vscp_init *****************
 14772 ;; Defined at:
 14773 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14774 ;; Parameters:    Size  Location     Type
 14775 ;;		None
 14776 ;; Auto vars:     Size  Location     Type
 14777 ;;		None
 14778 ;; Return value:  Size  Location     Type
 14779 ;;		None               void
 14780 ;; Registers used:
 14781 ;;		wreg, status,2, cstack
 14782 ;; Tracked objects:
 14783 ;;		On entry : 0/0
 14784 ;;		On exit  : F/0
 14785 ;;		Unchanged: 0/0
 14786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14787 ;;      Params:         0       0       0       0       0       0       0
 14788 ;;      Locals:         0       0       0       0       0       0       0
 14789 ;;      Temps:          0       0       0       0       0       0       0
 14790 ;;      Totals:         0       0       0       0       0       0       0
 14791 ;;Total ram usage:        0 bytes
 14792 ;; Hardware stack levels used:    1
 14793 ;; Hardware stack levels required when called:    4
 14794 ;; This function calls:
 14795 ;;		_vscp_readNicknamePermanent
 14796 ;; This function is called by:
 14797 ;;		_main
 14798 ;;		_vscp_handleDropNickname
 14799 ;;		_vscp_handleProtocolEvent
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           	psect	text46
 14804  004420                     __ptext46:
 14805                           	opt stack 0
 14806  004420                     _vscp_init:
 14807                           	opt stack 23
 14808                           
 14809                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;incstack = 0
 14813                           ;incstack = 0
 14814  004420  0E02               	movlw	2
 14815  004422  6E56               	movwf	_vscp_initledfunc,c
 14816                           
 14817                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14818  004424  ECA9  F024         	call	_vscp_readNicknamePermanent	;wreg free
 14819  004428  0100               	movlb	0	; () banked
 14820  00442A  6F7D               	movwf	_vscp_nickname& (0+255),b
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14824  00442C  677D               	tstfsz	_vscp_nickname& (0+255),b
 14825  00442E  D001               	goto	l1285
 14826                           
 14827                           ; BSR set to: 0
 14828  004430  697D               	setf	_vscp_nickname& (0+255),b
 14829  004432                     l1285:
 14830                           
 14831                           ; BSR set to: 0
 14832                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14833  004432  6B96               	clrf	_vscp_imsg& (0+255),b
 14834                           
 14835                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14836  004434  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 14837                           
 14838                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14839  004436  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 14840  004438  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 14841                           
 14842                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14843  00443A  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 14844                           
 14845                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14846  00443C  6BA4               	clrf	_vscp_omsg& (0+255),b
 14847                           
 14848                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14849  00443E  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 14850                           
 14851                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14852  004440  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 14853  004442  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 14854                           
 14855                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14856  004444  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 14857                           
 14858                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14859  004446  6A55               	clrf	_vscp_alarmstatus,c
 14860                           
 14861                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14862  004448  6A57               	clrf	_vscp_probe_address,c
 14863                           
 14864                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14865  00444A  6B7E               	clrf	_vscp_node_state& (0+255),b
 14866                           
 14867                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14868  00444C  6B7F               	clrf	_vscp_node_substate& (0+255),b
 14869                           
 14870                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14871  00444E  6B80               	clrf	_vscp_probe_cnt& (0+255),b
 14872                           
 14873                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14874  004450  6A52               	clrf	_vscp_page_select,c
 14875  004452  6A53               	clrf	_vscp_page_select+1,c
 14876                           
 14877                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14878  004454  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 14879  004456  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14880                           
 14881                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14882  004458  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14883  00445A  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14884                           
 14885                           ;vscp_firmware.c: 155: vscp_second = 0;
 14886  00445C  6B81               	clrf	_vscp_second& (0+255),b
 14887                           
 14888                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14889  00445E  6B7C               	clrf	_vscp_minute& (0+255),b
 14890                           
 14891                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14892  004460  6B7A               	clrf	_vscp_hour& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895  004462  0012               	return	
 14896  004464                     __end_of_vscp_init:
 14897                           	opt stack 0
 14898                           tblptru	equ	0xFF8
 14899                           tblptrh	equ	0xFF7
 14900                           tblptrl	equ	0xFF6
 14901                           tablat	equ	0xFF5
 14902                           prodh	equ	0xFF4
 14903                           prodl	equ	0xFF3
 14904                           intcon	equ	0xFF2
 14905                           intcon2	equ	0xFF1
 14906                           postinc0	equ	0xFEE
 14907                           wreg	equ	0xFE8
 14908                           indf1	equ	0xFE7
 14909                           fsr1h	equ	0xFE2
 14910                           fsr1l	equ	0xFE1
 14911                           indf2	equ	0xFDF
 14912                           postinc2	equ	0xFDE
 14913                           postdec2	equ	0xFDD
 14914                           plusw2	equ	0xFDB
 14915                           fsr2h	equ	0xFDA
 14916                           fsr2l	equ	0xFD9
 14917                           status	equ	0xFD8
 14918                           
 14919 ;; *************** function _vscp_readNicknamePermanent *****************
 14920 ;; Defined at:
 14921 ;;		line 1361 in file "../main.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;		None
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;		None
 14926 ;; Return value:  Size  Location     Type
 14927 ;;                  1    wreg      unsigned char 
 14928 ;; Registers used:
 14929 ;;		wreg, status,2, cstack
 14930 ;; Tracked objects:
 14931 ;;		On entry : 0/0
 14932 ;;		On exit  : 0/0
 14933 ;;		Unchanged: 0/0
 14934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14935 ;;      Params:         0       0       0       0       0       0       0
 14936 ;;      Locals:         0       0       0       0       0       0       0
 14937 ;;      Temps:          0       0       0       0       0       0       0
 14938 ;;      Totals:         0       0       0       0       0       0       0
 14939 ;;Total ram usage:        0 bytes
 14940 ;; Hardware stack levels used:    1
 14941 ;; Hardware stack levels required when called:    3
 14942 ;; This function calls:
 14943 ;;		_Read_b_eep
 14944 ;; This function is called by:
 14945 ;;		_vscp_init
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text47
 14950  004952                     __ptext47:
 14951                           	opt stack 0
 14952  004952                     _vscp_readNicknamePermanent:
 14953                           	opt stack 23
 14954                           
 14955                           ;main.c: 1362: return Read_b_eep(0x01);
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;incstack = 0
 14959                           ;incstack = 0
 14960  004952  6A09               	clrf	?_Read_b_eep+1,c
 14961  004954  0E01               	movlw	1
 14962  004956  6E08               	movwf	?_Read_b_eep,c
 14963  004958  EF83  F024         	goto	_Read_b_eep	;wreg free
 14964  00495C                     __end_of_vscp_readNicknamePermanent:
 14965                           	opt stack 0
 14966                           tblptru	equ	0xFF8
 14967                           tblptrh	equ	0xFF7
 14968                           tblptrl	equ	0xFF6
 14969                           tablat	equ	0xFF5
 14970                           prodh	equ	0xFF4
 14971                           prodl	equ	0xFF3
 14972                           intcon	equ	0xFF2
 14973                           intcon2	equ	0xFF1
 14974                           postinc0	equ	0xFEE
 14975                           wreg	equ	0xFE8
 14976                           indf1	equ	0xFE7
 14977                           fsr1h	equ	0xFE2
 14978                           fsr1l	equ	0xFE1
 14979                           indf2	equ	0xFDF
 14980                           postinc2	equ	0xFDE
 14981                           postdec2	equ	0xFDD
 14982                           plusw2	equ	0xFDB
 14983                           fsr2h	equ	0xFDA
 14984                           fsr2l	equ	0xFD9
 14985                           status	equ	0xFD8
 14986                           
 14987 ;; *************** function _vscp_handleSetNickname *****************
 14988 ;; Defined at:
 14989 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;		None
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;		None               void
 14996 ;; Registers used:
 14997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14998 ;; Tracked objects:
 14999 ;;		On entry : F/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15003 ;;      Params:         0       0       0       0       0       0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0
 15006 ;;      Totals:         0       0       0       0       0       0       0
 15007 ;;Total ram usage:        0 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    4
 15010 ;; This function calls:
 15011 ;;		_vscp_writeNicknamePermanent
 15012 ;;		_vscp_setSegmentCRC
 15013 ;; This function is called by:
 15014 ;;		_vscp_handleProtocolEvent
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text48
 15019  004712                     __ptext48:
 15020                           	opt stack 0
 15021  004712                     _vscp_handleSetNickname:
 15022                           	opt stack 24
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 15026                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 15027                           
 15028                           ;incstack = 0
 15029                           ;incstack = 0
 15030  004712  5196               	movf	_vscp_imsg& (0+255),w,b
 15031  004714  0B0F               	andlw	15
 15032  004716  0A02               	xorlw	2
 15033  004718  E10D               	bnz	l1337
 15034                           
 15035                           ; BSR set to: 0
 15036  00471A  517D               	movf	_vscp_nickname& (0+255),w,b
 15037  00471C  EE20  F09C         	lfsr	2,_vscp_imsg+6
 15038  004720  62DF               	cpfseq	indf2,c
 15039  004722  D008               	goto	l1337
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 15043  004724  C09D  F07D         	movff	_vscp_imsg+7,_vscp_nickname
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 15047  004728  517D               	movf	_vscp_nickname& (0+255),w,b
 15048  00472A  EC51  F024         	call	_vscp_writeNicknamePermanent
 15049                           
 15050                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 15051  00472E  0E40               	movlw	64
 15052  004730  EC46  F024         	call	_vscp_setSegmentCRC
 15053  004734                     l1337:
 15054  004734  0012               	return	
 15055  004736                     __end_of_vscp_handleSetNickname:
 15056                           	opt stack 0
 15057                           tblptru	equ	0xFF8
 15058                           tblptrh	equ	0xFF7
 15059                           tblptrl	equ	0xFF6
 15060                           tablat	equ	0xFF5
 15061                           prodh	equ	0xFF4
 15062                           prodl	equ	0xFF3
 15063                           intcon	equ	0xFF2
 15064                           intcon2	equ	0xFF1
 15065                           postinc0	equ	0xFEE
 15066                           wreg	equ	0xFE8
 15067                           indf1	equ	0xFE7
 15068                           fsr1h	equ	0xFE2
 15069                           fsr1l	equ	0xFE1
 15070                           indf2	equ	0xFDF
 15071                           postinc2	equ	0xFDE
 15072                           postdec2	equ	0xFDD
 15073                           plusw2	equ	0xFDB
 15074                           fsr2h	equ	0xFDA
 15075                           fsr2l	equ	0xFD9
 15076                           status	equ	0xFD8
 15077                           
 15078 ;; *************** function _vscp_handleHeartbeat *****************
 15079 ;; Defined at:
 15080 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;		None               void
 15087 ;; Registers used:
 15088 ;;		wreg, status,2, status,0, cstack
 15089 ;; Tracked objects:
 15090 ;;		On entry : F/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15094 ;;      Params:         0       0       0       0       0       0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0
 15097 ;;      Totals:         0       0       0       0       0       0       0
 15098 ;;Total ram usage:        0 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:    4
 15101 ;; This function calls:
 15102 ;;		_vscp_writeNicknamePermanent
 15103 ;;		_vscp_getSegmentCRC
 15104 ;;		_vscp_setSegmentCRC
 15105 ;; This function is called by:
 15106 ;;		_vscp_handleProtocolEvent
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text49
 15111  0044A8                     __ptext49:
 15112                           	opt stack 0
 15113  0044A8                     _vscp_handleHeartbeat:
 15114                           	opt stack 24
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 15118                           
 15119                           ;incstack = 0
 15120                           ;incstack = 0
 15121  0044A8  ECAE  F024         	call	_vscp_getSegmentCRC	;wreg free
 15122  0044AC  0900               	iorlw	0
 15123  0044AE  E116               	bnz	l14626
 15124                           
 15125                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 15126                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 15127  0044B0  0100               	movlb	0	; () banked
 15128  0044B2  5196               	movf	_vscp_imsg& (0+255),w,b
 15129  0044B4  0B0F               	andlw	15
 15130  0044B6  0A05               	xorlw	5
 15131  0044B8  E115               	bnz	l1333
 15132                           
 15133                           ; BSR set to: 0
 15134  0044BA  ECAE  F024         	call	_vscp_getSegmentCRC	;wreg free
 15135  0044BE  0100               	movlb	0	; () banked
 15136  0044C0  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 15137  0044C2  E010               	bz	l1333
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15141  0044C4  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 15142  0044C6  EC46  F024         	call	_vscp_setSegmentCRC
 15143                           
 15144                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 15145  0044CA  0100               	movlb	0	; () banked
 15146  0044CC  697D               	setf	_vscp_nickname& (0+255),b
 15147                           
 15148                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 15149  0044CE  0EFF               	movlw	255
 15150  0044D0  EC51  F024         	call	_vscp_writeNicknamePermanent
 15151                           
 15152                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 15153  0044D4  0E01               	movlw	1
 15154  0044D6  0100               	movlb	0	; () banked
 15155  0044D8  6F7E               	movwf	_vscp_node_state& (0+255),b
 15156  0044DA  D004               	goto	l1333
 15157  0044DC                     l14626:
 15158                           
 15159                           ;vscp_firmware.c: 411: else {
 15160                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15161  0044DC  0100               	movlb	0	; () banked
 15162  0044DE  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 15163  0044E0  EC46  F024         	call	_vscp_setSegmentCRC
 15164  0044E4                     l1333:
 15165  0044E4  0012               	return	
 15166  0044E6                     __end_of_vscp_handleHeartbeat:
 15167                           	opt stack 0
 15168                           tblptru	equ	0xFF8
 15169                           tblptrh	equ	0xFF7
 15170                           tblptrl	equ	0xFF6
 15171                           tablat	equ	0xFF5
 15172                           prodh	equ	0xFF4
 15173                           prodl	equ	0xFF3
 15174                           intcon	equ	0xFF2
 15175                           intcon2	equ	0xFF1
 15176                           postinc0	equ	0xFEE
 15177                           wreg	equ	0xFE8
 15178                           indf1	equ	0xFE7
 15179                           fsr1h	equ	0xFE2
 15180                           fsr1l	equ	0xFE1
 15181                           indf2	equ	0xFDF
 15182                           postinc2	equ	0xFDE
 15183                           postdec2	equ	0xFDD
 15184                           plusw2	equ	0xFDB
 15185                           fsr2h	equ	0xFDA
 15186                           fsr2l	equ	0xFD9
 15187                           status	equ	0xFD8
 15188                           
 15189 ;; *************** function _vscp_getMatrixInfo *****************
 15190 ;; Defined at:
 15191 ;;		line 3464 in file "../main.c"
 15192 ;; Parameters:    Size  Location     Type
 15193 ;;  pData           1    wreg     PTR unsigned char 
 15194 ;;		 -> vscp_omsg(13), 
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;  pData           1    0[COMRAM] PTR unsigned char 
 15197 ;;		 -> vscp_omsg(13), 
 15198 ;;  i               1    7[COMRAM] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;		None               void
 15201 ;; Registers used:
 15202 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15203 ;; Tracked objects:
 15204 ;;		On entry : F/0
 15205 ;;		On exit  : F/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15208 ;;      Params:         0       0       0       0       0       0       0
 15209 ;;      Locals:         1       0       0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0
 15211 ;;      Totals:         1       0       0       0       0       0       0
 15212 ;;Total ram usage:        1 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    2
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_vscp_handleProtocolEvent
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           	psect	text50
 15223  00477C                     __ptext50:
 15224                           	opt stack 0
 15225  00477C                     _vscp_getMatrixInfo:
 15226                           	opt stack 26
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;main.c: 3465: uint8_t i;
 15230                           ;main.c: 3467: vscp_omsg.data[ 0 ] = 7;
 15231                           
 15232                           ;incstack = 0
 15233                           ;incstack = 0
 15234  00477C  0E07               	movlw	7
 15235  00477E  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 15236                           
 15237                           ;main.c: 3468: vscp_omsg.data[ 1 ] = 72;
 15238  004780  0E48               	movlw	72
 15239  004782  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 15240                           
 15241                           ;main.c: 3471: for ( i = 2; i < 8; i++ ) {
 15242  004784  0E02               	movlw	2
 15243  004786  6E08               	movwf	vscp_getMatrixInfo@i,c
 15244  004788                     l8522:
 15245                           
 15246                           ; BSR set to: 0
 15247                           ;main.c: 3472: vscp_omsg.data[ i ] = 0;
 15248  004788  5008               	movf	vscp_getMatrixInfo@i,w,c
 15249  00478A  0FA9               	addlw	low (_vscp_omsg+5)
 15250  00478C  6ED9               	movwf	fsr2l,c
 15251  00478E  6ADA               	clrf	fsr2h,c
 15252  004790  6ADF               	clrf	indf2,c
 15253                           
 15254                           ; BSR set to: 0
 15255  004792  2A08               	incf	vscp_getMatrixInfo@i,f,c
 15256                           
 15257                           ; BSR set to: 0
 15258  004794  0E07               	movlw	7
 15259  004796  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 15260  004798  D7F7               	goto	l8522
 15261                           
 15262                           ; BSR set to: 0
 15263  00479A  0C07               	retlw	7
 15264  00479C                     __end_of_vscp_getMatrixInfo:
 15265                           	opt stack 0
 15266                           tblptru	equ	0xFF8
 15267                           tblptrh	equ	0xFF7
 15268                           tblptrl	equ	0xFF6
 15269                           tablat	equ	0xFF5
 15270                           prodh	equ	0xFF4
 15271                           prodl	equ	0xFF3
 15272                           intcon	equ	0xFF2
 15273                           intcon2	equ	0xFF1
 15274                           postinc0	equ	0xFEE
 15275                           wreg	equ	0xFE8
 15276                           indf1	equ	0xFE7
 15277                           fsr1h	equ	0xFE2
 15278                           fsr1l	equ	0xFE1
 15279                           indf2	equ	0xFDF
 15280                           postinc2	equ	0xFDE
 15281                           postdec2	equ	0xFDD
 15282                           plusw2	equ	0xFDB
 15283                           fsr2h	equ	0xFDA
 15284                           fsr2l	equ	0xFD9
 15285                           status	equ	0xFD8
 15286                           
 15287 ;; *************** function _vscp_goBootloaderMode *****************
 15288 ;; Defined at:
 15289 ;;		line 3448 in file "../main.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;  algorithm       1    wreg     unsigned char 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;  algorithm       1   11[COMRAM] unsigned char 
 15294 ;; Return value:  Size  Location     Type
 15295 ;;		None               void
 15296 ;; Registers used:
 15297 ;;		wreg, status,2, status,0, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : F/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15303 ;;      Params:         0       0       0       0       0       0       0
 15304 ;;      Locals:         1       0       0       0       0       0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0
 15306 ;;      Totals:         1       0       0       0       0       0       0
 15307 ;;Total ram usage:        1 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    3
 15310 ;; This function calls:
 15311 ;;		_Busy_eep
 15312 ;;		_Write_b_eep
 15313 ;; This function is called by:
 15314 ;;		_vscp_handleProtocolEvent
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           	psect	text51
 15319  004810                     __ptext51:
 15320                           	opt stack 0
 15321  004810                     _vscp_goBootloaderMode:
 15322                           	opt stack 25
 15323                           
 15324                           ; BSR set to: 0
 15325                           ;incstack = 0
 15326                           ;incstack = 0
 15327                           ;vscp_goBootloaderMode@algorithm stored from wreg
 15328  004810  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;main.c: 3449: if ( 0x01 != algorithm ) return;
 15332  004814  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 15333  004816  E109               	bnz	l1123
 15334                           
 15335                           ; BSR set to: 0
 15336                           ;main.c: 3453: (Busy_eep(), Write_b_eep(0x00,0xff));
 15337  004818  ECB7  F024         	call	_Busy_eep	;wreg free
 15338  00481C  6A09               	clrf	?_Write_b_eep+1,c
 15339  00481E  6A08               	clrf	?_Write_b_eep,c
 15340  004820  0EFF               	movlw	255
 15341  004822  680A               	setf	?_Write_b_eep+2,c
 15342  004824  EC73  F022         	call	_Write_b_eep	;wreg free
 15343  004828  00FF               	reset		;# 
 15344  00482A                     l1123:
 15345  00482A  0012               	return	
 15346  00482C                     __end_of_vscp_goBootloaderMode:
 15347                           	opt stack 0
 15348                           tblptru	equ	0xFF8
 15349                           tblptrh	equ	0xFF7
 15350                           tblptrl	equ	0xFF6
 15351                           tablat	equ	0xFF5
 15352                           prodh	equ	0xFF4
 15353                           prodl	equ	0xFF3
 15354                           intcon	equ	0xFF2
 15355                           intcon2	equ	0xFF1
 15356                           postinc0	equ	0xFEE
 15357                           wreg	equ	0xFE8
 15358                           indf1	equ	0xFE7
 15359                           fsr1h	equ	0xFE2
 15360                           fsr1l	equ	0xFE1
 15361                           indf2	equ	0xFDF
 15362                           postinc2	equ	0xFDE
 15363                           postdec2	equ	0xFDD
 15364                           plusw2	equ	0xFDB
 15365                           fsr2h	equ	0xFDA
 15366                           fsr2l	equ	0xFD9
 15367                           status	equ	0xFD8
 15368                           
 15369 ;; *************** function _vscp_handleProbeState *****************
 15370 ;; Defined at:
 15371 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15372 ;; Parameters:    Size  Location     Type
 15373 ;;		None
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;		None
 15376 ;; Return value:  Size  Location     Type
 15377 ;;		None               void
 15378 ;; Registers used:
 15379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15380 ;; Tracked objects:
 15381 ;;		On entry : 0/0
 15382 ;;		On exit  : F/0
 15383 ;;		Unchanged: 0/0
 15384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15385 ;;      Params:         0       0       0       0       0       0       0
 15386 ;;      Locals:         0       0       0       0       0       0       0
 15387 ;;      Temps:          0       0       0       0       0       0       0
 15388 ;;      Totals:         0       0       0       0       0       0       0
 15389 ;;Total ram usage:        0 bytes
 15390 ;; Hardware stack levels used:    1
 15391 ;; Hardware stack levels required when called:    8
 15392 ;; This function calls:
 15393 ;;		_vscp_goActiveState
 15394 ;;		_vscp_writeNicknamePermanent
 15395 ;;		_vscp_sendEvent
 15396 ;;		_vscp_setSegmentCRC
 15397 ;; This function is called by:
 15398 ;;		_main
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           	psect	text52
 15403  00408C                     __ptext52:
 15404                           	opt stack 0
 15405  00408C                     _vscp_handleProbeState:
 15406                           	opt stack 21
 15407                           
 15408                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15409                           
 15410                           ;incstack = 0
 15411                           ;incstack = 0
 15412  00408C  D053               	goto	l12612
 15413  00408E                     l12542:
 15414                           
 15415                           ; BSR set to: 0
 15416                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15417  00408E  2857               	incf	_vscp_probe_address,w,c
 15418  004090  E010               	bz	l12558
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15422  004092  0E81               	movlw	129
 15423  004094  6FA4               	movwf	_vscp_omsg& (0+255),b
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15427  004096  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15431  004098  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 15432  00409A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 15433                           
 15434                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15435  00409C  0E02               	movlw	2
 15436  00409E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15440  0040A0  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 15441                           
 15442                           ; BSR set to: 0
 15443                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15444  0040A4  EC76  F023         	call	_vscp_sendEvent	;wreg free
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15448  0040A8  0E01               	movlw	1
 15449  0040AA  6F7F               	movwf	_vscp_node_substate& (0+255),b
 15450  0040AC                     l12556:
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15454  0040AC  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15455  0040AE  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15456                           
 15457                           ;vscp_firmware.c: 221: }
 15458  0040B0  D048               	goto	l1300
 15459  0040B2                     l12558:
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;vscp_firmware.c: 222: else {
 15463                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15464  0040B2  0E04               	movlw	4
 15465  0040B4  6F7E               	movwf	_vscp_node_state& (0+255),b
 15466                           
 15467                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15468  0040B6  0E81               	movlw	129
 15469  0040B8  6FA4               	movwf	_vscp_omsg& (0+255),b
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15473  0040BA  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 15474                           
 15475                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15476  0040BC  0E07               	movlw	7
 15477  0040BE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15481  0040C0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 15482  0040C2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 15483                           
 15484                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15485  0040C4  0E03               	movlw	3
 15486  0040C6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15490  0040C8  EC76  F023         	call	_vscp_sendEvent	;wreg free
 15491  0040CC  D03A               	goto	l1300
 15492  0040CE                     l1301:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15496  0040CE  AF96               	btfss	_vscp_imsg& (0+255),7,b
 15497  0040D0  D00F               	goto	l12582
 15498                           
 15499                           ; BSR set to: 0
 15500                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15501                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15502  0040D2  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 15503  0040D4  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15504  0040D6  E135               	bnz	l1300
 15505                           
 15506                           ; BSR set to: 0
 15507  0040D8  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 15508  0040DA  0A03               	xorlw	3
 15509  0040DC  E132               	bnz	l1300
 15510                           
 15511                           ; BSR set to: 0
 15512                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15513  0040DE  6657               	tstfsz	_vscp_probe_address,c
 15514  0040E0  D003               	goto	l12576
 15515                           
 15516                           ; BSR set to: 0
 15517                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15518  0040E2  0E02               	movlw	2
 15519  0040E4  6F7E               	movwf	_vscp_node_state& (0+255),b
 15520  0040E6  D7E2               	goto	l12556
 15521  0040E8                     l12576:
 15522                           
 15523                           ; BSR set to: 0
 15524                           ;vscp_firmware.c: 257: else {
 15525                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15526  0040E8  2A57               	incf	_vscp_probe_address,f,c
 15527                           
 15528                           ; BSR set to: 0
 15529                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15530  0040EA  6B7F               	clrf	_vscp_node_substate& (0+255),b
 15531  0040EC                     l12580:
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15535  0040EC  6B80               	clrf	_vscp_probe_cnt& (0+255),b
 15536  0040EE  D029               	goto	l1300
 15537  0040F0                     l12582:
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;vscp_firmware.c: 267: else {
 15541                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15542  0040F0  0EE9               	movlw	233
 15543  0040F2  5D6E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15544  0040F4  0E03               	movlw	3
 15545  0040F6  596F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15546  0040F8  E324               	bnc	l1300
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15550  0040FA  2B80               	incf	_vscp_probe_cnt& (0+255),f,b
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15554  0040FC  0E02               	movlw	2
 15555  0040FE  6580               	cpfsgt	_vscp_probe_cnt& (0+255),b
 15556  004100  D017               	goto	l1308
 15557                           
 15558                           ; BSR set to: 0
 15559                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15560  004102  6657               	tstfsz	_vscp_probe_address,c
 15561  004104  D005               	goto	l1309
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15565  004106  2A57               	incf	_vscp_probe_address,f,c
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15569  004108  6B7F               	clrf	_vscp_node_substate& (0+255),b
 15570                           
 15571                           ; BSR set to: 0
 15572                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15573  00410A  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15574  00410C  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15575  00410E  D7EE               	goto	l12580
 15576  004110                     l1309:
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;vscp_firmware.c: 285: else {
 15580                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15581  004110  C057  F07D         	movff	_vscp_probe_address,_vscp_nickname
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15585  004114  0E03               	movlw	3
 15586  004116  6F7E               	movwf	_vscp_node_state& (0+255),b
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15590  004118  6B7F               	clrf	_vscp_node_substate& (0+255),b
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15594  00411A  517D               	movf	_vscp_nickname& (0+255),w,b
 15595  00411C  EC51  F024         	call	_vscp_writeNicknamePermanent
 15596                           
 15597                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15598  004120  0E40               	movlw	64
 15599  004122  EC46  F024         	call	_vscp_setSegmentCRC
 15600                           
 15601                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15602  004126  0100               	movlb	0	; () banked
 15603  004128  6B80               	clrf	_vscp_probe_cnt& (0+255),b
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15607  00412A  ECCE  F023         	call	_vscp_goActiveState	;wreg free
 15608  00412E  D009               	goto	l1300
 15609  004130                     l1308:
 15610                           
 15611                           ; BSR set to: 0
 15612                           ;vscp_firmware.c: 300: else {
 15613                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15614  004130  6B7F               	clrf	_vscp_node_substate& (0+255),b
 15615  004132  D007               	goto	l1300
 15616  004134                     l12612:
 15617  004134  0100               	movlb	0	; () banked
 15618  004136  517F               	movf	_vscp_node_substate& (0+255),w,b
 15619                           
 15620                           ; Switch size 1, requested type "space"
 15621                           ; Number of cases is 3, Range of values is 0 to 2
 15622                           ; switch strategies available:
 15623                           ; Name         Instructions Cycles
 15624                           ; simple_byte           10     6 (average)
 15625                           ;	Chosen strategy is simple_byte
 15626  004138  E0AA               	bz	l12542
 15627  00413A  0A01               	xorlw	1	; case 1
 15628  00413C  E0C8               	bz	l1301
 15629  00413E  0A03               	xorlw	3	; case 2
 15630  004140  E1F7               	bnz	l1308
 15631  004142                     l1300:
 15632                           
 15633                           ; BSR set to: 0
 15634                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15635  004142  6B96               	clrf	_vscp_imsg& (0+255),b
 15636                           
 15637                           ; BSR set to: 0
 15638  004144  0012               	return	
 15639  004146                     __end_of_vscp_handleProbeState:
 15640                           	opt stack 0
 15641                           tblptru	equ	0xFF8
 15642                           tblptrh	equ	0xFF7
 15643                           tblptrl	equ	0xFF6
 15644                           tablat	equ	0xFF5
 15645                           prodh	equ	0xFF4
 15646                           prodl	equ	0xFF3
 15647                           intcon	equ	0xFF2
 15648                           intcon2	equ	0xFF1
 15649                           postinc0	equ	0xFEE
 15650                           wreg	equ	0xFE8
 15651                           indf1	equ	0xFE7
 15652                           fsr1h	equ	0xFE2
 15653                           fsr1l	equ	0xFE1
 15654                           indf2	equ	0xFDF
 15655                           postinc2	equ	0xFDE
 15656                           postdec2	equ	0xFDD
 15657                           plusw2	equ	0xFDB
 15658                           fsr2h	equ	0xFDA
 15659                           fsr2l	equ	0xFD9
 15660                           status	equ	0xFD8
 15661                           
 15662 ;; *************** function _vscp_goActiveState *****************
 15663 ;; Defined at:
 15664 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15665 ;; Parameters:    Size  Location     Type
 15666 ;;		None
 15667 ;; Auto vars:     Size  Location     Type
 15668 ;;		None
 15669 ;; Return value:  Size  Location     Type
 15670 ;;		None               void
 15671 ;; Registers used:
 15672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15673 ;; Tracked objects:
 15674 ;;		On entry : 0/0
 15675 ;;		On exit  : F/0
 15676 ;;		Unchanged: 0/0
 15677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15678 ;;      Params:         0       0       0       0       0       0       0
 15679 ;;      Locals:         0       0       0       0       0       0       0
 15680 ;;      Temps:          0       0       0       0       0       0       0
 15681 ;;      Totals:         0       0       0       0       0       0       0
 15682 ;;Total ram usage:        0 bytes
 15683 ;; Hardware stack levels used:    1
 15684 ;; Hardware stack levels required when called:    7
 15685 ;; This function calls:
 15686 ;;		_vscp_sendEvent
 15687 ;; This function is called by:
 15688 ;;		_main
 15689 ;;		_vscp_handleProbeState
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text53
 15694  00479C                     __ptext53:
 15695                           	opt stack 0
 15696  00479C                     _vscp_goActiveState:
 15697                           	opt stack 21
 15698                           
 15699                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15700                           
 15701                           ; BSR set to: 0
 15702                           ;incstack = 0
 15703                           ;incstack = 0
 15704  00479C  0E81               	movlw	129
 15705  00479E  0100               	movlb	0	; () banked
 15706  0047A0  6FA4               	movwf	_vscp_omsg& (0+255),b
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15710  0047A2  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15714  0047A4  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 15715  0047A6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 15716                           
 15717                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15718  0047A8  0E02               	movlw	2
 15719  0047AA  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15723  0047AC  C07D  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15727  0047B0  EC76  F023         	call	_vscp_sendEvent	;wreg free
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15731  0047B4  0E01               	movlw	1
 15732  0047B6  6E56               	movwf	_vscp_initledfunc,c
 15733                           
 15734                           ; BSR set to: 0
 15735  0047B8  0C01               	retlw	1
 15736  0047BA                     __end_of_vscp_goActiveState:
 15737                           	opt stack 0
 15738                           tblptru	equ	0xFF8
 15739                           tblptrh	equ	0xFF7
 15740                           tblptrl	equ	0xFF6
 15741                           tablat	equ	0xFF5
 15742                           prodh	equ	0xFF4
 15743                           prodl	equ	0xFF3
 15744                           intcon	equ	0xFF2
 15745                           intcon2	equ	0xFF1
 15746                           postinc0	equ	0xFEE
 15747                           wreg	equ	0xFE8
 15748                           indf1	equ	0xFE7
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           plusw2	equ	0xFDB
 15755                           fsr2h	equ	0xFDA
 15756                           fsr2l	equ	0xFD9
 15757                           status	equ	0xFD8
 15758                           
 15759 ;; *************** function _vscp_sendEvent *****************
 15760 ;; Defined at:
 15761 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;		None
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;  rv              1    0        unsigned char 
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      unsigned char 
 15768 ;; Registers used:
 15769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : F/0
 15772 ;;		On exit  : F/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15775 ;;      Params:         0       0       0       0       0       0       0
 15776 ;;      Locals:         1       0       0       0       0       0       0
 15777 ;;      Temps:          0       0       0       0       0       0       0
 15778 ;;      Totals:         1       0       0       0       0       0       0
 15779 ;;Total ram usage:        1 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    6
 15782 ;; This function calls:
 15783 ;;		_sendVSCPFrame
 15784 ;; This function is called by:
 15785 ;;		_vscp_handleProbeState
 15786 ;;		_vscp_goActiveState
 15787 ;;		_vscp_sendHeartBeat
 15788 ;;		_vscp_newNodeOnline
 15789 ;;		_vscp_handleProtocolEvent
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           	psect	text54
 15794  0046EC                     __ptext54:
 15795                           	opt stack 0
 15796  0046EC                     _vscp_sendEvent:
 15797                           	opt stack 21
 15798                           
 15799                           ; BSR set to: 0
 15800                           
 15801                           ; BSR set to: 0
 15802                           ;incstack = 0
 15803                           ;incstack = 0
 15804  0046EC  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15805  0046F0  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15806  0046F4  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15807  0046F8  C07D  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15808  0046FC  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15809  004700  51A4               	movf	_vscp_omsg& (0+255),w,b
 15810  004702  0B0F               	andlw	15
 15811  004704  6E44               	movwf	?_sendVSCPFrame+5,c
 15812  004706  0E00               	movlw	high (_vscp_omsg+5)
 15813  004708  6E46               	movwf	?_sendVSCPFrame+7,c
 15814  00470A  0EA9               	movlw	low (_vscp_omsg+5)
 15815  00470C  6E45               	movwf	?_sendVSCPFrame+6,c
 15816  00470E  EFA3  F020         	goto	_sendVSCPFrame	;wreg free
 15817  004712                     __end_of_vscp_sendEvent:
 15818                           	opt stack 0
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           intcon2	equ	0xFF1
 15827                           postinc0	equ	0xFEE
 15828                           wreg	equ	0xFE8
 15829                           indf1	equ	0xFE7
 15830                           fsr1h	equ	0xFE2
 15831                           fsr1l	equ	0xFE1
 15832                           indf2	equ	0xFDF
 15833                           postinc2	equ	0xFDE
 15834                           postdec2	equ	0xFDD
 15835                           plusw2	equ	0xFDB
 15836                           fsr2h	equ	0xFDA
 15837                           fsr2l	equ	0xFD9
 15838                           status	equ	0xFD8
 15839                           
 15840 ;; *************** function _sendVSCPFrame *****************
 15841 ;; Defined at:
 15842 ;;		line 3523 in file "../main.c"
 15843 ;; Parameters:    Size  Location     Type
 15844 ;;  vscpclass       2   62[COMRAM] unsigned short 
 15845 ;;  vscptype        1   64[COMRAM] unsigned char 
 15846 ;;  nodeid          1   65[COMRAM] unsigned char 
 15847 ;;  priority        1   66[COMRAM] unsigned char 
 15848 ;;  size            1   67[COMRAM] unsigned char 
 15849 ;;  pData           2   68[COMRAM] PTR unsigned char 
 15850 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;  id              4   70[COMRAM] unsigned long 
 15853 ;; Return value:  Size  Location     Type
 15854 ;;                  1    wreg      unsigned char 
 15855 ;; Registers used:
 15856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15857 ;; Tracked objects:
 15858 ;;		On entry : F/0
 15859 ;;		On exit  : F/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15862 ;;      Params:         8       0       0       0       0       0       0
 15863 ;;      Locals:         4       0       0       0       0       0       0
 15864 ;;      Temps:          0      20       0       0       0       0       0
 15865 ;;      Totals:        12      20       0       0       0       0       0
 15866 ;;Total ram usage:       32 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; Hardware stack levels required when called:    5
 15869 ;; This function calls:
 15870 ;;		_sendCANFrame
 15871 ;; This function is called by:
 15872 ;;		_doApplicationOneSecondWork
 15873 ;;		_SendInformationEvent
 15874 ;;		_vscp_sendEvent
 15875 ;; This function uses a non-reentrant model
 15876 ;;
 15877                           
 15878                           	psect	text55
 15879  004146                     __ptext55:
 15880                           	opt stack 0
 15881  004146                     _sendVSCPFrame:
 15882                           	opt stack 23
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;main.c: 3524: uint32_t id = ( (uint32_t)priority << 26 ) |
 15886                           ;main.c: 3525: ( (uint32_t)vscpclass << 16 ) |
 15887                           ;main.c: 3526: ( (uint32_t)vscptype << 8 ) |
 15888                           ;main.c: 3527: nodeid;
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;incstack = 0
 15892                           ;incstack = 0
 15893  004146  C041  F0BB         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15894  00414A  6BBC               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15895  00414C  6BBD               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15896  00414E  6BBE               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15897  004150  C0BD  F0BE         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15898  004154  C0BC  F0BD         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15899  004158  C0BB  F0BC         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15900  00415C  6BBB               	clrf	??_sendVSCPFrame& (0+255),b
 15901  00415E  503F               	movf	sendVSCPFrame@vscpclass,w,c
 15902  004160  6FBF               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15903  004162  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 15904  004164  6FC0               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15905  004166  6BC1               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15906  004168  6BC2               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15907  00416A  C0C0  F0C2         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15908  00416E  C0BF  F0C1         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15909  004172  6BC0               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15910  004174  6BBF               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15911  004176  C043  F0C3         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15912  00417A  6BC4               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15913  00417C  6BC5               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15914  00417E  6BC6               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15915  004180  0E1A               	movlw	26
 15916  004182                     u17775:
 15917  004182  90D8               	bcf	status,0,c
 15918  004184  37C3               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15919  004186  37C4               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15920  004188  37C5               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15921  00418A  37C6               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15922  00418C  2EE8               	decfsz	wreg,f,c
 15923  00418E  D7F9               	goto	u17775
 15924  004190  51BF               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15925  004192  11C3               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15926  004194  6FC7               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15927  004196  51C0               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15928  004198  11C4               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15929  00419A  6FC8               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15930  00419C  51C1               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15931  00419E  11C5               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15932  0041A0  6FC9               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15933  0041A2  51C2               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15934  0041A4  11C6               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15935  0041A6  6FCA               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15936  0041A8  51BB               	movf	??_sendVSCPFrame& (0+255),w,b
 15937  0041AA  11C7               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15938  0041AC  6FCB               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15939  0041AE  51BC               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15940  0041B0  11C8               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15941  0041B2  6FCC               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15942  0041B4  51BD               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15943  0041B6  11C9               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15944  0041B8  6FCD               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15945  0041BA  51BE               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15946  0041BC  11CA               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15947  0041BE  6FCE               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15948  0041C0  5042               	movf	sendVSCPFrame@nodeid,w,c
 15949  0041C2  11CB               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15950  0041C4  6E47               	movwf	sendVSCPFrame@id,c
 15951  0041C6  51CC               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15952  0041C8  6E48               	movwf	sendVSCPFrame@id+1,c
 15953  0041CA  51CD               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15954  0041CC  6E49               	movwf	sendVSCPFrame@id+2,c
 15955  0041CE  51CE               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15956  0041D0  6E4A               	movwf	sendVSCPFrame@id+3,c
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;main.c: 3529: if ( !sendCANFrame( id, size, pData ) ) {
 15960  0041D2  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 15961  0041D6  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15962  0041DA  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15963  0041DE  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15964  0041E2  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15965  0041E6  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15966  0041EA  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 15967  0041EE  ECBC  F022         	call	_sendCANFrame	;wreg free
 15968  0041F2  0900               	iorlw	0
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;main.c: 3530: return 0;
 15972  0041F4  0E00               	movlw	0
 15973  0041F6  A4D8               	btfss	status,2,c
 15974                           
 15975                           ; BSR set to: 0
 15976                           ;main.c: 3531: }
 15977                           ;main.c: 3533: return 1;
 15978  0041F8  0E01               	movlw	1
 15979                           
 15980                           ; BSR set to: 0
 15981  0041FA  0012               	return	
 15982  0041FC                     __end_of_sendVSCPFrame:
 15983                           	opt stack 0
 15984                           tblptru	equ	0xFF8
 15985                           tblptrh	equ	0xFF7
 15986                           tblptrl	equ	0xFF6
 15987                           tablat	equ	0xFF5
 15988                           prodh	equ	0xFF4
 15989                           prodl	equ	0xFF3
 15990                           intcon	equ	0xFF2
 15991                           intcon2	equ	0xFF1
 15992                           postinc0	equ	0xFEE
 15993                           wreg	equ	0xFE8
 15994                           indf1	equ	0xFE7
 15995                           fsr1h	equ	0xFE2
 15996                           fsr1l	equ	0xFE1
 15997                           indf2	equ	0xFDF
 15998                           postinc2	equ	0xFDE
 15999                           postdec2	equ	0xFDD
 16000                           plusw2	equ	0xFDB
 16001                           fsr2h	equ	0xFDA
 16002                           fsr2l	equ	0xFD9
 16003                           status	equ	0xFD8
 16004                           
 16005 ;; *************** function _sendCANFrame *****************
 16006 ;; Defined at:
 16007 ;;		line 3568 in file "../main.c"
 16008 ;; Parameters:    Size  Location     Type
 16009 ;;  id              4   54[COMRAM] unsigned long 
 16010 ;;  dlc             1   58[COMRAM] unsigned char 
 16011 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 16012 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16013 ;; Auto vars:     Size  Location     Type
 16014 ;;  rv              1    0        unsigned char 
 16015 ;; Return value:  Size  Location     Type
 16016 ;;                  1    wreg      unsigned char 
 16017 ;; Registers used:
 16018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16019 ;; Tracked objects:
 16020 ;;		On entry : F/0
 16021 ;;		On exit  : F/0
 16022 ;;		Unchanged: 0/0
 16023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16024 ;;      Params:         7       0       0       0       0       0       0
 16025 ;;      Locals:         1       0       0       0       0       0       0
 16026 ;;      Temps:          0       0       0       0       0       0       0
 16027 ;;      Totals:         8       0       0       0       0       0       0
 16028 ;;Total ram usage:        8 bytes
 16029 ;; Hardware stack levels used:    1
 16030 ;; Hardware stack levels required when called:    4
 16031 ;; This function calls:
 16032 ;;		_ECANSendMessage
 16033 ;; This function is called by:
 16034 ;;		_sendVSCPFrame
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           	psect	text56
 16039  004578                     __ptext56:
 16040                           	opt stack 0
 16041  004578                     _sendCANFrame:
 16042                           	opt stack 23
 16043  004578                     l14596:
 16044                           
 16045                           ;main.c: 3573: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16046  004578  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 16047  00457C  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16048  004580  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16049  004584  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16050  004588  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16051  00458C  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16052  004590  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16053  004594  0E20               	movlw	32
 16054  004596  6E19               	movwf	?_ECANSendMessage+7,c
 16055  004598  EC48  F01A         	call	_ECANSendMessage	;wreg free
 16056  00459C  0900               	iorlw	0
 16057  00459E  E0EC               	bz	l14596
 16058                           
 16059                           ;main.c: 3576: }
 16060                           ;main.c: 3577: }
 16061                           ;main.c: 3579: vscp_omsg.flags = 0;
 16062                           
 16063                           ;main.c: 3575: break;
 16064  0045A0  0100               	movlb	0	; () banked
 16065  0045A2  6BA4               	clrf	_vscp_omsg& (0+255),b
 16066                           
 16067                           ; BSR set to: 0
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;main.c: 3581: return rv;
 16071  0045A4  0C01               	retlw	1
 16072  0045A6                     __end_of_sendCANFrame:
 16073                           	opt stack 0
 16074                           tblptru	equ	0xFF8
 16075                           tblptrh	equ	0xFF7
 16076                           tblptrl	equ	0xFF6
 16077                           tablat	equ	0xFF5
 16078                           prodh	equ	0xFF4
 16079                           prodl	equ	0xFF3
 16080                           intcon	equ	0xFF2
 16081                           intcon2	equ	0xFF1
 16082                           postinc0	equ	0xFEE
 16083                           wreg	equ	0xFE8
 16084                           indf1	equ	0xFE7
 16085                           fsr1h	equ	0xFE2
 16086                           fsr1l	equ	0xFE1
 16087                           indf2	equ	0xFDF
 16088                           postinc2	equ	0xFDE
 16089                           postdec2	equ	0xFDD
 16090                           plusw2	equ	0xFDB
 16091                           fsr2h	equ	0xFDA
 16092                           fsr2l	equ	0xFD9
 16093                           status	equ	0xFD8
 16094                           
 16095 ;; *************** function _ECANSendMessage *****************
 16096 ;; Defined at:
 16097 ;;		line 617 in file "../ECAN.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;  id              4   17[COMRAM] unsigned long 
 16100 ;;  data            2   21[COMRAM] PTR unsigned char 
 16101 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16102 ;;  dataLen         1   23[COMRAM] unsigned char 
 16103 ;;  msgFlags        1   24[COMRAM] enum E16315
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 16106 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16107 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16108 ;;		 -> B0CON(1), 
 16109 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 16110 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16111 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16112 ;;		 -> B0CON(1), 
 16113 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 16114 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16115 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16116 ;;		 -> B0CON(1), 
 16117 ;;  i               1   51[COMRAM] unsigned char 
 16118 ;;  temp            1   50[COMRAM] unsigned char 
 16119 ;;  tempBSEL0       1   47[COMRAM] struct .
 16120 ;;  j               1   46[COMRAM] unsigned char 
 16121 ;;  buffers         1   45[COMRAM] unsigned char 
 16122 ;;  mode            1   44[COMRAM] unsigned char 
 16123 ;; Return value:  Size  Location     Type
 16124 ;;                  1    wreg      enum E15660
 16125 ;; Registers used:
 16126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16127 ;; Tracked objects:
 16128 ;;		On entry : 0/0
 16129 ;;		On exit  : 0/0
 16130 ;;		Unchanged: 0/0
 16131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16132 ;;      Params:         8       0       0       0       0       0       0
 16133 ;;      Locals:        28       0       0       0       0       0       0
 16134 ;;      Temps:          1       0       0       0       0       0       0
 16135 ;;      Totals:        37       0       0       0       0       0       0
 16136 ;;Total ram usage:       37 bytes
 16137 ;; Hardware stack levels used:    1
 16138 ;; Hardware stack levels required when called:    3
 16139 ;; This function calls:
 16140 ;;		__CANIDToRegs
 16141 ;; This function is called by:
 16142 ;;		_sendCANFrame
 16143 ;; This function uses a non-reentrant model
 16144 ;;
 16145                           
 16146                           	psect	text57
 16147  003490                     __ptext57:
 16148                           	opt stack 0
 16149  003490                     _ECANSendMessage:
 16150                           	opt stack 23
 16151                           
 16152                           ;ECAN.c: 619: BYTE mode;
 16153                           ;ECAN.c: 620: BYTE buffers;
 16154                           ;ECAN.c: 628: BYTE i,j;
 16155                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16156                           ;ECAN.c: 630: BYTE* pb[9];
 16157                           ;ECAN.c: 631: BYTE temp;
 16158                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16159                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;incstack = 0
 16163                           ;incstack = 0
 16164  003490  0E0F               	movlw	15	;volatile
 16165  003492  6E1C               	movwf	ECANSendMessage@pb+1,c
 16166  003494  0E40               	movlw	64	;volatile
 16167  003496  6E1B               	movwf	ECANSendMessage@pb,c
 16168                           
 16169                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16170  003498  0E0F               	movlw	15	;volatile
 16171  00349A  6E1E               	movwf	ECANSendMessage@pb+3,c
 16172  00349C  0E30               	movlw	48	;volatile
 16173  00349E  6E1D               	movwf	ECANSendMessage@pb+2,c
 16174                           
 16175                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16176  0034A0  0E0F               	movlw	15	;volatile
 16177  0034A2  6E20               	movwf	ECANSendMessage@pb+5,c
 16178  0034A4  0E20               	movlw	32	;volatile
 16179  0034A6  6E1F               	movwf	ECANSendMessage@pb+4,c
 16180                           
 16181                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16182  0034A8  0E0E               	movlw	14	;volatile
 16183  0034AA  6E22               	movwf	ECANSendMessage@pb+7,c
 16184  0034AC  0E20               	movlw	32	;volatile
 16185  0034AE  6E21               	movwf	ECANSendMessage@pb+6,c
 16186                           
 16187                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16188  0034B0  0E0E               	movlw	14	;volatile
 16189  0034B2  6E24               	movwf	ECANSendMessage@pb+9,c
 16190  0034B4  0E30               	movlw	48	;volatile
 16191  0034B6  6E23               	movwf	ECANSendMessage@pb+8,c
 16192                           
 16193                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16194  0034B8  0E0E               	movlw	14	;volatile
 16195  0034BA  6E26               	movwf	ECANSendMessage@pb+11,c
 16196  0034BC  0E40               	movlw	64	;volatile
 16197  0034BE  6E25               	movwf	ECANSendMessage@pb+10,c
 16198                           
 16199                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16200  0034C0  0E0E               	movlw	14	;volatile
 16201  0034C2  6E28               	movwf	ECANSendMessage@pb+13,c
 16202  0034C4  0E50               	movlw	80	;volatile
 16203  0034C6  6E27               	movwf	ECANSendMessage@pb+12,c
 16204                           
 16205                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16206  0034C8  0E0E               	movlw	14	;volatile
 16207  0034CA  6E2A               	movwf	ECANSendMessage@pb+15,c
 16208  0034CC  0E60               	movlw	96	;volatile
 16209  0034CE  6E29               	movwf	ECANSendMessage@pb+14,c
 16210                           
 16211                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16212  0034D0  0E0E               	movlw	14	;volatile
 16213  0034D2  6E2C               	movwf	ECANSendMessage@pb+17,c
 16214  0034D4  0E70               	movlw	112	;volatile
 16215  0034D6  6E2B               	movwf	ECANSendMessage@pb+16,c
 16216                           
 16217                           ; BSR set to: 14
 16218                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16219  0034D8  5077               	movf	3959,w,c	;volatile
 16220  0034DA  0BC0               	andlw	192
 16221  0034DC  6E2D               	movwf	ECANSendMessage@mode,c
 16222                           
 16223                           ; BSR set to: 14
 16224                           ;ECAN.c: 660: if ( mode == 0x00 )
 16225  0034DE  662D               	tstfsz	ECANSendMessage@mode,c
 16226  0034E0  D002               	goto	l12004
 16227                           
 16228                           ; BSR set to: 14
 16229                           ;ECAN.c: 661: buffers = 2;
 16230  0034E2  0E02               	movlw	2
 16231  0034E4  D001               	goto	L49
 16232  0034E6                     l12004:
 16233                           
 16234                           ; BSR set to: 14
 16235                           ;ECAN.c: 662: else
 16236                           ;ECAN.c: 663: buffers = 8;
 16237  0034E6  0E08               	movlw	8
 16238  0034E8                     L49:
 16239  0034E8  6E2E               	movwf	ECANSendMessage@buffers,c
 16240                           
 16241                           ; BSR set to: 14
 16242                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16243  0034EA  010D               	movlb	13	; () banked
 16244  0034EC  90D8               	bcf	status,0,c
 16245  0034EE  31F8               	rrcf	248,w,b	;volatile
 16246  0034F0  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 16247                           
 16248                           ; BSR set to: 13
 16249                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16250  0034F2  6A34               	clrf	ECANSendMessage@i,c
 16251  0034F4  D07D               	goto	l12064
 16252  0034F6                     l12010:
 16253                           
 16254                           ;ECAN.c: 688: {
 16255                           ;ECAN.c: 693: ptr = pb[i];
 16256  0034F6  5034               	movf	ECANSendMessage@i,w,c
 16257  0034F8  0D02               	mullw	2
 16258  0034FA  50F3               	movf	prodl,w,c
 16259  0034FC  0F1B               	addlw	low ECANSendMessage@pb
 16260  0034FE  6ED9               	movwf	fsr2l,c
 16261  003500  6ADA               	clrf	fsr2h,c
 16262  003502  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 16263  003506  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 16264                           
 16265                           ;ECAN.c: 694: tempPtr = ptr;
 16266  00350A  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16267  00350E  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16268                           
 16269                           ;ECAN.c: 702: if ( i > 2 )
 16270  003512  0E02               	movlw	2
 16271  003514  6434               	cpfsgt	ECANSendMessage@i,c
 16272  003516  D004               	goto	l12022
 16273                           
 16274                           ;ECAN.c: 703: {
 16275                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16276  003518  90D8               	bcf	status,0,c
 16277  00351A  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16278                           
 16279                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16280  00351C  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 16281  00351E  D067               	goto	l12062
 16282  003520                     l12022:
 16283                           
 16284                           ;ECAN.c: 714: }
 16285                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16286  003520  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16287  003524  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16288  003528  50DF               	movf	indf2,w,c
 16289  00352A  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16290  00352C  B61A               	btfsc	??_ECANSendMessage,3,c
 16291  00352E  D05F               	goto	l12062
 16292                           
 16293                           ;ECAN.c: 721: {
 16294                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16295  003530  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16296  003534  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16297  003538  0EFC               	movlw	252
 16298  00353A  16DF               	andwf	indf2,f,c
 16299                           
 16300                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16301  00353C  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16302  003540  0E03               	movlw	3
 16303  003542  161A               	andwf	??_ECANSendMessage,f,c
 16304  003544  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16305  003548  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16306  00354C  501A               	movf	??_ECANSendMessage,w,c
 16307  00354E  12DF               	iorwf	indf2,f,c
 16308                           
 16309                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16310  003550  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 16311  003552  D004               	goto	l168
 16312                           
 16313                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16314  003554  5018               	movf	ECANSendMessage@dataLen,w,c
 16315  003556  0940               	iorlw	64
 16316  003558  6E33               	movwf	ECANSendMessage@temp,c
 16317  00355A  D002               	goto	l12032
 16318  00355C                     l168:
 16319                           
 16320                           ;ECAN.c: 729: else
 16321                           ;ECAN.c: 730: temp = dataLen;
 16322  00355C  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16323  003560                     l12032:
 16324                           
 16325                           ;ECAN.c: 732: *(ptr+5) = temp;
 16326  003560  EE20 F005          	lfsr	2,5
 16327  003564  5035               	movf	ECANSendMessage@ptr,w,c
 16328  003566  26D9               	addwf	fsr2l,f,c
 16329  003568  5036               	movf	ECANSendMessage@ptr+1,w,c
 16330  00356A  22DA               	addwfc	fsr2h,f,c
 16331  00356C  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 16332                           
 16333                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16334  003570  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 16335  003572  D003               	goto	l170
 16336                           
 16337                           ;ECAN.c: 736: temp = 1;
 16338  003574  0E01               	movlw	1
 16339  003576  6E33               	movwf	ECANSendMessage@temp,c
 16340  003578  D001               	goto	l12038
 16341  00357A                     l170:
 16342                           
 16343                           ;ECAN.c: 738: else
 16344                           ;ECAN.c: 739: temp = 0;
 16345  00357A  6A33               	clrf	ECANSendMessage@temp,c
 16346  00357C                     l12038:
 16347                           
 16348                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16349  00357C  2835               	incf	ECANSendMessage@ptr,w,c
 16350  00357E  6E08               	movwf	?__CANIDToRegs,c
 16351  003580  0E00               	movlw	0
 16352  003582  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 16353  003584  6E09               	movwf	?__CANIDToRegs+1,c
 16354  003586  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16355  00358A  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16356  00358E  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16357  003592  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16358  003596  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16359  00359A  EC63  F01D         	call	__CANIDToRegs	;wreg free
 16360                           
 16361                           ;ECAN.c: 745: ptr += 6;
 16362  00359E  0E06               	movlw	6
 16363  0035A0  2635               	addwf	ECANSendMessage@ptr,f,c
 16364  0035A2  0E00               	movlw	0
 16365  0035A4  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 16366                           
 16367                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16368  0035A6  6A2F               	clrf	ECANSendMessage@j,c
 16369  0035A8  D00F               	goto	l12052
 16370  0035AA                     l12044:
 16371                           
 16372                           ;ECAN.c: 748: *ptr++ = *data++;
 16373  0035AA  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 16374  0035AE  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16375  0035B2  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16376  0035B6  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16377  0035BA  CFDF FFE7          	movff	indf2,indf1
 16378  0035BE  4A16               	infsnz	ECANSendMessage@data,f,c
 16379  0035C0  2A17               	incf	ECANSendMessage@data+1,f,c
 16380  0035C2  4A35               	infsnz	ECANSendMessage@ptr,f,c
 16381  0035C4  2A36               	incf	ECANSendMessage@ptr+1,f,c
 16382  0035C6  2A2F               	incf	ECANSendMessage@j,f,c
 16383  0035C8                     l12052:
 16384  0035C8  5018               	movf	ECANSendMessage@dataLen,w,c
 16385  0035CA  5C2F               	subwf	ECANSendMessage@j,w,c
 16386  0035CC  E3EE               	bnc	l12044
 16387                           
 16388                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16389  0035CE  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16390  0035D2  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16391  0035D6  50DF               	movf	indf2,w,c
 16392  0035D8  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16393  0035DA  B41A               	btfsc	??_ECANSendMessage,2,c
 16394  0035DC  D006               	goto	l12058
 16395                           
 16396                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16397  0035DE  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16398  0035E2  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16399  0035E6  0E00               	movlw	0
 16400  0035E8  86DB               	bsf	plusw2,3,c
 16401  0035EA                     l12058:
 16402                           
 16403                           ;ECAN.c: 755: return TRUE;
 16404  0035EA  0E01               	movlw	1
 16405  0035EC  D005               	goto	l176
 16406  0035EE                     l12062:
 16407  0035EE  2A34               	incf	ECANSendMessage@i,f,c
 16408  0035F0                     l12064:
 16409  0035F0  502E               	movf	ECANSendMessage@buffers,w,c
 16410  0035F2  5C34               	subwf	ECANSendMessage@i,w,c
 16411  0035F4  E380               	bnc	l12010
 16412                           
 16413                           ;ECAN.c: 756: }
 16414                           ;ECAN.c: 757: }
 16415                           ;ECAN.c: 760: return FALSE;
 16416  0035F6  0E00               	movlw	0
 16417  0035F8                     l176:
 16418  0035F8  0012               	return	
 16419  0035FA                     __end_of_ECANSendMessage:
 16420                           	opt stack 0
 16421                           tblptru	equ	0xFF8
 16422                           tblptrh	equ	0xFF7
 16423                           tblptrl	equ	0xFF6
 16424                           tablat	equ	0xFF5
 16425                           prodh	equ	0xFF4
 16426                           prodl	equ	0xFF3
 16427                           intcon	equ	0xFF2
 16428                           intcon2	equ	0xFF1
 16429                           postinc0	equ	0xFEE
 16430                           wreg	equ	0xFE8
 16431                           indf1	equ	0xFE7
 16432                           fsr1h	equ	0xFE2
 16433                           fsr1l	equ	0xFE1
 16434                           indf2	equ	0xFDF
 16435                           postinc2	equ	0xFDE
 16436                           postdec2	equ	0xFDD
 16437                           plusw2	equ	0xFDB
 16438                           fsr2h	equ	0xFDA
 16439                           fsr2l	equ	0xFD9
 16440                           status	equ	0xFD8
 16441                           
 16442 ;; *************** function __CANIDToRegs *****************
 16443 ;; Defined at:
 16444 ;;		line 1099 in file "../ECAN.c"
 16445 ;; Parameters:    Size  Location     Type
 16446 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 16447 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), RXM1SIDH(1), 
 16448 ;;		 -> RXF1SIDH(1), B5CON(1), B4CON(1), B3CON(1), 
 16449 ;;		 -> B2CON(1), B1CON(1), B0CON(1), 
 16450 ;;  val             4    9[COMRAM] unsigned long 
 16451 ;;  type            1   13[COMRAM] unsigned char 
 16452 ;; Auto vars:     Size  Location     Type
 16453 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 16454 ;;		 -> _CANIDToRegs@val(4), 
 16455 ;; Return value:  Size  Location     Type
 16456 ;;		None               void
 16457 ;; Registers used:
 16458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16459 ;; Tracked objects:
 16460 ;;		On entry : 0/F
 16461 ;;		On exit  : 0/0
 16462 ;;		Unchanged: 0/0
 16463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16464 ;;      Params:         7       0       0       0       0       0       0
 16465 ;;      Locals:         1       0       0       0       0       0       0
 16466 ;;      Temps:          2       0       0       0       0       0       0
 16467 ;;      Totals:        10       0       0       0       0       0       0
 16468 ;;Total ram usage:       10 bytes
 16469 ;; Hardware stack levels used:    1
 16470 ;; Hardware stack levels required when called:    2
 16471 ;; This function calls:
 16472 ;;		Nothing
 16473 ;; This function is called by:
 16474 ;;		_ECANSendMessage
 16475 ;;		_calculateSetFilterMask
 16476 ;; This function uses a non-reentrant model
 16477 ;;
 16478                           
 16479                           	psect	text58
 16480  003AC6                     __ptext58:
 16481                           	opt stack 0
 16482  003AC6                     __CANIDToRegs:
 16483                           	opt stack 23
 16484                           
 16485                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16486                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16487                           
 16488                           ;incstack = 0
 16489                           ;incstack = 0
 16490  003AC6  0E0A               	movlw	low __CANIDToRegs@val
 16491  003AC8  6E11               	movwf	__CANIDToRegs@Value,c
 16492                           
 16493                           ;ECAN.c: 1104: if ( type == 0 )
 16494  003ACA  660E               	tstfsz	__CANIDToRegs@type,c
 16495  003ACC  D022               	goto	l12080
 16496                           
 16497                           ;ECAN.c: 1105: {
 16498                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16499  003ACE  5011               	movf	__CANIDToRegs@Value,w,c
 16500  003AD0  6ED9               	movwf	fsr2l,c
 16501  003AD2  6ADA               	clrf	fsr2h,c
 16502  003AD4  50DF               	movf	indf2,w,c
 16503  003AD6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16504  003AD8  90D8               	bcf	status,0,c
 16505  003ADA  320F               	rrcf	??__CANIDToRegs,f,c
 16506  003ADC  90D8               	bcf	status,0,c
 16507  003ADE  320F               	rrcf	??__CANIDToRegs,f,c
 16508  003AE0  90D8               	bcf	status,0,c
 16509  003AE2  300F               	rrcf	??__CANIDToRegs,w,c
 16510                           
 16511                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16512  003AE4  D862               	call	PL48	;call to abstracted procedure
 16513  003AE6  2AD9               	incf	fsr2l,f,c
 16514  003AE8  6ADA               	clrf	fsr2h,c
 16515  003AEA  D872               	call	PL98	;call to abstracted procedure
 16516  003AEC                     u15505:
 16517  003AEC  90D8               	bcf	status,0,c
 16518  003AEE  360F               	rlcf	??__CANIDToRegs,f,c
 16519  003AF0  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16520  003AF2  D7FC               	goto	u15505
 16521  003AF4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16522                           
 16523                           ;ECAN.c: 1109: ptr++;
 16524                           
 16525                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16526  003AF8  D846               	call	PL30	;call to abstracted procedure
 16527  003AFA  D86A               	call	PL98	;call to abstracted procedure
 16528  003AFC                     u15515:
 16529  003AFC  90D8               	bcf	status,0,c
 16530  003AFE  360F               	rlcf	??__CANIDToRegs,f,c
 16531  003B00  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16532  003B02  D7FC               	goto	u15515
 16533  003B04  500F               	movf	??__CANIDToRegs,w,c
 16534  003B06  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16535  003B0A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16536  003B0E  6EDF               	movwf	indf2,c
 16537                           
 16538                           ;ECAN.c: 1111: }
 16539  003B10  D039               	goto	l230
 16540  003B12                     l12080:
 16541                           
 16542                           ;ECAN.c: 1112: else
 16543                           ;ECAN.c: 1113: {
 16544                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16545  003B12  5011               	movf	__CANIDToRegs@Value,w,c
 16546  003B14  D842               	call	PL42	;call to abstracted procedure
 16547  003B16  0E05               	movlw	5
 16548  003B18  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16549  003B1A                     u15525:
 16550  003B1A  90D8               	bcf	status,0,c
 16551  003B1C  320F               	rrcf	??__CANIDToRegs,f,c
 16552  003B1E  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16553  003B20  D7FC               	goto	u15525
 16554  003B22  500F               	movf	??__CANIDToRegs,w,c
 16555                           
 16556                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16557  003B24  D842               	call	PL48	;call to abstracted procedure
 16558  003B26  0E03               	movlw	3
 16559  003B28  D849               	call	PL62	;call to abstracted procedure
 16560  003B2A  360F               	rlcf	??__CANIDToRegs,f,c
 16561  003B2C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16562                           
 16563                           ;ECAN.c: 1117: ptr++;
 16564                           
 16565                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16566  003B30  D82A               	call	PL30	;call to abstracted procedure
 16567  003B32  0E02               	movlw	2
 16568  003B34  D843               	call	PL62	;call to abstracted procedure
 16569  003B36  340F               	rlcf	??__CANIDToRegs,w,c
 16570  003B38  0BE0               	andlw	224
 16571  003B3A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16572  003B3E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16573  003B42  6EDF               	movwf	indf2,c
 16574                           
 16575                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16576  003B44  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16577  003B48  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16578  003B4C  0E00               	movlw	0
 16579  003B4E  86DB               	bsf	plusw2,3,c
 16580                           
 16581                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16582  003B50  5011               	movf	__CANIDToRegs@Value,w,c
 16583  003B52  D823               	call	PL42	;call to abstracted procedure
 16584  003B54  0E03               	movlw	3
 16585  003B56  160F               	andwf	??__CANIDToRegs,f,c
 16586  003B58  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16587                           
 16588                           ;ECAN.c: 1122: ptr++;
 16589                           
 16590                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16591  003B5C  D814               	call	PL30	;call to abstracted procedure
 16592  003B5E  2AD9               	incf	fsr2l,f,c
 16593  003B60  6ADA               	clrf	fsr2h,c
 16594  003B62  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16595  003B66  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16596  003B6A  CFDF FFE7          	movff	indf2,indf1
 16597                           
 16598                           ;ECAN.c: 1124: ptr++;
 16599  003B6E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16600  003B70  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16601                           
 16602                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16603  003B72  5011               	movf	__CANIDToRegs@Value,w,c
 16604  003B74  6ED9               	movwf	fsr2l,c
 16605  003B76  6ADA               	clrf	fsr2h,c
 16606  003B78  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16607  003B7C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16608  003B80  CFDF FFE7          	movff	indf2,indf1
 16609  003B84                     l230:
 16610  003B84  0012               	return	
 16611  003B86                     __end_of__CANIDToRegs:
 16612                           	opt stack 0
 16613  003B86                     PL30:
 16614                           	opt stack 23
 16615  003B86  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16616  003B8A  500F               	movf	??__CANIDToRegs,w,c
 16617  003B8C  12DF               	iorwf	indf2,f,c
 16618  003B8E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16619  003B90  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16620  003B92  5011               	movf	__CANIDToRegs@Value,w,c
 16621  003B94  6ED9               	movwf	fsr2l,c
 16622  003B96  6ADA               	clrf	fsr2h,c
 16623  003B98  0012               	return	
 16624  003B9A                     __end_ofPL30:
 16625                           	opt stack 0
 16626  003B9A                     PL42:
 16627                           	opt stack 23
 16628  003B9A  6ED9               	movwf	fsr2l,c
 16629  003B9C  6ADA               	clrf	fsr2h,c
 16630  003B9E  0E02               	movlw	2
 16631  003BA0  26D9               	addwf	fsr2l,f,c
 16632  003BA2  6ADA               	clrf	fsr2h,c
 16633  003BA4  50DF               	movf	indf2,w,c
 16634  003BA6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16635  003BA8  0012               	return	
 16636  003BAA                     __end_ofPL42:
 16637                           	opt stack 0
 16638  003BAA                     PL48:
 16639                           	opt stack 23
 16640  003BAA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16641  003BAE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16642  003BB2  6EDF               	movwf	indf2,c
 16643  003BB4  5011               	movf	__CANIDToRegs@Value,w,c
 16644  003BB6  6ED9               	movwf	fsr2l,c
 16645  003BB8  6ADA               	clrf	fsr2h,c
 16646  003BBA  0012               	return	
 16647  003BBC                     __end_ofPL48:
 16648                           	opt stack 0
 16649  003BBC                     PL62:
 16650                           	opt stack 23
 16651  003BBC  26D9               	addwf	fsr2l,f,c
 16652  003BBE  6ADA               	clrf	fsr2h,c
 16653  003BC0  50DF               	movf	indf2,w,c
 16654  003BC2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16655  003BC4  90D8               	bcf	status,0,c
 16656  003BC6  360F               	rlcf	??__CANIDToRegs,f,c
 16657  003BC8  90D8               	bcf	status,0,c
 16658  003BCA  360F               	rlcf	??__CANIDToRegs,f,c
 16659  003BCC  90D8               	bcf	status,0,c
 16660  003BCE  0012               	return	
 16661  003BD0                     __end_ofPL62:
 16662                           	opt stack 0
 16663  003BD0                     PL98:
 16664                           	opt stack 23
 16665  003BD0  50DF               	movf	indf2,w,c
 16666  003BD2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16667  003BD4  0E05               	movlw	5
 16668  003BD6  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16669  003BD8  0C05               	retlw	5
 16670  003BDA                     __end_ofPL98:
 16671                           	opt stack 0
 16672                           tblptru	equ	0xFF8
 16673                           tblptrh	equ	0xFF7
 16674                           tblptrl	equ	0xFF6
 16675                           tablat	equ	0xFF5
 16676                           prodh	equ	0xFF4
 16677                           prodl	equ	0xFF3
 16678                           intcon	equ	0xFF2
 16679                           intcon2	equ	0xFF1
 16680                           postinc0	equ	0xFEE
 16681                           wreg	equ	0xFE8
 16682                           indf1	equ	0xFE7
 16683                           fsr1h	equ	0xFE2
 16684                           fsr1l	equ	0xFE1
 16685                           indf2	equ	0xFDF
 16686                           postinc2	equ	0xFDE
 16687                           postdec2	equ	0xFDD
 16688                           plusw2	equ	0xFDB
 16689                           fsr2h	equ	0xFDA
 16690                           fsr2l	equ	0xFD9
 16691                           status	equ	0xFD8
 16692                           
 16693 ;; *************** function _vscp_getEvent *****************
 16694 ;; Defined at:
 16695 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16696 ;; Parameters:    Size  Location     Type
 16697 ;;		None
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;  rv              1   43[COMRAM] unsigned char 
 16700 ;; Return value:  Size  Location     Type
 16701 ;;                  1    wreg      unsigned char 
 16702 ;; Registers used:
 16703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16704 ;; Tracked objects:
 16705 ;;		On entry : F/0
 16706 ;;		On exit  : 0/0
 16707 ;;		Unchanged: 0/0
 16708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16709 ;;      Params:         0       0       0       0       0       0       0
 16710 ;;      Locals:         1       0       0       0       0       0       0
 16711 ;;      Temps:          0       0       0       0       0       0       0
 16712 ;;      Totals:         1       0       0       0       0       0       0
 16713 ;;Total ram usage:        1 bytes
 16714 ;; Hardware stack levels used:    1
 16715 ;; Hardware stack levels required when called:    6
 16716 ;; This function calls:
 16717 ;;		_getVSCPFrame
 16718 ;; This function is called by:
 16719 ;;		_main
 16720 ;; This function uses a non-reentrant model
 16721 ;;
 16722                           
 16723                           	psect	text59
 16724  004628                     __ptext59:
 16725                           	opt stack 0
 16726  004628                     _vscp_getEvent:
 16727                           	opt stack 23
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;vscp_firmware.c: 1309: int8_t rv;
 16731                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16732                           
 16733                           ;incstack = 0
 16734                           ;incstack = 0
 16735  004628  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 16736  00462A  D012               	goto	l1534
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16740                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16741                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16742                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16743                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16744                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16745  00462C  0E9A               	movlw	low (_vscp_imsg+4)
 16746  00462E  6E1E               	movwf	?_getVSCPFrame,c
 16747  004630  0E9B               	movlw	low (_vscp_imsg+5)
 16748  004632  6E1F               	movwf	?_getVSCPFrame+1,c
 16749  004634  0E97               	movlw	low (_vscp_imsg+1)
 16750  004636  6E20               	movwf	?_getVSCPFrame+2,c
 16751  004638  0E96               	movlw	low _vscp_imsg
 16752  00463A  6E21               	movwf	?_getVSCPFrame+3,c
 16753  00463C  0E9C               	movlw	low (_vscp_imsg+6)
 16754  00463E  6E22               	movwf	?_getVSCPFrame+4,c
 16755  004640  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 16756  004642  EC49  F021         	call	_getVSCPFrame
 16757  004646  6E2C               	movwf	vscp_getEvent@rv,c
 16758  004648  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 16759  00464A  E002               	bz	l1534
 16760                           
 16761                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16762  00464C  0100               	movlb	0	; () banked
 16763  00464E  8F96               	bsf	_vscp_imsg& (0+255),7,b
 16764  004650                     l1534:
 16765  004650  0012               	return	
 16766  004652                     __end_of_vscp_getEvent:
 16767                           	opt stack 0
 16768                           tblptru	equ	0xFF8
 16769                           tblptrh	equ	0xFF7
 16770                           tblptrl	equ	0xFF6
 16771                           tablat	equ	0xFF5
 16772                           prodh	equ	0xFF4
 16773                           prodl	equ	0xFF3
 16774                           intcon	equ	0xFF2
 16775                           intcon2	equ	0xFF1
 16776                           postinc0	equ	0xFEE
 16777                           wreg	equ	0xFE8
 16778                           indf1	equ	0xFE7
 16779                           fsr1h	equ	0xFE2
 16780                           fsr1l	equ	0xFE1
 16781                           indf2	equ	0xFDF
 16782                           postinc2	equ	0xFDE
 16783                           postdec2	equ	0xFDD
 16784                           plusw2	equ	0xFDB
 16785                           fsr2h	equ	0xFDA
 16786                           fsr2l	equ	0xFD9
 16787                           status	equ	0xFD8
 16788                           
 16789 ;; *************** function _getVSCPFrame *****************
 16790 ;; Defined at:
 16791 ;;		line 3547 in file "../main.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16794 ;;		 -> vscp_imsg(14), 
 16795 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 16796 ;;		 -> vscp_imsg(14), 
 16797 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 16798 ;;		 -> vscp_imsg(14), 
 16799 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 16800 ;;		 -> vscp_imsg(14), 
 16801 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 16802 ;;		 -> vscp_imsg(14), 
 16803 ;;  pData           1   33[COMRAM] PTR unsigned char 
 16804 ;;		 -> vscp_imsg(14), 
 16805 ;; Auto vars:     Size  Location     Type
 16806 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 16807 ;;		 -> vscp_imsg(14), 
 16808 ;;  id              4   39[COMRAM] unsigned long 
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  1    wreg      unsigned char 
 16811 ;; Registers used:
 16812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16813 ;; Tracked objects:
 16814 ;;		On entry : F/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16818 ;;      Params:         5       0       0       0       0       0       0
 16819 ;;      Locals:         5       0       0       0       0       0       0
 16820 ;;      Temps:          4       0       0       0       0       0       0
 16821 ;;      Totals:        14       0       0       0       0       0       0
 16822 ;;Total ram usage:       14 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    5
 16825 ;; This function calls:
 16826 ;;		_getCANFrame
 16827 ;; This function is called by:
 16828 ;;		_vscp_getEvent
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           	psect	text60
 16833  004292                     __ptext60:
 16834                           	opt stack 0
 16835  004292                     _getVSCPFrame:
 16836                           	opt stack 23
 16837                           
 16838                           ;incstack = 0
 16839                           ;incstack = 0
 16840                           ;getVSCPFrame@pvscpclass stored from wreg
 16841  004292  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;main.c: 3548: uint32_t id;
 16845                           ;main.c: 3550: if ( !getCANFrame(&id, pSize, pData) ) {
 16846  004296  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 16847  00429A  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16848  00429E  0E28               	movlw	getVSCPFrame@id& (0+255)
 16849  0042A0  ECE9  F022         	call	_getCANFrame
 16850  0042A4  0900               	iorlw	0
 16851  0042A6  E102               	bnz	l8556
 16852                           
 16853                           ;main.c: 3551: return 0;
 16854  0042A8  0E00               	movlw	0
 16855  0042AA  D02E               	goto	l1148
 16856  0042AC                     l8556:
 16857                           
 16858                           ;main.c: 3552: }
 16859                           ;main.c: 3554: *pNodeId = id & 0x0ff;
 16860  0042AC  501F               	movf	getVSCPFrame@pNodeId,w,c
 16861  0042AE  6ED9               	movwf	fsr2l,c
 16862  0042B0  6ADA               	clrf	fsr2h,c
 16863  0042B2  C028  FFDF         	movff	getVSCPFrame@id,indf2
 16864                           
 16865                           ;main.c: 3555: *pvscptype = (id >> 8) & 0xff;
 16866  0042B6  501E               	movf	getVSCPFrame@pvscptype,w,c
 16867  0042B8  6ED9               	movwf	fsr2l,c
 16868  0042BA  6ADA               	clrf	fsr2h,c
 16869  0042BC  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 16870                           
 16871                           ;main.c: 3556: *pvscpclass = (id >> 16) & 0x1ff;
 16872  0042C0  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16873  0042C2  6E23               	movwf	??_getVSCPFrame& (0+255),c
 16874  0042C4  0E01               	movlw	1
 16875  0042C6  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16876  0042C8  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16877  0042CA  5027               	movf	getVSCPFrame@pvscpclass,w,c
 16878  0042CC  6ED9               	movwf	fsr2l,c
 16879  0042CE  6ADA               	clrf	fsr2h,c
 16880  0042D0  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 16881  0042D4  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16882                           
 16883                           ;main.c: 3557: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16884  0042D8  5020               	movf	getVSCPFrame@pPriority,w,c
 16885  0042DA  6ED9               	movwf	fsr2l,c
 16886  0042DC  6ADA               	clrf	fsr2h,c
 16887  0042DE  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 16888  0042E2  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16889  0042E6  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16890  0042EA  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16891  0042EE  0E1B               	movlw	27
 16892  0042F0  D005               	goto	u9930
 16893  0042F2                     u9935:
 16894  0042F2  90D8               	bcf	status,0,c
 16895  0042F4  3226               	rrcf	??_getVSCPFrame+3,f,c
 16896  0042F6  3225               	rrcf	??_getVSCPFrame+2,f,c
 16897  0042F8  3224               	rrcf	??_getVSCPFrame+1,f,c
 16898  0042FA  3223               	rrcf	??_getVSCPFrame,f,c
 16899  0042FC                     u9930:
 16900  0042FC  2EE8               	decfsz	wreg,f,c
 16901  0042FE  D7F9               	goto	u9935
 16902  004300  5023               	movf	??_getVSCPFrame,w,c
 16903  004302  0B07               	andlw	7
 16904  004304  6EDF               	movwf	indf2,c
 16905                           
 16906                           ;main.c: 3559: return 1;
 16907  004306  0E01               	movlw	1
 16908  004308                     l1148:
 16909  004308  0012               	return	
 16910  00430A                     __end_of_getVSCPFrame:
 16911                           	opt stack 0
 16912                           tblptru	equ	0xFF8
 16913                           tblptrh	equ	0xFF7
 16914                           tblptrl	equ	0xFF6
 16915                           tablat	equ	0xFF5
 16916                           prodh	equ	0xFF4
 16917                           prodl	equ	0xFF3
 16918                           intcon	equ	0xFF2
 16919                           intcon2	equ	0xFF1
 16920                           postinc0	equ	0xFEE
 16921                           wreg	equ	0xFE8
 16922                           indf1	equ	0xFE7
 16923                           fsr1h	equ	0xFE2
 16924                           fsr1l	equ	0xFE1
 16925                           indf2	equ	0xFDF
 16926                           postinc2	equ	0xFDE
 16927                           postdec2	equ	0xFDD
 16928                           plusw2	equ	0xFDB
 16929                           fsr2h	equ	0xFDA
 16930                           fsr2l	equ	0xFD9
 16931                           status	equ	0xFD8
 16932                           
 16933 ;; *************** function _getCANFrame *****************
 16934 ;; Defined at:
 16935 ;;		line 3589 in file "../main.c"
 16936 ;; Parameters:    Size  Location     Type
 16937 ;;  pid             1    wreg     PTR unsigned long 
 16938 ;;		 -> getVSCPFrame@id(4), 
 16939 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 16940 ;;		 -> vscp_imsg(14), 
 16941 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 16942 ;;		 -> vscp_imsg(14), 
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;  pid             1   27[COMRAM] PTR unsigned long 
 16945 ;;		 -> getVSCPFrame@id(4), 
 16946 ;;  flags           1   28[COMRAM] enum E16425
 16947 ;; Return value:  Size  Location     Type
 16948 ;;                  1    wreg      unsigned char 
 16949 ;; Registers used:
 16950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16951 ;; Tracked objects:
 16952 ;;		On entry : F/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16956 ;;      Params:         2       0       0       0       0       0       0
 16957 ;;      Locals:         2       0       0       0       0       0       0
 16958 ;;      Temps:          0       0       0       0       0       0       0
 16959 ;;      Totals:         4       0       0       0       0       0       0
 16960 ;;Total ram usage:        4 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    4
 16963 ;; This function calls:
 16964 ;;		_ECANReceiveMessage
 16965 ;; This function is called by:
 16966 ;;		_getVSCPFrame
 16967 ;; This function uses a non-reentrant model
 16968 ;;
 16969                           
 16970                           	psect	text61
 16971  0045D2                     __ptext61:
 16972                           	opt stack 0
 16973  0045D2                     _getCANFrame:
 16974                           	opt stack 23
 16975                           
 16976                           ;incstack = 0
 16977                           ;incstack = 0
 16978                           ;getCANFrame@pid stored from wreg
 16979  0045D2  CFE8 F01C          	movff	wreg,getCANFrame@pid
 16980                           
 16981                           ; BSR set to: 0
 16982                           ;main.c: 3590: ECAN_RX_MSG_FLAGS flags;
 16983                           ;main.c: 3594: if (vscp_imsg.flags & 0x80) return 0;
 16984  0045D6  AF96               	btfss	_vscp_imsg& (0+255),7,b
 16985  0045D8  D002               	goto	l8572
 16986  0045DA                     l8568:
 16987  0045DA  0E00               	movlw	0
 16988  0045DC  D00F               	goto	l1159
 16989  0045DE                     l8572:
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;main.c: 3596: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 16993  0045DE  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16994  0045E2  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16995  0045E6  0E1D               	movlw	low getCANFrame@flags
 16996  0045E8  6E11               	movwf	?_ECANReceiveMessage+2,c
 16997  0045EA  501C               	movf	getCANFrame@pid,w,c
 16998  0045EC  ECA0  F017         	call	_ECANReceiveMessage
 16999  0045F0  0900               	iorlw	0
 17000  0045F2  E0F3               	bz	l8568
 17001                           
 17002                           ;main.c: 3599: if (flags & ECAN_RX_RTR_FRAME) return 0;
 17003  0045F4  AC1D               	btfss	getCANFrame@flags,6,c
 17004                           
 17005                           ;main.c: 3602: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 17006  0045F6  AA1D               	btfss	getCANFrame@flags,5,c
 17007  0045F8  D7F0               	goto	l8568
 17008                           
 17009                           ;main.c: 3604: return 1;
 17010  0045FA  0E01               	movlw	1
 17011  0045FC                     l1159:
 17012  0045FC  0012               	return	
 17013  0045FE                     __end_of_getCANFrame:
 17014                           	opt stack 0
 17015                           tblptru	equ	0xFF8
 17016                           tblptrh	equ	0xFF7
 17017                           tblptrl	equ	0xFF6
 17018                           tablat	equ	0xFF5
 17019                           prodh	equ	0xFF4
 17020                           prodl	equ	0xFF3
 17021                           intcon	equ	0xFF2
 17022                           intcon2	equ	0xFF1
 17023                           postinc0	equ	0xFEE
 17024                           wreg	equ	0xFE8
 17025                           indf1	equ	0xFE7
 17026                           fsr1h	equ	0xFE2
 17027                           fsr1l	equ	0xFE1
 17028                           indf2	equ	0xFDF
 17029                           postinc2	equ	0xFDE
 17030                           postdec2	equ	0xFDD
 17031                           plusw2	equ	0xFDB
 17032                           fsr2h	equ	0xFDA
 17033                           fsr2l	equ	0xFD9
 17034                           status	equ	0xFD8
 17035                           
 17036 ;; *************** function _ECANReceiveMessage *****************
 17037 ;; Defined at:
 17038 ;;		line 803 in file "../ECAN.c"
 17039 ;; Parameters:    Size  Location     Type
 17040 ;;  id              1    wreg     PTR unsigned long 
 17041 ;;		 -> getVSCPFrame@id(4), 
 17042 ;;  data            1   14[COMRAM] PTR unsigned char 
 17043 ;;		 -> vscp_imsg(14), 
 17044 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 17045 ;;		 -> vscp_imsg(14), 
 17046 ;;  msgFlags        1   16[COMRAM] PTR enum E16333
 17047 ;;		 -> getCANFrame@flags(1), 
 17048 ;; Auto vars:     Size  Location     Type
 17049 ;;  id              1   19[COMRAM] PTR unsigned long 
 17050 ;;		 -> getVSCPFrame@id(4), 
 17051 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 17052 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17053 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17054 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 17055 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17056 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17057 ;;  temp            1   22[COMRAM] struct .
 17058 ;;  mode            1   21[COMRAM] unsigned char 
 17059 ;;  i               1   20[COMRAM] unsigned char 
 17060 ;; Return value:  Size  Location     Type
 17061 ;;                  1    wreg      enum E15660
 17062 ;; Registers used:
 17063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17064 ;; Tracked objects:
 17065 ;;		On entry : F/0
 17066 ;;		On exit  : 0/0
 17067 ;;		Unchanged: 0/0
 17068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17069 ;;      Params:         3       0       0       0       0       0       0
 17070 ;;      Locals:         8       0       0       0       0       0       0
 17071 ;;      Temps:          0       0       0       0       0       0       0
 17072 ;;      Totals:        11       0       0       0       0       0       0
 17073 ;;Total ram usage:       11 bytes
 17074 ;; Hardware stack levels used:    1
 17075 ;; Hardware stack levels required when called:    3
 17076 ;; This function calls:
 17077 ;;		__ECANPointBuffer
 17078 ;;		__RegsToCANID
 17079 ;; This function is called by:
 17080 ;;		_getCANFrame
 17081 ;; This function uses a non-reentrant model
 17082 ;;
 17083                           
 17084                           	psect	text62
 17085  002F40                     __ptext62:
 17086                           	opt stack 0
 17087  002F40                     _ECANReceiveMessage:
 17088                           	opt stack 23
 17089                           
 17090                           ;incstack = 0
 17091                           ;incstack = 0
 17092                           ;ECANReceiveMessage@id stored from wreg
 17093  002F40  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 17094                           
 17095                           ; BSR set to: 0
 17096                           ;ECAN.c: 805: BYTE mode;
 17097                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 17098                           ;ECAN.c: 809: char i;
 17099                           ;ECAN.c: 810: BYTE_VAL temp;
 17100                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 17101  002F44  6A54               	clrf	__ECANRxFilterHitInfo,c
 17102                           
 17103                           ; BSR set to: 0
 17104                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 17105  002F46  5077               	movf	3959,w,c	;volatile
 17106  002F48  0BC0               	andlw	192
 17107  002F4A  6E16               	movwf	ECANReceiveMessage@mode,c
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;ECAN.c: 816: if ( mode == 0x00 )
 17111  002F4C  6616               	tstfsz	ECANReceiveMessage@mode,c
 17112  002F4E  D032               	goto	l5824
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;ECAN.c: 822: {
 17116                           ;ECAN.c: 824: if ( RXB0FUL )
 17117  002F50  AE60               	btfss	3936,7,c	;volatile
 17118  002F52  D012               	goto	l181
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;ECAN.c: 825: {
 17122                           ;ECAN.c: 827: RXB0IF = 0;
 17123  002F54  90A4               	bcf	4004,0,c	;volatile
 17124                           
 17125                           ;ECAN.c: 830: if ( RXB0OVFL )
 17126  002F56  AE74               	btfss	3956,7,c	;volatile
 17127  002F58  D006               	goto	l5800
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;ECAN.c: 831: {
 17131                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 17132  002F5A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17133  002F5C  6ED9               	movwf	fsr2l,c
 17134  002F5E  6ADA               	clrf	fsr2h,c
 17135  002F60  0E00               	movlw	0
 17136  002F62  86DB               	bsf	plusw2,3,c
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;ECAN.c: 833: RXB0OVFL = 0;
 17140  002F64  9E74               	bcf	3956,7,c	;volatile
 17141  002F66                     l5800:
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;ECAN.c: 834: }
 17145                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 17146  002F66  A060               	btfss	3936,0,c	;volatile
 17147  002F68  D002               	bra	u5485
 17148  002F6A  8054               	bsf	__ECANRxFilterHitInfo,0,c
 17149  002F6C  D001               	bra	u5487
 17150  002F6E                     u5485:
 17151  002F6E  9054               	bcf	__ECANRxFilterHitInfo,0,c
 17152  002F70                     u5487:
 17153                           
 17154                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 17155  002F70  0E0F               	movlw	15	;volatile
 17156  002F72  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17157  002F74  0E60               	movlw	96	;volatile
 17158  002F76  D01A               	goto	L50
 17159  002F78                     l181:
 17160                           
 17161                           ; BSR set to: 0
 17162                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 17163  002F78  010F               	movlb	15	; () banked
 17164  002F7A  AF50               	btfss	80,7,b	;volatile
 17165  002F7C  D019               	goto	l5818
 17166                           
 17167                           ; BSR set to: 15
 17168                           ;ECAN.c: 842: {
 17169                           ;ECAN.c: 844: RXB1IF = 0;
 17170  002F7E  92A4               	bcf	4004,1,c	;volatile
 17171                           
 17172                           ;ECAN.c: 847: if ( RXB1OVFL )
 17173  002F80  AC74               	btfss	3956,6,c	;volatile
 17174  002F82  D006               	goto	l5810
 17175                           
 17176                           ; BSR set to: 15
 17177                           ;ECAN.c: 848: {
 17178                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 17179  002F84  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17180  002F86  6ED9               	movwf	fsr2l,c
 17181  002F88  6ADA               	clrf	fsr2h,c
 17182  002F8A  0E00               	movlw	0
 17183  002F8C  86DB               	bsf	plusw2,3,c
 17184                           
 17185                           ; BSR set to: 15
 17186                           ;ECAN.c: 850: RXB1OVFL = 0;
 17187  002F8E  9C74               	bcf	3956,6,c	;volatile
 17188  002F90                     l5810:
 17189                           
 17190                           ; BSR set to: 15
 17191                           ;ECAN.c: 851: }
 17192                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 17193  002F90  5150               	movf	80,w,b	;volatile
 17194  002F92  0B07               	andlw	7
 17195  002F94  6E54               	movwf	__ECANRxFilterHitInfo,c
 17196                           
 17197                           ; BSR set to: 15
 17198                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 17199  002F96  0E02               	movlw	2
 17200  002F98  6054               	cpfslt	__ECANRxFilterHitInfo,c
 17201  002F9A  D005               	goto	l5816
 17202                           
 17203                           ; BSR set to: 15
 17204                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 17205  002F9C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17206  002F9E  6ED9               	movwf	fsr2l,c
 17207  002FA0  6ADA               	clrf	fsr2h,c
 17208  002FA2  0E00               	movlw	0
 17209  002FA4  8EDB               	bsf	plusw2,7,c
 17210  002FA6                     l5816:
 17211                           
 17212                           ; BSR set to: 15
 17213                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 17214  002FA6  0E0F               	movlw	15	;volatile
 17215  002FA8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17216  002FAA  0E50               	movlw	80	;volatile
 17217  002FAC                     L50:
 17218  002FAC  6E18               	movwf	ECANReceiveMessage@ptr,c
 17219                           
 17220                           ;ECAN.c: 860: }
 17221  002FAE  D065               	goto	l5878
 17222  002FB0                     l5818:
 17223                           
 17224                           ;ECAN.c: 861: else
 17225                           ;ECAN.c: 862: return FALSE;
 17226  002FB0  0E00               	movlw	0
 17227  002FB2  D0C2               	goto	l188
 17228  002FB4                     l5824:
 17229                           
 17230                           ; BSR set to: 0
 17231                           ;ECAN.c: 869: else if ( mode == 0x40 )
 17232  002FB4  5016               	movf	ECANReceiveMessage@mode,w,c
 17233  002FB6  0A40               	xorlw	64
 17234  002FB8  E146               	bnz	l191
 17235                           
 17236                           ; BSR set to: 0
 17237                           ;ECAN.c: 875: {
 17238                           ;ECAN.c: 876: if ( RXB0FUL )
 17239  002FBA  AE60               	btfss	3936,7,c	;volatile
 17240  002FBC  D004               	goto	l192
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 17244  002FBE  0E0F               	movlw	15	;volatile
 17245  002FC0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17246  002FC2  0E60               	movlw	96	;volatile
 17247  002FC4  D03E               	goto	L57
 17248  002FC6                     l192:
 17249                           
 17250                           ; BSR set to: 0
 17251                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17252  002FC6  010F               	movlb	15	; () banked
 17253  002FC8  AF50               	btfss	80,7,b	;volatile
 17254  002FCA  D004               	goto	l194
 17255                           
 17256                           ; BSR set to: 15
 17257                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17258  002FCC  0E0F               	movlw	15	;volatile
 17259  002FCE  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17260  002FD0  0E50               	movlw	80	;volatile
 17261  002FD2  D037               	goto	L57
 17262  002FD4                     l194:
 17263                           
 17264                           ; BSR set to: 15
 17265                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17266  002FD4  010D               	movlb	13
 17267  002FD6  B5F8               	btfsc	248,2,b	;volatile
 17268  002FD8  D007               	goto	l196
 17269  002FDA  010E               	movlb	14
 17270  002FDC  AF20               	btfss	32,7,b	;volatile
 17271  002FDE  D004               	goto	l196
 17272                           
 17273                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17274  002FE0  0E0E               	movlw	14	;volatile
 17275  002FE2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17276  002FE4  0E20               	movlw	32	;volatile
 17277  002FE6  D02D               	goto	L57
 17278  002FE8                     l196:
 17279                           
 17280                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17281  002FE8  010D               	movlb	13
 17282  002FEA  B7F8               	btfsc	248,3,b	;volatile
 17283  002FEC  D007               	goto	l198
 17284  002FEE  010E               	movlb	14
 17285  002FF0  AF30               	btfss	48,7,b	;volatile
 17286  002FF2  D004               	goto	l198
 17287                           
 17288                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17289  002FF4  0E0E               	movlw	14	;volatile
 17290  002FF6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17291  002FF8  0E30               	movlw	48	;volatile
 17292  002FFA  D023               	goto	L57
 17293  002FFC                     l198:
 17294                           
 17295                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17296  002FFC  010D               	movlb	13
 17297  002FFE  B9F8               	btfsc	248,4,b	;volatile
 17298  003000  D007               	goto	l200
 17299  003002  010E               	movlb	14
 17300  003004  AF40               	btfss	64,7,b	;volatile
 17301  003006  D004               	goto	l200
 17302                           
 17303                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17304  003008  0E0E               	movlw	14	;volatile
 17305  00300A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17306  00300C  0E40               	movlw	64	;volatile
 17307  00300E  D019               	goto	L57
 17308  003010                     l200:
 17309                           
 17310                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17311  003010  010D               	movlb	13
 17312  003012  BBF8               	btfsc	248,5,b	;volatile
 17313  003014  D005               	goto	l202
 17314  003016  010E               	movlb	14
 17315  003018  AF50               	btfss	80,7,b	;volatile
 17316  00301A  D002               	goto	l202
 17317                           
 17318                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17319  00301C  0E0E               	movlw	14	;volatile
 17320  00301E  D7D7               	goto	L58
 17321  003020                     l202:
 17322                           
 17323                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17324  003020  010D               	movlb	13
 17325  003022  BDF8               	btfsc	248,6,b	;volatile
 17326  003024  D005               	goto	l204
 17327  003026  010E               	movlb	14
 17328  003028  AF60               	btfss	96,7,b	;volatile
 17329  00302A  D002               	goto	l204
 17330                           
 17331                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17332  00302C  0E0E               	movlw	14	;volatile
 17333  00302E  D7C8               	goto	L59
 17334  003030                     l204:
 17335                           
 17336                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17337  003030  010D               	movlb	13
 17338  003032  BFF8               	btfsc	248,7,b	;volatile
 17339  003034  D7BD               	goto	l5818
 17340  003036  010E               	movlb	14
 17341  003038  AF70               	btfss	112,7,b	;volatile
 17342  00303A  D7BA               	goto	l5818
 17343                           
 17344                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17345  00303C  0E0E               	movlw	14	;volatile
 17346  00303E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17347  003040  0E70               	movlw	112	;volatile
 17348  003042                     L57:
 17349  003042  6E18               	movwf	ECANReceiveMessage@ptr,c
 17350  003044  D00A               	goto	l5868
 17351  003046                     l191:
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;ECAN.c: 910: else
 17355                           ;ECAN.c: 915: {
 17356                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17357  003046  AE74               	btfss	3956,7,c	;volatile
 17358  003048  D7B3               	goto	l5818
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;ECAN.c: 917: {
 17362                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17363  00304A  506F               	movf	3951,w,c	;volatile
 17364  00304C  0B07               	andlw	7
 17365  00304E  EC85  F021         	call	__ECANPointBuffer
 17366  003052  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17367  003056  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17368  00305A                     l5868:
 17369                           
 17370                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17371  00305A  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17372  00305E  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17373  003062  50DF               	movf	indf2,w,c
 17374  003064  0B1F               	andlw	31
 17375  003066  6E54               	movwf	__ECANRxFilterHitInfo,c
 17376                           
 17377                           ;ECAN.c: 932: RXB1IF = 0;
 17378  003068  92A4               	bcf	4004,1,c	;volatile
 17379                           
 17380                           ;ECAN.c: 934: if ( RXB1OVFL )
 17381  00306A  AC74               	btfss	3956,6,c	;volatile
 17382  00306C  D006               	goto	l5878
 17383                           
 17384                           ;ECAN.c: 935: {
 17385                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17386  00306E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17387  003070  6ED9               	movwf	fsr2l,c
 17388  003072  6ADA               	clrf	fsr2h,c
 17389  003074  0E00               	movlw	0
 17390  003076  86DB               	bsf	plusw2,3,c
 17391                           
 17392                           ;ECAN.c: 937: RXB1OVFL = 0;
 17393  003078  9C74               	bcf	3956,6,c	;volatile
 17394  00307A                     l5878:
 17395                           
 17396                           ;ECAN.c: 942: savedPtr = ptr;
 17397  00307A  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17398  00307E  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17399                           
 17400                           ;ECAN.c: 943: *msgFlags = 0;
 17401  003082  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17402  003084  6ED9               	movwf	fsr2l,c
 17403  003086  6ADA               	clrf	fsr2h,c
 17404  003088  6ADF               	clrf	indf2,c
 17405                           
 17406                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17407  00308A  EE20 F005          	lfsr	2,5
 17408  00308E  D855               	call	PL78	;call to abstracted procedure
 17409                           
 17410                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17411  003090  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17412  003092  6ED9               	movwf	fsr2l,c
 17413  003094  6ADA               	clrf	fsr2h,c
 17414  003096  5017               	movf	ECANReceiveMessage@temp,w,c
 17415  003098  0B0F               	andlw	15
 17416  00309A  6EDF               	movwf	indf2,c
 17417                           
 17418                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17419  00309C  AC17               	btfss	ECANReceiveMessage@temp,6,c
 17420  00309E  D005               	goto	l212
 17421                           
 17422                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17423  0030A0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17424  0030A2  6ED9               	movwf	fsr2l,c
 17425  0030A4  6ADA               	clrf	fsr2h,c
 17426  0030A6  0E00               	movlw	0
 17427  0030A8  8CDB               	bsf	plusw2,6,c
 17428  0030AA                     l212:
 17429                           
 17430                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17431  0030AA  EE20 F002          	lfsr	2,2
 17432  0030AE  D845               	call	PL78	;call to abstracted procedure
 17433                           
 17434                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17435  0030B0  A617               	btfss	ECANReceiveMessage@temp,3,c
 17436  0030B2  D008               	goto	l213
 17437                           
 17438                           ;ECAN.c: 956: {
 17439                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17440  0030B4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17441  0030B6  6ED9               	movwf	fsr2l,c
 17442  0030B8  6ADA               	clrf	fsr2h,c
 17443  0030BA  0E00               	movlw	0
 17444  0030BC  8ADB               	bsf	plusw2,5,c
 17445                           
 17446                           ;ECAN.c: 958: temp.Val = 1;
 17447  0030BE  0E01               	movlw	1
 17448  0030C0  6E17               	movwf	ECANReceiveMessage@temp,c
 17449                           
 17450                           ;ECAN.c: 959: }
 17451  0030C2  D001               	goto	l5896
 17452  0030C4                     l213:
 17453                           
 17454                           ;ECAN.c: 960: else
 17455                           ;ECAN.c: 961: temp.Val = 0;
 17456  0030C4  6A17               	clrf	ECANReceiveMessage@temp,c
 17457  0030C6                     l5896:
 17458                           
 17459                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17460  0030C6  2818               	incf	ECANReceiveMessage@ptr,w,c
 17461  0030C8  6E08               	movwf	?__RegsToCANID,c
 17462  0030CA  0E00               	movlw	0
 17463  0030CC  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17464  0030CE  6E09               	movwf	?__RegsToCANID+1,c
 17465  0030D0  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17466  0030D4  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17467  0030D8  ECD4  F01C         	call	__RegsToCANID	;wreg free
 17468                           
 17469                           ;ECAN.c: 966: ptr += 6;
 17470  0030DC  0E06               	movlw	6
 17471  0030DE  2618               	addwf	ECANReceiveMessage@ptr,f,c
 17472  0030E0  0E00               	movlw	0
 17473  0030E2  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17474                           
 17475                           ;ECAN.c: 967: temp.Val = *dataLen;
 17476  0030E4  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17477  0030E6  6ED9               	movwf	fsr2l,c
 17478  0030E8  6ADA               	clrf	fsr2h,c
 17479  0030EA  50DF               	movf	indf2,w,c
 17480  0030EC  6E17               	movwf	ECANReceiveMessage@temp,c
 17481                           
 17482                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17483  0030EE  6A15               	clrf	ECANReceiveMessage@i,c
 17484  0030F0  D00D               	goto	l5912
 17485  0030F2                     l5904:
 17486                           
 17487                           ;ECAN.c: 969: *data++ = *ptr++;
 17488  0030F2  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17489  0030F6  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17490  0030FA  500F               	movf	ECANReceiveMessage@data,w,c
 17491  0030FC  6EE1               	movwf	fsr1l,c
 17492  0030FE  6AE2               	clrf	fsr1h,c
 17493  003100  CFDF FFE7          	movff	indf2,indf1
 17494  003104  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 17495  003106  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 17496  003108  2A0F               	incf	ECANReceiveMessage@data,f,c
 17497  00310A  2A15               	incf	ECANReceiveMessage@i,f,c
 17498  00310C                     l5912:
 17499  00310C  5017               	movf	ECANReceiveMessage@temp,w,c
 17500  00310E  5C15               	subwf	ECANReceiveMessage@i,w,c
 17501  003110  E3F0               	bnc	l5904
 17502                           
 17503                           ;ECAN.c: 972: if ( IRXIF )
 17504  003112  AEA4               	btfss	4004,7,c	;volatile
 17505  003114  D006               	goto	l5918
 17506                           
 17507                           ;ECAN.c: 973: {
 17508                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17509  003116  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17510  003118  6ED9               	movwf	fsr2l,c
 17511  00311A  6ADA               	clrf	fsr2h,c
 17512  00311C  0E00               	movlw	0
 17513  00311E  88DB               	bsf	plusw2,4,c
 17514                           
 17515                           ;ECAN.c: 975: IRXIF = 0;
 17516  003120  9EA4               	bcf	4004,7,c	;volatile
 17517  003122                     l5918:
 17518                           
 17519                           ;ECAN.c: 976: }
 17520                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17521  003122  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17522  003126  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17523  00312A  0E7F               	movlw	127
 17524  00312C  16DF               	andwf	indf2,f,c
 17525                           
 17526                           ;ECAN.c: 983: if ( mode == 0x80 )
 17527  00312E  5016               	movf	ECANReceiveMessage@mode,w,c
 17528  003130  0A80               	xorlw	128
 17529  003132  B4D8               	btfsc	status,2,c
 17530                           
 17531                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17532  003134  9E74               	bcf	3956,7,c	;volatile
 17533                           
 17534                           ;ECAN.c: 990: return TRUE;
 17535  003136  0E01               	movlw	1
 17536  003138                     l188:
 17537  003138  0012               	return	
 17538  00313A                     __end_of_ECANReceiveMessage:
 17539                           	opt stack 0
 17540  00313A                     PL78:
 17541                           	opt stack 23
 17542  00313A  5018               	movf	ECANReceiveMessage@ptr,w,c
 17543  00313C  26D9               	addwf	fsr2l,f,c
 17544  00313E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 17545  003140  22DA               	addwfc	fsr2h,f,c
 17546  003142  50DF               	movf	indf2,w,c
 17547  003144  6E17               	movwf	ECANReceiveMessage@temp,c
 17548  003146  0012               	return	
 17549  003148                     __end_ofPL78:
 17550                           	opt stack 0
 17551                           tblptru	equ	0xFF8
 17552                           tblptrh	equ	0xFF7
 17553                           tblptrl	equ	0xFF6
 17554                           tablat	equ	0xFF5
 17555                           prodh	equ	0xFF4
 17556                           prodl	equ	0xFF3
 17557                           intcon	equ	0xFF2
 17558                           intcon2	equ	0xFF1
 17559                           postinc0	equ	0xFEE
 17560                           wreg	equ	0xFE8
 17561                           indf1	equ	0xFE7
 17562                           fsr1h	equ	0xFE2
 17563                           fsr1l	equ	0xFE1
 17564                           indf2	equ	0xFDF
 17565                           postinc2	equ	0xFDE
 17566                           postdec2	equ	0xFDD
 17567                           plusw2	equ	0xFDB
 17568                           fsr2h	equ	0xFDA
 17569                           fsr2l	equ	0xFD9
 17570                           status	equ	0xFD8
 17571                           
 17572 ;; *************** function __RegsToCANID *****************
 17573 ;; Defined at:
 17574 ;;		line 1156 in file "../ECAN.c"
 17575 ;; Parameters:    Size  Location     Type
 17576 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 17577 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17578 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17579 ;;  val             1    9[COMRAM] PTR unsigned long 
 17580 ;;		 -> getVSCPFrame@id(4), 
 17581 ;;  type            1   10[COMRAM] unsigned char 
 17582 ;; Auto vars:     Size  Location     Type
 17583 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 17584 ;;		 -> getVSCPFrame@id(4), 
 17585 ;; Return value:  Size  Location     Type
 17586 ;;		None               void
 17587 ;; Registers used:
 17588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17589 ;; Tracked objects:
 17590 ;;		On entry : 0/0
 17591 ;;		On exit  : 0/0
 17592 ;;		Unchanged: 0/0
 17593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17594 ;;      Params:         4       0       0       0       0       0       0
 17595 ;;      Locals:         1       0       0       0       0       0       0
 17596 ;;      Temps:          2       0       0       0       0       0       0
 17597 ;;      Totals:         7       0       0       0       0       0       0
 17598 ;;Total ram usage:        7 bytes
 17599 ;; Hardware stack levels used:    1
 17600 ;; Hardware stack levels required when called:    2
 17601 ;; This function calls:
 17602 ;;		Nothing
 17603 ;; This function is called by:
 17604 ;;		_ECANReceiveMessage
 17605 ;; This function uses a non-reentrant model
 17606 ;;
 17607                           
 17608                           	psect	text63
 17609  0039A8                     __ptext63:
 17610                           	opt stack 0
 17611  0039A8                     __RegsToCANID:
 17612                           	opt stack 23
 17613                           
 17614                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17615                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17616                           
 17617                           ;incstack = 0
 17618                           ;incstack = 0
 17619  0039A8  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17620                           
 17621                           ;ECAN.c: 1161: if ( type == 0 )
 17622  0039AC  660B               	tstfsz	__RegsToCANID@type,c
 17623  0039AE  D02B               	goto	l5962
 17624                           
 17625                           ;ECAN.c: 1162: {
 17626                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17627  0039B0  500E               	movf	__RegsToCANID@Value,w,c
 17628  0039B2  6ED9               	movwf	fsr2l,c
 17629  0039B4  D86C               	call	PL56	;call to abstracted procedure
 17630  0039B6  360C               	rlcf	??__RegsToCANID,f,c
 17631  0039B8  90D8               	bcf	status,0,c
 17632  0039BA  360C               	rlcf	??__RegsToCANID,f,c
 17633  0039BC  90D8               	bcf	status,0,c
 17634  0039BE  340C               	rlcf	??__RegsToCANID,w,c
 17635  0039C0  6EDF               	movwf	indf2,c
 17636                           
 17637                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17638  0039C2  500E               	movf	__RegsToCANID@Value,w,c
 17639  0039C4  6ED9               	movwf	fsr2l,c
 17640  0039C6  6ADA               	clrf	fsr2h,c
 17641  0039C8  2AD9               	incf	fsr2l,f,c
 17642  0039CA  6ADA               	clrf	fsr2h,c
 17643  0039CC  D873               	call	PL66	;call to abstracted procedure
 17644  0039CE                     u5755:
 17645  0039CE  90D8               	bcf	status,0,c
 17646  0039D0  320C               	rrcf	??__RegsToCANID,f,c
 17647  0039D2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17648  0039D4  D7FC               	goto	u5755
 17649  0039D6  500C               	movf	??__RegsToCANID,w,c
 17650                           
 17651                           ;ECAN.c: 1166: ptr++;
 17652                           
 17653                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17654  0039D8  D863               	call	PL58	;call to abstracted procedure
 17655  0039DA  0E05               	movlw	5
 17656  0039DC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17657  0039DE                     u5765:
 17658  0039DE  90D8               	bcf	status,0,c
 17659  0039E0  320C               	rrcf	??__RegsToCANID,f,c
 17660  0039E2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17661  0039E4  D7FC               	goto	u5765
 17662  0039E6  500E               	movf	__RegsToCANID@Value,w,c
 17663  0039E8  6ED9               	movwf	fsr2l,c
 17664  0039EA  6ADA               	clrf	fsr2h,c
 17665  0039EC  500C               	movf	??__RegsToCANID,w,c
 17666  0039EE  12DF               	iorwf	indf2,f,c
 17667                           
 17668                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17669  0039F0  D83D               	call	PL40	;call to abstracted procedure
 17670  0039F2  6ADF               	clrf	indf2,c
 17671                           
 17672                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17673  0039F4  500E               	movf	__RegsToCANID@Value,w,c
 17674  0039F6  6ED9               	movwf	fsr2l,c
 17675  0039F8  6ADA               	clrf	fsr2h,c
 17676  0039FA  0E03               	movlw	3
 17677  0039FC  26D9               	addwf	fsr2l,f,c
 17678  0039FE  6ADA               	clrf	fsr2h,c
 17679  003A00  0E00               	movlw	0
 17680  003A02  6EDF               	movwf	indf2,c
 17681                           
 17682                           ;ECAN.c: 1170: }
 17683  003A04  D032               	goto	l235
 17684  003A06                     l5962:
 17685                           
 17686                           ;ECAN.c: 1171: else
 17687                           ;ECAN.c: 1172: {
 17688                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17689  003A06  D832               	call	PL40	;call to abstracted procedure
 17690  003A08  D855               	call	PL66	;call to abstracted procedure
 17691  003A0A                     u5775:
 17692  003A0A  90D8               	bcf	status,0,c
 17693  003A0C  360C               	rlcf	??__RegsToCANID,f,c
 17694  003A0E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17695  003A10  D7FC               	goto	u5775
 17696  003A12  500C               	movf	??__RegsToCANID,w,c
 17697  003A14  6EDF               	movwf	indf2,c
 17698                           
 17699                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17700  003A16  500E               	movf	__RegsToCANID@Value,w,c
 17701  003A18  6ED9               	movwf	fsr2l,c
 17702  003A1A  6ADA               	clrf	fsr2h,c
 17703  003A1C  0E03               	movlw	3
 17704  003A1E  26D9               	addwf	fsr2l,f,c
 17705  003A20  D836               	call	PL56	;call to abstracted procedure
 17706  003A22  320C               	rrcf	??__RegsToCANID,f,c
 17707  003A24  90D8               	bcf	status,0,c
 17708  003A26  320C               	rrcf	??__RegsToCANID,f,c
 17709  003A28  90D8               	bcf	status,0,c
 17710  003A2A  300C               	rrcf	??__RegsToCANID,w,c
 17711                           
 17712                           ;ECAN.c: 1176: ptr++;
 17713                           
 17714                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17715  003A2C  D839               	call	PL58	;call to abstracted procedure
 17716  003A2E  0E03               	movlw	3
 17717  003A30  160C               	andwf	??__RegsToCANID,f,c
 17718  003A32  D81C               	call	PL40	;call to abstracted procedure
 17719  003A34  500C               	movf	??__RegsToCANID,w,c
 17720  003A36  12DF               	iorwf	indf2,f,c
 17721                           
 17722                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17723  003A38  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17724  003A3C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17725  003A40  50DF               	movf	indf2,w,c
 17726  003A42  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17727  003A44  90D8               	bcf	status,0,c
 17728  003A46  320C               	rrcf	??__RegsToCANID,f,c
 17729  003A48  90D8               	bcf	status,0,c
 17730  003A4A  320C               	rrcf	??__RegsToCANID,f,c
 17731  003A4C  90D8               	bcf	status,0,c
 17732  003A4E  320C               	rrcf	??__RegsToCANID,f,c
 17733  003A50  0E1C               	movlw	28
 17734  003A52  160C               	andwf	??__RegsToCANID,f,c
 17735  003A54  D80B               	call	PL40	;call to abstracted procedure
 17736  003A56  500C               	movf	??__RegsToCANID,w,c
 17737  003A58  12DF               	iorwf	indf2,f,c
 17738                           
 17739                           ;ECAN.c: 1180: ptr++;
 17740                           
 17741                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17742  003A5A  D80F               	call	PL52	;call to abstracted procedure
 17743  003A5C  2AE1               	incf	fsr1l,f,c
 17744  003A5E  6AE2               	clrf	fsr1h,c
 17745  003A60  CFDF FFE7          	movff	indf2,indf1
 17746                           
 17747                           ;ECAN.c: 1182: ptr++;
 17748                           
 17749                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17750  003A64  D80A               	call	PL52	;call to abstracted procedure
 17751  003A66  CFDF FFE7          	movff	indf2,indf1
 17752  003A6A                     l235:
 17753  003A6A  0012               	return	
 17754  003A6C                     __end_of__RegsToCANID:
 17755                           	opt stack 0
 17756  003A6C                     PL40:
 17757                           	opt stack 23
 17758  003A6C  500E               	movf	__RegsToCANID@Value,w,c
 17759  003A6E  6ED9               	movwf	fsr2l,c
 17760  003A70  6ADA               	clrf	fsr2h,c
 17761  003A72  0E02               	movlw	2
 17762  003A74  26D9               	addwf	fsr2l,f,c
 17763  003A76  6ADA               	clrf	fsr2h,c
 17764  003A78  0012               	return	
 17765  003A7A                     __end_ofPL40:
 17766                           	opt stack 0
 17767  003A7A                     PL52:
 17768                           	opt stack 23
 17769  003A7A  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17770  003A7C  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17771  003A7E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17772  003A82  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17773  003A86  500E               	movf	__RegsToCANID@Value,w,c
 17774  003A88  6EE1               	movwf	fsr1l,c
 17775  003A8A  6AE2               	clrf	fsr1h,c
 17776  003A8C  0012               	return	
 17777  003A8E                     __end_ofPL52:
 17778                           	opt stack 0
 17779  003A8E                     PL56:
 17780                           	opt stack 23
 17781  003A8E  6ADA               	clrf	fsr2h,c
 17782  003A90  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17783  003A94  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17784  003A98  50E7               	movf	indf1,w,c
 17785  003A9A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17786  003A9C  90D8               	bcf	status,0,c
 17787  003A9E  0012               	return	
 17788  003AA0                     __end_ofPL56:
 17789                           	opt stack 0
 17790  003AA0                     PL58:
 17791                           	opt stack 23
 17792  003AA0  6EDF               	movwf	indf2,c
 17793  003AA2  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17794  003AA4  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17795  003AA6  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17796  003AAA  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17797  003AAE  50DF               	movf	indf2,w,c
 17798  003AB0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17799  003AB2  0012               	return	
 17800  003AB4                     __end_ofPL58:
 17801                           	opt stack 0
 17802  003AB4                     PL66:
 17803                           	opt stack 23
 17804  003AB4  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17805  003AB8  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17806  003ABC  50E7               	movf	indf1,w,c
 17807  003ABE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17808  003AC0  0E05               	movlw	5
 17809  003AC2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17810  003AC4  0C05               	retlw	5
 17811  003AC6                     __end_ofPL66:
 17812                           	opt stack 0
 17813                           tblptru	equ	0xFF8
 17814                           tblptrh	equ	0xFF7
 17815                           tblptrl	equ	0xFF6
 17816                           tablat	equ	0xFF5
 17817                           prodh	equ	0xFF4
 17818                           prodl	equ	0xFF3
 17819                           intcon	equ	0xFF2
 17820                           intcon2	equ	0xFF1
 17821                           postinc0	equ	0xFEE
 17822                           wreg	equ	0xFE8
 17823                           indf1	equ	0xFE7
 17824                           fsr1h	equ	0xFE2
 17825                           fsr1l	equ	0xFE1
 17826                           indf2	equ	0xFDF
 17827                           postinc2	equ	0xFDE
 17828                           postdec2	equ	0xFDD
 17829                           plusw2	equ	0xFDB
 17830                           fsr2h	equ	0xFDA
 17831                           fsr2l	equ	0xFD9
 17832                           status	equ	0xFD8
 17833                           
 17834 ;; *************** function __ECANPointBuffer *****************
 17835 ;; Defined at:
 17836 ;;		line 1207 in file "../ECAN.c"
 17837 ;; Parameters:    Size  Location     Type
 17838 ;;  b               1    wreg     unsigned char 
 17839 ;; Auto vars:     Size  Location     Type
 17840 ;;  b               1   10[COMRAM] unsigned char 
 17841 ;;  pt              2   11[COMRAM] PTR unsigned char 
 17842 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17843 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17844 ;; Return value:  Size  Location     Type
 17845 ;;                  2    7[COMRAM] PTR unsigned char 
 17846 ;; Registers used:
 17847 ;;		wreg, status,2, status,0
 17848 ;; Tracked objects:
 17849 ;;		On entry : F/0
 17850 ;;		On exit  : 0/0
 17851 ;;		Unchanged: 0/0
 17852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17853 ;;      Params:         3       0       0       0       0       0       0
 17854 ;;      Locals:         3       0       0       0       0       0       0
 17855 ;;      Temps:          0       0       0       0       0       0       0
 17856 ;;      Totals:         6       0       0       0       0       0       0
 17857 ;;Total ram usage:        6 bytes
 17858 ;; Hardware stack levels used:    1
 17859 ;; Hardware stack levels required when called:    2
 17860 ;; This function calls:
 17861 ;;		Nothing
 17862 ;; This function is called by:
 17863 ;;		_ECANReceiveMessage
 17864 ;; This function uses a non-reentrant model
 17865 ;;
 17866                           
 17867                           	psect	text64
 17868  00430A                     __ptext64:
 17869                           	opt stack 0
 17870  00430A                     __ECANPointBuffer:
 17871                           	opt stack 23
 17872                           
 17873                           ;incstack = 0
 17874                           ;incstack = 0
 17875                           ;__ECANPointBuffer@b stored from wreg
 17876  00430A  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;ECAN.c: 1208: BYTE* pt;
 17880                           ;ECAN.c: 1210: switch(b)
 17881  00430E  D024               	goto	l5948
 17882  004310                     l5930:
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17886  004310  0E0F               	movlw	15	;volatile
 17887  004312  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17888  004314  0E60               	movlw	96	;volatile
 17889  004316  D01E               	goto	L66
 17890  004318                     l5932:
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17894  004318  010F               	movlb	15	; () banked
 17895  00431A  0E0F               	movlw	15	;volatile
 17896  00431C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17897  00431E  0E50               	movlw	80	;volatile
 17898  004320  D019               	goto	L66
 17899  004322                     l5934:
 17900                           
 17901                           ; BSR set to: 0
 17902                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17903  004322  010E               	movlb	14	; () banked
 17904  004324  0E0E               	movlw	14	;volatile
 17905  004326  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17906  004328  0E20               	movlw	32	;volatile
 17907  00432A  D014               	goto	L66
 17908  00432C                     l5936:
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17912  00432C  010E               	movlb	14	; () banked
 17913  00432E  0E0E               	movlw	14	;volatile
 17914  004330  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17915  004332  0E30               	movlw	48	;volatile
 17916  004334  D00F               	goto	L66
 17917  004336                     l5938:
 17918                           
 17919                           ; BSR set to: 0
 17920                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17921  004336  010E               	movlb	14	; () banked
 17922  004338  0E0E               	movlw	14	;volatile
 17923  00433A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17924  00433C  0E40               	movlw	64	;volatile
 17925  00433E  D00A               	goto	L66
 17926  004340                     l5940:
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17930  004340  010E               	movlb	14	; () banked
 17931  004342  0E0E               	movlw	14	;volatile
 17932  004344  D7EB               	goto	L67
 17933  004346                     l5942:
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17937  004346  010E               	movlb	14	; () banked
 17938  004348  0E0E               	movlw	14	;volatile
 17939  00434A  D7E3               	goto	L68
 17940  00434C                     l5944:
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17944  00434C  010E               	movlb	14	; () banked
 17945  00434E  0E0E               	movlw	14	;volatile
 17946  004350  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 17947  004352  0E70               	movlw	112	;volatile
 17948  004354                     L66:
 17949  004354  6E0C               	movwf	__ECANPointBuffer@pt,c
 17950                           
 17951                           ;ECAN.c: 1235: break;
 17952  004356  D00F               	goto	l240
 17953  004358                     l5948:
 17954                           
 17955                           ; BSR set to: 0
 17956  004358  500B               	movf	__ECANPointBuffer@b,w,c
 17957                           
 17958                           ; Switch size 1, requested type "space"
 17959                           ; Number of cases is 7, Range of values is 0 to 6
 17960                           ; switch strategies available:
 17961                           ; Name         Instructions Cycles
 17962                           ; simple_byte           22    12 (average)
 17963                           ;	Chosen strategy is simple_byte
 17964  00435A  E0DA               	bz	l5930
 17965  00435C  0A01               	xorlw	1	; case 1
 17966  00435E  E0DC               	bz	l5932
 17967  004360  0A03               	xorlw	3	; case 2
 17968  004362  E0DF               	bz	l5934
 17969  004364  0A01               	xorlw	1	; case 3
 17970  004366  E0E2               	bz	l5936
 17971  004368  0A07               	xorlw	7	; case 4
 17972  00436A  E0E5               	bz	l5938
 17973  00436C  0A01               	xorlw	1	; case 5
 17974  00436E  E0E8               	bz	l5940
 17975  004370  0A03               	xorlw	3	; case 6
 17976  004372  E0E9               	bz	l5942
 17977  004374  D7EB               	goto	l5944
 17978  004376                     l240:
 17979                           
 17980                           ;ECAN.c: 1237: return (pt);
 17981  004376  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17982  00437A  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17983  00437E  0012               	return	
 17984  004380                     __end_of__ECANPointBuffer:
 17985                           	opt stack 0
 17986                           tblptru	equ	0xFF8
 17987                           tblptrh	equ	0xFF7
 17988                           tblptrl	equ	0xFF6
 17989                           tablat	equ	0xFF5
 17990                           prodh	equ	0xFF4
 17991                           prodl	equ	0xFF3
 17992                           intcon	equ	0xFF2
 17993                           intcon2	equ	0xFF1
 17994                           postinc0	equ	0xFEE
 17995                           wreg	equ	0xFE8
 17996                           indf1	equ	0xFE7
 17997                           fsr1h	equ	0xFE2
 17998                           fsr1l	equ	0xFE1
 17999                           indf2	equ	0xFDF
 18000                           postinc2	equ	0xFDE
 18001                           postdec2	equ	0xFDD
 18002                           plusw2	equ	0xFDB
 18003                           fsr2h	equ	0xFDA
 18004                           fsr2l	equ	0xFD9
 18005                           status	equ	0xFD8
 18006                           
 18007 ;; *************** function _vscp_check_pstorage *****************
 18008 ;; Defined at:
 18009 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 18010 ;; Parameters:    Size  Location     Type
 18011 ;;		None
 18012 ;; Auto vars:     Size  Location     Type
 18013 ;;		None
 18014 ;; Return value:  Size  Location     Type
 18015 ;;                  1    wreg      unsigned char 
 18016 ;; Registers used:
 18017 ;;		wreg, status,2, status,0, cstack
 18018 ;; Tracked objects:
 18019 ;;		On entry : 0/0
 18020 ;;		On exit  : 0/0
 18021 ;;		Unchanged: 0/0
 18022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18023 ;;      Params:         0       0       0       0       0       0       0
 18024 ;;      Locals:         0       0       0       0       0       0       0
 18025 ;;      Temps:          0       0       0       0       0       0       0
 18026 ;;      Totals:         0       0       0       0       0       0       0
 18027 ;;Total ram usage:        0 bytes
 18028 ;; Hardware stack levels used:    1
 18029 ;; Hardware stack levels required when called:    4
 18030 ;; This function calls:
 18031 ;;		_vscp_writeNicknamePermanent
 18032 ;;		_vscp_getSegmentCRC
 18033 ;;		_vscp_setSegmentCRC
 18034 ;;		_vscp_setControlByte
 18035 ;; This function is called by:
 18036 ;;		_main
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040                           	psect	text65
 18041  004736                     __ptext65:
 18042                           	opt stack 0
 18043  004736                     _vscp_check_pstorage:
 18044                           	opt stack 25
 18045                           
 18046                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 18047                           
 18048                           ;incstack = 0
 18049                           ;incstack = 0
 18050  004736  ECAE  F024         	call	_vscp_getSegmentCRC	;wreg free
 18051  00473A  0BC0               	andlw	192
 18052  00473C  0A40               	xorlw	64
 18053  00473E  E102               	bnz	l12364
 18054                           
 18055                           ;vscp_firmware.c: 172: return !0;
 18056  004740  0E01               	movlw	1
 18057  004742  D00A               	goto	l1290
 18058  004744                     l12364:
 18059                           
 18060                           ;vscp_firmware.c: 173: }
 18061                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 18062  004744  0EFF               	movlw	255
 18063  004746  EC51  F024         	call	_vscp_writeNicknamePermanent
 18064                           
 18065                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 18066  00474A  0E00               	movlw	0
 18067  00474C  EC46  F024         	call	_vscp_setSegmentCRC
 18068                           
 18069                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 18070  004750  0EA0               	movlw	160
 18071  004752  EC3B  F024         	call	_vscp_setControlByte
 18072                           
 18073                           ;vscp_firmware.c: 185: return 0;
 18074  004756  0E00               	movlw	0
 18075  004758                     l1290:
 18076  004758  0012               	return	
 18077  00475A                     __end_of_vscp_check_pstorage:
 18078                           	opt stack 0
 18079                           tblptru	equ	0xFF8
 18080                           tblptrh	equ	0xFF7
 18081                           tblptrl	equ	0xFF6
 18082                           tablat	equ	0xFF5
 18083                           prodh	equ	0xFF4
 18084                           prodl	equ	0xFF3
 18085                           intcon	equ	0xFF2
 18086                           intcon2	equ	0xFF1
 18087                           postinc0	equ	0xFEE
 18088                           wreg	equ	0xFE8
 18089                           indf1	equ	0xFE7
 18090                           fsr1h	equ	0xFE2
 18091                           fsr1l	equ	0xFE1
 18092                           indf2	equ	0xFDF
 18093                           postinc2	equ	0xFDE
 18094                           postdec2	equ	0xFDD
 18095                           plusw2	equ	0xFDB
 18096                           fsr2h	equ	0xFDA
 18097                           fsr2l	equ	0xFD9
 18098                           status	equ	0xFD8
 18099                           
 18100 ;; *************** function _vscp_setControlByte *****************
 18101 ;; Defined at:
 18102 ;;		line 3388 in file "../main.c"
 18103 ;; Parameters:    Size  Location     Type
 18104 ;;  ctrl            1    wreg     unsigned char 
 18105 ;; Auto vars:     Size  Location     Type
 18106 ;;  ctrl            1   11[COMRAM] unsigned char 
 18107 ;; Return value:  Size  Location     Type
 18108 ;;		None               void
 18109 ;; Registers used:
 18110 ;;		wreg, status,2, cstack
 18111 ;; Tracked objects:
 18112 ;;		On entry : 0/0
 18113 ;;		On exit  : 0/0
 18114 ;;		Unchanged: 0/0
 18115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18116 ;;      Params:         0       0       0       0       0       0       0
 18117 ;;      Locals:         1       0       0       0       0       0       0
 18118 ;;      Temps:          0       0       0       0       0       0       0
 18119 ;;      Totals:         1       0       0       0       0       0       0
 18120 ;;Total ram usage:        1 bytes
 18121 ;; Hardware stack levels used:    1
 18122 ;; Hardware stack levels required when called:    3
 18123 ;; This function calls:
 18124 ;;		_Busy_eep
 18125 ;;		_Write_b_eep
 18126 ;; This function is called by:
 18127 ;;		_vscp_check_pstorage
 18128 ;; This function uses a non-reentrant model
 18129 ;;
 18130                           
 18131                           	psect	text66
 18132  004876                     __ptext66:
 18133                           	opt stack 0
 18134  004876                     _vscp_setControlByte:
 18135                           	opt stack 25
 18136                           
 18137                           ;incstack = 0
 18138                           ;incstack = 0
 18139                           ;vscp_setControlByte@ctrl stored from wreg
 18140  004876  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 18141                           
 18142                           ;main.c: 3389: (Busy_eep(), Write_b_eep(0x03,ctrl));
 18143  00487A  ECB7  F024         	call	_Busy_eep	;wreg free
 18144  00487E  6A09               	clrf	?_Write_b_eep+1,c
 18145  004880  0E03               	movlw	3
 18146  004882  6E08               	movwf	?_Write_b_eep,c
 18147  004884  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18148  004888  EF73  F022         	goto	_Write_b_eep	;wreg free
 18149  00488C                     __end_of_vscp_setControlByte:
 18150                           	opt stack 0
 18151                           tblptru	equ	0xFF8
 18152                           tblptrh	equ	0xFF7
 18153                           tblptrl	equ	0xFF6
 18154                           tablat	equ	0xFF5
 18155                           prodh	equ	0xFF4
 18156                           prodl	equ	0xFF3
 18157                           intcon	equ	0xFF2
 18158                           intcon2	equ	0xFF1
 18159                           postinc0	equ	0xFEE
 18160                           wreg	equ	0xFE8
 18161                           indf1	equ	0xFE7
 18162                           fsr1h	equ	0xFE2
 18163                           fsr1l	equ	0xFE1
 18164                           indf2	equ	0xFDF
 18165                           postinc2	equ	0xFDE
 18166                           postdec2	equ	0xFDD
 18167                           plusw2	equ	0xFDB
 18168                           fsr2h	equ	0xFDA
 18169                           fsr2l	equ	0xFD9
 18170                           status	equ	0xFD8
 18171                           
 18172 ;; *************** function _vscp_setSegmentCRC *****************
 18173 ;; Defined at:
 18174 ;;		line 3379 in file "../main.c"
 18175 ;; Parameters:    Size  Location     Type
 18176 ;;  crc             1    wreg     unsigned char 
 18177 ;; Auto vars:     Size  Location     Type
 18178 ;;  crc             1   11[COMRAM] unsigned char 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;		None               void
 18181 ;; Registers used:
 18182 ;;		wreg, status,2, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18188 ;;      Params:         0       0       0       0       0       0       0
 18189 ;;      Locals:         1       0       0       0       0       0       0
 18190 ;;      Temps:          0       0       0       0       0       0       0
 18191 ;;      Totals:         1       0       0       0       0       0       0
 18192 ;;Total ram usage:        1 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    3
 18195 ;; This function calls:
 18196 ;;		_Busy_eep
 18197 ;;		_Write_b_eep
 18198 ;; This function is called by:
 18199 ;;		_vscp_check_pstorage
 18200 ;;		_vscp_handleProbeState
 18201 ;;		_vscp_handleHeartbeat
 18202 ;;		_vscp_handleSetNickname
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           	psect	text67
 18207  00488C                     __ptext67:
 18208                           	opt stack 0
 18209  00488C                     _vscp_setSegmentCRC:
 18210                           	opt stack 24
 18211                           
 18212                           ;incstack = 0
 18213                           ;incstack = 0
 18214                           ;vscp_setSegmentCRC@crc stored from wreg
 18215  00488C  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 18216                           
 18217                           ;main.c: 3380: (Busy_eep(), Write_b_eep(0x02,crc));
 18218  004890  ECB7  F024         	call	_Busy_eep	;wreg free
 18219  004894  6A09               	clrf	?_Write_b_eep+1,c
 18220  004896  0E02               	movlw	2
 18221  004898  6E08               	movwf	?_Write_b_eep,c
 18222  00489A  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 18223  00489E  EF73  F022         	goto	_Write_b_eep	;wreg free
 18224  0048A2                     __end_of_vscp_setSegmentCRC:
 18225                           	opt stack 0
 18226                           tblptru	equ	0xFF8
 18227                           tblptrh	equ	0xFF7
 18228                           tblptrl	equ	0xFF6
 18229                           tablat	equ	0xFF5
 18230                           prodh	equ	0xFF4
 18231                           prodl	equ	0xFF3
 18232                           intcon	equ	0xFF2
 18233                           intcon2	equ	0xFF1
 18234                           postinc0	equ	0xFEE
 18235                           wreg	equ	0xFE8
 18236                           indf1	equ	0xFE7
 18237                           fsr1h	equ	0xFE2
 18238                           fsr1l	equ	0xFE1
 18239                           indf2	equ	0xFDF
 18240                           postinc2	equ	0xFDE
 18241                           postdec2	equ	0xFDD
 18242                           plusw2	equ	0xFDB
 18243                           fsr2h	equ	0xFDA
 18244                           fsr2l	equ	0xFD9
 18245                           status	equ	0xFD8
 18246                           
 18247 ;; *************** function _vscp_getSegmentCRC *****************
 18248 ;; Defined at:
 18249 ;;		line 3370 in file "../main.c"
 18250 ;; Parameters:    Size  Location     Type
 18251 ;;		None
 18252 ;; Auto vars:     Size  Location     Type
 18253 ;;		None
 18254 ;; Return value:  Size  Location     Type
 18255 ;;                  1    wreg      unsigned char 
 18256 ;; Registers used:
 18257 ;;		wreg, status,2, cstack
 18258 ;; Tracked objects:
 18259 ;;		On entry : 0/0
 18260 ;;		On exit  : 0/0
 18261 ;;		Unchanged: 0/0
 18262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18263 ;;      Params:         0       0       0       0       0       0       0
 18264 ;;      Locals:         0       0       0       0       0       0       0
 18265 ;;      Temps:          0       0       0       0       0       0       0
 18266 ;;      Totals:         0       0       0       0       0       0       0
 18267 ;;Total ram usage:        0 bytes
 18268 ;; Hardware stack levels used:    1
 18269 ;; Hardware stack levels required when called:    3
 18270 ;; This function calls:
 18271 ;;		_Read_b_eep
 18272 ;; This function is called by:
 18273 ;;		_vscp_check_pstorage
 18274 ;;		_vscp_handleHeartbeat
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           	psect	text68
 18279  00495C                     __ptext68:
 18280                           	opt stack 0
 18281  00495C                     _vscp_getSegmentCRC:
 18282                           	opt stack 24
 18283                           
 18284                           ;main.c: 3371: return Read_b_eep(0x02);
 18285                           
 18286                           ;incstack = 0
 18287                           ;incstack = 0
 18288  00495C  6A09               	clrf	?_Read_b_eep+1,c
 18289  00495E  0E02               	movlw	2
 18290  004960  6E08               	movwf	?_Read_b_eep,c
 18291  004962  EF83  F024         	goto	_Read_b_eep	;wreg free
 18292  004966                     __end_of_vscp_getSegmentCRC:
 18293                           	opt stack 0
 18294                           tblptru	equ	0xFF8
 18295                           tblptrh	equ	0xFF7
 18296                           tblptrl	equ	0xFF6
 18297                           tablat	equ	0xFF5
 18298                           prodh	equ	0xFF4
 18299                           prodl	equ	0xFF3
 18300                           intcon	equ	0xFF2
 18301                           intcon2	equ	0xFF1
 18302                           postinc0	equ	0xFEE
 18303                           wreg	equ	0xFE8
 18304                           indf1	equ	0xFE7
 18305                           fsr1h	equ	0xFE2
 18306                           fsr1l	equ	0xFE1
 18307                           indf2	equ	0xFDF
 18308                           postinc2	equ	0xFDE
 18309                           postdec2	equ	0xFDD
 18310                           plusw2	equ	0xFDB
 18311                           fsr2h	equ	0xFDA
 18312                           fsr2l	equ	0xFD9
 18313                           status	equ	0xFD8
 18314                           
 18315 ;; *************** function _vscp_writeNicknamePermanent *****************
 18316 ;; Defined at:
 18317 ;;		line 1370 in file "../main.c"
 18318 ;; Parameters:    Size  Location     Type
 18319 ;;  nickname        1    wreg     unsigned char 
 18320 ;; Auto vars:     Size  Location     Type
 18321 ;;  nickname        1   11[COMRAM] unsigned char 
 18322 ;; Return value:  Size  Location     Type
 18323 ;;		None               void
 18324 ;; Registers used:
 18325 ;;		wreg, status,2, cstack
 18326 ;; Tracked objects:
 18327 ;;		On entry : 0/0
 18328 ;;		On exit  : 0/0
 18329 ;;		Unchanged: 0/0
 18330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18331 ;;      Params:         0       0       0       0       0       0       0
 18332 ;;      Locals:         1       0       0       0       0       0       0
 18333 ;;      Temps:          0       0       0       0       0       0       0
 18334 ;;      Totals:         1       0       0       0       0       0       0
 18335 ;;Total ram usage:        1 bytes
 18336 ;; Hardware stack levels used:    1
 18337 ;; Hardware stack levels required when called:    3
 18338 ;; This function calls:
 18339 ;;		_Busy_eep
 18340 ;;		_Write_b_eep
 18341 ;; This function is called by:
 18342 ;;		_vscp_check_pstorage
 18343 ;;		_vscp_handleProbeState
 18344 ;;		_vscp_handleHeartbeat
 18345 ;;		_vscp_handleSetNickname
 18346 ;;		_vscp_handleDropNickname
 18347 ;; This function uses a non-reentrant model
 18348 ;;
 18349                           
 18350                           	psect	text69
 18351  0048A2                     __ptext69:
 18352                           	opt stack 0
 18353  0048A2                     _vscp_writeNicknamePermanent:
 18354                           	opt stack 24
 18355                           
 18356                           ;incstack = 0
 18357                           ;incstack = 0
 18358                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18359  0048A2  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18360                           
 18361                           ;main.c: 1371: (Busy_eep(), Write_b_eep(0x01,nickname));
 18362  0048A6  ECB7  F024         	call	_Busy_eep	;wreg free
 18363  0048AA  6A09               	clrf	?_Write_b_eep+1,c
 18364  0048AC  0E01               	movlw	1
 18365  0048AE  6E08               	movwf	?_Write_b_eep,c
 18366  0048B0  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18367  0048B4  EF73  F022         	goto	_Write_b_eep	;wreg free
 18368  0048B8                     __end_of_vscp_writeNicknamePermanent:
 18369                           	opt stack 0
 18370                           tblptru	equ	0xFF8
 18371                           tblptrh	equ	0xFF7
 18372                           tblptrl	equ	0xFF6
 18373                           tablat	equ	0xFF5
 18374                           prodh	equ	0xFF4
 18375                           prodl	equ	0xFF3
 18376                           intcon	equ	0xFF2
 18377                           intcon2	equ	0xFF1
 18378                           postinc0	equ	0xFEE
 18379                           wreg	equ	0xFE8
 18380                           indf1	equ	0xFE7
 18381                           fsr1h	equ	0xFE2
 18382                           fsr1l	equ	0xFE1
 18383                           indf2	equ	0xFDF
 18384                           postinc2	equ	0xFDE
 18385                           postdec2	equ	0xFDD
 18386                           plusw2	equ	0xFDB
 18387                           fsr2h	equ	0xFDA
 18388                           fsr2l	equ	0xFD9
 18389                           status	equ	0xFD8
 18390                           
 18391 ;; *************** function _Write_b_eep *****************
 18392 ;; Defined at:
 18393 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 18394 ;; Parameters:    Size  Location     Type
 18395 ;;  badd            2    7[COMRAM] unsigned int 
 18396 ;;  bdat            1    9[COMRAM] unsigned char 
 18397 ;; Auto vars:     Size  Location     Type
 18398 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 18399 ;; Return value:  Size  Location     Type
 18400 ;;		None               void
 18401 ;; Registers used:
 18402 ;;		wreg, status,2
 18403 ;; Tracked objects:
 18404 ;;		On entry : 0/0
 18405 ;;		On exit  : 0/0
 18406 ;;		Unchanged: 0/0
 18407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18408 ;;      Params:         3       0       0       0       0       0       0
 18409 ;;      Locals:         1       0       0       0       0       0       0
 18410 ;;      Temps:          0       0       0       0       0       0       0
 18411 ;;      Totals:         4       0       0       0       0       0       0
 18412 ;;Total ram usage:        4 bytes
 18413 ;; Hardware stack levels used:    1
 18414 ;; Hardware stack levels required when called:    2
 18415 ;; This function calls:
 18416 ;;		Nothing
 18417 ;; This function is called by:
 18418 ;;		_main
 18419 ;;		_init_app_eeprom
 18420 ;;		_vscp_setGUID
 18421 ;;		_vscp_setManufacturerId
 18422 ;;		_vscp_writeNicknamePermanent
 18423 ;;		_vscp_writeAppReg
 18424 ;;		_vscp_setUserID
 18425 ;;		_vscp_setSegmentCRC
 18426 ;;		_vscp_setControlByte
 18427 ;;		_vscp_goBootloaderMode
 18428 ;; This function uses a non-reentrant model
 18429 ;;
 18430                           
 18431                           	psect	text70
 18432  0044E6                     __ptext70:
 18433                           	opt stack 0
 18434  0044E6                     _Write_b_eep:
 18435                           	opt stack 23
 18436                           
 18437                           ;incstack = 0
 18438                           ;incstack = 0
 18439  0044E6  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 18440  0044EA  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 18441  0044EE  9EA6               	bcf	4006,7,c	;volatile
 18442  0044F0  9CA6               	bcf	4006,6,c	;volatile
 18443  0044F2  84A6               	bsf	4006,2,c	;volatile
 18444  0044F4  0E00               	movlw	0
 18445  0044F6  BEF2               	btfsc	intcon,7,c	;volatile
 18446  0044F8  0E01               	movlw	1
 18447  0044FA  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18448  0044FC  9EF2               	bcf	intcon,7,c	;volatile
 18449  0044FE  0E55               	movlw	85
 18450  004500  6EA7               	movwf	4007,c	;volatile
 18451  004502  0EAA               	movlw	170
 18452  004504  6EA7               	movwf	4007,c	;volatile
 18453  004506  82A6               	bsf	4006,1,c	;volatile
 18454  004508                     l1565:
 18455  004508  B2A6               	btfsc	4006,1,c	;volatile
 18456  00450A  D7FE               	goto	l1565
 18457  00450C  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18458  00450E  D002               	bra	u16205
 18459  004510  9EF2               	bcf	intcon,7,c	;volatile
 18460  004512  D001               	bra	u16206
 18461  004514                     u16205:
 18462  004514  8EF2               	bsf	intcon,7,c	;volatile
 18463  004516                     u16206:
 18464  004516  94A6               	bcf	4006,2,c	;volatile
 18465  004518  0012               	return	
 18466  00451A                     __end_of_Write_b_eep:
 18467                           	opt stack 0
 18468                           tblptru	equ	0xFF8
 18469                           tblptrh	equ	0xFF7
 18470                           tblptrl	equ	0xFF6
 18471                           tablat	equ	0xFF5
 18472                           prodh	equ	0xFF4
 18473                           prodl	equ	0xFF3
 18474                           intcon	equ	0xFF2
 18475                           intcon2	equ	0xFF1
 18476                           postinc0	equ	0xFEE
 18477                           wreg	equ	0xFE8
 18478                           indf1	equ	0xFE7
 18479                           fsr1h	equ	0xFE2
 18480                           fsr1l	equ	0xFE1
 18481                           indf2	equ	0xFDF
 18482                           postinc2	equ	0xFDE
 18483                           postdec2	equ	0xFDD
 18484                           plusw2	equ	0xFDB
 18485                           fsr2h	equ	0xFDA
 18486                           fsr2l	equ	0xFD9
 18487                           status	equ	0xFD8
 18488                           
 18489 ;; *************** function _Busy_eep *****************
 18490 ;; Defined at:
 18491 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 18492 ;; Parameters:    Size  Location     Type
 18493 ;;		None
 18494 ;; Auto vars:     Size  Location     Type
 18495 ;;		None
 18496 ;; Return value:  Size  Location     Type
 18497 ;;		None               void
 18498 ;; Registers used:
 18499 ;;		None
 18500 ;; Tracked objects:
 18501 ;;		On entry : 0/0
 18502 ;;		On exit  : 0/0
 18503 ;;		Unchanged: 0/0
 18504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18505 ;;      Params:         0       0       0       0       0       0       0
 18506 ;;      Locals:         0       0       0       0       0       0       0
 18507 ;;      Temps:          0       0       0       0       0       0       0
 18508 ;;      Totals:         0       0       0       0       0       0       0
 18509 ;;Total ram usage:        0 bytes
 18510 ;; Hardware stack levels used:    1
 18511 ;; Hardware stack levels required when called:    2
 18512 ;; This function calls:
 18513 ;;		Nothing
 18514 ;; This function is called by:
 18515 ;;		_main
 18516 ;;		_init_app_eeprom
 18517 ;;		_vscp_setGUID
 18518 ;;		_vscp_setManufacturerId
 18519 ;;		_vscp_writeNicknamePermanent
 18520 ;;		_vscp_writeAppReg
 18521 ;;		_vscp_setUserID
 18522 ;;		_vscp_setSegmentCRC
 18523 ;;		_vscp_setControlByte
 18524 ;;		_vscp_goBootloaderMode
 18525 ;; This function uses a non-reentrant model
 18526 ;;
 18527                           
 18528                           	psect	text71
 18529  00496E                     __ptext71:
 18530                           	opt stack 0
 18531  00496E                     _Busy_eep:
 18532                           	opt stack 23
 18533  00496E                     l1540:
 18534  00496E  A2A6               	btfss	4006,1,c	;volatile
 18535  004970  0012               	return	
 18536  004972  D7FD               	goto	l1540
 18537  004974                     __end_of_Busy_eep:
 18538                           	opt stack 0
 18539                           tblptru	equ	0xFF8
 18540                           tblptrh	equ	0xFF7
 18541                           tblptrl	equ	0xFF6
 18542                           tablat	equ	0xFF5
 18543                           prodh	equ	0xFF4
 18544                           prodl	equ	0xFF3
 18545                           intcon	equ	0xFF2
 18546                           intcon2	equ	0xFF1
 18547                           postinc0	equ	0xFEE
 18548                           wreg	equ	0xFE8
 18549                           indf1	equ	0xFE7
 18550                           fsr1h	equ	0xFE2
 18551                           fsr1l	equ	0xFE1
 18552                           indf2	equ	0xFDF
 18553                           postinc2	equ	0xFDE
 18554                           postdec2	equ	0xFDD
 18555                           plusw2	equ	0xFDB
 18556                           fsr2h	equ	0xFDA
 18557                           fsr2l	equ	0xFD9
 18558                           status	equ	0xFD8
 18559                           
 18560 ;; *************** function _init *****************
 18561 ;; Defined at:
 18562 ;;		line 626 in file "../main.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;		None
 18565 ;; Auto vars:     Size  Location     Type
 18566 ;;		None
 18567 ;; Return value:  Size  Location     Type
 18568 ;;		None               void
 18569 ;; Registers used:
 18570 ;;		wreg, status,2, status,0, cstack
 18571 ;; Tracked objects:
 18572 ;;		On entry : 0/0
 18573 ;;		On exit  : 0/0
 18574 ;;		Unchanged: 0/0
 18575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18576 ;;      Params:         0       0       0       0       0       0       0
 18577 ;;      Locals:         0       0       0       0       0       0       0
 18578 ;;      Temps:          0       0       0       0       0       0       0
 18579 ;;      Totals:         0       0       0       0       0       0       0
 18580 ;;Total ram usage:        0 bytes
 18581 ;; Hardware stack levels used:    1
 18582 ;; Hardware stack levels required when called:    4
 18583 ;; This function calls:
 18584 ;;		_ECANInitialize
 18585 ;;		_WriteTimer0
 18586 ;;		_OpenTimer0
 18587 ;; This function is called by:
 18588 ;;		_main
 18589 ;; This function uses a non-reentrant model
 18590 ;;
 18591                           
 18592                           	psect	text72
 18593  004464                     __ptext72:
 18594                           	opt stack 0
 18595  004464                     _init:
 18596                           	opt stack 25
 18597                           
 18598                           ;main.c: 633: ADCON1 = 0x0f;
 18599                           
 18600                           ;incstack = 0
 18601                           ;incstack = 0
 18602  004464  0E0F               	movlw	15
 18603  004466  6EC1               	movwf	4033,c	;volatile
 18604                           
 18605                           ;main.c: 643: TRISA = 0b00000000;
 18606  004468  6A92               	clrf	3986,c	;volatile
 18607                           
 18608                           ;main.c: 644: PORTA = 0x00;
 18609  00446A  6A80               	clrf	3968,c	;volatile
 18610                           
 18611                           ;main.c: 656: TRISB = 0b00001000;
 18612  00446C  0E08               	movlw	8
 18613  00446E  6E93               	movwf	3987,c	;volatile
 18614                           
 18615                           ;main.c: 657: PORTB = 0x00;
 18616  004470  6A81               	clrf	3969,c	;volatile
 18617                           
 18618                           ;main.c: 667: TRISC = 0b00000001;
 18619  004472  0E01               	movlw	1
 18620  004474  6E94               	movwf	3988,c	;volatile
 18621                           
 18622                           ;main.c: 668: PORTC = 0x00;
 18623  004476  6A82               	clrf	3970,c	;volatile
 18624                           
 18625                           ;main.c: 694: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 18626  004478  0E92               	movlw	146
 18627  00447A  ECDD  F023         	call	_OpenTimer0
 18628                           
 18629                           ;main.c: 695: WriteTimer0( 0xfb1d );
 18630  00447E  0EFB               	movlw	251
 18631  004480  6E09               	movwf	?_WriteTimer0+1,c
 18632  004482  0E1D               	movlw	29
 18633  004484  6E08               	movwf	?_WriteTimer0,c
 18634  004486  EC7A  F024         	call	_WriteTimer0	;wreg free
 18635                           
 18636                           ;main.c: 698: PORTBbits.RB0 = 0;
 18637  00448A  9081               	bcf	3969,0,c	;volatile
 18638                           
 18639                           ;main.c: 699: PORTBbits.RB1 = 0;
 18640  00448C  9281               	bcf	3969,1,c	;volatile
 18641                           
 18642                           ;main.c: 700: PORTCbits.RC3 = 0;
 18643  00448E  9682               	bcf	3970,3,c	;volatile
 18644                           
 18645                           ;main.c: 701: PORTCbits.RC4 = 0;
 18646  004490  9882               	bcf	3970,4,c	;volatile
 18647                           
 18648                           ;main.c: 702: PORTCbits.RC5 = 0;
 18649  004492  9A82               	bcf	3970,5,c	;volatile
 18650                           
 18651                           ;main.c: 703: PORTCbits.RC6 = 0;
 18652  004494  9C82               	bcf	3970,6,c	;volatile
 18653                           
 18654                           ;main.c: 704: PORTCbits.RC7 = 0;
 18655  004496  9E82               	bcf	3970,7,c	;volatile
 18656                           
 18657                           ;main.c: 705: PORTAbits.RA2 = 0;
 18658  004498  9480               	bcf	3968,2,c	;volatile
 18659                           
 18660                           ;main.c: 706: PORTAbits.RA1 = 0;
 18661  00449A  9280               	bcf	3968,1,c	;volatile
 18662                           
 18663                           ;main.c: 707: PORTAbits.RA0 = 0;
 18664  00449C  9080               	bcf	3968,0,c	;volatile
 18665                           
 18666                           ;main.c: 710: ECANInitialize();
 18667  00449E  ECFE  F020         	call	_ECANInitialize	;wreg free
 18668                           
 18669                           ;main.c: 731: INTCONbits.PEIE = 1;
 18670  0044A2  8CF2               	bsf	intcon,6,c	;volatile
 18671                           
 18672                           ;main.c: 734: INTCONbits.GIE = 1;
 18673  0044A4  8EF2               	bsf	intcon,7,c	;volatile
 18674  0044A6  0012               	return	
 18675  0044A8                     __end_of_init:
 18676                           	opt stack 0
 18677                           tblptru	equ	0xFF8
 18678                           tblptrh	equ	0xFF7
 18679                           tblptrl	equ	0xFF6
 18680                           tablat	equ	0xFF5
 18681                           prodh	equ	0xFF4
 18682                           prodl	equ	0xFF3
 18683                           intcon	equ	0xFF2
 18684                           intcon2	equ	0xFF1
 18685                           postinc0	equ	0xFEE
 18686                           wreg	equ	0xFE8
 18687                           indf1	equ	0xFE7
 18688                           fsr1h	equ	0xFE2
 18689                           fsr1l	equ	0xFE1
 18690                           indf2	equ	0xFDF
 18691                           postinc2	equ	0xFDE
 18692                           postdec2	equ	0xFDD
 18693                           plusw2	equ	0xFDB
 18694                           fsr2h	equ	0xFDA
 18695                           fsr2l	equ	0xFD9
 18696                           status	equ	0xFD8
 18697                           
 18698 ;; *************** function _OpenTimer0 *****************
 18699 ;; Defined at:
 18700 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  config          1    wreg     unsigned char 
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;  config          1    7[COMRAM] unsigned char 
 18705 ;; Return value:  Size  Location     Type
 18706 ;;		None               void
 18707 ;; Registers used:
 18708 ;;		wreg, status,2, status,0
 18709 ;; Tracked objects:
 18710 ;;		On entry : 0/0
 18711 ;;		On exit  : 0/0
 18712 ;;		Unchanged: 0/0
 18713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18714 ;;      Params:         0       0       0       0       0       0       0
 18715 ;;      Locals:         1       0       0       0       0       0       0
 18716 ;;      Temps:          0       0       0       0       0       0       0
 18717 ;;      Totals:         1       0       0       0       0       0       0
 18718 ;;Total ram usage:        1 bytes
 18719 ;; Hardware stack levels used:    1
 18720 ;; Hardware stack levels required when called:    2
 18721 ;; This function calls:
 18722 ;;		Nothing
 18723 ;; This function is called by:
 18724 ;;		_init
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           	psect	text73
 18729  0047BA                     __ptext73:
 18730                           	opt stack 0
 18731  0047BA                     _OpenTimer0:
 18732                           	opt stack 26
 18733                           
 18734                           ;incstack = 0
 18735                           ;incstack = 0
 18736                           ;OpenTimer0@config stored from wreg
 18737  0047BA  CFE8 F008          	movff	wreg,OpenTimer0@config
 18738  0047BE  5008               	movf	OpenTimer0@config,w,c
 18739  0047C0  0B7F               	andlw	127
 18740  0047C2  6ED5               	movwf	4053,c	;volatile
 18741  0047C4  6AD7               	clrf	4055,c	;volatile
 18742  0047C6  6AD6               	clrf	4054,c	;volatile
 18743  0047C8  94F2               	bcf	intcon,2,c	;volatile
 18744  0047CA  AE08               	btfss	OpenTimer0@config,7,c
 18745  0047CC  D002               	goto	l1581
 18746  0047CE  8AF2               	bsf	intcon,5,c	;volatile
 18747  0047D0  D001               	goto	l1582
 18748  0047D2                     l1581:
 18749  0047D2  9AF2               	bcf	intcon,5,c	;volatile
 18750  0047D4                     l1582:
 18751  0047D4  8ED5               	bsf	4053,7,c	;volatile
 18752  0047D6  0012               	return	
 18753  0047D8                     __end_of_OpenTimer0:
 18754                           	opt stack 0
 18755                           tblptru	equ	0xFF8
 18756                           tblptrh	equ	0xFF7
 18757                           tblptrl	equ	0xFF6
 18758                           tablat	equ	0xFF5
 18759                           prodh	equ	0xFF4
 18760                           prodl	equ	0xFF3
 18761                           intcon	equ	0xFF2
 18762                           intcon2	equ	0xFF1
 18763                           postinc0	equ	0xFEE
 18764                           wreg	equ	0xFE8
 18765                           indf1	equ	0xFE7
 18766                           fsr1h	equ	0xFE2
 18767                           fsr1l	equ	0xFE1
 18768                           indf2	equ	0xFDF
 18769                           postinc2	equ	0xFDE
 18770                           postdec2	equ	0xFDD
 18771                           plusw2	equ	0xFDB
 18772                           fsr2h	equ	0xFDA
 18773                           fsr2l	equ	0xFD9
 18774                           status	equ	0xFD8
 18775                           
 18776 ;; *************** function _WriteTimer0 *****************
 18777 ;; Defined at:
 18778 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18779 ;; Parameters:    Size  Location     Type
 18780 ;;  timer0          2    7[COMRAM] unsigned int 
 18781 ;; Auto vars:     Size  Location     Type
 18782 ;;  timer           2    9[COMRAM] struct Timers
 18783 ;; Return value:  Size  Location     Type
 18784 ;;		None               void
 18785 ;; Registers used:
 18786 ;;		None
 18787 ;; Tracked objects:
 18788 ;;		On entry : 0/0
 18789 ;;		On exit  : 0/0
 18790 ;;		Unchanged: 0/0
 18791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18792 ;;      Params:         2       0       0       0       0       0       0
 18793 ;;      Locals:         2       0       0       0       0       0       0
 18794 ;;      Temps:          0       0       0       0       0       0       0
 18795 ;;      Totals:         4       0       0       0       0       0       0
 18796 ;;Total ram usage:        4 bytes
 18797 ;; Hardware stack levels used:    1
 18798 ;; Hardware stack levels required when called:    2
 18799 ;; This function calls:
 18800 ;;		Nothing
 18801 ;; This function is called by:
 18802 ;;		_init
 18803 ;; This function uses a non-reentrant model
 18804 ;;
 18805                           
 18806                           	psect	text74
 18807  0048F4                     __ptext74:
 18808                           	opt stack 0
 18809  0048F4                     _WriteTimer0:
 18810                           	opt stack 26
 18811                           
 18812                           ;incstack = 0
 18813                           ;incstack = 0
 18814  0048F4  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18815  0048F8  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18816  0048FC  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18817  004900  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18818  004904  0012               	return	
 18819  004906                     __end_of_WriteTimer0:
 18820                           	opt stack 0
 18821                           tblptru	equ	0xFF8
 18822                           tblptrh	equ	0xFF7
 18823                           tblptrl	equ	0xFF6
 18824                           tablat	equ	0xFF5
 18825                           prodh	equ	0xFF4
 18826                           prodl	equ	0xFF3
 18827                           intcon	equ	0xFF2
 18828                           intcon2	equ	0xFF1
 18829                           postinc0	equ	0xFEE
 18830                           wreg	equ	0xFE8
 18831                           indf1	equ	0xFE7
 18832                           fsr1h	equ	0xFE2
 18833                           fsr1l	equ	0xFE1
 18834                           indf2	equ	0xFDF
 18835                           postinc2	equ	0xFDE
 18836                           postdec2	equ	0xFDD
 18837                           plusw2	equ	0xFDB
 18838                           fsr2h	equ	0xFDA
 18839                           fsr2l	equ	0xFD9
 18840                           status	equ	0xFD8
 18841                           
 18842 ;; *************** function _ECANInitialize *****************
 18843 ;; Defined at:
 18844 ;;		line 168 in file "../ECAN.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;		None
 18847 ;; Auto vars:     Size  Location     Type
 18848 ;;		None
 18849 ;; Return value:  Size  Location     Type
 18850 ;;		None               void
 18851 ;; Registers used:
 18852 ;;		wreg, status,2, status,0, cstack
 18853 ;; Tracked objects:
 18854 ;;		On entry : 0/0
 18855 ;;		On exit  : 0/0
 18856 ;;		Unchanged: 0/0
 18857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18858 ;;      Params:         0       0       0       0       0       0       0
 18859 ;;      Locals:         0       0       0       0       0       0       0
 18860 ;;      Temps:          0       0       0       0       0       0       0
 18861 ;;      Totals:         0       0       0       0       0       0       0
 18862 ;;Total ram usage:        0 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; Hardware stack levels required when called:    3
 18865 ;; This function calls:
 18866 ;;		_ECANSetOperationMode
 18867 ;; This function is called by:
 18868 ;;		_init
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           	psect	text75
 18873  0041FC                     __ptext75:
 18874                           	opt stack 0
 18875  0041FC                     _ECANInitialize:
 18876                           	opt stack 25
 18877                           
 18878                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18879                           
 18880                           ;incstack = 0
 18881                           ;incstack = 0
 18882  0041FC  0E80               	movlw	128
 18883  0041FE  EC2F  F024         	call	_ECANSetOperationMode
 18884                           
 18885                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18886  004202  0E09               	movlw	9
 18887  004204  6E70               	movwf	3952,c	;volatile
 18888                           
 18889                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18890  004206  0EFC               	movlw	252
 18891  004208  6E71               	movwf	3953,c	;volatile
 18892                           
 18893                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18894                           ;ECAN.c: 181: (0 << 6) |
 18895                           ;ECAN.c: 182: (2-1);
 18896  00420A  0E01               	movlw	1
 18897  00420C  6E72               	movwf	3954,c	;volatile
 18898                           
 18899                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18900  00420E  0E20               	movlw	32
 18901  004210  6E73               	movwf	3955,c	;volatile
 18902                           
 18903                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18904  004212  8E77               	bsf	3959,7,c	;volatile
 18905                           
 18906                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18907  004214  9C77               	bcf	3959,6,c	;volatile
 18908                           
 18909                           ;ECAN.c: 205: RXB0CON = 0;
 18910  004216  6A60               	clrf	3936,c	;volatile
 18911                           
 18912                           ;ECAN.c: 211: RXB1CON = 0;
 18913  004218  010F               	movlb	15	; () banked
 18914  00421A  6B50               	clrf	80,b	;volatile
 18915                           
 18916                           ; BSR set to: 15
 18917                           ;ECAN.c: 221: B0CON = 0;
 18918  00421C  010E               	movlb	14	; () banked
 18919  00421E  6B20               	clrf	32,b	;volatile
 18920                           
 18921                           ; BSR set to: 14
 18922                           ;ECAN.c: 231: B1CON = 0;
 18923  004220  6B30               	clrf	48,b	;volatile
 18924                           
 18925                           ; BSR set to: 14
 18926                           ;ECAN.c: 241: B2CON = 0;
 18927  004222  6B40               	clrf	64,b	;volatile
 18928                           
 18929                           ; BSR set to: 14
 18930                           ;ECAN.c: 254: B3CON = 0 << 2;
 18931  004224  6B50               	clrf	80,b	;volatile
 18932                           
 18933                           ; BSR set to: 14
 18934                           ;ECAN.c: 264: B4CON = 0 << 2;
 18935  004226  6B60               	clrf	96,b	;volatile
 18936                           
 18937                           ; BSR set to: 14
 18938                           ;ECAN.c: 274: B5CON = 0 << 2;
 18939  004228  6B70               	clrf	112,b	;volatile
 18940                           
 18941                           ; BSR set to: 14
 18942                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18943  00422A  0EE0               	movlw	224
 18944  00422C  010D               	movlb	13	; () banked
 18945  00422E  6FF8               	movwf	248,b	;volatile
 18946                           
 18947                           ; BSR set to: 13
 18948                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18949  004230  010F               	movlb	15	; () banked
 18950  004232  6B00               	clrf	0,b	;volatile
 18951                           
 18952                           ; BSR set to: 15
 18953  004234  0E08               	movlw	8
 18954  004236  6F01               	movwf	1,b	;volatile
 18955                           
 18956                           ; BSR set to: 15
 18957  004238  6B02               	clrf	2,b	;volatile
 18958                           
 18959                           ; BSR set to: 15
 18960  00423A  6B03               	clrf	3,b	;volatile
 18961                           
 18962                           ; BSR set to: 15
 18963                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18964  00423C  6B04               	clrf	4,b	;volatile
 18965                           
 18966                           ; BSR set to: 15
 18967  00423E  0EE8               	movlw	232
 18968  004240  6F05               	movwf	5,b	;volatile
 18969                           
 18970                           ; BSR set to: 15
 18971  004242  0E1A               	movlw	26
 18972  004244  6F06               	movwf	6,b	;volatile
 18973                           
 18974                           ; BSR set to: 15
 18975  004246  6B07               	clrf	7,b	;volatile
 18976                           
 18977                           ; BSR set to: 15
 18978                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18979  004248  0E03               	movlw	3
 18980  00424A  010D               	movlb	13	; () banked
 18981  00424C  6FD4               	movwf	212,b	;volatile
 18982                           
 18983                           ; BSR set to: 13
 18984                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18985  00424E  6BD5               	clrf	213,b	;volatile
 18986                           
 18987                           ; BSR set to: 13
 18988                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18989  004250  6BE0               	clrf	224,b	;volatile
 18990                           
 18991                           ; BSR set to: 13
 18992                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18993  004252  0E11               	movlw	17
 18994  004254  6FE1               	movwf	225,b	;volatile
 18995                           
 18996                           ; BSR set to: 13
 18997                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18998  004256  6FE2               	movwf	226,b	;volatile
 18999                           
 19000                           ; BSR set to: 13
 19001                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 19002  004258  6BE3               	clrf	227,b	;volatile
 19003                           
 19004                           ; BSR set to: 13
 19005                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 19006  00425A  6BE4               	clrf	228,b	;volatile
 19007                           
 19008                           ; BSR set to: 13
 19009                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 19010  00425C  6BE5               	clrf	229,b	;volatile
 19011                           
 19012                           ; BSR set to: 13
 19013                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 19014  00425E  6BE6               	clrf	230,b	;volatile
 19015                           
 19016                           ; BSR set to: 13
 19017                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 19018  004260  6BE7               	clrf	231,b	;volatile
 19019                           
 19020                           ; BSR set to: 13
 19021                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 19022  004262  0E54               	movlw	84
 19023  004264  6FF0               	movwf	240,b	;volatile
 19024                           
 19025                           ; BSR set to: 13
 19026                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 19027  004266  0E05               	movlw	5
 19028  004268  6FF1               	movwf	241,b	;volatile
 19029                           
 19030                           ; BSR set to: 13
 19031                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19032  00426A  6BF2               	clrf	242,b	;volatile
 19033                           
 19034                           ; BSR set to: 13
 19035                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19036  00426C  6BF2               	clrf	242,b	;volatile
 19037                           
 19038                           ; BSR set to: 13
 19039                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 19040  00426E  0E0F               	movlw	15
 19041  004270  010F               	movlb	15	; () banked
 19042  004272  6F18               	movwf	24,b	;volatile
 19043                           
 19044                           ; BSR set to: 15
 19045  004274  0EE0               	movlw	224
 19046  004276  6F19               	movwf	25,b	;volatile
 19047                           
 19048                           ; BSR set to: 15
 19049  004278  6B1A               	clrf	26,b	;volatile
 19050                           
 19051                           ; BSR set to: 15
 19052  00427A  6B1B               	clrf	27,b	;volatile
 19053                           
 19054                           ; BSR set to: 15
 19055                           ;ECAN.c: 482: RXM0EXIDM = 1;
 19056  00427C  8719               	bsf	25,3,b	;volatile
 19057                           
 19058                           ; BSR set to: 15
 19059                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 19060  00427E  0E0F               	movlw	15
 19061  004280  6F1C               	movwf	28,b	;volatile
 19062                           
 19063                           ; BSR set to: 15
 19064  004282  0EE0               	movlw	224
 19065  004284  6F1D               	movwf	29,b	;volatile
 19066                           
 19067                           ; BSR set to: 15
 19068  004286  691E               	setf	30,b	;volatile
 19069                           
 19070                           ; BSR set to: 15
 19071  004288  6B1F               	clrf	31,b	;volatile
 19072                           
 19073                           ; BSR set to: 15
 19074                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 19075  00428A  871D               	bsf	29,3,b	;volatile
 19076                           
 19077                           ; BSR set to: 15
 19078                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 19079  00428C  0E00               	movlw	0
 19080  00428E  EF2F  F024         	goto	_ECANSetOperationMode
 19081  004292                     __end_of_ECANInitialize:
 19082                           	opt stack 0
 19083                           tblptru	equ	0xFF8
 19084                           tblptrh	equ	0xFF7
 19085                           tblptrl	equ	0xFF6
 19086                           tablat	equ	0xFF5
 19087                           prodh	equ	0xFF4
 19088                           prodl	equ	0xFF3
 19089                           intcon	equ	0xFF2
 19090                           intcon2	equ	0xFF1
 19091                           postinc0	equ	0xFEE
 19092                           wreg	equ	0xFE8
 19093                           indf1	equ	0xFE7
 19094                           fsr1h	equ	0xFE2
 19095                           fsr1l	equ	0xFE1
 19096                           indf2	equ	0xFDF
 19097                           postinc2	equ	0xFDE
 19098                           postdec2	equ	0xFDD
 19099                           plusw2	equ	0xFDB
 19100                           fsr2h	equ	0xFDA
 19101                           fsr2l	equ	0xFD9
 19102                           status	equ	0xFD8
 19103                           
 19104 ;; *************** function _ECANSetOperationMode *****************
 19105 ;; Defined at:
 19106 ;;		line 1012 in file "../ECAN.c"
 19107 ;; Parameters:    Size  Location     Type
 19108 ;;  mode            1    wreg     enum E16346
 19109 ;; Auto vars:     Size  Location     Type
 19110 ;;  mode            1    7[COMRAM] enum E16346
 19111 ;; Return value:  Size  Location     Type
 19112 ;;		None               void
 19113 ;; Registers used:
 19114 ;;		wreg, status,2, status,0
 19115 ;; Tracked objects:
 19116 ;;		On entry : 0/0
 19117 ;;		On exit  : 0/0
 19118 ;;		Unchanged: 0/0
 19119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19120 ;;      Params:         0       0       0       0       0       0       0
 19121 ;;      Locals:         1       0       0       0       0       0       0
 19122 ;;      Temps:          0       0       0       0       0       0       0
 19123 ;;      Totals:         1       0       0       0       0       0       0
 19124 ;;Total ram usage:        1 bytes
 19125 ;; Hardware stack levels used:    1
 19126 ;; Hardware stack levels required when called:    2
 19127 ;; This function calls:
 19128 ;;		Nothing
 19129 ;; This function is called by:
 19130 ;;		_ECANInitialize
 19131 ;;		_calculateSetFilterMask
 19132 ;; This function uses a non-reentrant model
 19133 ;;
 19134                           
 19135                           	psect	text76
 19136  00485E                     __ptext76:
 19137                           	opt stack 0
 19138  00485E                     _ECANSetOperationMode:
 19139                           	opt stack 23
 19140                           
 19141                           ;incstack = 0
 19142                           ;incstack = 0
 19143                           ;ECANSetOperationMode@mode stored from wreg
 19144  00485E  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 19145                           
 19146                           ;ECAN.c: 1013: CANCON &= 0x1F;
 19147  004862  0E1F               	movlw	31
 19148  004864  166F               	andwf	3951,f,c	;volatile
 19149                           
 19150                           ;ECAN.c: 1014: CANCON |= mode;
 19151  004866  5008               	movf	ECANSetOperationMode@mode,w,c
 19152  004868  126F               	iorwf	3951,f,c	;volatile
 19153  00486A                     l11994:
 19154  00486A  506F               	movf	3951,w,c	;volatile
 19155  00486C  0BE0               	andlw	224
 19156  00486E  1808               	xorwf	ECANSetOperationMode@mode,w,c
 19157  004870  B4D8               	btfsc	status,2,c
 19158  004872  0012               	return	
 19159  004874  D7FA               	goto	l11994
 19160  004876                     __end_of_ECANSetOperationMode:
 19161                           	opt stack 0
 19162                           tblptru	equ	0xFF8
 19163                           tblptrh	equ	0xFF7
 19164                           tblptrl	equ	0xFF6
 19165                           tablat	equ	0xFF5
 19166                           prodh	equ	0xFF4
 19167                           prodl	equ	0xFF3
 19168                           intcon	equ	0xFF2
 19169                           intcon2	equ	0xFF1
 19170                           postinc0	equ	0xFEE
 19171                           wreg	equ	0xFE8
 19172                           indf1	equ	0xFE7
 19173                           fsr1h	equ	0xFE2
 19174                           fsr1l	equ	0xFE1
 19175                           indf2	equ	0xFDF
 19176                           postinc2	equ	0xFDE
 19177                           postdec2	equ	0xFDD
 19178                           plusw2	equ	0xFDB
 19179                           fsr2h	equ	0xFDA
 19180                           fsr2l	equ	0xFD9
 19181                           status	equ	0xFD8
 19182                           
 19183 ;; *************** function _vscp_readAppReg *****************
 19184 ;; Defined at:
 19185 ;;		line 1410 in file "../main.c"
 19186 ;; Parameters:    Size  Location     Type
 19187 ;;  reg             1    wreg     unsigned char 
 19188 ;; Auto vars:     Size  Location     Type
 19189 ;;  reg             1   17[COMRAM] unsigned char 
 19190 ;;  rv              1   16[COMRAM] unsigned char 
 19191 ;; Return value:  Size  Location     Type
 19192 ;;                  1    wreg      unsigned char 
 19193 ;; Registers used:
 19194 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19195 ;; Tracked objects:
 19196 ;;		On entry : F/0
 19197 ;;		On exit  : 0/0
 19198 ;;		Unchanged: 0/0
 19199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19200 ;;      Params:         0       0       0       0       0       0       0
 19201 ;;      Locals:         2       0       0       0       0       0       0
 19202 ;;      Temps:          7       0       0       0       0       0       0
 19203 ;;      Totals:         9       0       0       0       0       0       0
 19204 ;;Total ram usage:        9 bytes
 19205 ;; Hardware stack levels used:    1
 19206 ;; Hardware stack levels required when called:    3
 19207 ;; This function calls:
 19208 ;;		_Read_b_eep
 19209 ;; This function is called by:
 19210 ;;		_vscp_readRegister
 19211 ;;		_vscp_handleProtocolEvent
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           	psect	text77
 19216  003148                     __ptext77:
 19217                           	opt stack 0
 19218  003148                     _vscp_readAppReg:
 19219                           	opt stack 24
 19220                           
 19221                           ;incstack = 0
 19222                           ;incstack = 0
 19223                           ;vscp_readAppReg@reg stored from wreg
 19224  003148  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 19225                           
 19226                           ; BSR set to: 0
 19227                           ;main.c: 1411: uint8_t rv;
 19228                           ;main.c: 1413: rv = 0x00;
 19229  00314C  6A11               	clrf	vscp_readAppReg@rv,c
 19230                           
 19231                           ; BSR set to: 0
 19232                           ;main.c: 1416: if ( 0 == vscp_page_select ) {
 19233  00314E  5053               	movf	_vscp_page_select+1,w,c
 19234  003150  1052               	iorwf	_vscp_page_select,w,c
 19235  003152  E001 D0AD          	bnz	l13530
 19236                           
 19237                           ; BSR set to: 0
 19238                           ;main.c: 1419: if ( reg == 0 ) {
 19239  003156  6612               	tstfsz	vscp_readAppReg@reg,c
 19240  003158  D006               	goto	l13476
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;main.c: 1420: rv = Read_b_eep(0x43 + 0);
 19244  00315A  6A09               	clrf	?_Read_b_eep+1,c
 19245  00315C  0E43               	movlw	67
 19246  00315E  6E08               	movwf	?_Read_b_eep,c
 19247  003160  EC83  F024         	call	_Read_b_eep	;wreg free
 19248  003164  D0C3               	goto	L69
 19249  003166                     l13476:
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;main.c: 1422: else if ( reg == 1 ) {
 19253  003166  0412               	decf	vscp_readAppReg@reg,w,c
 19254  003168  E106               	bnz	l13480
 19255                           
 19256                           ; BSR set to: 0
 19257                           ;main.c: 1423: rv = Read_b_eep(0x43 + 1);
 19258  00316A  6A09               	clrf	?_Read_b_eep+1,c
 19259  00316C  0E44               	movlw	68
 19260  00316E  6E08               	movwf	?_Read_b_eep,c
 19261  003170  EC83  F024         	call	_Read_b_eep	;wreg free
 19262  003174  D0BB               	goto	L69
 19263  003176                     l13480:
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;main.c: 1425: else if ( ( reg >= 2 ) &&
 19267                           ;main.c: 1426: ( reg <= 11 ) ) {
 19268  003176  0E01               	movlw	1
 19269  003178  6412               	cpfsgt	vscp_readAppReg@reg,c
 19270  00317A  D00C               	goto	l13486
 19271                           
 19272                           ; BSR set to: 0
 19273  00317C  0E0C               	movlw	12
 19274  00317E  6012               	cpfslt	vscp_readAppReg@reg,c
 19275  003180  D009               	goto	l13486
 19276  003182                     
 19277                           ; BSR set to: 0
 19278                           ;main.c: 1427: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
 19279  003182  0E43               	movlw	67
 19280  003184  2412               	addwf	vscp_readAppReg@reg,w,c
 19281  003186  6E08               	movwf	?_Read_b_eep,c
 19282  003188  6A09               	clrf	?_Read_b_eep+1,c
 19283  00318A  0E00               	movlw	0
 19284  00318C  2209               	addwfc	?_Read_b_eep+1,f,c
 19285  00318E  EC83  F024         	call	_Read_b_eep	;wreg free
 19286  003192  D0AC               	goto	L69
 19287  003194                     l13486:
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;main.c: 1431: else if ( reg == 12 ) {
 19291  003194  5012               	movf	vscp_readAppReg@reg,w,c
 19292  003196  0A0C               	xorlw	12
 19293  003198  E108               	bnz	l13490
 19294                           
 19295                           ; BSR set to: 0
 19296                           ;main.c: 1432: rv = ( TRISAbits.TRISA0 << 1 ) +
 19297                           ;main.c: 1433: TRISAbits.TRISA1;
 19298  00319A  3092               	rrcf	3986,w,c	;volatile
 19299  00319C  0B01               	andlw	1
 19300  00319E  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19301  0031A0  5092               	movf	3986,w,c	;volatile
 19302  0031A2  0B01               	andlw	1
 19303  0031A4  0D02               	mullw	2
 19304  0031A6  50F3               	movf	prodl,w,c
 19305  0031A8  D035               	goto	L71
 19306  0031AA                     l13490:
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;main.c: 1435: else if ( reg == 13 ) {
 19310  0031AA  5012               	movf	vscp_readAppReg@reg,w,c
 19311  0031AC  0A0D               	xorlw	13
 19312  0031AE  E134               	bnz	l13494
 19313                           
 19314                           ; BSR set to: 0
 19315                           ;main.c: 1436: rv = ( TRISAbits.TRISA2 << 7 ) +
 19316                           ;main.c: 1437: ( TRISCbits.TRISC7 << 6 ) +
 19317                           ;main.c: 1438: ( TRISCbits.TRISC6 << 5 ) +
 19318                           ;main.c: 1439: ( TRISCbits.TRISC5 << 4 ) +
 19319                           ;main.c: 1440: ( TRISCbits.TRISC4 << 3 ) +
 19320                           ;main.c: 1441: ( TRISCbits.TRISC3 << 2 ) +
 19321                           ;main.c: 1442: ( TRISBbits.TRISB1 << 1 ) +
 19322                           ;main.c: 1443: TRISBbits.TRISB0;
 19323  0031B0  5093               	movf	3987,w,c	;volatile
 19324  0031B2  0B01               	andlw	1
 19325  0031B4  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19326  0031B6  3093               	rrcf	3987,w,c	;volatile
 19327  0031B8  0B01               	andlw	1
 19328  0031BA  0D02               	mullw	2
 19329  0031BC  CFF3 F00B          	movff	prodl,??_vscp_readAppReg+1
 19330  0031C0  3094               	rrcf	3988,w,c	;volatile
 19331  0031C2  32E8               	rrcf	wreg,f,c
 19332  0031C4  32E8               	rrcf	wreg,f,c
 19333  0031C6  0B01               	andlw	1
 19334  0031C8  0D04               	mullw	4
 19335  0031CA  CFF3 F00C          	movff	prodl,??_vscp_readAppReg+2
 19336  0031CE  3894               	swapf	3988,w,c	;volatile
 19337  0031D0  0B01               	andlw	1
 19338  0031D2  0D08               	mullw	8
 19339  0031D4  CFF3 F00D          	movff	prodl,??_vscp_readAppReg+3
 19340  0031D8  3894               	swapf	3988,w,c	;volatile
 19341  0031DA  32E8               	rrcf	wreg,f,c
 19342  0031DC  0B01               	andlw	1
 19343  0031DE  0D10               	mullw	16
 19344  0031E0  CFF3 F00E          	movff	prodl,??_vscp_readAppReg+4
 19345  0031E4  3894               	swapf	3988,w,c	;volatile
 19346  0031E6  32E8               	rrcf	wreg,f,c
 19347  0031E8  32E8               	rrcf	wreg,f,c
 19348  0031EA  0B01               	andlw	1
 19349  0031EC  0D20               	mullw	32
 19350  0031EE  CFF3 F00F          	movff	prodl,??_vscp_readAppReg+5
 19351  0031F2  3494               	rlcf	3988,w,c	;volatile
 19352  0031F4  36E8               	rlcf	wreg,f,c
 19353  0031F6  0B01               	andlw	1
 19354  0031F8  0D40               	mullw	64
 19355  0031FA  CFF3 F010          	movff	prodl,??_vscp_readAppReg+6
 19356  0031FE  3092               	rrcf	3986,w,c	;volatile
 19357  003200  32E8               	rrcf	wreg,f,c
 19358  003202  0B01               	andlw	1
 19359  003204  0D80               	mullw	128
 19360  003206  50F3               	movf	prodl,w,c
 19361  003208  2410               	addwf	??_vscp_readAppReg+6,w,c
 19362  00320A  240F               	addwf	??_vscp_readAppReg+5,w,c
 19363  00320C  240E               	addwf	??_vscp_readAppReg+4,w,c
 19364  00320E  240D               	addwf	??_vscp_readAppReg+3,w,c
 19365  003210  240C               	addwf	??_vscp_readAppReg+2,w,c
 19366  003212  240B               	addwf	??_vscp_readAppReg+1,w,c
 19367  003214                     L71:
 19368  003214  240A               	addwf	??_vscp_readAppReg,w,c
 19369  003216  D06A               	goto	L69
 19370  003218                     l13494:
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;main.c: 1445: else if ( ( reg >= 14 ) &&
 19374                           ;main.c: 1446: ( reg <= 23 ) ) {
 19375  003218  0E0D               	movlw	13
 19376  00321A  6412               	cpfsgt	vscp_readAppReg@reg,c
 19377  00321C  D042               	goto	l13524
 19378                           
 19379                           ; BSR set to: 0
 19380  00321E  0E18               	movlw	24
 19381  003220  6012               	cpfslt	vscp_readAppReg@reg,c
 19382  003222  D03F               	goto	l13524
 19383  003224  D028               	goto	l13522
 19384  003226                     l13500:
 19385                           
 19386                           ; BSR set to: 0
 19387                           ;main.c: 1452: rv = PORTBbits.RB0;
 19388  003226  0E00               	movlw	0
 19389  003228  B081               	btfsc	3969,0,c	;volatile
 19390  00322A  0E01               	movlw	1
 19391  00322C  D05F               	goto	L69
 19392  00322E                     l13502:
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;main.c: 1457: rv = PORTBbits.RB1;
 19396  00322E  0E00               	movlw	0
 19397  003230  B281               	btfsc	3969,1,c	;volatile
 19398  003232  0E01               	movlw	1
 19399  003234  D05B               	goto	L69
 19400  003236                     l13504:
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;main.c: 1462: rv = PORTCbits.RC3;
 19404  003236  0E00               	movlw	0
 19405  003238  B682               	btfsc	3970,3,c	;volatile
 19406  00323A  0E01               	movlw	1
 19407  00323C  D057               	goto	L69
 19408  00323E                     l13506:
 19409                           
 19410                           ; BSR set to: 0
 19411                           ;main.c: 1467: rv = PORTCbits.RC4;
 19412  00323E  0E00               	movlw	0
 19413  003240  B882               	btfsc	3970,4,c	;volatile
 19414  003242  0E01               	movlw	1
 19415  003244  D053               	goto	L69
 19416  003246                     l13508:
 19417                           
 19418                           ; BSR set to: 0
 19419                           ;main.c: 1472: rv = PORTCbits.RC5;
 19420  003246  0E00               	movlw	0
 19421  003248  BA82               	btfsc	3970,5,c	;volatile
 19422  00324A  0E01               	movlw	1
 19423  00324C  D04F               	goto	L69
 19424  00324E                     l13510:
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;main.c: 1477: rv = PORTCbits.RC6;
 19428  00324E  0E00               	movlw	0
 19429  003250  BC82               	btfsc	3970,6,c	;volatile
 19430  003252  0E01               	movlw	1
 19431  003254  D04B               	goto	L69
 19432  003256                     l13512:
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;main.c: 1482: rv = PORTCbits.RC7;
 19436  003256  0E00               	movlw	0
 19437  003258  BE82               	btfsc	3970,7,c	;volatile
 19438  00325A  0E01               	movlw	1
 19439  00325C  D047               	goto	L69
 19440  00325E                     l13514:
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;main.c: 1487: rv = PORTAbits.RA2;
 19444  00325E  0E00               	movlw	0
 19445  003260  B480               	btfsc	3968,2,c	;volatile
 19446  003262  0E01               	movlw	1
 19447  003264  D043               	goto	L69
 19448  003266                     l13516:
 19449                           
 19450                           ; BSR set to: 0
 19451                           ;main.c: 1492: rv = PORTAbits.RA1;
 19452  003266  0E00               	movlw	0
 19453  003268  B280               	btfsc	3968,1,c	;volatile
 19454  00326A  0E01               	movlw	1
 19455  00326C  D03F               	goto	L69
 19456  00326E                     l13518:
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;main.c: 1497: rv = PORTAbits.RA0;
 19460  00326E  0E00               	movlw	0
 19461  003270  B080               	btfsc	3968,0,c	;volatile
 19462  003272  0E01               	movlw	1
 19463  003274  D03B               	goto	L69
 19464  003276                     l13522:
 19465                           
 19466                           ; BSR set to: 0
 19467  003276  5012               	movf	vscp_readAppReg@reg,w,c
 19468                           
 19469                           ; Switch size 1, requested type "space"
 19470                           ; Number of cases is 10, Range of values is 14 to 23
 19471                           ; switch strategies available:
 19472                           ; Name         Instructions Cycles
 19473                           ; simple_byte           31    16 (average)
 19474                           ;	Chosen strategy is simple_byte
 19475  003278  0A0E               	xorlw	14	; case 14
 19476  00327A  E0D5               	bz	l13500
 19477  00327C  0A01               	xorlw	1	; case 15
 19478  00327E  E0D7               	bz	l13502
 19479  003280  0A1F               	xorlw	31	; case 16
 19480  003282  E0D9               	bz	l13504
 19481  003284  0A01               	xorlw	1	; case 17
 19482  003286  E0DB               	bz	l13506
 19483  003288  0A03               	xorlw	3	; case 18
 19484  00328A  E0DD               	bz	l13508
 19485  00328C  0A01               	xorlw	1	; case 19
 19486  00328E  E0DF               	bz	l13510
 19487  003290  0A07               	xorlw	7	; case 20
 19488  003292  E0E1               	bz	l13512
 19489  003294  0A01               	xorlw	1	; case 21
 19490  003296  E0E3               	bz	l13514
 19491  003298  0A03               	xorlw	3	; case 22
 19492  00329A  E0E5               	bz	l13516
 19493  00329C  0A01               	xorlw	1	; case 23
 19494  00329E  E0E7               	bz	l13518
 19495  0032A0  D026               	goto	l13542
 19496  0032A2                     l13524:
 19497                           
 19498                           ; BSR set to: 0
 19499                           ;main.c: 1502: else if ( ( reg >= 24 ) &&
 19500                           ;main.c: 1503: ( reg < 46 ) ) {
 19501  0032A2  0E17               	movlw	23
 19502  0032A4  6412               	cpfsgt	vscp_readAppReg@reg,c
 19503  0032A6  D023               	goto	l13542
 19504                           
 19505                           ; BSR set to: 0
 19506  0032A8  0E2E               	movlw	46
 19507  0032AA  6012               	cpfslt	vscp_readAppReg@reg,c
 19508  0032AC  D020               	goto	l13542
 19509  0032AE  D769               	goto	L70
 19510  0032B0                     l13530:
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;main.c: 1510: else if ( 1 == vscp_page_select ) {
 19514  0032B0  0452               	decf	_vscp_page_select,w,c
 19515  0032B2  1053               	iorwf	_vscp_page_select+1,w,c
 19516  0032B4  E10C               	bnz	l13536
 19517                           
 19518                           ; BSR set to: 0
 19519                           ;main.c: 1511: if ( reg < 40u ) {
 19520  0032B6  0E28               	movlw	40
 19521  0032B8  6012               	cpfslt	vscp_readAppReg@reg,c
 19522  0032BA  D019               	goto	l13542
 19523                           
 19524                           ; BSR set to: 0
 19525                           ;main.c: 1512: rv = Read_b_eep(0x43 + 46 + reg);
 19526  0032BC  0E71               	movlw	113
 19527  0032BE  2412               	addwf	vscp_readAppReg@reg,w,c
 19528  0032C0  6E08               	movwf	?_Read_b_eep,c
 19529  0032C2  6A09               	clrf	?_Read_b_eep+1,c
 19530  0032C4  0E00               	movlw	0
 19531  0032C6  2209               	addwfc	?_Read_b_eep+1,f,c
 19532  0032C8  EC83  F024         	call	_Read_b_eep	;wreg free
 19533  0032CC  D00F               	goto	L69
 19534  0032CE                     l13536:
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;main.c: 1516: else if ( 2 == vscp_page_select ) {
 19538  0032CE  5052               	movf	_vscp_page_select,w,c
 19539  0032D0  0A02               	xorlw	2
 19540  0032D2  1053               	iorwf	_vscp_page_select+1,w,c
 19541  0032D4  E10C               	bnz	l13542
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;main.c: 1517: if ( reg < ( 0 + 8*8 ) ) {
 19545  0032D6  0E40               	movlw	64
 19546  0032D8  6012               	cpfslt	vscp_readAppReg@reg,c
 19547  0032DA  D009               	goto	l13542
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;main.c: 1518: rv = Read_b_eep(0x43 + 0 + 46 + 40u + reg);
 19551  0032DC  0E99               	movlw	153
 19552  0032DE  2412               	addwf	vscp_readAppReg@reg,w,c
 19553  0032E0  6E08               	movwf	?_Read_b_eep,c
 19554  0032E2  6A09               	clrf	?_Read_b_eep+1,c
 19555  0032E4  0E00               	movlw	0
 19556  0032E6  2209               	addwfc	?_Read_b_eep+1,f,c
 19557  0032E8  EC83  F024         	call	_Read_b_eep	;wreg free
 19558  0032EC                     L69:
 19559  0032EC  6E11               	movwf	vscp_readAppReg@rv,c
 19560  0032EE                     l13542:
 19561                           
 19562                           ;main.c: 1523: }
 19563                           ;main.c: 1524: }
 19564                           ;main.c: 1526: return rv;
 19565  0032EE  5011               	movf	vscp_readAppReg@rv,w,c
 19566  0032F0  0012               	return	
 19567  0032F2                     __end_of_vscp_readAppReg:
 19568                           	opt stack 0
 19569                           tblptru	equ	0xFF8
 19570                           tblptrh	equ	0xFF7
 19571                           tblptrl	equ	0xFF6
 19572                           tablat	equ	0xFF5
 19573                           prodh	equ	0xFF4
 19574                           prodl	equ	0xFF3
 19575                           intcon	equ	0xFF2
 19576                           intcon2	equ	0xFF1
 19577                           postinc0	equ	0xFEE
 19578                           wreg	equ	0xFE8
 19579                           indf1	equ	0xFE7
 19580                           fsr1h	equ	0xFE2
 19581                           fsr1l	equ	0xFE1
 19582                           indf2	equ	0xFDF
 19583                           postinc2	equ	0xFDE
 19584                           postdec2	equ	0xFDD
 19585                           plusw2	equ	0xFDB
 19586                           fsr2h	equ	0xFDA
 19587                           fsr2l	equ	0xFD9
 19588                           status	equ	0xFD8
 19589                           
 19590 ;; *************** function _Read_b_eep *****************
 19591 ;; Defined at:
 19592 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;  badd            2    7[COMRAM] unsigned int 
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;                  1    wreg      unsigned char 
 19599 ;; Registers used:
 19600 ;;		wreg, status,2
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19606 ;;      Params:         2       0       0       0       0       0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0
 19608 ;;      Temps:          0       0       0       0       0       0       0
 19609 ;;      Totals:         2       0       0       0       0       0       0
 19610 ;;Total ram usage:        2 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:    2
 19613 ;; This function calls:
 19614 ;;		Nothing
 19615 ;; This function is called by:
 19616 ;;		_main
 19617 ;;		_init_app_ram
 19618 ;;		_doApplicationOneSecondWork
 19619 ;;		_vscp_readNicknamePermanent
 19620 ;;		_vscp_getZone
 19621 ;;		_vscp_getSubzone
 19622 ;;		_vscp_readAppReg
 19623 ;;		_vscp_writeAppReg
 19624 ;;		_SendInformationEvent
 19625 ;;		_doDM
 19626 ;;		_doActionOn
 19627 ;;		_doActionOff
 19628 ;;		_doActionPulseOn
 19629 ;;		_doActionPulseOff
 19630 ;;		_doActionToggle
 19631 ;;		_doActionStatus
 19632 ;;		_vscp_getGUID
 19633 ;;		_vscp_getUserID
 19634 ;;		_vscp_getManufacturerId
 19635 ;;		_vscp_getSegmentCRC
 19636 ;;		_calculateSetFilterMask
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text78
 19641  004906                     __ptext78:
 19642                           	opt stack 0
 19643  004906                     _Read_b_eep:
 19644                           	opt stack 24
 19645                           
 19646                           ;incstack = 0
 19647                           ;incstack = 0
 19648  004906  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 19649  00490A  9CA6               	bcf	4006,6,c	;volatile
 19650  00490C  9EA6               	bcf	4006,7,c	;volatile
 19651  00490E  80A6               	bsf	4006,0,c	;volatile
 19652  004910  F000               	nop		;# 
 19653  004912  F000               	nop		;# 
 19654  004914  50A8               	movf	4008,w,c	;volatile
 19655  004916  0012               	return	
 19656  004918                     __end_of_Read_b_eep:
 19657                           	opt stack 0
 19658                           tblptru	equ	0xFF8
 19659                           tblptrh	equ	0xFF7
 19660                           tblptrl	equ	0xFF6
 19661                           tablat	equ	0xFF5
 19662                           prodh	equ	0xFF4
 19663                           prodl	equ	0xFF3
 19664                           intcon	equ	0xFF2
 19665                           intcon2	equ	0xFF1
 19666                           postinc0	equ	0xFEE
 19667                           wreg	equ	0xFE8
 19668                           indf1	equ	0xFE7
 19669                           fsr1h	equ	0xFE2
 19670                           fsr1l	equ	0xFE1
 19671                           indf2	equ	0xFDF
 19672                           postinc2	equ	0xFDE
 19673                           postdec2	equ	0xFDD
 19674                           plusw2	equ	0xFDB
 19675                           fsr2h	equ	0xFDA
 19676                           fsr2l	equ	0xFD9
 19677                           status	equ	0xFD8
 19678                           
 19679 ;; *************** function _interrupt_at_low_vector *****************
 19680 ;; Defined at:
 19681 ;;		line 140 in file "../main.c"
 19682 ;; Parameters:    Size  Location     Type
 19683 ;;		None
 19684 ;; Auto vars:     Size  Location     Type
 19685 ;;		None
 19686 ;; Return value:  Size  Location     Type
 19687 ;;		None               void
 19688 ;; Registers used:
 19689 ;;		wreg, status,2, status,0, cstack
 19690 ;; Tracked objects:
 19691 ;;		On entry : 0/0
 19692 ;;		On exit  : 0/0
 19693 ;;		Unchanged: 0/0
 19694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19695 ;;      Params:         0       0       0       0       0       0       0
 19696 ;;      Locals:         0       0       0       0       0       0       0
 19697 ;;      Temps:          3       0       0       0       0       0       0
 19698 ;;      Totals:         3       0       0       0       0       0       0
 19699 ;;Total ram usage:        3 bytes
 19700 ;; Hardware stack levels used:    1
 19701 ;; Hardware stack levels required when called:    1
 19702 ;; This function calls:
 19703 ;;		i1_WriteTimer0
 19704 ;; This function is called by:
 19705 ;;		Interrupt level 1
 19706 ;; This function uses a non-reentrant model
 19707 ;;
 19708                           
 19709                           	psect	intcodelo
 19710  000818                     __pintcodelo:
 19711                           	opt stack 0
 19712  000818                     _interrupt_at_low_vector:
 19713                           	opt stack 20
 19714                           
 19715                           ;incstack = 0
 19716  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 19717  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 19718  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 19719  000824                     
 19720                           ;main.c: 142: if ( INTCONbits.TMR0IF ) {
 19721  000824  A4F2               	btfss	intcon,2,c	;volatile
 19722  000826  D001               	goto	i1u1054_21
 19723  000828  D001               	goto	i1u1054_20
 19724  00082A                     i1u1054_21:
 19725  00082A  D046               	goto	i1l421
 19726  00082C                     i1u1054_20:
 19727  00082C                     
 19728                           ;main.c: 145: WriteTimer0(0xfb1d);
 19729  00082C  0EFB               	movlw	251
 19730  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 19731  000830  0E1D               	movlw	29
 19732  000832  6E01               	movwf	?i1_WriteTimer0,c
 19733  000834  EC8C  F024         	call	i1_WriteTimer0	;wreg free
 19734  000838                     
 19735                           ;main.c: 147: vscp_timer++;
 19736  000838  0100               	movlb	0	; () banked
 19737  00083A  4B6E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 19738  00083C  2B6F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 19739  00083E                     
 19740                           ; BSR set to: 0
 19741                           ;main.c: 148: vscp_configtimer++;
 19742  00083E  4B6C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 19743  000840  2B6D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 19744  000842                     
 19745                           ; BSR set to: 0
 19746                           ;main.c: 149: measurement_clock_10ms++;
 19747  000842  0E01               	movlw	1
 19748  000844  2760               	addwf	_measurement_clock_10ms& (0+255),f,b	;volatile
 19749  000846  0E00               	movlw	0
 19750  000848  2361               	addwfc	(_measurement_clock_10ms+1)& (0+255),f,b	;volatile
 19751  00084A  0E00               	movlw	0
 19752  00084C  2362               	addwfc	(_measurement_clock_10ms+2)& (0+255),f,b	;volatile
 19753  00084E  0E00               	movlw	0
 19754  000850  2363               	addwfc	(_measurement_clock_10ms+3)& (0+255),f,b	;volatile
 19755  000852                     
 19756                           ; BSR set to: 0
 19757                           ;main.c: 151: sendTimer++;
 19758  000852  0E01               	movlw	1
 19759  000854  2764               	addwf	_measurement_clock_sec& (0+255),f,b	;volatile
 19760  000856  0E00               	movlw	0
 19761  000858  2365               	addwfc	(_measurement_clock_sec+1)& (0+255),f,b	;volatile
 19762  00085A  0E00               	movlw	0
 19763  00085C  2366               	addwfc	(_measurement_clock_sec+2)& (0+255),f,b	;volatile
 19764  00085E  0E00               	movlw	0
 19765  000860  2367               	addwfc	(_measurement_clock_sec+3)& (0+255),f,b	;volatile
 19766  000862                     
 19767                           ; BSR set to: 0
 19768                           ;main.c: 154: if ( PORTCbits.RC0 ) {
 19769  000862  A082               	btfss	3970,0,c	;volatile
 19770  000864  D001               	goto	i1u1055_21
 19771  000866  D001               	goto	i1u1055_20
 19772  000868                     i1u1055_21:
 19773  000868  D002               	goto	i1l8874
 19774  00086A                     i1u1055_20:
 19775  00086A                     
 19776                           ; BSR set to: 0
 19777                           ;main.c: 155: vscp_initbtncnt = 0;
 19778  00086A  6B7B               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 19779                           
 19780                           ;main.c: 156: }
 19781  00086C  D001               	goto	i1l413
 19782  00086E                     i1l8874:
 19783                           
 19784                           ; BSR set to: 0
 19785                           ;main.c: 157: else {
 19786                           ;main.c: 159: vscp_initbtncnt++;
 19787  00086E  2B7B               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 19788  000870                     i1l413:
 19789                           
 19790                           ; BSR set to: 0
 19791                           ;main.c: 160: }
 19792                           ;main.c: 163: vscp_statuscnt++;
 19793  000870  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 19794  000872                     
 19795                           ; BSR set to: 0
 19796                           ;main.c: 164: if ( ( 0x02 == vscp_initledfunc ) &&
 19797                           ;main.c: 165: ( vscp_statuscnt > 100 ) ) {
 19798  000872  5056               	movf	_vscp_initledfunc,w,c
 19799  000874  0A02               	xorlw	2
 19800  000876  A4D8               	btfss	status,2,c
 19801  000878  D001               	goto	i1u1056_21
 19802  00087A  D001               	goto	i1u1056_20
 19803  00087C                     i1u1056_21:
 19804  00087C  D00E               	goto	i1l8884
 19805  00087E                     i1u1056_20:
 19806  00087E                     
 19807                           ; BSR set to: 0
 19808  00087E  0E64               	movlw	100
 19809  000880  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 19810  000882  D001               	goto	i1u1057_21
 19811  000884  D001               	goto	i1u1057_20
 19812  000886                     i1u1057_21:
 19813  000886  D009               	goto	i1l8884
 19814  000888                     i1u1057_20:
 19815  000888                     
 19816                           ; BSR set to: 0
 19817                           ;main.c: 167: if ( PORTCbits.RC1 ) {
 19818  000888  A282               	btfss	3970,1,c	;volatile
 19819  00088A  D001               	goto	i1u1058_21
 19820  00088C  D001               	goto	i1u1058_20
 19821  00088E                     i1u1058_21:
 19822  00088E  D002               	goto	i1l415
 19823  000890                     i1u1058_20:
 19824  000890                     
 19825                           ; BSR set to: 0
 19826                           ;main.c: 168: PORTCbits.RC1 = 0;
 19827  000890  9282               	bcf	3970,1,c	;volatile
 19828                           
 19829                           ;main.c: 169: }
 19830  000892  D001               	goto	i1l416
 19831  000894                     i1l415:
 19832                           
 19833                           ; BSR set to: 0
 19834                           ;main.c: 170: else {
 19835                           ;main.c: 171: PORTCbits.RC1 = 1;
 19836  000894  8282               	bsf	3970,1,c	;volatile
 19837  000896                     i1l416:
 19838                           
 19839                           ; BSR set to: 0
 19840                           ;main.c: 172: }
 19841                           ;main.c: 174: vscp_statuscnt = 0;
 19842  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19843                           
 19844                           ;main.c: 176: }
 19845  000898  D00E               	goto	i1l417
 19846  00089A                     i1l8884:
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;main.c: 177: else if (0x01 == vscp_initledfunc) {
 19850  00089A  0456               	decf	_vscp_initledfunc,w,c
 19851  00089C  A4D8               	btfss	status,2,c
 19852  00089E  D001               	goto	i1u1059_21
 19853  0008A0  D001               	goto	i1u1059_20
 19854  0008A2                     i1u1059_21:
 19855  0008A2  D003               	goto	i1l418
 19856  0008A4                     i1u1059_20:
 19857  0008A4                     
 19858                           ; BSR set to: 0
 19859                           ;main.c: 178: PORTCbits.RC1 = 1;
 19860  0008A4  8282               	bsf	3970,1,c	;volatile
 19861                           
 19862                           ;main.c: 179: vscp_statuscnt = 0;
 19863  0008A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19864                           
 19865                           ;main.c: 180: }
 19866  0008A8  D006               	goto	i1l417
 19867  0008AA                     i1l418:
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;main.c: 181: else if (0x00 == vscp_initledfunc) {
 19871  0008AA  6656               	tstfsz	_vscp_initledfunc,c
 19872  0008AC  D001               	goto	i1u1060_21
 19873  0008AE  D001               	goto	i1u1060_20
 19874  0008B0                     i1u1060_21:
 19875  0008B0  D002               	goto	i1l417
 19876  0008B2                     i1u1060_20:
 19877  0008B2                     
 19878                           ; BSR set to: 0
 19879                           ;main.c: 182: PORTCbits.RC1 = 0;
 19880  0008B2  9282               	bcf	3970,1,c	;volatile
 19881                           
 19882                           ;main.c: 183: vscp_statuscnt = 0;
 19883  0008B4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 19884  0008B6                     i1l417:
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;main.c: 184: }
 19888                           ;main.c: 186: INTCONbits.TMR0IF = 0;
 19889  0008B6  94F2               	bcf	intcon,2,c	;volatile
 19890  0008B8                     i1l421:
 19891  0008B8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 19892  0008BC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 19893  0008C0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 19894  0008C4  0010               	retfie	
 19895  0008C6                     __end_of_interrupt_at_low_vector:
 19896                           	opt stack 0
 19897                           tblptru	equ	0xFF8
 19898                           tblptrh	equ	0xFF7
 19899                           tblptrl	equ	0xFF6
 19900                           tablat	equ	0xFF5
 19901                           prodh	equ	0xFF4
 19902                           prodl	equ	0xFF3
 19903                           intcon	equ	0xFF2
 19904                           intcon2	equ	0xFF1
 19905                           postinc0	equ	0xFEE
 19906                           wreg	equ	0xFE8
 19907                           indf1	equ	0xFE7
 19908                           fsr1h	equ	0xFE2
 19909                           fsr1l	equ	0xFE1
 19910                           bsr	equ	0xFE0
 19911                           indf2	equ	0xFDF
 19912                           postinc2	equ	0xFDE
 19913                           postdec2	equ	0xFDD
 19914                           plusw2	equ	0xFDB
 19915                           fsr2h	equ	0xFDA
 19916                           fsr2l	equ	0xFD9
 19917                           status	equ	0xFD8
 19918                           
 19919 ;; *************** function i1_WriteTimer0 *****************
 19920 ;; Defined at:
 19921 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19922 ;; Parameters:    Size  Location     Type
 19923 ;;  timer0          2    0[COMRAM] unsigned int 
 19924 ;; Auto vars:     Size  Location     Type
 19925 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 19926 ;; Return value:  Size  Location     Type
 19927 ;;		None               void
 19928 ;; Registers used:
 19929 ;;		None
 19930 ;; Tracked objects:
 19931 ;;		On entry : 0/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19935 ;;      Params:         2       0       0       0       0       0       0
 19936 ;;      Locals:         2       0       0       0       0       0       0
 19937 ;;      Temps:          0       0       0       0       0       0       0
 19938 ;;      Totals:         4       0       0       0       0       0       0
 19939 ;;Total ram usage:        4 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; This function calls:
 19942 ;;		Nothing
 19943 ;; This function is called by:
 19944 ;;		_interrupt_at_low_vector
 19945 ;; This function uses a non-reentrant model
 19946 ;;
 19947                           
 19948                           	psect	text80
 19949  004918                     __ptext80:
 19950                           	opt stack 0
 19951  004918                     i1_WriteTimer0:
 19952                           	opt stack 20
 19953                           
 19954                           ;incstack = 0
 19955                           ;incstack = 0
 19956  004918  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 19957  00491C  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 19958  004920  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 19959  004924  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 19960  004928  0012               	return	
 19961  00492A                     __end_ofi1_WriteTimer0:
 19962                           	opt stack 0
 19963                           tblptru	equ	0xFF8
 19964                           tblptrh	equ	0xFF7
 19965                           tblptrl	equ	0xFF6
 19966                           tablat	equ	0xFF5
 19967                           prodh	equ	0xFF4
 19968                           prodl	equ	0xFF3
 19969                           intcon	equ	0xFF2
 19970                           intcon2	equ	0xFF1
 19971                           postinc0	equ	0xFEE
 19972                           wreg	equ	0xFE8
 19973                           indf1	equ	0xFE7
 19974                           fsr1h	equ	0xFE2
 19975                           fsr1l	equ	0xFE1
 19976                           bsr	equ	0xFE0
 19977                           indf2	equ	0xFDF
 19978                           postinc2	equ	0xFDE
 19979                           postdec2	equ	0xFDD
 19980                           plusw2	equ	0xFDB
 19981                           fsr2h	equ	0xFDA
 19982                           fsr2l	equ	0xFD9
 19983                           status	equ	0xFD8
 19984                           tblptru	equ	0xFF8
 19985                           tblptrh	equ	0xFF7
 19986                           tblptrl	equ	0xFF6
 19987                           tablat	equ	0xFF5
 19988                           prodh	equ	0xFF4
 19989                           prodl	equ	0xFF3
 19990                           intcon	equ	0xFF2
 19991                           intcon2	equ	0xFF1
 19992                           postinc0	equ	0xFEE
 19993                           wreg	equ	0xFE8
 19994                           indf1	equ	0xFE7
 19995                           fsr1h	equ	0xFE2
 19996                           fsr1l	equ	0xFE1
 19997                           bsr	equ	0xFE0
 19998                           indf2	equ	0xFDF
 19999                           postinc2	equ	0xFDE
 20000                           postdec2	equ	0xFDD
 20001                           plusw2	equ	0xFDB
 20002                           fsr2h	equ	0xFDA
 20003                           fsr2l	equ	0xFD9
 20004                           status	equ	0xFD8
 20005                           
 20006                           	psect	rparam
 20007  0000                     tblptru	equ	0xFF8
 20008                           tblptrh	equ	0xFF7
 20009                           tblptrl	equ	0xFF6
 20010                           tablat	equ	0xFF5
 20011                           prodh	equ	0xFF4
 20012                           prodl	equ	0xFF3
 20013                           intcon	equ	0xFF2
 20014                           intcon2	equ	0xFF1
 20015                           postinc0	equ	0xFEE
 20016                           wreg	equ	0xFE8
 20017                           indf1	equ	0xFE7
 20018                           fsr1h	equ	0xFE2
 20019                           fsr1l	equ	0xFE1
 20020                           bsr	equ	0xFE0
 20021                           indf2	equ	0xFDF
 20022                           postinc2	equ	0xFDE
 20023                           postdec2	equ	0xFDD
 20024                           plusw2	equ	0xFDB
 20025                           fsr2h	equ	0xFDA
 20026                           fsr2l	equ	0xFD9
 20027                           status	equ	0xFD8
 20028                           tblptru	equ	0xFF8
 20029                           tblptrh	equ	0xFF7
 20030                           tblptrl	equ	0xFF6
 20031                           tablat	equ	0xFF5
 20032                           prodh	equ	0xFF4
 20033                           prodl	equ	0xFF3
 20034                           intcon	equ	0xFF2
 20035                           intcon2	equ	0xFF1
 20036                           postinc0	equ	0xFEE
 20037                           wreg	equ	0xFE8
 20038                           indf1	equ	0xFE7
 20039                           fsr1h	equ	0xFE2
 20040                           fsr1l	equ	0xFE1
 20041                           bsr	equ	0xFE0
 20042                           indf2	equ	0xFDF
 20043                           postinc2	equ	0xFDE
 20044                           postdec2	equ	0xFDD
 20045                           plusw2	equ	0xFDB
 20046                           fsr2h	equ	0xFDA
 20047                           fsr2l	equ	0xFD9
 20048                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         118
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     68     160
    BANK1           256      2      22
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?_memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    memset@p1	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    memset@p	PTR unsigned char  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), RXM1SIDH(ABS[1]), 
		 -> RXF1SIDH(ABS[1]), B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), 
		 -> B2CON(ABS[1]), B1CON(ABS[1]), B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK0[3]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionPulseOn
    _doDM->_doActionPulseOff
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatusAll->_doActionStatus
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_ram->_memset
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doApplicationOneSecondWork
    _doApplicationOneSecondWork->_SendInformationEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionPulseOff
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionPulseOff->_SendInformationEvent
    _doActionPulseOn->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  114611
                                             67 BANK0      1     1      0
                                              0 BANK1      2     2      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _Read_b_eep
               _SendInformationEvent
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                          45    45      0   13530
                                             22 BANK0     45    45      0
                         _Read_b_eep
               _SendInformationEvent
                        _doActionOff
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    3314
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    3230
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                18    18      0   30018
                                             27 BANK0     18    18      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                    _doActionPulseOn
                   _doActionPulseOff
                     _doActionStatus
                  _doActionStatusAll
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       4     3      1    4056
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionStatusAll                                    3     2      1    4176
                                             22 BANK0      3     2      1
                     _doActionStatus
 ---------------------------------------------------------------------------------
 (3) _doActionStatus                                       4     3      1    3996
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOff                                     9     8      1    3954
                                             78 COMRAM     3     2      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulseOn                                      7     6      1    4038
                                             78 COMRAM     3     2      1
                                             22 BANK0      3     3      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           6     5      1    4080
                                             78 COMRAM     3     2      1
                                             22 BANK0      2     2      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          4     3      1    3912
                                             78 COMRAM     3     2      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   49765
                                             35 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   16697
                                             79 COMRAM     1     1      0
                                             34 BANK0      1     0      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4241
                                             53 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    2033
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                        38    38      0     887
                                             15 COMRAM    38    38      0
                         _Read_b_eep
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     137
                                              7 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    1146
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     222
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                    13    12      1   12246
                                             78 COMRAM     1     0      1
                                             22 BANK0     12    12      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    2586
                                             17 COMRAM    50    50      0
               _ECANSetOperationMode
                       __CANIDToRegs
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    3504
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2884
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1846
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    3146
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     354
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      42
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     360
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     402
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    6652
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    3146
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    3146
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPFrame                                       32    24      8    3132
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendCANFrame                                         8     1      7    2832
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (4) _ECANSendMessage                                     37    29      8    2652
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (5) __CANIDToRegs                                        10     3      7     966
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     582
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3     138
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     198
                     _ECANInitialize
                        _WriteTimer0
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      84
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      9     9      0     912
                                              9 COMRAM     9     9      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _ECANInitialize
       _ECANSetOperationMode
     _WriteTimer0
     _OpenTimer0
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
     _memset
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _ECANSetOperationMode
         __CANIDToRegs
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _ECANSetOperationMode
           __CANIDToRegs
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
             _memset
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
           _memset
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulseOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionStatusAll
       _doActionStatus
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _Read_b_eep
   _SendInformationEvent
     _Read_b_eep
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      2      16       6        8.6%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     44      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E      15        0.0%
DATA                 0      0     11A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Nov 10 12:20:47 2015

                __end_of_vscp_readAppReg 32F2                    __end_of_sendVSCPFrame 41FC  
                                     PL2 154C                                       PL4 2672  
                                     PL6 155E                                       PL8 2688  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3470  
                  doActionToggle@dmflags 0001                       doActionPulseOn@arg 004F  
                                    PL10 156C                                      PL20 2964  
                                    PL12 157C                                      PL30 3B86  
                                    PL22 29A2                                      PL14 1BDE  
                                    PL40 3A6C                                      PL32 1C12  
                                    PL24 29BA                                      PL16 2F14  
                                    PL50 1C5C                                      PL42 3B9A  
                                    PL34 1C2E                                      PL26 1C00  
                                    PL18 269A                                      PL60 2A1E  
                                    PL52 3A7A                                      PL44 2F28  
                                    PL36 1C40                                      PL28 29EE  
                                    PL70 158A                                      PL62 3BBC  
                                    PL54 225E                                      PL46 2246  
                                    PL38 1C4E                                      PL80 2CF2  
                                    PL72 1598                                      PL64 3470  
                                    PL56 3A8E                                      PL48 3BAA  
                                    PL90 15EC                                      PL82 15B4  
                                    PL74 15A6                                      PL66 3AB4  
                                    PL58 3AA0                                      PL92 2272  
                                    PL84 15C2                                      PL76 3744  
                                    PL68 2CE0                                      PL94 15FA  
                                    PL86 15D0                                      PL78 313A  
                                    PL96 1608                                      PL88 15DE  
                                    PL98 3BD0                                      l200 3010  
                                    l202 3020                                      l212 30AA  
                                    l204 3030                                      l213 30C4  
                                    l230 3B84                                      l240 4376  
                                    l170 357A                                      l235 3A6A  
                                    l181 2F78                                      l502 25B0  
                                    l191 3046                                      l192 2FC6  
                                    l176 35F8                                      l168 355C  
                                    l601 18B4                                      l505 2602  
                                    l441 2388                                      l425 22A2  
                     vscp_readStdReg@idx 0019                                      l194 2FD4  
                                    l610 18D8                                      l602 18BC  
                                    l434 22EA                                      l611 18E0  
                                    l196 2FE8                                      l188 3138  
                                    l620 1906                                      l604 18C0  
                                    l460 2436                                      l613 18E4  
                                    l605 18C8                                      l198 2FFC  
                                    l622 19B0                                      l614 18EC  
                                    l454 2400                                      l607 18CC  
                                    l551 170C                                      l616 18F0  
                                    l608 18D4                                      l472 24A2  
                                    l448 23CA                                      l721 0B76  
                                    l537 36FA                                      l617 18F8  
                                    l642 46EA                                      l490 2544  
                                    l466 246C                                      l619 18FC  
                                    l732 0C3A                                      l900 38C2  
                                    l484 250E                                      l742 0D0C  
                                    l646 46C4                                      l910 38FE  
                                    l902 38CE                                      l478 24D8  
                                    l727 0BD0                                      l591 188C  
                                    l752 0DD4                                      l912 390A  
                                    l904 38DA                                      l592 1894  
                                    l496 257A                                      l737 0CA4  
                                    l921 408A                                      l762 0E9C  
                                    l914 3916                                      l906 38E6  
                                    l747 0D70                                      l931 3FFC  
                                    l595 189C                        doActionStatus@bOn 0051  
                                    l852 1534                                      l924 3FD8  
                                    l908 38F2                                      l596 18A4  
                                    l757 0E38                                      l941 4038  
                                    l933 4008                                      l870 2D46  
                                    l598 18A8                       vscp_readStdReg@reg 001C  
                                    l767 0F00                                      l943 4044  
                                    l935 4014                                      l927 3FE4  
                                    l599 18B0                                      l952 3774  
                                    l872 2D60                                      l937 4020  
                                    l929 3FF0                                      l961 37A4  
                                    l866 2F12                                      l939 402C  
                                    l971 37E0                                      l963 37B0  
                                    l955 3780                                      l892 39A6  
                                    l980 3D02                                      l965 37BC  
                                    l957 378C                                      l949 3884  
                                    l895 38AA                                      l967 37C8  
                                    l959 3798                                      l991 3D3E  
                                    l983 3D0E                                      l897 3944  
                                    l969 37D4                                      l993 3D4A  
                                    l985 3D1A                                      l977 3DDE  
                                    l898 38B6                                      l995 3D56  
                                    l987 3D26                                      l997 3D62  
                                    l989 3D32                                      l999 3D6E  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 004F                    doActionToggle@ctrlreg 0050  
                         getVSCPFrame@id 0028            __end_of_vscp_handleProbeState 4146  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                                      prod 000FF3  
                 _calculateSetFilterMask 26A8                                      wreg 000FE8  
                 _measurement_clock_10ms 0060                                     PL100 3484  
                                   PL102 1C6A                                     PL104 2A32  
                                   PL106 2280              ?_doApplicationOneSecondWork 0001  
                                   PL108 2A3C                             __CFG_LVP$OFF 000000  
                    doActionPulseOff@arg 004F                             __CFG_WDT$OFF 000000  
                                   l1012 3E12                                     l1021 3E36  
                                   l1013 3E1A                                     l1005 3ED6  
                                   l1030 3E5A                                     l1022 3E3E  
                                   l1031 3E62                                     l1015 3E1E  
                                   l1024 3E42                                     l1016 3E26  
                                   l1008 3E02                                     l1033 3E66  
                                   l1025 3E4A                                     l1009 3E0A  
                                   l1034 3E6E                                     l1018 3E2A  
                                   l1123 482A                                     l1027 3E4E  
                                   l1019 3E32                                     l1300 4142  
                                   l1060 3FA0                                     l1036 3E72  
                                   l1028 3E56                                     l1301 40CE  
                   __size_of_doActionOff 00D6                                     l1037 3E7C  
                                   l1046 3FB4                                     l1039 3EC2  
                                   l1148 4308                                     l1308 4130  
                                   l1309 4110                                     l1333 44E4  
                                   l1501 2040                                     l1406 477A  
                                   l1159 45FC                                     l1343 453C  
                                   l1344 4548                                     l1432 3CDA  
                                   l1337 4734                                     l1361 4844  
                                   l1290 4758                                     l1540 496E  
                                   l1348 4626                                     l1285 4432  
                                   l1357 441E                                     l1534 4650  
                                   l1526 2244                                     l1490 1FB4  
                                   l1466 1E38                                     l1491 1FC8  
                                   l1492 2004                                     l1581 47D2  
                                   l1565 4508                                     l1582 47D4  
                    vscp_readStdReg@code 0011                vscp_getManufacturerId@idx 000A  
                                   l5800 2F66                                     l5810 2F90  
                                   l5904 30F2                                     l5912 310C  
                                   l5816 2FA6                                     l5824 2FB4  
                                   l5930 4310                                     l5818 2FB0  
                                   l5940 4340                                     l5932 4318  
                                   l5942 4346                                     l5934 4322  
                                   l5918 3122                                     l5944 434C  
                                   l5936 432C                                     l5938 4336  
                                   l5962 3A06                                     l8522 4788  
                                   l5948 4358                                     l5868 305A  
                                   l5878 307A                                     l5896 30C6  
                                   l8572 45DE                                     l8556 42AC  
                                   l8568 45DA                                     l8850 4672  
                                   l8842 465C              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u5485 2F6E  
                                   u5487 2F70                                     u5755 39CE  
                                   u5765 39DE                                     u5775 3A0A  
                                   u9930 42FC                                     u9935 42F2  
                     doActionStatusAll@i 00D3                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000D  
                                   ___IT 000101                                     _doDM 2D00  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 228A                                     _init 4464  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 08EC                              _vscp_minute 007C  
                            _vscp_second 0081                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08C6  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 3BDA  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 430A              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l12010 34F6  
                                  l12004 34E6                                    l12022 3520  
                                  l12032 3560                                    l12120 22D0  
                                  _B0CON 000E20                                    l13010 216C  
                                  l13002 2152                                    l12044 35AA  
                                  l12052 35C8                                    l12220 24D0  
                                  l12124 22DA                                    l12116 22C8  
                                  l12038 357C                                    l12062 35EE  
                                  l13014 2194                                    l13102 2EA8  
                                  l12310 2664                                    l12126 22DE  
                                  l12080 3B12                                    l12064 35F0  
                                  l12400 3666                                    l13112 2ED4  
                                  l12232 2506                                    l12208 249A  
                                  l12160 23B6                                    l12136 22FA  
                                  l12128 22E4                                    _B1CON 000E30  
                                  ?_doDM 0001                                    l12058 35EA  
                                  l12410 3688                                    l13106 2EBE  
                                  l13114 2F08                                    l13202 16E4  
                                  l12314 266C                                    l12162 23BE  
                                  l12138 22FE                                    l14100 13A4  
                                  l13036 21E4                                    l13052 2D0A  
                                  l13212 1730                                    l12244 253C  
                                  l12172 23F8                                    l14102 13C2  
                                  l14014 11FE                                    l13150 43FE  
                                  l13214 173E                                    l14104 13E0  
                                  l14112 143A                                    l14032 1242  
                                  l14008 11F2                                    l13400 4028  
                                  l13144 43F4                                    l13224 1760  
                                  l12256 2572                                    l12184 242E  
                                  _B2CON 000E40                                    l14202 2852  
                                  l14106 13FE                                    l14114 146C  
                                  l14042 1250                                    l14018 1204  
                                  l13402 4030                                    l13090 2E66  
                                  l13082 2E3A                                    l13074 2D7A  
                                  l13154 4406                                    l13322 190A  
                                  l13234 1782                                    l13226 176E  
                                  l13250 17B6                                    l12282 25FC  
                                  l12274 25B4                                    l13500 3226  
                                  l12364 4744                                    l12612 4134  
                                  l14220 28EA                                    l14108 141C  
                                  l12452 36FC                                    l12428 36CE  
                                  l12620 1C82                                    l13404 4034  
                                  l13332 199C                                    l13324 1934  
                                  l13180 1680                                    l13340 19F8  
                                  l13172 164C                                    l12268 25A8  
                                  l12196 2464                                    l12276 25EE  
                                  l13510 324E                                    l13502 322E  
                                  l12542 408E                                    l14222 28F2  
                                  l14062 1296                                    l14038 124A  
                                  l14070 12D8                                    l12438 36E4  
                                  l12382 3620                                    l12710 1D68  
                                  l12622 1C88                                    l14310 375C  
                                  l13094 2E7C                                    l13086 2E50  
                                  l13270 182A                                    l13246 17A4  
                                  l13238 1792                                    l13190 16B2  
                                  l13182 168A                                    l12286 2606  
                                  l13512 3256                                    l13504 3236  
                                  l14216 2870                                    l14056 128E  
                                  l14160 1500                                    l14080 12E8  
                                  l13440 46D2                                    l13360 45C0  
                                  l12472 2A76                                    l12800 1F2A  
                                  l12720 1D9C                                    l12624 1C8E  
                                  l13408 4040                                    l13416 404A  
                                  l14400 3D3A                                    l13352 1AAA  
                                  l13272 1854                                    l13192 16BC  
                                  l13184 1694                                    l13344 19FE  
                                  l13168 1644                                    l12288 2626  
                                  _B3CON 000E50                                    l13514 325E  
                                  l13506 323E                                    l13522 3276  
                                  l13530 32B0                                    l14226 2908  
                                  l14090 130E                                    l12482 2B2C  
                                  l12730 1DD0                                    l12626 1C94  
                                  l12618 1C7C                                    l13418 4072  
                                  l14330 37A0                                    l14322 3788  
                                  l14410 3D5A                                    l13098 2E92  
                                  l13282 1896                                    l13338 19C4  
                                  l13194 16C6                                    l13186 169E  
                                  l12298 2650                                    l13516 3266  
                                  l13508 3246                                    l13524 32A2  
                                  l12580 40EC                                    l12556 40AC  
                                  l14172 1548                                    l14092 132C  
                                  l14148 14D6                                    l14068 129C  
                                  l13356 45B0                                    l12900 2020  
                                  l12740 1E04                                    l12660 1CDA  
                                  l12644 1CCC                                    l13380 3FEC  
                                  l14412 3D5E                                    l14404 3D46  
                                  l13268 1826                                    l13196 16D0  
                                  l13188 16A8                                    l13518 326E  
                                  l13542 32EE                                    l12582 40F0  
                                  l12558 40B2                                    l14190 27CC  
                                  l14182 26BA                                    l14094 134A  
                                  l12478 2AE4                                    l12806 1F56  
                                  l12646 1CD2                                    l14270 38E2  
                                  l14262 38CA                                    l14254 38B2  
                                  l14246 3890                                    l14350 37DC  
                                  l14342 37C4                                    l14334 37AC  
                                  l14326 3794                                    l14318 377C  
                                  l13198 16DA                                    l13536 32CE  
                                  l13480 3176                                    l12576 40E8  
                                  l14096 1368                                    l13616 0B1E  
                                  l13608 0AF6                                    l13448 46AC  
                                  l12752 1E3C                                    l12680 1D00  
                                  l13392 4010                                    l13384 3FF8  
                                  l13376 3FE0                                    l13368 3FC0  
                                  l14280 3902                                    l14344 37CC  
                                  l14360 380E                                    l14432 3DB4  
                                  l14416 3D6A                                    l14408 3D52  
                                  l14424 3D74                                    l14440 3EE2  
                                  l14504 3E0C                                    _B4CON 000E60  
                                  l13490 31AA            __size_of_SendInformationEvent 0052  
                                  l14098 1386                                    l13634 0B86  
                                  l12922 2042                                    l12850 1FA8  
                                  l12834 1F88                                    l12818 1F68  
                                  l12762 1E82                                    l12754 1E5A  
                                  l14282 3906                                    l14274 38EE  
                                  l14266 38D6                                    l14258 38BE  
                                  l14346 37D0                                    l14338 37B8  
                                  l14426 3D9C                                    l14450 3F0E  
                                  l13476 3166            __size_of_vscp_getMajorVersion 0002  
                                  l14700 333C                                    l13716 0D1C  
                                  l13708 0CE0                                    l13636 0B8C  
                                  l13628 0B48                                    l13820 0F4C  
                                  l12772 1EDE                                    l13396 401C  
                                  l13388 4004                                    l14460 3F40  
                                  l14452 3F18                                    l13494 3218  
                                  l13486 3194                                    l14198 27DE  
                                  l13566 094A                                    l13558 0926  
                                  l12870 1FCA                                    l12790 1F06  
                                  l12758 1E6A                                    l12694 1D0C  
                                  l14286 3912                                    l14278 38FA  
                                  l14294 391C                                    l14366 3826  
                                  l14358 37E6                                    l14462 3F4A  
                                  l14454 3F22                                    l14470 3F86  
                                  l14446 3EFA                                    l14704 3348  
                                  l13912 10B2                                    l13840 0F98  
                                  l13808 0ED4                                    l13736 0D80  
                                  l13728 0D44                                    l13656 0BE2  
                                  l13648 0BB6                                    l13584 09C4  
                                  l13576 0972                                    l12936 206A  
                                  l12792 1F10                                    l12768 1EC8  
                                  l14392 3D22                                    l14384 3D0A  
                                  l14376 3CEA                                    l14464 3F54  
                                  l14456 3F2C                                    l14448 3F04  
                                  l14544 3E80                                    _B5CON 000E70  
                                  l11994 486A                                    l14626 44DC  
                                  l14730 339C                                    l14722 3386  
                                  l14714 336E                                    l13922 10C4  
                                  l13850 0FAA                                    l13826 0F5A  
                                  l13818 0F10                                    l12962 20CA  
                                  l12946 208C                                    l12882 1FF0  
                                  l14298 3990                                    l14458 3F36  
                                  l14546 3EA8                                    l14708 3358  
                                  l13756 0DE4                                    l13748 0DA8  
                                  l13676 0C4C                                    l13668 0C0C  
                                  l14812 3C5E                                    l14804 3C40  
                                  l12980 20E0                                    l12964 20D0  
                                  l12788 1F04                                    l14396 3D2E  
                                  l14388 3D16                                    l14468 3F5E  
                                  l14484 47DE                                    l14734 33A8  
                                  l14726 3390                                    l14718 337A  
                                  l14670 483E                                    l13942 110E  
                                  l13918 10BE                                    l13870 0FF4  
                                  l13846 0FA4                                    l14814 3C62  
                                  l12958 20B8                                    l12886 1FF8  
                                  l12878 1FE8                                    l14680 3306  
                                  l13960 1152                                    l13936 1102  
                                  l13864 0FE8                                    l13776 0E48  
                                  l13768 0E0C                                    l13696 0CB6  
                                  l13688 0C76                                    l14816 3C78  
                                  l12992 2128                                    l12984 20FA  
                                  l12896 2006                                    l14496 3DEA  
                                  l14738 33B4                                    l13970 1164  
                                  l13946 1114                                    l13874 1024  
                                  l14596 4578                                    l14764 345C  
                                  l14748 33FE                                    l14692 3324  
                                  l14684 3310                                    l13796 0EAC  
                                  l13788 0E70                                    l14836 3CC0  
                                  l14828 3CAC                                    l14780 4770  
                                  l12988 2110                                    l14758 3446  
                                  l13990 11AE                                    l13966 115E  
                                  l13894 106E                                    l14846 3CDC  
                                  l14696 3330                                    l14688 331A  
                                  l14768 346C                                    l13984 11A2  
                                  l13888 1062                                    l14792 3C04  
                                  l13994 11B4                                    l13898 1074  
                                  l14798 3C24               __end_of_vscp_goActiveState 47BA  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                        _doActionPulseOn 3752                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 4918  
                                  _EEADR 000FA9                          __end_of___lbmod 467A  
                _vscp_handleDropNickname 451A                                    _BSEL0 000DF8  
                                  _T0CON 000FD5                                    u16205 4514  
                                  u16206 4516                                    u16135 2C20  
                                  u17104 1652                                    u15505 3AEC  
                                  u16145 2C36                                    u17105 1650  
                                  u15515 3AFC                                    u16155 2C4C  
                                  u15604 2346                                    u15525 3B1A  
                                  u16165 2C68                                    u15605 2342  
                                  u16094 2AA0                                    u16095 2A9A  
                                  u17154 1BEE                                    u17155 1BE8  
                                  u17605 1B4A                                    u17374 1804  
                                  u17615 1B66                                    u17375 1800  
                                  u17394 185A                                    u17395 1858  
                                  u19244 383C                                    u19245 3836  
                                  u17585 1B1E                                    u17595 1B34  
                                  u18830 27FE                                    u17775 4182  
                                  u18815 2712                                    u18904 28BE  
                                  u18840 2826                                    u18905 28BA  
                                  u19394 3DCA                                    u18835 27F4  
                                  u19395 3DC4                                    u16995 2DC8  
                                  u18924 28D4                                    u18925 28D2  
                                  u18845 281C                                    u18864 283C  
                                  u18865 283A                                    u19940 33F4  
                                  i1l413 0870                                    i1l421 08B8  
                                  u18894 28A6                                    i1l415 0894  
                                  u18895 28A2                                    i1l416 0896  
                                  i1l417 08B6                                    u19945 33F2  
                                  i1l418 08AA                                    u19970 343E  
                                  u19975 343C                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 495C               _vscp_readNicknamePermanent 4952  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 48E0  
                                  doDM@i 00E7                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 4934  
                     vscp_writeAppReg@rv 00DA                                    _hours 0076  
              _vscp_getRegisterPagesUsed 497A                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 46C6                                    tablat 000FF5  
                _vscp_getSubMinorVersion 4980                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 46A0  
                           __end_ofPL100 3490                             __end_ofPL102 1C72  
                           __end_ofPL104 2A3C                             __end_ofPL106 228A  
                           __end_ofPL108 2A44                     _ECANSetOperationMode 485E  
                        __initialization 454A                             __end_of_doDM 2F14  
                           __end_of_main 2672                             __end_of_init 44A8  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 4906  
                _interrupt_at_low_vector 0818                         __end_of_Busy_eep 4974  
                         doDM@class_mask 00DB                           __CFG_OSC$HSPLL 000000  
                  doActionPulseOn@bEvent 0051                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00D6  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0036                                   ??_main 0114  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 1C72                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00FB                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON1 000FC1                         _doActionPulseOff 3CE0  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                            doDM@type_mask 00DE  
                    _channel_pulse_flags 0068                       vscp_writeStdReg@rv 003B  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 47BA  
                                 i1l8860 082C                                   i1l8870 0862  
                                 i1l8862 0838                                   i1l8880 0888  
                                 i1l8872 086A                                   i1l8864 083E  
                                 i1l8882 0890                                   i1l8874 086E  
                                 i1l8866 0842                                   i1l8858 0824  
                                 i1l8884 089A                                   i1l8876 0872  
                                 i1l8868 0852                                   i1l8886 08A4  
                                 i1l8878 087E                                   i1l8888 08B2  
                        _init_app_eeprom 35FA                      _channel_pulse_timer 0100  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                   doActionStatusAll@arg 00D1                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 45FE  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1513 00E7                  __end_of_doActionPulseOn 3886  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 4628  
                                 _doWork 4978                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00DB          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00DC  
             __end_of_vscp_setSegmentCRC 48A2                      vscp_writeAppReg@val 004F  
                                 _memset 45A6                                   clear_0 4550  
                                 clear_1 455C                                   clear_2 4568  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00F4  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 007D  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0010  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                             __accesstop 0060                  __end_of__initialization 456E  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        _current_iostate 006A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 475A                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 475A  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00DD  
                             __end_ofPL2 155E                               __end_ofPL4 2688  
                             __end_ofPL6 156C                               __end_ofPL8 269A  
                         ??_sendCANFrame 003E                               _doActionOn 3886  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 4952                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01FA                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 4948          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00DD          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 154C                             _debounce_cnt 00B1  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 3744  
            __end_of_vscp_setControlByte 488C                 __end_of_vscp_writeStdReg 3CE0  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0050          __end_of_vscp_handleDropNickname 454A  
                 doActionPulseOff@bEvent 0051                             _getVSCPFrame 4292  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                   doActionPulseOn@dmflags 0001  
             __end_of_vscp_getBufferSize 497E                                ?_Busy_eep 0001  
                 doActionPulseOn@ctrlreg 0050                    vscp_writeRegister@reg 0050  
                 ??_ECANSetOperationMode 0008                             __IT_INT_MASK 0070  
                           __IT_SAVE_BSR 0071       __size_of_vscp_getRegisterPagesUsed 0002  
        __end_of_vscp_getSubMinorVersion 4982                         ?_doActionPulseOn 004F  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 2964                  __size_of_doActionToggle 00F8  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 00DE  
                                _ECANCON 000F77                                  ?_memset 0008  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                        _doActionStatusAll 47D8  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00CF                      vscp_writeStdReg@reg 003C  
           __end_of_vscp_doOneSecondWork 4420                       ?_doActionStatusAll 00D1  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 0050          __end_of_interrupt_at_low_vector 08C6  
               vscp_readStdReg@code_1486 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 408C                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 430A               __end_of_vscp_getMatrixInfo 479C  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 0001  
                    ??_doActionStatusAll 0052                       _vscp_goActiveState 479C  
                  doActionStatus@ctrlreg 0050                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 43D2             __end_of_vscp_getMajorVersion 4986  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 48B8                   _vscp_setManufacturerId 46A0  
                        _ECANSendMessage 3490                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 007F  
             __end_of_vscp_getSegmentCRC 4966               ??_vscp_handleProtocolEvent 00DE  
                          ??_getCANFrame 001C        __end_of_vscp_getRegisterPagesUsed 497C  
               __size_of_vscp_getMDF_URL 0018                 __end_of_doActionPulseOff 3DE0  
                                ___lbmod 4652                          getCANFrame@pdlc 001A  
              __end_of_doActionStatusAll 47F4                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 08CA  
                   __end_of_init_app_ram 2CE0                       _vscp_sendHeartBeat 467A  
                                __pcinit 454A                           _vscp_deviceURL 08CA  
                        __size_of_memset 002C                              ?_doActionOn 004F  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 228A                                  __ptext1 4978  
                                __ptext2 1616                                  __ptext3 43D2  
                                __ptext4 467A                                  __ptext5 492A  
                                __ptext6 4934                                  __ptext7 4974  
                                __ptext8 2D00                                  __ptext9 3DE0  
                         _vscp_getUserID 48CC                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionOn@bEvent 00D2  
                  vscp_writeStdReg@value 0036                      ?_vscp_sendHeartBeat 00CF  
               ??_vscp_handleSetNickname 000D                                  _minutes 0077  
                                _seconds 0078                      __end_of_WriteTimer0 4906  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 451A  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
                                main@dir 00FE            vscp_handleProtocolEvent@bytes 00EB  
                   end_of_initialization 456E                          init_app_ram@dir 0034  
                    __end_of_doActionOff 408C             __end_of_vscp_handleHeartbeat 44E6  
               __size_of_vscp_getSubzone 000A                                i1u1060_20 08B2  
                              i1u1060_21 08B0                                  memset@c 000A  
                              i1u1054_20 082C                                i1u1054_21 082A  
                                memset@n 000C                                  memset@p 000E  
                              i1u1055_20 086A                                i1u1055_21 0868  
                              i1u1056_20 087E                                i1u1056_21 087C  
                              i1u1057_20 0888                                i1u1057_21 0886  
                              i1u1058_20 0890                                i1u1058_21 088E  
                          __Lmediumconst 0000                                i1u1059_20 08A4  
                              i1u1059_21 08A2                     __end_of_sendCANFrame 45A6  
              vscp_handleProtocolEvent@i 00F8                vscp_handleProtocolEvent@j 00F9  
              vscp_handleProtocolEvent@k 00F2                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 46EC                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 47F4  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 08EA      __end_of_vscp_writeNicknamePermanent 48B8  
            _vscp_writeNicknamePermanent 48A2                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 4146                   __end_of_vscp_getUserID 48E0  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 4464                           _vscp_probe_cnt 0080  
                              _PORTAbits 000F80         doApplicationOneSecondWork@bInput 00FA  
                              _PORTBbits 000F81                         _current_debounce 0075  
                              _PORTCbits 000F82                      __end_of_getCANFrame 45FE  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 01AA                         ___lbmod@dividend 0009  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 488C  
             vscp_handleProtocolEvent@cb 00F0                  __end_of_ECANSendMessage 35FA  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00E6  
                   __end_of__RegsToCANID 3A6C                    _measurement_clock_sec 0064  
                    __size_of_doActionOn 0122                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 4712                               _vscp_error 4974  
                   _vscp_doOneSecondWork 43D2                       i1WriteTimer0@timer 0003  
                             _vscp_timer 006E                   __end_of_vscp_setUserID 4810  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00FD  
                         _doActionToggle 3DE0               __size_of_doActionStatusAll 001C  
                         _doActionStatus 3ED8                          ?_vscp_getUserID 0001  
                         __end_of_doWork 497A             __end_of_vscp_getMinorVersion 4984  
                            _WriteTimer0 48F4                     _SendInformationEvent 4380  
                   _vscp_getMajorVersion 4984                              _Write_b_eep 44E6  
                         __end_of_memset 45D2                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                              ___DCDelay 00FF                              __end_ofPL10 157C  
                            __end_ofPL20 29A2                              __end_ofPL12 158A  
                      ?_vscp_writeAppReg 004F                              __end_ofPL30 3B9A  
                            __end_ofPL22 29BA                              __end_ofPL14 1C00  
                            __end_ofPL40 3A7A                              __end_ofPL32 1C2E  
                            __end_ofPL24 29EE                              __end_ofPL16 2F28  
                            __end_ofPL50 1C6A                              __end_ofPL42 3BAA  
                            __end_ofPL34 1C40                              __end_ofPL26 1C12  
                            __end_ofPL18 26A8                              __end_ofPL60 2A32  
                            __end_ofPL52 3A8E                              __end_ofPL44 2F40  
                            __end_ofPL36 1C4E                              __end_ofPL28 2A1E  
                            __end_ofPL70 1598                              __end_ofPL62 3BD0  
                            __end_ofPL54 2272                              __end_ofPL46 225E  
                            __end_ofPL38 1C5C                              __end_ofPL80 2D00  
                            __end_ofPL72 15A6                              __end_ofPL64 3484  
                            __end_ofPL56 3AA0                              __end_ofPL48 3BBC  
                            __end_ofPL90 15FA                              __end_ofPL82 15C2  
                            __end_ofPL74 15B4                              __end_ofPL66 3AC6  
                            __end_ofPL58 3AB4                              __end_ofPL92 2280  
                            __end_ofPL84 15D0                              __end_ofPL76 3752  
                            __end_ofPL68 2CF2                              __end_ofPL94 1608  
                            __end_ofPL86 15DE                              __end_ofPL78 3148  
                            __end_ofPL96 1616                              __end_ofPL88 15EC  
                            __end_ofPL98 3BDA                      start_initialization 454A  
                            _doActionOff 3FB6          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00D1                        ?_vscp_writeStdReg 0036  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0037  
                     _vscp_getFamilyCode 4948                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 493E                 _channel_protection_timer 0082  
                       doDM@class_filter 00D9                       __end_of_Read_b_eep 4918  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 482C  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00EF  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 2246  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                              _doDM$2393 00DF                                _doDM$2394 00E0  
                              _doDM$2395 00E1                                _doDM$2396 00E2  
                              _doDM$2397 00E3                                _doDM$2398 00E4  
                              _doDM$2399 00E5                    __size_of_init_app_ram 029C  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3ED8  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 3FB6  
               __end_of__ECANPointBuffer 4380                        __CANIDToRegs@type 000E  
                            _getCANFrame 45D2                                 ??_doWork 0008  
                     _vscp_getBufferSize 497C              vscp_handleProtocolEvent@len 00EC  
                         doActionOff@arg 004F              vscp_handleProtocolEvent@pos 00EA  
             __end_of_ECANReceiveMessage 313A                      ??_vscp_readRegister 001D  
                               ??_memset 000E           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00CF                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 492A            __end_of_vscp_goBootloaderMode 482C  
                   _vscp_handleHeartbeat 44A8                       __end_of_OpenTimer0 47D8  
    __size_of_doApplicationOneSecondWork 05C8                      ?_vscp_getBufferSize 0001  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                          __IT_SAVE_STATUS 0072  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00BB  
                          __pcstackBANK1 0114                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 002E  
                doActionPulseOff@dmflags 0001                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                  doActionPulseOff@ctrlreg 0050  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 4846  
                           _init_app_ram 2A44             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                __pnvBANK0 00FF  
                          __IT_SAVE_WREG 0073                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 477C                   _vscp_handleSetNickname 4712  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00BB  
                        ?_doActionToggle 004F                           _ECANInitialize 41FC  
                        ?_doActionStatus 004F                                 ?___lbmod 0008  
                      ?_doActionPulseOff 004F                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
                           ??_doActionOn 0050                       ??_doActionPulseOff 00D1  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1503 00EE  
                vscp_readStdReg@idx_1487 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 4578                              __smallconst 08CA  
                      WriteTimer0@timer0 0008                 __size_of_doActionPulseOn 0134  
                     _vscp_getSegmentCRC 495C                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A           __end_of_vscp_getManufacturerId 48CC  
         __end_of_vscp_setManufacturerId 46C6                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1502 00ED                          doDM@type_filter 00DD  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 006C  
        SendInformationEvent@eventTypeId 00D0                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 4982  
                     __end_of_doActionOn 39A8                   __end_of_ECANInitialize 4292  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 4652                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 3B86                             __RegsToCANID 39A8  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 0001  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 4420                                _vscp_imsg 0096  
                              _vscp_hour 007A                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
                     doActionOff@ctrlreg 0050                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 1BDE  
             _doApplicationOneSecondWork 1616                         _vscp_page_select 0052  
                            _INTCON2bits 000FF1               __size_of_vscp_readRegister 001A  
                               ___DCByte 0074                                 _Busy_eep 496E  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 014A  
           __end_of_vscp_restoreDefaults 496E                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 4846                                 __Lrparam 0000  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 004F   doApplicationOneSecondWork@iodirections 00F5  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                 vscp_writeAppReg@val_1273 00D8  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
             vscp_writeAppReg@bInfoEvent 00D9                               ?_vscp_init 0001  
                           ?_doActionOff 004F                                 __ptext10 47D8  
                               __ptext11 3ED8                                 __ptext20 4966  
                               __ptext12 3CE0                                 __ptext21 2A44  
                               __ptext13 3752                                 __ptext30 482C  
                               __ptext22 45A6                                 __ptext14 3886  
                               __ptext31 32F2                                 __ptext23 35FA  
                               __ptext15 3FB6                                 __ptext40 48E0  
                               __ptext32 497A                                 __ptext24 47F4  
                               __ptext16 1C72                                 __ptext41 4980  
                               __ptext33 493E                                 __ptext25 46A0  
                               __ptext17 4652                                 __ptext50 477C  
                               __ptext42 4982                                 __ptext34 4948  
                               __ptext26 46C6                                 __ptext18 475A  
                               __ptext51 4810                                 __ptext43 4984  
                               __ptext35 497C                                 __ptext27 08EC  
                               __ptext19 3BDA                                 __ptext60 4292  
                               __ptext52 408C                                 __ptext44 45FE  
                               __ptext36 497E                                 __ptext28 26A8  
                               __ptext61 45D2                                 __ptext53 479C  
                               __ptext45 451A                                 __ptext37 48B8  
                               __ptext29 4380                                 __ptext70 44E6  
                               __ptext62 2F40                                 __ptext54 46EC  
                               __ptext46 4420                                 __ptext38 48CC  
                               __ptext71 496E                                 __ptext63 39A8  
                               __ptext55 4146                                 __ptext47 4952  
                               __ptext39 4846                                 __ptext80 4918  
                               __ptext72 4464                                 __ptext64 430A  
                               __ptext56 4578                                 __ptext48 4712  
                               __ptext73 47BA                                 __ptext65 4736  
                               __ptext57 3490                                 __ptext49 44A8  
                               __ptext74 48F4                                 __ptext66 4876  
                               __ptext58 3AC6                                 __ptext75 41FC  
                               __ptext67 488C                                 __ptext59 4628  
                               __ptext76 485E                                 __ptext68 495C  
                               __ptext77 3148                                 __ptext69 48A2  
                               __ptext78 4906           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00CF                            ?_getVSCPFrame 001E  
                      ??_doActionPulseOn 00D1                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 492A             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 0214  
                          __size_of_main 03E8                            __size_of_init 0044  
              __size_of_vscp_writeAppReg 0C60                      _vscp_check_pstorage 4736  
                          init_app_ram@i 0035           vscp_handleProtocolEvent@i_1501 00F3  
         vscp_handleProtocolEvent@i_1504 00F7           vscp_handleProtocolEvent@i_1512 00F1  
                   __end_of_vscp_getGUID 48F4                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 493E                        doActionOff@bEvent 0051  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 0001                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 46EC                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00E9  
                      doActionOn@ctrlreg 00D1                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 000F  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 4876  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 3148  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 0079                          _vscp_readStdReg 32F2  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 4628  
                     _ECANReceiveMessage 2F40                                 memset@p1 0008  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 007B  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 485E                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 0050         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 0050                          _vscp_node_state 007E  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
         doApplicationOneSecondWork@data 00F7                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 4980              _vscp_getBootLoaderAlgorithm 497E  
       __size_of_interrupt_at_low_vector 00AE                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 4810             __end_of_ECANSetOperationMode 4876  
                   _vscp_restoreDefaults 4966              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 4934  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 477C                       __end_of_vscp_error 4978  
                 ECANSendMessage@tempPtr 0031                __size_of_doActionPulseOff 0100  
               doActionStatusAll@dmflags 00D2           __end_of_vscp_handleSetNickname 4736  
     vscp_handleProtocolEvent@bytes_1508 00F5                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00D1  
                           __CANIDToRegs 3AC6                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00E5              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00FC                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 0051                        doActionToggle@arg 004F  
