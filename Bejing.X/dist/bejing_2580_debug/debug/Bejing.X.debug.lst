

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Jul 02 23:42:41 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95                           	psect	pa_nodes,global,class=CODE,delta=1
    96  0000                     tblptrh	equ	0xFF7
    97                           tblptrl	equ	0xFF6
    98                           tablat	equ	0xFF5
    99                           prodh	equ	0xFF4
   100                           prodl	equ	0xFF3
   101                           intcon	equ	0xFF2
   102                           intcon2	equ	0xFF1
   103                           wreg	equ	0xFE8
   104                           indf1	equ	0xFE7
   105                           fsr1h	equ	0xFE2
   106                           fsr1l	equ	0xFE1
   107                           indf2	equ	0xFDF
   108                           postinc2	equ	0xFDE
   109                           postdec2	equ	0xFDD
   110                           plusw2	equ	0xFDB
   111                           fsr2h	equ	0xFDA
   112                           fsr2l	equ	0xFD9
   113                           status	equ	0xFD8
   114                           
   115                           	psect	smallconst
   116  000600                     __psmallconst:
   117                           	opt stack 0
   118  000600                     _vscp_deviceURL:
   119                           	opt stack 0
   120  000600  77                 	db	119
   121  000601  77                 	db	119
   122  000602  77                 	db	119
   123  000603  2E                 	db	46
   124  000604  65                 	db	101
   125  000605  75                 	db	117
   126  000606  72                 	db	114
   127  000607  6F                 	db	111
   128  000608  73                 	db	115
   129  000609  6F                 	db	111
   130  00060A  75                 	db	117
   131  00060B  72                 	db	114
   132  00060C  63                 	db	99
   133  00060D  65                 	db	101
   134  00060E  2E                 	db	46
   135  00060F  73                 	db	115
   136  000610  65                 	db	101
   137  000611  2F                 	db	47
   138  000612  62                 	db	98
   139  000613  65                 	db	101
   140  000614  69                 	db	105
   141  000615  6A                 	db	106
   142  000616  69                 	db	105
   143  000617  6E                 	db	110
   144  000618  67                 	db	103
   145  000619  5F                 	db	95
   146  00061A  32                 	db	50
   147  00061B  2E                 	db	46
   148  00061C  78                 	db	120
   149  00061D  6D                 	db	109
   150  00061E  6C                 	db	108
   151  00061F  00                 	db	0
   152  000620                     __end_of_vscp_deviceURL:
   153                           	opt stack 0
   154  0000                     _ADCON1	set	4033
   155  0000                     _BRGCON1	set	3952
   156  0000                     _BRGCON2	set	3953
   157  0000                     _BRGCON3	set	3954
   158  0000                     _BSEL0	set	3576
   159  0000                     _CANCON	set	3951
   160  0000                     _CIOCON	set	3955
   161  0000                     _ECANCON	set	3959
   162  0000                     _EEADR	set	4009
   163  0000                     _EECON1bits	set	4006
   164  0000                     _EECON2	set	4007
   165  0000                     _EEDATA	set	4008
   166  0000                     _INTCON2bits	set	4081
   167  0000                     _INTCONbits	set	4082
   168  0000                     _MSEL0	set	3568
   169  0000                     _MSEL1	set	3569
   170  0000                     _MSEL2	set	3570
   171  0000                     _PORTA	set	3968
   172  0000                     _PORTAbits	set	3968
   173  0000                     _PORTB	set	3969
   174  0000                     _PORTBbits	set	3969
   175  0000                     _PORTC	set	3970
   176  0000                     _PORTCbits	set	3970
   177  0000                     _RXB1CONbits	set	3920
   178  0000                     _RXF0EIDH	set	3842
   179  0000                     _RXF0EIDL	set	3843
   180  0000                     _RXF0SIDH	set	3840
   181  0000                     _RXF0SIDL	set	3841
   182  0000                     _RXF1EIDH	set	3846
   183  0000                     _RXF1EIDL	set	3847
   184  0000                     _RXF1SIDL	set	3845
   185  0000                     _RXFBCON0	set	3552
   186  0000                     _RXFBCON1	set	3553
   187  0000                     _RXFBCON2	set	3554
   188  0000                     _RXFBCON3	set	3555
   189  0000                     _RXFBCON4	set	3556
   190  0000                     _RXFBCON5	set	3557
   191  0000                     _RXFBCON6	set	3558
   192  0000                     _RXFBCON7	set	3559
   193  0000                     _RXFCON0	set	3540
   194  0000                     _RXFCON1	set	3541
   195  0000                     _RXM0EIDH	set	3866
   196  0000                     _RXM0EIDL	set	3867
   197  0000                     _RXM0SIDH	set	3864
   198  0000                     _RXM0SIDL	set	3865
   199  0000                     _RXM1EIDH	set	3870
   200  0000                     _RXM1EIDL	set	3871
   201  0000                     _RXM1SIDL	set	3869
   202  0000                     _T0CON	set	4053
   203  0000                     _T0CONbits	set	4053
   204  0000                     _TMR0H	set	4055
   205  0000                     _TMR0L	set	4054
   206  0000                     _TRISA	set	3986
   207  0000                     _TRISAbits	set	3986
   208  0000                     _TRISB	set	3987
   209  0000                     _TRISBbits	set	3987
   210  0000                     _TRISC	set	3988
   211  0000                     _TRISCbits	set	3988
   212  0000                     _B0RXFUL	set	28935
   213  0000                     _B0TXEN	set	28610
   214  0000                     _B1RXFUL	set	29063
   215  0000                     _B1TXEN	set	28611
   216  0000                     _B2RXFUL	set	29191
   217  0000                     _B2TXEN	set	28612
   218  0000                     _B3RXFUL	set	29319
   219  0000                     _B3TXEN	set	28613
   220  0000                     _B4RXFUL	set	29447
   221  0000                     _B4TXEN	set	28614
   222  0000                     _B5RXFUL	set	29575
   223  0000                     _B5TXEN	set	28615
   224  0000                     _FIFOEMPTY	set	31655
   225  0000                     _IRXIF	set	32039
   226  0000                     _MDSEL0	set	31678
   227  0000                     _MDSEL1	set	31679
   228  0000                     _RXB0FILHIT0	set	31488
   229  0000                     _RXB0FUL	set	31495
   230  0000                     _RXB0IF	set	32032
   231  0000                     _RXB0OVFL	set	31655
   232  0000                     _RXB1IF	set	32033
   233  0000                     _RXB1OVFL	set	31654
   234  0000                     _RXF1EN	set	28321
   235  0000                     _RXM0EXIDM	set	30923
   236  0000                     _RXM1EXIDEN	set	30955
   237  0000                     _B0CON	set	3616
   238  0000                     _B1CON	set	3632
   239  0000                     _B2CON	set	3648
   240  0000                     _B3CON	set	3664
   241  0000                     _B4CON	set	3680
   242  0000                     _B5CON	set	3696
   243  0000                     _RXB0CON	set	3936
   244  0000                     _RXB1CON	set	3920
   245  0000                     _RXF1SIDH	set	3844
   246  0000                     _RXM1SIDH	set	3868
   247  0000                     _TXB0CON	set	3904
   248  0000                     _TXB1CON	set	3888
   249  0000                     _TXB2CON	set	3872
   250  000620  00                 	db	0	; dummy byte at the end
   251  0000                     tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           prodh	equ	0xFF4
   255                           prodl	equ	0xFF3
   256                           intcon	equ	0xFF2
   257                           intcon2	equ	0xFF1
   258                           wreg	equ	0xFE8
   259                           indf1	equ	0xFE7
   260                           fsr1h	equ	0xFE2
   261                           fsr1l	equ	0xFE1
   262                           indf2	equ	0xFDF
   263                           postinc2	equ	0xFDE
   264                           postdec2	equ	0xFDD
   265                           plusw2	equ	0xFDB
   266                           fsr2h	equ	0xFDA
   267                           fsr2l	equ	0xFD9
   268                           status	equ	0xFD8
   269                           
   270                           	psect	nvBANK0
   271  0000FE                     __pnvBANK0:
   272                           	opt stack 0
   273  0000FE                     ___DCDelay:
   274                           	opt stack 0
   275  0000FE                     	ds	1
   276                           
   277                           ; #config settings
   278  0000                     tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           prodh	equ	0xFF4
   282                           prodl	equ	0xFF3
   283                           intcon	equ	0xFF2
   284                           intcon2	equ	0xFF1
   285                           wreg	equ	0xFE8
   286                           indf1	equ	0xFE7
   287                           fsr1h	equ	0xFE2
   288                           fsr1l	equ	0xFE1
   289                           indf2	equ	0xFDF
   290                           postinc2	equ	0xFDE
   291                           postdec2	equ	0xFDD
   292                           plusw2	equ	0xFDB
   293                           fsr2h	equ	0xFDA
   294                           fsr2l	equ	0xFD9
   295                           status	equ	0xFD8
   296                           
   297                           	psect	cinit
   298  00456E                     __pcinit:
   299                           	opt stack 0
   300  00456E                     start_initialization:
   301                           	opt stack 0
   302  00456E                     __initialization:
   303                           	opt stack 0
   304                           
   305                           ; Clear objects allocated to BANK1 (20 bytes)
   306  00456E  EE01  F000         	lfsr	0,__pbssBANK1
   307  004572  0E14               	movlw	20
   308  004574                     clear_0:
   309  004574  6AEE               	clrf	postinc0,c
   310  004576  06E8               	decf	wreg,f,c
   311  004578  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to BANK0 (92 bytes)
   314  00457A  EE00  F060         	lfsr	0,__pbssBANK0
   315  00457E  0E5C               	movlw	92
   316  004580                     clear_1:
   317  004580  6AEE               	clrf	postinc0,c
   318  004582  06E8               	decf	wreg,f,c
   319  004584  E1FD               	bnz	clear_1
   320                           
   321                           ; Clear objects allocated to COMRAM (7 bytes)
   322  004586  EE00  F052         	lfsr	0,__pbssCOMRAM
   323  00458A  0E07               	movlw	7
   324  00458C                     clear_2:
   325  00458C  6AEE               	clrf	postinc0,c
   326  00458E  06E8               	decf	wreg,f,c
   327  004590  E1FD               	bnz	clear_2
   328  004592                     end_of_initialization:
   329                           	opt stack 0
   330  004592                     __end_of__initialization:
   331                           	opt stack 0
   332  004592  0E00               	movlw	low (__Lmediumconst shr (0+16))
   333  004594  6EF8               	movwf	tblptru,c
   334  004596  0100               	movlb	0
   335  004598  EFF5  F00F         	goto	_main	;jump to C main() function
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           prodh	equ	0xFF4
   341                           prodl	equ	0xFF3
   342                           intcon	equ	0xFF2
   343                           intcon2	equ	0xFF1
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           indf1	equ	0xFE7
   347                           fsr1h	equ	0xFE2
   348                           fsr1l	equ	0xFE1
   349                           indf2	equ	0xFDF
   350                           postinc2	equ	0xFDE
   351                           postdec2	equ	0xFDD
   352                           plusw2	equ	0xFDB
   353                           fsr2h	equ	0xFDA
   354                           fsr2l	equ	0xFD9
   355                           status	equ	0xFD8
   356                           
   357                           	psect	bssCOMRAM
   358  000052                     __pbssCOMRAM:
   359                           	opt stack 0
   360  000052                     _vscp_page_select:
   361                           	opt stack 0
   362  000052                     	ds	2
   363  000054                     __ECANRxFilterHitInfo:
   364                           	opt stack 0
   365  000054                     	ds	1
   366  000055                     _vscp_alarmstatus:
   367                           	opt stack 0
   368  000055                     	ds	1
   369  000056                     _vscp_initledfunc:
   370                           	opt stack 0
   371  000056                     	ds	1
   372  000057                     _vscp_probe_address:
   373                           	opt stack 0
   374  000057                     	ds	1
   375  000058                     _vscp_statuscnt:
   376                           	opt stack 0
   377  000058                     	ds	1
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           prodh	equ	0xFF4
   383                           prodl	equ	0xFF3
   384                           intcon	equ	0xFF2
   385                           intcon2	equ	0xFF1
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           indf1	equ	0xFE7
   389                           fsr1h	equ	0xFE2
   390                           fsr1l	equ	0xFE1
   391                           indf2	equ	0xFDF
   392                           postinc2	equ	0xFDE
   393                           postdec2	equ	0xFDD
   394                           plusw2	equ	0xFDB
   395                           fsr2h	equ	0xFDA
   396                           fsr2l	equ	0xFD9
   397                           status	equ	0xFD8
   398                           
   399                           	psect	bssBANK0
   400  000060                     __pbssBANK0:
   401                           	opt stack 0
   402  000060                     _measurement_clock_10ms:
   403                           	opt stack 0
   404  000060                     	ds	4
   405  000064                     _measurement_clock_sec:
   406                           	opt stack 0
   407  000064                     	ds	4
   408  000068                     _channel_pulse_flags:
   409                           	opt stack 0
   410  000068                     	ds	2
   411  00006A                     _current_iostate:
   412                           	opt stack 0
   413  00006A                     	ds	2
   414  00006C                     _vscp_configtimer:
   415                           	opt stack 0
   416  00006C                     	ds	2
   417  00006E                     _vscp_timer:
   418                           	opt stack 0
   419  00006E                     	ds	2
   420  000070                     __IT_INT_MASK:
   421                           	opt stack 0
   422  000070                     	ds	1
   423  000071                     __IT_SAVE_BSR:
   424                           	opt stack 0
   425  000071                     	ds	1
   426  000072                     __IT_SAVE_STATUS:
   427                           	opt stack 0
   428  000072                     	ds	1
   429  000073                     __IT_SAVE_WREG:
   430                           	opt stack 0
   431  000073                     	ds	1
   432  000074                     ___DCByte:
   433                           	opt stack 0
   434  000074                     	ds	1
   435  000075                     _current_debounce:
   436                           	opt stack 0
   437  000075                     	ds	1
   438  000076                     _hours:
   439                           	opt stack 0
   440  000076                     	ds	1
   441  000077                     _minutes:
   442                           	opt stack 0
   443  000077                     	ds	1
   444  000078                     _seconds:
   445                           	opt stack 0
   446  000078                     	ds	1
   447  000079                     _sendTimer:
   448                           	opt stack 0
   449  000079                     	ds	1
   450  00007A                     _vscp_guid_reset:
   451                           	opt stack 0
   452  00007A                     	ds	1
   453  00007B                     _vscp_hour:
   454                           	opt stack 0
   455  00007B                     	ds	1
   456  00007C                     _vscp_initbtncnt:
   457                           	opt stack 0
   458  00007C                     	ds	1
   459  00007D                     _vscp_minute:
   460                           	opt stack 0
   461  00007D                     	ds	1
   462  00007E                     _vscp_nickname:
   463                           	opt stack 0
   464  00007E                     	ds	1
   465  00007F                     _vscp_node_state:
   466                           	opt stack 0
   467  00007F                     	ds	1
   468  000080                     _vscp_node_substate:
   469                           	opt stack 0
   470  000080                     	ds	1
   471  000081                     _vscp_probe_cnt:
   472                           	opt stack 0
   473  000081                     	ds	1
   474  000082                     _vscp_second:
   475                           	opt stack 0
   476  000082                     	ds	1
   477  000083                     _channel_protection_timer:
   478                           	opt stack 0
   479  000083                     	ds	20
   480  000097                     _vscp_imsg:
   481                           	opt stack 0
   482  000097                     	ds	14
   483  0000A5                     _vscp_omsg:
   484                           	opt stack 0
   485  0000A5                     	ds	13
   486  0000B2                     _debounce_cnt:
   487                           	opt stack 0
   488  0000B2                     	ds	10
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           prodh	equ	0xFF4
   494                           prodl	equ	0xFF3
   495                           intcon	equ	0xFF2
   496                           intcon2	equ	0xFF1
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           indf1	equ	0xFE7
   500                           fsr1h	equ	0xFE2
   501                           fsr1l	equ	0xFE1
   502                           indf2	equ	0xFDF
   503                           postinc2	equ	0xFDE
   504                           postdec2	equ	0xFDD
   505                           plusw2	equ	0xFDB
   506                           fsr2h	equ	0xFDA
   507                           fsr2l	equ	0xFD9
   508                           status	equ	0xFD8
   509                           
   510                           	psect	bssBANK1
   511  000100                     __pbssBANK1:
   512                           	opt stack 0
   513  000100                     _channel_pulse_timer:
   514                           	opt stack 0
   515  000100                     	ds	20
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           prodh	equ	0xFF4
   521                           prodl	equ	0xFF3
   522                           intcon	equ	0xFF2
   523                           intcon2	equ	0xFF1
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           indf1	equ	0xFE7
   527                           fsr1h	equ	0xFE2
   528                           fsr1l	equ	0xFE1
   529                           indf2	equ	0xFDF
   530                           postinc2	equ	0xFDE
   531                           postdec2	equ	0xFDD
   532                           plusw2	equ	0xFDB
   533                           fsr2h	equ	0xFDA
   534                           fsr2l	equ	0xFD9
   535                           status	equ	0xFD8
   536                           
   537                           	psect	cstackBANK1
   538  000114                     __pcstackBANK1:
   539                           	opt stack 0
   540  000114                     doApplicationOneSecondWork@iodirections:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x0
   544  000114                     	ds	2
   545  000116                     doApplicationOneSecondWork@data:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x2
   549  000116                     	ds	3
   550  000119                     doApplicationOneSecondWork@bInput:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x5
   554  000119                     	ds	1
   555  00011A                     doApplicationOneSecondWork@bOn:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x6
   559  00011A                     	ds	1
   560  00011B                     doApplicationOneSecondWork@ctrlreg:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x7
   564  00011B                     	ds	1
   565  00011C                     doApplicationOneSecondWork@i:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x8
   569  00011C                     	ds	1
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodh	equ	0xFF4
   575                           prodl	equ	0xFF3
   576                           intcon	equ	0xFF2
   577                           intcon2	equ	0xFF1
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           indf1	equ	0xFE7
   581                           fsr1h	equ	0xFE2
   582                           fsr1l	equ	0xFE1
   583                           indf2	equ	0xFDF
   584                           postinc2	equ	0xFDE
   585                           postdec2	equ	0xFDD
   586                           plusw2	equ	0xFDB
   587                           fsr2h	equ	0xFDA
   588                           fsr2l	equ	0xFD9
   589                           status	equ	0xFD8
   590                           
   591                           	psect	cstackBANK0
   592  0000BC                     __pcstackBANK0:
   593                           	opt stack 0
   594  0000BC                     ??_sendVSCPFrame:
   595                           
   596                           ; 0 bytes @ 0x0
   597  0000BC                     	ds	20
   598  0000D0                     ?_SendInformationEvent:
   599                           	opt stack 0
   600  0000D0                     ?_vscp_sendHeartBeat:
   601                           	opt stack 0
   602  0000D0                     SendInformationEvent@eventClass:
   603                           	opt stack 0
   604  0000D0                     vscp_sendHeartBeat@subzone:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x14
   608  0000D0                     	ds	1
   609  0000D1                     SendInformationEvent@eventTypeId:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x15
   613  0000D1                     	ds	1
   614  0000D2                     ??_doActionOn:
   615  0000D2                     ??_vscp_writeAppReg:
   616  0000D2                     doActionOff@dmflags:
   617                           	opt stack 0
   618  0000D2                     doActionStatus@dmflags:
   619                           	opt stack 0
   620  0000D2                     doActionToggle@dmflags:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x16
   624  0000D2                     	ds	1
   625  0000D3                     doActionOff@val:
   626                           	opt stack 0
   627  0000D3                     doActionStatus@val:
   628                           	opt stack 0
   629  0000D3                     doActionToggle@val:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x17
   633  0000D3                     	ds	1
   634  0000D4                     doActionOff@i:
   635                           	opt stack 0
   636  0000D4                     doActionStatus@bOn:
   637                           	opt stack 0
   638  0000D4                     doActionToggle@bOn:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x18
   642  0000D4                     	ds	1
   643  0000D5                     ??_doApplicationOneSecondWork:
   644  0000D5                     doActionOn@dmflags:
   645                           	opt stack 0
   646  0000D5                     doActionStatus@i:
   647                           	opt stack 0
   648  0000D5                     doActionToggle@i:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x19
   652  0000D5                     	ds	1
   653  0000D6                     doActionOn@val:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x1A
   657  0000D6                     	ds	1
   658  0000D7                     doActionOn@i:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x1B
   662  0000D7                     	ds	1
   663  0000D8                     ??_doDM:
   664                           
   665                           ; 0 bytes @ 0x1C
   666  0000D8                     	ds	1
   667  0000D9                     vscp_writeAppReg@val_1262:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x1D
   671  0000D9                     	ds	1
   672  0000DA                     vscp_writeAppReg@bInfoEvent:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x1E
   676  0000DA                     	ds	1
   677  0000DB                     vscp_writeAppReg@rv:
   678                           	opt stack 0
   679  0000DB                     doDM@class_filter:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1F
   683  0000DB                     	ds	1
   684  0000DC                     vscp_writeAppReg@bOn:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x20
   688  0000DC                     	ds	1
   689  0000DD                     vscp_writeAppReg@reg:
   690                           	opt stack 0
   691  0000DD                     doDM@class_mask:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x21
   695  0000DD                     	ds	1
   696  0000DE                     ?_vscp_writeRegister:
   697                           	opt stack 0
   698  0000DE                     vscp_writeRegister@value:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x22
   702  0000DE                     	ds	1
   703  0000DF                     ??_vscp_handleProtocolEvent:
   704  0000DF                     doDM@type_filter:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x23
   708  0000DF                     	ds	1
   709  0000E0                     doDM@type_mask:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x24
   713  0000E0                     	ds	1
   714  0000E1                     _doDM$2383:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x25
   718  0000E1                     	ds	1
   719  0000E2                     _doDM$2384:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x26
   723  0000E2                     	ds	1
   724  0000E3                     _doDM$2385:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x27
   728  0000E3                     	ds	1
   729  0000E4                     _doDM$2386:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x28
   733  0000E4                     	ds	1
   734  0000E5                     _doDM$2387:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x29
   738  0000E5                     	ds	1
   739  0000E6                     doDM@dmflags:
   740                           	opt stack 0
   741  0000E6                     vscp_handleProtocolEvent@page_save:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x2A
   745  0000E6                     	ds	1
   746  0000E7                     doDM@i:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x2B
   750  0000E7                     	ds	1
   751  0000E8                     vscp_handleProtocolEvent@page_save_1500:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x2C
   755  0000E8                     	ds	2
   756  0000EA                     vscp_handleProtocolEvent@offset:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x2E
   760  0000EA                     	ds	1
   761  0000EB                     vscp_handleProtocolEvent@pos:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x2F
   765  0000EB                     	ds	1
   766  0000EC                     vscp_handleProtocolEvent@bytes:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x30
   770  0000EC                     	ds	1
   771  0000ED                     vscp_handleProtocolEvent@len:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x31
   775  0000ED                     	ds	1
   776  0000EE                     vscp_handleProtocolEvent@pos_1489:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x32
   780  0000EE                     	ds	1
   781  0000EF                     vscp_handleProtocolEvent@len_1490:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x33
   785  0000EF                     	ds	1
   786  0000F0                     vscp_handleProtocolEvent@bytes_this_time:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x34
   790  0000F0                     	ds	1
   791  0000F1                     vscp_handleProtocolEvent@cb:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x35
   795  0000F1                     	ds	1
   796  0000F2                     vscp_handleProtocolEvent@i_1499:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x36
   800  0000F2                     	ds	1
   801  0000F3                     vscp_handleProtocolEvent@k:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x37
   805  0000F3                     	ds	1
   806  0000F4                     vscp_handleProtocolEvent@i_1488:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x38
   810  0000F4                     	ds	1
   811  0000F5                     vscp_handleProtocolEvent@byte:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x39
   815  0000F5                     	ds	1
   816  0000F6                     vscp_handleProtocolEvent@bytes_1495:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x3A
   820  0000F6                     	ds	2
   821  0000F8                     vscp_handleProtocolEvent@i_1491:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x3C
   825  0000F8                     	ds	1
   826  0000F9                     vscp_handleProtocolEvent@i:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x3D
   830  0000F9                     	ds	1
   831  0000FA                     vscp_handleProtocolEvent@j:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x3E
   835  0000FA                     	ds	1
   836  0000FB                     ??_main:
   837                           
   838                           ; 0 bytes @ 0x3F
   839  0000FB                     	ds	2
   840  0000FD                     main@dir:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x41
   844  0000FD                     	ds	1
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           prodh	equ	0xFF4
   850                           prodl	equ	0xFF3
   851                           intcon	equ	0xFF2
   852                           intcon2	equ	0xFF1
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           indf1	equ	0xFE7
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           indf2	equ	0xFDF
   859                           postinc2	equ	0xFDE
   860                           postdec2	equ	0xFDD
   861                           plusw2	equ	0xFDB
   862                           fsr2h	equ	0xFDA
   863                           fsr2l	equ	0xFD9
   864                           status	equ	0xFD8
   865                           
   866                           	psect	cstackCOMRAM
   867  000001                     __pcstackCOMRAM:
   868                           	opt stack 0
   869  000001                     ?i1_WriteTimer0:
   870                           	opt stack 0
   871  000001                     i1WriteTimer0@timer0:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x0
   875  000001                     	ds	2
   876  000003                     i1WriteTimer0@timer:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x2
   880  000003                     	ds	2
   881  000005                     ??_interrupt_at_low_vector:
   882                           
   883                           ; 0 bytes @ 0x4
   884  000005                     	ds	3
   885  000008                     ?__CANIDToRegs:
   886                           	opt stack 0
   887  000008                     ?__RegsToCANID:
   888                           	opt stack 0
   889  000008                     ?_WriteTimer0:
   890                           	opt stack 0
   891  000008                     ?_Write_b_eep:
   892                           	opt stack 0
   893  000008                     ??_vscp_getMDF_URL:
   894  000008                     ?_Read_b_eep:
   895                           	opt stack 0
   896  000008                     ?___lbmod:
   897                           	opt stack 0
   898  000008                     ?__ECANPointBuffer:
   899                           	opt stack 0
   900  000008                     ?_memset:
   901                           	opt stack 0
   902  000008                     ?_vscp_getFamilyCode:
   903                           	opt stack 0
   904  000008                     ?_vscp_getFamilyType:
   905                           	opt stack 0
   906  000008                     ECANSetOperationMode@mode:
   907                           	opt stack 0
   908  000008                     vscp_getMatrixInfo@i:
   909                           	opt stack 0
   910  000008                     OpenTimer0@config:
   911                           	opt stack 0
   912  000008                     ___lbmod@divisor:
   913                           	opt stack 0
   914  000008                     __CANIDToRegs@ptr:
   915                           	opt stack 0
   916  000008                     __RegsToCANID@ptr:
   917                           	opt stack 0
   918  000008                     Read_b_eep@badd:
   919                           	opt stack 0
   920  000008                     Write_b_eep@badd:
   921                           	opt stack 0
   922  000008                     WriteTimer0@timer0:
   923                           	opt stack 0
   924  000008                     memset@p1:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x7
   928  000008                     	ds	1
   929  000009                     vscp_getMDF_URL@idx:
   930                           	opt stack 0
   931  000009                     ___lbmod@dividend:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x8
   935  000009                     	ds	1
   936  00000A                     ?_doActionPulse:
   937                           	opt stack 0
   938  00000A                     ??_vscp_readAppReg:
   939  00000A                     __RegsToCANID@val:
   940                           	opt stack 0
   941  00000A                     doActionPulse@arg:
   942                           	opt stack 0
   943  00000A                     vscp_getGUID@idx:
   944                           	opt stack 0
   945  00000A                     vscp_getUserID@idx:
   946                           	opt stack 0
   947  00000A                     vscp_getManufacturerId@idx:
   948                           	opt stack 0
   949  00000A                     Write_b_eep@bdat:
   950                           	opt stack 0
   951  00000A                     ___lbmod@counter:
   952                           	opt stack 0
   953  00000A                     WriteTimer0@timer:
   954                           	opt stack 0
   955  00000A                     memset@c:
   956                           	opt stack 0
   957  00000A                     __CANIDToRegs@val:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x9
   961  00000A                     	ds	1
   962  00000B                     ??_doActionPulse:
   963  00000B                     __RegsToCANID@type:
   964                           	opt stack 0
   965  00000B                     __ECANPointBuffer@b:
   966                           	opt stack 0
   967  00000B                     Write_b_eep@GIE_BIT_VAL:
   968                           	opt stack 0
   969  00000B                     ___lbmod@rem:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0xA
   973  00000B                     	ds	1
   974  00000C                     ??__RegsToCANID:
   975  00000C                     ??_init_app_eeprom:
   976  00000C                     ??_vscp_readStdReg:
   977  00000C                     ?_vscp_setGUID:
   978                           	opt stack 0
   979  00000C                     ?_vscp_setManufacturerId:
   980                           	opt stack 0
   981  00000C                     ?_vscp_setUserID:
   982                           	opt stack 0
   983  00000C                     vscp_setGUID@data:
   984                           	opt stack 0
   985  00000C                     vscp_setManufacturerId@data:
   986                           	opt stack 0
   987  00000C                     vscp_writeNicknamePermanent@nickname:
   988                           	opt stack 0
   989  00000C                     vscp_setUserID@data:
   990                           	opt stack 0
   991  00000C                     vscp_setSegmentCRC@crc:
   992                           	opt stack 0
   993  00000C                     vscp_setControlByte@ctrl:
   994                           	opt stack 0
   995  00000C                     vscp_goBootloaderMode@algorithm:
   996                           	opt stack 0
   997  00000C                     __ECANPointBuffer@pt:
   998                           	opt stack 0
   999  00000C                     memset@n:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0xB
  1003  00000C                     	ds	1
  1004  00000D                     vscp_setGUID@idx:
  1005                           	opt stack 0
  1006  00000D                     vscp_setManufacturerId@idx:
  1007                           	opt stack 0
  1008  00000D                     vscp_setUserID@idx:
  1009                           	opt stack 0
  1010  00000D                     vscp_handleDropNickname@bytes:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0xC
  1014  00000D                     	ds	1
  1015  00000E                     __CANIDToRegs@type:
  1016                           	opt stack 0
  1017  00000E                     __RegsToCANID@Value:
  1018                           	opt stack 0
  1019  00000E                     init_app_eeprom@j:
  1020                           	opt stack 0
  1021  00000E                     doActionPulse@dmflags:
  1022                           	opt stack 0
  1023  00000E                     memset@p:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0xD
  1027  00000E                     	ds	1
  1028  00000F                     ??__CANIDToRegs:
  1029  00000F                     ?_ECANReceiveMessage:
  1030                           	opt stack 0
  1031  00000F                     ECANReceiveMessage@data:
  1032                           	opt stack 0
  1033  00000F                     init_app_eeprom@i:
  1034                           	opt stack 0
  1035  00000F                     doActionPulse@val:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0xE
  1039  00000F                     	ds	1
  1040  000010                     ??_init_app_ram:
  1041  000010                     ECANReceiveMessage@dataLen:
  1042                           	opt stack 0
  1043  000010                     doActionPulse@i:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0xF
  1047  000010                     	ds	1
  1048  000011                     ECANReceiveMessage@msgFlags:
  1049                           	opt stack 0
  1050  000011                     __CANIDToRegs@Value:
  1051                           	opt stack 0
  1052  000011                     vscp_readAppReg@rv:
  1053                           	opt stack 0
  1054  000011                     vscp_readStdReg@code:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x10
  1058  000011                     	ds	1
  1059  000012                     ??_calculateSetFilterMask:
  1060  000012                     ?_ECANSendMessage:
  1061                           	opt stack 0
  1062  000012                     ECANReceiveMessage@id:
  1063                           	opt stack 0
  1064  000012                     vscp_readAppReg@reg:
  1065                           	opt stack 0
  1066  000012                     ECANSendMessage@id:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x11
  1070  000012                     	ds	1
  1071  000013                     ECANReceiveMessage@savedPtr:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x12
  1075  000013                     	ds	2
  1076  000015                     ECANReceiveMessage@i:
  1077                           	opt stack 0
  1078  000015                     vscp_readStdReg@code_1473:
  1079                           	opt stack 0
  1080                           
  1081                           ; 4 bytes @ 0x14
  1082  000015                     	ds	1
  1083  000016                     ECANReceiveMessage@mode:
  1084                           	opt stack 0
  1085  000016                     ECANSendMessage@data:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x15
  1089  000016                     	ds	1
  1090  000017                     ECANReceiveMessage@temp:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x16
  1094  000017                     	ds	1
  1095  000018                     ECANSendMessage@dataLen:
  1096                           	opt stack 0
  1097  000018                     ECANReceiveMessage@ptr:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x17
  1101  000018                     	ds	1
  1102  000019                     ECANSendMessage@msgFlags:
  1103                           	opt stack 0
  1104  000019                     vscp_readStdReg@idx:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x18
  1108  000019                     	ds	1
  1109  00001A                     ??_ECANSendMessage:
  1110  00001A                     ?_getCANFrame:
  1111                           	opt stack 0
  1112  00001A                     getCANFrame@pdlc:
  1113                           	opt stack 0
  1114  00001A                     vscp_readStdReg@idx_1474:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x19
  1118  00001A                     	ds	1
  1119  00001B                     getCANFrame@pdata:
  1120                           	opt stack 0
  1121  00001B                     vscp_readStdReg@rv:
  1122                           	opt stack 0
  1123  00001B                     ECANSendMessage@pb:
  1124                           	opt stack 0
  1125                           
  1126                           ; 18 bytes @ 0x1A
  1127  00001B                     	ds	1
  1128  00001C                     getCANFrame@pid:
  1129                           	opt stack 0
  1130  00001C                     vscp_readStdReg@reg:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x1B
  1134  00001C                     	ds	1
  1135  00001D                     getCANFrame@flags:
  1136                           	opt stack 0
  1137  00001D                     vscp_readRegister@reg:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x1C
  1141  00001D                     	ds	1
  1142  00001E                     ?_getVSCPFrame:
  1143                           	opt stack 0
  1144  00001E                     getVSCPFrame@pvscptype:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x1D
  1148  00001E                     	ds	1
  1149  00001F                     getVSCPFrame@pNodeId:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x1E
  1153  00001F                     	ds	1
  1154  000020                     getVSCPFrame@pPriority:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x1F
  1158  000020                     	ds	1
  1159  000021                     getVSCPFrame@pSize:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x20
  1163  000021                     	ds	1
  1164  000022                     getVSCPFrame@pData:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x21
  1168  000022                     	ds	1
  1169  000023                     ??_getVSCPFrame:
  1170                           
  1171                           ; 0 bytes @ 0x22
  1172  000023                     	ds	4
  1173  000027                     getVSCPFrame@pvscpclass:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x26
  1177  000027                     	ds	1
  1178  000028                     getVSCPFrame@id:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x27
  1182  000028                     	ds	4
  1183  00002C                     vscp_getEvent@rv:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x2B
  1187  00002C                     	ds	1
  1188  00002D                     ECANSendMessage@mode:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x2C
  1192  00002D                     	ds	1
  1193  00002E                     ECANSendMessage@buffers:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x2D
  1197  00002E                     	ds	1
  1198  00002F                     ECANSendMessage@j:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x2E
  1202  00002F                     	ds	1
  1203  000030                     ECANSendMessage@tempBSEL0:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x2F
  1207  000030                     	ds	1
  1208  000031                     ECANSendMessage@tempPtr:
  1209                           	opt stack 0
  1210  000031                     calculateSetFilterMask@rowmask:
  1211                           	opt stack 0
  1212                           
  1213                           ; 4 bytes @ 0x30
  1214  000031                     	ds	2
  1215  000033                     ECANSendMessage@temp:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x32
  1219  000033                     	ds	1
  1220  000034                     ECANSendMessage@i:
  1221                           	opt stack 0
  1222  000034                     init_app_ram@dir:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x33
  1226  000034                     	ds	1
  1227  000035                     init_app_ram@i:
  1228                           	opt stack 0
  1229  000035                     calculateSetFilterMask@lastOID:
  1230                           	opt stack 0
  1231  000035                     ECANSendMessage@ptr:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x34
  1235  000035                     	ds	1
  1236  000036                     ?_vscp_writeStdReg:
  1237                           	opt stack 0
  1238  000036                     vscp_writeStdReg@value:
  1239                           	opt stack 0
  1240  000036                     calculateSetFilterMask@mask:
  1241                           	opt stack 0
  1242                           
  1243                           ; 4 bytes @ 0x35
  1244  000036                     	ds	1
  1245  000037                     ??_vscp_writeStdReg:
  1246  000037                     ?_sendCANFrame:
  1247                           	opt stack 0
  1248  000037                     sendCANFrame@id:
  1249                           	opt stack 0
  1250                           
  1251                           ; 4 bytes @ 0x36
  1252  000037                     	ds	3
  1253  00003A                     calculateSetFilterMask@filter:
  1254                           	opt stack 0
  1255                           
  1256                           ; 4 bytes @ 0x39
  1257  00003A                     	ds	1
  1258  00003B                     sendCANFrame@dlc:
  1259                           	opt stack 0
  1260  00003B                     vscp_writeStdReg@rv:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x3A
  1264  00003B                     	ds	1
  1265  00003C                     vscp_writeStdReg@reg:
  1266                           	opt stack 0
  1267  00003C                     sendCANFrame@pdata:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x3B
  1271  00003C                     	ds	2
  1272  00003E                     sendCANFrame@rv:
  1273                           	opt stack 0
  1274  00003E                     calculateSetFilterMask@rowfilter:
  1275                           	opt stack 0
  1276                           
  1277                           ; 4 bytes @ 0x3D
  1278  00003E                     	ds	1
  1279  00003F                     ?_sendVSCPFrame:
  1280                           	opt stack 0
  1281  00003F                     sendVSCPFrame@vscpclass:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x3E
  1285  00003F                     	ds	2
  1286  000041                     sendVSCPFrame@vscptype:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x40
  1290  000041                     	ds	1
  1291  000042                     sendVSCPFrame@nodeid:
  1292                           	opt stack 0
  1293  000042                     calculateSetFilterMask@j:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x41
  1297  000042                     	ds	1
  1298  000043                     sendVSCPFrame@priority:
  1299                           	opt stack 0
  1300  000043                     calculateSetFilterMask@i:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x42
  1304  000043                     	ds	1
  1305  000044                     sendVSCPFrame@size:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x43
  1309  000044                     	ds	1
  1310  000045                     sendVSCPFrame@pData:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x44
  1314  000045                     	ds	2
  1315  000047                     sendVSCPFrame@id:
  1316                           	opt stack 0
  1317                           
  1318                           ; 4 bytes @ 0x46
  1319  000047                     	ds	4
  1320  00004B                     SendInformationEvent@data:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x4A
  1324  00004B                     	ds	1
  1325  00004C                     ??_vscp_newNodeOnline:
  1326  00004C                     vscp_sendHeartBeat@zone:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x4B
  1330  00004C                     	ds	1
  1331  00004D                     ??_vscp_doOneSecondWork:
  1332                           
  1333                           ; 0 bytes @ 0x4C
  1334  00004D                     	ds	1
  1335  00004E                     SendInformationEvent@idx:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x4D
  1339  00004E                     	ds	1
  1340  00004F                     ?_doActionOff:
  1341                           	opt stack 0
  1342  00004F                     ?_doActionOn:
  1343                           	opt stack 0
  1344  00004F                     ?_doActionStatus:
  1345                           	opt stack 0
  1346  00004F                     ?_doActionToggle:
  1347                           	opt stack 0
  1348  00004F                     ?_vscp_writeAppReg:
  1349                           	opt stack 0
  1350  00004F                     vscp_writeAppReg@val:
  1351                           	opt stack 0
  1352  00004F                     doActionOn@arg:
  1353                           	opt stack 0
  1354  00004F                     doActionOff@arg:
  1355                           	opt stack 0
  1356  00004F                     doActionStatus@arg:
  1357                           	opt stack 0
  1358  00004F                     doActionToggle@arg:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x4E
  1362  00004F                     	ds	1
  1363  000050                     ??_doActionOff:
  1364  000050                     ??_doActionStatus:
  1365  000050                     ??_doActionToggle:
  1366  000050                     vscp_writeRegister@reg:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x4F
  1370  000050                     	ds	2
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           prodh	equ	0xFF4
  1376                           prodl	equ	0xFF3
  1377                           intcon	equ	0xFF2
  1378                           intcon2	equ	0xFF1
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           indf1	equ	0xFE7
  1382                           fsr1h	equ	0xFE2
  1383                           fsr1l	equ	0xFE1
  1384                           indf2	equ	0xFDF
  1385                           postinc2	equ	0xFDE
  1386                           postdec2	equ	0xFDD
  1387                           plusw2	equ	0xFDB
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           status	equ	0xFD8
  1391                           
  1392 ;;
  1393 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1394 ;;
  1395 ;; *************** function _main *****************
  1396 ;; Defined at:
  1397 ;;		line 199 in file "../main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  dir             1   65[BANK0 ] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;		None               void
  1404 ;; Registers used:
  1405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : F/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1411 ;;      Params:         0       0       0       0       0       0       0
  1412 ;;      Locals:         0       1       0       0       0       0       0
  1413 ;;      Temps:          0       2       0       0       0       0       0
  1414 ;;      Totals:         0       3       0       0       0       0       0
  1415 ;;Total ram usage:        3 bytes
  1416 ;; Hardware stack levels required when called:   10
  1417 ;; This function calls:
  1418 ;;		_init
  1419 ;;		_vscp_check_pstorage
  1420 ;;		_init_app_eeprom
  1421 ;;		_init_app_ram
  1422 ;;		_vscp_init
  1423 ;;		_Busy_eep
  1424 ;;		_Write_b_eep
  1425 ;;		_vscp_getEvent
  1426 ;;		_vscp_goActiveState
  1427 ;;		_vscp_handleProbeState
  1428 ;;		_vscp_handleProtocolEvent
  1429 ;;		_Read_b_eep
  1430 ;;		_SendInformationEvent
  1431 ;;		_doDM
  1432 ;;		_vscp_error
  1433 ;;		_vscp_doOneSecondWork
  1434 ;;		_doApplicationOneSecondWork
  1435 ;;		_doWork
  1436 ;; This function is called by:
  1437 ;;		Startup code after reset
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text0
  1442  001FEA                     __ptext0:
  1443                           	opt stack 0
  1444  001FEA                     _main:
  1445                           	opt stack 20
  1446                           
  1447                           ;main.c: 201: init();
  1448                           
  1449                           ;incstack = 0
  1450                           ;incstack = 0
  1451  001FEA  EC23  F022         	call	_init	;wreg free
  1452                           
  1453                           ;main.c: 205: if ( !vscp_check_pstorage() ) {
  1454  001FEE  EC96  F023         	call	_vscp_check_pstorage	;wreg free
  1455  001FF2  0900               	iorlw	0
  1456  001FF4  B4D8               	btfsc	status,2,c
  1457                           
  1458                           ;main.c: 208: init_app_eeprom();
  1459  001FF6  EC6F  F01C         	call	_init_app_eeprom	;wreg free
  1460                           
  1461                           ;main.c: 210: }
  1462                           ;main.c: 213: init_app_ram();
  1463  001FFA  EC81  F015         	call	_init_app_ram	;wreg free
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 216: vscp_init();
  1467  001FFE  EC01  F022         	call	_vscp_init	;wreg free
  1468  002002                     l421:
  1469                           
  1470                           ; BSR set to: 0
  1471  002002  0004               	clrwdt		;# 
  1472                           
  1473                           ;main.c: 222: if ( ( vscp_initbtncnt > 250 ) &&
  1474                           ;main.c: 223: ( 0x01 != vscp_node_state ) ) {
  1475  002004  0EFA               	movlw	250
  1476  002006  0100               	movlb	0	; () banked
  1477  002008  657C               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1478  00200A  D00E               	goto	l12340
  1479                           
  1480                           ; BSR set to: 0
  1481  00200C  057F               	decf	_vscp_node_state& (0+255),w,b
  1482  00200E  E00C               	bz	l12340
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 226: vscp_nickname = 0xff;
  1486  002010  697E               	setf	_vscp_nickname& (0+255),b
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 227: (Busy_eep(), Write_b_eep(0x01,0xff));
  1490  002012  ECA4  F024         	call	_Busy_eep	;wreg free
  1491  002016  6A09               	clrf	?_Write_b_eep+1,c
  1492  002018  0E01               	movlw	1
  1493  00201A  6E08               	movwf	?_Write_b_eep,c
  1494  00201C  0EFF               	movlw	255
  1495  00201E  680A               	setf	?_Write_b_eep+2,c
  1496  002020  EC85  F022         	call	_Write_b_eep	;wreg free
  1497                           
  1498                           ;main.c: 228: vscp_init();
  1499  002024  EC01  F022         	call	_vscp_init	;wreg free
  1500  002028                     l12340:
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;main.c: 230: }
  1504                           ;main.c: 233: vscp_imsg.flags = 0;
  1505  002028  6B97               	clrf	_vscp_imsg& (0+255),b
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;main.c: 234: vscp_getEvent();
  1509  00202A  EC0F  F023         	call	_vscp_getEvent	;wreg free
  1510                           
  1511                           ;main.c: 236: switch ( vscp_node_state ) {
  1512  00202E  D1BB               	goto	l12504
  1513  002030                     l12344:
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 241: if (0xff == vscp_nickname) {
  1517  002030  297E               	incf	_vscp_nickname& (0+255),w,b
  1518  002032  E103               	bnz	l12348
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;main.c: 243: vscp_node_state = 0x01;
  1522  002034  0E01               	movlw	1
  1523  002036  6F7F               	movwf	_vscp_node_state& (0+255),b
  1524                           
  1525                           ;main.c: 244: }
  1526  002038  D1C6               	goto	l12506
  1527  00203A                     l12348:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 245: else {
  1531                           ;main.c: 247: vscp_node_state = 0x03;
  1532  00203A  0E03               	movlw	3
  1533  00203C  6F7F               	movwf	_vscp_node_state& (0+255),b
  1534  00203E                     l12350:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 248: vscp_goActiveState();
  1538  00203E  ECC9  F023         	call	_vscp_goActiveState	;wreg free
  1539  002042  D1C1               	goto	l12506
  1540  002044                     l12352:
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 253: vscp_handleProbeState();
  1544  002044  EC37  F020         	call	_vscp_handleProbeState	;wreg free
  1545                           
  1546                           ;main.c: 254: break;
  1547  002048  D1BE               	goto	l12506
  1548  00204A                     l430:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;main.c: 263: if (vscp_imsg.flags & 0x80) {
  1552  00204A  AF97               	btfss	_vscp_imsg& (0+255),7,b
  1553  00204C  D1BC               	goto	l12506
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 265: if ( 0 == vscp_imsg.vscp_class ) {
  1557  00204E  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  1558  002050  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1559  002052  E103               	bnz	l12360
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 268: vscp_handleProtocolEvent();
  1563  002054  ECE9  F00C         	call	_vscp_handleProtocolEvent	;wreg free
  1564                           
  1565                           ;main.c: 270: }
  1566  002058  D1B6               	goto	l12506
  1567  00205A                     l12360:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 271: else {
  1571                           ;main.c: 273: if ( measurement_clock_10ms >= 10 ) {
  1572  00205A  0E0A               	movlw	10
  1573  00205C  5D60               	subwf	_measurement_clock_10ms& (0+255),w,b	;volatile
  1574  00205E  0E00               	movlw	0
  1575  002060  5961               	subwfb	(_measurement_clock_10ms+1)& (0+255),w,b	;volatile
  1576  002062  0E00               	movlw	0
  1577  002064  5962               	subwfb	(_measurement_clock_10ms+2)& (0+255),w,b	;volatile
  1578  002066  0E00               	movlw	0
  1579  002068  5963               	subwfb	(_measurement_clock_10ms+3)& (0+255),w,b	;volatile
  1580  00206A  E201 D194          	bnc	l12498
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 275: uint8_t dir = Read_b_eep(0x43 + 12) << 8 +
  1584                           ;main.c: 277: Read_b_eep(0x43 + 13);
  1585  00206E  6A09               	clrf	?_Read_b_eep+1,c
  1586  002070  0E50               	movlw	80
  1587  002072  6E08               	movwf	?_Read_b_eep,c
  1588  002074  EC70  F024         	call	_Read_b_eep	;wreg free
  1589  002078  0100               	movlb	0	; () banked
  1590  00207A  6FFB               	movwf	??_main& (0+255),b
  1591  00207C  0E08               	movlw	8
  1592  00207E  27FB               	addwf	??_main& (0+255),f,b
  1593  002080  6A09               	clrf	?_Read_b_eep+1,c
  1594  002082  0E4F               	movlw	79
  1595  002084  6E08               	movwf	?_Read_b_eep,c
  1596  002086  EC70  F024         	call	_Read_b_eep	;wreg free
  1597  00208A  0100               	movlb	0	; () banked
  1598  00208C  6FFC               	movwf	(??_main+1)& (0+255),b
  1599  00208E  2BFB               	incf	??_main& (0+255),f,b
  1600  002090  D002               	goto	u15664
  1601  002092                     u15665:
  1602  002092  90D8               	bcf	status,0,c
  1603  002094  37FC               	rlcf	(??_main+1)& (0+255),f,b
  1604  002096                     u15664:
  1605  002096  2FFB               	decfsz	??_main& (0+255),f,b
  1606  002098  D7FC               	goto	u15665
  1607  00209A  51FC               	movf	(??_main+1)& (0+255),w,b
  1608  00209C  6FFD               	movwf	main@dir& (0+255),b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;main.c: 280: measurement_clock_10ms = 0;
  1612  00209E  6B60               	clrf	_measurement_clock_10ms& (0+255),b	;volatile
  1613  0020A0  6B61               	clrf	(_measurement_clock_10ms+1)& (0+255),b	;volatile
  1614  0020A2  6B62               	clrf	(_measurement_clock_10ms+2)& (0+255),b	;volatile
  1615  0020A4  6B63               	clrf	(_measurement_clock_10ms+3)& (0+255),b	;volatile
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 282: if ( ( dir & ( 1 << current_debounce ) ) &&
  1619                           ;main.c: 283: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1620                           ;main.c: 286: 0x40 ) &&
  1621                           ;main.c: 287: ( Read_b_eep(0x43 + 34 + current_debounce) &
  1622                           ;main.c: 290: 0x80 ) ) {
  1623  0020A6  C075  F0FB         	movff	_current_debounce,??_main
  1624  0020AA  0E01               	movlw	1
  1625  0020AC  6FFC               	movwf	(??_main+1)& (0+255),b
  1626  0020AE  2BFB               	incf	??_main& (0+255),f,b
  1627  0020B0  D002               	goto	u15674
  1628  0020B2                     u15675:
  1629  0020B2  90D8               	bcf	status,0,c
  1630  0020B4  37FC               	rlcf	(??_main+1)& (0+255),f,b
  1631  0020B6                     u15674:
  1632  0020B6  2FFB               	decfsz	??_main& (0+255),f,b
  1633  0020B8  D7FC               	goto	u15675
  1634  0020BA  51FC               	movf	(??_main+1)& (0+255),w,b
  1635  0020BC  15FD               	andwf	main@dir& (0+255),w,b
  1636  0020BE  E101 D16A          	bz	l12498
  1637                           
  1638                           ; BSR set to: 0
  1639  0020C2  0E65               	movlw	101
  1640  0020C4  2575               	addwf	_current_debounce& (0+255),w,b
  1641  0020C6  6E08               	movwf	?_Read_b_eep,c
  1642  0020C8  6A09               	clrf	?_Read_b_eep+1,c
  1643  0020CA  0E00               	movlw	0
  1644  0020CC  2209               	addwfc	?_Read_b_eep+1,f,c
  1645  0020CE  EC70  F024         	call	_Read_b_eep	;wreg free
  1646  0020D2  0100               	movlb	0	; () banked
  1647  0020D4  6FFB               	movwf	??_main& (0+255),b
  1648  0020D6  ADFB               	btfss	??_main& (0+255),6,b
  1649  0020D8  D15E               	goto	l12498
  1650                           
  1651                           ; BSR set to: 0
  1652  0020DA  0E65               	movlw	101
  1653  0020DC  2575               	addwf	_current_debounce& (0+255),w,b
  1654  0020DE  6E08               	movwf	?_Read_b_eep,c
  1655  0020E0  6A09               	clrf	?_Read_b_eep+1,c
  1656  0020E2  0E00               	movlw	0
  1657  0020E4  2209               	addwfc	?_Read_b_eep+1,f,c
  1658  0020E6  EC70  F024         	call	_Read_b_eep	;wreg free
  1659  0020EA  0100               	movlb	0	; () banked
  1660  0020EC  6FFB               	movwf	??_main& (0+255),b
  1661  0020EE  BFFB               	btfsc	??_main& (0+255),7,b
  1662  0020F0  D136               	goto	l12496
  1663  0020F2  D151               	goto	l12498
  1664  0020F4                     l437:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 294: if ( !PORTBbits.RB0 ) {
  1668  0020F4  B081               	btfsc	3969,0,c	;volatile
  1669  0020F6  D01C               	goto	l12384
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 295: debounce_cnt[ current_debounce ]++;
  1673  0020F8  5175               	movf	_current_debounce& (0+255),w,b
  1674                           
  1675                           ;main.c: 296: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1676  0020FA  D997               	call	PL10	;call to abstracted procedure
  1677  0020FC  64DF               	cpfsgt	indf2,c
  1678  0020FE  D14B               	goto	l12498
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 298: debounce_cnt[ current_debounce ] = 0;
  1682  002100  5175               	movf	_current_debounce& (0+255),w,b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 301: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1686                           ;main.c: 304: 0x04 ) {
  1687  002102  D988               	call	PL6	;call to abstracted procedure
  1688  002104  EC70  F024         	call	_Read_b_eep	;wreg free
  1689  002108  0100               	movlb	0	; () banked
  1690  00210A  6FFB               	movwf	??_main& (0+255),b
  1691  00210C  A5FB               	btfss	??_main& (0+255),2,b
  1692  00210E  D008               	goto	l12382
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 305: SendInformationEvent( current_debounce,
  1696                           ;main.c: 306: 20,
  1697                           ;main.c: 307: 3 );
  1698  002110  0E14               	movlw	20
  1699  002112  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1700  002114  0E03               	movlw	3
  1701  002116  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1702  002118  5175               	movf	_current_debounce& (0+255),w,b
  1703  00211A  ECB2  F021         	call	_SendInformationEvent
  1704                           
  1705                           ;main.c: 308: }
  1706  00211E  D13B               	goto	l12498
  1707  002120                     l12382:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 309: else {
  1711                           ;main.c: 310: SendInformationEvent( current_debounce,
  1712                           ;main.c: 311: 30,
  1713                           ;main.c: 312: 5 );
  1714  002120  0E1E               	movlw	30
  1715  002122  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1716  002124  0E05               	movlw	5
  1717  002126  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1718  002128  5175               	movf	_current_debounce& (0+255),w,b
  1719  00212A  ECB2  F021         	call	_SendInformationEvent
  1720  00212E  D133               	goto	l12498
  1721  002130                     l12384:
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 316: else {
  1725                           ;main.c: 317: debounce_cnt[ current_debounce ] = 0;
  1726  002130  5175               	movf	_current_debounce& (0+255),w,b
  1727  002132  0FB2               	addlw	low _debounce_cnt
  1728  002134  6ED9               	movwf	fsr2l,c
  1729  002136  6ADA               	clrf	fsr2h,c
  1730  002138  0E00               	movlw	0
  1731  00213A  6ADF               	clrf	indf2,c
  1732  00213C  D12C               	goto	l12498
  1733  00213E                     l444:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 322: if ( !PORTBbits.RB1 ) {
  1737  00213E  B281               	btfsc	3969,1,c	;volatile
  1738  002140  D7F7               	goto	l12384
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 323: debounce_cnt[ current_debounce ]++;
  1742  002142  5175               	movf	_current_debounce& (0+255),w,b
  1743                           
  1744                           ;main.c: 324: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1745  002144  D972               	call	PL10	;call to abstracted procedure
  1746  002146  64DF               	cpfsgt	indf2,c
  1747  002148  D126               	goto	l12498
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 326: debounce_cnt[ current_debounce ] = 0;
  1751  00214A  5175               	movf	_current_debounce& (0+255),w,b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 329: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1755                           ;main.c: 332: 0x04 ) {
  1756  00214C  D963               	call	PL6	;call to abstracted procedure
  1757  00214E  EC70  F024         	call	_Read_b_eep	;wreg free
  1758  002152  0100               	movlb	0	; () banked
  1759  002154  6FFB               	movwf	??_main& (0+255),b
  1760  002156  A5FB               	btfss	??_main& (0+255),2,b
  1761  002158  D008               	goto	l12394
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;main.c: 333: SendInformationEvent( current_debounce,
  1765                           ;main.c: 334: 20,
  1766                           ;main.c: 335: 3 );
  1767  00215A  0E14               	movlw	20
  1768  00215C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1769  00215E  0E03               	movlw	3
  1770  002160  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1771  002162  5175               	movf	_current_debounce& (0+255),w,b
  1772  002164  ECB2  F021         	call	_SendInformationEvent
  1773                           
  1774                           ;main.c: 336: }
  1775  002168  D116               	goto	l12498
  1776  00216A                     l12394:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 337: else {
  1780                           ;main.c: 338: SendInformationEvent( current_debounce,
  1781                           ;main.c: 339: 30,
  1782                           ;main.c: 340: 5 );
  1783  00216A  0E1E               	movlw	30
  1784  00216C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1785  00216E  0E05               	movlw	5
  1786  002170  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1787  002172  5175               	movf	_current_debounce& (0+255),w,b
  1788  002174  ECB2  F021         	call	_SendInformationEvent
  1789  002178  D10E               	goto	l12498
  1790  00217A                     l450:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 350: if ( !PORTCbits.RC3 ) {
  1794  00217A  B682               	btfsc	3970,3,c	;volatile
  1795  00217C  D7D9               	goto	l12384
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 351: debounce_cnt[ current_debounce ]++;
  1799  00217E  5175               	movf	_current_debounce& (0+255),w,b
  1800                           
  1801                           ;main.c: 352: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1802  002180  D954               	call	PL10	;call to abstracted procedure
  1803  002182  64DF               	cpfsgt	indf2,c
  1804  002184  D108               	goto	l12498
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;main.c: 354: debounce_cnt[ current_debounce ] = 0;
  1808  002186  5175               	movf	_current_debounce& (0+255),w,b
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 357: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1812                           ;main.c: 360: 0x04 ) {
  1813  002188  D945               	call	PL6	;call to abstracted procedure
  1814  00218A  EC70  F024         	call	_Read_b_eep	;wreg free
  1815  00218E  0100               	movlb	0	; () banked
  1816  002190  6FFB               	movwf	??_main& (0+255),b
  1817  002192  A5FB               	btfss	??_main& (0+255),2,b
  1818  002194  D008               	goto	l12406
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 361: SendInformationEvent( current_debounce,
  1822                           ;main.c: 362: 20,
  1823                           ;main.c: 363: 3 );
  1824  002196  0E14               	movlw	20
  1825  002198  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1826  00219A  0E03               	movlw	3
  1827  00219C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1828  00219E  5175               	movf	_current_debounce& (0+255),w,b
  1829  0021A0  ECB2  F021         	call	_SendInformationEvent
  1830                           
  1831                           ;main.c: 364: }
  1832  0021A4  D0F8               	goto	l12498
  1833  0021A6                     l12406:
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 365: else {
  1837                           ;main.c: 366: SendInformationEvent( current_debounce,
  1838                           ;main.c: 367: 30,
  1839                           ;main.c: 368: 5 );
  1840  0021A6  0E1E               	movlw	30
  1841  0021A8  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1842  0021AA  0E05               	movlw	5
  1843  0021AC  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1844  0021AE  5175               	movf	_current_debounce& (0+255),w,b
  1845  0021B0  ECB2  F021         	call	_SendInformationEvent
  1846  0021B4  D0F0               	goto	l12498
  1847  0021B6                     l456:
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 378: if ( !PORTCbits.RC4 ) {
  1851  0021B6  B882               	btfsc	3970,4,c	;volatile
  1852  0021B8  D7BB               	goto	l12384
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 379: debounce_cnt[ current_debounce ]++;
  1856  0021BA  5175               	movf	_current_debounce& (0+255),w,b
  1857                           
  1858                           ;main.c: 380: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1859  0021BC  D936               	call	PL10	;call to abstracted procedure
  1860  0021BE  64DF               	cpfsgt	indf2,c
  1861  0021C0  D0EA               	goto	l12498
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 382: debounce_cnt[ current_debounce ] = 0;
  1865  0021C2  5175               	movf	_current_debounce& (0+255),w,b
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 385: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1869                           ;main.c: 388: 0x04 ) {
  1870  0021C4  D927               	call	PL6	;call to abstracted procedure
  1871  0021C6  EC70  F024         	call	_Read_b_eep	;wreg free
  1872  0021CA  0100               	movlb	0	; () banked
  1873  0021CC  6FFB               	movwf	??_main& (0+255),b
  1874  0021CE  A5FB               	btfss	??_main& (0+255),2,b
  1875  0021D0  D008               	goto	l12418
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 389: SendInformationEvent( current_debounce,
  1879                           ;main.c: 390: 20,
  1880                           ;main.c: 391: 3 );
  1881  0021D2  0E14               	movlw	20
  1882  0021D4  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1883  0021D6  0E03               	movlw	3
  1884  0021D8  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1885  0021DA  5175               	movf	_current_debounce& (0+255),w,b
  1886  0021DC  ECB2  F021         	call	_SendInformationEvent
  1887                           
  1888                           ;main.c: 392: }
  1889  0021E0  D0DA               	goto	l12498
  1890  0021E2                     l12418:
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 393: else {
  1894                           ;main.c: 394: SendInformationEvent( current_debounce,
  1895                           ;main.c: 395: 30,
  1896                           ;main.c: 396: 5 );
  1897  0021E2  0E1E               	movlw	30
  1898  0021E4  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1899  0021E6  0E05               	movlw	5
  1900  0021E8  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1901  0021EA  5175               	movf	_current_debounce& (0+255),w,b
  1902  0021EC  ECB2  F021         	call	_SendInformationEvent
  1903  0021F0  D0D2               	goto	l12498
  1904  0021F2                     l462:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 406: if ( !PORTCbits.RC5 ) {
  1908  0021F2  BA82               	btfsc	3970,5,c	;volatile
  1909  0021F4  D79D               	goto	l12384
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 407: debounce_cnt[ current_debounce ]++;
  1913  0021F6  5175               	movf	_current_debounce& (0+255),w,b
  1914                           
  1915                           ;main.c: 408: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1916  0021F8  D918               	call	PL10	;call to abstracted procedure
  1917  0021FA  64DF               	cpfsgt	indf2,c
  1918  0021FC  D0CC               	goto	l12498
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 410: debounce_cnt[ current_debounce ] = 0;
  1922  0021FE  5175               	movf	_current_debounce& (0+255),w,b
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 413: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1926                           ;main.c: 416: 0x04 ) {
  1927  002200  D909               	call	PL6	;call to abstracted procedure
  1928  002202  EC70  F024         	call	_Read_b_eep	;wreg free
  1929  002206  0100               	movlb	0	; () banked
  1930  002208  6FFB               	movwf	??_main& (0+255),b
  1931  00220A  A5FB               	btfss	??_main& (0+255),2,b
  1932  00220C  D008               	goto	l12430
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 417: SendInformationEvent( current_debounce,
  1936                           ;main.c: 418: 20,
  1937                           ;main.c: 419: 3 );
  1938  00220E  0E14               	movlw	20
  1939  002210  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1940  002212  0E03               	movlw	3
  1941  002214  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1942  002216  5175               	movf	_current_debounce& (0+255),w,b
  1943  002218  ECB2  F021         	call	_SendInformationEvent
  1944                           
  1945                           ;main.c: 420: }
  1946  00221C  D0BC               	goto	l12498
  1947  00221E                     l12430:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 421: else {
  1951                           ;main.c: 422: SendInformationEvent( current_debounce,
  1952                           ;main.c: 423: 30,
  1953                           ;main.c: 424: 5 );
  1954  00221E  0E1E               	movlw	30
  1955  002220  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1956  002222  0E05               	movlw	5
  1957  002224  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1958  002226  5175               	movf	_current_debounce& (0+255),w,b
  1959  002228  ECB2  F021         	call	_SendInformationEvent
  1960  00222C  D0B4               	goto	l12498
  1961  00222E                     l468:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;main.c: 434: if ( !PORTCbits.RC6 ) {
  1965  00222E  BC82               	btfsc	3970,6,c	;volatile
  1966  002230  D77F               	goto	l12384
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;main.c: 435: debounce_cnt[ current_debounce ]++;
  1970  002232  5175               	movf	_current_debounce& (0+255),w,b
  1971                           
  1972                           ;main.c: 436: if ( debounce_cnt[ current_debounce ] > 3 ) {
  1973  002234  D8FA               	call	PL10	;call to abstracted procedure
  1974  002236  64DF               	cpfsgt	indf2,c
  1975  002238  D0AE               	goto	l12498
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 438: debounce_cnt[ current_debounce ] = 0;
  1979  00223A  5175               	movf	_current_debounce& (0+255),w,b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;main.c: 441: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  1983                           ;main.c: 444: 0x04 ) {
  1984  00223C  D8EB               	call	PL6	;call to abstracted procedure
  1985  00223E  EC70  F024         	call	_Read_b_eep	;wreg free
  1986  002242  0100               	movlb	0	; () banked
  1987  002244  6FFB               	movwf	??_main& (0+255),b
  1988  002246  A5FB               	btfss	??_main& (0+255),2,b
  1989  002248  D008               	goto	l12442
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 445: SendInformationEvent( current_debounce,
  1993                           ;main.c: 446: 20,
  1994                           ;main.c: 447: 3 );
  1995  00224A  0E14               	movlw	20
  1996  00224C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  1997  00224E  0E03               	movlw	3
  1998  002250  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1999  002252  5175               	movf	_current_debounce& (0+255),w,b
  2000  002254  ECB2  F021         	call	_SendInformationEvent
  2001                           
  2002                           ;main.c: 448: }
  2003  002258  D09E               	goto	l12498
  2004  00225A                     l12442:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;main.c: 449: else {
  2008                           ;main.c: 450: SendInformationEvent( current_debounce,
  2009                           ;main.c: 451: 30,
  2010                           ;main.c: 452: 5 );
  2011  00225A  0E1E               	movlw	30
  2012  00225C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2013  00225E  0E05               	movlw	5
  2014  002260  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2015  002262  5175               	movf	_current_debounce& (0+255),w,b
  2016  002264  ECB2  F021         	call	_SendInformationEvent
  2017  002268  D096               	goto	l12498
  2018  00226A                     l474:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 462: if ( !PORTCbits.RC7 ) {
  2022  00226A  BE82               	btfsc	3970,7,c	;volatile
  2023  00226C  D761               	goto	l12384
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;main.c: 463: debounce_cnt[ current_debounce ]++;
  2027  00226E  5175               	movf	_current_debounce& (0+255),w,b
  2028                           
  2029                           ;main.c: 464: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2030  002270  D8DC               	call	PL10	;call to abstracted procedure
  2031  002272  64DF               	cpfsgt	indf2,c
  2032  002274  D090               	goto	l12498
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;main.c: 466: debounce_cnt[ current_debounce ] = 0;
  2036  002276  5175               	movf	_current_debounce& (0+255),w,b
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;main.c: 469: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2040                           ;main.c: 472: 0x04 ) {
  2041  002278  D8CD               	call	PL6	;call to abstracted procedure
  2042  00227A  EC70  F024         	call	_Read_b_eep	;wreg free
  2043  00227E  0100               	movlb	0	; () banked
  2044  002280  6FFB               	movwf	??_main& (0+255),b
  2045  002282  A5FB               	btfss	??_main& (0+255),2,b
  2046  002284  D008               	goto	l12454
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;main.c: 473: SendInformationEvent( current_debounce,
  2050                           ;main.c: 474: 20,
  2051                           ;main.c: 475: 3 );
  2052  002286  0E14               	movlw	20
  2053  002288  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2054  00228A  0E03               	movlw	3
  2055  00228C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2056  00228E  5175               	movf	_current_debounce& (0+255),w,b
  2057  002290  ECB2  F021         	call	_SendInformationEvent
  2058                           
  2059                           ;main.c: 476: }
  2060  002294  D080               	goto	l12498
  2061  002296                     l12454:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 477: else {
  2065                           ;main.c: 478: SendInformationEvent( current_debounce,
  2066                           ;main.c: 479: 30,
  2067                           ;main.c: 480: 5 );
  2068  002296  0E1E               	movlw	30
  2069  002298  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2070  00229A  0E05               	movlw	5
  2071  00229C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2072  00229E  5175               	movf	_current_debounce& (0+255),w,b
  2073  0022A0  ECB2  F021         	call	_SendInformationEvent
  2074  0022A4  D078               	goto	l12498
  2075  0022A6                     l480:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 490: if ( !PORTAbits.RA2 ) {
  2079  0022A6  B480               	btfsc	3968,2,c	;volatile
  2080  0022A8  D743               	goto	l12384
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 491: debounce_cnt[ current_debounce ]++;
  2084  0022AA  5175               	movf	_current_debounce& (0+255),w,b
  2085                           
  2086                           ;main.c: 492: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2087  0022AC  D8BE               	call	PL10	;call to abstracted procedure
  2088  0022AE  64DF               	cpfsgt	indf2,c
  2089  0022B0  D072               	goto	l12498
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 494: debounce_cnt[ current_debounce ] = 0;
  2093  0022B2  5175               	movf	_current_debounce& (0+255),w,b
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;main.c: 497: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2097                           ;main.c: 500: 0x04 ) {
  2098  0022B4  D8AF               	call	PL6	;call to abstracted procedure
  2099  0022B6  EC70  F024         	call	_Read_b_eep	;wreg free
  2100  0022BA  0100               	movlb	0	; () banked
  2101  0022BC  6FFB               	movwf	??_main& (0+255),b
  2102  0022BE  A5FB               	btfss	??_main& (0+255),2,b
  2103  0022C0  D008               	goto	l12466
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 501: SendInformationEvent( current_debounce,
  2107                           ;main.c: 502: 20,
  2108                           ;main.c: 503: 3 );
  2109  0022C2  0E14               	movlw	20
  2110  0022C4  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2111  0022C6  0E03               	movlw	3
  2112  0022C8  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2113  0022CA  5175               	movf	_current_debounce& (0+255),w,b
  2114  0022CC  ECB2  F021         	call	_SendInformationEvent
  2115                           
  2116                           ;main.c: 504: }
  2117  0022D0  D062               	goto	l12498
  2118  0022D2                     l12466:
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;main.c: 505: else {
  2122                           ;main.c: 506: SendInformationEvent( current_debounce,
  2123                           ;main.c: 507: 30,
  2124                           ;main.c: 508: 5 );
  2125  0022D2  0E1E               	movlw	30
  2126  0022D4  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2127  0022D6  0E05               	movlw	5
  2128  0022D8  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2129  0022DA  5175               	movf	_current_debounce& (0+255),w,b
  2130  0022DC  ECB2  F021         	call	_SendInformationEvent
  2131  0022E0  D05A               	goto	l12498
  2132  0022E2                     l486:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;main.c: 518: if ( !PORTAbits.RA1 ) {
  2136  0022E2  B280               	btfsc	3968,1,c	;volatile
  2137  0022E4  D725               	goto	l12384
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 519: debounce_cnt[ current_debounce ]++;
  2141  0022E6  5175               	movf	_current_debounce& (0+255),w,b
  2142                           
  2143                           ;main.c: 520: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2144  0022E8  D8A0               	call	PL10	;call to abstracted procedure
  2145  0022EA  64DF               	cpfsgt	indf2,c
  2146  0022EC  D054               	goto	l12498
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;main.c: 522: debounce_cnt[ current_debounce ] = 0;
  2150  0022EE  5175               	movf	_current_debounce& (0+255),w,b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 525: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2154                           ;main.c: 528: 0x04 ) {
  2155  0022F0  D891               	call	PL6	;call to abstracted procedure
  2156  0022F2  EC70  F024         	call	_Read_b_eep	;wreg free
  2157  0022F6  0100               	movlb	0	; () banked
  2158  0022F8  6FFB               	movwf	??_main& (0+255),b
  2159  0022FA  A5FB               	btfss	??_main& (0+255),2,b
  2160  0022FC  D008               	goto	l12478
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 529: SendInformationEvent( current_debounce,
  2164                           ;main.c: 530: 20,
  2165                           ;main.c: 531: 3 );
  2166  0022FE  0E14               	movlw	20
  2167  002300  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2168  002302  0E03               	movlw	3
  2169  002304  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2170  002306  5175               	movf	_current_debounce& (0+255),w,b
  2171  002308  ECB2  F021         	call	_SendInformationEvent
  2172                           
  2173                           ;main.c: 532: }
  2174  00230C  D044               	goto	l12498
  2175  00230E                     l12478:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 533: else {
  2179                           ;main.c: 534: SendInformationEvent( current_debounce,
  2180                           ;main.c: 535: 30,
  2181                           ;main.c: 536: 5 );
  2182  00230E  0E1E               	movlw	30
  2183  002310  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2184  002312  0E05               	movlw	5
  2185  002314  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2186  002316  5175               	movf	_current_debounce& (0+255),w,b
  2187  002318  ECB2  F021         	call	_SendInformationEvent
  2188  00231C  D03C               	goto	l12498
  2189  00231E                     l492:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 546: if ( !PORTAbits.RA0 ) {
  2193  00231E  B080               	btfsc	3968,0,c	;volatile
  2194  002320  D707               	goto	l12384
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;main.c: 547: debounce_cnt[ current_debounce ]++;
  2198  002322  5175               	movf	_current_debounce& (0+255),w,b
  2199                           
  2200                           ;main.c: 548: if ( debounce_cnt[ current_debounce ] > 3 ) {
  2201  002324  D882               	call	PL10	;call to abstracted procedure
  2202  002326  64DF               	cpfsgt	indf2,c
  2203  002328  D036               	goto	l12498
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 550: debounce_cnt[ current_debounce ] = 0;
  2207  00232A  5175               	movf	_current_debounce& (0+255),w,b
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;main.c: 553: if ( Read_b_eep(0x43 + 24 + current_debounce) &
  2211                           ;main.c: 556: 0x04 ) {
  2212  00232C  D873               	call	PL6	;call to abstracted procedure
  2213  00232E  EC70  F024         	call	_Read_b_eep	;wreg free
  2214  002332  0100               	movlb	0	; () banked
  2215  002334  6FFB               	movwf	??_main& (0+255),b
  2216  002336  A5FB               	btfss	??_main& (0+255),2,b
  2217  002338  D008               	goto	l12490
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;main.c: 557: SendInformationEvent( current_debounce,
  2221                           ;main.c: 558: 20,
  2222                           ;main.c: 559: 3 );
  2223  00233A  0E14               	movlw	20
  2224  00233C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2225  00233E  0E03               	movlw	3
  2226  002340  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2227  002342  5175               	movf	_current_debounce& (0+255),w,b
  2228  002344  ECB2  F021         	call	_SendInformationEvent
  2229                           
  2230                           ;main.c: 560: }
  2231  002348  D026               	goto	l12498
  2232  00234A                     l12490:
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;main.c: 561: else {
  2236                           ;main.c: 562: SendInformationEvent( current_debounce,
  2237                           ;main.c: 563: 30,
  2238                           ;main.c: 564: 5 );
  2239  00234A  0E1E               	movlw	30
  2240  00234C  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2241  00234E  0E05               	movlw	5
  2242  002350  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2243  002352  5175               	movf	_current_debounce& (0+255),w,b
  2244  002354  ECB2  F021         	call	_SendInformationEvent
  2245  002358  D01E               	goto	l12498
  2246  00235A                     l498:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 574: current_debounce = 0;
  2250  00235A  6B75               	clrf	_current_debounce& (0+255),b
  2251                           
  2252                           ;main.c: 575: break;
  2253  00235C  D01C               	goto	l12498
  2254  00235E                     l12496:
  2255                           
  2256                           ; BSR set to: 0
  2257  00235E  5175               	movf	_current_debounce& (0+255),w,b
  2258                           
  2259                           ; Switch size 1, requested type "space"
  2260                           ; Number of cases is 10, Range of values is 0 to 9
  2261                           ; switch strategies available:
  2262                           ; Name         Instructions Cycles
  2263                           ; simple_byte           31    16 (average)
  2264                           ;	Chosen strategy is simple_byte
  2265  002360  E101 D6C8          	bz	l437
  2266  002364  0A01               	xorlw	1	; case 1
  2267  002366  E101 D6EA          	bz	l444
  2268  00236A  0A03               	xorlw	3	; case 2
  2269  00236C  E101 D705          	bz	l450
  2270  002370  0A01               	xorlw	1	; case 3
  2271  002372  E101 D720          	bz	l456
  2272  002376  0A07               	xorlw	7	; case 4
  2273  002378  E101 D73B          	bz	l462
  2274  00237C  0A01               	xorlw	1	; case 5
  2275  00237E  E101 D756          	bz	l468
  2276  002382  0A03               	xorlw	3	; case 6
  2277  002384  E101 D771          	bz	l474
  2278  002388  0A01               	xorlw	1	; case 7
  2279  00238A  E08D               	bz	l480
  2280  00238C  0A0F               	xorlw	15	; case 8
  2281  00238E  E0A9               	bz	l486
  2282  002390  0A01               	xorlw	1	; case 9
  2283  002392  E0C5               	bz	l492
  2284  002394  D7E2               	goto	l498
  2285  002396                     l12498:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;main.c: 578: }
  2289                           ;main.c: 579: }
  2290                           ;main.c: 581: doDM();
  2291  002396  EC16  F019         	call	_doDM	;wreg free
  2292  00239A  D015               	goto	l12506
  2293  00239C                     l12500:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;main.c: 589: vscp_error();
  2297  00239C  ECA7  F024         	call	_vscp_error	;wreg free
  2298                           
  2299                           ;main.c: 590: break;
  2300  0023A0  D012               	goto	l12506
  2301  0023A2                     l500:
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;main.c: 593: vscp_node_state = 0x00;
  2305  0023A2  6B7F               	clrf	_vscp_node_state& (0+255),b
  2306                           
  2307                           ;main.c: 594: break;
  2308  0023A4  D010               	goto	l12506
  2309  0023A6                     l12504:
  2310  0023A6  0100               	movlb	0	; () banked
  2311  0023A8  517F               	movf	_vscp_node_state& (0+255),w,b
  2312                           
  2313                           ; Switch size 1, requested type "space"
  2314                           ; Number of cases is 5, Range of values is 0 to 4
  2315                           ; switch strategies available:
  2316                           ; Name         Instructions Cycles
  2317                           ; simple_byte           16     9 (average)
  2318                           ;	Chosen strategy is simple_byte
  2319  0023AA  E101 D641          	bz	l12344
  2320  0023AE  0A01               	xorlw	1	; case 1
  2321  0023B0  E101 D648          	bz	l12352
  2322  0023B4  0A03               	xorlw	3	; case 2
  2323  0023B6  E101 D642          	bz	l12350
  2324  0023BA  0A01               	xorlw	1	; case 3
  2325  0023BC  E101 D645          	bz	l430
  2326  0023C0  0A07               	xorlw	7	; case 4
  2327  0023C2  E0EC               	bz	l12500
  2328  0023C4  D7EE               	goto	l500
  2329  0023C6                     l12506:
  2330                           
  2331                           ;main.c: 599: if ( measurement_clock_sec > 1000 ) {
  2332  0023C6  0EE9               	movlw	233
  2333  0023C8  0100               	movlb	0	; () banked
  2334  0023CA  5D64               	subwf	_measurement_clock_sec& (0+255),w,b	;volatile
  2335  0023CC  0E03               	movlw	3
  2336  0023CE  5965               	subwfb	(_measurement_clock_sec+1)& (0+255),w,b	;volatile
  2337  0023D0  0E00               	movlw	0
  2338  0023D2  5966               	subwfb	(_measurement_clock_sec+2)& (0+255),w,b	;volatile
  2339  0023D4  0E00               	movlw	0
  2340  0023D6  5967               	subwfb	(_measurement_clock_sec+3)& (0+255),w,b	;volatile
  2341  0023D8  E30C               	bnc	l12518
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;main.c: 601: measurement_clock_sec = 0;
  2345  0023DA  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  2346  0023DC  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  2347  0023DE  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  2348  0023E0  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 602: sendTimer++;
  2352  0023E2  2B79               	incf	_sendTimer& (0+255),f,b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 605: vscp_doOneSecondWork();
  2356  0023E4  ECDA  F021         	call	_vscp_doOneSecondWork	;wreg free
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 609: if ( 0x03 == vscp_node_state ) {
  2360  0023E8  517F               	movf	_vscp_node_state& (0+255),w,b
  2361  0023EA  0A03               	xorlw	3
  2362  0023EC  B4D8               	btfsc	status,2,c
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 611: doApplicationOneSecondWork();
  2366  0023EE  ECA4  F009         	call	_doApplicationOneSecondWork	;wreg free
  2367  0023F2                     l12518:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;main.c: 612: }
  2371                           ;main.c: 614: }
  2372                           ;main.c: 617: if ( seconds > 59 ) {
  2373  0023F2  0E3B               	movlw	59
  2374  0023F4  6578               	cpfsgt	_seconds& (0+255),b
  2375  0023F6  D00B               	goto	l12534
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 619: seconds = 0;
  2379  0023F8  6B78               	clrf	_seconds& (0+255),b
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;main.c: 620: minutes++;
  2383  0023FA  2B77               	incf	_minutes& (0+255),f,b
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 622: if ( minutes > 59 ) {
  2387  0023FC  0E3B               	movlw	59
  2388  0023FE  6577               	cpfsgt	_minutes& (0+255),b
  2389  002400  D002               	goto	l12530
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 623: minutes = 0;
  2393  002402  6B77               	clrf	_minutes& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;main.c: 624: hours++;
  2397  002404  2B76               	incf	_hours& (0+255),f,b
  2398  002406                     l12530:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 625: }
  2402                           ;main.c: 627: if ( hours > 23 ) hours = 0;
  2403  002406  0E17               	movlw	23
  2404  002408  6576               	cpfsgt	_hours& (0+255),b
  2405  00240A  D001               	goto	l12534
  2406                           
  2407                           ; BSR set to: 0
  2408  00240C  6B76               	clrf	_hours& (0+255),b
  2409  00240E                     l12534:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;main.c: 629: }
  2413                           ;main.c: 631: doWork();
  2414  00240E  ECA9  F024         	call	_doWork	;wreg free
  2415  002412  D5F7               	goto	l421
  2416  002414                     __end_of_main:
  2417                           	opt stack 0
  2418  002414                     PL6:
  2419                           	opt stack 20
  2420  002414  0FB2               	addlw	low _debounce_cnt
  2421  002416  6ED9               	movwf	fsr2l,c
  2422  002418  6ADA               	clrf	fsr2h,c
  2423  00241A  6ADF               	clrf	indf2,c
  2424  00241C  0E5B               	movlw	91
  2425  00241E  2575               	addwf	_current_debounce& (0+255),w,b
  2426  002420  6E08               	movwf	?_Read_b_eep,c
  2427  002422  6A09               	clrf	?_Read_b_eep+1,c
  2428  002424  0E00               	movlw	0
  2429  002426  2209               	addwfc	?_Read_b_eep+1,f,c
  2430  002428  0C00               	retlw	0
  2431  00242A                     __end_ofPL6:
  2432                           	opt stack 0
  2433  00242A                     PL10:
  2434                           	opt stack 20
  2435  00242A  0FB2               	addlw	low _debounce_cnt
  2436  00242C  6ED9               	movwf	fsr2l,c
  2437  00242E  6ADA               	clrf	fsr2h,c
  2438  002430  2ADF               	incf	indf2,f,c
  2439  002432  5175               	movf	_current_debounce& (0+255),w,b
  2440  002434  0FB2               	addlw	low _debounce_cnt
  2441  002436  6ED9               	movwf	fsr2l,c
  2442  002438  6ADA               	clrf	fsr2h,c
  2443  00243A  0C03               	retlw	3
  2444  00243C                     __end_ofPL10:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon	equ	0xFF2
  2453                           intcon2	equ	0xFF1
  2454                           postinc0	equ	0xFEE
  2455                           wreg	equ	0xFE8
  2456                           indf1	equ	0xFE7
  2457                           fsr1h	equ	0xFE2
  2458                           fsr1l	equ	0xFE1
  2459                           indf2	equ	0xFDF
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           plusw2	equ	0xFDB
  2463                           fsr2h	equ	0xFDA
  2464                           fsr2l	equ	0xFD9
  2465                           status	equ	0xFD8
  2466                           
  2467 ;; *************** function _doWork *****************
  2468 ;; Defined at:
  2469 ;;		line 1414 in file "../main.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;		None
  2474 ;; Return value:  Size  Location     Type
  2475 ;;		None               void
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0
  2478 ;; Tracked objects:
  2479 ;;		On entry : F/0
  2480 ;;		On exit  : F/0
  2481 ;;		Unchanged: F/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2483 ;;      Params:         0       0       0       0       0       0       0
  2484 ;;      Locals:         0       0       0       0       0       0       0
  2485 ;;      Temps:          0       0       0       0       0       0       0
  2486 ;;      Totals:         0       0       0       0       0       0       0
  2487 ;;Total ram usage:        0 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    2
  2490 ;; This function calls:
  2491 ;;		Nothing
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text1
  2498  004952                     __ptext1:
  2499                           	opt stack 0
  2500  004952                     _doWork:
  2501                           	opt stack 27
  2502                           
  2503                           ; BSR set to: 0
  2504                           
  2505                           ; BSR set to: 0
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;incstack = 0
  2509                           ;incstack = 0
  2510  004952  0012               	return	
  2511  004954                     __end_of_doWork:
  2512                           	opt stack 0
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           intcon	equ	0xFF2
  2520                           intcon2	equ	0xFF1
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _doApplicationOneSecondWork *****************
  2535 ;; Defined at:
  2536 ;;		line 895 in file "../main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  data            3    2[BANK1 ] unsigned char [3]
  2541 ;;  iodirections    2    0[BANK1 ] unsigned short 
  2542 ;;  i               1    8[BANK1 ] unsigned char 
  2543 ;;  ctrlreg         1    7[BANK1 ] unsigned char 
  2544 ;;  bOn             1    6[BANK1 ] enum E15660
  2545 ;;  bInput          1    5[BANK1 ] enum E15660
  2546 ;; Return value:  Size  Location     Type
  2547 ;;		None               void
  2548 ;; Registers used:
  2549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : F/0
  2552 ;;		On exit  : F/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         0       0       0       0       0       0       0
  2556 ;;      Locals:         0       0       9       0       0       0       0
  2557 ;;      Temps:          0      36       0       0       0       0       0
  2558 ;;      Totals:         0      36       9       0       0       0       0
  2559 ;;Total ram usage:       45 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    8
  2562 ;; This function calls:
  2563 ;;		_Read_b_eep
  2564 ;;		_SendInformationEvent
  2565 ;;		_doActionOff
  2566 ;;		_sendVSCPFrame
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text2
  2573  001348                     __ptext2:
  2574                           	opt stack 0
  2575  001348                     _doApplicationOneSecondWork:
  2576                           	opt stack 21
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 897: uint8_t i;
  2580                           ;main.c: 898: uint16_t iodirections;
  2581                           ;main.c: 899: uint8_t ctrlreg;
  2582                           ;main.c: 900: BOOL bOn = 0;
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;incstack = 0
  2586                           ;incstack = 0
  2587  001348  0101               	movlb	1	; () banked
  2588  00134A  6B1A               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  2589                           
  2590                           ; BSR set to: 1
  2591                           ;main.c: 901: BOOL bInput;
  2592                           ;main.c: 904: iodirections = ( Read_b_eep(0x43 + 12) << 8 ) +
  2593                           ;main.c: 905: Read_b_eep(0x43 + 13);
  2594  00134C  6A09               	clrf	?_Read_b_eep+1,c
  2595  00134E  0E50               	movlw	80
  2596  001350  6E08               	movwf	?_Read_b_eep,c
  2597  001352  EC70  F024         	call	_Read_b_eep	;wreg free
  2598  001356  0100               	movlb	0	; () banked
  2599  001358  6FD5               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2600  00135A  6A09               	clrf	?_Read_b_eep+1,c
  2601  00135C  0E4F               	movlw	79
  2602  00135E  6E08               	movwf	?_Read_b_eep,c
  2603  001360  EC70  F024         	call	_Read_b_eep	;wreg free
  2604  001364  0100               	movlb	0	; () banked
  2605  001366  6FD7               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2606  001368  6BD6               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2607  00136A  51D5               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2608  00136C  25D6               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2609  00136E  0101               	movlb	1	; () banked
  2610  001370  6F14               	movwf	doApplicationOneSecondWork@iodirections& (0+255),b
  2611  001372  0100               	movlb	0	; () banked
  2612  001374  0E00               	movlw	0
  2613  001376  21D7               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2614  001378  0101               	movlb	1	; () banked
  2615  00137A  6F15               	movwf	(doApplicationOneSecondWork@iodirections+1)& (0+255),b
  2616                           
  2617                           ; BSR set to: 1
  2618                           ;main.c: 907: for ( i = 0; i < 10; i++ ) {
  2619  00137C  6B1C               	clrf	doApplicationOneSecondWork@i& (0+255),b
  2620  00137E                     l13392:
  2621                           
  2622                           ; BSR set to: 1
  2623  00137E  0E09               	movlw	9
  2624  001380  651C               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  2625  001382  D001               	goto	l13396
  2626  001384  D1C7               	goto	l13568
  2627  001386                     l13396:
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;main.c: 909: if ( iodirections & ( 1 << i ) ) {
  2631  001386  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2632  00138A  0E01               	movlw	1
  2633  00138C  DABF               	call	PL18	;call to abstracted procedure
  2634  00138E  D001               	goto	u17174
  2635  001390                     u17175:
  2636  001390  DB1C               	call	PL114	;call to abstracted procedure
  2637  001392                     u17174:
  2638  001392  2FD5               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  2639  001394  D7FD               	goto	u17175
  2640  001396  0101               	movlb	1	; () banked
  2641  001398  5114               	movf	doApplicationOneSecondWork@iodirections& (0+255),w,b
  2642  00139A  0100               	movlb	0	; () banked
  2643  00139C  17D6               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2644  00139E  0101               	movlb	1	; () banked
  2645  0013A0  5115               	movf	(doApplicationOneSecondWork@iodirections+1)& (0+255),w,b
  2646  0013A2  0100               	movlb	0	; () banked
  2647  0013A4  17D7               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  2648  0013A6  51D7               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2649  0013A8  11D6               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2650  0013AA  E101 D0A3          	bz	l13474
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 914: ctrlreg = Read_b_eep(0x43 + 34 + i);
  2654  0013AE  0E65               	movlw	101
  2655  0013B0  DADB               	call	PL42	;call to abstracted procedure
  2656  0013B2  EC70  F024         	call	_Read_b_eep	;wreg free
  2657  0013B6  0101               	movlb	1	; () banked
  2658  0013B8  6F1B               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;main.c: 917: if ( !( ctrlreg & 0x80 ) ) continue;
  2662  0013BA  AF1B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2663  0013BC  D1A8               	goto	l13564
  2664  0013BE  D032               	goto	l13426
  2665  0013C0                     l13404:
  2666                           
  2667                           ; BSR set to: 1
  2668                           ;main.c: 922: bInput = PORTBbits.RB0;
  2669  0013C0  0E00               	movlw	0
  2670  0013C2  B081               	btfsc	3969,0,c	;volatile
  2671  0013C4  0E01               	movlw	1
  2672  0013C6  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2673                           
  2674                           ;main.c: 923: break;
  2675  0013C8  D041               	goto	l546
  2676  0013CA                     l13406:
  2677                           
  2678                           ; BSR set to: 1
  2679                           ;main.c: 926: bInput = PORTBbits.RB1;
  2680  0013CA  0E00               	movlw	0
  2681  0013CC  B281               	btfsc	3969,1,c	;volatile
  2682  0013CE  0E01               	movlw	1
  2683  0013D0  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2684                           
  2685                           ;main.c: 927: break;
  2686  0013D2  D03C               	goto	l546
  2687  0013D4                     l13408:
  2688                           
  2689                           ; BSR set to: 1
  2690                           ;main.c: 930: bInput = PORTCbits.RC3;
  2691  0013D4  0E00               	movlw	0
  2692  0013D6  B682               	btfsc	3970,3,c	;volatile
  2693  0013D8  0E01               	movlw	1
  2694  0013DA  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2695                           
  2696                           ;main.c: 931: break;
  2697  0013DC  D037               	goto	l546
  2698  0013DE                     l13410:
  2699                           
  2700                           ; BSR set to: 1
  2701                           ;main.c: 934: bInput = PORTCbits.RC4;
  2702  0013DE  0E00               	movlw	0
  2703  0013E0  B882               	btfsc	3970,4,c	;volatile
  2704  0013E2  0E01               	movlw	1
  2705  0013E4  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2706                           
  2707                           ;main.c: 935: break;
  2708  0013E6  D032               	goto	l546
  2709  0013E8                     l13412:
  2710                           
  2711                           ; BSR set to: 1
  2712                           ;main.c: 938: bInput = PORTCbits.RC5;
  2713  0013E8  0E00               	movlw	0
  2714  0013EA  BA82               	btfsc	3970,5,c	;volatile
  2715  0013EC  0E01               	movlw	1
  2716  0013EE  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2717                           
  2718                           ;main.c: 939: break;
  2719  0013F0  D02D               	goto	l546
  2720  0013F2                     l13414:
  2721                           
  2722                           ; BSR set to: 1
  2723                           ;main.c: 942: bInput = PORTCbits.RC6;
  2724  0013F2  0E00               	movlw	0
  2725  0013F4  BC82               	btfsc	3970,6,c	;volatile
  2726  0013F6  0E01               	movlw	1
  2727  0013F8  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2728                           
  2729                           ;main.c: 943: break;
  2730  0013FA  D028               	goto	l546
  2731  0013FC                     l13416:
  2732                           
  2733                           ; BSR set to: 1
  2734                           ;main.c: 946: bInput = PORTCbits.RC7;
  2735  0013FC  0E00               	movlw	0
  2736  0013FE  BE82               	btfsc	3970,7,c	;volatile
  2737  001400  0E01               	movlw	1
  2738  001402  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2739                           
  2740                           ;main.c: 947: break;
  2741  001404  D023               	goto	l546
  2742  001406                     l13418:
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;main.c: 950: bInput = PORTAbits.RA2;
  2746  001406  0E00               	movlw	0
  2747  001408  B480               	btfsc	3968,2,c	;volatile
  2748  00140A  0E01               	movlw	1
  2749  00140C  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2750                           
  2751                           ;main.c: 951: break;
  2752  00140E  D01E               	goto	l546
  2753  001410                     l13420:
  2754                           
  2755                           ; BSR set to: 1
  2756                           ;main.c: 954: bInput = PORTAbits.RA1;
  2757  001410  0E00               	movlw	0
  2758  001412  B280               	btfsc	3968,1,c	;volatile
  2759  001414  0E01               	movlw	1
  2760  001416  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2761                           
  2762                           ;main.c: 955: break;
  2763  001418  D019               	goto	l546
  2764  00141A                     l13422:
  2765                           
  2766                           ; BSR set to: 1
  2767                           ;main.c: 958: bInput = PORTAbits.RA0;
  2768  00141A  0E00               	movlw	0
  2769  00141C  B080               	btfsc	3968,0,c	;volatile
  2770  00141E  0E01               	movlw	1
  2771  001420  6F19               	movwf	doApplicationOneSecondWork@bInput& (0+255),b
  2772                           
  2773                           ;main.c: 959: break;
  2774  001422  D014               	goto	l546
  2775  001424                     l13426:
  2776                           
  2777                           ; BSR set to: 1
  2778  001424  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2779                           
  2780                           ; Switch size 1, requested type "space"
  2781                           ; Number of cases is 10, Range of values is 0 to 9
  2782                           ; switch strategies available:
  2783                           ; Name         Instructions Cycles
  2784                           ; simple_byte           31    16 (average)
  2785                           ;	Chosen strategy is simple_byte
  2786  001426  E0CC               	bz	l13404
  2787  001428  0A01               	xorlw	1	; case 1
  2788  00142A  E0CF               	bz	l13406
  2789  00142C  0A03               	xorlw	3	; case 2
  2790  00142E  E0D2               	bz	l13408
  2791  001430  0A01               	xorlw	1	; case 3
  2792  001432  E0D5               	bz	l13410
  2793  001434  0A07               	xorlw	7	; case 4
  2794  001436  E0D8               	bz	l13412
  2795  001438  0A01               	xorlw	1	; case 5
  2796  00143A  E0DB               	bz	l13414
  2797  00143C  0A03               	xorlw	3	; case 6
  2798  00143E  E0DE               	bz	l13416
  2799  001440  0A01               	xorlw	1	; case 7
  2800  001442  E0E1               	bz	l13418
  2801  001444  0A0F               	xorlw	15	; case 8
  2802  001446  E0E4               	bz	l13420
  2803  001448  0A01               	xorlw	1	; case 9
  2804  00144A  E0E7               	bz	l13422
  2805  00144C                     l546:
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;main.c: 963: if ( ctrlreg & 0x01 ) {
  2809  00144C  A11B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),0,b
  2810  00144E  D017               	goto	l13438
  2811                           
  2812                           ; BSR set to: 1
  2813                           ;main.c: 965: if ( bInput ) {
  2814  001450  5119               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2815  001452  E015               	bz	l13438
  2816                           
  2817                           ; BSR set to: 1
  2818                           ;main.c: 968: if ( !( current_iostate & ( 1 << i ) ) ) {
  2819  001454  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2820  001458  DA47               	call	PL16	;call to abstracted procedure
  2821  00145A  E111               	bnz	l13438
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 969: if ( ctrlreg & 0x04 ) {
  2825  00145C  0101               	movlb	1	; () banked
  2826  00145E  A51B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2827  001460  D00A               	goto	l13436
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;main.c: 970: SendInformationEvent( i,
  2831                           ;main.c: 971: 30,
  2832                           ;main.c: 972: 5 );
  2833  001462  0E1E               	movlw	30
  2834  001464  0100               	movlb	0	; () banked
  2835  001466  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2836  001468  0E05               	movlw	5
  2837  00146A  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2838  00146C  0101               	movlb	1	; () banked
  2839  00146E  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2840  001470  ECB2  F021         	call	_SendInformationEvent
  2841                           
  2842                           ;main.c: 973: }
  2843  001474  D004               	goto	l13438
  2844  001476                     l13436:
  2845                           
  2846                           ; BSR set to: 1
  2847                           ;main.c: 974: else {
  2848                           ;main.c: 975: SendInformationEvent( i,
  2849                           ;main.c: 976: 20,
  2850                           ;main.c: 977: 3 );
  2851  001476  0E14               	movlw	20
  2852  001478  DA93               	call	PL84	;call to abstracted procedure
  2853  00147A  ECB2  F021         	call	_SendInformationEvent
  2854  00147E                     l13438:
  2855                           
  2856                           ;main.c: 978: }
  2857                           ;main.c: 979: }
  2858                           ;main.c: 980: }
  2859                           ;main.c: 981: }
  2860                           ;main.c: 984: if ( ctrlreg & 0x02 ) {
  2861  00147E  0101               	movlb	1	; () banked
  2862  001480  B31B               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  2863                           
  2864                           ; BSR set to: 1
  2865                           ;main.c: 986: if ( !bInput ) {
  2866  001482  6719               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2867  001484  D015               	goto	l13450
  2868                           
  2869                           ; BSR set to: 1
  2870                           ;main.c: 989: if ( current_iostate & ( 1 << i ) ) {
  2871  001486  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2872  00148A  DA2E               	call	PL16	;call to abstracted procedure
  2873  00148C  E011               	bz	l13450
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 990: if ( ctrlreg & 0x04 ) {
  2877  00148E  0101               	movlb	1	; () banked
  2878  001490  A51B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),2,b
  2879  001492  D00A               	goto	l13448
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;main.c: 991: SendInformationEvent( i,
  2883                           ;main.c: 992: 30,
  2884                           ;main.c: 993: 6 );
  2885  001494  0E1E               	movlw	30
  2886  001496  0100               	movlb	0	; () banked
  2887  001498  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  2888  00149A  0E06               	movlw	6
  2889  00149C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2890  00149E  0101               	movlb	1	; () banked
  2891  0014A0  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2892  0014A2  ECB2  F021         	call	_SendInformationEvent
  2893                           
  2894                           ;main.c: 994: }
  2895  0014A6  D004               	goto	l13450
  2896  0014A8                     l13448:
  2897                           
  2898                           ; BSR set to: 1
  2899                           ;main.c: 995: else {
  2900                           ;main.c: 996: SendInformationEvent( i,
  2901                           ;main.c: 997: 20,
  2902                           ;main.c: 998: 4 );
  2903  0014A8  0E14               	movlw	20
  2904  0014AA  DA88               	call	PL94	;call to abstracted procedure
  2905  0014AC  ECB2  F021         	call	_SendInformationEvent
  2906  0014B0                     l13450:
  2907                           
  2908                           ;main.c: 999: }
  2909                           ;main.c: 1000: }
  2910                           ;main.c: 1001: }
  2911                           ;main.c: 1002: }
  2912                           ;main.c: 1005: if ( ctrlreg & 0x10 ) {
  2913  0014B0  0101               	movlb	1	; () banked
  2914  0014B2  A91B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2915  0014B4  D00E               	goto	l13462
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;main.c: 1007: if ( bInput ) {
  2919  0014B6  5119               	movf	doApplicationOneSecondWork@bInput& (0+255),w,b
  2920  0014B8  E00C               	bz	l13462
  2921                           
  2922                           ; BSR set to: 1
  2923                           ;main.c: 1010: if ( !( current_iostate & ( 1 << i ) ) ||
  2924                           ;main.c: 1011: ( ctrlreg & 0x20 ) ) {
  2925  0014BA  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2926  0014BE  DA14               	call	PL16	;call to abstracted procedure
  2927  0014C0  E003               	bz	l13458
  2928                           
  2929                           ; BSR set to: 0
  2930  0014C2  0101               	movlb	1	; () banked
  2931  0014C4  AB1B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2932  0014C6  D005               	goto	l13462
  2933  0014C8                     l13458:
  2934                           
  2935                           ;main.c: 1012: SendInformationEvent( i,
  2936                           ;main.c: 1013: 1,
  2937                           ;main.c: 1014: 2 );
  2938  0014C8  0E01               	movlw	1
  2939  0014CA  DA55               	call	PL52	;call to abstracted procedure
  2940  0014CC  ECB2  F021         	call	_SendInformationEvent
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;main.c: 1015: vscp_alarmstatus |= 0x02;
  2944  0014D0  8255               	bsf	_vscp_alarmstatus,1,c
  2945  0014D2                     l13462:
  2946                           
  2947                           ;main.c: 1016: }
  2948                           ;main.c: 1018: }
  2949                           ;main.c: 1020: }
  2950                           ;main.c: 1023: if ( ctrlreg & 0x08 ) {
  2951  0014D2  0101               	movlb	1	; () banked
  2952  0014D4  B71B               	btfsc	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;main.c: 1025: if (!bInput ) {
  2956  0014D6  6719               	tstfsz	doApplicationOneSecondWork@bInput& (0+255),b
  2957  0014D8  D11A               	goto	l13564
  2958                           
  2959                           ; BSR set to: 1
  2960                           ;main.c: 1028: if ( current_iostate & ( 1 << i ) ||
  2961                           ;main.c: 1029: ( ctrlreg & 0x20 ) ) {
  2962  0014DA  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  2963  0014DE  DA04               	call	PL16	;call to abstracted procedure
  2964  0014E0  E103               	bnz	l13470
  2965                           
  2966                           ; BSR set to: 0
  2967  0014E2  0101               	movlb	1	; () banked
  2968  0014E4  AB1B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2969  0014E6  D113               	goto	l13564
  2970  0014E8                     l13470:
  2971                           
  2972                           ;main.c: 1030: SendInformationEvent( i,
  2973                           ;main.c: 1031: 1,
  2974                           ;main.c: 1032: 2 );
  2975  0014E8  0E01               	movlw	1
  2976  0014EA  DA45               	call	PL52	;call to abstracted procedure
  2977  0014EC  ECB2  F021         	call	_SendInformationEvent
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;main.c: 1033: vscp_alarmstatus |= 0x04;
  2981  0014F0  8455               	bsf	_vscp_alarmstatus,2,c
  2982  0014F2  D10D               	goto	l13564
  2983  0014F4                     l13474:
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;main.c: 1041: else {
  2987                           ;main.c: 1046: ctrlreg = Read_b_eep(0x43 + 24 + i);
  2988  0014F4  0E5B               	movlw	91
  2989  0014F6  DA38               	call	PL42	;call to abstracted procedure
  2990  0014F8  EC70  F024         	call	_Read_b_eep	;wreg free
  2991  0014FC  0101               	movlb	1	; () banked
  2992  0014FE  6F1B               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  2993                           
  2994                           ; BSR set to: 1
  2995                           ;main.c: 1049: if ( !( ctrlreg & 0x80 ) ) continue;
  2996  001500  AF1B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  2997  001502  D105               	goto	l13564
  2998                           
  2999                           ; BSR set to: 1
  3000                           ;main.c: 1053: if ( channel_protection_timer[ i ] ) {
  3001  001504  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3002  001506  0D02               	mullw	2
  3003  001508  50F3               	movf	prodl,w,c
  3004  00150A  0F83               	addlw	low _channel_protection_timer
  3005  00150C  6ED9               	movwf	fsr2l,c
  3006  00150E  6ADA               	clrf	fsr2h,c
  3007  001510  50DE               	movf	postinc2,w,c
  3008  001512  10DD               	iorwf	postdec2,w,c
  3009  001514  E027               	bz	l13494
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;main.c: 1055: channel_protection_timer[ i ]--;
  3013  001516  DA21               	call	PL38	;call to abstracted procedure
  3014  001518  06DE               	decf	postinc2,f,c
  3015  00151A  0E00               	movlw	0
  3016  00151C  5ADD               	subwfb	postdec2,f,c
  3017                           
  3018                           ;main.c: 1058: if (!channel_protection_timer[ i ] &&
  3019                           ;main.c: 1059: ( Read_b_eep(0x43 + 24 + i) &
  3020                           ;main.c: 1060: 0x04 ) ) {
  3021  00151E  DA1D               	call	PL38	;call to abstracted procedure
  3022  001520  50DE               	movf	postinc2,w,c
  3023  001522  10DD               	iorwf	postdec2,w,c
  3024  001524  E12B               	bnz	l13496
  3025                           
  3026                           ; BSR set to: 0
  3027  001526  DA43               	call	PL92	;call to abstracted procedure
  3028  001528  EC70  F024         	call	_Read_b_eep	;wreg free
  3029  00152C  0100               	movlb	0	; () banked
  3030  00152E  6FD5               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3031  001530  A5D5               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3032  001532  D024               	goto	l13496
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;main.c: 1063: doActionOff(0, (1 << i));
  3036  001534  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3037  001538  0E01               	movlw	1
  3038  00153A  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3039  00153C  2BD5               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3040  00153E  D002               	goto	u17444
  3041  001540                     u17445:
  3042  001540  90D8               	bcf	status,0,c
  3043  001542  37D6               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3044  001544                     u17444:
  3045  001544  2FD5               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3046  001546  D7FC               	goto	u17445
  3047  001548  51D6               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3048  00154A  6E4F               	movwf	?_doActionOff,c
  3049  00154C  0E00               	movlw	0
  3050  00154E  ECD7  F01F         	call	_doActionOff
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;main.c: 1066: if (ctrlreg & 0x02) {
  3054  001552  0101               	movlb	1	; () banked
  3055  001554  A31B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  3056  001556  D004               	goto	l13492
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;main.c: 1067: SendInformationEvent( i,
  3060                           ;main.c: 1068: 1,
  3061                           ;main.c: 1069: 2);
  3062  001558  0E01               	movlw	1
  3063  00155A  DA0D               	call	PL52	;call to abstracted procedure
  3064  00155C  ECB2  F021         	call	_SendInformationEvent
  3065  001560                     l13492:
  3066                           
  3067                           ;main.c: 1070: }
  3068                           ;main.c: 1072: vscp_alarmstatus |= 0x01;
  3069  001560  8055               	bsf	_vscp_alarmstatus,0,c
  3070  001562  D00C               	goto	l13496
  3071  001564                     l13494:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 1076: else {
  3075                           ;main.c: 1078: channel_protection_timer[ i ] =
  3076                           ;main.c: 1079: Read_b_eep(0x43 + 46 + 20u + i) * 256 +
  3077                           ;main.c: 1081: Read_b_eep(0x43 + 46 + 21u + i);
  3078  001564  0E85               	movlw	133
  3079  001566  DA00               	call	PL42	;call to abstracted procedure
  3080  001568  EC70  F024         	call	_Read_b_eep	;wreg free
  3081  00156C  0100               	movlb	0	; () banked
  3082  00156E  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3083  001570  6BD5               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3084  001572  0E86               	movlw	134
  3085  001574  D9F9               	call	PL42	;call to abstracted procedure
  3086  001576  EC70  F024         	call	_Read_b_eep	;wreg free
  3087  00157A  D9D6               	call	PL32	;call to abstracted procedure
  3088  00157C                     l13496:
  3089                           
  3090                           ;main.c: 1083: }
  3091                           ;main.c: 1086: if ( channel_pulse_flags & (1 << i) ) {
  3092  00157C  C11C  F0D5         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  3093  001580  0E01               	movlw	1
  3094  001582  D9C4               	call	PL18	;call to abstracted procedure
  3095  001584  D001               	goto	u17464
  3096  001586                     u17465:
  3097  001586  DA21               	call	PL114	;call to abstracted procedure
  3098  001588                     u17464:
  3099  001588  2FD5               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3100  00158A  D7FD               	goto	u17465
  3101  00158C  5168               	movf	_channel_pulse_flags& (0+255),w,b
  3102  00158E  17D6               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3103  001590  5169               	movf	(_channel_pulse_flags+1)& (0+255),w,b
  3104  001592  17D7               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3105  001594  51D7               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3106  001596  11D6               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3107  001598  E101 D0B9          	bz	l13564
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 1088: if ( channel_pulse_timer[ i ] ) {
  3111  00159C  0101               	movlb	1	; () banked
  3112  00159E  D9BB               	call	PL28	;call to abstracted procedure
  3113  0015A0  50DE               	movf	postinc2,w,c
  3114  0015A2  10DD               	iorwf	postdec2,w,c
  3115  0015A4  E101 D09D          	bz	l13562
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;main.c: 1090: channel_pulse_timer[ i ]--;
  3119  0015A8  D9B6               	call	PL28	;call to abstracted procedure
  3120  0015AA  06DE               	decf	postinc2,f,c
  3121  0015AC  0E00               	movlw	0
  3122  0015AE  5ADD               	subwfb	postdec2,f,c
  3123                           
  3124                           ;main.c: 1093: if ( !channel_pulse_timer[ i ] ) {
  3125  0015B0  D9B2               	call	PL28	;call to abstracted procedure
  3126  0015B2  50DE               	movf	postinc2,w,c
  3127  0015B4  10DD               	iorwf	postdec2,w,c
  3128  0015B6  E040               	bz	l13546
  3129  0015B8  D0AA               	goto	l13564
  3130  0015BA                     l586:
  3131                           
  3132                           ; BSR set to: 1
  3133                           ;main.c: 1098: if ( PORTBbits.RB0 ) {
  3134  0015BA  A081               	btfss	3969,0,c	;volatile
  3135  0015BC  D002               	goto	l587
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 1099: PORTBbits.RB0 = 0;
  3139  0015BE  9081               	bcf	3969,0,c	;volatile
  3140  0015C0  D037               	goto	L9
  3141  0015C2                     l587:
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;main.c: 1102: else {
  3145                           ;main.c: 1103: PORTBbits.RB0 = 1;
  3146  0015C2  8081               	bsf	3969,0,c	;volatile
  3147  0015C4                     l13506:
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;main.c: 1104: bOn = 1;
  3151  0015C4  0E01               	movlw	1
  3152  0015C6  6F1A               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  3153  0015C8  D04B               	goto	l13548
  3154  0015CA                     l590:
  3155                           
  3156                           ; BSR set to: 1
  3157                           ;main.c: 1109: if ( PORTBbits.RB1 ) {
  3158  0015CA  A281               	btfss	3969,1,c	;volatile
  3159  0015CC  D002               	goto	l591
  3160                           
  3161                           ; BSR set to: 1
  3162                           ;main.c: 1110: PORTBbits.RB1 = 0;
  3163  0015CE  9281               	bcf	3969,1,c	;volatile
  3164  0015D0  D02F               	goto	L9
  3165  0015D2                     l591:
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;main.c: 1113: else {
  3169                           ;main.c: 1114: PORTBbits.RB1 = 1;
  3170  0015D2  8281               	bsf	3969,1,c	;volatile
  3171  0015D4  D7F7               	goto	l13506
  3172  0015D6                     l593:
  3173                           
  3174                           ; BSR set to: 1
  3175                           ;main.c: 1120: if ( PORTCbits.RC3 ) {
  3176  0015D6  A682               	btfss	3970,3,c	;volatile
  3177  0015D8  D002               	goto	l594
  3178                           
  3179                           ; BSR set to: 1
  3180                           ;main.c: 1121: PORTCbits.RC3 = 0;
  3181  0015DA  9682               	bcf	3970,3,c	;volatile
  3182  0015DC  D029               	goto	L9
  3183  0015DE                     l594:
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;main.c: 1124: else {
  3187                           ;main.c: 1125: PORTCbits.RC3 = 1;
  3188  0015DE  8682               	bsf	3970,3,c	;volatile
  3189  0015E0  D7F1               	goto	l13506
  3190  0015E2                     l596:
  3191                           
  3192                           ; BSR set to: 1
  3193                           ;main.c: 1131: if ( PORTCbits.RC4 ) {
  3194  0015E2  A882               	btfss	3970,4,c	;volatile
  3195  0015E4  D002               	goto	l597
  3196                           
  3197                           ; BSR set to: 1
  3198                           ;main.c: 1132: PORTCbits.RC4 = 0;
  3199  0015E6  9882               	bcf	3970,4,c	;volatile
  3200  0015E8  D023               	goto	L9
  3201  0015EA                     l597:
  3202                           
  3203                           ; BSR set to: 1
  3204                           ;main.c: 1135: else {
  3205                           ;main.c: 1136: PORTCbits.RC4 = 1;
  3206  0015EA  8882               	bsf	3970,4,c	;volatile
  3207  0015EC  D7EB               	goto	l13506
  3208  0015EE                     l599:
  3209                           
  3210                           ; BSR set to: 1
  3211                           ;main.c: 1142: if ( PORTCbits.RC5 ) {
  3212  0015EE  AA82               	btfss	3970,5,c	;volatile
  3213  0015F0  D002               	goto	l600
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;main.c: 1143: PORTCbits.RC5 = 0;
  3217  0015F2  9A82               	bcf	3970,5,c	;volatile
  3218  0015F4  D01D               	goto	L9
  3219  0015F6                     l600:
  3220                           
  3221                           ; BSR set to: 1
  3222                           ;main.c: 1146: else {
  3223                           ;main.c: 1147: PORTCbits.RC5 = 1;
  3224  0015F6  8A82               	bsf	3970,5,c	;volatile
  3225  0015F8  D7E5               	goto	l13506
  3226  0015FA                     l602:
  3227                           
  3228                           ; BSR set to: 1
  3229                           ;main.c: 1153: if ( PORTCbits.RC6 ) {
  3230  0015FA  AC82               	btfss	3970,6,c	;volatile
  3231  0015FC  D002               	goto	l603
  3232                           
  3233                           ; BSR set to: 1
  3234                           ;main.c: 1154: PORTCbits.RC6 = 0;
  3235  0015FE  9C82               	bcf	3970,6,c	;volatile
  3236  001600  D017               	goto	L9
  3237  001602                     l603:
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;main.c: 1157: else {
  3241                           ;main.c: 1158: PORTCbits.RC6 = 1;
  3242  001602  8C82               	bsf	3970,6,c	;volatile
  3243  001604  D7DF               	goto	l13506
  3244  001606                     l605:
  3245                           
  3246                           ; BSR set to: 1
  3247                           ;main.c: 1164: if ( PORTCbits.RC7 ) {
  3248  001606  AE82               	btfss	3970,7,c	;volatile
  3249  001608  D002               	goto	l606
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;main.c: 1165: PORTCbits.RC7 = 0;
  3253  00160A  9E82               	bcf	3970,7,c	;volatile
  3254  00160C  D011               	goto	L9
  3255  00160E                     l606:
  3256                           
  3257                           ; BSR set to: 1
  3258                           ;main.c: 1168: else {
  3259                           ;main.c: 1169: PORTCbits.RC7 = 1;
  3260  00160E  8E82               	bsf	3970,7,c	;volatile
  3261  001610  D7D9               	goto	l13506
  3262  001612                     l608:
  3263                           
  3264                           ; BSR set to: 1
  3265                           ;main.c: 1175: if ( PORTAbits.RA2 ) {
  3266  001612  A480               	btfss	3968,2,c	;volatile
  3267  001614  D002               	goto	l609
  3268                           
  3269                           ; BSR set to: 1
  3270                           ;main.c: 1176: PORTAbits.RA2 = 0;
  3271  001616  9480               	bcf	3968,2,c	;volatile
  3272  001618  D00B               	goto	L9
  3273  00161A                     l609:
  3274                           
  3275                           ; BSR set to: 1
  3276                           ;main.c: 1179: else {
  3277                           ;main.c: 1180: PORTAbits.RA2 = 1;
  3278  00161A  8480               	bsf	3968,2,c	;volatile
  3279  00161C  D7D3               	goto	l13506
  3280  00161E                     l611:
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;main.c: 1186: if ( PORTAbits.RA1 ) {
  3284  00161E  A280               	btfss	3968,1,c	;volatile
  3285  001620  D002               	goto	l612
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;main.c: 1187: PORTAbits.RA1 = 0;
  3289  001622  9280               	bcf	3968,1,c	;volatile
  3290  001624  D005               	goto	L9
  3291  001626                     l612:
  3292                           
  3293                           ; BSR set to: 1
  3294                           ;main.c: 1190: else {
  3295                           ;main.c: 1191: PORTAbits.RA1 = 1;
  3296  001626  8280               	bsf	3968,1,c	;volatile
  3297  001628  D7CD               	goto	l13506
  3298  00162A                     l614:
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;main.c: 1197: if ( PORTAbits.RA0 ) {
  3302  00162A  A080               	btfss	3968,0,c	;volatile
  3303  00162C  D003               	goto	l615
  3304                           
  3305                           ; BSR set to: 1
  3306                           ;main.c: 1198: PORTAbits.RA0 = 0;
  3307  00162E  9080               	bcf	3968,0,c	;volatile
  3308  001630                     L9:
  3309                           
  3310                           ;main.c: 1199: bOn = 0;
  3311  001630  6B1A               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  3312                           
  3313                           ;main.c: 1200: }
  3314  001632  D016               	goto	l13548
  3315  001634                     l615:
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;main.c: 1201: else {
  3319                           ;main.c: 1202: PORTAbits.RA0 = 1;
  3320  001634  8080               	bsf	3968,0,c	;volatile
  3321  001636  D7C6               	goto	l13506
  3322  001638                     l13546:
  3323                           
  3324                           ; BSR set to: 1
  3325  001638  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3326                           
  3327                           ; Switch size 1, requested type "space"
  3328                           ; Number of cases is 10, Range of values is 0 to 9
  3329                           ; switch strategies available:
  3330                           ; Name         Instructions Cycles
  3331                           ; simple_byte           31    16 (average)
  3332                           ;	Chosen strategy is simple_byte
  3333  00163A  E0BF               	bz	l586
  3334  00163C  0A01               	xorlw	1	; case 1
  3335  00163E  E0C5               	bz	l590
  3336  001640  0A03               	xorlw	3	; case 2
  3337  001642  E0C9               	bz	l593
  3338  001644  0A01               	xorlw	1	; case 3
  3339  001646  E0CD               	bz	l596
  3340  001648  0A07               	xorlw	7	; case 4
  3341  00164A  E0D1               	bz	l599
  3342  00164C  0A01               	xorlw	1	; case 5
  3343  00164E  E0D5               	bz	l602
  3344  001650  0A03               	xorlw	3	; case 6
  3345  001652  E0D9               	bz	l605
  3346  001654  0A01               	xorlw	1	; case 7
  3347  001656  E0DD               	bz	l608
  3348  001658  0A0F               	xorlw	15	; case 8
  3349  00165A  E0E1               	bz	l611
  3350  00165C  0A01               	xorlw	1	; case 9
  3351  00165E  E0E5               	bz	l614
  3352  001660                     l13548:
  3353                           
  3354                           ; BSR set to: 1
  3355                           ;main.c: 1209: channel_pulse_timer[ i ] =
  3356                           ;main.c: 1210: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3357                           ;main.c: 1212: Read_b_eep(0x43 + 46 + 0u + 2 * i);
  3358  001660  D973               	call	PL36	;call to abstracted procedure
  3359  001662  EC70  F024         	call	_Read_b_eep	;wreg free
  3360  001666  0100               	movlb	0	; () banked
  3361  001668  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3362  00166A  6BD5               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3363  00166C  0101               	movlb	1	; () banked
  3364  00166E  D96C               	call	PL36	;call to abstracted procedure
  3365  001670  EC70  F024         	call	_Read_b_eep	;wreg free
  3366  001674  0100               	movlb	0	; () banked
  3367  001676  27D5               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3368  001678  0E00               	movlw	0
  3369  00167A  23D6               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3370  00167C  0101               	movlb	1	; () banked
  3371  00167E  D94B               	call	PL28	;call to abstracted procedure
  3372  001680  C0D5  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3373  001684  C0D6  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3374                           
  3375                           ; BSR set to: 1
  3376                           ;main.c: 1215: if ( bOn ) {
  3377  001688  511A               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  3378  00168A  E024               	bz	l617
  3379                           
  3380                           ; BSR set to: 1
  3381                           ;main.c: 1218: if ( Read_b_eep(0x43 + 24 + i) &
  3382                           ;main.c: 1219: 0x04) {
  3383  00168C  D990               	call	PL92	;call to abstracted procedure
  3384  00168E  EC70  F024         	call	_Read_b_eep	;wreg free
  3385  001692  0100               	movlb	0	; () banked
  3386  001694  6FD5               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3387  001696  A5D5               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  3388  001698  D015               	goto	l13556
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 1220: channel_protection_timer[ i ] =
  3392                           ;main.c: 1221: Read_b_eep(0x43 + 46 + 20u + 2 * i) * 256 +
  3393                           ;main.c: 1223: Read_b_eep(0x43 + 46 + 21u + 2 * i);
  3394  00169A  0101               	movlb	1	; () banked
  3395  00169C  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3396  00169E  0D02               	mullw	2
  3397  0016A0  0E85               	movlw	133
  3398  0016A2  24F3               	addwf	prodl,w,c
  3399  0016A4  6E08               	movwf	?_Read_b_eep,c
  3400  0016A6  0E00               	movlw	0
  3401  0016A8  20F4               	addwfc	prodh,w,c
  3402  0016AA  6E09               	movwf	?_Read_b_eep+1,c
  3403  0016AC  EC70  F024         	call	_Read_b_eep	;wreg free
  3404  0016B0  D969               	call	PL54	;call to abstracted procedure
  3405  0016B2  0E86               	movlw	134
  3406  0016B4  24F3               	addwf	prodl,w,c
  3407  0016B6  6E08               	movwf	?_Read_b_eep,c
  3408  0016B8  0E00               	movlw	0
  3409  0016BA  20F4               	addwfc	prodh,w,c
  3410  0016BC  6E09               	movwf	?_Read_b_eep+1,c
  3411  0016BE  EC70  F024         	call	_Read_b_eep	;wreg free
  3412  0016C2  D932               	call	PL32	;call to abstracted procedure
  3413  0016C4                     l13556:
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 1225: }
  3417                           ;main.c: 1227: if ( ctrlreg & 0x08 ) {
  3418  0016C4  0101               	movlb	1	; () banked
  3419  0016C6  A71B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  3420  0016C8  D022               	goto	l13564
  3421                           
  3422                           ; BSR set to: 1
  3423                           ;main.c: 1228: SendInformationEvent( i,
  3424                           ;main.c: 1229: 20,
  3425                           ;main.c: 1230: 3);
  3426  0016CA  0E14               	movlw	20
  3427  0016CC  D969               	call	PL84	;call to abstracted procedure
  3428  0016CE  ECB2  F021         	call	_SendInformationEvent
  3429  0016D2  D01D               	goto	l13564
  3430  0016D4                     l617:
  3431                           
  3432                           ; BSR set to: 1
  3433                           ;main.c: 1235: else {
  3434                           ;main.c: 1237: if ( ctrlreg & 0x10 ) {
  3435  0016D4  A91B               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  3436  0016D6  D01B               	goto	l13564
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 1238: SendInformationEvent( i, 20,
  3440                           ;main.c: 1239: 4);
  3441  0016D8  0E14               	movlw	20
  3442  0016DA  D970               	call	PL94	;call to abstracted procedure
  3443  0016DC  ECB2  F021         	call	_SendInformationEvent
  3444  0016E0  D016               	goto	l13564
  3445  0016E2                     l13562:
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;main.c: 1247: else {
  3449                           ;main.c: 1249: channel_pulse_timer[ i ] =
  3450                           ;main.c: 1250: Read_b_eep(0x43 + 46 + 0u + 2 * i) * 256 +
  3451                           ;main.c: 1252: Read_b_eep(0x43 + 46 + 1u + 2 * i);
  3452  0016E2  D932               	call	PL36	;call to abstracted procedure
  3453  0016E4  EC70  F024         	call	_Read_b_eep	;wreg free
  3454  0016E8  D94D               	call	PL54	;call to abstracted procedure
  3455  0016EA  0E72               	movlw	114
  3456  0016EC  24F3               	addwf	prodl,w,c
  3457  0016EE  6E08               	movwf	?_Read_b_eep,c
  3458  0016F0  0E00               	movlw	0
  3459  0016F2  20F4               	addwfc	prodh,w,c
  3460  0016F4  6E09               	movwf	?_Read_b_eep+1,c
  3461  0016F6  EC70  F024         	call	_Read_b_eep	;wreg free
  3462  0016FA  0100               	movlb	0	; () banked
  3463  0016FC  27D5               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3464  0016FE  0E00               	movlw	0
  3465  001700  23D6               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3466  001702  0101               	movlb	1	; () banked
  3467  001704  D908               	call	PL28	;call to abstracted procedure
  3468  001706  C0D5  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3469  00170A  C0D6  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3470  00170E                     l13564:
  3471  00170E  0101               	movlb	1	; () banked
  3472  001710  2B1C               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  3473  001712  D635               	goto	l13392
  3474  001714                     l13568:
  3475                           
  3476                           ; BSR set to: 1
  3477                           ;main.c: 1254: }
  3478                           ;main.c: 1256: }
  3479                           ;main.c: 1258: }
  3480                           ;main.c: 1260: }
  3481                           ;main.c: 1264: if ( Read_b_eep(0x43 + 45) ) {
  3482  001714  6A09               	clrf	?_Read_b_eep+1,c
  3483  001716  0E70               	movlw	112
  3484  001718  6E08               	movwf	?_Read_b_eep,c
  3485  00171A  EC70  F024         	call	_Read_b_eep	;wreg free
  3486  00171E  0900               	iorlw	0
  3487  001720  E04E               	bz	l13576
  3488                           
  3489                           ;main.c: 1266: uint8_t data[ 3 ];
  3490                           ;main.c: 1268: data[ 0 ] = 0;
  3491  001722  0101               	movlb	1	; () banked
  3492  001724  6B16               	clrf	doApplicationOneSecondWork@data& (0+255),b
  3493                           
  3494                           ; BSR set to: 1
  3495                           ;main.c: 1269: data[ 1 ] = ( PORTAbits.RA0 << 1 ) +
  3496                           ;main.c: 1270: PORTAbits.RA1;
  3497  001726  3080               	rrcf	3968,w,c	;volatile
  3498  001728  0B01               	andlw	1
  3499  00172A  0100               	movlb	0	; () banked
  3500  00172C  6FD5               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3501  00172E  5080               	movf	3968,w,c	;volatile
  3502  001730  0B01               	andlw	1
  3503  001732  0D02               	mullw	2
  3504  001734  50F3               	movf	prodl,w,c
  3505  001736  25D5               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3506  001738  0101               	movlb	1	; () banked
  3507  00173A  6F17               	movwf	(doApplicationOneSecondWork@data+1)& (0+255),b
  3508                           
  3509                           ;main.c: 1271: data[ 2 ] = ( PORTAbits.RA2 << 7 ) +
  3510                           ;main.c: 1272: ( PORTCbits.RC7 << 6 ) +
  3511                           ;main.c: 1273: ( PORTCbits.RC6 << 5 ) +
  3512                           ;main.c: 1274: ( PORTCbits.RC5 << 4 ) +
  3513                           ;main.c: 1275: ( PORTCbits.RC4 << 3 ) +
  3514                           ;main.c: 1276: ( PORTCbits.RC3 << 2 ) +
  3515                           ;main.c: 1277: ( PORTBbits.RB1 << 1 ) +
  3516                           ;main.c: 1278: PORTBbits.RB0;
  3517  00173C  D92A               	call	PL80	;call to abstracted procedure
  3518  00173E  0D02               	mullw	2
  3519  001740  CFF3 F0D6          	movff	prodl,??_doApplicationOneSecondWork+1
  3520  001744  3082               	rrcf	3970,w,c	;volatile
  3521  001746  32E8               	rrcf	wreg,f,c
  3522  001748  32E8               	rrcf	wreg,f,c
  3523  00174A  0B01               	andlw	1
  3524  00174C  0D04               	mullw	4
  3525  00174E  CFF3 F0D7          	movff	prodl,??_doApplicationOneSecondWork+2
  3526  001752  3882               	swapf	3970,w,c	;volatile
  3527  001754  0B01               	andlw	1
  3528  001756  0D08               	mullw	8
  3529  001758  CFF3 F0D8          	movff	prodl,??_doApplicationOneSecondWork+3
  3530  00175C  3882               	swapf	3970,w,c	;volatile
  3531  00175E  32E8               	rrcf	wreg,f,c
  3532  001760  0B01               	andlw	1
  3533  001762  0D10               	mullw	16
  3534  001764  CFF3 F0D9          	movff	prodl,??_doApplicationOneSecondWork+4
  3535  001768  3882               	swapf	3970,w,c	;volatile
  3536  00176A  32E8               	rrcf	wreg,f,c
  3537  00176C  32E8               	rrcf	wreg,f,c
  3538  00176E  0B01               	andlw	1
  3539  001770  0D20               	mullw	32
  3540  001772  CFF3 F0DA          	movff	prodl,??_doApplicationOneSecondWork+5
  3541  001776  3482               	rlcf	3970,w,c	;volatile
  3542  001778  36E8               	rlcf	wreg,f,c
  3543  00177A  0B01               	andlw	1
  3544  00177C  0D40               	mullw	64
  3545  00177E  CFF3 F0DB          	movff	prodl,??_doApplicationOneSecondWork+6
  3546  001782  3080               	rrcf	3968,w,c	;volatile
  3547  001784  32E8               	rrcf	wreg,f,c
  3548  001786  0B01               	andlw	1
  3549  001788  0D80               	mullw	128
  3550  00178A  50F3               	movf	prodl,w,c
  3551  00178C  25DB               	addwf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3552  00178E  25DA               	addwf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3553  001790  25D9               	addwf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3554  001792  25D8               	addwf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3555  001794  25D7               	addwf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3556  001796  25D6               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3557  001798  25D5               	addwf	??_doApplicationOneSecondWork& (0+255),w,b
  3558  00179A  0101               	movlb	1	; () banked
  3559  00179C  6F18               	movwf	(doApplicationOneSecondWork@data+2)& (0+255),b
  3560                           
  3561                           ; BSR set to: 1
  3562                           ;main.c: 1281: sendVSCPFrame( 15,
  3563                           ;main.c: 1282: 1,
  3564                           ;main.c: 1283: vscp_nickname,
  3565                           ;main.c: 1284: 0x03,
  3566                           ;main.c: 1285: 3,
  3567                           ;main.c: 1286: data );
  3568  00179E  6A40               	clrf	?_sendVSCPFrame+1,c
  3569  0017A0  0E0F               	movlw	15
  3570  0017A2  6E3F               	movwf	?_sendVSCPFrame,c
  3571  0017A4  0E01               	movlw	1
  3572  0017A6  6E41               	movwf	?_sendVSCPFrame+2,c
  3573  0017A8  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3574  0017AC  0E03               	movlw	3
  3575  0017AE  6E43               	movwf	?_sendVSCPFrame+4,c
  3576  0017B0  6E44               	movwf	?_sendVSCPFrame+5,c
  3577  0017B2  0E01               	movlw	high doApplicationOneSecondWork@data
  3578  0017B4  6E46               	movwf	?_sendVSCPFrame+7,c
  3579  0017B6  0E16               	movlw	low doApplicationOneSecondWork@data
  3580  0017B8  6E45               	movwf	?_sendVSCPFrame+6,c
  3581  0017BA  EC94  F020         	call	_sendVSCPFrame	;wreg free
  3582  0017BE                     l13576:
  3583                           
  3584                           ;main.c: 1287: }
  3585                           ;main.c: 1290: current_iostate = ( PORTAbits.RA0 << 9 ) +
  3586                           ;main.c: 1291: ( PORTAbits.RA1 << 8 ) +
  3587                           ;main.c: 1292: ( PORTAbits.RA2 << 7 ) +
  3588                           ;main.c: 1293: ( PORTCbits.RC7 << 6 ) +
  3589                           ;main.c: 1294: ( PORTCbits.RC6 << 5 ) +
  3590                           ;main.c: 1295: ( PORTCbits.RC5 << 4 ) +
  3591                           ;main.c: 1296: ( PORTCbits.RC4 << 3 ) +
  3592                           ;main.c: 1297: ( PORTCbits.RC3 << 2 ) +
  3593                           ;main.c: 1298: ( PORTBbits.RB1 << 1 ) +
  3594                           ;main.c: 1299: PORTBbits.RB0;
  3595  0017BE  D8E9               	call	PL80	;call to abstracted procedure
  3596  0017C0  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3597  0017C2  90D8               	bcf	status,0,c
  3598  0017C4  35D6               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3599  0017C6  6FD7               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3600  0017C8  6BD8               	clrf	(??_doApplicationOneSecondWork+3)& (0+255),b
  3601  0017CA  37D8               	rlcf	(??_doApplicationOneSecondWork+3)& (0+255),f,b
  3602  0017CC  3082               	rrcf	3970,w,c	;volatile
  3603  0017CE  32E8               	rrcf	wreg,f,c
  3604  0017D0  32E8               	rrcf	wreg,f,c
  3605  0017D2  0B01               	andlw	1
  3606  0017D4  6FD9               	movwf	(??_doApplicationOneSecondWork+4)& (0+255),b
  3607  0017D6  6BDA               	clrf	(??_doApplicationOneSecondWork+5)& (0+255),b
  3608  0017D8  90D8               	bcf	status,0,c
  3609  0017DA  37D9               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3610  0017DC  37DA               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3611  0017DE  90D8               	bcf	status,0,c
  3612  0017E0  37D9               	rlcf	(??_doApplicationOneSecondWork+4)& (0+255),f,b
  3613  0017E2  37DA               	rlcf	(??_doApplicationOneSecondWork+5)& (0+255),f,b
  3614  0017E4  3882               	swapf	3970,w,c	;volatile
  3615  0017E6  0B01               	andlw	1
  3616  0017E8  6FDB               	movwf	(??_doApplicationOneSecondWork+6)& (0+255),b
  3617  0017EA  6BDC               	clrf	(??_doApplicationOneSecondWork+7)& (0+255),b
  3618  0017EC  90D8               	bcf	status,0,c
  3619  0017EE  37DB               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3620  0017F0  37DC               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3621  0017F2  90D8               	bcf	status,0,c
  3622  0017F4  37DB               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3623  0017F6  37DC               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3624  0017F8  90D8               	bcf	status,0,c
  3625  0017FA  37DB               	rlcf	(??_doApplicationOneSecondWork+6)& (0+255),f,b
  3626  0017FC  37DC               	rlcf	(??_doApplicationOneSecondWork+7)& (0+255),f,b
  3627  0017FE  3882               	swapf	3970,w,c	;volatile
  3628  001800  32E8               	rrcf	wreg,f,c
  3629  001802  0B01               	andlw	1
  3630  001804  6FDD               	movwf	(??_doApplicationOneSecondWork+8)& (0+255),b
  3631  001806  6BDE               	clrf	(??_doApplicationOneSecondWork+9)& (0+255),b
  3632  001808  3BDD               	swapf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3633  00180A  3BDE               	swapf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3634  00180C  0EF0               	movlw	240
  3635  00180E  17DE               	andwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3636  001810  51DD               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3637  001812  0B0F               	andlw	15
  3638  001814  13DE               	iorwf	(??_doApplicationOneSecondWork+9)& (0+255),f,b
  3639  001816  0EF0               	movlw	240
  3640  001818  17DD               	andwf	(??_doApplicationOneSecondWork+8)& (0+255),f,b
  3641  00181A  3882               	swapf	3970,w,c	;volatile
  3642  00181C  32E8               	rrcf	wreg,f,c
  3643  00181E  32E8               	rrcf	wreg,f,c
  3644  001820  0B01               	andlw	1
  3645  001822  6FDF               	movwf	(??_doApplicationOneSecondWork+10)& (0+255),b
  3646  001824  6BE0               	clrf	(??_doApplicationOneSecondWork+11)& (0+255),b
  3647  001826  0E05               	movlw	5
  3648  001828                     u17655:
  3649  001828  90D8               	bcf	status,0,c
  3650  00182A  37DF               	rlcf	(??_doApplicationOneSecondWork+10)& (0+255),f,b
  3651  00182C  37E0               	rlcf	(??_doApplicationOneSecondWork+11)& (0+255),f,b
  3652  00182E  2EE8               	decfsz	wreg,f,c
  3653  001830  D7FB               	goto	u17655
  3654  001832  3482               	rlcf	3970,w,c	;volatile
  3655  001834  36E8               	rlcf	wreg,f,c
  3656  001836  0B01               	andlw	1
  3657  001838  6FE1               	movwf	(??_doApplicationOneSecondWork+12)& (0+255),b
  3658  00183A  6BE2               	clrf	(??_doApplicationOneSecondWork+13)& (0+255),b
  3659  00183C  0E06               	movlw	6
  3660  00183E                     u17665:
  3661  00183E  90D8               	bcf	status,0,c
  3662  001840  37E1               	rlcf	(??_doApplicationOneSecondWork+12)& (0+255),f,b
  3663  001842  37E2               	rlcf	(??_doApplicationOneSecondWork+13)& (0+255),f,b
  3664  001844  2EE8               	decfsz	wreg,f,c
  3665  001846  D7FB               	goto	u17665
  3666  001848  3080               	rrcf	3968,w,c	;volatile
  3667  00184A  32E8               	rrcf	wreg,f,c
  3668  00184C  0B01               	andlw	1
  3669  00184E  6FE3               	movwf	(??_doApplicationOneSecondWork+14)& (0+255),b
  3670  001850  6BE4               	clrf	(??_doApplicationOneSecondWork+15)& (0+255),b
  3671  001852  0E07               	movlw	7
  3672  001854                     u17675:
  3673  001854  90D8               	bcf	status,0,c
  3674  001856  37E3               	rlcf	(??_doApplicationOneSecondWork+14)& (0+255),f,b
  3675  001858  37E4               	rlcf	(??_doApplicationOneSecondWork+15)& (0+255),f,b
  3676  00185A  2EE8               	decfsz	wreg,f,c
  3677  00185C  D7FB               	goto	u17675
  3678  00185E  3080               	rrcf	3968,w,c	;volatile
  3679  001860  0B01               	andlw	1
  3680  001862  6FE6               	movwf	(??_doApplicationOneSecondWork+17)& (0+255),b
  3681  001864  6BE5               	clrf	(??_doApplicationOneSecondWork+16)& (0+255),b
  3682  001866  5080               	movf	3968,w,c	;volatile
  3683  001868  0B01               	andlw	1
  3684  00186A  6FE7               	movwf	(??_doApplicationOneSecondWork+18)& (0+255),b
  3685  00186C  6BE8               	clrf	(??_doApplicationOneSecondWork+19)& (0+255),b
  3686  00186E  0E09               	movlw	9
  3687  001870                     u17685:
  3688  001870  90D8               	bcf	status,0,c
  3689  001872  37E7               	rlcf	(??_doApplicationOneSecondWork+18)& (0+255),f,b
  3690  001874  37E8               	rlcf	(??_doApplicationOneSecondWork+19)& (0+255),f,b
  3691  001876  2EE8               	decfsz	wreg,f,c
  3692  001878  D7FB               	goto	u17685
  3693  00187A  51E5               	movf	(??_doApplicationOneSecondWork+16)& (0+255),w,b
  3694  00187C  25E7               	addwf	(??_doApplicationOneSecondWork+18)& (0+255),w,b
  3695  00187E  6FE9               	movwf	(??_doApplicationOneSecondWork+20)& (0+255),b
  3696  001880  51E6               	movf	(??_doApplicationOneSecondWork+17)& (0+255),w,b
  3697  001882  21E8               	addwfc	(??_doApplicationOneSecondWork+19)& (0+255),w,b
  3698  001884  6FEA               	movwf	(??_doApplicationOneSecondWork+21)& (0+255),b
  3699  001886  51E3               	movf	(??_doApplicationOneSecondWork+14)& (0+255),w,b
  3700  001888  25E9               	addwf	(??_doApplicationOneSecondWork+20)& (0+255),w,b
  3701  00188A  6FEB               	movwf	(??_doApplicationOneSecondWork+22)& (0+255),b
  3702  00188C  51E4               	movf	(??_doApplicationOneSecondWork+15)& (0+255),w,b
  3703  00188E  21EA               	addwfc	(??_doApplicationOneSecondWork+21)& (0+255),w,b
  3704  001890  6FEC               	movwf	(??_doApplicationOneSecondWork+23)& (0+255),b
  3705  001892  51E1               	movf	(??_doApplicationOneSecondWork+12)& (0+255),w,b
  3706  001894  25EB               	addwf	(??_doApplicationOneSecondWork+22)& (0+255),w,b
  3707  001896  6FED               	movwf	(??_doApplicationOneSecondWork+24)& (0+255),b
  3708  001898  51E2               	movf	(??_doApplicationOneSecondWork+13)& (0+255),w,b
  3709  00189A  21EC               	addwfc	(??_doApplicationOneSecondWork+23)& (0+255),w,b
  3710  00189C  6FEE               	movwf	(??_doApplicationOneSecondWork+25)& (0+255),b
  3711  00189E  51DF               	movf	(??_doApplicationOneSecondWork+10)& (0+255),w,b
  3712  0018A0  25ED               	addwf	(??_doApplicationOneSecondWork+24)& (0+255),w,b
  3713  0018A2  6FEF               	movwf	(??_doApplicationOneSecondWork+26)& (0+255),b
  3714  0018A4  51E0               	movf	(??_doApplicationOneSecondWork+11)& (0+255),w,b
  3715  0018A6  21EE               	addwfc	(??_doApplicationOneSecondWork+25)& (0+255),w,b
  3716  0018A8  6FF0               	movwf	(??_doApplicationOneSecondWork+27)& (0+255),b
  3717  0018AA  51DD               	movf	(??_doApplicationOneSecondWork+8)& (0+255),w,b
  3718  0018AC  25EF               	addwf	(??_doApplicationOneSecondWork+26)& (0+255),w,b
  3719  0018AE  6FF1               	movwf	(??_doApplicationOneSecondWork+28)& (0+255),b
  3720  0018B0  51DE               	movf	(??_doApplicationOneSecondWork+9)& (0+255),w,b
  3721  0018B2  21F0               	addwfc	(??_doApplicationOneSecondWork+27)& (0+255),w,b
  3722  0018B4  6FF2               	movwf	(??_doApplicationOneSecondWork+29)& (0+255),b
  3723  0018B6  51DB               	movf	(??_doApplicationOneSecondWork+6)& (0+255),w,b
  3724  0018B8  25F1               	addwf	(??_doApplicationOneSecondWork+28)& (0+255),w,b
  3725  0018BA  6FF3               	movwf	(??_doApplicationOneSecondWork+30)& (0+255),b
  3726  0018BC  51DC               	movf	(??_doApplicationOneSecondWork+7)& (0+255),w,b
  3727  0018BE  21F2               	addwfc	(??_doApplicationOneSecondWork+29)& (0+255),w,b
  3728  0018C0  6FF4               	movwf	(??_doApplicationOneSecondWork+31)& (0+255),b
  3729  0018C2  51D9               	movf	(??_doApplicationOneSecondWork+4)& (0+255),w,b
  3730  0018C4  25F3               	addwf	(??_doApplicationOneSecondWork+30)& (0+255),w,b
  3731  0018C6  6FF5               	movwf	(??_doApplicationOneSecondWork+32)& (0+255),b
  3732  0018C8  51DA               	movf	(??_doApplicationOneSecondWork+5)& (0+255),w,b
  3733  0018CA  21F4               	addwfc	(??_doApplicationOneSecondWork+31)& (0+255),w,b
  3734  0018CC  6FF6               	movwf	(??_doApplicationOneSecondWork+33)& (0+255),b
  3735  0018CE  51D7               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3736  0018D0  25F5               	addwf	(??_doApplicationOneSecondWork+32)& (0+255),w,b
  3737  0018D2  6FF7               	movwf	(??_doApplicationOneSecondWork+34)& (0+255),b
  3738  0018D4  51D8               	movf	(??_doApplicationOneSecondWork+3)& (0+255),w,b
  3739  0018D6  21F6               	addwfc	(??_doApplicationOneSecondWork+33)& (0+255),w,b
  3740  0018D8  6FF8               	movwf	(??_doApplicationOneSecondWork+35)& (0+255),b
  3741  0018DA  51D5               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  3742  0018DC  25F7               	addwf	(??_doApplicationOneSecondWork+34)& (0+255),w,b
  3743  0018DE  6F6A               	movwf	_current_iostate& (0+255),b
  3744  0018E0  0E00               	movlw	0
  3745  0018E2  21F8               	addwfc	(??_doApplicationOneSecondWork+35)& (0+255),w,b
  3746  0018E4  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  3747                           
  3748                           ; BSR set to: 0
  3749  0018E6  0012               	return	
  3750  0018E8                     __end_of_doApplicationOneSecondWork:
  3751                           	opt stack 0
  3752  0018E8                     PL16:
  3753                           	opt stack 21
  3754  0018E8  0E01               	movlw	1
  3755  0018EA  0100               	movlb	0	; () banked
  3756  0018EC  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3757  0018EE  6BD7               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3758  0018F0  2BD5               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3759  0018F2  D003               	goto	u17224
  3760  0018F4                     u17225:
  3761  0018F4  90D8               	bcf	status,0,c
  3762  0018F6  37D6               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3763  0018F8  37D7               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3764  0018FA                     u17224:
  3765  0018FA  2FD5               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  3766  0018FC  D7FB               	goto	u17225
  3767  0018FE  516A               	movf	_current_iostate& (0+255),w,b
  3768  001900  17D6               	andwf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3769  001902  516B               	movf	(_current_iostate+1)& (0+255),w,b
  3770  001904  17D7               	andwf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3771  001906  51D7               	movf	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  3772  001908  11D6               	iorwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  3773  00190A  0012               	return	
  3774  00190C                     __end_ofPL16:
  3775                           	opt stack 0
  3776  00190C                     PL18:
  3777                           	opt stack 21
  3778  00190C  0100               	movlb	0	; () banked
  3779  00190E  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3780  001910  6BD7               	clrf	(??_doApplicationOneSecondWork+2)& (0+255),b
  3781  001912  2BD5               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  3782  001914  0012               	return	
  3783  001916                     __end_ofPL18:
  3784                           	opt stack 0
  3785  001916                     PL28:
  3786                           	opt stack 21
  3787  001916  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3788  001918  0D02               	mullw	2
  3789  00191A  0E00               	movlw	low _channel_pulse_timer
  3790  00191C  24F3               	addwf	prodl,w,c
  3791  00191E  6ED9               	movwf	fsr2l,c
  3792  001920  0E01               	movlw	high _channel_pulse_timer
  3793  001922  20F4               	addwfc	prodh,w,c
  3794  001924  6EDA               	movwf	fsr2h,c
  3795  001926  0012               	return	
  3796  001928                     __end_ofPL28:
  3797                           	opt stack 0
  3798  001928                     PL32:
  3799                           	opt stack 21
  3800  001928  0100               	movlb	0	; () banked
  3801  00192A  27D5               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  3802  00192C  0E00               	movlw	0
  3803  00192E  23D6               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3804  001930  0101               	movlb	1	; () banked
  3805  001932  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3806  001934  0D02               	mullw	2
  3807  001936  50F3               	movf	prodl,w,c
  3808  001938  0F83               	addlw	low _channel_protection_timer
  3809  00193A  6ED9               	movwf	fsr2l,c
  3810  00193C  6ADA               	clrf	fsr2h,c
  3811  00193E  C0D5  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  3812  001942  C0D6  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  3813  001946  0012               	return	
  3814  001948                     __end_ofPL32:
  3815                           	opt stack 0
  3816  001948                     PL36:
  3817                           	opt stack 21
  3818  001948  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3819  00194A  0D02               	mullw	2
  3820  00194C  0E71               	movlw	113
  3821  00194E  24F3               	addwf	prodl,w,c
  3822  001950  6E08               	movwf	?_Read_b_eep,c
  3823  001952  0E00               	movlw	0
  3824  001954  20F4               	addwfc	prodh,w,c
  3825  001956  6E09               	movwf	?_Read_b_eep+1,c
  3826  001958  0012               	return	
  3827  00195A                     __end_ofPL36:
  3828                           	opt stack 0
  3829  00195A                     PL38:
  3830                           	opt stack 21
  3831  00195A  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3832  00195C  0D02               	mullw	2
  3833  00195E  50F3               	movf	prodl,w,c
  3834  001960  0F83               	addlw	low _channel_protection_timer
  3835  001962  6ED9               	movwf	fsr2l,c
  3836  001964  6ADA               	clrf	fsr2h,c
  3837  001966  0012               	return	
  3838  001968                     __end_ofPL38:
  3839                           	opt stack 0
  3840  001968                     PL42:
  3841                           	opt stack 21
  3842  001968  0101               	movlb	1	; () banked
  3843  00196A  251C               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3844  00196C  6E08               	movwf	?_Read_b_eep,c
  3845  00196E  6A09               	clrf	?_Read_b_eep+1,c
  3846  001970  0E00               	movlw	0
  3847  001972  2209               	addwfc	?_Read_b_eep+1,f,c
  3848  001974  0C00               	retlw	0
  3849  001976                     __end_ofPL42:
  3850                           	opt stack 0
  3851  001976                     PL52:
  3852                           	opt stack 21
  3853  001976  0100               	movlb	0	; () banked
  3854  001978  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3855  00197A  0E02               	movlw	2
  3856  00197C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3857  00197E  0101               	movlb	1	; () banked
  3858  001980  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3859  001982  0012               	return	
  3860  001984                     __end_ofPL52:
  3861                           	opt stack 0
  3862  001984                     PL54:
  3863                           	opt stack 21
  3864  001984  0100               	movlb	0	; () banked
  3865  001986  6FD6               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  3866  001988  6BD5               	clrf	??_doApplicationOneSecondWork& (0+255),b
  3867  00198A  0101               	movlb	1	; () banked
  3868  00198C  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3869  00198E  0D02               	mullw	2
  3870  001990  0012               	return	
  3871  001992                     __end_ofPL54:
  3872                           	opt stack 0
  3873  001992                     PL80:
  3874                           	opt stack 21
  3875  001992  5081               	movf	3969,w,c	;volatile
  3876  001994  0B01               	andlw	1
  3877  001996  0100               	movlb	0	; () banked
  3878  001998  6FD5               	movwf	??_doApplicationOneSecondWork& (0+255),b
  3879  00199A  3081               	rrcf	3969,w,c	;volatile
  3880  00199C  0B01               	andlw	1
  3881  00199E  0012               	return	
  3882  0019A0                     __end_ofPL80:
  3883                           	opt stack 0
  3884  0019A0                     PL84:
  3885                           	opt stack 21
  3886  0019A0  0100               	movlb	0	; () banked
  3887  0019A2  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3888  0019A4  0E03               	movlw	3
  3889  0019A6  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3890  0019A8  0101               	movlb	1	; () banked
  3891  0019AA  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3892  0019AC  0012               	return	
  3893  0019AE                     __end_ofPL84:
  3894                           	opt stack 0
  3895  0019AE                     PL92:
  3896                           	opt stack 21
  3897  0019AE  0E5B               	movlw	91
  3898  0019B0  251C               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  3899  0019B2  6E08               	movwf	?_Read_b_eep,c
  3900  0019B4  6A09               	clrf	?_Read_b_eep+1,c
  3901  0019B6  0E00               	movlw	0
  3902  0019B8  2209               	addwfc	?_Read_b_eep+1,f,c
  3903  0019BA  0C00               	retlw	0
  3904  0019BC                     __end_ofPL92:
  3905                           	opt stack 0
  3906  0019BC                     PL94:
  3907                           	opt stack 21
  3908  0019BC  0100               	movlb	0	; () banked
  3909  0019BE  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  3910  0019C0  0E04               	movlw	4
  3911  0019C2  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3912  0019C4  0101               	movlb	1	; () banked
  3913  0019C6  511C               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  3914  0019C8  0012               	return	
  3915  0019CA                     __end_ofPL94:
  3916                           	opt stack 0
  3917  0019CA                     PL114:
  3918                           	opt stack 21
  3919  0019CA  90D8               	bcf	status,0,c
  3920  0019CC  37D6               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  3921  0019CE  37D7               	rlcf	(??_doApplicationOneSecondWork+2)& (0+255),f,b
  3922  0019D0  0012               	return	
  3923  0019D2                     __end_ofPL114:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           indf1	equ	0xFE7
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           plusw2	equ	0xFDB
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function _vscp_doOneSecondWork *****************
  3947 ;; Defined at:
  3948 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;		None
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;		None               void
  3955 ;; Registers used:
  3956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : F/0
  3959 ;;		On exit  : F/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3962 ;;      Params:         0       0       0       0       0       0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0
  3964 ;;      Temps:          1       0       0       0       0       0       0
  3965 ;;      Totals:         1       0       0       0       0       0       0
  3966 ;;Total ram usage:        1 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    8
  3969 ;; This function calls:
  3970 ;;		_vscp_getZone
  3971 ;;		_vscp_getSubzone
  3972 ;;		_vscp_sendHeartBeat
  3973 ;; This function is called by:
  3974 ;;		_main
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text3
  3979  0043B4                     __ptext3:
  3980                           	opt stack 0
  3981  0043B4                     _vscp_doOneSecondWork:
  3982                           	opt stack 21
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;vscp_firmware.c: 526: ++vscp_second;
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;incstack = 0
  3989                           ;incstack = 0
  3990  0043B4  2B82               	incf	_vscp_second& (0+255),f,b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  3994  0043B6  0E3B               	movlw	59
  3995  0043B8  6582               	cpfsgt	_vscp_second& (0+255),b
  3996  0043BA  D00D               	goto	l13368
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;vscp_firmware.c: 529: vscp_second = 0;
  4000  0043BC  6B82               	clrf	_vscp_second& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;vscp_firmware.c: 530: vscp_minute++;
  4004  0043BE  2B7D               	incf	_vscp_minute& (0+255),f,b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  4008  0043C0  517F               	movf	_vscp_node_state& (0+255),w,b
  4009  0043C2  0A03               	xorlw	3
  4010  0043C4  E108               	bnz	l13368
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  4014                           ;vscp_firmware.c: 535: vscp_getSubzone());
  4015  0043C6  EC82  F024         	call	_vscp_getSubzone	;wreg free
  4016  0043CA  0100               	movlb	0	; () banked
  4017  0043CC  6FD0               	movwf	?_vscp_sendHeartBeat& (0+255),b
  4018  0043CE  EC87  F024         	call	_vscp_getZone	;wreg free
  4019  0043D2  EC38  F023         	call	_vscp_sendHeartBeat
  4020  0043D6                     l13368:
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;vscp_firmware.c: 536: }
  4024                           ;vscp_firmware.c: 537: }
  4025                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  4026  0043D6  0E3B               	movlw	59
  4027  0043D8  657D               	cpfsgt	_vscp_minute& (0+255),b
  4028  0043DA  D002               	goto	l13374
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;vscp_firmware.c: 540: vscp_minute = 0;
  4032  0043DC  6B7D               	clrf	_vscp_minute& (0+255),b
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;vscp_firmware.c: 541: vscp_hour++;
  4036  0043DE  2B7B               	incf	_vscp_hour& (0+255),f,b
  4037  0043E0                     l13374:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;vscp_firmware.c: 542: }
  4041                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  4042  0043E0  0E17               	movlw	23
  4043  0043E2  657B               	cpfsgt	_vscp_hour& (0+255),b
  4044  0043E4  D001               	goto	l13378
  4045                           
  4046                           ; BSR set to: 0
  4047  0043E6  6B7B               	clrf	_vscp_hour& (0+255),b
  4048  0043E8                     l13378:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  4052  0043E8  517F               	movf	_vscp_node_state& (0+255),w,b
  4053  0043EA  0A03               	xorlw	3
  4054  0043EC  E109               	bnz	l1327
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  4058  0043EE  2B7A               	incf	_vscp_guid_reset& (0+255),f,b
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  4062  0043F0  C07A  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  4063  0043F4  0E0F               	movlw	15
  4064  0043F6  164D               	andwf	??_vscp_doOneSecondWork,f,c
  4065  0043F8  0E02               	movlw	2
  4066  0043FA  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  4067  0043FC  B0D8               	btfsc	status,0,c
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  4071  0043FE  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  4072  004400                     l1327:
  4073                           
  4074                           ; BSR set to: 0
  4075  004400  0012               	return	
  4076  004402                     __end_of_vscp_doOneSecondWork:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           intcon2	equ	0xFF1
  4086                           postinc0	equ	0xFEE
  4087                           wreg	equ	0xFE8
  4088                           indf1	equ	0xFE7
  4089                           fsr1h	equ	0xFE2
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           plusw2	equ	0xFDB
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _vscp_sendHeartBeat *****************
  4100 ;; Defined at:
  4101 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  zone            1    wreg     unsigned char 
  4104 ;;  subzone         1   20[BANK0 ] unsigned char 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  zone            1   75[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;		None               void
  4109 ;; Registers used:
  4110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : F/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4116 ;;      Params:         0       1       0       0       0       0       0
  4117 ;;      Locals:         1       0       0       0       0       0       0
  4118 ;;      Temps:          0       0       0       0       0       0       0
  4119 ;;      Totals:         1       1       0       0       0       0       0
  4120 ;;Total ram usage:        2 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    7
  4123 ;; This function calls:
  4124 ;;		_vscp_sendEvent
  4125 ;; This function is called by:
  4126 ;;		_vscp_doOneSecondWork
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text4
  4131  004670                     __ptext4:
  4132                           	opt stack 0
  4133  004670                     _vscp_sendHeartBeat:
  4134                           	opt stack 21
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;incstack = 0
  4138                           ;incstack = 0
  4139                           ;vscp_sendHeartBeat@zone stored from wreg
  4140  004670  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  4141                           
  4142                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4143  004674  0E83               	movlw	131
  4144  004676  0100               	movlb	0	; () banked
  4145  004678  6FA5               	movwf	_vscp_omsg& (0+255),b
  4146                           
  4147                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4148  00467A  0E07               	movlw	7
  4149  00467C  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  4150                           
  4151                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4152  00467E  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  4153  004680  0E14               	movlw	20
  4154  004682  6FA7               	movwf	(_vscp_omsg+2)& (0+255),b
  4155                           
  4156                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4157  004684  0E09               	movlw	9
  4158  004686  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4162  004688  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  4166  00468A  C04C  F0AB         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  4170  00468E  C0D0  F0AC         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;vscp_firmware.c: 388: vscp_sendEvent();
  4174  004692  EF71  F023         	goto	_vscp_sendEvent	;wreg free
  4175  004696                     __end_of_vscp_sendHeartBeat:
  4176                           	opt stack 0
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           intcon	equ	0xFF2
  4184                           intcon2	equ	0xFF1
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           indf1	equ	0xFE7
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           plusw2	equ	0xFDB
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _vscp_getSubzone *****************
  4199 ;; Defined at:
  4200 ;;		line 1403 in file "../main.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : F/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4214 ;;      Params:         0       0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0
  4217 ;;      Totals:         0       0       0       0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		_Read_b_eep
  4223 ;; This function is called by:
  4224 ;;		_vscp_doOneSecondWork
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text5
  4229  004904                     __ptext5:
  4230                           	opt stack 0
  4231  004904                     _vscp_getSubzone:
  4232                           	opt stack 25
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;main.c: 1404: return Read_b_eep(0x43 + 1);
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;incstack = 0
  4239                           ;incstack = 0
  4240  004904  6A09               	clrf	?_Read_b_eep+1,c
  4241  004906  0E44               	movlw	68
  4242  004908  6E08               	movwf	?_Read_b_eep,c
  4243  00490A  EF70  F024         	goto	_Read_b_eep	;wreg free
  4244  00490E                     __end_of_vscp_getSubzone:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           intcon2	equ	0xFF1
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           indf1	equ	0xFE7
  4257                           fsr1h	equ	0xFE2
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           postdec2	equ	0xFDD
  4262                           plusw2	equ	0xFDB
  4263                           fsr2h	equ	0xFDA
  4264                           fsr2l	equ	0xFD9
  4265                           status	equ	0xFD8
  4266                           
  4267 ;; *************** function _vscp_getZone *****************
  4268 ;; Defined at:
  4269 ;;		line 1394 in file "../main.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      unsigned char 
  4276 ;; Registers used:
  4277 ;;		wreg, status,2, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : F/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4283 ;;      Params:         0       0       0       0       0       0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0
  4286 ;;      Totals:         0       0       0       0       0       0       0
  4287 ;;Total ram usage:        0 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    3
  4290 ;; This function calls:
  4291 ;;		_Read_b_eep
  4292 ;; This function is called by:
  4293 ;;		_vscp_doOneSecondWork
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text6
  4298  00490E                     __ptext6:
  4299                           	opt stack 0
  4300  00490E                     _vscp_getZone:
  4301                           	opt stack 25
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;main.c: 1395: return Read_b_eep(0x43 + 0);
  4305                           
  4306                           ;incstack = 0
  4307                           ;incstack = 0
  4308  00490E  6A09               	clrf	?_Read_b_eep+1,c
  4309  004910  0E43               	movlw	67
  4310  004912  6E08               	movwf	?_Read_b_eep,c
  4311  004914  EF70  F024         	goto	_Read_b_eep	;wreg free
  4312  004918                     __end_of_vscp_getZone:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           intcon2	equ	0xFF1
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           indf1	equ	0xFE7
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           plusw2	equ	0xFDB
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _vscp_error *****************
  4336 ;; Defined at:
  4337 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		None
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4351 ;;      Params:         0       0       0       0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    2
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text7
  4366  00494E                     __ptext7:
  4367                           	opt stack 0
  4368  00494E                     _vscp_error:
  4369                           	opt stack 27
  4370                           
  4371                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  4372                           
  4373                           ;incstack = 0
  4374                           ;incstack = 0
  4375  00494E  6A56               	clrf	_vscp_initledfunc,c
  4376  004950  0012               	return	
  4377  004952                     __end_of_vscp_error:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           intcon2	equ	0xFF1
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           indf1	equ	0xFE7
  4390                           fsr1h	equ	0xFE2
  4391                           fsr1l	equ	0xFE1
  4392                           indf2	equ	0xFDF
  4393                           postinc2	equ	0xFDE
  4394                           postdec2	equ	0xFDD
  4395                           plusw2	equ	0xFDB
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _doDM *****************
  4401 ;; Defined at:
  4402 ;;		line 2529 in file "../main.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  class_mask      2   33[BANK0 ] unsigned short 
  4407 ;;  class_filter    2   31[BANK0 ] unsigned short 
  4408 ;;  i               1   43[BANK0 ] unsigned char 
  4409 ;;  dmflags         1   42[BANK0 ] unsigned char 
  4410 ;;  type_mask       1   36[BANK0 ] unsigned char 
  4411 ;;  type_filter     1   35[BANK0 ] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : F/0
  4418 ;;		On exit  : F/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4421 ;;      Params:         0       0       0       0       0       0       0
  4422 ;;      Locals:         0      13       0       0       0       0       0
  4423 ;;      Temps:          0       3       0       0       0       0       0
  4424 ;;      Totals:         0      16       0       0       0       0       0
  4425 ;;Total ram usage:       16 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    8
  4428 ;; This function calls:
  4429 ;;		_Read_b_eep
  4430 ;;		_doActionOff
  4431 ;;		_doActionOn
  4432 ;;		_doActionPulse
  4433 ;;		_doActionStatus
  4434 ;;		_doActionToggle
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text8
  4441  00322C                     __ptext8:
  4442                           	opt stack 0
  4443  00322C                     _doDM:
  4444                           	opt stack 21
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;main.c: 2530: unsigned char i;
  4448                           ;main.c: 2531: unsigned char dmflags;
  4449                           ;main.c: 2532: unsigned short class_filter;
  4450                           ;main.c: 2533: unsigned short class_mask;
  4451                           ;main.c: 2534: unsigned char type_filter;
  4452                           ;main.c: 2535: unsigned char type_mask;
  4453                           ;main.c: 2538: if ( 0 == vscp_imsg.vscp_class ) return;
  4454                           
  4455                           ;incstack = 0
  4456                           ;incstack = 0
  4457  00322C  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  4458  00322E  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  4459  003230  E101 D0E5          	bz	l861
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 2540: for (i = 0; i < 8; i++) {
  4463  003234  6BE7               	clrf	doDM@i& (0+255),b
  4464  003236                     l13296:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 2543: dmflags = Read_b_eep(0x43 + 46 + 40u + 0 + 1 + (8 * i));
  4468  003236  51E7               	movf	doDM@i& (0+255),w,b
  4469  003238  D8ED               	call	PL50	;call to abstracted procedure
  4470  00323A  0E9A               	movlw	154
  4471  00323C  25D8               	addwf	??_doDM& (0+255),w,b
  4472  00323E  6E08               	movwf	?_Read_b_eep,c
  4473  003240  0E00               	movlw	0
  4474  003242  21D9               	addwfc	(??_doDM+1)& (0+255),w,b
  4475  003244  6E09               	movwf	?_Read_b_eep+1,c
  4476  003246  EC70  F024         	call	_Read_b_eep	;wreg free
  4477  00324A  0100               	movlb	0	; () banked
  4478  00324C  6FE6               	movwf	doDM@dmflags& (0+255),b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;main.c: 2546: if ( dmflags & 0x80 ) {
  4482  00324E  AFE6               	btfss	doDM@dmflags& (0+255),7,b
  4483  003250  D0D1               	goto	l13350
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;main.c: 2549: if ( ( dmflags & 0x40 ) &&
  4487                           ;main.c: 2550: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i)) ) ) {
  4488  003252  ADE6               	btfss	doDM@dmflags& (0+255),6,b
  4489  003254  D00E               	goto	l865
  4490                           
  4491                           ; BSR set to: 0
  4492  003256  51E7               	movf	doDM@i& (0+255),w,b
  4493  003258  D8DD               	call	PL50	;call to abstracted procedure
  4494  00325A  0E99               	movlw	153
  4495  00325C  25D8               	addwf	??_doDM& (0+255),w,b
  4496  00325E  6E08               	movwf	?_Read_b_eep,c
  4497  003260  0E00               	movlw	0
  4498  003262  21D9               	addwfc	(??_doDM+1)& (0+255),w,b
  4499  003264  6E09               	movwf	?_Read_b_eep+1,c
  4500  003266  EC70  F024         	call	_Read_b_eep	;wreg free
  4501  00326A  0100               	movlb	0	; () banked
  4502  00326C  199C               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  4503  00326E  E001 D0C1          	bnz	l13350
  4504  003272                     l865:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;main.c: 2552: }
  4508                           ;main.c: 2555: if ( dmflags & 0x10 ) {
  4509  003272  A9E6               	btfss	doDM@dmflags& (0+255),4,b
  4510  003274  D00B               	goto	l867
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;main.c: 2556: if ( 255 != vscp_imsg.data[ 1 ] ) {
  4514  003276  299E               	incf	(_vscp_imsg+7)& (0+255),w,b
  4515  003278  E009               	bz	l867
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;main.c: 2557: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 0) ) {
  4519  00327A  6A09               	clrf	?_Read_b_eep+1,c
  4520  00327C  0E43               	movlw	67
  4521  00327E  6E08               	movwf	?_Read_b_eep,c
  4522  003280  EC70  F024         	call	_Read_b_eep	;wreg free
  4523  003284  0100               	movlb	0	; () banked
  4524  003286  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4525  003288  E001 D0B4          	bnz	l13350
  4526  00328C                     l867:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;main.c: 2559: }
  4530                           ;main.c: 2560: }
  4531                           ;main.c: 2561: }
  4532                           ;main.c: 2564: if ( dmflags & 0x08 ) {
  4533  00328C  A7E6               	btfss	doDM@dmflags& (0+255),3,b
  4534  00328E  D00B               	goto	l13318
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;main.c: 2565: if ( 255 != vscp_imsg.data[ 1 ] ) {
  4538  003290  299E               	incf	(_vscp_imsg+7)& (0+255),w,b
  4539  003292  E009               	bz	l13318
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;main.c: 2566: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 1) ) {
  4543  003294  6A09               	clrf	?_Read_b_eep+1,c
  4544  003296  0E44               	movlw	68
  4545  003298  6E08               	movwf	?_Read_b_eep,c
  4546  00329A  EC70  F024         	call	_Read_b_eep	;wreg free
  4547  00329E  0100               	movlb	0	; () banked
  4548  0032A0  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4549  0032A2  E001 D0A7          	bnz	l13350
  4550  0032A6                     l13318:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 2568: }
  4554                           ;main.c: 2569: }
  4555                           ;main.c: 2570: }
  4556                           ;main.c: 2572: class_filter = ( dmflags & 0x01)*256 +
  4557                           ;main.c: 2573: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 3);
  4558  0032A6  51E7               	movf	doDM@i& (0+255),w,b
  4559  0032A8  0D08               	mullw	8
  4560  0032AA  0E9C               	movlw	156
  4561  0032AC  24F3               	addwf	prodl,w,c
  4562  0032AE  6E08               	movwf	?_Read_b_eep,c
  4563  0032B0  0E00               	movlw	0
  4564  0032B2  20F4               	addwfc	prodh,w,c
  4565  0032B4  6E09               	movwf	?_Read_b_eep+1,c
  4566  0032B6  EC70  F024         	call	_Read_b_eep	;wreg free
  4567  0032BA  0100               	movlb	0	; () banked
  4568  0032BC  6FD8               	movwf	??_doDM& (0+255),b
  4569  0032BE  51E6               	movf	doDM@dmflags& (0+255),w,b
  4570  0032C0  0B01               	andlw	1
  4571  0032C2  6FDA               	movwf	(??_doDM+2)& (0+255),b
  4572  0032C4  6BD9               	clrf	(??_doDM+1)& (0+255),b
  4573  0032C6  51D8               	movf	??_doDM& (0+255),w,b
  4574  0032C8  25D9               	addwf	(??_doDM+1)& (0+255),w,b
  4575  0032CA  6FDB               	movwf	doDM@class_filter& (0+255),b
  4576  0032CC  0E00               	movlw	0
  4577  0032CE  21DA               	addwfc	(??_doDM+2)& (0+255),w,b
  4578  0032D0  6FDC               	movwf	(doDM@class_filter+1)& (0+255),b
  4579                           
  4580                           ;main.c: 2579: class_mask = ( dmflags & 0x02)*256 +
  4581                           ;main.c: 2580: Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 2);
  4582  0032D2  51E7               	movf	doDM@i& (0+255),w,b
  4583  0032D4  0D08               	mullw	8
  4584  0032D6  0E9B               	movlw	155
  4585  0032D8  24F3               	addwf	prodl,w,c
  4586  0032DA  6E08               	movwf	?_Read_b_eep,c
  4587  0032DC  0E00               	movlw	0
  4588  0032DE  20F4               	addwfc	prodh,w,c
  4589  0032E0  6E09               	movwf	?_Read_b_eep+1,c
  4590  0032E2  EC70  F024         	call	_Read_b_eep	;wreg free
  4591  0032E6  0100               	movlb	0	; () banked
  4592  0032E8  6FD8               	movwf	??_doDM& (0+255),b
  4593  0032EA  51E6               	movf	doDM@dmflags& (0+255),w,b
  4594  0032EC  0B02               	andlw	2
  4595  0032EE  6FDA               	movwf	(??_doDM+2)& (0+255),b
  4596  0032F0  6BD9               	clrf	(??_doDM+1)& (0+255),b
  4597  0032F2  51D8               	movf	??_doDM& (0+255),w,b
  4598  0032F4  25D9               	addwf	(??_doDM+1)& (0+255),w,b
  4599  0032F6  6FDD               	movwf	doDM@class_mask& (0+255),b
  4600  0032F8  0E00               	movlw	0
  4601  0032FA  21DA               	addwfc	(??_doDM+2)& (0+255),w,b
  4602  0032FC  6FDE               	movwf	(doDM@class_mask+1)& (0+255),b
  4603                           
  4604                           ;main.c: 2586: type_filter = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 5);
  4605  0032FE  51E7               	movf	doDM@i& (0+255),w,b
  4606  003300  0D08               	mullw	8
  4607  003302  0E9E               	movlw	158
  4608  003304  24F3               	addwf	prodl,w,c
  4609  003306  6E08               	movwf	?_Read_b_eep,c
  4610  003308  0E00               	movlw	0
  4611  00330A  20F4               	addwfc	prodh,w,c
  4612  00330C  6E09               	movwf	?_Read_b_eep+1,c
  4613  00330E  EC70  F024         	call	_Read_b_eep	;wreg free
  4614  003312  0100               	movlb	0	; () banked
  4615  003314  6FDF               	movwf	doDM@type_filter& (0+255),b
  4616                           
  4617                           ;main.c: 2592: type_mask = Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 4);
  4618  003316  51E7               	movf	doDM@i& (0+255),w,b
  4619  003318  0D08               	mullw	8
  4620  00331A  0E9D               	movlw	157
  4621  00331C  24F3               	addwf	prodl,w,c
  4622  00331E  6E08               	movwf	?_Read_b_eep,c
  4623  003320  0E00               	movlw	0
  4624  003322  20F4               	addwfc	prodh,w,c
  4625  003324  6E09               	movwf	?_Read_b_eep+1,c
  4626  003326  EC70  F024         	call	_Read_b_eep	;wreg free
  4627  00332A  0100               	movlb	0	; () banked
  4628  00332C  6FE0               	movwf	doDM@type_mask& (0+255),b
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;main.c: 2598: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  4632                           ;main.c: 2599: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  4633  00332E  EE20  F099         	lfsr	2,_vscp_imsg+2
  4634  003332  CFDE F0D8          	movff	postinc2,??_doDM
  4635  003336  CFDD F0D9          	movff	postdec2,??_doDM+1
  4636  00333A  51DB               	movf	doDM@class_filter& (0+255),w,b
  4637  00333C  1BD8               	xorwf	??_doDM& (0+255),f,b
  4638  00333E  51DC               	movf	(doDM@class_filter+1)& (0+255),w,b
  4639  003340  1BD9               	xorwf	(??_doDM+1)& (0+255),f,b
  4640  003342  51DD               	movf	doDM@class_mask& (0+255),w,b
  4641  003344  17D8               	andwf	??_doDM& (0+255),f,b
  4642  003346  51DE               	movf	(doDM@class_mask+1)& (0+255),w,b
  4643  003348  17D9               	andwf	(??_doDM+1)& (0+255),f,b
  4644  00334A  51D9               	movf	(??_doDM+1)& (0+255),w,b
  4645  00334C  11D8               	iorwf	??_doDM& (0+255),w,b
  4646  00334E  E152               	bnz	l13350
  4647                           
  4648                           ; BSR set to: 0
  4649  003350  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  4650  003352  19DF               	xorwf	doDM@type_filter& (0+255),w,b
  4651  003354  15E0               	andwf	doDM@type_mask& (0+255),w,b
  4652  003356  E038               	bz	l13348
  4653  003358  D04D               	goto	l13350
  4654  00335A                     l13326:
  4655                           
  4656                           ;main.c: 2610: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4657  00335A  D852               	call	PL22	;call to abstracted procedure
  4658  00335C  EC70  F024         	call	_Read_b_eep	;wreg free
  4659  003360  0100               	movlb	0	; () banked
  4660  003362  6FE1               	movwf	_doDM$2383& (0+255),b
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;main.c: 2610: doActionOn( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4664  003364  C0E1  F04F         	movff	_doDM$2383,?_doActionOn
  4665  003368  51E6               	movf	doDM@dmflags& (0+255),w,b
  4666  00336A  ECEC  F013         	call	_doActionOn
  4667                           
  4668                           ;main.c: 2613: break;
  4669  00336E  D042               	goto	l13350
  4670  003370                     l13330:
  4671                           
  4672                           ;main.c: 2616: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4673  003370  D847               	call	PL22	;call to abstracted procedure
  4674  003372  EC70  F024         	call	_Read_b_eep	;wreg free
  4675  003376  0100               	movlb	0	; () banked
  4676  003378  6FE2               	movwf	_doDM$2384& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;main.c: 2616: doActionOff( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4680  00337A  C0E2  F04F         	movff	_doDM$2384,?_doActionOff
  4681  00337E  51E6               	movf	doDM@dmflags& (0+255),w,b
  4682  003380  ECD7  F01F         	call	_doActionOff
  4683                           
  4684                           ;main.c: 2619: break;
  4685  003384  D037               	goto	l13350
  4686  003386                     l13334:
  4687                           
  4688                           ;main.c: 2622: doActionPulse( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4689  003386  D83C               	call	PL22	;call to abstracted procedure
  4690  003388  EC70  F024         	call	_Read_b_eep	;wreg free
  4691  00338C  0100               	movlb	0	; () banked
  4692  00338E  6FE3               	movwf	_doDM$2385& (0+255),b
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;main.c: 2622: doActionPulse( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4696  003390  C0E3  F00A         	movff	_doDM$2385,?_doActionPulse
  4697  003394  51E6               	movf	doDM@dmflags& (0+255),w,b
  4698  003396  ECD8  F016         	call	_doActionPulse
  4699                           
  4700                           ;main.c: 2625: break;
  4701  00339A  D02C               	goto	l13350
  4702  00339C                     l13338:
  4703                           
  4704                           ;main.c: 2628: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4705  00339C  D831               	call	PL22	;call to abstracted procedure
  4706  00339E  EC70  F024         	call	_Read_b_eep	;wreg free
  4707  0033A2  0100               	movlb	0	; () banked
  4708  0033A4  6FE4               	movwf	_doDM$2386& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;main.c: 2628: doActionStatus( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4712  0033A6  C0E4  F04F         	movff	_doDM$2386,?_doActionStatus
  4713  0033AA  51E6               	movf	doDM@dmflags& (0+255),w,b
  4714  0033AC  ECCB  F01E         	call	_doActionStatus
  4715                           
  4716                           ;main.c: 2631: break;
  4717  0033B0  D021               	goto	l13350
  4718  0033B2                     l13342:
  4719                           
  4720                           ;main.c: 2639: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4721  0033B2  D826               	call	PL22	;call to abstracted procedure
  4722  0033B4  EC70  F024         	call	_Read_b_eep	;wreg free
  4723  0033B8  0100               	movlb	0	; () banked
  4724  0033BA  6FE5               	movwf	_doDM$2387& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 2639: doActionToggle( dmflags, Read_b_eep(0x43 + 46 + 40u + 0 + (8 * i) + 7) );
  4728  0033BC  C0E5  F04F         	movff	_doDM$2387,?_doActionToggle
  4729  0033C0  51E6               	movf	doDM@dmflags& (0+255),w,b
  4730  0033C2  EC1B  F01D         	call	_doActionToggle
  4731                           
  4732                           ;main.c: 2642: break;
  4733  0033C6  D016               	goto	l13350
  4734  0033C8                     l13348:
  4735                           
  4736                           ; BSR set to: 0
  4737  0033C8  51E7               	movf	doDM@i& (0+255),w,b
  4738  0033CA  0D08               	mullw	8
  4739  0033CC  0E9F               	movlw	159
  4740  0033CE  24F3               	addwf	prodl,w,c
  4741  0033D0  6E08               	movwf	?_Read_b_eep,c
  4742  0033D2  0E00               	movlw	0
  4743  0033D4  20F4               	addwfc	prodh,w,c
  4744  0033D6  6E09               	movwf	?_Read_b_eep+1,c
  4745  0033D8  EC70  F024         	call	_Read_b_eep	;wreg free
  4746                           
  4747                           ; Switch size 1, requested type "space"
  4748                           ; Number of cases is 6, Range of values is 0 to 6
  4749                           ; switch strategies available:
  4750                           ; Name         Instructions Cycles
  4751                           ; simple_byte           19    10 (average)
  4752                           ;	Chosen strategy is simple_byte
  4753  0033DC  0A00               	xorlw	0	; case 0
  4754  0033DE  E00A               	bz	l13350
  4755  0033E0  0A01               	xorlw	1	; case 1
  4756  0033E2  E0BB               	bz	l13326
  4757  0033E4  0A03               	xorlw	3	; case 2
  4758  0033E6  E0C4               	bz	l13330
  4759  0033E8  0A01               	xorlw	1	; case 3
  4760  0033EA  E0CD               	bz	l13334
  4761  0033EC  0A06               	xorlw	6	; case 5
  4762  0033EE  E0E1               	bz	l13342
  4763  0033F0  0A03               	xorlw	3	; case 6
  4764  0033F2  E0D4               	bz	l13338
  4765  0033F4                     l13350:
  4766  0033F4  0100               	movlb	0	; () banked
  4767  0033F6  2BE7               	incf	doDM@i& (0+255),f,b
  4768                           
  4769                           ; BSR set to: 0
  4770  0033F8  0E07               	movlw	7
  4771  0033FA  65E7               	cpfsgt	doDM@i& (0+255),b
  4772  0033FC  D71C               	goto	l13296
  4773  0033FE                     l861:
  4774                           
  4775                           ; BSR set to: 0
  4776  0033FE  0012               	return	
  4777  003400                     __end_of_doDM:
  4778                           	opt stack 0
  4779  003400                     PL22:
  4780                           	opt stack 21
  4781  003400  0100               	movlb	0	; () banked
  4782  003402  51E7               	movf	doDM@i& (0+255),w,b
  4783  003404  0D08               	mullw	8
  4784  003406  0EA0               	movlw	160
  4785  003408  24F3               	addwf	prodl,w,c
  4786  00340A  6E08               	movwf	?_Read_b_eep,c
  4787  00340C  0E00               	movlw	0
  4788  00340E  20F4               	addwfc	prodh,w,c
  4789  003410  6E09               	movwf	?_Read_b_eep+1,c
  4790  003412  0012               	return	
  4791  003414                     __end_ofPL22:
  4792                           	opt stack 0
  4793  003414                     PL50:
  4794                           	opt stack 21
  4795  003414  6FD8               	movwf	??_doDM& (0+255),b
  4796  003416  6BD9               	clrf	(??_doDM+1)& (0+255),b
  4797  003418  90D8               	bcf	status,0,c
  4798  00341A  37D8               	rlcf	??_doDM& (0+255),f,b
  4799  00341C  37D9               	rlcf	(??_doDM+1)& (0+255),f,b
  4800  00341E  90D8               	bcf	status,0,c
  4801  003420  37D8               	rlcf	??_doDM& (0+255),f,b
  4802  003422  37D9               	rlcf	(??_doDM+1)& (0+255),f,b
  4803  003424  90D8               	bcf	status,0,c
  4804  003426  37D8               	rlcf	??_doDM& (0+255),f,b
  4805  003428  37D9               	rlcf	(??_doDM+1)& (0+255),f,b
  4806  00342A  0012               	return	
  4807  00342C                     __end_ofPL50:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           intcon	equ	0xFF2
  4816                           intcon2	equ	0xFF1
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           indf1	equ	0xFE7
  4820                           fsr1h	equ	0xFE2
  4821                           fsr1l	equ	0xFE1
  4822                           indf2	equ	0xFDF
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           plusw2	equ	0xFDB
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _doActionToggle *****************
  4831 ;; Defined at:
  4832 ;;		line 3151 in file "../main.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  dmflags         1    wreg     unsigned char 
  4835 ;;  arg             1   78[COMRAM] unsigned char 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  dmflags         1   22[BANK0 ] unsigned char 
  4838 ;;  i               1   25[BANK0 ] unsigned char 
  4839 ;;  bOn             1   24[BANK0 ] enum E15660
  4840 ;;  val             1   23[BANK0 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : F/0
  4847 ;;		On exit  : F/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4850 ;;      Params:         1       0       0       0       0       0       0
  4851 ;;      Locals:         0       4       0       0       0       0       0
  4852 ;;      Temps:          2       0       0       0       0       0       0
  4853 ;;      Totals:         3       4       0       0       0       0       0
  4854 ;;Total ram usage:        7 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    7
  4857 ;; This function calls:
  4858 ;;		_Read_b_eep
  4859 ;;		_SendInformationEvent
  4860 ;; This function is called by:
  4861 ;;		_doDM
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text9
  4866  003A36                     __ptext9:
  4867                           	opt stack 0
  4868  003A36                     _doActionToggle:
  4869                           	opt stack 21
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;incstack = 0
  4873                           ;incstack = 0
  4874                           ;doActionToggle@dmflags stored from wreg
  4875  003A36  CFE8 F0D2          	movff	wreg,doActionToggle@dmflags
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;main.c: 3153: unsigned char i;
  4879                           ;main.c: 3154: unsigned char val;
  4880                           ;main.c: 3155: BOOL bOn = 0;
  4881  003A3A  6BD4               	clrf	doActionToggle@bOn& (0+255),b
  4882                           
  4883                           ;main.c: 3157: for ( i = 0; i < 8; i++ ) {
  4884  003A3C  6BD5               	clrf	doActionToggle@i& (0+255),b
  4885  003A3E                     l14642:
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;main.c: 3160: if ( !( arg & (1 << i) ) ) continue;
  4889  003A3E  C0D5  F050         	movff	doActionToggle@i,??_doActionToggle
  4890  003A42  0E01               	movlw	1
  4891  003A44  6E51               	movwf	(??_doActionToggle+1)& (0+255),c
  4892  003A46  2A50               	incf	??_doActionToggle,f,c
  4893  003A48  D002               	goto	u19274
  4894  003A4A                     u19275:
  4895  003A4A  90D8               	bcf	status,0,c
  4896  003A4C  3651               	rlcf	??_doActionToggle+1,f,c
  4897  003A4E                     u19274:
  4898  003A4E  2E50               	decfsz	??_doActionToggle,f,c
  4899  003A50  D7FC               	goto	u19275
  4900  003A52  5051               	movf	??_doActionToggle+1,w,c
  4901  003A54  144F               	andwf	doActionToggle@arg,w,c
  4902  003A56  E101 D080          	bz	l14704
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;main.c: 3163: if ( dmflags & 0x08 ) {
  4906  003A5A  A7D2               	btfss	doActionToggle@dmflags& (0+255),3,b
  4907  003A5C  D00B               	goto	l14650
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;main.c: 3164: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 3 + i) ) {
  4911  003A5E  0E46               	movlw	70
  4912  003A60  25D5               	addwf	doActionToggle@i& (0+255),w,b
  4913  003A62  6E08               	movwf	?_Read_b_eep,c
  4914  003A64  6A09               	clrf	?_Read_b_eep+1,c
  4915  003A66  0E00               	movlw	0
  4916  003A68  2209               	addwfc	?_Read_b_eep+1,f,c
  4917  003A6A  EC70  F024         	call	_Read_b_eep	;wreg free
  4918  003A6E  0100               	movlb	0	; () banked
  4919  003A70  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4920  003A72  E173               	bnz	l14704
  4921  003A74                     l14650:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;main.c: 3168: }
  4925                           ;main.c: 3169: }
  4926                           ;main.c: 3171: val = Read_b_eep(0x43 + 24 + i);
  4927  003A74  0E5B               	movlw	91
  4928  003A76  25D5               	addwf	doActionToggle@i& (0+255),w,b
  4929  003A78  6E08               	movwf	?_Read_b_eep,c
  4930  003A7A  6A09               	clrf	?_Read_b_eep+1,c
  4931  003A7C  0E00               	movlw	0
  4932  003A7E  2209               	addwfc	?_Read_b_eep+1,f,c
  4933  003A80  EC70  F024         	call	_Read_b_eep	;wreg free
  4934  003A84  0100               	movlb	0	; () banked
  4935  003A86  6FD3               	movwf	doActionToggle@val& (0+255),b
  4936                           
  4937                           ;main.c: 3173: switch ( i ) {
  4938  003A88  D03F               	goto	l14694
  4939  003A8A                     l1003:
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 3176: if ( PORTBbits.RB0 ) {
  4943  003A8A  A081               	btfss	3969,0,c	;volatile
  4944  003A8C  D002               	goto	l1004
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;main.c: 3177: PORTBbits.RB0 = 0;
  4948  003A8E  9081               	bcf	3969,0,c	;volatile
  4949  003A90  D037               	goto	L18
  4950  003A92                     l1004:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 3180: PORTBbits.RB0 = 1;
  4954  003A92  8081               	bsf	3969,0,c	;volatile
  4955  003A94                     l14654:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;main.c: 3181: bOn = 1;
  4959  003A94  0E01               	movlw	1
  4960  003A96  6FD4               	movwf	doActionToggle@bOn& (0+255),b
  4961  003A98  D04B               	goto	l14696
  4962  003A9A                     l1007:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 3186: if ( PORTBbits.RB1 ) {
  4966  003A9A  A281               	btfss	3969,1,c	;volatile
  4967  003A9C  D002               	goto	l1008
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;main.c: 3187: PORTBbits.RB1 = 0;
  4971  003A9E  9281               	bcf	3969,1,c	;volatile
  4972  003AA0  D02F               	goto	L18
  4973  003AA2                     l1008:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;main.c: 3190: PORTBbits.RB1 = 1;
  4977  003AA2  8281               	bsf	3969,1,c	;volatile
  4978  003AA4  D7F7               	goto	l14654
  4979  003AA6                     l1010:
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;main.c: 3196: if ( PORTCbits.RC3 ) {
  4983  003AA6  A682               	btfss	3970,3,c	;volatile
  4984  003AA8  D002               	goto	l1011
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;main.c: 3197: PORTCbits.RC3 = 0;
  4988  003AAA  9682               	bcf	3970,3,c	;volatile
  4989  003AAC  D029               	goto	L18
  4990  003AAE                     l1011:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;main.c: 3200: PORTCbits.RC3 = 1;
  4994  003AAE  8682               	bsf	3970,3,c	;volatile
  4995  003AB0  D7F1               	goto	l14654
  4996  003AB2                     l1013:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;main.c: 3206: if ( PORTCbits.RC4 ) {
  5000  003AB2  A882               	btfss	3970,4,c	;volatile
  5001  003AB4  D002               	goto	l1014
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 3207: PORTCbits.RC4 = 0;
  5005  003AB6  9882               	bcf	3970,4,c	;volatile
  5006  003AB8  D023               	goto	L18
  5007  003ABA                     l1014:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;main.c: 3210: PORTCbits.RC4 = 1;
  5011  003ABA  8882               	bsf	3970,4,c	;volatile
  5012  003ABC  D7EB               	goto	l14654
  5013  003ABE                     l1016:
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;main.c: 3216: if ( PORTCbits.RC5 ) {
  5017  003ABE  AA82               	btfss	3970,5,c	;volatile
  5018  003AC0  D002               	goto	l1017
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;main.c: 3217: PORTCbits.RC5 = 0;
  5022  003AC2  9A82               	bcf	3970,5,c	;volatile
  5023  003AC4  D01D               	goto	L18
  5024  003AC6                     l1017:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;main.c: 3220: PORTCbits.RC5 = 1;
  5028  003AC6  8A82               	bsf	3970,5,c	;volatile
  5029  003AC8  D7E5               	goto	l14654
  5030  003ACA                     l1019:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;main.c: 3226: if ( PORTCbits.RC6 ) {
  5034  003ACA  AC82               	btfss	3970,6,c	;volatile
  5035  003ACC  D002               	goto	l1020
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 3227: PORTCbits.RC6 = 0;
  5039  003ACE  9C82               	bcf	3970,6,c	;volatile
  5040  003AD0  D017               	goto	L18
  5041  003AD2                     l1020:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;main.c: 3230: PORTCbits.RC6 = 1;
  5045  003AD2  8C82               	bsf	3970,6,c	;volatile
  5046  003AD4  D7DF               	goto	l14654
  5047  003AD6                     l1022:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 3236: if ( PORTCbits.RC7 ) {
  5051  003AD6  AE82               	btfss	3970,7,c	;volatile
  5052  003AD8  D002               	goto	l1023
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;main.c: 3237: PORTCbits.RC7 = 0;
  5056  003ADA  9E82               	bcf	3970,7,c	;volatile
  5057  003ADC  D011               	goto	L18
  5058  003ADE                     l1023:
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;main.c: 3240: PORTCbits.RC7 = 1;
  5062  003ADE  8E82               	bsf	3970,7,c	;volatile
  5063  003AE0  D7D9               	goto	l14654
  5064  003AE2                     l1025:
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;main.c: 3246: if ( PORTAbits.RA2 ) {
  5068  003AE2  A480               	btfss	3968,2,c	;volatile
  5069  003AE4  D002               	goto	l1026
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;main.c: 3247: PORTAbits.RA2 = 0;
  5073  003AE6  9480               	bcf	3968,2,c	;volatile
  5074  003AE8  D00B               	goto	L18
  5075  003AEA                     l1026:
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;main.c: 3250: PORTAbits.RA2 = 1;
  5079  003AEA  8480               	bsf	3968,2,c	;volatile
  5080  003AEC  D7D3               	goto	l14654
  5081  003AEE                     l1028:
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;main.c: 3256: if ( PORTAbits.RA1 ) {
  5085  003AEE  A280               	btfss	3968,1,c	;volatile
  5086  003AF0  D002               	goto	l1029
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;main.c: 3257: PORTAbits.RA1 = 0;
  5090  003AF2  9280               	bcf	3968,1,c	;volatile
  5091  003AF4  D005               	goto	L18
  5092  003AF6                     l1029:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;main.c: 3260: PORTAbits.RA1 = 1;
  5096  003AF6  8280               	bsf	3968,1,c	;volatile
  5097  003AF8  D7CD               	goto	l14654
  5098  003AFA                     l1031:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;main.c: 3266: if ( PORTAbits.RA0 ) {
  5102  003AFA  A080               	btfss	3968,0,c	;volatile
  5103  003AFC  D003               	goto	l1032
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;main.c: 3267: PORTAbits.RA0 = 0;
  5107  003AFE  9080               	bcf	3968,0,c	;volatile
  5108  003B00                     L18:
  5109                           
  5110                           ;main.c: 3268: bOn = 0;
  5111  003B00  6BD4               	clrf	doActionToggle@bOn& (0+255),b
  5112                           
  5113                           ;main.c: 3269: } else {
  5114  003B02  D016               	goto	l14696
  5115  003B04                     l1032:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 3270: PORTAbits.RA0 = 1;
  5119  003B04  8080               	bsf	3968,0,c	;volatile
  5120  003B06  D7C6               	goto	l14654
  5121  003B08                     l14694:
  5122                           
  5123                           ; BSR set to: 0
  5124  003B08  51D5               	movf	doActionToggle@i& (0+255),w,b
  5125                           
  5126                           ; Switch size 1, requested type "space"
  5127                           ; Number of cases is 10, Range of values is 0 to 9
  5128                           ; switch strategies available:
  5129                           ; Name         Instructions Cycles
  5130                           ; simple_byte           31    16 (average)
  5131                           ;	Chosen strategy is simple_byte
  5132  003B0A  E0BF               	bz	l1003
  5133  003B0C  0A01               	xorlw	1	; case 1
  5134  003B0E  E0C5               	bz	l1007
  5135  003B10  0A03               	xorlw	3	; case 2
  5136  003B12  E0C9               	bz	l1010
  5137  003B14  0A01               	xorlw	1	; case 3
  5138  003B16  E0CD               	bz	l1013
  5139  003B18  0A07               	xorlw	7	; case 4
  5140  003B1A  E0D1               	bz	l1016
  5141  003B1C  0A01               	xorlw	1	; case 5
  5142  003B1E  E0D5               	bz	l1019
  5143  003B20  0A03               	xorlw	3	; case 6
  5144  003B22  E0D9               	bz	l1022
  5145  003B24  0A01               	xorlw	1	; case 7
  5146  003B26  E0DD               	bz	l1025
  5147  003B28  0A0F               	xorlw	15	; case 8
  5148  003B2A  E0E1               	bz	l1028
  5149  003B2C  0A01               	xorlw	1	; case 9
  5150  003B2E  E0E5               	bz	l1031
  5151  003B30                     l14696:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;main.c: 3276: if ( bOn ) {
  5155  003B30  51D4               	movf	doActionToggle@bOn& (0+255),w,b
  5156  003B32  E00A               	bz	l1034
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;main.c: 3279: if ( val & 0x08 ) {
  5160  003B34  A7D3               	btfss	doActionToggle@val& (0+255),3,b
  5161  003B36  D011               	goto	l14704
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;main.c: 3280: SendInformationEvent( i, 20, 3 );
  5165  003B38  0E14               	movlw	20
  5166  003B3A  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5167  003B3C  0E03               	movlw	3
  5168  003B3E  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5169  003B40  51D5               	movf	doActionToggle@i& (0+255),w,b
  5170  003B42  ECB2  F021         	call	_SendInformationEvent
  5171  003B46  D009               	goto	l14704
  5172  003B48                     l1034:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;main.c: 3284: else {
  5176                           ;main.c: 3287: if ( val & 0x10 ) {
  5177  003B48  A9D3               	btfss	doActionToggle@val& (0+255),4,b
  5178  003B4A  D007               	goto	l14704
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;main.c: 3288: SendInformationEvent( i, 20, 4 );
  5182  003B4C  0E14               	movlw	20
  5183  003B4E  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5184  003B50  0E04               	movlw	4
  5185  003B52  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5186  003B54  51D5               	movf	doActionToggle@i& (0+255),w,b
  5187  003B56  ECB2  F021         	call	_SendInformationEvent
  5188  003B5A                     l14704:
  5189                           
  5190                           ; BSR set to: 0
  5191  003B5A  2BD5               	incf	doActionToggle@i& (0+255),f,b
  5192                           
  5193                           ; BSR set to: 0
  5194  003B5C  0E07               	movlw	7
  5195  003B5E  65D5               	cpfsgt	doActionToggle@i& (0+255),b
  5196  003B60  D76E               	goto	l14642
  5197                           
  5198                           ; BSR set to: 0
  5199  003B62  0C07               	retlw	7
  5200  003B64                     __end_of_doActionToggle:
  5201                           	opt stack 0
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           prodh	equ	0xFF4
  5207                           prodl	equ	0xFF3
  5208                           intcon	equ	0xFF2
  5209                           intcon2	equ	0xFF1
  5210                           postinc0	equ	0xFEE
  5211                           wreg	equ	0xFE8
  5212                           indf1	equ	0xFE7
  5213                           fsr1h	equ	0xFE2
  5214                           fsr1l	equ	0xFE1
  5215                           indf2	equ	0xFDF
  5216                           postinc2	equ	0xFDE
  5217                           postdec2	equ	0xFDD
  5218                           plusw2	equ	0xFDB
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function _doActionStatus *****************
  5224 ;; Defined at:
  5225 ;;		line 3034 in file "../main.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  dmflags         1    wreg     unsigned char 
  5228 ;;  arg             1   78[COMRAM] unsigned char 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  dmflags         1   22[BANK0 ] unsigned char 
  5231 ;;  i               1   25[BANK0 ] unsigned char 
  5232 ;;  bOn             1   24[BANK0 ] enum E15660
  5233 ;;  val             1   23[BANK0 ] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;		None               void
  5236 ;; Registers used:
  5237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : F/0
  5240 ;;		On exit  : F/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5243 ;;      Params:         1       0       0       0       0       0       0
  5244 ;;      Locals:         0       4       0       0       0       0       0
  5245 ;;      Temps:          2       0       0       0       0       0       0
  5246 ;;      Totals:         3       4       0       0       0       0       0
  5247 ;;Total ram usage:        7 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    7
  5250 ;; This function calls:
  5251 ;;		_Read_b_eep
  5252 ;;		_SendInformationEvent
  5253 ;; This function is called by:
  5254 ;;		_doDM
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text10
  5259  003D96                     __ptext10:
  5260                           	opt stack 0
  5261  003D96                     _doActionStatus:
  5262                           	opt stack 21
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;incstack = 0
  5266                           ;incstack = 0
  5267                           ;doActionStatus@dmflags stored from wreg
  5268  003D96  CFE8 F0D2          	movff	wreg,doActionStatus@dmflags
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;main.c: 3035: unsigned char i;
  5272                           ;main.c: 3036: unsigned char val;
  5273                           ;main.c: 3037: BOOL bOn = 0;
  5274  003D9A  6BD4               	clrf	doActionStatus@bOn& (0+255),b
  5275                           
  5276                           ;main.c: 3039: for (i = 0; i < 8; i++) {
  5277  003D9C  6BD5               	clrf	doActionStatus@i& (0+255),b
  5278  003D9E                     l14590:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;main.c: 3042: if (!(arg & (1 << i))) continue;
  5282  003D9E  C0D5  F050         	movff	doActionStatus@i,??_doActionStatus
  5283  003DA2  0E01               	movlw	1
  5284  003DA4  6E51               	movwf	(??_doActionStatus+1)& (0+255),c
  5285  003DA6  2A50               	incf	??_doActionStatus,f,c
  5286  003DA8  D002               	goto	u19194
  5287  003DAA                     u19195:
  5288  003DAA  90D8               	bcf	status,0,c
  5289  003DAC  3651               	rlcf	??_doActionStatus+1,f,c
  5290  003DAE                     u19194:
  5291  003DAE  2E50               	decfsz	??_doActionStatus,f,c
  5292  003DB0  D7FC               	goto	u19195
  5293  003DB2  5051               	movf	??_doActionStatus+1,w,c
  5294  003DB4  144F               	andwf	doActionStatus@arg,w,c
  5295  003DB6  E073               	bz	l14632
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;main.c: 3045: if (dmflags & 0x08) {
  5299  003DB8  A7D2               	btfss	doActionStatus@dmflags& (0+255),3,b
  5300  003DBA  D00B               	goto	l14598
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;main.c: 3046: if (vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 3 + i) ) {
  5304  003DBC  0E46               	movlw	70
  5305  003DBE  25D5               	addwf	doActionStatus@i& (0+255),w,b
  5306  003DC0  6E08               	movwf	?_Read_b_eep,c
  5307  003DC2  6A09               	clrf	?_Read_b_eep+1,c
  5308  003DC4  0E00               	movlw	0
  5309  003DC6  2209               	addwfc	?_Read_b_eep+1,f,c
  5310  003DC8  EC70  F024         	call	_Read_b_eep	;wreg free
  5311  003DCC  0100               	movlb	0	; () banked
  5312  003DCE  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5313  003DD0  E166               	bnz	l14632
  5314  003DD2                     l14598:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;main.c: 3050: }
  5318                           ;main.c: 3051: }
  5319                           ;main.c: 3053: val = Read_b_eep(0x43 + 24 + i);
  5320  003DD2  0E5B               	movlw	91
  5321  003DD4  25D5               	addwf	doActionStatus@i& (0+255),w,b
  5322  003DD6  6E08               	movwf	?_Read_b_eep,c
  5323  003DD8  6A09               	clrf	?_Read_b_eep+1,c
  5324  003DDA  0E00               	movlw	0
  5325  003DDC  2209               	addwfc	?_Read_b_eep+1,f,c
  5326  003DDE  EC70  F024         	call	_Read_b_eep	;wreg free
  5327  003DE2  0100               	movlb	0	; () banked
  5328  003DE4  6FD3               	movwf	doActionStatus@val& (0+255),b
  5329                           
  5330                           ;main.c: 3055: switch (i) {
  5331  003DE6  D032               	goto	l14622
  5332  003DE8                     l14600:
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;main.c: 3058: bOn = PORTBbits.RB0;
  5336  003DE8  0E00               	movlw	0
  5337  003DEA  B081               	btfsc	3969,0,c	;volatile
  5338  003DEC  0E01               	movlw	1
  5339  003DEE  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5340                           
  5341                           ;main.c: 3059: break;
  5342  003DF0  D041               	goto	l14624
  5343  003DF2                     l14602:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;main.c: 3062: bOn = PORTBbits.RB1;
  5347  003DF2  0E00               	movlw	0
  5348  003DF4  B281               	btfsc	3969,1,c	;volatile
  5349  003DF6  0E01               	movlw	1
  5350  003DF8  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5351                           
  5352                           ;main.c: 3063: break;
  5353  003DFA  D03C               	goto	l14624
  5354  003DFC                     l14604:
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;main.c: 3066: bOn = PORTCbits.RC3;
  5358  003DFC  0E00               	movlw	0
  5359  003DFE  B682               	btfsc	3970,3,c	;volatile
  5360  003E00  0E01               	movlw	1
  5361  003E02  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5362                           
  5363                           ;main.c: 3067: break;
  5364  003E04  D037               	goto	l14624
  5365  003E06                     l14606:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;main.c: 3070: bOn = PORTCbits.RC4;
  5369  003E06  0E00               	movlw	0
  5370  003E08  B882               	btfsc	3970,4,c	;volatile
  5371  003E0A  0E01               	movlw	1
  5372  003E0C  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5373                           
  5374                           ;main.c: 3071: break;
  5375  003E0E  D032               	goto	l14624
  5376  003E10                     l14608:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;main.c: 3074: bOn = PORTCbits.RC5;
  5380  003E10  0E00               	movlw	0
  5381  003E12  BA82               	btfsc	3970,5,c	;volatile
  5382  003E14  0E01               	movlw	1
  5383  003E16  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5384                           
  5385                           ;main.c: 3075: break;
  5386  003E18  D02D               	goto	l14624
  5387  003E1A                     l14610:
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;main.c: 3078: bOn = PORTCbits.RC6;
  5391  003E1A  0E00               	movlw	0
  5392  003E1C  BC82               	btfsc	3970,6,c	;volatile
  5393  003E1E  0E01               	movlw	1
  5394  003E20  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5395                           
  5396                           ;main.c: 3079: break;
  5397  003E22  D028               	goto	l14624
  5398  003E24                     l14612:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;main.c: 3082: bOn = PORTCbits.RC7;
  5402  003E24  0E00               	movlw	0
  5403  003E26  BE82               	btfsc	3970,7,c	;volatile
  5404  003E28  0E01               	movlw	1
  5405  003E2A  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5406                           
  5407                           ;main.c: 3083: break;
  5408  003E2C  D023               	goto	l14624
  5409  003E2E                     l14614:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;main.c: 3086: bOn = PORTAbits.RA2;
  5413  003E2E  0E00               	movlw	0
  5414  003E30  B480               	btfsc	3968,2,c	;volatile
  5415  003E32  0E01               	movlw	1
  5416  003E34  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5417                           
  5418                           ;main.c: 3087: break;
  5419  003E36  D01E               	goto	l14624
  5420  003E38                     l14616:
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;main.c: 3090: bOn = PORTAbits.RA1;
  5424  003E38  0E00               	movlw	0
  5425  003E3A  B280               	btfsc	3968,1,c	;volatile
  5426  003E3C  0E01               	movlw	1
  5427  003E3E  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5428                           
  5429                           ;main.c: 3091: break;
  5430  003E40  D019               	goto	l14624
  5431  003E42                     l14618:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;main.c: 3094: bOn = PORTAbits.RA0;
  5435  003E42  0E00               	movlw	0
  5436  003E44  B080               	btfsc	3968,0,c	;volatile
  5437  003E46  0E01               	movlw	1
  5438  003E48  6FD4               	movwf	doActionStatus@bOn& (0+255),b
  5439                           
  5440                           ;main.c: 3095: break;
  5441  003E4A  D014               	goto	l14624
  5442  003E4C                     l14622:
  5443                           
  5444                           ; BSR set to: 0
  5445  003E4C  51D5               	movf	doActionStatus@i& (0+255),w,b
  5446                           
  5447                           ; Switch size 1, requested type "space"
  5448                           ; Number of cases is 10, Range of values is 0 to 9
  5449                           ; switch strategies available:
  5450                           ; Name         Instructions Cycles
  5451                           ; simple_byte           31    16 (average)
  5452                           ;	Chosen strategy is simple_byte
  5453  003E4E  E0CC               	bz	l14600
  5454  003E50  0A01               	xorlw	1	; case 1
  5455  003E52  E0CF               	bz	l14602
  5456  003E54  0A03               	xorlw	3	; case 2
  5457  003E56  E0D2               	bz	l14604
  5458  003E58  0A01               	xorlw	1	; case 3
  5459  003E5A  E0D5               	bz	l14606
  5460  003E5C  0A07               	xorlw	7	; case 4
  5461  003E5E  E0D8               	bz	l14608
  5462  003E60  0A01               	xorlw	1	; case 5
  5463  003E62  E0DB               	bz	l14610
  5464  003E64  0A03               	xorlw	3	; case 6
  5465  003E66  E0DE               	bz	l14612
  5466  003E68  0A01               	xorlw	1	; case 7
  5467  003E6A  E0E1               	bz	l14614
  5468  003E6C  0A0F               	xorlw	15	; case 8
  5469  003E6E  E0E4               	bz	l14616
  5470  003E70  0A01               	xorlw	1	; case 9
  5471  003E72  E0E7               	bz	l14618
  5472  003E74                     l14624:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;main.c: 3098: if (bOn) {
  5476  003E74  51D4               	movf	doActionStatus@bOn& (0+255),w,b
  5477  003E76  E00A               	bz	l980
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;main.c: 3101: if ( val & 0x10 ) {
  5481  003E78  A9D3               	btfss	doActionStatus@val& (0+255),4,b
  5482  003E7A  D011               	goto	l14632
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;main.c: 3102: SendInformationEvent( i, 20, 4 );
  5486  003E7C  0E14               	movlw	20
  5487  003E7E  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5488  003E80  0E04               	movlw	4
  5489  003E82  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5490  003E84  51D5               	movf	doActionStatus@i& (0+255),w,b
  5491  003E86  ECB2  F021         	call	_SendInformationEvent
  5492  003E8A  D009               	goto	l14632
  5493  003E8C                     l980:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;main.c: 3106: else {
  5497                           ;main.c: 3109: if ( val & 0x10 ) {
  5498  003E8C  A9D3               	btfss	doActionStatus@val& (0+255),4,b
  5499  003E8E  D007               	goto	l14632
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;main.c: 3110: SendInformationEvent( i, 20, 4 );
  5503  003E90  0E14               	movlw	20
  5504  003E92  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  5505  003E94  0E04               	movlw	4
  5506  003E96  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5507  003E98  51D5               	movf	doActionStatus@i& (0+255),w,b
  5508  003E9A  ECB2  F021         	call	_SendInformationEvent
  5509  003E9E                     l14632:
  5510                           
  5511                           ; BSR set to: 0
  5512  003E9E  2BD5               	incf	doActionStatus@i& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515  003EA0  0E07               	movlw	7
  5516  003EA2  65D5               	cpfsgt	doActionStatus@i& (0+255),b
  5517  003EA4  D77C               	goto	l14590
  5518                           
  5519                           ; BSR set to: 0
  5520  003EA6  0C07               	retlw	7
  5521  003EA8                     __end_of_doActionStatus:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           intcon	equ	0xFF2
  5530                           intcon2	equ	0xFF1
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           indf1	equ	0xFE7
  5534                           fsr1h	equ	0xFE2
  5535                           fsr1l	equ	0xFE1
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           plusw2	equ	0xFDB
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function _doActionPulse *****************
  5545 ;; Defined at:
  5546 ;;		line 2900 in file "../main.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  dmflags         1    wreg     unsigned char 
  5549 ;;  arg             1    9[COMRAM] unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  dmflags         1   13[COMRAM] unsigned char 
  5552 ;;  i               1   15[COMRAM] unsigned char 
  5553 ;;  val             1   14[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : F/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5563 ;;      Params:         1       0       0       0       0       0       0
  5564 ;;      Locals:         3       0       0       0       0       0       0
  5565 ;;      Temps:          3       0       0       0       0       0       0
  5566 ;;      Totals:         7       0       0       0       0       0       0
  5567 ;;Total ram usage:        7 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    3
  5570 ;; This function calls:
  5571 ;;		_Read_b_eep
  5572 ;; This function is called by:
  5573 ;;		_doDM
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text11
  5578  002DB0                     __ptext11:
  5579                           	opt stack 0
  5580  002DB0                     _doActionPulse:
  5581                           	opt stack 25
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;incstack = 0
  5585                           ;incstack = 0
  5586                           ;doActionPulse@dmflags stored from wreg
  5587  002DB0  CFE8 F00E          	movff	wreg,doActionPulse@dmflags
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;main.c: 2902: unsigned char i;
  5591                           ;main.c: 2903: unsigned char val;
  5592                           ;main.c: 2905: for ( i = 0; i < 8; i++ ) {
  5593  002DB4  6A10               	clrf	doActionPulse@i,c
  5594  002DB6                     l14522:
  5595                           
  5596                           ;main.c: 2908: if ( !( arg & ( 1 << i ) ) ) continue;
  5597  002DB6  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  5598  002DBA  0E01               	movlw	1
  5599  002DBC  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  5600  002DBE  2A0B               	incf	??_doActionPulse,f,c
  5601  002DC0  D002               	goto	u19134
  5602  002DC2                     u19135:
  5603  002DC2  90D8               	bcf	status,0,c
  5604  002DC4  360C               	rlcf	??_doActionPulse+1,f,c
  5605  002DC6                     u19134:
  5606  002DC6  2E0B               	decfsz	??_doActionPulse,f,c
  5607  002DC8  D7FC               	goto	u19135
  5608  002DCA  500C               	movf	??_doActionPulse+1,w,c
  5609  002DCC  140A               	andwf	doActionPulse@arg,w,c
  5610  002DCE  E101 D124          	bz	l14580
  5611                           
  5612                           ;main.c: 2911: if (dmflags & 0x08) {
  5613  002DD2  A60E               	btfss	doActionPulse@dmflags,3,c
  5614  002DD4  D00C               	goto	l14530
  5615                           
  5616                           ;main.c: 2912: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 3 + i) ) {
  5617  002DD6  0E46               	movlw	70
  5618  002DD8  2410               	addwf	doActionPulse@i,w,c
  5619  002DDA  6E08               	movwf	?_Read_b_eep,c
  5620  002DDC  6A09               	clrf	?_Read_b_eep+1,c
  5621  002DDE  0E00               	movlw	0
  5622  002DE0  2209               	addwfc	?_Read_b_eep+1,f,c
  5623  002DE2  EC70  F024         	call	_Read_b_eep	;wreg free
  5624  002DE6  0100               	movlb	0	; () banked
  5625  002DE8  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5626  002DEA  E001 D116          	bnz	l14580
  5627  002DEE                     l14530:
  5628                           
  5629                           ;main.c: 2916: }
  5630                           ;main.c: 2917: }
  5631                           ;main.c: 2919: val = Read_b_eep(0x43 + 24 + i);
  5632  002DEE  0E5B               	movlw	91
  5633  002DF0  2410               	addwf	doActionPulse@i,w,c
  5634  002DF2  6E08               	movwf	?_Read_b_eep,c
  5635  002DF4  6A09               	clrf	?_Read_b_eep+1,c
  5636  002DF6  0E00               	movlw	0
  5637  002DF8  2209               	addwfc	?_Read_b_eep+1,f,c
  5638  002DFA  EC70  F024         	call	_Read_b_eep	;wreg free
  5639  002DFE  6E0F               	movwf	doActionPulse@val,c
  5640                           
  5641                           ;main.c: 2922: if ( !( val & 0x80 ) ) continue;
  5642  002E00  AE0F               	btfss	doActionPulse@val,7,c
  5643  002E02  D10B               	goto	l14580
  5644  002E04  D0F0               	goto	l14578
  5645  002E06                     l948:
  5646                           
  5647                           ;main.c: 2927: PORTBbits.RB0 = 0;
  5648  002E06  9081               	bcf	3969,0,c	;volatile
  5649                           
  5650                           ;main.c: 2928: channel_pulse_flags |= 0x01;
  5651  002E08  0100               	movlb	0	; () banked
  5652  002E0A  8168               	bsf	_channel_pulse_flags& (0+255),0,b
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;main.c: 2929: channel_pulse_timer[ 0 ] =
  5656                           ;main.c: 2930: Read_b_eep(0x43 + 46 + 0u) * 256 +
  5657                           ;main.c: 2932: Read_b_eep(0x43 + 46 + 1u);
  5658  002E0C  6A09               	clrf	?_Read_b_eep+1,c
  5659  002E0E  0E72               	movlw	114
  5660  002E10  6E08               	movwf	?_Read_b_eep,c
  5661  002E12  EC70  F024         	call	_Read_b_eep	;wreg free
  5662  002E16  6E0B               	movwf	??_doActionPulse& (0+255),c
  5663  002E18  6A09               	clrf	?_Read_b_eep+1,c
  5664  002E1A  0E71               	movlw	113
  5665  002E1C  6E08               	movwf	?_Read_b_eep,c
  5666  002E1E  EC70  F024         	call	_Read_b_eep	;wreg free
  5667  002E22  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5668  002E24  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5669  002E26  500B               	movf	??_doActionPulse,w,c
  5670  002E28  240C               	addwf	??_doActionPulse+1,w,c
  5671  002E2A  0101               	movlb	1	; () banked
  5672  002E2C  6F00               	movwf	_channel_pulse_timer& (0+255),b
  5673  002E2E  0E00               	movlw	0
  5674  002E30  200D               	addwfc	??_doActionPulse+2,w,c
  5675  002E32  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
  5676                           
  5677                           ;main.c: 2934: break;
  5678  002E34  D0F2               	goto	l14580
  5679  002E36                     l950:
  5680                           
  5681                           ;main.c: 2937: PORTBbits.RB1 = 0;
  5682  002E36  9281               	bcf	3969,1,c	;volatile
  5683                           
  5684                           ;main.c: 2938: channel_pulse_flags |= 0x02;
  5685  002E38  0100               	movlb	0	; () banked
  5686  002E3A  8368               	bsf	_channel_pulse_flags& (0+255),1,b
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;main.c: 2939: channel_pulse_timer[ 1 ] =
  5690                           ;main.c: 2940: Read_b_eep(0x43 + 46 + 2u) * 256 +
  5691                           ;main.c: 2942: Read_b_eep(0x43 + 46 + 3u);
  5692  002E3C  6A09               	clrf	?_Read_b_eep+1,c
  5693  002E3E  0E74               	movlw	116
  5694  002E40  6E08               	movwf	?_Read_b_eep,c
  5695  002E42  EC70  F024         	call	_Read_b_eep	;wreg free
  5696  002E46  6E0B               	movwf	??_doActionPulse& (0+255),c
  5697  002E48  6A09               	clrf	?_Read_b_eep+1,c
  5698  002E4A  0E73               	movlw	115
  5699  002E4C  6E08               	movwf	?_Read_b_eep,c
  5700  002E4E  EC70  F024         	call	_Read_b_eep	;wreg free
  5701  002E52  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5702  002E54  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5703  002E56  500B               	movf	??_doActionPulse,w,c
  5704  002E58  240C               	addwf	??_doActionPulse+1,w,c
  5705  002E5A  0101               	movlb	1	; () banked
  5706  002E5C  6F02               	movwf	(_channel_pulse_timer+2)& (0+255),b
  5707  002E5E  0E00               	movlw	0
  5708  002E60  200D               	addwfc	??_doActionPulse+2,w,c
  5709  002E62  6F03               	movwf	(_channel_pulse_timer+3)& (0+255),b
  5710                           
  5711                           ;main.c: 2944: break;
  5712  002E64  D0DA               	goto	l14580
  5713  002E66                     l951:
  5714                           
  5715                           ;main.c: 2947: PORTCbits.RC3 = 0;
  5716  002E66  9682               	bcf	3970,3,c	;volatile
  5717                           
  5718                           ;main.c: 2948: channel_pulse_flags |= 0x04;
  5719  002E68  0100               	movlb	0	; () banked
  5720  002E6A  8568               	bsf	_channel_pulse_flags& (0+255),2,b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;main.c: 2949: channel_pulse_timer[ 2 ] =
  5724                           ;main.c: 2950: Read_b_eep(0x43 + 46 + 4u) * 256 +
  5725                           ;main.c: 2952: Read_b_eep(0x43 + 46 + 5u);
  5726  002E6C  6A09               	clrf	?_Read_b_eep+1,c
  5727  002E6E  0E76               	movlw	118
  5728  002E70  6E08               	movwf	?_Read_b_eep,c
  5729  002E72  EC70  F024         	call	_Read_b_eep	;wreg free
  5730  002E76  6E0B               	movwf	??_doActionPulse& (0+255),c
  5731  002E78  6A09               	clrf	?_Read_b_eep+1,c
  5732  002E7A  0E75               	movlw	117
  5733  002E7C  6E08               	movwf	?_Read_b_eep,c
  5734  002E7E  EC70  F024         	call	_Read_b_eep	;wreg free
  5735  002E82  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5736  002E84  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5737  002E86  500B               	movf	??_doActionPulse,w,c
  5738  002E88  240C               	addwf	??_doActionPulse+1,w,c
  5739  002E8A  0101               	movlb	1	; () banked
  5740  002E8C  6F04               	movwf	(_channel_pulse_timer+4)& (0+255),b
  5741  002E8E  0E00               	movlw	0
  5742  002E90  200D               	addwfc	??_doActionPulse+2,w,c
  5743  002E92  6F05               	movwf	(_channel_pulse_timer+5)& (0+255),b
  5744                           
  5745                           ;main.c: 2954: break;
  5746  002E94  D0C2               	goto	l14580
  5747  002E96                     l952:
  5748                           
  5749                           ;main.c: 2957: PORTCbits.RC4 = 0;
  5750  002E96  9882               	bcf	3970,4,c	;volatile
  5751                           
  5752                           ;main.c: 2958: channel_pulse_flags |= 0x08;
  5753  002E98  0100               	movlb	0	; () banked
  5754  002E9A  8768               	bsf	_channel_pulse_flags& (0+255),3,b
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;main.c: 2959: channel_pulse_timer[ 3 ] =
  5758                           ;main.c: 2960: Read_b_eep(0x43 + 46 + 6u) * 256 +
  5759                           ;main.c: 2962: Read_b_eep(0x43 + 46 + 7u);
  5760  002E9C  6A09               	clrf	?_Read_b_eep+1,c
  5761  002E9E  0E78               	movlw	120
  5762  002EA0  6E08               	movwf	?_Read_b_eep,c
  5763  002EA2  EC70  F024         	call	_Read_b_eep	;wreg free
  5764  002EA6  6E0B               	movwf	??_doActionPulse& (0+255),c
  5765  002EA8  6A09               	clrf	?_Read_b_eep+1,c
  5766  002EAA  0E77               	movlw	119
  5767  002EAC  6E08               	movwf	?_Read_b_eep,c
  5768  002EAE  EC70  F024         	call	_Read_b_eep	;wreg free
  5769  002EB2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5770  002EB4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5771  002EB6  500B               	movf	??_doActionPulse,w,c
  5772  002EB8  240C               	addwf	??_doActionPulse+1,w,c
  5773  002EBA  0101               	movlb	1	; () banked
  5774  002EBC  6F06               	movwf	(_channel_pulse_timer+6)& (0+255),b
  5775  002EBE  0E00               	movlw	0
  5776  002EC0  200D               	addwfc	??_doActionPulse+2,w,c
  5777  002EC2  6F07               	movwf	(_channel_pulse_timer+7)& (0+255),b
  5778                           
  5779                           ;main.c: 2964: break;
  5780  002EC4  D0AA               	goto	l14580
  5781  002EC6                     l953:
  5782                           
  5783                           ;main.c: 2967: PORTCbits.RC5 = 0;
  5784  002EC6  9A82               	bcf	3970,5,c	;volatile
  5785                           
  5786                           ;main.c: 2968: channel_pulse_flags |= 0x10;
  5787  002EC8  0100               	movlb	0	; () banked
  5788  002ECA  8968               	bsf	_channel_pulse_flags& (0+255),4,b
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;main.c: 2969: channel_pulse_timer[ 4 ] =
  5792                           ;main.c: 2970: Read_b_eep(0x43 + 46 + 8u) * 256 +
  5793                           ;main.c: 2972: Read_b_eep(0x43 + 46 + 9u);
  5794  002ECC  6A09               	clrf	?_Read_b_eep+1,c
  5795  002ECE  0E7A               	movlw	122
  5796  002ED0  6E08               	movwf	?_Read_b_eep,c
  5797  002ED2  EC70  F024         	call	_Read_b_eep	;wreg free
  5798  002ED6  6E0B               	movwf	??_doActionPulse& (0+255),c
  5799  002ED8  6A09               	clrf	?_Read_b_eep+1,c
  5800  002EDA  0E79               	movlw	121
  5801  002EDC  6E08               	movwf	?_Read_b_eep,c
  5802  002EDE  EC70  F024         	call	_Read_b_eep	;wreg free
  5803  002EE2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5804  002EE4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5805  002EE6  500B               	movf	??_doActionPulse,w,c
  5806  002EE8  240C               	addwf	??_doActionPulse+1,w,c
  5807  002EEA  0101               	movlb	1	; () banked
  5808  002EEC  6F08               	movwf	(_channel_pulse_timer+8)& (0+255),b
  5809  002EEE  0E00               	movlw	0
  5810  002EF0  200D               	addwfc	??_doActionPulse+2,w,c
  5811  002EF2  6F09               	movwf	(_channel_pulse_timer+9)& (0+255),b
  5812                           
  5813                           ;main.c: 2974: break;
  5814  002EF4  D092               	goto	l14580
  5815  002EF6                     l954:
  5816                           
  5817                           ;main.c: 2977: PORTCbits.RC6 = 0;
  5818  002EF6  9C82               	bcf	3970,6,c	;volatile
  5819                           
  5820                           ;main.c: 2978: channel_pulse_flags |= 0x20;
  5821  002EF8  0100               	movlb	0	; () banked
  5822  002EFA  8B68               	bsf	_channel_pulse_flags& (0+255),5,b
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;main.c: 2979: channel_pulse_timer[ 5 ] =
  5826                           ;main.c: 2980: Read_b_eep(0x43 + 46 + 10u) * 256 +
  5827                           ;main.c: 2982: Read_b_eep(0x43 + 46 + 11u);
  5828  002EFC  6A09               	clrf	?_Read_b_eep+1,c
  5829  002EFE  0E7C               	movlw	124
  5830  002F00  6E08               	movwf	?_Read_b_eep,c
  5831  002F02  EC70  F024         	call	_Read_b_eep	;wreg free
  5832  002F06  6E0B               	movwf	??_doActionPulse& (0+255),c
  5833  002F08  6A09               	clrf	?_Read_b_eep+1,c
  5834  002F0A  0E7B               	movlw	123
  5835  002F0C  6E08               	movwf	?_Read_b_eep,c
  5836  002F0E  EC70  F024         	call	_Read_b_eep	;wreg free
  5837  002F12  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5838  002F14  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5839  002F16  500B               	movf	??_doActionPulse,w,c
  5840  002F18  240C               	addwf	??_doActionPulse+1,w,c
  5841  002F1A  0101               	movlb	1	; () banked
  5842  002F1C  6F0A               	movwf	(_channel_pulse_timer+10)& (0+255),b
  5843  002F1E  0E00               	movlw	0
  5844  002F20  200D               	addwfc	??_doActionPulse+2,w,c
  5845  002F22  6F0B               	movwf	(_channel_pulse_timer+11)& (0+255),b
  5846                           
  5847                           ;main.c: 2984: break;
  5848  002F24  D07A               	goto	l14580
  5849  002F26                     l955:
  5850                           
  5851                           ;main.c: 2987: PORTCbits.RC7 = 0;
  5852  002F26  9E82               	bcf	3970,7,c	;volatile
  5853                           
  5854                           ;main.c: 2988: channel_pulse_flags |= 0x40;
  5855  002F28  0100               	movlb	0	; () banked
  5856  002F2A  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;main.c: 2989: channel_pulse_timer[ 6 ] =
  5860                           ;main.c: 2990: Read_b_eep(0x43 + 46 + 12u) * 256 +
  5861                           ;main.c: 2992: Read_b_eep(0x43 + 46 + 13u);
  5862  002F2C  6A09               	clrf	?_Read_b_eep+1,c
  5863  002F2E  0E7E               	movlw	126
  5864  002F30  6E08               	movwf	?_Read_b_eep,c
  5865  002F32  EC70  F024         	call	_Read_b_eep	;wreg free
  5866  002F36  6E0B               	movwf	??_doActionPulse& (0+255),c
  5867  002F38  6A09               	clrf	?_Read_b_eep+1,c
  5868  002F3A  0E7D               	movlw	125
  5869  002F3C  6E08               	movwf	?_Read_b_eep,c
  5870  002F3E  EC70  F024         	call	_Read_b_eep	;wreg free
  5871  002F42  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5872  002F44  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5873  002F46  500B               	movf	??_doActionPulse,w,c
  5874  002F48  240C               	addwf	??_doActionPulse+1,w,c
  5875  002F4A  0101               	movlb	1	; () banked
  5876  002F4C  6F0C               	movwf	(_channel_pulse_timer+12)& (0+255),b
  5877  002F4E  0E00               	movlw	0
  5878  002F50  200D               	addwfc	??_doActionPulse+2,w,c
  5879  002F52  6F0D               	movwf	(_channel_pulse_timer+13)& (0+255),b
  5880                           
  5881                           ;main.c: 2994: break;
  5882  002F54  D062               	goto	l14580
  5883  002F56                     l956:
  5884                           
  5885                           ;main.c: 2997: PORTAbits.RA2 = 0;
  5886  002F56  9480               	bcf	3968,2,c	;volatile
  5887                           
  5888                           ;main.c: 2998: channel_pulse_flags |= 0x40;
  5889  002F58  0100               	movlb	0	; () banked
  5890  002F5A  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;main.c: 2999: channel_pulse_timer[ 7 ] =
  5894                           ;main.c: 3000: Read_b_eep(0x43 + 46 + 14u) * 256 +
  5895                           ;main.c: 3002: Read_b_eep(0x43 + 46 + 15u);
  5896  002F5C  6A09               	clrf	?_Read_b_eep+1,c
  5897  002F5E  0E80               	movlw	128
  5898  002F60  6E08               	movwf	?_Read_b_eep,c
  5899  002F62  EC70  F024         	call	_Read_b_eep	;wreg free
  5900  002F66  6E0B               	movwf	??_doActionPulse& (0+255),c
  5901  002F68  6A09               	clrf	?_Read_b_eep+1,c
  5902  002F6A  0E7F               	movlw	127
  5903  002F6C  6E08               	movwf	?_Read_b_eep,c
  5904  002F6E  EC70  F024         	call	_Read_b_eep	;wreg free
  5905  002F72  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5906  002F74  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5907  002F76  500B               	movf	??_doActionPulse,w,c
  5908  002F78  240C               	addwf	??_doActionPulse+1,w,c
  5909  002F7A  0101               	movlb	1	; () banked
  5910  002F7C  6F0E               	movwf	(_channel_pulse_timer+14)& (0+255),b
  5911  002F7E  0E00               	movlw	0
  5912  002F80  200D               	addwfc	??_doActionPulse+2,w,c
  5913  002F82  6F0F               	movwf	(_channel_pulse_timer+15)& (0+255),b
  5914                           
  5915                           ;main.c: 3004: break;
  5916  002F84  D04A               	goto	l14580
  5917  002F86                     l957:
  5918                           
  5919                           ;main.c: 3007: PORTAbits.RA2 = 0;
  5920  002F86  9480               	bcf	3968,2,c	;volatile
  5921                           
  5922                           ;main.c: 3008: channel_pulse_flags |= 0x40;
  5923  002F88  0100               	movlb	0	; () banked
  5924  002F8A  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;main.c: 3009: channel_pulse_timer[ 8 ] =
  5928                           ;main.c: 3010: Read_b_eep(0x43 + 46 + 16u) * 256 +
  5929                           ;main.c: 3012: Read_b_eep(0x43 + 46 + 17u);
  5930  002F8C  6A09               	clrf	?_Read_b_eep+1,c
  5931  002F8E  0E82               	movlw	130
  5932  002F90  6E08               	movwf	?_Read_b_eep,c
  5933  002F92  EC70  F024         	call	_Read_b_eep	;wreg free
  5934  002F96  6E0B               	movwf	??_doActionPulse& (0+255),c
  5935  002F98  6A09               	clrf	?_Read_b_eep+1,c
  5936  002F9A  0E81               	movlw	129
  5937  002F9C  6E08               	movwf	?_Read_b_eep,c
  5938  002F9E  EC70  F024         	call	_Read_b_eep	;wreg free
  5939  002FA2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5940  002FA4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5941  002FA6  500B               	movf	??_doActionPulse,w,c
  5942  002FA8  240C               	addwf	??_doActionPulse+1,w,c
  5943  002FAA  0101               	movlb	1	; () banked
  5944  002FAC  6F10               	movwf	(_channel_pulse_timer+16)& (0+255),b
  5945  002FAE  0E00               	movlw	0
  5946  002FB0  200D               	addwfc	??_doActionPulse+2,w,c
  5947  002FB2  6F11               	movwf	(_channel_pulse_timer+17)& (0+255),b
  5948                           
  5949                           ;main.c: 3014: break;
  5950  002FB4  D032               	goto	l14580
  5951  002FB6                     l958:
  5952                           
  5953                           ;main.c: 3017: PORTAbits.RA2 = 0;
  5954  002FB6  9480               	bcf	3968,2,c	;volatile
  5955                           
  5956                           ;main.c: 3018: channel_pulse_flags |= 0x40;
  5957  002FB8  0100               	movlb	0	; () banked
  5958  002FBA  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;main.c: 3019: channel_pulse_timer[ 9 ] =
  5962                           ;main.c: 3020: Read_b_eep(0x43 + 46 + 18u) * 256 +
  5963                           ;main.c: 3022: Read_b_eep(0x43 + 46 + 19u);
  5964  002FBC  6A09               	clrf	?_Read_b_eep+1,c
  5965  002FBE  0E84               	movlw	132
  5966  002FC0  6E08               	movwf	?_Read_b_eep,c
  5967  002FC2  EC70  F024         	call	_Read_b_eep	;wreg free
  5968  002FC6  6E0B               	movwf	??_doActionPulse& (0+255),c
  5969  002FC8  6A09               	clrf	?_Read_b_eep+1,c
  5970  002FCA  0E83               	movlw	131
  5971  002FCC  6E08               	movwf	?_Read_b_eep,c
  5972  002FCE  EC70  F024         	call	_Read_b_eep	;wreg free
  5973  002FD2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  5974  002FD4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  5975  002FD6  500B               	movf	??_doActionPulse,w,c
  5976  002FD8  240C               	addwf	??_doActionPulse+1,w,c
  5977  002FDA  0101               	movlb	1	; () banked
  5978  002FDC  6F12               	movwf	(_channel_pulse_timer+18)& (0+255),b
  5979  002FDE  0E00               	movlw	0
  5980  002FE0  200D               	addwfc	??_doActionPulse+2,w,c
  5981  002FE2  6F13               	movwf	(_channel_pulse_timer+19)& (0+255),b
  5982                           
  5983                           ;main.c: 3024: break;
  5984  002FE4  D01A               	goto	l14580
  5985  002FE6                     l14578:
  5986  002FE6  5010               	movf	doActionPulse@i,w,c
  5987                           
  5988                           ; Switch size 1, requested type "space"
  5989                           ; Number of cases is 10, Range of values is 0 to 9
  5990                           ; switch strategies available:
  5991                           ; Name         Instructions Cycles
  5992                           ; simple_byte           31    16 (average)
  5993                           ;	Chosen strategy is simple_byte
  5994  002FE8  E101 D70D          	bz	l948
  5995  002FEC  0A01               	xorlw	1	; case 1
  5996  002FEE  E101 D722          	bz	l950
  5997  002FF2  0A03               	xorlw	3	; case 2
  5998  002FF4  E101 D737          	bz	l951
  5999  002FF8  0A01               	xorlw	1	; case 3
  6000  002FFA  E101 D74C          	bz	l952
  6001  002FFE  0A07               	xorlw	7	; case 4
  6002  003000  E101 D761          	bz	l953
  6003  003004  0A01               	xorlw	1	; case 5
  6004  003006  E101 D776          	bz	l954
  6005  00300A  0A03               	xorlw	3	; case 6
  6006  00300C  E08C               	bz	l955
  6007  00300E  0A01               	xorlw	1	; case 7
  6008  003010  E0A2               	bz	l956
  6009  003012  0A0F               	xorlw	15	; case 8
  6010  003014  E0B8               	bz	l957
  6011  003016  0A01               	xorlw	1	; case 9
  6012  003018  E0CE               	bz	l958
  6013  00301A                     l14580:
  6014  00301A  2A10               	incf	doActionPulse@i,f,c
  6015  00301C  0E07               	movlw	7
  6016  00301E  6410               	cpfsgt	doActionPulse@i,c
  6017  003020  D6CA               	goto	l14522
  6018  003022  0C07               	retlw	7
  6019  003024                     __end_of_doActionPulse:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           intcon	equ	0xFF2
  6028                           intcon2	equ	0xFF1
  6029                           postinc0	equ	0xFEE
  6030                           wreg	equ	0xFE8
  6031                           indf1	equ	0xFE7
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           plusw2	equ	0xFDB
  6038                           fsr2h	equ	0xFDA
  6039                           fsr2l	equ	0xFD9
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _doActionOn *****************
  6043 ;; Defined at:
  6044 ;;		line 2659 in file "../main.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  dmflags         1    wreg     unsigned char 
  6047 ;;  arg             1   78[COMRAM] unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  dmflags         1   25[BANK0 ] unsigned char 
  6050 ;;  i               1   27[BANK0 ] unsigned char 
  6051 ;;  val             1   26[BANK0 ] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;		None               void
  6054 ;; Registers used:
  6055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : F/0
  6058 ;;		On exit  : F/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6061 ;;      Params:         1       0       0       0       0       0       0
  6062 ;;      Locals:         0       3       0       0       0       0       0
  6063 ;;      Temps:          0       3       0       0       0       0       0
  6064 ;;      Totals:         1       6       0       0       0       0       0
  6065 ;;Total ram usage:        7 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    7
  6068 ;; This function calls:
  6069 ;;		_Read_b_eep
  6070 ;;		_SendInformationEvent
  6071 ;; This function is called by:
  6072 ;;		_doDM
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text12
  6077  0027D8                     __ptext12:
  6078                           	opt stack 0
  6079  0027D8                     _doActionOn:
  6080                           	opt stack 21
  6081                           
  6082                           ;incstack = 0
  6083                           ;incstack = 0
  6084                           ;doActionOn@dmflags stored from wreg
  6085  0027D8  CFE8 F0D5          	movff	wreg,doActionOn@dmflags
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;main.c: 2661: unsigned char i;
  6089                           ;main.c: 2662: unsigned char val;
  6090                           ;main.c: 2664: for (i = 0; i < 8; i++) {
  6091  0027DC  6BD7               	clrf	doActionOn@i& (0+255),b
  6092  0027DE                     l14452:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;main.c: 2667: if ( !( arg & ( 1 << i ) ) ) continue;
  6096  0027DE  C0D7  F0D2         	movff	doActionOn@i,??_doActionOn
  6097  0027E2  0E01               	movlw	1
  6098  0027E4  6FD3               	movwf	(??_doActionOn+1)& (0+255),b
  6099  0027E6  2BD2               	incf	??_doActionOn& (0+255),f,b
  6100  0027E8  D002               	goto	u18964
  6101  0027EA                     u18965:
  6102  0027EA  90D8               	bcf	status,0,c
  6103  0027EC  37D3               	rlcf	(??_doActionOn+1)& (0+255),f,b
  6104  0027EE                     u18964:
  6105  0027EE  2FD2               	decfsz	??_doActionOn& (0+255),f,b
  6106  0027F0  D7FC               	goto	u18965
  6107  0027F2  51D3               	movf	(??_doActionOn+1)& (0+255),w,b
  6108  0027F4  144F               	andwf	doActionOn@arg,w,c
  6109  0027F6  E101 D17F          	bz	l14512
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;main.c: 2670: if ( dmflags & 0x08 ) {
  6113  0027FA  A7D5               	btfss	doActionOn@dmflags& (0+255),3,b
  6114  0027FC  D00C               	goto	l14460
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;main.c: 2671: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 3 + i) ) {
  6118  0027FE  0E46               	movlw	70
  6119  002800  25D7               	addwf	doActionOn@i& (0+255),w,b
  6120  002802  6E08               	movwf	?_Read_b_eep,c
  6121  002804  6A09               	clrf	?_Read_b_eep+1,c
  6122  002806  0E00               	movlw	0
  6123  002808  2209               	addwfc	?_Read_b_eep+1,f,c
  6124  00280A  EC70  F024         	call	_Read_b_eep	;wreg free
  6125  00280E  0100               	movlb	0	; () banked
  6126  002810  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6127  002812  E001 D171          	bnz	l14512
  6128  002816                     l14460:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;main.c: 2675: }
  6132                           ;main.c: 2676: }
  6133                           ;main.c: 2678: val = Read_b_eep(0x43 + 24 + i);
  6134  002816  0E5B               	movlw	91
  6135  002818  25D7               	addwf	doActionOn@i& (0+255),w,b
  6136  00281A  6E08               	movwf	?_Read_b_eep,c
  6137  00281C  6A09               	clrf	?_Read_b_eep+1,c
  6138  00281E  0E00               	movlw	0
  6139  002820  2209               	addwfc	?_Read_b_eep+1,f,c
  6140  002822  EC70  F024         	call	_Read_b_eep	;wreg free
  6141  002826  0100               	movlb	0	; () banked
  6142  002828  6FD6               	movwf	doActionOn@val& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;main.c: 2681: if ( !( val & 0x80 ) ) continue;
  6146  00282A  AFD6               	btfss	doActionOn@val& (0+255),7,b
  6147  00282C  D165               	goto	l14512
  6148  00282E  D140               	goto	l14508
  6149  002830                     l892:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;main.c: 2686: PORTBbits.RB0 = 1;
  6153  002830  8081               	bsf	3969,0,c	;volatile
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;main.c: 2688: if (Read_b_eep(0x43 + 24) & 0x04 ) {
  6157  002832  6A09               	clrf	?_Read_b_eep+1,c
  6158  002834  0E5B               	movlw	91
  6159  002836  6E08               	movwf	?_Read_b_eep,c
  6160  002838  EC70  F024         	call	_Read_b_eep	;wreg free
  6161  00283C  0100               	movlb	0	; () banked
  6162  00283E  6FD2               	movwf	??_doActionOn& (0+255),b
  6163  002840  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6164  002842  D151               	goto	l894
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 2689: channel_protection_timer[ 0 ] =
  6168                           ;main.c: 2690: Read_b_eep(0x43 + 46 + 20u) * 256 +
  6169                           ;main.c: 2692: Read_b_eep(0x43 + 46 + 21u);
  6170  002844  6A09               	clrf	?_Read_b_eep+1,c
  6171  002846  0E86               	movlw	134
  6172  002848  6E08               	movwf	?_Read_b_eep,c
  6173  00284A  EC70  F024         	call	_Read_b_eep	;wreg free
  6174  00284E  0100               	movlb	0	; () banked
  6175  002850  6FD2               	movwf	??_doActionOn& (0+255),b
  6176  002852  6A09               	clrf	?_Read_b_eep+1,c
  6177  002854  0E85               	movlw	133
  6178  002856  6E08               	movwf	?_Read_b_eep,c
  6179  002858  EC70  F024         	call	_Read_b_eep	;wreg free
  6180  00285C  0100               	movlb	0	; () banked
  6181  00285E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6182  002860  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6183  002862  51D2               	movf	??_doActionOn& (0+255),w,b
  6184  002864  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6185  002866  6F83               	movwf	_channel_protection_timer& (0+255),b
  6186  002868  0E00               	movlw	0
  6187  00286A  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6188  00286C  6F84               	movwf	(_channel_protection_timer+1)& (0+255),b
  6189  00286E  D13B               	goto	l894
  6190  002870                     l895:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;main.c: 2698: PORTBbits.RB1 = 1;
  6194  002870  8281               	bsf	3969,1,c	;volatile
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;main.c: 2700: if (Read_b_eep(0x43 + 25) & 0x04 ) {
  6198  002872  6A09               	clrf	?_Read_b_eep+1,c
  6199  002874  0E5C               	movlw	92
  6200  002876  6E08               	movwf	?_Read_b_eep,c
  6201  002878  EC70  F024         	call	_Read_b_eep	;wreg free
  6202  00287C  0100               	movlb	0	; () banked
  6203  00287E  6FD2               	movwf	??_doActionOn& (0+255),b
  6204  002880  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6205  002882  D131               	goto	l894
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 2701: channel_protection_timer[ 1 ] =
  6209                           ;main.c: 2702: Read_b_eep(0x43 + 46 + 22u) * 256 +
  6210                           ;main.c: 2704: Read_b_eep(0x43 + 46 + 23u);
  6211  002884  6A09               	clrf	?_Read_b_eep+1,c
  6212  002886  0E88               	movlw	136
  6213  002888  6E08               	movwf	?_Read_b_eep,c
  6214  00288A  EC70  F024         	call	_Read_b_eep	;wreg free
  6215  00288E  0100               	movlb	0	; () banked
  6216  002890  6FD2               	movwf	??_doActionOn& (0+255),b
  6217  002892  6A09               	clrf	?_Read_b_eep+1,c
  6218  002894  0E87               	movlw	135
  6219  002896  6E08               	movwf	?_Read_b_eep,c
  6220  002898  EC70  F024         	call	_Read_b_eep	;wreg free
  6221  00289C  0100               	movlb	0	; () banked
  6222  00289E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6223  0028A0  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6224  0028A2  51D2               	movf	??_doActionOn& (0+255),w,b
  6225  0028A4  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6226  0028A6  6F85               	movwf	(_channel_protection_timer+2)& (0+255),b
  6227  0028A8  0E00               	movlw	0
  6228  0028AA  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6229  0028AC  6F86               	movwf	(_channel_protection_timer+3)& (0+255),b
  6230  0028AE  D11B               	goto	l894
  6231  0028B0                     l897:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 2710: PORTCbits.RC3 = 1;
  6235  0028B0  8682               	bsf	3970,3,c	;volatile
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 2712: if (Read_b_eep(0x43 + 26) & 0x04 ) {
  6239  0028B2  6A09               	clrf	?_Read_b_eep+1,c
  6240  0028B4  0E5D               	movlw	93
  6241  0028B6  6E08               	movwf	?_Read_b_eep,c
  6242  0028B8  EC70  F024         	call	_Read_b_eep	;wreg free
  6243  0028BC  0100               	movlb	0	; () banked
  6244  0028BE  6FD2               	movwf	??_doActionOn& (0+255),b
  6245  0028C0  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6246  0028C2  D111               	goto	l894
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;main.c: 2713: channel_protection_timer[ 2 ] =
  6250                           ;main.c: 2714: Read_b_eep(0x43 + 46 + 24u) * 256 +
  6251                           ;main.c: 2716: Read_b_eep(0x43 + 46 + 25u);
  6252  0028C4  6A09               	clrf	?_Read_b_eep+1,c
  6253  0028C6  0E8A               	movlw	138
  6254  0028C8  6E08               	movwf	?_Read_b_eep,c
  6255  0028CA  EC70  F024         	call	_Read_b_eep	;wreg free
  6256  0028CE  0100               	movlb	0	; () banked
  6257  0028D0  6FD2               	movwf	??_doActionOn& (0+255),b
  6258  0028D2  6A09               	clrf	?_Read_b_eep+1,c
  6259  0028D4  0E89               	movlw	137
  6260  0028D6  6E08               	movwf	?_Read_b_eep,c
  6261  0028D8  EC70  F024         	call	_Read_b_eep	;wreg free
  6262  0028DC  0100               	movlb	0	; () banked
  6263  0028DE  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6264  0028E0  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6265  0028E2  51D2               	movf	??_doActionOn& (0+255),w,b
  6266  0028E4  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6267  0028E6  6F87               	movwf	(_channel_protection_timer+4)& (0+255),b
  6268  0028E8  0E00               	movlw	0
  6269  0028EA  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6270  0028EC  6F88               	movwf	(_channel_protection_timer+5)& (0+255),b
  6271  0028EE  D0FB               	goto	l894
  6272  0028F0                     l899:
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 2722: PORTCbits.RC4 = 1;
  6276  0028F0  8882               	bsf	3970,4,c	;volatile
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;main.c: 2724: if ( Read_b_eep(0x43 + 27) & 0x04 ) {
  6280  0028F2  6A09               	clrf	?_Read_b_eep+1,c
  6281  0028F4  0E5E               	movlw	94
  6282  0028F6  6E08               	movwf	?_Read_b_eep,c
  6283  0028F8  EC70  F024         	call	_Read_b_eep	;wreg free
  6284  0028FC  0100               	movlb	0	; () banked
  6285  0028FE  6FD2               	movwf	??_doActionOn& (0+255),b
  6286  002900  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6287  002902  D0F1               	goto	l894
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;main.c: 2725: channel_protection_timer[ 3 ] =
  6291                           ;main.c: 2726: Read_b_eep(0x43 + 46 + 26u) * 256 +
  6292                           ;main.c: 2728: Read_b_eep(0x43 + 46 + 27u);
  6293  002904  6A09               	clrf	?_Read_b_eep+1,c
  6294  002906  0E8C               	movlw	140
  6295  002908  6E08               	movwf	?_Read_b_eep,c
  6296  00290A  EC70  F024         	call	_Read_b_eep	;wreg free
  6297  00290E  0100               	movlb	0	; () banked
  6298  002910  6FD2               	movwf	??_doActionOn& (0+255),b
  6299  002912  6A09               	clrf	?_Read_b_eep+1,c
  6300  002914  0E8B               	movlw	139
  6301  002916  6E08               	movwf	?_Read_b_eep,c
  6302  002918  EC70  F024         	call	_Read_b_eep	;wreg free
  6303  00291C  0100               	movlb	0	; () banked
  6304  00291E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6305  002920  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6306  002922  51D2               	movf	??_doActionOn& (0+255),w,b
  6307  002924  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6308  002926  6F89               	movwf	(_channel_protection_timer+6)& (0+255),b
  6309  002928  0E00               	movlw	0
  6310  00292A  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6311  00292C  6F8A               	movwf	(_channel_protection_timer+7)& (0+255),b
  6312  00292E  D0DB               	goto	l894
  6313  002930                     l901:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;main.c: 2734: PORTCbits.RC5 = 1;
  6317  002930  8A82               	bsf	3970,5,c	;volatile
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;main.c: 2736: if (Read_b_eep(0x43 + 28) & 0x04 ) {
  6321  002932  6A09               	clrf	?_Read_b_eep+1,c
  6322  002934  0E5F               	movlw	95
  6323  002936  6E08               	movwf	?_Read_b_eep,c
  6324  002938  EC70  F024         	call	_Read_b_eep	;wreg free
  6325  00293C  0100               	movlb	0	; () banked
  6326  00293E  6FD2               	movwf	??_doActionOn& (0+255),b
  6327  002940  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6328  002942  D0D1               	goto	l894
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;main.c: 2737: channel_protection_timer[ 4 ] =
  6332                           ;main.c: 2738: Read_b_eep(0x43 + 46 + 28u) * 256 +
  6333                           ;main.c: 2740: Read_b_eep(0x43 + 46 + 29u);
  6334  002944  6A09               	clrf	?_Read_b_eep+1,c
  6335  002946  0E8E               	movlw	142
  6336  002948  6E08               	movwf	?_Read_b_eep,c
  6337  00294A  EC70  F024         	call	_Read_b_eep	;wreg free
  6338  00294E  0100               	movlb	0	; () banked
  6339  002950  6FD2               	movwf	??_doActionOn& (0+255),b
  6340  002952  6A09               	clrf	?_Read_b_eep+1,c
  6341  002954  0E8D               	movlw	141
  6342  002956  6E08               	movwf	?_Read_b_eep,c
  6343  002958  EC70  F024         	call	_Read_b_eep	;wreg free
  6344  00295C  0100               	movlb	0	; () banked
  6345  00295E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6346  002960  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6347  002962  51D2               	movf	??_doActionOn& (0+255),w,b
  6348  002964  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6349  002966  6F8B               	movwf	(_channel_protection_timer+8)& (0+255),b
  6350  002968  0E00               	movlw	0
  6351  00296A  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6352  00296C  6F8C               	movwf	(_channel_protection_timer+9)& (0+255),b
  6353  00296E  D0BB               	goto	l894
  6354  002970                     l903:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;main.c: 2746: PORTCbits.RC6 = 1;
  6358  002970  8C82               	bsf	3970,6,c	;volatile
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;main.c: 2748: if (Read_b_eep(0x43 + 29) & 0x04) {
  6362  002972  6A09               	clrf	?_Read_b_eep+1,c
  6363  002974  0E60               	movlw	96
  6364  002976  6E08               	movwf	?_Read_b_eep,c
  6365  002978  EC70  F024         	call	_Read_b_eep	;wreg free
  6366  00297C  0100               	movlb	0	; () banked
  6367  00297E  6FD2               	movwf	??_doActionOn& (0+255),b
  6368  002980  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6369  002982  D0B1               	goto	l894
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 2749: channel_protection_timer[ 5 ] =
  6373                           ;main.c: 2750: Read_b_eep(0x43 + 46 + 30u) * 256 +
  6374                           ;main.c: 2752: Read_b_eep(0x43 + 46 + 31u);
  6375  002984  6A09               	clrf	?_Read_b_eep+1,c
  6376  002986  0E90               	movlw	144
  6377  002988  6E08               	movwf	?_Read_b_eep,c
  6378  00298A  EC70  F024         	call	_Read_b_eep	;wreg free
  6379  00298E  0100               	movlb	0	; () banked
  6380  002990  6FD2               	movwf	??_doActionOn& (0+255),b
  6381  002992  6A09               	clrf	?_Read_b_eep+1,c
  6382  002994  0E8F               	movlw	143
  6383  002996  6E08               	movwf	?_Read_b_eep,c
  6384  002998  EC70  F024         	call	_Read_b_eep	;wreg free
  6385  00299C  0100               	movlb	0	; () banked
  6386  00299E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6387  0029A0  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6388  0029A2  51D2               	movf	??_doActionOn& (0+255),w,b
  6389  0029A4  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6390  0029A6  6F8D               	movwf	(_channel_protection_timer+10)& (0+255),b
  6391  0029A8  0E00               	movlw	0
  6392  0029AA  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6393  0029AC  6F8E               	movwf	(_channel_protection_timer+11)& (0+255),b
  6394  0029AE  D09B               	goto	l894
  6395  0029B0                     l905:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;main.c: 2758: PORTCbits.RC7 = 1;
  6399  0029B0  8E82               	bsf	3970,7,c	;volatile
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 2760: if ( Read_b_eep(0x43 + 30) & 0x04) {
  6403  0029B2  6A09               	clrf	?_Read_b_eep+1,c
  6404  0029B4  0E61               	movlw	97
  6405  0029B6  6E08               	movwf	?_Read_b_eep,c
  6406  0029B8  EC70  F024         	call	_Read_b_eep	;wreg free
  6407  0029BC  0100               	movlb	0	; () banked
  6408  0029BE  6FD2               	movwf	??_doActionOn& (0+255),b
  6409  0029C0  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6410  0029C2  D091               	goto	l894
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 2761: channel_protection_timer[ 6 ] =
  6414                           ;main.c: 2762: Read_b_eep(0x43 + 46 + 32u) * 256 +
  6415                           ;main.c: 2764: Read_b_eep(0x43 + 46 + 33u);
  6416  0029C4  6A09               	clrf	?_Read_b_eep+1,c
  6417  0029C6  0E92               	movlw	146
  6418  0029C8  6E08               	movwf	?_Read_b_eep,c
  6419  0029CA  EC70  F024         	call	_Read_b_eep	;wreg free
  6420  0029CE  0100               	movlb	0	; () banked
  6421  0029D0  6FD2               	movwf	??_doActionOn& (0+255),b
  6422  0029D2  6A09               	clrf	?_Read_b_eep+1,c
  6423  0029D4  0E91               	movlw	145
  6424  0029D6  6E08               	movwf	?_Read_b_eep,c
  6425  0029D8  EC70  F024         	call	_Read_b_eep	;wreg free
  6426  0029DC  0100               	movlb	0	; () banked
  6427  0029DE  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6428  0029E0  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6429  0029E2  51D2               	movf	??_doActionOn& (0+255),w,b
  6430  0029E4  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6431  0029E6  6F8F               	movwf	(_channel_protection_timer+12)& (0+255),b
  6432  0029E8  0E00               	movlw	0
  6433  0029EA  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6434  0029EC  6F90               	movwf	(_channel_protection_timer+13)& (0+255),b
  6435  0029EE  D07B               	goto	l894
  6436  0029F0                     l907:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;main.c: 2770: PORTAbits.RA2 = 1;
  6440  0029F0  8480               	bsf	3968,2,c	;volatile
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;main.c: 2772: if ( Read_b_eep(0x43 + 31) & 0x04) {
  6444  0029F2  6A09               	clrf	?_Read_b_eep+1,c
  6445  0029F4  0E62               	movlw	98
  6446  0029F6  6E08               	movwf	?_Read_b_eep,c
  6447  0029F8  EC70  F024         	call	_Read_b_eep	;wreg free
  6448  0029FC  0100               	movlb	0	; () banked
  6449  0029FE  6FD2               	movwf	??_doActionOn& (0+255),b
  6450  002A00  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6451  002A02  D071               	goto	l894
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;main.c: 2773: channel_protection_timer[ 7 ] =
  6455                           ;main.c: 2774: Read_b_eep(0x43 + 46 + 34u) * 256 +
  6456                           ;main.c: 2776: Read_b_eep(0x43 + 46 + 35u);
  6457  002A04  6A09               	clrf	?_Read_b_eep+1,c
  6458  002A06  0E94               	movlw	148
  6459  002A08  6E08               	movwf	?_Read_b_eep,c
  6460  002A0A  EC70  F024         	call	_Read_b_eep	;wreg free
  6461  002A0E  0100               	movlb	0	; () banked
  6462  002A10  6FD2               	movwf	??_doActionOn& (0+255),b
  6463  002A12  6A09               	clrf	?_Read_b_eep+1,c
  6464  002A14  0E93               	movlw	147
  6465  002A16  6E08               	movwf	?_Read_b_eep,c
  6466  002A18  EC70  F024         	call	_Read_b_eep	;wreg free
  6467  002A1C  0100               	movlb	0	; () banked
  6468  002A1E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6469  002A20  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6470  002A22  51D2               	movf	??_doActionOn& (0+255),w,b
  6471  002A24  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6472  002A26  6F91               	movwf	(_channel_protection_timer+14)& (0+255),b
  6473  002A28  0E00               	movlw	0
  6474  002A2A  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6475  002A2C  6F92               	movwf	(_channel_protection_timer+15)& (0+255),b
  6476  002A2E  D05B               	goto	l894
  6477  002A30                     l909:
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;main.c: 2782: PORTAbits.RA1 = 1;
  6481  002A30  8280               	bsf	3968,1,c	;volatile
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;main.c: 2784: if ( Read_b_eep(0x43 + 32) & 0x04) {
  6485  002A32  6A09               	clrf	?_Read_b_eep+1,c
  6486  002A34  0E63               	movlw	99
  6487  002A36  6E08               	movwf	?_Read_b_eep,c
  6488  002A38  EC70  F024         	call	_Read_b_eep	;wreg free
  6489  002A3C  0100               	movlb	0	; () banked
  6490  002A3E  6FD2               	movwf	??_doActionOn& (0+255),b
  6491  002A40  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6492  002A42  D051               	goto	l894
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 2785: channel_protection_timer[ 8 ] =
  6496                           ;main.c: 2786: Read_b_eep(0x43 + 46 + 36u) * 256 +
  6497                           ;main.c: 2788: Read_b_eep(0x43 + 46 + 37u);
  6498  002A44  6A09               	clrf	?_Read_b_eep+1,c
  6499  002A46  0E96               	movlw	150
  6500  002A48  6E08               	movwf	?_Read_b_eep,c
  6501  002A4A  EC70  F024         	call	_Read_b_eep	;wreg free
  6502  002A4E  0100               	movlb	0	; () banked
  6503  002A50  6FD2               	movwf	??_doActionOn& (0+255),b
  6504  002A52  6A09               	clrf	?_Read_b_eep+1,c
  6505  002A54  0E95               	movlw	149
  6506  002A56  6E08               	movwf	?_Read_b_eep,c
  6507  002A58  EC70  F024         	call	_Read_b_eep	;wreg free
  6508  002A5C  0100               	movlb	0	; () banked
  6509  002A5E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6510  002A60  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6511  002A62  51D2               	movf	??_doActionOn& (0+255),w,b
  6512  002A64  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6513  002A66  6F93               	movwf	(_channel_protection_timer+16)& (0+255),b
  6514  002A68  0E00               	movlw	0
  6515  002A6A  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6516  002A6C  6F94               	movwf	(_channel_protection_timer+17)& (0+255),b
  6517  002A6E  D03B               	goto	l894
  6518  002A70                     l911:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 2794: PORTAbits.RA2 = 1;
  6522  002A70  8480               	bsf	3968,2,c	;volatile
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;main.c: 2796: if ( Read_b_eep(0x43 + 33) & 0x04) {
  6526  002A72  6A09               	clrf	?_Read_b_eep+1,c
  6527  002A74  0E64               	movlw	100
  6528  002A76  6E08               	movwf	?_Read_b_eep,c
  6529  002A78  EC70  F024         	call	_Read_b_eep	;wreg free
  6530  002A7C  0100               	movlb	0	; () banked
  6531  002A7E  6FD2               	movwf	??_doActionOn& (0+255),b
  6532  002A80  A5D2               	btfss	??_doActionOn& (0+255),2,b
  6533  002A82  D031               	goto	l894
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;main.c: 2797: channel_protection_timer[ 9 ] =
  6537                           ;main.c: 2798: Read_b_eep(0x43 + 46 + 38u) * 256 +
  6538                           ;main.c: 2800: Read_b_eep(0x43 + 46 + 39u);
  6539  002A84  6A09               	clrf	?_Read_b_eep+1,c
  6540  002A86  0E98               	movlw	152
  6541  002A88  6E08               	movwf	?_Read_b_eep,c
  6542  002A8A  EC70  F024         	call	_Read_b_eep	;wreg free
  6543  002A8E  0100               	movlb	0	; () banked
  6544  002A90  6FD2               	movwf	??_doActionOn& (0+255),b
  6545  002A92  6A09               	clrf	?_Read_b_eep+1,c
  6546  002A94  0E97               	movlw	151
  6547  002A96  6E08               	movwf	?_Read_b_eep,c
  6548  002A98  EC70  F024         	call	_Read_b_eep	;wreg free
  6549  002A9C  0100               	movlb	0	; () banked
  6550  002A9E  6FD4               	movwf	(??_doActionOn+2)& (0+255),b
  6551  002AA0  6BD3               	clrf	(??_doActionOn+1)& (0+255),b
  6552  002AA2  51D2               	movf	??_doActionOn& (0+255),w,b
  6553  002AA4  25D3               	addwf	(??_doActionOn+1)& (0+255),w,b
  6554  002AA6  6F95               	movwf	(_channel_protection_timer+18)& (0+255),b
  6555  002AA8  0E00               	movlw	0
  6556  002AAA  21D4               	addwfc	(??_doActionOn+2)& (0+255),w,b
  6557  002AAC  6F96               	movwf	(_channel_protection_timer+19)& (0+255),b
  6558  002AAE  D01B               	goto	l894
  6559  002AB0                     l14508:
  6560                           
  6561                           ; BSR set to: 0
  6562  002AB0  51D7               	movf	doActionOn@i& (0+255),w,b
  6563                           
  6564                           ; Switch size 1, requested type "space"
  6565                           ; Number of cases is 10, Range of values is 0 to 9
  6566                           ; switch strategies available:
  6567                           ; Name         Instructions Cycles
  6568                           ; simple_byte           31    16 (average)
  6569                           ;	Chosen strategy is simple_byte
  6570  002AB2  E101 D6BD          	bz	l892
  6571  002AB6  0A01               	xorlw	1	; case 1
  6572  002AB8  E101 D6DA          	bz	l895
  6573  002ABC  0A03               	xorlw	3	; case 2
  6574  002ABE  E101 D6F7          	bz	l897
  6575  002AC2  0A01               	xorlw	1	; case 3
  6576  002AC4  E101 D714          	bz	l899
  6577  002AC8  0A07               	xorlw	7	; case 4
  6578  002ACA  E101 D731          	bz	l901
  6579  002ACE  0A01               	xorlw	1	; case 5
  6580  002AD0  E101 D74E          	bz	l903
  6581  002AD4  0A03               	xorlw	3	; case 6
  6582  002AD6  E101 D76B          	bz	l905
  6583  002ADA  0A01               	xorlw	1	; case 7
  6584  002ADC  E089               	bz	l907
  6585  002ADE  0A0F               	xorlw	15	; case 8
  6586  002AE0  E0A7               	bz	l909
  6587  002AE2  0A01               	xorlw	1	; case 9
  6588  002AE4  E0C5               	bz	l911
  6589  002AE6                     l894:
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 2808: if ( val & 0x08 ) {
  6593  002AE6  A7D6               	btfss	doActionOn@val& (0+255),3,b
  6594  002AE8  D007               	goto	l14512
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;main.c: 2809: SendInformationEvent( i, 20, 3 );
  6598  002AEA  0E14               	movlw	20
  6599  002AEC  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6600  002AEE  0E03               	movlw	3
  6601  002AF0  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6602  002AF2  51D7               	movf	doActionOn@i& (0+255),w,b
  6603  002AF4  ECB2  F021         	call	_SendInformationEvent
  6604  002AF8                     l14512:
  6605                           
  6606                           ; BSR set to: 0
  6607  002AF8  2BD7               	incf	doActionOn@i& (0+255),f,b
  6608                           
  6609                           ; BSR set to: 0
  6610  002AFA  0E07               	movlw	7
  6611  002AFC  65D7               	cpfsgt	doActionOn@i& (0+255),b
  6612  002AFE  D66F               	goto	l14452
  6613                           
  6614                           ; BSR set to: 0
  6615  002B00  0C07               	retlw	7
  6616  002B02                     __end_of_doActionOn:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           intcon2	equ	0xFF1
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           indf1	equ	0xFE7
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           plusw2	equ	0xFDB
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function _doActionOff *****************
  6640 ;; Defined at:
  6641 ;;		line 2820 in file "../main.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  dmflags         1    wreg     unsigned char 
  6644 ;;  arg             1   78[COMRAM] unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  dmflags         1   22[BANK0 ] unsigned char 
  6647 ;;  i               1   24[BANK0 ] unsigned char 
  6648 ;;  val             1   23[BANK0 ] unsigned char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : F/0
  6655 ;;		On exit  : F/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6658 ;;      Params:         1       0       0       0       0       0       0
  6659 ;;      Locals:         0       3       0       0       0       0       0
  6660 ;;      Temps:          2       0       0       0       0       0       0
  6661 ;;      Totals:         3       3       0       0       0       0       0
  6662 ;;Total ram usage:        6 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    7
  6665 ;; This function calls:
  6666 ;;		_Read_b_eep
  6667 ;;		_SendInformationEvent
  6668 ;; This function is called by:
  6669 ;;		_doApplicationOneSecondWork
  6670 ;;		_doDM
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text13
  6675  003FAE                     __ptext13:
  6676                           	opt stack 0
  6677  003FAE                     _doActionOff:
  6678                           	opt stack 21
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;incstack = 0
  6682                           ;incstack = 0
  6683                           ;doActionOff@dmflags stored from wreg
  6684  003FAE  CFE8 F0D2          	movff	wreg,doActionOff@dmflags
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;main.c: 2822: unsigned char i;
  6688                           ;main.c: 2823: unsigned char val;
  6689                           ;main.c: 2825: for ( i = 0; i < 8; i++ ) {
  6690  003FB2  6BD4               	clrf	doActionOff@i& (0+255),b
  6691  003FB4                     l13606:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 2828: if ( !( arg & ( 1 << i ) ) ) continue;
  6695  003FB4  C0D4  F050         	movff	doActionOff@i,??_doActionOff
  6696  003FB8  0E01               	movlw	1
  6697  003FBA  6E51               	movwf	(??_doActionOff+1)& (0+255),c
  6698  003FBC  2A50               	incf	??_doActionOff,f,c
  6699  003FBE  D002               	goto	u17714
  6700  003FC0                     u17715:
  6701  003FC0  90D8               	bcf	status,0,c
  6702  003FC2  3651               	rlcf	??_doActionOff+1,f,c
  6703  003FC4                     u17714:
  6704  003FC4  2E50               	decfsz	??_doActionOff,f,c
  6705  003FC6  D7FC               	goto	u17715
  6706  003FC8  5051               	movf	??_doActionOff+1,w,c
  6707  003FCA  144F               	andwf	doActionOff@arg,w,c
  6708  003FCC  E04B               	bz	l13626
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;main.c: 2831: if ( dmflags & 0x08 ) {
  6712  003FCE  A7D2               	btfss	doActionOff@dmflags& (0+255),3,b
  6713  003FD0  D00B               	goto	l13614
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;main.c: 2832: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 3 + i) ) {
  6717  003FD2  0E46               	movlw	70
  6718  003FD4  25D4               	addwf	doActionOff@i& (0+255),w,b
  6719  003FD6  6E08               	movwf	?_Read_b_eep,c
  6720  003FD8  6A09               	clrf	?_Read_b_eep+1,c
  6721  003FDA  0E00               	movlw	0
  6722  003FDC  2209               	addwfc	?_Read_b_eep+1,f,c
  6723  003FDE  EC70  F024         	call	_Read_b_eep	;wreg free
  6724  003FE2  0100               	movlb	0	; () banked
  6725  003FE4  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6726  003FE6  E13E               	bnz	l13626
  6727  003FE8                     l13614:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;main.c: 2836: }
  6731                           ;main.c: 2837: }
  6732                           ;main.c: 2839: val = Read_b_eep(0x43 + 24 + i);
  6733  003FE8  0E5B               	movlw	91
  6734  003FEA  25D4               	addwf	doActionOff@i& (0+255),w,b
  6735  003FEC  6E08               	movwf	?_Read_b_eep,c
  6736  003FEE  6A09               	clrf	?_Read_b_eep+1,c
  6737  003FF0  0E00               	movlw	0
  6738  003FF2  2209               	addwfc	?_Read_b_eep+1,f,c
  6739  003FF4  EC70  F024         	call	_Read_b_eep	;wreg free
  6740  003FF8  0100               	movlb	0	; () banked
  6741  003FFA  6FD3               	movwf	doActionOff@val& (0+255),b
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;main.c: 2842: if ( !( val & 0x80 ) ) continue;
  6745  003FFC  AFD3               	btfss	doActionOff@val& (0+255),7,b
  6746  003FFE  D032               	goto	l13626
  6747  004000  D014               	goto	l13622
  6748  004002                     l925:
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 2847: PORTBbits.RB0 = 0;
  6752  004002  9081               	bcf	3969,0,c	;volatile
  6753                           
  6754                           ;main.c: 2848: break;
  6755  004004  D026               	goto	l926
  6756  004006                     l927:
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;main.c: 2851: PORTBbits.RB1 = 0;
  6760  004006  9281               	bcf	3969,1,c	;volatile
  6761                           
  6762                           ;main.c: 2852: break;
  6763  004008  D024               	goto	l926
  6764  00400A                     l928:
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;main.c: 2855: PORTCbits.RC3 = 0;
  6768  00400A  9682               	bcf	3970,3,c	;volatile
  6769                           
  6770                           ;main.c: 2856: break;
  6771  00400C  D022               	goto	l926
  6772  00400E                     l929:
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;main.c: 2859: PORTCbits.RC4 = 0;
  6776  00400E  9882               	bcf	3970,4,c	;volatile
  6777                           
  6778                           ;main.c: 2860: break;
  6779  004010  D020               	goto	l926
  6780  004012                     l930:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;main.c: 2863: PORTCbits.RC5 = 0;
  6784  004012  9A82               	bcf	3970,5,c	;volatile
  6785                           
  6786                           ;main.c: 2864: break;
  6787  004014  D01E               	goto	l926
  6788  004016                     l931:
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;main.c: 2867: PORTCbits.RC6 = 0;
  6792  004016  9C82               	bcf	3970,6,c	;volatile
  6793                           
  6794                           ;main.c: 2868: break;
  6795  004018  D01C               	goto	l926
  6796  00401A                     l932:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;main.c: 2871: PORTCbits.RC7 = 0;
  6800  00401A  9E82               	bcf	3970,7,c	;volatile
  6801                           
  6802                           ;main.c: 2872: break;
  6803  00401C  D01A               	goto	l926
  6804  00401E                     l933:
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;main.c: 2875: PORTAbits.RA2 = 0;
  6808  00401E  9480               	bcf	3968,2,c	;volatile
  6809                           
  6810                           ;main.c: 2876: break;
  6811  004020  D018               	goto	l926
  6812  004022                     l934:
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 2879: PORTAbits.RA1 = 0;
  6816  004022  9280               	bcf	3968,1,c	;volatile
  6817                           
  6818                           ;main.c: 2880: break;
  6819  004024  D016               	goto	l926
  6820  004026                     l935:
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;main.c: 2883: PORTAbits.RA0 = 0;
  6824  004026  9080               	bcf	3968,0,c	;volatile
  6825                           
  6826                           ;main.c: 2884: break;
  6827  004028  D014               	goto	l926
  6828  00402A                     l13622:
  6829                           
  6830                           ; BSR set to: 0
  6831  00402A  51D4               	movf	doActionOff@i& (0+255),w,b
  6832                           
  6833                           ; Switch size 1, requested type "space"
  6834                           ; Number of cases is 10, Range of values is 0 to 9
  6835                           ; switch strategies available:
  6836                           ; Name         Instructions Cycles
  6837                           ; simple_byte           31    16 (average)
  6838                           ;	Chosen strategy is simple_byte
  6839  00402C  E0EA               	bz	l925
  6840  00402E  0A01               	xorlw	1	; case 1
  6841  004030  E0EA               	bz	l927
  6842  004032  0A03               	xorlw	3	; case 2
  6843  004034  E0EA               	bz	l928
  6844  004036  0A01               	xorlw	1	; case 3
  6845  004038  E0EA               	bz	l929
  6846  00403A  0A07               	xorlw	7	; case 4
  6847  00403C  E0EA               	bz	l930
  6848  00403E  0A01               	xorlw	1	; case 5
  6849  004040  E0EA               	bz	l931
  6850  004042  0A03               	xorlw	3	; case 6
  6851  004044  E0EA               	bz	l932
  6852  004046  0A01               	xorlw	1	; case 7
  6853  004048  E0EA               	bz	l933
  6854  00404A  0A0F               	xorlw	15	; case 8
  6855  00404C  E0EA               	bz	l934
  6856  00404E  0A01               	xorlw	1	; case 9
  6857  004050  E0EA               	bz	l935
  6858  004052                     l926:
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;main.c: 2888: if ( val & 0x10 ) {
  6862  004052  A9D3               	btfss	doActionOff@val& (0+255),4,b
  6863  004054  D007               	goto	l13626
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;main.c: 2889: SendInformationEvent( i, 20, 4 );
  6867  004056  0E14               	movlw	20
  6868  004058  6FD0               	movwf	?_SendInformationEvent& (0+255),b
  6869  00405A  0E04               	movlw	4
  6870  00405C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
  6871  00405E  51D4               	movf	doActionOff@i& (0+255),w,b
  6872  004060  ECB2  F021         	call	_SendInformationEvent
  6873  004064                     l13626:
  6874                           
  6875                           ; BSR set to: 0
  6876  004064  2BD4               	incf	doActionOff@i& (0+255),f,b
  6877                           
  6878                           ; BSR set to: 0
  6879  004066  0E07               	movlw	7
  6880  004068  65D4               	cpfsgt	doActionOff@i& (0+255),b
  6881  00406A  D7A4               	goto	l13606
  6882                           
  6883                           ; BSR set to: 0
  6884  00406C  0C07               	retlw	7
  6885  00406E                     __end_of_doActionOff:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon	equ	0xFF2
  6894                           intcon2	equ	0xFF1
  6895                           postinc0	equ	0xFEE
  6896                           wreg	equ	0xFE8
  6897                           indf1	equ	0xFE7
  6898                           fsr1h	equ	0xFE2
  6899                           fsr1l	equ	0xFE1
  6900                           indf2	equ	0xFDF
  6901                           postinc2	equ	0xFDE
  6902                           postdec2	equ	0xFDD
  6903                           plusw2	equ	0xFDB
  6904                           fsr2h	equ	0xFDA
  6905                           fsr2l	equ	0xFD9
  6906                           status	equ	0xFD8
  6907                           
  6908 ;; *************** function _vscp_handleProtocolEvent *****************
  6909 ;; Defined at:
  6910 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  bytes           1   48[BANK0 ] unsigned char 
  6915 ;;  page_save       2   44[BANK0 ] unsigned short 
  6916 ;;  i               1   54[BANK0 ] unsigned char 
  6917 ;;  bytes           2   58[BANK0 ] unsigned short 
  6918 ;;  page_save       2   42[BANK0 ] unsigned short 
  6919 ;;  byte            1   57[BANK0 ] unsigned char 
  6920 ;;  cb              1   53[BANK0 ] unsigned char 
  6921 ;;  bytes_this_t    1   52[BANK0 ] unsigned char 
  6922 ;;  j               1   62[BANK0 ] unsigned char 
  6923 ;;  i               1   60[BANK0 ] unsigned char 
  6924 ;;  k               1   55[BANK0 ] unsigned char 
  6925 ;;  i               1   56[BANK0 ] unsigned char 
  6926 ;;  len             1   51[BANK0 ] unsigned char 
  6927 ;;  pos             1   50[BANK0 ] unsigned char 
  6928 ;;  i               1   61[BANK0 ] unsigned char 
  6929 ;;  len             1   49[BANK0 ] unsigned char 
  6930 ;;  pos             1   47[BANK0 ] unsigned char 
  6931 ;;  offset          1   46[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;		None               void
  6934 ;; Registers used:
  6935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : F/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6941 ;;      Params:         0       0       0       0       0       0       0
  6942 ;;      Locals:         0      21       0       0       0       0       0
  6943 ;;      Temps:          0       7       0       0       0       0       0
  6944 ;;      Totals:         0      28       0       0       0       0       0
  6945 ;;Total ram usage:       28 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    9
  6948 ;; This function calls:
  6949 ;;		_vscp_init
  6950 ;;		_vscp_readAppReg
  6951 ;;		_vscp_writeAppReg
  6952 ;;		_vscp_sendEvent
  6953 ;;		_vscp_getGUID
  6954 ;;		_vscp_getMDF_URL
  6955 ;;		_vscp_goBootloaderMode
  6956 ;;		_vscp_getMatrixInfo
  6957 ;;		_vscp_handleHeartbeat
  6958 ;;		_vscp_handleSetNickname
  6959 ;;		_vscp_handleDropNickname
  6960 ;;		_vscp_newNodeOnline
  6961 ;;		_vscp_readRegister
  6962 ;;		_vscp_readStdReg
  6963 ;;		_vscp_writeRegister
  6964 ;;		_vscp_writeStdReg
  6965 ;;		___lbmod
  6966 ;; This function is called by:
  6967 ;;		_main
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text14
  6972  0019D2                     __ptext14:
  6973                           	opt stack 0
  6974  0019D2                     _vscp_handleProtocolEvent:
  6975                           	opt stack 20
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;incstack = 0
  6982                           ;incstack = 0
  6983  0019D2  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  6984  0019D4  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  6985  0019D6  E101 D2B5          	bz	l13266
  6986  0019DA  D2E4               	goto	l1496
  6987  0019DC                     l12848:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  6991  0019DC  EC66  F022         	call	_vscp_handleHeartbeat	;wreg free
  6992                           
  6993                           ;vscp_firmware.c: 807: break;
  6994  0019E0  D2E1               	goto	l1496
  6995  0019E2                     l12850:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  6999  0019E2  ECFA  F022         	call	_vscp_newNodeOnline	;wreg free
  7000                           
  7001                           ;vscp_firmware.c: 812: break;
  7002  0019E6  D2DE               	goto	l1496
  7003  0019E8                     l12852:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7007  0019E8  EC84  F023         	call	_vscp_handleSetNickname	;wreg free
  7008                           
  7009                           ;vscp_firmware.c: 817: break;
  7010  0019EC  D2DB               	goto	l1496
  7011  0019EE                     l12854:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7015  0019EE  EC9F  F022         	call	_vscp_handleDropNickname	;wreg free
  7016                           
  7017                           ;vscp_firmware.c: 822: break;
  7018  0019F2  D2D8               	goto	l1496
  7019  0019F4                     l12856:
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7023                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7024  0019F4  5197               	movf	_vscp_imsg& (0+255),w,b
  7025  0019F6  0B0F               	andlw	15
  7026  0019F8  0A02               	xorlw	2
  7027  0019FA  E001 D2D3          	bnz	l1496
  7028                           
  7029                           ; BSR set to: 0
  7030  0019FE  517E               	movf	_vscp_nickname& (0+255),w,b
  7031  001A00  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7032  001A04  62DF               	cpfseq	indf2,c
  7033  001A06  D2CE               	goto	l1496
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7037  001A08  0E80               	movlw	128
  7038  001A0A  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7039  001A0C  D012               	goto	l12876
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7043  001A0E  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7044  001A10  EC16  F01A         	call	_vscp_readAppReg
  7045  001A14                     L19:
  7046  001A14  0100               	movlb	0	; () banked
  7047  001A16                     L20:
  7048  001A16  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7052  001A18  C09E  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+5
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7056  001A1C  0E03               	movlw	3
  7057  001A1E  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7061  001A20  0E82               	movlw	130
  7062  001A22  6FA5               	movwf	_vscp_omsg& (0+255),b
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7066  001A24  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7067  001A26  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7071  001A28  0E0A               	movlw	10
  7072  001A2A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7073  001A2C                     l12874:
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7077  001A2C  EC71  F023         	call	_vscp_sendEvent	;wreg free
  7078                           
  7079                           ;vscp_firmware.c: 844: }
  7080  001A30  D2B9               	goto	l1496
  7081  001A32                     l12876:
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;vscp_firmware.c: 845: else {
  7085                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7086                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7087  001A32  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7088  001A34  ECEB  F01A         	call	_vscp_readStdReg
  7089  001A38  D7ED               	goto	L19
  7090  001A3A                     l12890:
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7094                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7095  001A3A  5197               	movf	_vscp_imsg& (0+255),w,b
  7096  001A3C  0B0F               	andlw	15
  7097  001A3E  0A03               	xorlw	3
  7098  001A40  E001 D2B0          	bnz	l1496
  7099                           
  7100                           ; BSR set to: 0
  7101  001A44  517E               	movf	_vscp_nickname& (0+255),w,b
  7102  001A46  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7103  001A4A  62DF               	cpfseq	indf2,c
  7104  001A4C  D2AB               	goto	l1496
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7108  001A4E  0E80               	movlw	128
  7109  001A50  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7110  001A52  D006               	goto	l12910
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7114                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7115  001A54  C09F  F04F         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7116  001A58  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7117  001A5A  EC11  F003         	call	_vscp_writeAppReg
  7118  001A5E  D7DB               	goto	L20
  7119  001A60                     l12910:
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;vscp_firmware.c: 888: else {
  7123                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7124                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7125  001A60  C09F  F036         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7126  001A64  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7127  001A66  EC54  F01F         	call	_vscp_writeStdReg
  7128  001A6A  D7D4               	goto	L19
  7129  001A6C                     l12924:
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7133                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7134                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7135                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7136                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7137                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7138                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7139  001A6C  517E               	movf	_vscp_nickname& (0+255),w,b
  7140  001A6E  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7141  001A72  62DF               	cpfseq	indf2,c
  7142  001A74  D297               	goto	l1496
  7143                           
  7144                           ; BSR set to: 0
  7145  001A76  0E00               	movlw	0
  7146  001A78  EC5D  F024         	call	_vscp_getGUID
  7147  001A7C  0100               	movlb	0	; () banked
  7148  001A7E  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7149  001A80  E001 D290          	bnz	l1496
  7150                           
  7151                           ; BSR set to: 0
  7152  001A84  0E03               	movlw	3
  7153  001A86  EC5D  F024         	call	_vscp_getGUID
  7154  001A8A  0100               	movlb	0	; () banked
  7155  001A8C  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7156  001A8E  E001 D289          	bnz	l1496
  7157                           
  7158                           ; BSR set to: 0
  7159  001A92  0E05               	movlw	5
  7160  001A94  EC5D  F024         	call	_vscp_getGUID
  7161  001A98  0100               	movlb	0	; () banked
  7162  001A9A  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7163  001A9C  E001 D282          	bnz	l1496
  7164                           
  7165                           ; BSR set to: 0
  7166  001AA0  0E07               	movlw	7
  7167  001AA2  EC5D  F024         	call	_vscp_getGUID
  7168  001AA6  0100               	movlb	0	; () banked
  7169  001AA8  19A2               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7170  001AAA  E001 D27B          	bnz	l1496
  7171                           
  7172                           ; BSR set to: 0
  7173  001AAE  5053               	movf	_vscp_page_select+1,w,c
  7174  001AB0  19A3               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7175  001AB2  E001 D277          	bnz	l1496
  7176                           
  7177                           ; BSR set to: 0
  7178  001AB6  5052               	movf	_vscp_page_select,w,c
  7179  001AB8  EE20  F0A4         	lfsr	2,_vscp_imsg+13
  7180  001ABC  62DF               	cpfseq	indf2,c
  7181  001ABE  D272               	goto	l1496
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7185  001AC0  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7186  001AC2  ECF5  F023         	call	_vscp_goBootloaderMode
  7187  001AC6  D26E               	goto	l1496
  7188  001AC8                     l12940:
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7192                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7193                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7194                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7195  001AC8  0E00               	movlw	0
  7196  001ACA  EC5D  F024         	call	_vscp_getGUID
  7197  001ACE  0100               	movlb	0	; () banked
  7198  001AD0  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7199  001AD2  E173               	bnz	l12984
  7200                           
  7201                           ; BSR set to: 0
  7202  001AD4  0E01               	movlw	1
  7203  001AD6  EC5D  F024         	call	_vscp_getGUID
  7204  001ADA  0100               	movlb	0	; () banked
  7205  001ADC  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7206  001ADE  E16D               	bnz	l12984
  7207                           
  7208                           ; BSR set to: 0
  7209  001AE0  0E02               	movlw	2
  7210  001AE2  EC5D  F024         	call	_vscp_getGUID
  7211  001AE6  0100               	movlb	0	; () banked
  7212  001AE8  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7213  001AEA  E167               	bnz	l12984
  7214                           
  7215                           ; BSR set to: 0
  7216  001AEC  0E03               	movlw	3
  7217  001AEE  EC5D  F024         	call	_vscp_getGUID
  7218  001AF2  0100               	movlb	0	; () banked
  7219  001AF4  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7220  001AF6  E161               	bnz	l12984
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7224  001AF8  897A               	bsf	_vscp_guid_reset& (0+255),4,b
  7225  001AFA  D05F               	goto	l12984
  7226  001AFC                     l12950:
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7230                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7231                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7232                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7233  001AFC  0E04               	movlw	4
  7234  001AFE  EC5D  F024         	call	_vscp_getGUID
  7235  001B02  0100               	movlb	0	; () banked
  7236  001B04  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7237  001B06  E159               	bnz	l12984
  7238                           
  7239                           ; BSR set to: 0
  7240  001B08  0E05               	movlw	5
  7241  001B0A  EC5D  F024         	call	_vscp_getGUID
  7242  001B0E  0100               	movlb	0	; () banked
  7243  001B10  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7244  001B12  E153               	bnz	l12984
  7245                           
  7246                           ; BSR set to: 0
  7247  001B14  0E06               	movlw	6
  7248  001B16  EC5D  F024         	call	_vscp_getGUID
  7249  001B1A  0100               	movlb	0	; () banked
  7250  001B1C  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7251  001B1E  E14D               	bnz	l12984
  7252                           
  7253                           ; BSR set to: 0
  7254  001B20  0E07               	movlw	7
  7255  001B22  EC5D  F024         	call	_vscp_getGUID
  7256  001B26  0100               	movlb	0	; () banked
  7257  001B28  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7258  001B2A  E147               	bnz	l12984
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7262  001B2C  8B7A               	bsf	_vscp_guid_reset& (0+255),5,b
  7263  001B2E  D045               	goto	l12984
  7264  001B30                     l12960:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7268                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7269                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7270                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7271  001B30  0E08               	movlw	8
  7272  001B32  EC5D  F024         	call	_vscp_getGUID
  7273  001B36  0100               	movlb	0	; () banked
  7274  001B38  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7275  001B3A  E13F               	bnz	l12984
  7276                           
  7277                           ; BSR set to: 0
  7278  001B3C  0E09               	movlw	9
  7279  001B3E  EC5D  F024         	call	_vscp_getGUID
  7280  001B42  0100               	movlb	0	; () banked
  7281  001B44  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7282  001B46  E139               	bnz	l12984
  7283                           
  7284                           ; BSR set to: 0
  7285  001B48  0E0A               	movlw	10
  7286  001B4A  EC5D  F024         	call	_vscp_getGUID
  7287  001B4E  0100               	movlb	0	; () banked
  7288  001B50  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7289  001B52  E133               	bnz	l12984
  7290                           
  7291                           ; BSR set to: 0
  7292  001B54  0E0B               	movlw	11
  7293  001B56  EC5D  F024         	call	_vscp_getGUID
  7294  001B5A  0100               	movlb	0	; () banked
  7295  001B5C  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7296  001B5E  E12D               	bnz	l12984
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7300  001B60  8D7A               	bsf	_vscp_guid_reset& (0+255),6,b
  7301  001B62  D02B               	goto	l12984
  7302  001B64                     l12970:
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7306                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7307                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7308                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7309  001B64  0E0C               	movlw	12
  7310  001B66  EC5D  F024         	call	_vscp_getGUID
  7311  001B6A  0100               	movlb	0	; () banked
  7312  001B6C  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7313  001B6E  E125               	bnz	l12984
  7314                           
  7315                           ; BSR set to: 0
  7316  001B70  0E0D               	movlw	13
  7317  001B72  EC5D  F024         	call	_vscp_getGUID
  7318  001B76  0100               	movlb	0	; () banked
  7319  001B78  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7320  001B7A  E11F               	bnz	l12984
  7321                           
  7322                           ; BSR set to: 0
  7323  001B7C  0E0E               	movlw	14
  7324  001B7E  EC5D  F024         	call	_vscp_getGUID
  7325  001B82  0100               	movlb	0	; () banked
  7326  001B84  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7327  001B86  E119               	bnz	l12984
  7328                           
  7329                           ; BSR set to: 0
  7330  001B88  0E0F               	movlw	15
  7331  001B8A  EC5D  F024         	call	_vscp_getGUID
  7332  001B8E  0100               	movlb	0	; () banked
  7333  001B90  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7334  001B92  E113               	bnz	l12984
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7338  001B94  8F7A               	bsf	_vscp_guid_reset& (0+255),7,b
  7339  001B96  D011               	goto	l12984
  7340  001B98                     l1436:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7344  001B98  6B7A               	clrf	_vscp_guid_reset& (0+255),b
  7345                           
  7346                           ;vscp_firmware.c: 965: break;
  7347  001B9A  D00F               	goto	l12984
  7348  001B9C                     l12982:
  7349                           
  7350                           ; BSR set to: 0
  7351  001B9C  399D               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7352  001B9E  0B0F               	andlw	15
  7353  001BA0  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7354  001BA2  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7355                           
  7356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7357                           ; Switch size 1, requested type "space"
  7358                           ; Number of cases is 1, Range of values is 0 to 0
  7359                           ; switch strategies available:
  7360                           ; Name         Instructions Cycles
  7361                           ; simple_byte            4     3 (average)
  7362                           ;	Chosen strategy is simple_byte
  7363  001BA4  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7364  001BA6  E1F8               	bnz	l1436
  7365                           
  7366                           ; BSR set to: 0
  7367                           ; Switch size 1, requested type "space"
  7368                           ; Number of cases is 4, Range of values is 0 to 3
  7369                           ; switch strategies available:
  7370                           ; Name         Instructions Cycles
  7371                           ; simple_byte           13     7 (average)
  7372                           ;	Chosen strategy is simple_byte
  7373  001BA8  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7374  001BAA  E08E               	bz	l12940
  7375  001BAC  0A01               	xorlw	1	; case 1
  7376  001BAE  E0A6               	bz	l12950
  7377  001BB0  0A03               	xorlw	3	; case 2
  7378  001BB2  E0BE               	bz	l12960
  7379  001BB4  0A01               	xorlw	1	; case 3
  7380  001BB6  E0D6               	bz	l12970
  7381  001BB8  D7EF               	goto	l1436
  7382  001BBA                     l12984:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7386  001BBA  517A               	movf	_vscp_guid_reset& (0+255),w,b
  7387  001BBC  0BF0               	andlw	240
  7388  001BBE  0AF0               	xorlw	240
  7389  001BC0  E001 D1F0          	bnz	l1496
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;vscp_firmware.c: 970: vscp_init();
  7393  001BC4  EC01  F022         	call	_vscp_init	;wreg free
  7394  001BC8  D1ED               	goto	l1496
  7395  001BCA                     l12988:
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7399  001BCA  517E               	movf	_vscp_nickname& (0+255),w,b
  7400  001BCC  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7401  001BD0  62DF               	cpfseq	indf2,c
  7402  001BD2  D1E8               	goto	l1496
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;vscp_firmware.c: 978: uint8_t i;
  7406                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7407  001BD4  6BEB               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7408                           
  7409                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7410  001BD6  C09E  F0EA         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7411                           
  7412                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7413  001BDA  C09F  F0ED         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7414                           
  7415                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7416  001BDE  6BF9               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7417  001BE0  D042               	goto	l13020
  7418  001BE2                     l12992:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7422  001BE2  0E07               	movlw	7
  7423  001BE4  6E08               	movwf	?___lbmod,c
  7424  001BE6  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7425  001BE8  EC24  F023         	call	___lbmod
  7426  001BEC  0100               	movlb	0	; () banked
  7427  001BEE  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7428  001BF0  51DF               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7429  001BF2  0FAB               	addlw	low (_vscp_omsg+6)
  7430  001BF4  6ED9               	movwf	fsr2l,c
  7431  001BF6  6ADA               	clrf	fsr2h,c
  7432  001BF8  51EA               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7433  001BFA  25F9               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7434  001BFC  EC03  F024         	call	_vscp_readRegister
  7435  001C00  6EDF               	movwf	indf2,c
  7436                           
  7437                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7438  001C02  0E07               	movlw	7
  7439  001C04  6E08               	movwf	?___lbmod,c
  7440  001C06  0100               	movlb	0	; () banked
  7441  001C08  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7442  001C0A  EC24  F023         	call	___lbmod
  7443  001C0E  0A06               	xorlw	6
  7444  001C10  E00B               	bz	l12998
  7445  001C12  0EFF               	movlw	255
  7446  001C14  0100               	movlb	0	; () banked
  7447  001C16  25ED               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7448  001C18  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7449  001C1A  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7450  001C1C  0EFF               	movlw	255
  7451  001C1E  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7452  001C20  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7453  001C22  19DF               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7454  001C24  11E0               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7455  001C26  E11E               	bnz	l13018
  7456  001C28                     l12998:
  7457                           
  7458                           ;vscp_firmware.c: 988: uint8_t bytes;
  7459                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7460  001C28  0E07               	movlw	7
  7461  001C2A  6E08               	movwf	?___lbmod,c
  7462  001C2C  0100               	movlb	0	; () banked
  7463  001C2E  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7464  001C30  EC24  F023         	call	___lbmod
  7465  001C34  0A06               	xorlw	6
  7466  001C36  E103               	bnz	l13002
  7467                           
  7468                           ;vscp_firmware.c: 991: bytes = 7;
  7469  001C38  0E07               	movlw	7
  7470  001C3A  0100               	movlb	0	; () banked
  7471  001C3C  D009               	goto	L21
  7472  001C3E                     l13002:
  7473                           
  7474                           ;vscp_firmware.c: 993: else {
  7475                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7476  001C3E  0E07               	movlw	7
  7477  001C40  6E08               	movwf	?___lbmod,c
  7478  001C42  0100               	movlb	0	; () banked
  7479  001C44  51F9               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7480  001C46  EC24  F023         	call	___lbmod
  7481  001C4A  0100               	movlb	0	; () banked
  7482  001C4C  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7483  001C4E  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7484  001C50                     L21:
  7485  001C50  6FEC               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;vscp_firmware.c: 995: }
  7489                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7490  001C52  51EC               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7491  001C54  0F81               	addlw	129
  7492  001C56  6FA5               	movwf	_vscp_omsg& (0+255),b
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7502  001C58  D9BC               	call	PL88	;call to abstracted procedure
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7506  001C5A  C0EB  F0AA         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  7510  001C5E  EC71  F023         	call	_vscp_sendEvent	;wreg free
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;vscp_firmware.c: 1005: pos++;
  7514  001C62  2BEB               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  7515  001C64                     l13018:
  7516                           
  7517                           ; BSR set to: 0
  7518  001C64  2BF9               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  7519  001C66                     l13020:
  7520                           
  7521                           ; BSR set to: 0
  7522  001C66  51ED               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  7523  001C68  5DF9               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7524  001C6A  E301 D19B          	bc	l1496
  7525  001C6E  D7B9               	goto	l12992
  7526  001C70                     l13022:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7530  001C70  517E               	movf	_vscp_nickname& (0+255),w,b
  7531  001C72  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7532  001C76  62DF               	cpfseq	indf2,c
  7533  001C78  D195               	goto	l1496
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;vscp_firmware.c: 1014: uint8_t i;
  7537                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  7538  001C7A  C09E  F0EE         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1489
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  7542  001C7E  5197               	movf	_vscp_imsg& (0+255),w,b
  7543  001C80  0FFE               	addlw	254
  7544  001C82  0B07               	andlw	7
  7545  001C84  6FEF               	movwf	vscp_handleProtocolEvent@len_1490& (0+255),b
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  7549  001C86  6BF4               	clrf	vscp_handleProtocolEvent@i_1488& (0+255),b
  7550  001C88  D016               	goto	l13036
  7551  001C8A                     l13030:
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  7555  001C8A  51F4               	movf	vscp_handleProtocolEvent@i_1488& (0+255),w,b
  7556  001C8C  0F9F               	addlw	low (_vscp_imsg+8)
  7557  001C8E  6ED9               	movwf	fsr2l,c
  7558  001C90  6ADA               	clrf	fsr2h,c
  7559  001C92  50DF               	movf	indf2,w,c
  7560  001C94  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  7561  001C96  51EE               	movf	vscp_handleProtocolEvent@pos_1489& (0+255),w,b
  7562  001C98  25F4               	addwf	vscp_handleProtocolEvent@i_1488& (0+255),w,b
  7563  001C9A  ECA8  F023         	call	_vscp_writeRegister
  7564                           
  7565                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  7566  001C9E  0100               	movlb	0	; () banked
  7567  001CA0  51F4               	movf	vscp_handleProtocolEvent@i_1488& (0+255),w,b
  7568  001CA2  0FAB               	addlw	low (_vscp_omsg+6)
  7569  001CA4  6ED9               	movwf	fsr2l,c
  7570  001CA6  6ADA               	clrf	fsr2h,c
  7571  001CA8  51EE               	movf	vscp_handleProtocolEvent@pos_1489& (0+255),w,b
  7572  001CAA  25F4               	addwf	vscp_handleProtocolEvent@i_1488& (0+255),w,b
  7573  001CAC  EC03  F024         	call	_vscp_readRegister
  7574  001CB0  6EDF               	movwf	indf2,c
  7575  001CB2  0100               	movlb	0	; () banked
  7576  001CB4  2BF4               	incf	vscp_handleProtocolEvent@i_1488& (0+255),f,b
  7577  001CB6                     l13036:
  7578                           
  7579                           ; BSR set to: 0
  7580  001CB6  51EF               	movf	vscp_handleProtocolEvent@len_1490& (0+255),w,b
  7581  001CB8  5DF4               	subwf	vscp_handleProtocolEvent@i_1488& (0+255),w,b
  7582  001CBA  E3E7               	bnc	l13030
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;vscp_firmware.c: 1022: }
  7586                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  7590                           
  7591                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  7592  001CBC  D98A               	call	PL88	;call to abstracted procedure
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  7596  001CBE  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  7600  001CC0  51EF               	movf	vscp_handleProtocolEvent@len_1490& (0+255),w,b
  7601  001CC2  0F81               	addlw	129
  7602  001CC4  6FA5               	movwf	_vscp_omsg& (0+255),b
  7603  001CC6  D6B2               	goto	l12874
  7604  001CC8                     l13048:
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7608  001CC8  517E               	movf	_vscp_nickname& (0+255),w,b
  7609  001CCA  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7610  001CCE  62DF               	cpfseq	indf2,c
  7611  001CD0  D169               	goto	l1496
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7615                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  7616                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  7617  001CD2  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7618  001CD4  EC16  F01A         	call	_vscp_readAppReg
  7619  001CD8  0100               	movlb	0	; () banked
  7620  001CDA  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7621  001CDC  29DF               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7622  001CDE  6E4F               	movwf	?_vscp_writeAppReg,c
  7623  001CE0  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7624  001CE2  EC11  F003         	call	_vscp_writeAppReg
  7625  001CE6  D697               	goto	L20
  7626  001CE8                     l13064:
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7630  001CE8  517E               	movf	_vscp_nickname& (0+255),w,b
  7631  001CEA  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7632  001CEE  62DF               	cpfseq	indf2,c
  7633  001CF0  D159               	goto	l1496
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  7637                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  7638                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  7639  001CF2  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7640  001CF4  EC16  F01A         	call	_vscp_readAppReg
  7641  001CF8  0100               	movlb	0	; () banked
  7642  001CFA  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7643  001CFC  05DF               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  7644  001CFE  6E4F               	movwf	?_vscp_writeAppReg,c
  7645  001D00  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  7646  001D02  EC11  F003         	call	_vscp_writeAppReg
  7647  001D06  D687               	goto	L20
  7648  001D08                     l13080:
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  7652                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  7653  001D08  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
  7654  001D0A  197E               	xorwf	_vscp_nickname& (0+255),w,b
  7655  001D0C  E003               	bz	l1460
  7656                           
  7657                           ; BSR set to: 0
  7658  001D0E  299D               	incf	(_vscp_imsg+6)& (0+255),w,b
  7659  001D10  E001 D148          	bnz	l1496
  7660  001D14                     l1460:
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  7664  001D14  6BF3               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  7668  001D16  0E03               	movlw	3
  7669  001D18  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7670                           
  7671                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  7672  001D1A  0E88               	movlw	136
  7673  001D1C  6FA5               	movwf	_vscp_omsg& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  7677  001D1E  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7678  001D20  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7679                           
  7680                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  7681  001D22  0E20               	movlw	32
  7682  001D24  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  7686  001D26  6BF8               	clrf	vscp_handleProtocolEvent@i_1491& (0+255),b
  7687  001D28                     l1461:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;vscp_firmware.c: 1091: {
  7691                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  7695  001D28  D95B               	call	PL118	;call to abstracted procedure
  7696  001D2A                     l13100:
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  7700  001D2A  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7701  001D2C  0FAA               	addlw	low (_vscp_omsg+5)
  7702  001D2E  6ED9               	movwf	fsr2l,c
  7703  001D30  6ADA               	clrf	fsr2h,c
  7704  001D32  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7705  001D34  080F               	sublw	15
  7706  001D36  EC5D  F024         	call	_vscp_getGUID
  7707  001D3A  6EDF               	movwf	indf2,c
  7708  001D3C  0100               	movlb	0	; () banked
  7709  001D3E  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;vscp_firmware.c: 1096: if (k > 16)
  7713  001D40  0E10               	movlw	16
  7714  001D42  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7715  001D44  D001               	goto	l13108
  7716  001D46  D004               	goto	l13112
  7717  001D48                     l13108:
  7718                           
  7719                           ; BSR set to: 0
  7720  001D48  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7721                           
  7722                           ; BSR set to: 0
  7723  001D4A  0E07               	movlw	7
  7724  001D4C  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7725  001D4E  D7ED               	goto	l13100
  7726  001D50                     l13112:
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;vscp_firmware.c: 1098: }
  7730                           ;vscp_firmware.c: 1100: if (k > 16)
  7731  001D50  0E10               	movlw	16
  7732  001D52  65F3               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  7733  001D54  D001               	goto	l13116
  7734  001D56  D006               	goto	l1462
  7735  001D58                     l13116:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  7739  001D58  EC71  F023         	call	_vscp_sendEvent	;wreg free
  7740                           
  7741                           ; BSR set to: 0
  7742  001D5C  2BF8               	incf	vscp_handleProtocolEvent@i_1491& (0+255),f,b
  7743                           
  7744                           ; BSR set to: 0
  7745  001D5E  0E02               	movlw	2
  7746  001D60  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1491& (0+255),b
  7747  001D62  D7E2               	goto	l1461
  7748  001D64                     l1462:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 1104: }
  7752                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  7753  001D64  6BFA               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  7754  001D66                     l13126:
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;vscp_firmware.c: 1107: {
  7758                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  7759  001D66  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7760  001D68  EC10  F024         	call	_vscp_getMDF_URL
  7761  001D6C  0900               	iorlw	0
  7762  001D6E  E008               	bz	l13130
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  7766  001D70  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7767  001D72  0FAD               	addlw	low (_vscp_omsg+8)
  7768  001D74  6ED9               	movwf	fsr2l,c
  7769  001D76  6ADA               	clrf	fsr2h,c
  7770  001D78  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7771  001D7A  EC10  F024         	call	_vscp_getMDF_URL
  7772  001D7E  D005               	goto	L22
  7773  001D80                     l13130:
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;vscp_firmware.c: 1110: else
  7777                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  7778  001D80  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7779  001D82  0FAD               	addlw	low (_vscp_omsg+8)
  7780  001D84  6ED9               	movwf	fsr2l,c
  7781  001D86  6ADA               	clrf	fsr2h,c
  7782  001D88  0E00               	movlw	0
  7783  001D8A                     L22:
  7784  001D8A  6EDF               	movwf	indf2,c
  7785                           
  7786                           ; BSR set to: 0
  7787  001D8C  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 0
  7790  001D8E  0E04               	movlw	4
  7791  001D90  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7792  001D92  D7E9               	goto	l13126
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;vscp_firmware.c: 1112: }
  7796                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  7797  001D94  EC71  F023         	call	_vscp_sendEvent	;wreg free
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;vscp_firmware.c: 1116: k = 5;
  7801  001D98  0E05               	movlw	5
  7802  001D9A  6FF3               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  7806  001D9C  0E03               	movlw	3
  7807  001D9E  6FF8               	movwf	vscp_handleProtocolEvent@i_1491& (0+255),b
  7808  001DA0                     l1471:
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;vscp_firmware.c: 1118: {
  7812                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  7816  001DA0  D91F               	call	PL118	;call to abstracted procedure
  7817  001DA2                     l13152:
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  7821  001DA2  51FA               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  7822  001DA4  0FAA               	addlw	low (_vscp_omsg+5)
  7823  001DA6  6ED9               	movwf	fsr2l,c
  7824  001DA8  6ADA               	clrf	fsr2h,c
  7825  001DAA  51F3               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  7826  001DAC  EC10  F024         	call	_vscp_getMDF_URL
  7827  001DB0  6EDF               	movwf	indf2,c
  7828                           
  7829                           ; BSR set to: 0
  7830  001DB2  2BF3               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  7831                           
  7832                           ; BSR set to: 0
  7833  001DB4  2BFA               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  7834                           
  7835                           ; BSR set to: 0
  7836  001DB6  0E07               	movlw	7
  7837  001DB8  65FA               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  7838  001DBA  D7F3               	goto	l13152
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 1123: }
  7842                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  7843  001DBC  EC71  F023         	call	_vscp_sendEvent	;wreg free
  7844                           
  7845                           ; BSR set to: 0
  7846  001DC0  2BF8               	incf	vscp_handleProtocolEvent@i_1491& (0+255),f,b
  7847                           
  7848                           ; BSR set to: 0
  7849  001DC2  0E06               	movlw	6
  7850  001DC4  65F8               	cpfsgt	vscp_handleProtocolEvent@i_1491& (0+255),b
  7851  001DC6  D7EC               	goto	l1471
  7852  001DC8  D0ED               	goto	l1496
  7853  001DCA                     l13166:
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7857  001DCA  517E               	movf	_vscp_nickname& (0+255),w,b
  7858  001DCC  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7859  001DD0  62DF               	cpfseq	indf2,c
  7860  001DD2  D0E8               	goto	l1496
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  7864  001DD4  0E03               	movlw	3
  7865  001DD6  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7866                           
  7867                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  7868  001DD8  0E87               	movlw	135
  7869  001DDA  6FA5               	movwf	_vscp_omsg& (0+255),b
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  7873  001DDC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  7874  001DDE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  7875                           
  7876                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  7877  001DE0  0E22               	movlw	34
  7878  001DE2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  7882  001DE4  0EAA               	movlw	(_vscp_omsg+5)& (0+255)
  7883  001DE6  ECB9  F023         	call	_vscp_getMatrixInfo
  7884  001DEA  D620               	goto	l12874
  7885  001DEC                     l13176:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  7889  001DEC  517E               	movf	_vscp_nickname& (0+255),w,b
  7890  001DEE  EE20  F09D         	lfsr	2,_vscp_imsg+6
  7891  001DF2  62DF               	cpfseq	indf2,c
  7892  001DF4  D0D7               	goto	l1496
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  7896  001DF6  6BF5               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  7900                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  7901  001DF8  C097  F0DF         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  7902  001DFC  0E0F               	movlw	15
  7903  001DFE  17DF               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  7904  001E00  0E04               	movlw	4
  7905  001E02  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7906  001E04  E312               	bnc	l13192
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  7910  001E06  C0A1  F0F6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1495
  7911  001E0A  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  7915  001E0C  51F7               	movf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),w,b
  7916  001E0E  11F6               	iorwf	vscp_handleProtocolEvent@bytes_1495& (0+255),w,b
  7917  001E10  E103               	bnz	l13188
  7918                           
  7919                           ; BSR set to: 0
  7920  001E12  0E01               	movlw	1
  7921  001E14  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),b
  7922  001E16  6BF6               	clrf	vscp_handleProtocolEvent@bytes_1495& (0+255),b
  7923  001E18                     l13188:
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  7927  001E18  0E01               	movlw	1
  7928  001E1A  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1495& (0+255),w,b
  7929  001E1C  0E01               	movlw	1
  7930  001E1E  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),w,b
  7931  001E20  E307               	bnc	l13194
  7932                           
  7933                           ; BSR set to: 0
  7934  001E22  0E01               	movlw	1
  7935  001E24  6FF7               	movwf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),b
  7936  001E26  0E00               	movlw	0
  7937  001E28  D002               	goto	L24
  7938  001E2A                     l13192:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;vscp_firmware.c: 1173: else {
  7942                           ;vscp_firmware.c: 1174: bytes = 1;
  7943  001E2A  6BF7               	clrf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),b
  7944  001E2C  0E01               	movlw	1
  7945  001E2E                     L24:
  7946  001E2E  6FF6               	movwf	vscp_handleProtocolEvent@bytes_1495& (0+255),b
  7947  001E30                     l13194:
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;vscp_firmware.c: 1175: }
  7951                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  7952  001E30  C052  F0E6         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  7953  001E34  C053  F0E7         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  7957  001E38  D8B6               	call	PL46	;call to abstracted procedure
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  7961  001E3A  0E07               	movlw	7
  7962  001E3C  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  7978  001E3E  D8BF               	call	PL56	;call to abstracted procedure
  7979  001E40                     l13210:
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  7983  001E40  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  7984  001E42  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1495& (0+255),w,b
  7985  001E44  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7986  001E46  0E00               	movlw	0
  7987  001E48  59F7               	subwfb	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),w,b
  7988  001E4A  6FE0               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7989  001E4C  0E04               	movlw	4
  7990  001E4E  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7991  001E50  0E00               	movlw	0
  7992  001E52  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7993  001E54  E302               	bnc	l13214
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  7997  001E56  0E04               	movlw	4
  7998  001E58  D002               	goto	L25
  7999  001E5A                     l13214:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;vscp_firmware.c: 1198: else {
  8003                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8004  001E5A  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8005  001E5C  5DF6               	subwf	vscp_handleProtocolEvent@bytes_1495& (0+255),w,b
  8006  001E5E                     L25:
  8007  001E5E  6FF0               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;vscp_firmware.c: 1200: }
  8011                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8012  001E60  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8013  001E62  0F84               	addlw	132
  8014  001E64  6FA5               	movwf	_vscp_omsg& (0+255),b
  8015                           
  8016                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8017                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8018  001E66  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  8019  001E68  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8020  001E6A  6FAD               	movwf	(_vscp_omsg+8)& (0+255),b
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8024  001E6C  6BF1               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8025  001E6E  D00C               	goto	l13222
  8026  001E70                     l13218:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8030                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8031  001E70  51F1               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8032  001E72  0FAE               	addlw	low (_vscp_omsg+9)
  8033  001E74  6ED9               	movwf	fsr2l,c
  8034  001E76  6ADA               	clrf	fsr2h,c
  8035  001E78  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  8036  001E7A  25F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8037  001E7C  25F1               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8038  001E7E  EC03  F024         	call	_vscp_readRegister
  8039  001E82  6EDF               	movwf	indf2,c
  8040  001E84  0100               	movlb	0	; () banked
  8041  001E86  2BF1               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8042  001E88                     l13222:
  8043                           
  8044                           ; BSR set to: 0
  8045  001E88  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8046  001E8A  5DF1               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8047  001E8C  E3F1               	bnc	l13218
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;vscp_firmware.c: 1211: }
  8051                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8052  001E8E  EC71  F023         	call	_vscp_sendEvent	;wreg free
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8056  001E92  51F0               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8057  001E94  27F5               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8061  001E96  2BAA               	incf	(_vscp_omsg+5)& (0+255),f,b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8065  001E98  51F5               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8066  001E9A  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8067  001E9C  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8068  001E9E  51F6               	movf	vscp_handleProtocolEvent@bytes_1495& (0+255),w,b
  8069  001EA0  5DDF               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8070  001EA2  51F7               	movf	(vscp_handleProtocolEvent@bytes_1495+1)& (0+255),w,b
  8071  001EA4  59E0               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8072  001EA6  E3CC               	bnc	l13210
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8076  001EA8  C0E6  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8077  001EAC  C0E7  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8078  001EB0  D079               	goto	l1496
  8079  001EB2                     l13232:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8083  001EB2  517E               	movf	_vscp_nickname& (0+255),w,b
  8084  001EB4  EE20  F09D         	lfsr	2,_vscp_imsg+6
  8085  001EB8  62DF               	cpfseq	indf2,c
  8086  001EBA  D074               	goto	l1496
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;vscp_firmware.c: 1234: uint8_t i;
  8090                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8091                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8092  001EBC  C052  F0E8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1500
  8093  001EC0  C053  F0E9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1500+1
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8097  001EC4  D870               	call	PL46	;call to abstracted procedure
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8101  001EC6  C0A0  F0F2         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1499
  8102                           
  8103                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8104                           ;vscp_firmware.c: 1248: i++) {
  8105  001ECA  D014               	goto	l13244
  8106  001ECC                     l13240:
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8110                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8111  001ECC  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  8112  001ECE  08A1               	sublw	low (_vscp_imsg+10)
  8113  001ED0  25F2               	addwf	vscp_handleProtocolEvent@i_1499& (0+255),w,b
  8114  001ED2  6ED9               	movwf	fsr2l,c
  8115  001ED4  6ADA               	clrf	fsr2h,c
  8116  001ED6  50DF               	movf	indf2,w,c
  8117  001ED8  6FDE               	movwf	?_vscp_writeRegister& (0+255),b
  8118  001EDA  51F2               	movf	vscp_handleProtocolEvent@i_1499& (0+255),w,b
  8119  001EDC  ECA8  F023         	call	_vscp_writeRegister
  8120  001EE0  0100               	movlb	0	; () banked
  8121  001EE2  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8122  001EE4  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  8123  001EE6  08AE               	sublw	low (_vscp_omsg+9)
  8124  001EE8  25F2               	addwf	vscp_handleProtocolEvent@i_1499& (0+255),w,b
  8125  001EEA  6ED9               	movwf	fsr2l,c
  8126  001EEC  6ADA               	clrf	fsr2h,c
  8127  001EEE  C0DF  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8128                           
  8129                           ; BSR set to: 0
  8130  001EF2  2BF2               	incf	vscp_handleProtocolEvent@i_1499& (0+255),f,b
  8131  001EF4                     l13244:
  8132                           
  8133                           ; BSR set to: 0
  8134  001EF4  5197               	movf	_vscp_imsg& (0+255),w,b
  8135  001EF6  0B0F               	andlw	15
  8136  001EF8  6FDF               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8137  001EFA  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8138  001EFC  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  8139  001EFE  27DF               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8140  001F00  0E00               	movlw	0
  8141  001F02  23E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8142  001F04  0EFC               	movlw	252
  8143  001F06  25DF               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8144  001F08  6FE1               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8145  001F0A  0EFF               	movlw	255
  8146  001F0C  21E0               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8147  001F0E  6FE2               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8148  001F10  51F2               	movf	vscp_handleProtocolEvent@i_1499& (0+255),w,b
  8149  001F12  6FE3               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8150  001F14  6BE4               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8151  001F16  51E4               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8152  001F18  0A80               	xorlw	128
  8153  001F1A  6FE5               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8154  001F1C  51E1               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8155  001F1E  5DE3               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8156  001F20  51E2               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8157  001F22  0A80               	xorlw	128
  8158  001F24  59E5               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8159  001F26  E3D2               	bnc	l13240
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;vscp_firmware.c: 1251: }
  8163                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8164  001F28  C0E8  F052         	movff	vscp_handleProtocolEvent@page_save_1500,_vscp_page_select
  8165  001F2C  C0E9  F053         	movff	vscp_handleProtocolEvent@page_save_1500+1,_vscp_page_select+1
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8169  001F30  0E07               	movlw	7
  8170  001F32  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8174  001F34  5197               	movf	_vscp_imsg& (0+255),w,b
  8175  001F36  0B0F               	andlw	15
  8176  001F38  0F80               	addlw	128
  8177  001F3A  6FA5               	movwf	_vscp_omsg& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8193  001F3C  D840               	call	PL56	;call to abstracted procedure
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8197  001F3E  C0A0  F0AD         	movff	_vscp_imsg+9,_vscp_omsg+8
  8198  001F42  D574               	goto	l12874
  8199  001F44                     l13266:
  8200                           
  8201                           ; BSR set to: 0
  8202  001F44  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  8203                           
  8204                           ; Switch size 1, requested type "space"
  8205                           ; Number of cases is 16, Range of values is 1 to 38
  8206                           ; switch strategies available:
  8207                           ; Name         Instructions Cycles
  8208                           ; simple_byte           49    25 (average)
  8209                           ;	Chosen strategy is simple_byte
  8210  001F46  0A01               	xorlw	1	; case 1
  8211  001F48  E101 D548          	bz	l12848
  8212  001F4C  0A03               	xorlw	3	; case 2
  8213  001F4E  E101 D548          	bz	l12850
  8214  001F52  0A04               	xorlw	4	; case 6
  8215  001F54  E101 D548          	bz	l12852
  8216  001F58  0A0E               	xorlw	14	; case 8
  8217  001F5A  E101 D548          	bz	l12854
  8218  001F5E  0A01               	xorlw	1	; case 9
  8219  001F60  E101 D548          	bz	l12856
  8220  001F64  0A02               	xorlw	2	; case 11
  8221  001F66  E101 D568          	bz	l12890
  8222  001F6A  0A07               	xorlw	7	; case 12
  8223  001F6C  E101 D57E          	bz	l12924
  8224  001F70  0A1B               	xorlw	27	; case 23
  8225  001F72  E101 D613          	bz	l12982
  8226  001F76  0A0F               	xorlw	15	; case 24
  8227  001F78  E101 D627          	bz	l12988
  8228  001F7C  0A01               	xorlw	1	; case 25
  8229  001F7E  E101 D677          	bz	l13022
  8230  001F82  0A04               	xorlw	4	; case 29
  8231  001F84  E101 D6A0          	bz	l13048
  8232  001F88  0A03               	xorlw	3	; case 30
  8233  001F8A  E101 D6AD          	bz	l13064
  8234  001F8E  0A01               	xorlw	1	; case 31
  8235  001F90  E101 D6BA          	bz	l13080
  8236  001F94  0A3E               	xorlw	62	; case 33
  8237  001F96  E101 D718          	bz	l13166
  8238  001F9A  0A04               	xorlw	4	; case 37
  8239  001F9C  E101 D726          	bz	l13176
  8240  001FA0  0A03               	xorlw	3	; case 38
  8241  001FA2  E087               	bz	l13232
  8242  001FA4                     l1496:
  8243  001FA4  0012               	return	
  8244  001FA6                     __end_of_vscp_handleProtocolEvent:
  8245                           	opt stack 0
  8246  001FA6                     PL46:
  8247                           	opt stack 20
  8248  001FA6  519F               	movf	(_vscp_imsg+8)& (0+255),w,b
  8249  001FA8  C09E  F0DF         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8250  001FAC  6BE0               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8251  001FAE  C0DF  F0E0         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8252  001FB2  6BDF               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8253  001FB4  11DF               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8254  001FB6  6E52               	movwf	_vscp_page_select,c
  8255  001FB8  51E0               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8256  001FBA  6E53               	movwf	_vscp_page_select+1,c
  8257  001FBC  0012               	return	
  8258  001FBE                     __end_ofPL46:
  8259                           	opt stack 0
  8260  001FBE                     PL56:
  8261                           	opt stack 20
  8262  001FBE  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8263  001FC0  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8264  001FC2  0E27               	movlw	39
  8265  001FC4  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8266  001FC6  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  8267  001FC8  C09E  F0AB         	movff	_vscp_imsg+7,_vscp_omsg+6
  8268  001FCC  C09F  F0AC         	movff	_vscp_imsg+8,_vscp_omsg+7
  8269  001FD0  0012               	return	
  8270  001FD2                     __end_ofPL56:
  8271                           	opt stack 0
  8272  001FD2                     PL88:
  8273                           	opt stack 20
  8274  001FD2  0E07               	movlw	7
  8275  001FD4  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  8276  001FD6  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  8277  001FD8  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  8278  001FDA  0E1A               	movlw	26
  8279  001FDC  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  8280  001FDE  0C1A               	retlw	26
  8281  001FE0                     __end_ofPL88:
  8282                           	opt stack 0
  8283  001FE0                     PL118:
  8284                           	opt stack 20
  8285  001FE0  C0F8  F0AA         	movff	vscp_handleProtocolEvent@i_1491,_vscp_omsg+5
  8286  001FE4  0E01               	movlw	1
  8287  001FE6  6FFA               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8288  001FE8  0C01               	retlw	1
  8289  001FEA                     __end_ofPL118:
  8290                           	opt stack 0
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           intcon2	equ	0xFF1
  8299                           postinc0	equ	0xFEE
  8300                           wreg	equ	0xFE8
  8301                           indf1	equ	0xFE7
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           plusw2	equ	0xFDB
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function ___lbmod *****************
  8313 ;; Defined at:
  8314 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;  dividend        1    wreg     unsigned char 
  8317 ;;  divisor         1    7[COMRAM] unsigned char 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  dividend        1    8[COMRAM] unsigned char 
  8320 ;;  rem             1   10[COMRAM] unsigned char 
  8321 ;;  counter         1    9[COMRAM] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      unsigned char 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0
  8326 ;; Tracked objects:
  8327 ;;		On entry : F/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8331 ;;      Params:         1       0       0       0       0       0       0
  8332 ;;      Locals:         3       0       0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0
  8334 ;;      Totals:         4       0       0       0       0       0       0
  8335 ;;Total ram usage:        4 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    2
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_vscp_handleProtocolEvent
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text15
  8346  004648                     __ptext15:
  8347                           	opt stack 0
  8348  004648                     ___lbmod:
  8349                           	opt stack 26
  8350                           
  8351                           ;incstack = 0
  8352                           ;incstack = 0
  8353                           ;___lbmod@dividend stored from wreg
  8354  004648  CFE8 F009          	movff	wreg,___lbmod@dividend
  8355                           
  8356                           ; BSR set to: 0
  8357  00464C  0E08               	movlw	8
  8358  00464E  6E0A               	movwf	___lbmod@counter,c
  8359                           
  8360                           ; BSR set to: 0
  8361  004650  6A0B               	clrf	___lbmod@rem,c
  8362  004652                     l15096:
  8363  004652  90D8               	bcf	status,0,c
  8364  004654  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  8365  004656  340B               	rlcf	___lbmod@rem& (0+255),w,c
  8366  004658  6E0B               	movwf	___lbmod@rem,c
  8367  00465A  90D8               	bcf	status,0,c
  8368  00465C  3609               	rlcf	___lbmod@dividend,f,c
  8369  00465E  5008               	movf	___lbmod@divisor,w,c
  8370  004660  5C0B               	subwf	___lbmod@rem,w,c
  8371  004662  E302               	bnc	l15104
  8372  004664  5008               	movf	___lbmod@divisor,w,c
  8373  004666  5E0B               	subwf	___lbmod@rem,f,c
  8374  004668                     l15104:
  8375  004668  2E0A               	decfsz	___lbmod@counter,f,c
  8376  00466A  D7F3               	goto	l15096
  8377  00466C  500B               	movf	___lbmod@rem,w,c
  8378  00466E  0012               	return	
  8379  004670                     __end_of___lbmod:
  8380                           	opt stack 0
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           intcon	equ	0xFF2
  8388                           intcon2	equ	0xFF1
  8389                           postinc0	equ	0xFEE
  8390                           wreg	equ	0xFE8
  8391                           indf1	equ	0xFE7
  8392                           fsr1h	equ	0xFE2
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           plusw2	equ	0xFDB
  8398                           fsr2h	equ	0xFDA
  8399                           fsr2l	equ	0xFD9
  8400                           status	equ	0xFD8
  8401                           
  8402 ;; *************** function _vscp_writeRegister *****************
  8403 ;; Defined at:
  8404 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  reg             1    wreg     unsigned char 
  8407 ;;  value           1   34[BANK0 ] unsigned char 
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  reg             1   79[COMRAM] unsigned char 
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  1    wreg      unsigned char 
  8412 ;; Registers used:
  8413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : F/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8419 ;;      Params:         0       1       0       0       0       0       0
  8420 ;;      Locals:         1       0       0       0       0       0       0
  8421 ;;      Temps:          0       0       0       0       0       0       0
  8422 ;;      Totals:         1       1       0       0       0       0       0
  8423 ;;Total ram usage:        2 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    8
  8426 ;; This function calls:
  8427 ;;		_vscp_writeAppReg
  8428 ;;		_vscp_writeStdReg
  8429 ;; This function is called by:
  8430 ;;		_vscp_handleProtocolEvent
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           	psect	text16
  8435  004750                     __ptext16:
  8436                           	opt stack 0
  8437  004750                     _vscp_writeRegister:
  8438                           	opt stack 20
  8439                           
  8440                           ;incstack = 0
  8441                           ;incstack = 0
  8442                           ;vscp_writeRegister@reg stored from wreg
  8443  004750  CFE8 F050          	movff	wreg,vscp_writeRegister@reg
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8447  004754  0E7F               	movlw	127
  8448  004756  6450               	cpfsgt	vscp_writeRegister@reg,c
  8449  004758  D006               	goto	l15022
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8453  00475A  C0DE  F036         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8454  00475E  5050               	movf	vscp_writeRegister@reg,w,c
  8455  004760  EC54  F01F         	call	_vscp_writeStdReg
  8456  004764  D005               	goto	l1376
  8457  004766                     l15022:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;vscp_firmware.c: 705: else {
  8461                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8462  004766  C0DE  F04F         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8463  00476A  5050               	movf	vscp_writeRegister@reg,w,c
  8464  00476C  EC11  F003         	call	_vscp_writeAppReg
  8465  004770                     l1376:
  8466  004770  0012               	return	
  8467  004772                     __end_of_vscp_writeRegister:
  8468                           	opt stack 0
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           intcon	equ	0xFF2
  8476                           intcon2	equ	0xFF1
  8477                           postinc0	equ	0xFEE
  8478                           wreg	equ	0xFE8
  8479                           indf1	equ	0xFE7
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           plusw2	equ	0xFDB
  8486                           fsr2h	equ	0xFDA
  8487                           fsr2l	equ	0xFD9
  8488                           status	equ	0xFD8
  8489                           
  8490 ;; *************** function _vscp_writeStdReg *****************
  8491 ;; Defined at:
  8492 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;  reg             1    wreg     unsigned char 
  8495 ;;  value           1   53[COMRAM] unsigned char 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  reg             1   59[COMRAM] unsigned char 
  8498 ;;  rv              1   58[COMRAM] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      unsigned char 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : F/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8508 ;;      Params:         1       0       0       0       0       0       0
  8509 ;;      Locals:         2       0       0       0       0       0       0
  8510 ;;      Temps:          4       0       0       0       0       0       0
  8511 ;;      Totals:         7       0       0       0       0       0       0
  8512 ;;Total ram usage:        7 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    5
  8515 ;; This function calls:
  8516 ;;		_vscp_setGUID
  8517 ;;		_vscp_setManufacturerId
  8518 ;;		_vscp_getGUID
  8519 ;;		_vscp_getUserID
  8520 ;;		_vscp_setUserID
  8521 ;;		_vscp_getManufacturerId
  8522 ;;		_vscp_restoreDefaults
  8523 ;; This function is called by:
  8524 ;;		_vscp_writeRegister
  8525 ;;		_vscp_handleProtocolEvent
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text17
  8530  003EA8                     __ptext17:
  8531                           	opt stack 0
  8532  003EA8                     _vscp_writeStdReg:
  8533                           	opt stack 23
  8534                           
  8535                           ;incstack = 0
  8536                           ;incstack = 0
  8537                           ;vscp_writeStdReg@reg stored from wreg
  8538  003EA8  CFE8 F03C          	movff	wreg,vscp_writeStdReg@reg
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  8542  003EAC  1C36               	comf	vscp_writeStdReg@value,w,c
  8543  003EAE  6E3B               	movwf	vscp_writeStdReg@rv,c
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  8547                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  8548  003EB0  0E83               	movlw	131
  8549  003EB2  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8550  003EB4  D00E               	goto	l15034
  8551                           
  8552                           ; BSR set to: 0
  8553  003EB6  0E89               	movlw	137
  8554  003EB8  603C               	cpfslt	vscp_writeStdReg@reg,c
  8555  003EBA  D00B               	goto	l15034
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  8559  003EBC  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  8560  003EC0  503C               	movf	vscp_writeStdReg@reg,w,c
  8561  003EC2  0F7C               	addlw	124
  8562  003EC4  ECE7  F023         	call	_vscp_setUserID
  8563                           
  8564                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  8565  003EC8  503C               	movf	vscp_writeStdReg@reg,w,c
  8566  003ECA  0F7C               	addlw	124
  8567  003ECC  EC53  F024         	call	_vscp_getUserID
  8568  003ED0  D069               	goto	L31
  8569  003ED2                     l15034:
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  8573  003ED2  503C               	movf	vscp_writeStdReg@reg,w,c
  8574  003ED4  0A92               	xorlw	146
  8575  003ED6  E10D               	bnz	l15040
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  8579  003ED8  5036               	movf	vscp_writeStdReg@value,w,c
  8580  003EDA  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8581  003EDC  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8582  003EDE  5052               	movf	_vscp_page_select,w,c
  8583  003EE0  6E39               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  8584  003EE2  6A3A               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  8585  003EE4  1037               	iorwf	??_vscp_writeStdReg,w,c
  8586  003EE6  6E52               	movwf	_vscp_page_select,c
  8587  003EE8  5038               	movf	??_vscp_writeStdReg+1,w,c
  8588  003EEA  103A               	iorwf	??_vscp_writeStdReg+3,w,c
  8589  003EEC  6E53               	movwf	_vscp_page_select+1,c
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  8593  003EEE  5053               	movf	_vscp_page_select+1,w,c
  8594  003EF0  D059               	goto	L31
  8595  003EF2                     l15040:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  8599  003EF2  503C               	movf	vscp_writeStdReg@reg,w,c
  8600  003EF4  0A93               	xorlw	147
  8601  003EF6  E10B               	bnz	l15046
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  8605  003EF8  6A37               	clrf	??_vscp_writeStdReg& (0+255),c
  8606  003EFA  5053               	movf	_vscp_page_select+1,w,c
  8607  003EFC  6E38               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  8608  003EFE  5036               	movf	vscp_writeStdReg@value,w,c
  8609  003F00  1037               	iorwf	??_vscp_writeStdReg,w,c
  8610  003F02  6E52               	movwf	_vscp_page_select,c
  8611  003F04  5038               	movf	??_vscp_writeStdReg+1,w,c
  8612  003F06  6E53               	movwf	_vscp_page_select+1,c
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  8616  003F08  C052  F03B         	movff	_vscp_page_select,vscp_writeStdReg@rv
  8617                           
  8618                           ;vscp_firmware.c: 737: }
  8619  003F0C  D04E               	goto	l15088
  8620  003F0E                     l15046:
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  8624  003F0E  0E88               	movlw	136
  8625  003F10  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8626  003F12  D019               	goto	l15058
  8627                           
  8628                           ; BSR set to: 0
  8629  003F14  0E91               	movlw	145
  8630  003F16  603C               	cpfslt	vscp_writeStdReg@reg,c
  8631  003F18  D016               	goto	l15058
  8632                           
  8633                           ; BSR set to: 0
  8634                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8635                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  8636  003F1A  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8637  003F1E  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8638  003F22  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8639  003F24  2838               	incf	??_vscp_writeStdReg+1,w,c
  8640  003F26  E102               	bnz	l15054
  8641                           
  8642                           ; BSR set to: 0
  8643  003F28  2852               	incf	_vscp_page_select,w,c
  8644  003F2A  E002               	bz	l15056
  8645  003F2C                     l15054:
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;vscp_firmware.c: 747: rv = ~value;
  8649  003F2C  1C36               	comf	vscp_writeStdReg@value,w,c
  8650  003F2E  D03A               	goto	L31
  8651  003F30                     l15056:
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;vscp_firmware.c: 749: else {
  8655                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  8656  003F30  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  8657  003F34  503C               	movf	vscp_writeStdReg@reg,w,c
  8658  003F36  0F77               	addlw	119
  8659  003F38  EC4B  F023         	call	_vscp_setManufacturerId
  8660                           
  8661                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  8662  003F3C  503C               	movf	vscp_writeStdReg@reg,w,c
  8663  003F3E  0F77               	addlw	119
  8664  003F40  EC49  F024         	call	_vscp_getManufacturerId
  8665  003F44  D02F               	goto	L31
  8666  003F46                     l15058:
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  8670  003F46  0ECF               	movlw	207
  8671  003F48  643C               	cpfsgt	vscp_writeStdReg@reg,c
  8672  003F4A  D017               	goto	l15070
  8673                           
  8674                           ; BSR set to: 0
  8675  003F4C  0EE0               	movlw	224
  8676  003F4E  603C               	cpfslt	vscp_writeStdReg@reg,c
  8677  003F50  D014               	goto	l15070
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  8681                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  8682  003F52  C053  F037         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  8683  003F56  C037  F038         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  8684  003F5A  6A39               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  8685  003F5C  2838               	incf	??_vscp_writeStdReg+1,w,c
  8686  003F5E  E1E6               	bnz	l15054
  8687                           
  8688                           ; BSR set to: 0
  8689  003F60  2852               	incf	_vscp_page_select,w,c
  8690  003F62  E1E4               	bnz	l15054
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;vscp_firmware.c: 762: else {
  8694                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  8695  003F64  C036  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  8696  003F68  503C               	movf	vscp_writeStdReg@reg,w,c
  8697  003F6A  0F30               	addlw	48
  8698  003F6C  EC5E  F023         	call	_vscp_setGUID
  8699                           
  8700                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  8701  003F70  503C               	movf	vscp_writeStdReg@reg,w,c
  8702  003F72  0F30               	addlw	48
  8703  003F74  EC5D  F024         	call	_vscp_getGUID
  8704  003F78  D015               	goto	L31
  8705  003F7A                     l15070:
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  8709  003F7A  503C               	movf	vscp_writeStdReg@reg,w,c
  8710  003F7C  0AA2               	xorlw	162
  8711  003F7E  E1D6               	bnz	l15054
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  8715  003F80  5036               	movf	vscp_writeStdReg@value,w,c
  8716  003F82  0A55               	xorlw	85
  8717  003F84  E104               	bnz	l15078
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  8721  003F86  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  8722  003F88  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;vscp_firmware.c: 771: rv = 0x55;
  8726  003F8A  0E55               	movlw	85
  8727  003F8C  D00B               	goto	L31
  8728  003F8E                     l15078:
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  8732  003F8E  5036               	movf	vscp_writeStdReg@value,w,c
  8733  003F90  0AAA               	xorlw	170
  8734  003F92  E10B               	bnz	l15088
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  8738  003F94  0EE8               	movlw	232
  8739  003F96  5D6C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  8740  003F98  0E03               	movlw	3
  8741  003F9A  596D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  8742  003F9C  E205               	bc	l1402
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  8746  003F9E  ECA0  F024         	call	_vscp_restoreDefaults	;wreg free
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;vscp_firmware.c: 776: rv = 0xaa;
  8750  003FA2  0EAA               	movlw	170
  8751  003FA4                     L31:
  8752  003FA4  6E3B               	movwf	vscp_writeStdReg@rv,c
  8753                           
  8754                           ;vscp_firmware.c: 777: }
  8755  003FA6  D001               	goto	l15088
  8756  003FA8                     l1402:
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;vscp_firmware.c: 778: else {
  8760                           ;vscp_firmware.c: 779: rv = 0;
  8761  003FA8  6A3B               	clrf	vscp_writeStdReg@rv,c
  8762  003FAA                     l15088:
  8763                           
  8764                           ;vscp_firmware.c: 787: }
  8765                           ;vscp_firmware.c: 789: return rv;
  8766  003FAA  503B               	movf	vscp_writeStdReg@rv,w,c
  8767  003FAC  0012               	return	
  8768  003FAE                     __end_of_vscp_writeStdReg:
  8769                           	opt stack 0
  8770                           tblptru	equ	0xFF8
  8771                           tblptrh	equ	0xFF7
  8772                           tblptrl	equ	0xFF6
  8773                           tablat	equ	0xFF5
  8774                           prodh	equ	0xFF4
  8775                           prodl	equ	0xFF3
  8776                           intcon	equ	0xFF2
  8777                           intcon2	equ	0xFF1
  8778                           postinc0	equ	0xFEE
  8779                           wreg	equ	0xFE8
  8780                           indf1	equ	0xFE7
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           plusw2	equ	0xFDB
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _vscp_restoreDefaults *****************
  8792 ;; Defined at:
  8793 ;;		line 3553 in file "../main.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;		None               void
  8800 ;; Registers used:
  8801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : F/0
  8804 ;;		On exit  : F/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8807 ;;      Params:         0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    4
  8814 ;; This function calls:
  8815 ;;		_init_app_eeprom
  8816 ;;		_init_app_ram
  8817 ;; This function is called by:
  8818 ;;		_vscp_writeStdReg
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text18
  8823  004940                     __ptext18:
  8824                           	opt stack 0
  8825  004940                     _vscp_restoreDefaults:
  8826                           	opt stack 23
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;main.c: 3554: init_app_eeprom();
  8830                           
  8831                           ;incstack = 0
  8832                           ;incstack = 0
  8833  004940  EC6F  F01C         	call	_init_app_eeprom	;wreg free
  8834                           
  8835                           ;main.c: 3555: init_app_ram();
  8836  004944  EF81  F015         	goto	_init_app_ram	;wreg free
  8837  004948                     __end_of_vscp_restoreDefaults:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           indf1	equ	0xFE7
  8850                           fsr1h	equ	0xFE2
  8851                           fsr1l	equ	0xFE1
  8852                           indf2	equ	0xFDF
  8853                           postinc2	equ	0xFDE
  8854                           postdec2	equ	0xFDD
  8855                           plusw2	equ	0xFDB
  8856                           fsr2h	equ	0xFDA
  8857                           fsr2l	equ	0xFD9
  8858                           status	equ	0xFD8
  8859                           
  8860 ;; *************** function _init_app_ram *****************
  8861 ;; Defined at:
  8862 ;;		line 761 in file "../main.c"
  8863 ;; Parameters:    Size  Location     Type
  8864 ;;		None
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;  i               1   52[COMRAM] unsigned char 
  8867 ;;  dir             1   51[COMRAM] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : F/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8877 ;;      Params:         0       0       0       0       0       0       0
  8878 ;;      Locals:         2       0       0       0       0       0       0
  8879 ;;      Temps:         36       0       0       0       0       0       0
  8880 ;;      Totals:        38       0       0       0       0       0       0
  8881 ;;Total ram usage:       38 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    3
  8884 ;; This function calls:
  8885 ;;		_Read_b_eep
  8886 ;;		_memset
  8887 ;; This function is called by:
  8888 ;;		_main
  8889 ;;		_vscp_restoreDefaults
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text19
  8894  002B02                     __ptext19:
  8895                           	opt stack 0
  8896  002B02                     _init_app_ram:
  8897                           	opt stack 23
  8898                           
  8899                           ;main.c: 762: uint8_t i;
  8900                           ;main.c: 763: uint8_t dir;
  8901                           ;main.c: 765: measurement_clock_sec = 0;
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;incstack = 0
  8905                           ;incstack = 0
  8906  002B02  0100               	movlb	0	; () banked
  8907  002B04  6B64               	clrf	_measurement_clock_sec& (0+255),b	;volatile
  8908  002B06  6B65               	clrf	(_measurement_clock_sec+1)& (0+255),b	;volatile
  8909  002B08  6B66               	clrf	(_measurement_clock_sec+2)& (0+255),b	;volatile
  8910  002B0A  6B67               	clrf	(_measurement_clock_sec+3)& (0+255),b	;volatile
  8911                           
  8912                           ;main.c: 767: seconds = 0;
  8913  002B0C  6B78               	clrf	_seconds& (0+255),b
  8914                           
  8915                           ;main.c: 768: minutes = 0;
  8916  002B0E  6B77               	clrf	_minutes& (0+255),b
  8917                           
  8918                           ;main.c: 769: hours = 0;
  8919  002B10  6B76               	clrf	_hours& (0+255),b
  8920                           
  8921                           ;main.c: 771: channel_pulse_flags = 0;
  8922  002B12  6B68               	clrf	_channel_pulse_flags& (0+255),b
  8923  002B14  6B69               	clrf	(_channel_pulse_flags+1)& (0+255),b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;main.c: 774: memset( channel_pulse_timer, 0, sizeof( channel_pulse_timer ) );
  8927  002B16  0101               	movlb	1	; () banked
  8928  002B18  0E01               	movlw	high _channel_pulse_timer
  8929  002B1A  6E09               	movwf	?_memset+1,c
  8930  002B1C  0E00               	movlw	low _channel_pulse_timer
  8931  002B1E  D941               	call	PL108	;call to abstracted procedure
  8932  002B20  ECCE  F022         	call	_memset	;wreg free
  8933                           
  8934                           ;main.c: 775: memset( channel_protection_timer, 0, sizeof( channel_protection_timer ) );
  8935  002B24  0100               	movlb	0	; () banked
  8936  002B26  0E00               	movlw	high _channel_protection_timer
  8937  002B28  6E09               	movwf	?_memset+1,c
  8938  002B2A  0E83               	movlw	low _channel_protection_timer
  8939  002B2C  D93A               	call	PL108	;call to abstracted procedure
  8940  002B2E  ECCE  F022         	call	_memset	;wreg free
  8941                           
  8942                           ;main.c: 777: for ( i=0; i<10; i++ ) {
  8943  002B32  6A35               	clrf	init_app_ram@i,c
  8944  002B34                     l12692:
  8945                           
  8946                           ;main.c: 780: if ( Read_b_eep(0x43 + 24 + i) &
  8947                           ;main.c: 781: 0x01 ) {
  8948  002B34  0E5B               	movlw	91
  8949  002B36  2435               	addwf	init_app_ram@i,w,c
  8950  002B38  6E08               	movwf	?_Read_b_eep,c
  8951  002B3A  6A09               	clrf	?_Read_b_eep+1,c
  8952  002B3C  0E00               	movlw	0
  8953  002B3E  2209               	addwfc	?_Read_b_eep+1,f,c
  8954  002B40  EC70  F024         	call	_Read_b_eep	;wreg free
  8955  002B44  6E10               	movwf	??_init_app_ram& (0+255),c
  8956  002B46  A010               	btfss	??_init_app_ram,0,c
  8957  002B48  D02C               	goto	l12698
  8958                           
  8959                           ;main.c: 783: channel_pulse_flags |= (1<<i);
  8960  002B4A  C035  F010         	movff	init_app_ram@i,??_init_app_ram
  8961  002B4E  0E01               	movlw	1
  8962  002B50  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  8963  002B52  6A12               	clrf	(??_init_app_ram+2)& (0+255),c
  8964  002B54  2A10               	incf	??_init_app_ram,f,c
  8965  002B56  D003               	goto	u16154
  8966  002B58                     u16155:
  8967  002B58  90D8               	bcf	status,0,c
  8968  002B5A  3611               	rlcf	??_init_app_ram+1,f,c
  8969  002B5C  3612               	rlcf	??_init_app_ram+2,f,c
  8970  002B5E                     u16154:
  8971  002B5E  2E10               	decfsz	??_init_app_ram,f,c
  8972  002B60  D7FB               	goto	u16155
  8973  002B62  5011               	movf	??_init_app_ram+1,w,c
  8974  002B64  0100               	movlb	0	; () banked
  8975  002B66  1368               	iorwf	_channel_pulse_flags& (0+255),f,b
  8976  002B68  5012               	movf	??_init_app_ram+2,w,c
  8977  002B6A  1369               	iorwf	(_channel_pulse_flags+1)& (0+255),f,b
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;main.c: 784: channel_pulse_timer[ i ] =
  8981                           ;main.c: 785: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  8982                           ;main.c: 786: Read_b_eep(0x43 + 46 + 1u + i);
  8983  002B6C  0E71               	movlw	113
  8984  002B6E  2435               	addwf	init_app_ram@i,w,c
  8985  002B70  6E08               	movwf	?_Read_b_eep,c
  8986  002B72  6A09               	clrf	?_Read_b_eep+1,c
  8987  002B74  0E00               	movlw	0
  8988  002B76  2209               	addwfc	?_Read_b_eep+1,f,c
  8989  002B78  EC70  F024         	call	_Read_b_eep	;wreg free
  8990  002B7C  D909               	call	PL72	;call to abstracted procedure
  8991  002B7E  EC70  F024         	call	_Read_b_eep	;wreg free
  8992  002B82  2610               	addwf	??_init_app_ram,f,c
  8993  002B84  0E00               	movlw	0
  8994  002B86  2211               	addwfc	??_init_app_ram+1,f,c
  8995  002B88  5035               	movf	init_app_ram@i,w,c
  8996  002B8A  0D02               	mullw	2
  8997  002B8C  0101               	movlb	1	; () banked
  8998  002B8E  0E00               	movlw	low _channel_pulse_timer
  8999  002B90  24F3               	addwf	prodl,w,c
  9000  002B92  6ED9               	movwf	fsr2l,c
  9001  002B94  0E01               	movlw	high _channel_pulse_timer
  9002  002B96  20F4               	addwfc	prodh,w,c
  9003  002B98  6EDA               	movwf	fsr2h,c
  9004  002B9A  C010  FFDE         	movff	??_init_app_ram,postinc2
  9005  002B9E  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  9006  002BA2                     l12698:
  9007                           
  9008                           ;main.c: 787: }
  9009                           ;main.c: 790: if ( Read_b_eep(0x43 + 29 + i) & 0x04) {
  9010  002BA2  0E60               	movlw	96
  9011  002BA4  2435               	addwf	init_app_ram@i,w,c
  9012  002BA6  6E08               	movwf	?_Read_b_eep,c
  9013  002BA8  6A09               	clrf	?_Read_b_eep+1,c
  9014  002BAA  0E00               	movlw	0
  9015  002BAC  2209               	addwfc	?_Read_b_eep+1,f,c
  9016  002BAE  EC70  F024         	call	_Read_b_eep	;wreg free
  9017  002BB2  6E10               	movwf	??_init_app_ram& (0+255),c
  9018  002BB4  A410               	btfss	??_init_app_ram,2,c
  9019  002BB6  D019               	goto	l12702
  9020                           
  9021                           ;main.c: 791: channel_protection_timer[ i ] =
  9022                           ;main.c: 792: Read_b_eep(0x43 + 46 + 0u + i) * 256 +
  9023                           ;main.c: 793: Read_b_eep(0x43 + 46 + 1u + i);
  9024  002BB8  0E71               	movlw	113
  9025  002BBA  2435               	addwf	init_app_ram@i,w,c
  9026  002BBC  6E08               	movwf	?_Read_b_eep,c
  9027  002BBE  6A09               	clrf	?_Read_b_eep+1,c
  9028  002BC0  0E00               	movlw	0
  9029  002BC2  2209               	addwfc	?_Read_b_eep+1,f,c
  9030  002BC4  EC70  F024         	call	_Read_b_eep	;wreg free
  9031  002BC8  D8E3               	call	PL72	;call to abstracted procedure
  9032  002BCA  EC70  F024         	call	_Read_b_eep	;wreg free
  9033  002BCE  2610               	addwf	??_init_app_ram,f,c
  9034  002BD0  0E00               	movlw	0
  9035  002BD2  2211               	addwfc	??_init_app_ram+1,f,c
  9036  002BD4  5035               	movf	init_app_ram@i,w,c
  9037  002BD6  0D02               	mullw	2
  9038  002BD8  50F3               	movf	prodl,w,c
  9039  002BDA  0100               	movlb	0	; () banked
  9040  002BDC  0F83               	addlw	low _channel_protection_timer
  9041  002BDE  6ED9               	movwf	fsr2l,c
  9042  002BE0  6ADA               	clrf	fsr2h,c
  9043  002BE2  C010  FFDE         	movff	??_init_app_ram,postinc2
  9044  002BE6  C011  FFDD         	movff	??_init_app_ram+1,postdec2
  9045  002BEA                     l12702:
  9046  002BEA  2A35               	incf	init_app_ram@i,f,c
  9047  002BEC  0E09               	movlw	9
  9048  002BEE  6435               	cpfsgt	init_app_ram@i,c
  9049  002BF0  D7A1               	goto	l12692
  9050                           
  9051                           ;main.c: 794: }
  9052                           ;main.c: 796: }
  9053                           ;main.c: 798: dir = Read_b_eep(0x43 + 12);
  9054  002BF2  6A09               	clrf	?_Read_b_eep+1,c
  9055  002BF4  0E4F               	movlw	79
  9056  002BF6  6E08               	movwf	?_Read_b_eep,c
  9057  002BF8  EC70  F024         	call	_Read_b_eep	;wreg free
  9058  002BFC  6E34               	movwf	init_app_ram@dir,c
  9059                           
  9060                           ;main.c: 799: TRISA = ( dir & 0x03 ) | 0b00000000;
  9061  002BFE  5034               	movf	init_app_ram@dir,w,c
  9062  002C00  0B03               	andlw	3
  9063  002C02  6E92               	movwf	3986,c	;volatile
  9064                           
  9065                           ;main.c: 801: dir = Read_b_eep(0x43 + 13);
  9066  002C04  6A09               	clrf	?_Read_b_eep+1,c
  9067  002C06  0E50               	movlw	80
  9068  002C08  6E08               	movwf	?_Read_b_eep,c
  9069  002C0A  EC70  F024         	call	_Read_b_eep	;wreg free
  9070  002C0E  6E34               	movwf	init_app_ram@dir,c
  9071                           
  9072                           ;main.c: 802: TRISB = ( dir & 0x03 ) | 0b00001000;
  9073  002C10  5034               	movf	init_app_ram@dir,w,c
  9074  002C12  0B03               	andlw	3
  9075  002C14  0908               	iorlw	8
  9076  002C16  6E93               	movwf	3987,c	;volatile
  9077                           
  9078                           ;main.c: 805: if ( Read_b_eep(0x43 + 44) & 0x01 ) {
  9079  002C18  6A09               	clrf	?_Read_b_eep+1,c
  9080  002C1A  0E6F               	movlw	111
  9081  002C1C  6E08               	movwf	?_Read_b_eep,c
  9082  002C1E  EC70  F024         	call	_Read_b_eep	;wreg free
  9083  002C22  6E10               	movwf	??_init_app_ram& (0+255),c
  9084  002C24  B010               	btfsc	??_init_app_ram,0,c
  9085                           
  9086                           ;main.c: 806: INTCON2bits.RBPU = 0;
  9087  002C26  9EF1               	bcf	intcon2,7,c	;volatile
  9088                           
  9089                           ;main.c: 807: }
  9090                           ;main.c: 809: dir = ( Read_b_eep(0x43 + 13) << 1 ) & 0b11111000;
  9091  002C28  6A09               	clrf	?_Read_b_eep+1,c
  9092  002C2A  0E50               	movlw	80
  9093  002C2C  6E08               	movwf	?_Read_b_eep,c
  9094  002C2E  EC70  F024         	call	_Read_b_eep	;wreg free
  9095  002C32  6E10               	movwf	??_init_app_ram& (0+255),c
  9096  002C34  90D8               	bcf	status,0,c
  9097  002C36  3410               	rlcf	??_init_app_ram,w,c
  9098  002C38  0BF8               	andlw	248
  9099  002C3A  6E34               	movwf	init_app_ram@dir,c
  9100                           
  9101                           ;main.c: 810: TRISC = dir | 0b00000001;
  9102  002C3C  5034               	movf	init_app_ram@dir,w,c
  9103  002C3E  0901               	iorlw	1
  9104  002C40  6E94               	movwf	3988,c	;volatile
  9105                           
  9106                           ;main.c: 812: memset( debounce_cnt, 0, sizeof( debounce_cnt ) );
  9107  002C42  0100               	movlb	0	; () banked
  9108  002C44  0E00               	movlw	high _debounce_cnt
  9109  002C46  6E09               	movwf	?_memset+1,c
  9110  002C48  0EB2               	movlw	low _debounce_cnt
  9111  002C4A  6E08               	movwf	?_memset,c
  9112  002C4C  6A0B               	clrf	?_memset+3,c
  9113  002C4E  6A0A               	clrf	?_memset+2,c
  9114  002C50  6A0D               	clrf	?_memset+5,c
  9115  002C52  0E0A               	movlw	10
  9116  002C54  6E0C               	movwf	?_memset+4,c
  9117  002C56  ECCE  F022         	call	_memset	;wreg free
  9118                           
  9119                           ;main.c: 813: current_debounce = 0;
  9120  002C5A  0100               	movlb	0	; () banked
  9121  002C5C  6B75               	clrf	_current_debounce& (0+255),b
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;main.c: 816: current_iostate = ( PORTAbits.RA0 << 9 ) +
  9125                           ;main.c: 817: ( PORTAbits.RA1 << 8 ) +
  9126                           ;main.c: 818: ( PORTAbits.RA2 << 7 ) +
  9127                           ;main.c: 819: ( PORTCbits.RC7 << 6 ) +
  9128                           ;main.c: 820: ( PORTCbits.RC6 << 5 ) +
  9129                           ;main.c: 821: ( PORTCbits.RC5 << 4 ) +
  9130                           ;main.c: 822: ( PORTCbits.RC4 << 3 ) +
  9131                           ;main.c: 823: ( PORTCbits.RC3 << 2 ) +
  9132                           ;main.c: 824: ( PORTBbits.RB1 << 1 ) +
  9133                           ;main.c: 825: PORTBbits.RB0;
  9134  002C5E  5081               	movf	3969,w,c	;volatile
  9135  002C60  0B01               	andlw	1
  9136  002C62  6E10               	movwf	??_init_app_ram& (0+255),c
  9137  002C64  3081               	rrcf	3969,w,c	;volatile
  9138  002C66  0B01               	andlw	1
  9139  002C68  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  9140  002C6A  90D8               	bcf	status,0,c
  9141  002C6C  3411               	rlcf	??_init_app_ram+1,w,c
  9142  002C6E  6E12               	movwf	(??_init_app_ram+2)& (0+255),c
  9143  002C70  6A13               	clrf	(??_init_app_ram+3)& (0+255),c
  9144  002C72  3613               	rlcf	(??_init_app_ram+3)& (0+255),f,c
  9145  002C74  3082               	rrcf	3970,w,c	;volatile
  9146  002C76  32E8               	rrcf	wreg,f,c
  9147  002C78  32E8               	rrcf	wreg,f,c
  9148  002C7A  0B01               	andlw	1
  9149  002C7C  6E14               	movwf	(??_init_app_ram+4)& (0+255),c
  9150  002C7E  6A15               	clrf	(??_init_app_ram+5)& (0+255),c
  9151  002C80  90D8               	bcf	status,0,c
  9152  002C82  3614               	rlcf	??_init_app_ram+4,f,c
  9153  002C84  3615               	rlcf	??_init_app_ram+5,f,c
  9154  002C86  90D8               	bcf	status,0,c
  9155  002C88  3614               	rlcf	??_init_app_ram+4,f,c
  9156  002C8A  3615               	rlcf	??_init_app_ram+5,f,c
  9157  002C8C  3882               	swapf	3970,w,c	;volatile
  9158  002C8E  0B01               	andlw	1
  9159  002C90  6E16               	movwf	(??_init_app_ram+6)& (0+255),c
  9160  002C92  6A17               	clrf	(??_init_app_ram+7)& (0+255),c
  9161  002C94  90D8               	bcf	status,0,c
  9162  002C96  3616               	rlcf	??_init_app_ram+6,f,c
  9163  002C98  3617               	rlcf	??_init_app_ram+7,f,c
  9164  002C9A  90D8               	bcf	status,0,c
  9165  002C9C  3616               	rlcf	??_init_app_ram+6,f,c
  9166  002C9E  3617               	rlcf	??_init_app_ram+7,f,c
  9167  002CA0  90D8               	bcf	status,0,c
  9168  002CA2  3616               	rlcf	??_init_app_ram+6,f,c
  9169  002CA4  3617               	rlcf	??_init_app_ram+7,f,c
  9170  002CA6  3882               	swapf	3970,w,c	;volatile
  9171  002CA8  32E8               	rrcf	wreg,f,c
  9172  002CAA  0B01               	andlw	1
  9173  002CAC  6E18               	movwf	(??_init_app_ram+8)& (0+255),c
  9174  002CAE  6A19               	clrf	(??_init_app_ram+9)& (0+255),c
  9175  002CB0  3A18               	swapf	??_init_app_ram+8,f,c
  9176  002CB2  3A19               	swapf	??_init_app_ram+9,f,c
  9177  002CB4  0EF0               	movlw	240
  9178  002CB6  1619               	andwf	??_init_app_ram+9,f,c
  9179  002CB8  5018               	movf	??_init_app_ram+8,w,c
  9180  002CBA  0B0F               	andlw	15
  9181  002CBC  1219               	iorwf	??_init_app_ram+9,f,c
  9182  002CBE  0EF0               	movlw	240
  9183  002CC0  1618               	andwf	??_init_app_ram+8,f,c
  9184  002CC2  3882               	swapf	3970,w,c	;volatile
  9185  002CC4  32E8               	rrcf	wreg,f,c
  9186  002CC6  32E8               	rrcf	wreg,f,c
  9187  002CC8  0B01               	andlw	1
  9188  002CCA  6E1A               	movwf	(??_init_app_ram+10)& (0+255),c
  9189  002CCC  6A1B               	clrf	(??_init_app_ram+11)& (0+255),c
  9190  002CCE  0E05               	movlw	5
  9191  002CD0                     u16195:
  9192  002CD0  90D8               	bcf	status,0,c
  9193  002CD2  361A               	rlcf	??_init_app_ram+10,f,c
  9194  002CD4  361B               	rlcf	??_init_app_ram+11,f,c
  9195  002CD6  2EE8               	decfsz	wreg,f,c
  9196  002CD8  D7FB               	goto	u16195
  9197  002CDA  3482               	rlcf	3970,w,c	;volatile
  9198  002CDC  36E8               	rlcf	wreg,f,c
  9199  002CDE  0B01               	andlw	1
  9200  002CE0  6E1C               	movwf	(??_init_app_ram+12)& (0+255),c
  9201  002CE2  6A1D               	clrf	(??_init_app_ram+13)& (0+255),c
  9202  002CE4  0E06               	movlw	6
  9203  002CE6                     u16205:
  9204  002CE6  90D8               	bcf	status,0,c
  9205  002CE8  361C               	rlcf	??_init_app_ram+12,f,c
  9206  002CEA  361D               	rlcf	??_init_app_ram+13,f,c
  9207  002CEC  2EE8               	decfsz	wreg,f,c
  9208  002CEE  D7FB               	goto	u16205
  9209  002CF0  3080               	rrcf	3968,w,c	;volatile
  9210  002CF2  32E8               	rrcf	wreg,f,c
  9211  002CF4  0B01               	andlw	1
  9212  002CF6  6E1E               	movwf	(??_init_app_ram+14)& (0+255),c
  9213  002CF8  6A1F               	clrf	(??_init_app_ram+15)& (0+255),c
  9214  002CFA  0E07               	movlw	7
  9215  002CFC                     u16215:
  9216  002CFC  90D8               	bcf	status,0,c
  9217  002CFE  361E               	rlcf	??_init_app_ram+14,f,c
  9218  002D00  361F               	rlcf	??_init_app_ram+15,f,c
  9219  002D02  2EE8               	decfsz	wreg,f,c
  9220  002D04  D7FB               	goto	u16215
  9221  002D06  3080               	rrcf	3968,w,c	;volatile
  9222  002D08  0B01               	andlw	1
  9223  002D0A  6E21               	movwf	(??_init_app_ram+17)& (0+255),c
  9224  002D0C  6A20               	clrf	(??_init_app_ram+16)& (0+255),c
  9225  002D0E  5080               	movf	3968,w,c	;volatile
  9226  002D10  0B01               	andlw	1
  9227  002D12  6E22               	movwf	(??_init_app_ram+18)& (0+255),c
  9228  002D14  6A23               	clrf	(??_init_app_ram+19)& (0+255),c
  9229  002D16  0E09               	movlw	9
  9230  002D18                     u16225:
  9231  002D18  90D8               	bcf	status,0,c
  9232  002D1A  3622               	rlcf	??_init_app_ram+18,f,c
  9233  002D1C  3623               	rlcf	??_init_app_ram+19,f,c
  9234  002D1E  2EE8               	decfsz	wreg,f,c
  9235  002D20  D7FB               	goto	u16225
  9236  002D22  5020               	movf	??_init_app_ram+16,w,c
  9237  002D24  2422               	addwf	??_init_app_ram+18,w,c
  9238  002D26  6E24               	movwf	(??_init_app_ram+20)& (0+255),c
  9239  002D28  5021               	movf	??_init_app_ram+17,w,c
  9240  002D2A  2023               	addwfc	??_init_app_ram+19,w,c
  9241  002D2C  6E25               	movwf	(??_init_app_ram+21)& (0+255),c
  9242  002D2E  501E               	movf	??_init_app_ram+14,w,c
  9243  002D30  2424               	addwf	??_init_app_ram+20,w,c
  9244  002D32  6E26               	movwf	(??_init_app_ram+22)& (0+255),c
  9245  002D34  501F               	movf	??_init_app_ram+15,w,c
  9246  002D36  2025               	addwfc	??_init_app_ram+21,w,c
  9247  002D38  6E27               	movwf	(??_init_app_ram+23)& (0+255),c
  9248  002D3A  501C               	movf	??_init_app_ram+12,w,c
  9249  002D3C  2426               	addwf	??_init_app_ram+22,w,c
  9250  002D3E  6E28               	movwf	(??_init_app_ram+24)& (0+255),c
  9251  002D40  501D               	movf	??_init_app_ram+13,w,c
  9252  002D42  2027               	addwfc	??_init_app_ram+23,w,c
  9253  002D44  6E29               	movwf	(??_init_app_ram+25)& (0+255),c
  9254  002D46  501A               	movf	??_init_app_ram+10,w,c
  9255  002D48  2428               	addwf	??_init_app_ram+24,w,c
  9256  002D4A  6E2A               	movwf	(??_init_app_ram+26)& (0+255),c
  9257  002D4C  501B               	movf	??_init_app_ram+11,w,c
  9258  002D4E  2029               	addwfc	??_init_app_ram+25,w,c
  9259  002D50  6E2B               	movwf	(??_init_app_ram+27)& (0+255),c
  9260  002D52  5018               	movf	??_init_app_ram+8,w,c
  9261  002D54  242A               	addwf	??_init_app_ram+26,w,c
  9262  002D56  6E2C               	movwf	(??_init_app_ram+28)& (0+255),c
  9263  002D58  5019               	movf	??_init_app_ram+9,w,c
  9264  002D5A  202B               	addwfc	??_init_app_ram+27,w,c
  9265  002D5C  6E2D               	movwf	(??_init_app_ram+29)& (0+255),c
  9266  002D5E  5016               	movf	??_init_app_ram+6,w,c
  9267  002D60  242C               	addwf	??_init_app_ram+28,w,c
  9268  002D62  6E2E               	movwf	(??_init_app_ram+30)& (0+255),c
  9269  002D64  5017               	movf	??_init_app_ram+7,w,c
  9270  002D66  202D               	addwfc	??_init_app_ram+29,w,c
  9271  002D68  6E2F               	movwf	(??_init_app_ram+31)& (0+255),c
  9272  002D6A  5014               	movf	??_init_app_ram+4,w,c
  9273  002D6C  242E               	addwf	??_init_app_ram+30,w,c
  9274  002D6E  6E30               	movwf	(??_init_app_ram+32)& (0+255),c
  9275  002D70  5015               	movf	??_init_app_ram+5,w,c
  9276  002D72  202F               	addwfc	??_init_app_ram+31,w,c
  9277  002D74  6E31               	movwf	(??_init_app_ram+33)& (0+255),c
  9278  002D76  5012               	movf	??_init_app_ram+2,w,c
  9279  002D78  2430               	addwf	??_init_app_ram+32,w,c
  9280  002D7A  6E32               	movwf	(??_init_app_ram+34)& (0+255),c
  9281  002D7C  5013               	movf	??_init_app_ram+3,w,c
  9282  002D7E  2031               	addwfc	??_init_app_ram+33,w,c
  9283  002D80  6E33               	movwf	(??_init_app_ram+35)& (0+255),c
  9284  002D82  5010               	movf	??_init_app_ram,w,c
  9285  002D84  2432               	addwf	??_init_app_ram+34,w,c
  9286  002D86  6F6A               	movwf	_current_iostate& (0+255),b
  9287  002D88  0E00               	movlw	0
  9288  002D8A  2033               	addwfc	??_init_app_ram+35,w,c
  9289  002D8C  6F6B               	movwf	(_current_iostate+1)& (0+255),b
  9290                           
  9291                           ; BSR set to: 0
  9292  002D8E  0012               	return	
  9293  002D90                     __end_of_init_app_ram:
  9294                           	opt stack 0
  9295  002D90                     PL72:
  9296                           	opt stack 23
  9297  002D90  6E11               	movwf	(??_init_app_ram+1)& (0+255),c
  9298  002D92  6A10               	clrf	??_init_app_ram& (0+255),c
  9299  002D94  0E72               	movlw	114
  9300  002D96  2435               	addwf	init_app_ram@i,w,c
  9301  002D98  6E08               	movwf	?_Read_b_eep,c
  9302  002D9A  6A09               	clrf	?_Read_b_eep+1,c
  9303  002D9C  0E00               	movlw	0
  9304  002D9E  2209               	addwfc	?_Read_b_eep+1,f,c
  9305  002DA0  0C00               	retlw	0
  9306  002DA2                     __end_ofPL72:
  9307                           	opt stack 0
  9308  002DA2                     PL108:
  9309                           	opt stack 23
  9310  002DA2  6E08               	movwf	?_memset,c
  9311  002DA4  6A0B               	clrf	?_memset+3,c
  9312  002DA6  6A0A               	clrf	?_memset+2,c
  9313  002DA8  6A0D               	clrf	?_memset+5,c
  9314  002DAA  0E14               	movlw	20
  9315  002DAC  6E0C               	movwf	?_memset+4,c
  9316  002DAE  0C14               	retlw	20
  9317  002DB0                     __end_ofPL108:
  9318                           	opt stack 0
  9319                           tblptru	equ	0xFF8
  9320                           tblptrh	equ	0xFF7
  9321                           tblptrl	equ	0xFF6
  9322                           tablat	equ	0xFF5
  9323                           prodh	equ	0xFF4
  9324                           prodl	equ	0xFF3
  9325                           intcon	equ	0xFF2
  9326                           intcon2	equ	0xFF1
  9327                           postinc0	equ	0xFEE
  9328                           wreg	equ	0xFE8
  9329                           indf1	equ	0xFE7
  9330                           fsr1h	equ	0xFE2
  9331                           fsr1l	equ	0xFE1
  9332                           indf2	equ	0xFDF
  9333                           postinc2	equ	0xFDE
  9334                           postdec2	equ	0xFDD
  9335                           plusw2	equ	0xFDB
  9336                           fsr2h	equ	0xFDA
  9337                           fsr2l	equ	0xFD9
  9338                           status	equ	0xFD8
  9339                           
  9340 ;; *************** function _memset *****************
  9341 ;; Defined at:
  9342 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  p1              2    7[COMRAM] PTR void 
  9345 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9346 ;;  c               2    9[COMRAM] int 
  9347 ;;  n               2   11[COMRAM] unsigned int 
  9348 ;; Auto vars:     Size  Location     Type
  9349 ;;  p               2   13[COMRAM] PTR unsigned char 
  9350 ;;		 -> channel_protection_timer(20), channel_pulse_timer(20), debounce_cnt(10), 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  2    7[COMRAM] PTR void 
  9353 ;; Registers used:
  9354 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9355 ;; Tracked objects:
  9356 ;;		On entry : E/1
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9360 ;;      Params:         6       0       0       0       0       0       0
  9361 ;;      Locals:         2       0       0       0       0       0       0
  9362 ;;      Temps:          0       0       0       0       0       0       0
  9363 ;;      Totals:         8       0       0       0       0       0       0
  9364 ;;Total ram usage:        8 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    2
  9367 ;; This function calls:
  9368 ;;		Nothing
  9369 ;; This function is called by:
  9370 ;;		_init_app_ram
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           	psect	text20
  9375  00459C                     __ptext20:
  9376                           	opt stack 0
  9377  00459C                     _memset:
  9378                           	opt stack 23
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;incstack = 0
  9382                           ;incstack = 0
  9383  00459C  C008  F00E         	movff	memset@p1,memset@p
  9384  0045A0  C009  F00F         	movff	memset@p1+1,memset@p+1
  9385  0045A4  D008               	goto	l13598
  9386  0045A6                     l13594:
  9387  0045A6  C00E  FFD9         	movff	memset@p,fsr2l
  9388  0045AA  C00F  FFDA         	movff	memset@p+1,fsr2h
  9389  0045AE  C00A  FFDF         	movff	memset@c,indf2
  9390  0045B2  4A0E               	infsnz	memset@p,f,c
  9391  0045B4  2A0F               	incf	memset@p+1,f,c
  9392  0045B6                     l13598:
  9393  0045B6  060C               	decf	memset@n,f,c
  9394  0045B8  A0D8               	btfss	status,0,c
  9395  0045BA  060D               	decf	memset@n+1,f,c
  9396  0045BC  280C               	incf	memset@n& (0+255),w,c
  9397  0045BE  B4D8               	btfsc	status,2,c
  9398  0045C0  280D               	incf	(memset@n+1)& (0+255),w,c
  9399  0045C2  B4D8               	btfsc	status,2,c
  9400  0045C4  0012               	return	
  9401  0045C6  D7EF               	goto	l13594
  9402  0045C8                     __end_of_memset:
  9403                           	opt stack 0
  9404                           tblptru	equ	0xFF8
  9405                           tblptrh	equ	0xFF7
  9406                           tblptrl	equ	0xFF6
  9407                           tablat	equ	0xFF5
  9408                           prodh	equ	0xFF4
  9409                           prodl	equ	0xFF3
  9410                           intcon	equ	0xFF2
  9411                           intcon2	equ	0xFF1
  9412                           postinc0	equ	0xFEE
  9413                           wreg	equ	0xFE8
  9414                           indf1	equ	0xFE7
  9415                           fsr1h	equ	0xFE2
  9416                           fsr1l	equ	0xFE1
  9417                           indf2	equ	0xFDF
  9418                           postinc2	equ	0xFDE
  9419                           postdec2	equ	0xFDD
  9420                           plusw2	equ	0xFDB
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function _init_app_eeprom *****************
  9426 ;; Defined at:
  9427 ;;		line 835 in file "../main.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  i               1   14[COMRAM] unsigned char 
  9432 ;;  j               1   13[COMRAM] unsigned char 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;		None               void
  9435 ;; Registers used:
  9436 ;;		wreg, status,2, status,0, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9442 ;;      Params:         0       0       0       0       0       0       0
  9443 ;;      Locals:         2       0       0       0       0       0       0
  9444 ;;      Temps:          2       0       0       0       0       0       0
  9445 ;;      Totals:         4       0       0       0       0       0       0
  9446 ;;Total ram usage:        4 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    3
  9449 ;; This function calls:
  9450 ;;		_Busy_eep
  9451 ;;		_Write_b_eep
  9452 ;; This function is called by:
  9453 ;;		_main
  9454 ;;		_vscp_restoreDefaults
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text21
  9459  0038DE                     __ptext21:
  9460                           	opt stack 0
  9461  0038DE                     _init_app_eeprom:
  9462                           	opt stack 23
  9463                           
  9464                           ;main.c: 836: unsigned char i, j;
  9465                           ;main.c: 838: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  9466                           
  9467                           ;incstack = 0
  9468                           ;incstack = 0
  9469  0038DE  ECA4  F024         	call	_Busy_eep	;wreg free
  9470  0038E2  6A09               	clrf	?_Write_b_eep+1,c
  9471  0038E4  0E43               	movlw	67
  9472  0038E6  6E08               	movwf	?_Write_b_eep,c
  9473  0038E8  0E00               	movlw	0
  9474  0038EA  6A0A               	clrf	?_Write_b_eep+2,c
  9475  0038EC  EC85  F022         	call	_Write_b_eep	;wreg free
  9476                           
  9477                           ;main.c: 839: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  9478  0038F0  ECA4  F024         	call	_Busy_eep	;wreg free
  9479  0038F4  6A09               	clrf	?_Write_b_eep+1,c
  9480  0038F6  0E44               	movlw	68
  9481  0038F8  6E08               	movwf	?_Write_b_eep,c
  9482  0038FA  0E00               	movlw	0
  9483  0038FC  6A0A               	clrf	?_Write_b_eep+2,c
  9484  0038FE  EC85  F022         	call	_Write_b_eep	;wreg free
  9485                           
  9486                           ;main.c: 841: for ( i=0; i<10; i++ ) {
  9487  003902  6A0F               	clrf	init_app_eeprom@i,c
  9488  003904                     l12602:
  9489                           
  9490                           ;main.c: 842: (Busy_eep(), Write_b_eep(0x43 + 2 + i,i));
  9491  003904  ECA4  F024         	call	_Busy_eep	;wreg free
  9492  003908  0E45               	movlw	69
  9493  00390A  240F               	addwf	init_app_eeprom@i,w,c
  9494  00390C  6E08               	movwf	?_Write_b_eep,c
  9495  00390E  6A09               	clrf	?_Write_b_eep+1,c
  9496  003910  0E00               	movlw	0
  9497  003912  2209               	addwfc	?_Write_b_eep+1,f,c
  9498  003914  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  9499  003918  EC85  F022         	call	_Write_b_eep	;wreg free
  9500  00391C  2A0F               	incf	init_app_eeprom@i,f,c
  9501  00391E  0E09               	movlw	9
  9502  003920  640F               	cpfsgt	init_app_eeprom@i,c
  9503  003922  D7F0               	goto	l12602
  9504                           
  9505                           ;main.c: 843: }
  9506                           ;main.c: 845: (Busy_eep(), Write_b_eep(0x43 + 12,0x00));
  9507  003924  ECA4  F024         	call	_Busy_eep	;wreg free
  9508  003928  6A09               	clrf	?_Write_b_eep+1,c
  9509  00392A  0E4F               	movlw	79
  9510  00392C  6E08               	movwf	?_Write_b_eep,c
  9511  00392E  0E00               	movlw	0
  9512  003930  6A0A               	clrf	?_Write_b_eep+2,c
  9513  003932  EC85  F022         	call	_Write_b_eep	;wreg free
  9514                           
  9515                           ;main.c: 846: (Busy_eep(), Write_b_eep(0x43 + 13,0x00));
  9516  003936  ECA4  F024         	call	_Busy_eep	;wreg free
  9517  00393A  6A09               	clrf	?_Write_b_eep+1,c
  9518  00393C  0E50               	movlw	80
  9519  00393E  6E08               	movwf	?_Write_b_eep,c
  9520  003940  0E00               	movlw	0
  9521  003942  6A0A               	clrf	?_Write_b_eep+2,c
  9522  003944  EC85  F022         	call	_Write_b_eep	;wreg free
  9523                           
  9524                           ;main.c: 848: for ( i=0; i<10; i++ ) {
  9525  003948  6A0F               	clrf	init_app_eeprom@i,c
  9526  00394A                     l12620:
  9527                           
  9528                           ;main.c: 849: (Busy_eep(), Write_b_eep(0x43 + 24 + i,0x08 | 0x10 | 0x80));
  9529  00394A  ECA4  F024         	call	_Busy_eep	;wreg free
  9530  00394E  0E5B               	movlw	91
  9531  003950  240F               	addwf	init_app_eeprom@i,w,c
  9532  003952  6E08               	movwf	?_Write_b_eep,c
  9533  003954  6A09               	clrf	?_Write_b_eep+1,c
  9534  003956  0E00               	movlw	0
  9535  003958  2209               	addwfc	?_Write_b_eep+1,f,c
  9536  00395A  0E98               	movlw	152
  9537  00395C  6E0A               	movwf	?_Write_b_eep+2,c
  9538  00395E  EC85  F022         	call	_Write_b_eep	;wreg free
  9539  003962  2A0F               	incf	init_app_eeprom@i,f,c
  9540  003964  0E09               	movlw	9
  9541  003966  640F               	cpfsgt	init_app_eeprom@i,c
  9542  003968  D7F0               	goto	l12620
  9543                           
  9544                           ;main.c: 853: }
  9545                           ;main.c: 855: for ( i=0; i<10; i++ ) {
  9546  00396A  6A0F               	clrf	init_app_eeprom@i,c
  9547  00396C                     l12630:
  9548                           
  9549                           ;main.c: 856: (Busy_eep(), Write_b_eep(0x43 + 34 + i,0x01 | 0x02 | 0x80));
  9550  00396C  ECA4  F024         	call	_Busy_eep	;wreg free
  9551  003970  0E65               	movlw	101
  9552  003972  240F               	addwf	init_app_eeprom@i,w,c
  9553  003974  6E08               	movwf	?_Write_b_eep,c
  9554  003976  6A09               	clrf	?_Write_b_eep+1,c
  9555  003978  0E00               	movlw	0
  9556  00397A  2209               	addwfc	?_Write_b_eep+1,f,c
  9557  00397C  0E83               	movlw	131
  9558  00397E  6E0A               	movwf	?_Write_b_eep+2,c
  9559  003980  EC85  F022         	call	_Write_b_eep	;wreg free
  9560  003984  2A0F               	incf	init_app_eeprom@i,f,c
  9561  003986  0E09               	movlw	9
  9562  003988  640F               	cpfsgt	init_app_eeprom@i,c
  9563  00398A  D7F0               	goto	l12630
  9564                           
  9565                           ;main.c: 860: }
  9566                           ;main.c: 862: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  9567  00398C  ECA4  F024         	call	_Busy_eep	;wreg free
  9568  003990  6A09               	clrf	?_Write_b_eep+1,c
  9569  003992  0E6F               	movlw	111
  9570  003994  6E08               	movwf	?_Write_b_eep,c
  9571  003996  0E00               	movlw	0
  9572  003998  6A0A               	clrf	?_Write_b_eep+2,c
  9573  00399A  EC85  F022         	call	_Write_b_eep	;wreg free
  9574                           
  9575                           ;main.c: 864: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  9576  00399E  ECA4  F024         	call	_Busy_eep	;wreg free
  9577  0039A2  6A09               	clrf	?_Write_b_eep+1,c
  9578  0039A4  0E70               	movlw	112
  9579  0039A6  6E08               	movwf	?_Write_b_eep,c
  9580  0039A8  0E00               	movlw	0
  9581  0039AA  6A0A               	clrf	?_Write_b_eep+2,c
  9582  0039AC  EC85  F022         	call	_Write_b_eep	;wreg free
  9583                           
  9584                           ;main.c: 866: for ( i=0; i<20; i++ ) {
  9585  0039B0  6A0F               	clrf	init_app_eeprom@i,c
  9586  0039B2                     l12648:
  9587                           
  9588                           ;main.c: 867: (Busy_eep(), Write_b_eep(0x43 + 46 + 0u + i,0));
  9589  0039B2  ECA4  F024         	call	_Busy_eep	;wreg free
  9590  0039B6  0E71               	movlw	113
  9591  0039B8  D837               	call	PL104	;call to abstracted procedure
  9592  0039BA  EC85  F022         	call	_Write_b_eep	;wreg free
  9593  0039BE  2A0F               	incf	init_app_eeprom@i,f,c
  9594  0039C0  0E13               	movlw	19
  9595  0039C2  640F               	cpfsgt	init_app_eeprom@i,c
  9596  0039C4  D7F6               	goto	l12648
  9597                           
  9598                           ;main.c: 870: }
  9599                           ;main.c: 872: for ( i=0; i<20; i++ ) {
  9600  0039C6  6A0F               	clrf	init_app_eeprom@i,c
  9601  0039C8                     l12658:
  9602                           
  9603                           ;main.c: 873: (Busy_eep(), Write_b_eep(0x43 + 46 + 20u + i,0));
  9604  0039C8  ECA4  F024         	call	_Busy_eep	;wreg free
  9605  0039CC  0E85               	movlw	133
  9606  0039CE  D82C               	call	PL104	;call to abstracted procedure
  9607  0039D0  EC85  F022         	call	_Write_b_eep	;wreg free
  9608  0039D4  2A0F               	incf	init_app_eeprom@i,f,c
  9609  0039D6  0E13               	movlw	19
  9610  0039D8  640F               	cpfsgt	init_app_eeprom@i,c
  9611  0039DA  D7F6               	goto	l12658
  9612                           
  9613                           ;main.c: 876: }
  9614                           ;main.c: 880: for ( i = 0; i < 8; i++ ) {
  9615  0039DC  6A0F               	clrf	init_app_eeprom@i,c
  9616  0039DE                     l532:
  9617                           
  9618                           ;main.c: 881: for ( j = 0; j < 8; j++ ) {
  9619  0039DE  6A0E               	clrf	init_app_eeprom@j,c
  9620  0039E0                     l12672:
  9621                           
  9622                           ;main.c: 882: (Busy_eep(), Write_b_eep(0x43 + 46 + 40u + 0 + i * 8 + j,0));
  9623  0039E0  ECA4  F024         	call	_Busy_eep	;wreg free
  9624  0039E4  500E               	movf	init_app_eeprom@j,w,c
  9625  0039E6  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  9626  0039EA  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  9627  0039EC  90D8               	bcf	status,0,c
  9628  0039EE  360C               	rlcf	??_init_app_eeprom,f,c
  9629  0039F0  360D               	rlcf	??_init_app_eeprom+1,f,c
  9630  0039F2  90D8               	bcf	status,0,c
  9631  0039F4  360C               	rlcf	??_init_app_eeprom,f,c
  9632  0039F6  360D               	rlcf	??_init_app_eeprom+1,f,c
  9633  0039F8  90D8               	bcf	status,0,c
  9634  0039FA  360C               	rlcf	??_init_app_eeprom,f,c
  9635  0039FC  360D               	rlcf	??_init_app_eeprom+1,f,c
  9636  0039FE  260C               	addwf	??_init_app_eeprom,f,c
  9637  003A00  0E00               	movlw	0
  9638  003A02  220D               	addwfc	??_init_app_eeprom+1,f,c
  9639  003A04  0E99               	movlw	153
  9640  003A06  240C               	addwf	??_init_app_eeprom,w,c
  9641  003A08  6E08               	movwf	?_Write_b_eep,c
  9642  003A0A  0E00               	movlw	0
  9643  003A0C  200D               	addwfc	??_init_app_eeprom+1,w,c
  9644  003A0E  6E09               	movwf	?_Write_b_eep+1,c
  9645  003A10  0E00               	movlw	0
  9646  003A12  6A0A               	clrf	?_Write_b_eep+2,c
  9647  003A14  EC85  F022         	call	_Write_b_eep	;wreg free
  9648  003A18  2A0E               	incf	init_app_eeprom@j,f,c
  9649  003A1A  0E07               	movlw	7
  9650  003A1C  640E               	cpfsgt	init_app_eeprom@j,c
  9651  003A1E  D7E0               	goto	l12672
  9652  003A20  2A0F               	incf	init_app_eeprom@i,f,c
  9653  003A22  640F               	cpfsgt	init_app_eeprom@i,c
  9654  003A24  D7DC               	goto	l532
  9655  003A26  0C07               	retlw	7
  9656  003A28                     __end_of_init_app_eeprom:
  9657                           	opt stack 0
  9658  003A28                     PL104:
  9659                           	opt stack 23
  9660  003A28  240F               	addwf	init_app_eeprom@i,w,c
  9661  003A2A  6E08               	movwf	?_Write_b_eep,c
  9662  003A2C  6A09               	clrf	?_Write_b_eep+1,c
  9663  003A2E  0E00               	movlw	0
  9664  003A30  2209               	addwfc	?_Write_b_eep+1,f,c
  9665  003A32  6A0A               	clrf	?_Write_b_eep+2,c
  9666  003A34  0C00               	retlw	0
  9667  003A36                     __end_ofPL104:
  9668                           	opt stack 0
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           intcon2	equ	0xFF1
  9677                           postinc0	equ	0xFEE
  9678                           wreg	equ	0xFE8
  9679                           indf1	equ	0xFE7
  9680                           fsr1h	equ	0xFE2
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           postdec2	equ	0xFDD
  9685                           plusw2	equ	0xFDB
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _vscp_setUserID *****************
  9691 ;; Defined at:
  9692 ;;		line 3368 in file "../main.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  idx             1    wreg     unsigned char 
  9695 ;;  data            1   11[COMRAM] unsigned char 
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;  idx             1   12[COMRAM] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : F/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9707 ;;      Params:         1       0       0       0       0       0       0
  9708 ;;      Locals:         1       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0
  9710 ;;      Totals:         2       0       0       0       0       0       0
  9711 ;;Total ram usage:        2 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    3
  9714 ;; This function calls:
  9715 ;;		_Busy_eep
  9716 ;;		_Write_b_eep
  9717 ;; This function is called by:
  9718 ;;		_vscp_writeStdReg
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text22
  9723  0047CE                     __ptext22:
  9724                           	opt stack 0
  9725  0047CE                     _vscp_setUserID:
  9726                           	opt stack 24
  9727                           
  9728                           ;incstack = 0
  9729                           ;incstack = 0
  9730                           ;vscp_setUserID@idx stored from wreg
  9731  0047CE  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;main.c: 3369: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  9735  0047D2  ECA4  F024         	call	_Busy_eep	;wreg free
  9736  0047D6  0E06               	movlw	6
  9737  0047D8  240D               	addwf	vscp_setUserID@idx,w,c
  9738  0047DA  6E08               	movwf	?_Write_b_eep,c
  9739  0047DC  6A09               	clrf	?_Write_b_eep+1,c
  9740  0047DE  0E00               	movlw	0
  9741  0047E0  2209               	addwfc	?_Write_b_eep+1,f,c
  9742  0047E2  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9743  0047E6  EF85  F022         	goto	_Write_b_eep	;wreg free
  9744  0047EA                     __end_of_vscp_setUserID:
  9745                           	opt stack 0
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           intcon	equ	0xFF2
  9753                           intcon2	equ	0xFF1
  9754                           postinc0	equ	0xFEE
  9755                           wreg	equ	0xFE8
  9756                           indf1	equ	0xFE7
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           plusw2	equ	0xFDB
  9763                           fsr2h	equ	0xFDA
  9764                           fsr2l	equ	0xFD9
  9765                           status	equ	0xFD8
  9766                           
  9767 ;; *************** function _vscp_setManufacturerId *****************
  9768 ;; Defined at:
  9769 ;;		line 1347 in file "../main.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  idx             1    wreg     unsigned char 
  9772 ;;  data            1   11[COMRAM] unsigned char 
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  idx             1   12[COMRAM] unsigned char 
  9775 ;; Return value:  Size  Location     Type
  9776 ;;		None               void
  9777 ;; Registers used:
  9778 ;;		wreg, status,2, status,0, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : F/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9784 ;;      Params:         1       0       0       0       0       0       0
  9785 ;;      Locals:         1       0       0       0       0       0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0
  9787 ;;      Totals:         2       0       0       0       0       0       0
  9788 ;;Total ram usage:        2 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    3
  9791 ;; This function calls:
  9792 ;;		_Busy_eep
  9793 ;;		_Write_b_eep
  9794 ;; This function is called by:
  9795 ;;		_vscp_writeStdReg
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text23
  9800  004696                     __ptext23:
  9801                           	opt stack 0
  9802  004696                     _vscp_setManufacturerId:
  9803                           	opt stack 24
  9804                           
  9805                           ;incstack = 0
  9806                           ;incstack = 0
  9807                           ;vscp_setManufacturerId@idx stored from wreg
  9808  004696  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;main.c: 1348: if ( idx>7 ) return;
  9812  00469A  0E07               	movlw	7
  9813  00469C  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  9814  00469E  D001               	goto	l13654
  9815  0046A0  D00C               	goto	l641
  9816  0046A2                     l13654:
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;main.c: 1349: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  9820  0046A2  ECA4  F024         	call	_Busy_eep	;wreg free
  9821  0046A6  0E0B               	movlw	11
  9822  0046A8  240D               	addwf	vscp_setManufacturerId@idx,w,c
  9823  0046AA  6E08               	movwf	?_Write_b_eep,c
  9824  0046AC  6A09               	clrf	?_Write_b_eep+1,c
  9825  0046AE  0E00               	movlw	0
  9826  0046B0  2209               	addwfc	?_Write_b_eep+1,f,c
  9827  0046B2  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9828  0046B6  EC85  F022         	call	_Write_b_eep	;wreg free
  9829  0046BA                     l641:
  9830  0046BA  0012               	return	
  9831  0046BC                     __end_of_vscp_setManufacturerId:
  9832                           	opt stack 0
  9833                           tblptru	equ	0xFF8
  9834                           tblptrh	equ	0xFF7
  9835                           tblptrl	equ	0xFF6
  9836                           tablat	equ	0xFF5
  9837                           prodh	equ	0xFF4
  9838                           prodl	equ	0xFF3
  9839                           intcon	equ	0xFF2
  9840                           intcon2	equ	0xFF1
  9841                           postinc0	equ	0xFEE
  9842                           wreg	equ	0xFE8
  9843                           indf1	equ	0xFE7
  9844                           fsr1h	equ	0xFE2
  9845                           fsr1l	equ	0xFE1
  9846                           indf2	equ	0xFDF
  9847                           postinc2	equ	0xFDE
  9848                           postdec2	equ	0xFDD
  9849                           plusw2	equ	0xFDB
  9850                           fsr2h	equ	0xFDA
  9851                           fsr2l	equ	0xFD9
  9852                           status	equ	0xFD8
  9853                           
  9854 ;; *************** function _vscp_setGUID *****************
  9855 ;; Defined at:
  9856 ;;		line 1335 in file "../main.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;  idx             1    wreg     unsigned char 
  9859 ;;  data            1   11[COMRAM] unsigned char 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  idx             1   12[COMRAM] unsigned char 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;		None               void
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : F/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9871 ;;      Params:         1       0       0       0       0       0       0
  9872 ;;      Locals:         1       0       0       0       0       0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0
  9874 ;;      Totals:         2       0       0       0       0       0       0
  9875 ;;Total ram usage:        2 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    3
  9878 ;; This function calls:
  9879 ;;		_Busy_eep
  9880 ;;		_Write_b_eep
  9881 ;; This function is called by:
  9882 ;;		_vscp_writeStdReg
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           	psect	text24
  9887  0046BC                     __ptext24:
  9888                           	opt stack 0
  9889  0046BC                     _vscp_setGUID:
  9890                           	opt stack 24
  9891                           
  9892                           ;incstack = 0
  9893                           ;incstack = 0
  9894                           ;vscp_setGUID@idx stored from wreg
  9895  0046BC  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;main.c: 1336: if ( idx>15 ) return;
  9899  0046C0  0E0F               	movlw	15
  9900  0046C2  640D               	cpfsgt	vscp_setGUID@idx,c
  9901  0046C4  D001               	goto	l13646
  9902  0046C6  D00C               	goto	l637
  9903  0046C8                     l13646:
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;main.c: 1337: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  9907  0046C8  ECA4  F024         	call	_Busy_eep	;wreg free
  9908  0046CC  0E13               	movlw	19
  9909  0046CE  240D               	addwf	vscp_setGUID@idx,w,c
  9910  0046D0  6E08               	movwf	?_Write_b_eep,c
  9911  0046D2  6A09               	clrf	?_Write_b_eep+1,c
  9912  0046D4  0E00               	movlw	0
  9913  0046D6  2209               	addwfc	?_Write_b_eep+1,f,c
  9914  0046D8  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9915  0046DC  EC85  F022         	call	_Write_b_eep	;wreg free
  9916  0046E0                     l637:
  9917  0046E0  0012               	return	
  9918  0046E2                     __end_of_vscp_setGUID:
  9919                           	opt stack 0
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           fsr1h	equ	0xFE2
  9932                           fsr1l	equ	0xFE1
  9933                           indf2	equ	0xFDF
  9934                           postinc2	equ	0xFDE
  9935                           postdec2	equ	0xFDD
  9936                           plusw2	equ	0xFDB
  9937                           fsr2h	equ	0xFDA
  9938                           fsr2l	equ	0xFD9
  9939                           status	equ	0xFD8
  9940                           
  9941 ;; *************** function _vscp_writeAppReg *****************
  9942 ;; Defined at:
  9943 ;;		line 1546 in file "../main.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;  reg             1    wreg     unsigned char 
  9946 ;;  val             1   78[COMRAM] unsigned char 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  reg             1   33[BANK0 ] unsigned char 
  9949 ;;  val             1   29[BANK0 ] unsigned char 
  9950 ;;  bOn             1   32[BANK0 ] enum E15660
  9951 ;;  rv              1   31[BANK0 ] unsigned char 
  9952 ;;  bInfoEvent      1   30[BANK0 ] enum E15660
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  1    wreg      unsigned char 
  9955 ;; Registers used:
  9956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9957 ;; Tracked objects:
  9958 ;;		On entry : F/0
  9959 ;;		On exit  : F/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9962 ;;      Params:         1       0       0       0       0       0       0
  9963 ;;      Locals:         0       5       0       0       0       0       0
  9964 ;;      Temps:          0       7       0       0       0       0       0
  9965 ;;      Totals:         1      12       0       0       0       0       0
  9966 ;;Total ram usage:       13 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    7
  9969 ;; This function calls:
  9970 ;;		_Busy_eep
  9971 ;;		_Write_b_eep
  9972 ;;		_Read_b_eep
  9973 ;;		_SendInformationEvent
  9974 ;;		_calculateSetFilterMask
  9975 ;; This function is called by:
  9976 ;;		_vscp_writeRegister
  9977 ;;		_vscp_handleProtocolEvent
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text25
  9982  000622                     __ptext25:
  9983                           	opt stack 0
  9984  000622                     _vscp_writeAppReg:
  9985                           	opt stack 20
  9986                           
  9987                           ;incstack = 0
  9988                           ;incstack = 0
  9989                           ;vscp_writeAppReg@reg stored from wreg
  9990  000622  CFE8 F0DD          	movff	wreg,vscp_writeAppReg@reg
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;main.c: 1547: uint8_t rv;
  9994                           ;main.c: 1548: BOOL bInfoEvent = 0;
  9995  000626  6BDA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  9996                           
  9997                           ;main.c: 1549: BOOL bOn = 0;
  9998  000628  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;main.c: 1551: rv = ~val;
 10002  00062A  1C4F               	comf	vscp_writeAppReg@val,w,c
 10003  00062C  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10004                           
 10005                           ;main.c: 1554: if ( 0 == vscp_page_select ) {
 10006  00062E  5053               	movf	_vscp_page_select+1,w,c
 10007  000630  1052               	iorwf	_vscp_page_select,w,c
 10008  000632  E002 EF05  F008    	bnz	l14286
 10009                           
 10010                           ; BSR set to: 0
 10011                           ;main.c: 1557: if ( reg == 0 ) {
 10012  000638  67DD               	tstfsz	vscp_writeAppReg@reg& (0+255),b
 10013  00063A  D010               	goto	l13764
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;main.c: 1558: (Busy_eep(), Write_b_eep(0x43 + 0,val));
 10017  00063C  ECA4  F024         	call	_Busy_eep	;wreg free
 10018  000640  6A09               	clrf	?_Write_b_eep+1,c
 10019  000642  0E43               	movlw	67
 10020  000644  6E08               	movwf	?_Write_b_eep,c
 10021  000646  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10022  00064A  EC85  F022         	call	_Write_b_eep	;wreg free
 10023                           
 10024                           ;main.c: 1559: rv = Read_b_eep(0x43 + 0);
 10025  00064E  6A09               	clrf	?_Read_b_eep+1,c
 10026  000650  0E43               	movlw	67
 10027  000652  6E08               	movwf	?_Read_b_eep,c
 10028  000654  EC70  F024         	call	_Read_b_eep	;wreg free
 10029  000658  EF0D  F009         	goto	L32
 10030  00065C                     l13764:
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;main.c: 1561: else if ( reg == 1 ) {
 10034  00065C  05DD               	decf	vscp_writeAppReg@reg& (0+255),w,b
 10035  00065E  E110               	bnz	l13772
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;main.c: 1563: (Busy_eep(), Write_b_eep(0x43 + 1,val));
 10039  000660  ECA4  F024         	call	_Busy_eep	;wreg free
 10040  000664  6A09               	clrf	?_Write_b_eep+1,c
 10041  000666  0E44               	movlw	68
 10042  000668  6E08               	movwf	?_Write_b_eep,c
 10043  00066A  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10044  00066E  EC85  F022         	call	_Write_b_eep	;wreg free
 10045                           
 10046                           ;main.c: 1564: rv = Read_b_eep(0x43 + 1);
 10047  000672  6A09               	clrf	?_Read_b_eep+1,c
 10048  000674  0E44               	movlw	68
 10049  000676  6E08               	movwf	?_Read_b_eep,c
 10050  000678  EC70  F024         	call	_Read_b_eep	;wreg free
 10051  00067C  EF0D  F009         	goto	L32
 10052  000680                     l13772:
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;main.c: 1567: else if ( ( reg >= 2 ) &&
 10056                           ;main.c: 1568: ( reg <= 11 ) ) {
 10057  000680  0E01               	movlw	1
 10058  000682  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 10059  000684  D011               	goto	l13782
 10060                           
 10061                           ; BSR set to: 0
 10062  000686  0E0C               	movlw	12
 10063  000688  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 10064  00068A  D00E               	goto	l13782
 10065  00068C                     
 10066                           ; BSR set to: 0
 10067                           ;main.c: 1569: (Busy_eep(), Write_b_eep(0x43 + 2 + ( reg - 2 ),val));
 10068  00068C  ECA4  F024         	call	_Busy_eep	;wreg free
 10069  000690  0E43               	movlw	67
 10070  000692  EC3F  F009         	call	PL4	;call to abstracted procedure
 10071  000696  EC85  F022         	call	_Write_b_eep	;wreg free
 10072                           
 10073                           ;main.c: 1572: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
 10074  00069A  0E43               	movlw	67
 10075  00069C  EC57  F009         	call	PL14	;call to abstracted procedure
 10076  0006A0  EC70  F024         	call	_Read_b_eep	;wreg free
 10077  0006A4  EF0D  F009         	goto	L32
 10078  0006A8                     l13782:
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;main.c: 1576: else if ( reg == 12 ) {
 10082  0006A8  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 10083  0006AA  0A0C               	xorlw	12
 10084  0006AC  E126               	bnz	l13790
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;main.c: 1578: (Busy_eep(), Write_b_eep(0x43 + 12,( val & 0x03 )));
 10088  0006AE  ECA4  F024         	call	_Busy_eep	;wreg free
 10089  0006B2  6A09               	clrf	?_Write_b_eep+1,c
 10090  0006B4  0E4F               	movlw	79
 10091  0006B6  6E08               	movwf	?_Write_b_eep,c
 10092  0006B8  504F               	movf	vscp_writeAppReg@val,w,c
 10093  0006BA  0B03               	andlw	3
 10094  0006BC  6E0A               	movwf	?_Write_b_eep+2,c
 10095  0006BE  EC85  F022         	call	_Write_b_eep	;wreg free
 10096  0006C2  0E01               	movlw	1
 10097                           
 10098                           ;main.c: 1582: TRISAbits.TRISA0 = ( val & 0x02 ) ? 1 : 0;
 10099  0006C4  A24F               	btfss	vscp_writeAppReg@val,1,c
 10100  0006C6  0E00               	movlw	0
 10101  0006C8  0100               	movlb	0	; () banked
 10102  0006CA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10103  0006CC  5092               	movf	3986,w,c	;volatile
 10104  0006CE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10105  0006D0  0BFE               	andlw	-2
 10106  0006D2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10107  0006D4  6E92               	movwf	3986,c	;volatile
 10108  0006D6  0E01               	movlw	1
 10109                           
 10110                           ;main.c: 1583: TRISAbits.TRISA1 = ( val & 0x01 ) ? 1 : 0;
 10111  0006D8  A04F               	btfss	vscp_writeAppReg@val,0,c
 10112  0006DA  0E00               	movlw	0
 10113  0006DC  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10114  0006DE  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10115  0006E0  5092               	movf	3986,w,c	;volatile
 10116  0006E2  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10117  0006E4  0BFD               	andlw	-3
 10118  0006E6  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10119  0006E8  6E92               	movwf	3986,c	;volatile
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;main.c: 1585: rv = ( TRISAbits.TRISA0 << 1 ) +
 10123                           ;main.c: 1586: TRISAbits.TRISA1;
 10124  0006EA  3092               	rrcf	3986,w,c	;volatile
 10125  0006EC  0B01               	andlw	1
 10126  0006EE  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10127  0006F0  5092               	movf	3986,w,c	;volatile
 10128  0006F2  0B01               	andlw	1
 10129  0006F4  0D02               	mullw	2
 10130  0006F6  50F3               	movf	prodl,w,c
 10131  0006F8  D096               	goto	L36
 10132  0006FA                     l13790:
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;main.c: 1588: else if ( reg == 13 ) {
 10136  0006FA  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 10137  0006FC  0A0D               	xorlw	13
 10138  0006FE  E001 D095          	bnz	l13814
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;main.c: 1590: (Busy_eep(), Write_b_eep(0x43 + 13,val));
 10142  000702  ECA4  F024         	call	_Busy_eep	;wreg free
 10143  000706  6A09               	clrf	?_Write_b_eep+1,c
 10144  000708  0E50               	movlw	80
 10145  00070A  6E08               	movwf	?_Write_b_eep,c
 10146  00070C  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10147  000710  EC85  F022         	call	_Write_b_eep	;wreg free
 10148  000714  0E01               	movlw	1
 10149                           
 10150                           ;main.c: 1594: TRISAbits.TRISA2 = ( val & 0x80 ) ? 1 : 0;
 10151  000716  AE4F               	btfss	vscp_writeAppReg@val,7,c
 10152  000718  0E00               	movlw	0
 10153  00071A  0100               	movlb	0	; () banked
 10154  00071C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10155  00071E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10156  000720  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10157  000722  5092               	movf	3986,w,c	;volatile
 10158  000724  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10159  000726  0BFB               	andlw	-5
 10160  000728  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10161  00072A  6E92               	movwf	3986,c	;volatile
 10162  00072C  0E01               	movlw	1
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;main.c: 1595: TRISCbits.TRISC7 = ( val & 0x40 ) ? 1 : 0;
 10166  00072E  AC4F               	btfss	vscp_writeAppReg@val,6,c
 10167  000730  0E00               	movlw	0
 10168  000732  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10169  000734  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10170  000736  33D2               	rrcf	??_vscp_writeAppReg& (0+255),f,b
 10171  000738  5094               	movf	3988,w,c	;volatile
 10172  00073A  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10173  00073C  0B7F               	andlw	-129
 10174  00073E  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10175  000740  6E94               	movwf	3988,c	;volatile
 10176  000742  0E01               	movlw	1
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;main.c: 1596: TRISCbits.TRISC6 = ( val & 0x20 ) ? 1 : 0;
 10180  000744  AA4F               	btfss	vscp_writeAppReg@val,5,c
 10181  000746  0E00               	movlw	0
 10182  000748  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10183  00074A  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10184  00074C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10185  00074E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10186  000750  5094               	movf	3988,w,c	;volatile
 10187  000752  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10188  000754  0BBF               	andlw	-65
 10189  000756  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10190  000758  6E94               	movwf	3988,c	;volatile
 10191  00075A  0E01               	movlw	1
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;main.c: 1597: TRISCbits.TRISC5 = ( val & 0x10 ) ? 1 : 0;
 10195  00075C  A84F               	btfss	vscp_writeAppReg@val,4,c
 10196  00075E  0E00               	movlw	0
 10197  000760  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10198  000762  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10199  000764  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10200  000766  5094               	movf	3988,w,c	;volatile
 10201  000768  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10202  00076A  0BDF               	andlw	-33
 10203  00076C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10204  00076E  6E94               	movwf	3988,c	;volatile
 10205  000770  0E01               	movlw	1
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;main.c: 1598: TRISCbits.TRISC4 = ( val & 0x08 ) ? 1 : 0;
 10209  000772  A64F               	btfss	vscp_writeAppReg@val,3,c
 10210  000774  0E00               	movlw	0
 10211  000776  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10212  000778  3BD2               	swapf	??_vscp_writeAppReg& (0+255),f,b
 10213  00077A  5094               	movf	3988,w,c	;volatile
 10214  00077C  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10215  00077E  0BEF               	andlw	-17
 10216  000780  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10217  000782  6E94               	movwf	3988,c	;volatile
 10218  000784  0E01               	movlw	1
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;main.c: 1599: TRISCbits.TRISC3 = ( val & 0x04 ) ? 1 : 0;
 10222  000786  A44F               	btfss	vscp_writeAppReg@val,2,c
 10223  000788  0E00               	movlw	0
 10224  00078A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10225  00078C  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10226  00078E  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10227  000790  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10228  000792  5094               	movf	3988,w,c	;volatile
 10229  000794  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10230  000796  0BF7               	andlw	-9
 10231  000798  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10232  00079A  6E94               	movwf	3988,c	;volatile
 10233  00079C  0E01               	movlw	1
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;main.c: 1600: TRISBbits.TRISB1 = ( val & 0x02 ) ? 1 : 0;
 10237  00079E  A24F               	btfss	vscp_writeAppReg@val,1,c
 10238  0007A0  0E00               	movlw	0
 10239  0007A2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10240  0007A4  47D2               	rlncf	??_vscp_writeAppReg& (0+255),f,b
 10241  0007A6  5093               	movf	3987,w,c	;volatile
 10242  0007A8  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10243  0007AA  0BFD               	andlw	-3
 10244  0007AC  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10245  0007AE  6E93               	movwf	3987,c	;volatile
 10246  0007B0  0E01               	movlw	1
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;main.c: 1601: TRISBbits.TRISB0 = ( val & 0x01 ) ? 1 : 0;
 10250  0007B2  A04F               	btfss	vscp_writeAppReg@val,0,c
 10251  0007B4  0E00               	movlw	0
 10252  0007B6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10253  0007B8  5093               	movf	3987,w,c	;volatile
 10254  0007BA  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10255  0007BC  0BFE               	andlw	-2
 10256  0007BE  19D2               	xorwf	??_vscp_writeAppReg& (0+255),w,b
 10257  0007C0  6E93               	movwf	3987,c	;volatile
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;main.c: 1603: rv = ( TRISAbits.TRISA2 << 7 ) +
 10261                           ;main.c: 1604: ( TRISCbits.TRISC7 << 6 ) +
 10262                           ;main.c: 1605: ( TRISCbits.TRISC6 << 5 ) +
 10263                           ;main.c: 1606: ( TRISCbits.TRISC5 << 4 ) +
 10264                           ;main.c: 1607: ( TRISCbits.TRISC4 << 3 ) +
 10265                           ;main.c: 1608: ( TRISCbits.TRISC3 << 2 ) +
 10266                           ;main.c: 1609: ( TRISBbits.TRISB1 << 1 ) +
 10267                           ;main.c: 1610: TRISBbits.TRISB0;
 10268  0007C2  5093               	movf	3987,w,c	;volatile
 10269  0007C4  0B01               	andlw	1
 10270  0007C6  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10271  0007C8  3093               	rrcf	3987,w,c	;volatile
 10272  0007CA  0B01               	andlw	1
 10273  0007CC  0D02               	mullw	2
 10274  0007CE  CFF3 F0D3          	movff	prodl,??_vscp_writeAppReg+1
 10275  0007D2  3094               	rrcf	3988,w,c	;volatile
 10276  0007D4  32E8               	rrcf	wreg,f,c
 10277  0007D6  32E8               	rrcf	wreg,f,c
 10278  0007D8  0B01               	andlw	1
 10279  0007DA  0D04               	mullw	4
 10280  0007DC  CFF3 F0D4          	movff	prodl,??_vscp_writeAppReg+2
 10281  0007E0  3894               	swapf	3988,w,c	;volatile
 10282  0007E2  0B01               	andlw	1
 10283  0007E4  0D08               	mullw	8
 10284  0007E6  CFF3 F0D5          	movff	prodl,??_vscp_writeAppReg+3
 10285  0007EA  3894               	swapf	3988,w,c	;volatile
 10286  0007EC  32E8               	rrcf	wreg,f,c
 10287  0007EE  0B01               	andlw	1
 10288  0007F0  0D10               	mullw	16
 10289  0007F2  CFF3 F0D6          	movff	prodl,??_vscp_writeAppReg+4
 10290  0007F6  3894               	swapf	3988,w,c	;volatile
 10291  0007F8  32E8               	rrcf	wreg,f,c
 10292  0007FA  32E8               	rrcf	wreg,f,c
 10293  0007FC  0B01               	andlw	1
 10294  0007FE  0D20               	mullw	32
 10295  000800  CFF3 F0D7          	movff	prodl,??_vscp_writeAppReg+5
 10296  000804  3494               	rlcf	3988,w,c	;volatile
 10297  000806  36E8               	rlcf	wreg,f,c
 10298  000808  0B01               	andlw	1
 10299  00080A  0D40               	mullw	64
 10300  00080C  CFF3 F0D8          	movff	prodl,??_vscp_writeAppReg+6
 10301  000810  3092               	rrcf	3986,w,c	;volatile
 10302  000812  32E8               	rrcf	wreg,f,c
 10303  000814  0B01               	andlw	1
 10304  000816  0D80               	mullw	128
 10305  000818  50F3               	movf	prodl,w,c
 10306  00081A  25D8               	addwf	(??_vscp_writeAppReg+6)& (0+255),w,b
 10307  00081C  25D7               	addwf	(??_vscp_writeAppReg+5)& (0+255),w,b
 10308  00081E  25D6               	addwf	(??_vscp_writeAppReg+4)& (0+255),w,b
 10309  000820  25D5               	addwf	(??_vscp_writeAppReg+3)& (0+255),w,b
 10310  000822  25D4               	addwf	(??_vscp_writeAppReg+2)& (0+255),w,b
 10311  000824  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10312  000826                     L36:
 10313  000826  25D2               	addwf	??_vscp_writeAppReg& (0+255),w,b
 10314  000828  EF0E  F009         	goto	L33
 10315  00082C                     l13814:
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;main.c: 1614: else if ( (reg >= 14) && (reg <= 23) ) {
 10319  00082C  0E0D               	movlw	13
 10320  00082E  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 10321  000830  D228               	goto	l14026
 10322                           
 10323                           ; BSR set to: 0
 10324  000832  0E18               	movlw	24
 10325  000834  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 10326  000836  D225               	goto	l14026
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;main.c: 1617: if ( Read_b_eep(0x43 + 24 + ( reg - 14 )) &
 10330                           ;main.c: 1620: 0x80 ) {
 10331  000838  0E4D               	movlw	77
 10332  00083A  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 10333  00083C  6E08               	movwf	?_Read_b_eep,c
 10334  00083E  6A09               	clrf	?_Read_b_eep+1,c
 10335  000840  0E00               	movlw	0
 10336  000842  2209               	addwfc	?_Read_b_eep+1,f,c
 10337  000844  EC70  F024         	call	_Read_b_eep	;wreg free
 10338  000848  0100               	movlb	0	; () banked
 10339  00084A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10340  00084C  BFD2               	btfsc	??_vscp_writeAppReg& (0+255),7,b
 10341  00084E  D1FB               	goto	l14024
 10342  000850  EF0F  F009         	goto	l14366
 10343  000854                     l13822:
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;main.c: 1627: bInfoEvent = 1;
 10347  000854  0E01               	movlw	1
 10348  000856  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;main.c: 1629: if ( 1 == val ) {
 10352  000858  044F               	decf	vscp_writeAppReg@val,w,c
 10353  00085A  E128               	bnz	l716
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;main.c: 1631: PORTBbits.RB0 = 1;
 10357  00085C  8081               	bsf	3969,0,c	;volatile
 10358                           
 10359                           ; BSR set to: 0
 10360                           ;main.c: 1632: rv = PORTBbits.RB0;
 10361  00085E  0E00               	movlw	0
 10362  000860  B081               	btfsc	3969,0,c	;volatile
 10363  000862  0E01               	movlw	1
 10364  000864  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;main.c: 1633: bOn = 1;
 10368  000866  0E01               	movlw	1
 10369  000868  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;main.c: 1636: if ( Read_b_eep(0x43 + 24) & 0x04 ) {
 10373  00086A  6A09               	clrf	?_Read_b_eep+1,c
 10374  00086C  0E5B               	movlw	91
 10375  00086E  6E08               	movwf	?_Read_b_eep,c
 10376  000870  EC70  F024         	call	_Read_b_eep	;wreg free
 10377  000874  0100               	movlb	0	; () banked
 10378  000876  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10379  000878  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10380  00087A  EF0F  F009         	goto	l14366
 10381  00087E                     l13834:
 10382                           
 10383                           ;main.c: 1637: channel_protection_timer[ 0 ] =
 10384                           ;main.c: 1638: Read_b_eep(0x43 + 46 + 20u) * 256 +
 10385                           ;main.c: 1640: Read_b_eep(0x43 + 46 + 21u);
 10386  00087E  6A09               	clrf	?_Read_b_eep+1,c
 10387  000880  0E86               	movlw	134
 10388  000882  6E08               	movwf	?_Read_b_eep,c
 10389  000884  EC70  F024         	call	_Read_b_eep	;wreg free
 10390  000888  0100               	movlb	0	; () banked
 10391  00088A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10392  00088C  6A09               	clrf	?_Read_b_eep+1,c
 10393  00088E  0E85               	movlw	133
 10394  000890  6E08               	movwf	?_Read_b_eep,c
 10395  000892  EC70  F024         	call	_Read_b_eep	;wreg free
 10396  000896  0100               	movlb	0	; () banked
 10397  000898  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10398  00089A  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10399  00089C  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10400  00089E  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10401  0008A0  6F83               	movwf	_channel_protection_timer& (0+255),b
 10402  0008A2  0E00               	movlw	0
 10403  0008A4  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10404  0008A6  6F84               	movwf	(_channel_protection_timer+1)& (0+255),b
 10405  0008A8  EF0F  F009         	goto	l14366
 10406  0008AC                     l716:
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;main.c: 1645: else if (0 == val) {
 10410  0008AC  664F               	tstfsz	vscp_writeAppReg@val,c
 10411  0008AE  EF0F  F009         	goto	l14366
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;main.c: 1646: PORTBbits.RB0 = 0;
 10415  0008B2  9081               	bcf	3969,0,c	;volatile
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;main.c: 1647: rv = PORTBbits.RB0;
 10419  0008B4  0E00               	movlw	0
 10420  0008B6  B081               	btfsc	3969,0,c	;volatile
 10421  0008B8  0E01               	movlw	1
 10422  0008BA  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10423  0008BC                     l13840:
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;main.c: 1648: bOn = 0;
 10427  0008BC  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 10428  0008BE  EF0F  F009         	goto	l14366
 10429  0008C2                     l13842:
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;main.c: 1655: bInfoEvent = 1;
 10433  0008C2  0E01               	movlw	1
 10434  0008C4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;main.c: 1657: if (1 == val) {
 10438  0008C6  044F               	decf	vscp_writeAppReg@val,w,c
 10439  0008C8  E11E               	bnz	l722
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;main.c: 1659: PORTBbits.RB1 = 1;
 10443  0008CA  8281               	bsf	3969,1,c	;volatile
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;main.c: 1660: rv = PORTBbits.RB1;
 10447  0008CC  0E00               	movlw	0
 10448  0008CE  B281               	btfsc	3969,1,c	;volatile
 10449  0008D0  0E01               	movlw	1
 10450  0008D2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;main.c: 1661: bOn = 1;
 10454  0008D4  0E01               	movlw	1
 10455  0008D6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;main.c: 1663: if (Read_b_eep(0x43 + 25) & 0x04) {
 10459  0008D8  6A09               	clrf	?_Read_b_eep+1,c
 10460  0008DA  0E5C               	movlw	92
 10461  0008DC  6E08               	movwf	?_Read_b_eep,c
 10462  0008DE  EC70  F024         	call	_Read_b_eep	;wreg free
 10463  0008E2  0100               	movlb	0	; () banked
 10464  0008E4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10465  0008E6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10466  0008E8  EF0F  F009         	goto	l14366
 10467  0008EC                     l13854:
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;main.c: 1664: channel_protection_timer[ 1 ] =
 10471                           ;main.c: 1665: Read_b_eep(0x43 + 46 + 22u) * 256 +
 10472                           ;main.c: 1667: Read_b_eep(0x43 + 46 + 23u);
 10473  0008EC  6A09               	clrf	?_Read_b_eep+1,c
 10474  0008EE  0E88               	movlw	136
 10475  0008F0  6E08               	movwf	?_Read_b_eep,c
 10476  0008F2  EC70  F024         	call	_Read_b_eep	;wreg free
 10477  0008F6  0100               	movlb	0	; () banked
 10478  0008F8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10479  0008FA  6A09               	clrf	?_Read_b_eep+1,c
 10480  0008FC  0E87               	movlw	135
 10481  0008FE  6E08               	movwf	?_Read_b_eep,c
 10482  000900  EC70  F024         	call	_Read_b_eep	;wreg free
 10483  000904  D21E               	goto	L34
 10484  000906                     l722:
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;main.c: 1672: else if (0 == val) {
 10488  000906  664F               	tstfsz	vscp_writeAppReg@val,c
 10489  000908  EF0F  F009         	goto	l14366
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;main.c: 1673: PORTBbits.RB1 = 0;
 10493  00090C  9281               	bcf	3969,1,c	;volatile
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;main.c: 1674: rv = PORTBbits.RB1;
 10497  00090E  0E00               	movlw	0
 10498  000910  B281               	btfsc	3969,1,c	;volatile
 10499  000912  0E01               	movlw	1
 10500  000914  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10501  000916  D7D2               	goto	l13840
 10502  000918                     l13862:
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;main.c: 1682: bInfoEvent = 1;
 10506  000918  0E01               	movlw	1
 10507  00091A  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;main.c: 1684: if (1 == val) {
 10511  00091C  044F               	decf	vscp_writeAppReg@val,w,c
 10512  00091E  E128               	bnz	l727
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;main.c: 1686: PORTCbits.RC3 = 1;
 10516  000920  8682               	bsf	3970,3,c	;volatile
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;main.c: 1687: rv = PORTCbits.RC3;
 10520  000922  0E00               	movlw	0
 10521  000924  B682               	btfsc	3970,3,c	;volatile
 10522  000926  0E01               	movlw	1
 10523  000928  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;main.c: 1688: bOn = 1;
 10527  00092A  0E01               	movlw	1
 10528  00092C  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;main.c: 1690: if ( Read_b_eep(0x43 + 26) & 0x04) {
 10532  00092E  6A09               	clrf	?_Read_b_eep+1,c
 10533  000930  0E5D               	movlw	93
 10534  000932  6E08               	movwf	?_Read_b_eep,c
 10535  000934  EC70  F024         	call	_Read_b_eep	;wreg free
 10536  000938  0100               	movlb	0	; () banked
 10537  00093A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10538  00093C  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10539  00093E  EF0F  F009         	goto	l14366
 10540  000942                     l13874:
 10541                           
 10542                           ;main.c: 1691: channel_protection_timer[ 2 ] =
 10543                           ;main.c: 1692: Read_b_eep(0x43 + 46 + 24u) * 256 +
 10544                           ;main.c: 1694: Read_b_eep(0x43 + 46 + 25u);
 10545  000942  6A09               	clrf	?_Read_b_eep+1,c
 10546  000944  0E8A               	movlw	138
 10547  000946  6E08               	movwf	?_Read_b_eep,c
 10548  000948  EC70  F024         	call	_Read_b_eep	;wreg free
 10549  00094C  0100               	movlb	0	; () banked
 10550  00094E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10551  000950  6A09               	clrf	?_Read_b_eep+1,c
 10552  000952  0E89               	movlw	137
 10553  000954  6E08               	movwf	?_Read_b_eep,c
 10554  000956  EC70  F024         	call	_Read_b_eep	;wreg free
 10555  00095A  0100               	movlb	0	; () banked
 10556  00095C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10557  00095E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10558  000960  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10559  000962  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10560  000964  6F87               	movwf	(_channel_protection_timer+4)& (0+255),b
 10561  000966  0E00               	movlw	0
 10562  000968  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10563  00096A  6F88               	movwf	(_channel_protection_timer+5)& (0+255),b
 10564  00096C  EF0F  F009         	goto	l14366
 10565  000970                     l727:
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;main.c: 1699: else if (0 == val) {
 10569  000970  664F               	tstfsz	vscp_writeAppReg@val,c
 10570  000972  EF0F  F009         	goto	l14366
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;main.c: 1700: PORTCbits.RC3 = 0;
 10574  000976  9682               	bcf	3970,3,c	;volatile
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;main.c: 1701: rv = PORTCbits.RC3;
 10578  000978  0E00               	movlw	0
 10579  00097A  B682               	btfsc	3970,3,c	;volatile
 10580  00097C  0E01               	movlw	1
 10581  00097E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10582  000980  D79D               	goto	l13840
 10583  000982                     l13882:
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;main.c: 1710: bInfoEvent = 1;
 10587  000982  0E01               	movlw	1
 10588  000984  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;main.c: 1712: if (1 == val) {
 10592  000986  044F               	decf	vscp_writeAppReg@val,w,c
 10593  000988  E128               	bnz	l732
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;main.c: 1714: PORTCbits.RC4 = 1;
 10597  00098A  8882               	bsf	3970,4,c	;volatile
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;main.c: 1715: rv = PORTCbits.RC4;
 10601  00098C  0E00               	movlw	0
 10602  00098E  B882               	btfsc	3970,4,c	;volatile
 10603  000990  0E01               	movlw	1
 10604  000992  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;main.c: 1716: bOn = 1;
 10608  000994  0E01               	movlw	1
 10609  000996  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;main.c: 1718: if (Read_b_eep(0x43 + 27) & 0x04) {
 10613  000998  6A09               	clrf	?_Read_b_eep+1,c
 10614  00099A  0E5E               	movlw	94
 10615  00099C  6E08               	movwf	?_Read_b_eep,c
 10616  00099E  EC70  F024         	call	_Read_b_eep	;wreg free
 10617  0009A2  0100               	movlb	0	; () banked
 10618  0009A4  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10619  0009A6  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10620  0009A8  EF0F  F009         	goto	l14366
 10621  0009AC                     l13894:
 10622                           
 10623                           ;main.c: 1719: channel_protection_timer[ 3 ] =
 10624                           ;main.c: 1720: Read_b_eep(0x43 + 46 + 26u) * 256 +
 10625                           ;main.c: 1722: Read_b_eep(0x43 + 46 + 27u);
 10626  0009AC  6A09               	clrf	?_Read_b_eep+1,c
 10627  0009AE  0E8C               	movlw	140
 10628  0009B0  6E08               	movwf	?_Read_b_eep,c
 10629  0009B2  EC70  F024         	call	_Read_b_eep	;wreg free
 10630  0009B6  0100               	movlb	0	; () banked
 10631  0009B8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10632  0009BA  6A09               	clrf	?_Read_b_eep+1,c
 10633  0009BC  0E8B               	movlw	139
 10634  0009BE  6E08               	movwf	?_Read_b_eep,c
 10635  0009C0  EC70  F024         	call	_Read_b_eep	;wreg free
 10636  0009C4  0100               	movlb	0	; () banked
 10637  0009C6  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10638  0009C8  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10639  0009CA  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10640  0009CC  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10641  0009CE  6F89               	movwf	(_channel_protection_timer+6)& (0+255),b
 10642  0009D0  0E00               	movlw	0
 10643  0009D2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10644  0009D4  6F8A               	movwf	(_channel_protection_timer+7)& (0+255),b
 10645  0009D6  EF0F  F009         	goto	l14366
 10646  0009DA                     l732:
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;main.c: 1727: else if (0 == val) {
 10650  0009DA  664F               	tstfsz	vscp_writeAppReg@val,c
 10651  0009DC  EF0F  F009         	goto	l14366
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;main.c: 1728: PORTCbits.RC4 = 0;
 10655  0009E0  9882               	bcf	3970,4,c	;volatile
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;main.c: 1729: rv = PORTCbits.RC4;
 10659  0009E2  0E00               	movlw	0
 10660  0009E4  B882               	btfsc	3970,4,c	;volatile
 10661  0009E6  0E01               	movlw	1
 10662  0009E8  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10663  0009EA  D768               	goto	l13840
 10664  0009EC                     l13902:
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;main.c: 1738: bInfoEvent = 1;
 10668  0009EC  0E01               	movlw	1
 10669  0009EE  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;main.c: 1740: if (1 == val) {
 10673  0009F0  044F               	decf	vscp_writeAppReg@val,w,c
 10674  0009F2  E127               	bnz	l737
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;main.c: 1742: PORTCbits.RC5 = 1;
 10678  0009F4  8A82               	bsf	3970,5,c	;volatile
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 1743: rv = PORTCbits.RC5;
 10682  0009F6  0E00               	movlw	0
 10683  0009F8  BA82               	btfsc	3970,5,c	;volatile
 10684  0009FA  0E01               	movlw	1
 10685  0009FC  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;main.c: 1744: bOn = 1;
 10689  0009FE  0E01               	movlw	1
 10690  000A00  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;main.c: 1746: if (Read_b_eep(0x43 + 28) & 0x04) {
 10694  000A02  6A09               	clrf	?_Read_b_eep+1,c
 10695  000A04  0E5F               	movlw	95
 10696  000A06  6E08               	movwf	?_Read_b_eep,c
 10697  000A08  EC70  F024         	call	_Read_b_eep	;wreg free
 10698  000A0C  0100               	movlb	0	; () banked
 10699  000A0E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10700  000A10  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10701  000A12  EF0F  F009         	goto	l14366
 10702  000A16                     l13914:
 10703                           
 10704                           ;main.c: 1747: channel_protection_timer[ 4 ] =
 10705                           ;main.c: 1748: Read_b_eep(0x43 + 46 + 28u) * 256 +
 10706                           ;main.c: 1750: Read_b_eep(0x43 + 46 + 29u);
 10707  000A16  6A09               	clrf	?_Read_b_eep+1,c
 10708  000A18  0E8E               	movlw	142
 10709  000A1A  6E08               	movwf	?_Read_b_eep,c
 10710  000A1C  EC70  F024         	call	_Read_b_eep	;wreg free
 10711  000A20  0100               	movlb	0	; () banked
 10712  000A22  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10713  000A24  6A09               	clrf	?_Read_b_eep+1,c
 10714  000A26  0E8D               	movlw	141
 10715  000A28  6E08               	movwf	?_Read_b_eep,c
 10716  000A2A  EC70  F024         	call	_Read_b_eep	;wreg free
 10717  000A2E  0100               	movlb	0	; () banked
 10718  000A30  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10719  000A32  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10720  000A34  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10721  000A36  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10722  000A38  6F8B               	movwf	(_channel_protection_timer+8)& (0+255),b
 10723  000A3A  0E00               	movlw	0
 10724  000A3C  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10725  000A3E  6F8C               	movwf	(_channel_protection_timer+9)& (0+255),b
 10726  000A40  D3EE               	goto	l14366
 10727  000A42                     l737:
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;main.c: 1755: else if (0 == val) {
 10731  000A42  664F               	tstfsz	vscp_writeAppReg@val,c
 10732  000A44  D3EC               	goto	l14366
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;main.c: 1756: PORTCbits.RC5 = 0;
 10736  000A46  9A82               	bcf	3970,5,c	;volatile
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;main.c: 1757: rv = PORTCbits.RC5;
 10740  000A48  0E00               	movlw	0
 10741  000A4A  BA82               	btfsc	3970,5,c	;volatile
 10742  000A4C  0E01               	movlw	1
 10743  000A4E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10744  000A50  D735               	goto	l13840
 10745  000A52                     l13922:
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;main.c: 1766: bInfoEvent = 1;
 10749  000A52  0E01               	movlw	1
 10750  000A54  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;main.c: 1768: if (1 == val) {
 10754  000A56  044F               	decf	vscp_writeAppReg@val,w,c
 10755  000A58  E126               	bnz	l742
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;main.c: 1770: PORTCbits.RC6 = 1;
 10759  000A5A  8C82               	bsf	3970,6,c	;volatile
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;main.c: 1771: rv = PORTCbits.RC6;
 10763  000A5C  0E00               	movlw	0
 10764  000A5E  BC82               	btfsc	3970,6,c	;volatile
 10765  000A60  0E01               	movlw	1
 10766  000A62  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;main.c: 1772: bOn = 1;
 10770  000A64  0E01               	movlw	1
 10771  000A66  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;main.c: 1774: if (Read_b_eep(0x43 + 29) & 0x04) {
 10775  000A68  6A09               	clrf	?_Read_b_eep+1,c
 10776  000A6A  0E60               	movlw	96
 10777  000A6C  6E08               	movwf	?_Read_b_eep,c
 10778  000A6E  EC70  F024         	call	_Read_b_eep	;wreg free
 10779  000A72  0100               	movlb	0	; () banked
 10780  000A74  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10781  000A76  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10782  000A78  D3D2               	goto	l14366
 10783  000A7A                     l13934:
 10784                           
 10785                           ;main.c: 1775: channel_protection_timer[ 5 ] =
 10786                           ;main.c: 1776: Read_b_eep(0x43 + 46 + 30u) * 256 +
 10787                           ;main.c: 1778: Read_b_eep(0x43 + 46 + 31u);
 10788  000A7A  6A09               	clrf	?_Read_b_eep+1,c
 10789  000A7C  0E90               	movlw	144
 10790  000A7E  6E08               	movwf	?_Read_b_eep,c
 10791  000A80  EC70  F024         	call	_Read_b_eep	;wreg free
 10792  000A84  0100               	movlb	0	; () banked
 10793  000A86  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10794  000A88  6A09               	clrf	?_Read_b_eep+1,c
 10795  000A8A  0E8F               	movlw	143
 10796  000A8C  6E08               	movwf	?_Read_b_eep,c
 10797  000A8E  EC70  F024         	call	_Read_b_eep	;wreg free
 10798  000A92  0100               	movlb	0	; () banked
 10799  000A94  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10800  000A96  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10801  000A98  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10802  000A9A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10803  000A9C  6F8D               	movwf	(_channel_protection_timer+10)& (0+255),b
 10804  000A9E  0E00               	movlw	0
 10805  000AA0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10806  000AA2  6F8E               	movwf	(_channel_protection_timer+11)& (0+255),b
 10807  000AA4  D3BC               	goto	l14366
 10808  000AA6                     l742:
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;main.c: 1783: else if (0 == val) {
 10812  000AA6  664F               	tstfsz	vscp_writeAppReg@val,c
 10813  000AA8  D3BA               	goto	l14366
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;main.c: 1784: PORTCbits.RC6 = 0;
 10817  000AAA  9C82               	bcf	3970,6,c	;volatile
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;main.c: 1785: rv = PORTCbits.RC6;
 10821  000AAC  0E00               	movlw	0
 10822  000AAE  BC82               	btfsc	3970,6,c	;volatile
 10823  000AB0  0E01               	movlw	1
 10824  000AB2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10825  000AB4  D703               	goto	l13840
 10826  000AB6                     l13942:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 1793: bInfoEvent = 1;
 10830  000AB6  0E01               	movlw	1
 10831  000AB8  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;main.c: 1795: if (1 == val) {
 10835  000ABA  044F               	decf	vscp_writeAppReg@val,w,c
 10836  000ABC  E126               	bnz	l747
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;main.c: 1797: PORTCbits.RC7 = 1;
 10840  000ABE  8E82               	bsf	3970,7,c	;volatile
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;main.c: 1798: rv = PORTCbits.RC7;
 10844  000AC0  0E00               	movlw	0
 10845  000AC2  BE82               	btfsc	3970,7,c	;volatile
 10846  000AC4  0E01               	movlw	1
 10847  000AC6  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;main.c: 1799: bOn = 1;
 10851  000AC8  0E01               	movlw	1
 10852  000ACA  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;main.c: 1801: if (Read_b_eep(0x43 + 30) & 0x04) {
 10856  000ACC  6A09               	clrf	?_Read_b_eep+1,c
 10857  000ACE  0E61               	movlw	97
 10858  000AD0  6E08               	movwf	?_Read_b_eep,c
 10859  000AD2  EC70  F024         	call	_Read_b_eep	;wreg free
 10860  000AD6  0100               	movlb	0	; () banked
 10861  000AD8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10862  000ADA  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10863  000ADC  D3A0               	goto	l14366
 10864  000ADE                     l13954:
 10865                           
 10866                           ;main.c: 1802: channel_protection_timer[ 6 ] =
 10867                           ;main.c: 1803: Read_b_eep(0x43 + 46 + 32u) * 256 +
 10868                           ;main.c: 1805: Read_b_eep(0x43 + 46 + 33u);
 10869  000ADE  6A09               	clrf	?_Read_b_eep+1,c
 10870  000AE0  0E92               	movlw	146
 10871  000AE2  6E08               	movwf	?_Read_b_eep,c
 10872  000AE4  EC70  F024         	call	_Read_b_eep	;wreg free
 10873  000AE8  0100               	movlb	0	; () banked
 10874  000AEA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10875  000AEC  6A09               	clrf	?_Read_b_eep+1,c
 10876  000AEE  0E91               	movlw	145
 10877  000AF0  6E08               	movwf	?_Read_b_eep,c
 10878  000AF2  EC70  F024         	call	_Read_b_eep	;wreg free
 10879  000AF6  0100               	movlb	0	; () banked
 10880  000AF8  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10881  000AFA  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10882  000AFC  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10883  000AFE  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10884  000B00  6F8F               	movwf	(_channel_protection_timer+12)& (0+255),b
 10885  000B02  0E00               	movlw	0
 10886  000B04  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10887  000B06  6F90               	movwf	(_channel_protection_timer+13)& (0+255),b
 10888  000B08  D38A               	goto	l14366
 10889  000B0A                     l747:
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;main.c: 1810: else if (0 == val) {
 10893  000B0A  664F               	tstfsz	vscp_writeAppReg@val,c
 10894  000B0C  D388               	goto	l14366
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;main.c: 1811: PORTCbits.RC7 = 0;
 10898  000B0E  9E82               	bcf	3970,7,c	;volatile
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;main.c: 1812: rv = PORTCbits.RC7;
 10902  000B10  0E00               	movlw	0
 10903  000B12  BE82               	btfsc	3970,7,c	;volatile
 10904  000B14  0E01               	movlw	1
 10905  000B16  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10906  000B18  D6D1               	goto	l13840
 10907  000B1A                     l13962:
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;main.c: 1820: bInfoEvent = 1;
 10911  000B1A  0E01               	movlw	1
 10912  000B1C  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;main.c: 1822: if (1 == val) {
 10916  000B1E  044F               	decf	vscp_writeAppReg@val,w,c
 10917  000B20  E126               	bnz	l752
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;main.c: 1824: PORTAbits.RA2 = 1;
 10921  000B22  8480               	bsf	3968,2,c	;volatile
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;main.c: 1825: rv = PORTAbits.RA2;
 10925  000B24  0E00               	movlw	0
 10926  000B26  B480               	btfsc	3968,2,c	;volatile
 10927  000B28  0E01               	movlw	1
 10928  000B2A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1826: bOn = 1;
 10932  000B2C  0E01               	movlw	1
 10933  000B2E  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;main.c: 1828: if (Read_b_eep(0x43 + 31) & 0x04) {
 10937  000B30  6A09               	clrf	?_Read_b_eep+1,c
 10938  000B32  0E62               	movlw	98
 10939  000B34  6E08               	movwf	?_Read_b_eep,c
 10940  000B36  EC70  F024         	call	_Read_b_eep	;wreg free
 10941  000B3A  0100               	movlb	0	; () banked
 10942  000B3C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10943  000B3E  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 10944  000B40  D36E               	goto	l14366
 10945  000B42                     l13974:
 10946                           
 10947                           ;main.c: 1829: channel_protection_timer[ 7 ] =
 10948                           ;main.c: 1830: Read_b_eep(0x43 + 46 + 34u) * 256 +
 10949                           ;main.c: 1832: Read_b_eep(0x43 + 46 + 35u);
 10950  000B42  6A09               	clrf	?_Read_b_eep+1,c
 10951  000B44  0E94               	movlw	148
 10952  000B46  6E08               	movwf	?_Read_b_eep,c
 10953  000B48  EC70  F024         	call	_Read_b_eep	;wreg free
 10954  000B4C  0100               	movlb	0	; () banked
 10955  000B4E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 10956  000B50  6A09               	clrf	?_Read_b_eep+1,c
 10957  000B52  0E93               	movlw	147
 10958  000B54  6E08               	movwf	?_Read_b_eep,c
 10959  000B56  EC70  F024         	call	_Read_b_eep	;wreg free
 10960  000B5A  0100               	movlb	0	; () banked
 10961  000B5C  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 10962  000B5E  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 10963  000B60  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 10964  000B62  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 10965  000B64  6F91               	movwf	(_channel_protection_timer+14)& (0+255),b
 10966  000B66  0E00               	movlw	0
 10967  000B68  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 10968  000B6A  6F92               	movwf	(_channel_protection_timer+15)& (0+255),b
 10969  000B6C  D358               	goto	l14366
 10970  000B6E                     l752:
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;main.c: 1837: else if (0 == val) {
 10974  000B6E  664F               	tstfsz	vscp_writeAppReg@val,c
 10975  000B70  D356               	goto	l14366
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;main.c: 1838: PORTAbits.RA2 = 0;
 10979  000B72  9480               	bcf	3968,2,c	;volatile
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 1839: rv = PORTAbits.RA2;
 10983  000B74  0E00               	movlw	0
 10984  000B76  B480               	btfsc	3968,2,c	;volatile
 10985  000B78  0E01               	movlw	1
 10986  000B7A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 10987  000B7C  D69F               	goto	l13840
 10988  000B7E                     l13982:
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;main.c: 1847: bInfoEvent = 1;
 10992  000B7E  0E01               	movlw	1
 10993  000B80  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;main.c: 1849: if (1 == val) {
 10997  000B82  044F               	decf	vscp_writeAppReg@val,w,c
 10998  000B84  E126               	bnz	l757
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;main.c: 1851: PORTAbits.RA1 = 1;
 11002  000B86  8280               	bsf	3968,1,c	;volatile
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;main.c: 1852: rv = PORTAbits.RA1;
 11006  000B88  0E00               	movlw	0
 11007  000B8A  B280               	btfsc	3968,1,c	;volatile
 11008  000B8C  0E01               	movlw	1
 11009  000B8E  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;main.c: 1853: bOn = 1;
 11013  000B90  0E01               	movlw	1
 11014  000B92  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;main.c: 1855: if ( Read_b_eep(0x43 + 32) & 0x04 ) {
 11018  000B94  6A09               	clrf	?_Read_b_eep+1,c
 11019  000B96  0E63               	movlw	99
 11020  000B98  6E08               	movwf	?_Read_b_eep,c
 11021  000B9A  EC70  F024         	call	_Read_b_eep	;wreg free
 11022  000B9E  0100               	movlb	0	; () banked
 11023  000BA0  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11024  000BA2  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 11025  000BA4  D33C               	goto	l14366
 11026  000BA6                     l13994:
 11027                           
 11028                           ;main.c: 1856: channel_protection_timer[ 8 ] =
 11029                           ;main.c: 1857: Read_b_eep(0x43 + 46 + 36u) * 256 +
 11030                           ;main.c: 1859: Read_b_eep(0x43 + 46 + 37u);
 11031  000BA6  6A09               	clrf	?_Read_b_eep+1,c
 11032  000BA8  0E96               	movlw	150
 11033  000BAA  6E08               	movwf	?_Read_b_eep,c
 11034  000BAC  EC70  F024         	call	_Read_b_eep	;wreg free
 11035  000BB0  0100               	movlb	0	; () banked
 11036  000BB2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11037  000BB4  6A09               	clrf	?_Read_b_eep+1,c
 11038  000BB6  0E95               	movlw	149
 11039  000BB8  6E08               	movwf	?_Read_b_eep,c
 11040  000BBA  EC70  F024         	call	_Read_b_eep	;wreg free
 11041  000BBE  0100               	movlb	0	; () banked
 11042  000BC0  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11043  000BC2  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11044  000BC4  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 11045  000BC6  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11046  000BC8  6F93               	movwf	(_channel_protection_timer+16)& (0+255),b
 11047  000BCA  0E00               	movlw	0
 11048  000BCC  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11049  000BCE  6F94               	movwf	(_channel_protection_timer+17)& (0+255),b
 11050  000BD0  D326               	goto	l14366
 11051  000BD2                     l757:
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 1864: else if ( 0 == val ) {
 11055  000BD2  664F               	tstfsz	vscp_writeAppReg@val,c
 11056  000BD4  D324               	goto	l14366
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;main.c: 1865: PORTAbits.RA1 = 0;
 11060  000BD6  9280               	bcf	3968,1,c	;volatile
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;main.c: 1866: rv = PORTAbits.RA1;
 11064  000BD8  0E00               	movlw	0
 11065  000BDA  B280               	btfsc	3968,1,c	;volatile
 11066  000BDC  0E01               	movlw	1
 11067  000BDE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11068  000BE0  D66D               	goto	l13840
 11069  000BE2                     l14002:
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;main.c: 1874: bInfoEvent = 1;
 11073  000BE2  0E01               	movlw	1
 11074  000BE4  6FDA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;main.c: 1876: if ( 1 == val ) {
 11078  000BE6  044F               	decf	vscp_writeAppReg@val,w,c
 11079  000BE8  E126               	bnz	l762
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;main.c: 1878: PORTAbits.RA0 = 1;
 11083  000BEA  8080               	bsf	3968,0,c	;volatile
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;main.c: 1879: rv = PORTAbits.RA0;
 11087  000BEC  0E00               	movlw	0
 11088  000BEE  B080               	btfsc	3968,0,c	;volatile
 11089  000BF0  0E01               	movlw	1
 11090  000BF2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;main.c: 1880: bOn = 1;
 11094  000BF4  0E01               	movlw	1
 11095  000BF6  6FDC               	movwf	vscp_writeAppReg@bOn& (0+255),b
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;main.c: 1882: if ( Read_b_eep(0x43 + 33) & 0x04 ) {
 11099  000BF8  6A09               	clrf	?_Read_b_eep+1,c
 11100  000BFA  0E64               	movlw	100
 11101  000BFC  6E08               	movwf	?_Read_b_eep,c
 11102  000BFE  EC70  F024         	call	_Read_b_eep	;wreg free
 11103  000C02  0100               	movlb	0	; () banked
 11104  000C04  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11105  000C06  A5D2               	btfss	??_vscp_writeAppReg& (0+255),2,b
 11106  000C08  D30A               	goto	l14366
 11107  000C0A                     l14014:
 11108                           
 11109                           ;main.c: 1883: channel_protection_timer[ 9 ] =
 11110                           ;main.c: 1884: Read_b_eep(0x43 + 46 + 38u) * 256 +
 11111                           ;main.c: 1886: Read_b_eep(0x43 + 46 + 39u);
 11112  000C0A  6A09               	clrf	?_Read_b_eep+1,c
 11113  000C0C  0E98               	movlw	152
 11114  000C0E  6E08               	movwf	?_Read_b_eep,c
 11115  000C10  EC70  F024         	call	_Read_b_eep	;wreg free
 11116  000C14  0100               	movlb	0	; () banked
 11117  000C16  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11118  000C18  6A09               	clrf	?_Read_b_eep+1,c
 11119  000C1A  0E97               	movlw	151
 11120  000C1C  6E08               	movwf	?_Read_b_eep,c
 11121  000C1E  EC70  F024         	call	_Read_b_eep	;wreg free
 11122  000C22  0100               	movlb	0	; () banked
 11123  000C24  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11124  000C26  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11125  000C28  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 11126  000C2A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11127  000C2C  6F95               	movwf	(_channel_protection_timer+18)& (0+255),b
 11128  000C2E  0E00               	movlw	0
 11129  000C30  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11130  000C32  6F96               	movwf	(_channel_protection_timer+19)& (0+255),b
 11131  000C34  D2F4               	goto	l14366
 11132  000C36                     l762:
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;main.c: 1891: else if ( 0 == val ) {
 11136  000C36  664F               	tstfsz	vscp_writeAppReg@val,c
 11137  000C38  D2F2               	goto	l14366
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;main.c: 1892: PORTAbits.RA0 = 0;
 11141  000C3A  9080               	bcf	3968,0,c	;volatile
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;main.c: 1893: rv = PORTAbits.RA0;
 11145  000C3C  0E00               	movlw	0
 11146  000C3E  B080               	btfsc	3968,0,c	;volatile
 11147  000C40  0E01               	movlw	1
 11148  000C42  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11149  000C44  D63B               	goto	l13840
 11150  000C46                     l14024:
 11151                           
 11152                           ; BSR set to: 0
 11153  000C46  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 11154                           
 11155                           ; Switch size 1, requested type "space"
 11156                           ; Number of cases is 10, Range of values is 14 to 23
 11157                           ; switch strategies available:
 11158                           ; Name         Instructions Cycles
 11159                           ; simple_byte           31    16 (average)
 11160                           ;	Chosen strategy is simple_byte
 11161  000C48  0A0E               	xorlw	14	; case 14
 11162  000C4A  E101 D603          	bz	l13822
 11163  000C4E  0A01               	xorlw	1	; case 15
 11164  000C50  E101 D637          	bz	l13842
 11165  000C54  0A1F               	xorlw	31	; case 16
 11166  000C56  E101 D65F          	bz	l13862
 11167  000C5A  0A01               	xorlw	1	; case 17
 11168  000C5C  E101 D691          	bz	l13882
 11169  000C60  0A03               	xorlw	3	; case 18
 11170  000C62  E101 D6C3          	bz	l13902
 11171  000C66  0A01               	xorlw	1	; case 19
 11172  000C68  E101 D6F3          	bz	l13922
 11173  000C6C  0A07               	xorlw	7	; case 20
 11174  000C6E  E101 D722          	bz	l13942
 11175  000C72  0A01               	xorlw	1	; case 21
 11176  000C74  E101 D751          	bz	l13962
 11177  000C78  0A03               	xorlw	3	; case 22
 11178  000C7A  E081               	bz	l13982
 11179  000C7C  0A01               	xorlw	1	; case 23
 11180  000C7E  E0B1               	bz	l14002
 11181                           
 11182                           ;main.c: 1899: }
 11183                           ;main.c: 1900: }
 11184  000C80  D2CE               	goto	l14366
 11185  000C82                     l14026:
 11186                           
 11187                           ; BSR set to: 0
 11188                           ;main.c: 1903: else if ( (reg >= 24 ) &&
 11189                           ;main.c: 1904: (reg <= 33) ) {
 11190  000C82  0E17               	movlw	23
 11191  000C84  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11192  000C86  D1B9               	goto	l14276
 11193                           
 11194                           ; BSR set to: 0
 11195  000C88  0E22               	movlw	34
 11196  000C8A  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11197  000C8C  D1B6               	goto	l14276
 11198  000C8E  D197               	goto	l14274
 11199  000C90                     l14032:
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;main.c: 1910: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11203  000C90  ECA4  F024         	call	_Busy_eep	;wreg free
 11204  000C94  DAEA               	call	PL2	;call to abstracted procedure
 11205  000C96  EC85  F022         	call	_Write_b_eep	;wreg free
 11206                           
 11207                           ;main.c: 1911: rv = Read_b_eep(0x43 + 46 + reg);
 11208  000C9A  DB01               	call	PL12	;call to abstracted procedure
 11209  000C9C  EC70  F024         	call	_Read_b_eep	;wreg free
 11210  000CA0  0100               	movlb	0	; () banked
 11211  000CA2  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;main.c: 1913: if ( val & 0x01 ) {
 11215  000CA4  A04F               	btfss	vscp_writeAppReg@val,0,c
 11216  000CA6  D012               	goto	l14046
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;main.c: 1915: PORTBbits.RB0 = 0;
 11220  000CA8  9081               	bcf	3969,0,c	;volatile
 11221                           
 11222                           ;main.c: 1916: bOn = 0;
 11223  000CAA  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;main.c: 1918: channel_pulse_flags |= 0b0000000001;
 11227  000CAC  8168               	bsf	_channel_pulse_flags& (0+255),0,b
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;main.c: 1919: channel_pulse_timer[ 0 ] =
 11231                           ;main.c: 1920: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11232                           ;main.c: 1922: Read_b_eep(0x43 + 46 + 0u);
 11233  000CAE  6A09               	clrf	?_Read_b_eep+1,c
 11234  000CB0  0E71               	movlw	113
 11235  000CB2  6E08               	movwf	?_Read_b_eep,c
 11236  000CB4  EC70  F024         	call	_Read_b_eep	;wreg free
 11237  000CB8  0100               	movlb	0	; () banked
 11238  000CBA  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11239  000CBC  6A09               	clrf	?_Read_b_eep+1,c
 11240  000CBE  0E71               	movlw	113
 11241  000CC0  6E08               	movwf	?_Read_b_eep,c
 11242  000CC2  EC70  F024         	call	_Read_b_eep	;wreg free
 11243  000CC6  DAE4               	call	PL8	;call to abstracted procedure
 11244  000CC8  DAF9               	call	PL74	;call to abstracted procedure
 11245                           
 11246                           ;main.c: 1924: }
 11247  000CCA  D006               	goto	l14052
 11248  000CCC                     l14046:
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;main.c: 1925: else {
 11252                           ;main.c: 1926: channel_pulse_flags &= 0b1111111110;
 11253  000CCC  0EFE               	movlw	254
 11254  000CCE  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11255  000CD0  0E03               	movlw	3
 11256  000CD2  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;main.c: 1927: PORTBbits.RB0 = 0;
 11260  000CD4  9081               	bcf	3969,0,c	;volatile
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;main.c: 1928: bOn = 0;
 11264  000CD6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11265  000CD8                     l14052:
 11266                           
 11267                           ;main.c: 1929: }
 11268                           ;main.c: 1931: if ( val & 0x04 ) {
 11269  000CD8  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11270  000CDA  D5D1               	goto	l13834
 11271  000CDC  D2A0               	goto	l14366
 11272  000CDE                     l14056:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;main.c: 1942: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11276  000CDE  ECA4  F024         	call	_Busy_eep	;wreg free
 11277  000CE2  DAC3               	call	PL2	;call to abstracted procedure
 11278  000CE4  EC85  F022         	call	_Write_b_eep	;wreg free
 11279                           
 11280                           ;main.c: 1943: rv = Read_b_eep(0x43 + 46 + reg);
 11281  000CE8  DADA               	call	PL12	;call to abstracted procedure
 11282  000CEA  EC70  F024         	call	_Read_b_eep	;wreg free
 11283  000CEE  0100               	movlb	0	; () banked
 11284  000CF0  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;main.c: 1945: if ( val & 0x02 ) {
 11288  000CF2  A24F               	btfss	vscp_writeAppReg@val,1,c
 11289  000CF4  D012               	goto	l14070
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;main.c: 1947: PORTBbits.RB1 = 0;
 11293  000CF6  9281               	bcf	3969,1,c	;volatile
 11294                           
 11295                           ;main.c: 1948: bOn = 0;
 11296  000CF8  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;main.c: 1950: channel_pulse_flags |= 0b0000000010;
 11300  000CFA  8368               	bsf	_channel_pulse_flags& (0+255),1,b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;main.c: 1951: channel_pulse_timer[ 1 ] =
 11304                           ;main.c: 1952: Read_b_eep(0x43 + 46 + 0u) * 256 +
 11305                           ;main.c: 1954: Read_b_eep(0x43 + 46 + 1u);
 11306  000CFC  6A09               	clrf	?_Read_b_eep+1,c
 11307  000CFE  0E72               	movlw	114
 11308  000D00  6E08               	movwf	?_Read_b_eep,c
 11309  000D02  EC70  F024         	call	_Read_b_eep	;wreg free
 11310  000D06  0100               	movlb	0	; () banked
 11311  000D08  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11312  000D0A  6A09               	clrf	?_Read_b_eep+1,c
 11313  000D0C  0E71               	movlw	113
 11314  000D0E  6E08               	movwf	?_Read_b_eep,c
 11315  000D10  EC70  F024         	call	_Read_b_eep	;wreg free
 11316  000D14  DABD               	call	PL8	;call to abstracted procedure
 11317  000D16  DB0A               	call	PL100	;call to abstracted procedure
 11318                           
 11319                           ;main.c: 1956: }
 11320  000D18  D006               	goto	l14076
 11321  000D1A                     l14070:
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;main.c: 1957: else {
 11325                           ;main.c: 1958: channel_pulse_flags &= 0b1111111101;
 11326  000D1A  0EFD               	movlw	253
 11327  000D1C  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11328  000D1E  0E03               	movlw	3
 11329  000D20  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;main.c: 1959: PORTBbits.RB1 = 0;
 11333  000D22  9281               	bcf	3969,1,c	;volatile
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;main.c: 1960: bOn = 0;
 11337  000D24  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11338  000D26                     l14076:
 11339                           
 11340                           ;main.c: 1961: }
 11341                           ;main.c: 1963: if ( val & 0x04 ) {
 11342  000D26  A44F               	btfss	vscp_writeAppReg@val,2,c
 11343  000D28  D27A               	goto	l14366
 11344                           
 11345                           ;main.c: 1964: channel_protection_timer[ 1 ] =
 11346                           ;main.c: 1965: Read_b_eep(0x43 + 46 + 20u) * 256 +
 11347                           ;main.c: 1967: Read_b_eep(0x43 + 46 + 21u);
 11348  000D2A  6A09               	clrf	?_Read_b_eep+1,c
 11349  000D2C  0E86               	movlw	134
 11350  000D2E  6E08               	movwf	?_Read_b_eep,c
 11351  000D30  EC70  F024         	call	_Read_b_eep	;wreg free
 11352  000D34  0100               	movlb	0	; () banked
 11353  000D36  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11354  000D38  6A09               	clrf	?_Read_b_eep+1,c
 11355  000D3A  0E85               	movlw	133
 11356  000D3C  6E08               	movwf	?_Read_b_eep,c
 11357  000D3E  EC70  F024         	call	_Read_b_eep	;wreg free
 11358  000D42                     L34:
 11359  000D42  0100               	movlb	0	; () banked
 11360  000D44  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 11361  000D46  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 11362  000D48  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 11363  000D4A  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 11364  000D4C  6F85               	movwf	(_channel_protection_timer+2)& (0+255),b
 11365  000D4E  0E00               	movlw	0
 11366  000D50  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 11367  000D52  6F86               	movwf	(_channel_protection_timer+3)& (0+255),b
 11368  000D54  D264               	goto	l14366
 11369  000D56                     l14080:
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;main.c: 1974: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11373  000D56  ECA4  F024         	call	_Busy_eep	;wreg free
 11374  000D5A  DA87               	call	PL2	;call to abstracted procedure
 11375  000D5C  EC85  F022         	call	_Write_b_eep	;wreg free
 11376                           
 11377                           ;main.c: 1975: rv = Read_b_eep(0x43 + 46 + reg);
 11378  000D60  DA9E               	call	PL12	;call to abstracted procedure
 11379  000D62  EC70  F024         	call	_Read_b_eep	;wreg free
 11380  000D66  0100               	movlb	0	; () banked
 11381  000D68  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;main.c: 1977: if ( val & 0x01 ) {
 11385  000D6A  A04F               	btfss	vscp_writeAppReg@val,0,c
 11386  000D6C  D012               	goto	l14094
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;main.c: 1979: PORTCbits.RC3 = 0;
 11390  000D6E  9682               	bcf	3970,3,c	;volatile
 11391                           
 11392                           ;main.c: 1980: bOn = 0;
 11393  000D70  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;main.c: 1982: channel_pulse_flags |= 0b0000000100;
 11397  000D72  8568               	bsf	_channel_pulse_flags& (0+255),2,b
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;main.c: 1983: channel_pulse_timer[ 2 ] =
 11401                           ;main.c: 1984: Read_b_eep(0x43 + 46 + 4u) * 256 +
 11402                           ;main.c: 1986: Read_b_eep(0x43 + 46 + 5u);
 11403  000D74  6A09               	clrf	?_Read_b_eep+1,c
 11404  000D76  0E76               	movlw	118
 11405  000D78  6E08               	movwf	?_Read_b_eep,c
 11406  000D7A  EC70  F024         	call	_Read_b_eep	;wreg free
 11407  000D7E  0100               	movlb	0	; () banked
 11408  000D80  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11409  000D82  6A09               	clrf	?_Read_b_eep+1,c
 11410  000D84  0E75               	movlw	117
 11411  000D86  6E08               	movwf	?_Read_b_eep,c
 11412  000D88  EC70  F024         	call	_Read_b_eep	;wreg free
 11413  000D8C  DA81               	call	PL8	;call to abstracted procedure
 11414  000D8E  DAA4               	call	PL78	;call to abstracted procedure
 11415                           
 11416                           ;main.c: 1988: }
 11417  000D90  D006               	goto	l14100
 11418  000D92                     l14094:
 11419                           
 11420                           ; BSR set to: 0
 11421                           ;main.c: 1989: else {
 11422                           ;main.c: 1990: channel_pulse_flags &= 0b1111111011;
 11423  000D92  0EFB               	movlw	251
 11424  000D94  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11425  000D96  0E03               	movlw	3
 11426  000D98  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 1991: PORTCbits.RC3 = 0;
 11430  000D9A  9682               	bcf	3970,3,c	;volatile
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;main.c: 1992: bOn = 0;
 11434  000D9C  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11435  000D9E                     l14100:
 11436                           
 11437                           ;main.c: 1993: }
 11438                           ;main.c: 1995: if ( val & 0x04 ) {
 11439  000D9E  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11440  000DA0  D5D0               	goto	l13874
 11441  000DA2  D23D               	goto	l14366
 11442  000DA4                     l14104:
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;main.c: 2006: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11446  000DA4  ECA4  F024         	call	_Busy_eep	;wreg free
 11447  000DA8  DA60               	call	PL2	;call to abstracted procedure
 11448  000DAA  EC85  F022         	call	_Write_b_eep	;wreg free
 11449                           
 11450                           ;main.c: 2007: rv = Read_b_eep(0x43 + 46 + reg);
 11451  000DAE  DA77               	call	PL12	;call to abstracted procedure
 11452  000DB0  EC70  F024         	call	_Read_b_eep	;wreg free
 11453  000DB4  0100               	movlb	0	; () banked
 11454  000DB6  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;main.c: 2009: if ( val & 0x01 ) {
 11458  000DB8  A04F               	btfss	vscp_writeAppReg@val,0,c
 11459  000DBA  D012               	goto	l14118
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;main.c: 2011: PORTCbits.RC4 = 0;
 11463  000DBC  9882               	bcf	3970,4,c	;volatile
 11464                           
 11465                           ;main.c: 2012: bOn = 0;
 11466  000DBE  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;main.c: 2014: channel_pulse_flags |= 0b0000001000;
 11470  000DC0  8768               	bsf	_channel_pulse_flags& (0+255),3,b
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;main.c: 2015: channel_pulse_timer[ 3 ] =
 11474                           ;main.c: 2016: Read_b_eep(0x43 + 46 + 6u) * 256 +
 11475                           ;main.c: 2018: Read_b_eep(0x43 + 46 + 7u);
 11476  000DC2  6A09               	clrf	?_Read_b_eep+1,c
 11477  000DC4  0E78               	movlw	120
 11478  000DC6  6E08               	movwf	?_Read_b_eep,c
 11479  000DC8  EC70  F024         	call	_Read_b_eep	;wreg free
 11480  000DCC  0100               	movlb	0	; () banked
 11481  000DCE  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11482  000DD0  6A09               	clrf	?_Read_b_eep+1,c
 11483  000DD2  0E77               	movlw	119
 11484  000DD4  6E08               	movwf	?_Read_b_eep,c
 11485  000DD6  EC70  F024         	call	_Read_b_eep	;wreg free
 11486  000DDA  DA5A               	call	PL8	;call to abstracted procedure
 11487  000DDC  DAAE               	call	PL102	;call to abstracted procedure
 11488                           
 11489                           ;main.c: 2020: }
 11490  000DDE  D006               	goto	l14124
 11491  000DE0                     l14118:
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;main.c: 2021: else {
 11495                           ;main.c: 2022: channel_pulse_flags &= 0b1111110111;
 11496  000DE0  0EF7               	movlw	247
 11497  000DE2  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11498  000DE4  0E03               	movlw	3
 11499  000DE6  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;main.c: 2023: PORTCbits.RC4 = 0;
 11503  000DE8  9882               	bcf	3970,4,c	;volatile
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;main.c: 2024: bOn = 0;
 11507  000DEA  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11508  000DEC                     l14124:
 11509                           
 11510                           ;main.c: 2025: }
 11511                           ;main.c: 2027: if ( val & 0x04 ) {
 11512  000DEC  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11513  000DEE  D5DE               	goto	l13894
 11514  000DF0  D216               	goto	l14366
 11515  000DF2                     l14128:
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;main.c: 2038: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11519  000DF2  ECA4  F024         	call	_Busy_eep	;wreg free
 11520  000DF6  DA39               	call	PL2	;call to abstracted procedure
 11521  000DF8  EC85  F022         	call	_Write_b_eep	;wreg free
 11522                           
 11523                           ;main.c: 2039: rv = Read_b_eep(0x43 + 46 + reg);
 11524  000DFC  DA50               	call	PL12	;call to abstracted procedure
 11525  000DFE  EC70  F024         	call	_Read_b_eep	;wreg free
 11526  000E02  0100               	movlb	0	; () banked
 11527  000E04  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;main.c: 2041: if ( val & 0x04 ) {
 11531  000E06  A44F               	btfss	vscp_writeAppReg@val,2,c
 11532  000E08  D012               	goto	l14142
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;main.c: 2043: PORTCbits.RC5 = 0;
 11536  000E0A  9A82               	bcf	3970,5,c	;volatile
 11537                           
 11538                           ;main.c: 2044: bOn = 0;
 11539  000E0C  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;main.c: 2046: channel_pulse_flags |= 0b0000010000;
 11543  000E0E  8968               	bsf	_channel_pulse_flags& (0+255),4,b
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;main.c: 2047: channel_pulse_timer[ 4 ] =
 11547                           ;main.c: 2048: Read_b_eep(0x43 + 46 + 8u) * 256 +
 11548                           ;main.c: 2050: Read_b_eep(0x43 + 46 + 9u);
 11549  000E10  6A09               	clrf	?_Read_b_eep+1,c
 11550  000E12  0E7A               	movlw	122
 11551  000E14  6E08               	movwf	?_Read_b_eep,c
 11552  000E16  EC70  F024         	call	_Read_b_eep	;wreg free
 11553  000E1A  0100               	movlb	0	; () banked
 11554  000E1C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11555  000E1E  6A09               	clrf	?_Read_b_eep+1,c
 11556  000E20  0E79               	movlw	121
 11557  000E22  6E08               	movwf	?_Read_b_eep,c
 11558  000E24  EC70  F024         	call	_Read_b_eep	;wreg free
 11559  000E28  DA33               	call	PL8	;call to abstracted procedure
 11560  000E2A  DA4F               	call	PL76	;call to abstracted procedure
 11561                           
 11562                           ;main.c: 2052: }
 11563  000E2C  D006               	goto	l14148
 11564  000E2E                     l14142:
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;main.c: 2053: else {
 11568                           ;main.c: 2054: channel_pulse_flags &= 0b1111101111;
 11569  000E2E  0EEF               	movlw	239
 11570  000E30  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11571  000E32  0E03               	movlw	3
 11572  000E34  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;main.c: 2055: PORTCbits.RC5 = 0;
 11576  000E36  9A82               	bcf	3970,5,c	;volatile
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 2056: bOn = 0;
 11580  000E38  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11581  000E3A                     l14148:
 11582                           
 11583                           ;main.c: 2057: }
 11584                           ;main.c: 2059: if ( val & 0x04 ) {
 11585  000E3A  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11586  000E3C  D5EC               	goto	l13914
 11587  000E3E  D1EF               	goto	l14366
 11588  000E40                     l14152:
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;main.c: 2070: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11592  000E40  ECA4  F024         	call	_Busy_eep	;wreg free
 11593  000E44  DA12               	call	PL2	;call to abstracted procedure
 11594  000E46  EC85  F022         	call	_Write_b_eep	;wreg free
 11595                           
 11596                           ;main.c: 2071: rv = Read_b_eep(0x43 + 46 + reg);
 11597  000E4A  DA29               	call	PL12	;call to abstracted procedure
 11598  000E4C  EC70  F024         	call	_Read_b_eep	;wreg free
 11599  000E50  0100               	movlb	0	; () banked
 11600  000E52  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;main.c: 2073: if ( val & 0x01 ) {
 11604  000E54  A04F               	btfss	vscp_writeAppReg@val,0,c
 11605  000E56  D012               	goto	l14166
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;main.c: 2075: PORTCbits.RC6 = 0;
 11609  000E58  9C82               	bcf	3970,6,c	;volatile
 11610                           
 11611                           ;main.c: 2076: bOn = 0;
 11612  000E5A  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;main.c: 2078: channel_pulse_flags |= 0b0000100000;
 11616  000E5C  8B68               	bsf	_channel_pulse_flags& (0+255),5,b
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;main.c: 2079: channel_pulse_timer[ 5 ] =
 11620                           ;main.c: 2080: Read_b_eep(0x43 + 46 + 10u) * 256 +
 11621                           ;main.c: 2082: Read_b_eep(0x43 + 46 + 11u);
 11622  000E5E  6A09               	clrf	?_Read_b_eep+1,c
 11623  000E60  0E7C               	movlw	124
 11624  000E62  6E08               	movwf	?_Read_b_eep,c
 11625  000E64  EC70  F024         	call	_Read_b_eep	;wreg free
 11626  000E68  0100               	movlb	0	; () banked
 11627  000E6A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11628  000E6C  6A09               	clrf	?_Read_b_eep+1,c
 11629  000E6E  0E7B               	movlw	123
 11630  000E70  6E08               	movwf	?_Read_b_eep,c
 11631  000E72  EC70  F024         	call	_Read_b_eep	;wreg free
 11632  000E76  DA0C               	call	PL8	;call to abstracted procedure
 11633  000E78  DA3D               	call	PL86	;call to abstracted procedure
 11634                           
 11635                           ;main.c: 2084: }
 11636  000E7A  D006               	goto	l14172
 11637  000E7C                     l14166:
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;main.c: 2085: else {
 11641                           ;main.c: 2086: channel_pulse_flags &= 0b1111011111;
 11642  000E7C  0EDF               	movlw	223
 11643  000E7E  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11644  000E80  0E03               	movlw	3
 11645  000E82  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11646                           
 11647                           ; BSR set to: 0
 11648                           ;main.c: 2087: PORTCbits.RC6 = 0;
 11649  000E84  9C82               	bcf	3970,6,c	;volatile
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;main.c: 2088: bOn = 0;
 11653  000E86  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11654  000E88                     l14172:
 11655                           
 11656                           ;main.c: 2089: }
 11657                           ;main.c: 2091: if ( val & 0x04 ) {
 11658  000E88  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11659  000E8A  D5F7               	goto	l13934
 11660  000E8C  D1C8               	goto	l14366
 11661  000E8E                     l14176:
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;main.c: 2102: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11665  000E8E  ECA4  F024         	call	_Busy_eep	;wreg free
 11666  000E92  D9EB               	call	PL2	;call to abstracted procedure
 11667  000E94  EC85  F022         	call	_Write_b_eep	;wreg free
 11668                           
 11669                           ;main.c: 2103: rv = Read_b_eep(0x43 + 46 + reg);
 11670  000E98  DA02               	call	PL12	;call to abstracted procedure
 11671  000E9A  EC70  F024         	call	_Read_b_eep	;wreg free
 11672  000E9E  0100               	movlb	0	; () banked
 11673  000EA0  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;main.c: 2105: if ( val & 0x01 ) {
 11677  000EA2  A04F               	btfss	vscp_writeAppReg@val,0,c
 11678  000EA4  D012               	goto	l14190
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;main.c: 2107: PORTCbits.RC7 = 0;
 11682  000EA6  9E82               	bcf	3970,7,c	;volatile
 11683                           
 11684                           ;main.c: 2108: bOn = 0;
 11685  000EA8  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;main.c: 2110: channel_pulse_flags |= 0b0001000000;
 11689  000EAA  8D68               	bsf	_channel_pulse_flags& (0+255),6,b
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;main.c: 2111: channel_pulse_timer[ 6 ] =
 11693                           ;main.c: 2112: Read_b_eep(0x43 + 46 + 12u) * 256 +
 11694                           ;main.c: 2114: Read_b_eep(0x43 + 46 + 13u);
 11695  000EAC  6A09               	clrf	?_Read_b_eep+1,c
 11696  000EAE  0E7E               	movlw	126
 11697  000EB0  6E08               	movwf	?_Read_b_eep,c
 11698  000EB2  EC70  F024         	call	_Read_b_eep	;wreg free
 11699  000EB6  0100               	movlb	0	; () banked
 11700  000EB8  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11701  000EBA  6A09               	clrf	?_Read_b_eep+1,c
 11702  000EBC  0E7D               	movlw	125
 11703  000EBE  6E08               	movwf	?_Read_b_eep,c
 11704  000EC0  EC70  F024         	call	_Read_b_eep	;wreg free
 11705  000EC4  D9E5               	call	PL8	;call to abstracted procedure
 11706  000EC6  DA2B               	call	PL98	;call to abstracted procedure
 11707                           
 11708                           ;main.c: 2116: }
 11709  000EC8  D006               	goto	l14196
 11710  000ECA                     l14190:
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 2117: else {
 11714                           ;main.c: 2118: channel_pulse_flags &= 0b1110111111;
 11715  000ECA  0EBF               	movlw	191
 11716  000ECC  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11717  000ECE  0E03               	movlw	3
 11718  000ED0  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;main.c: 2119: PORTCbits.RC7 = 0;
 11722  000ED2  9E82               	bcf	3970,7,c	;volatile
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;main.c: 2120: bOn = 0;
 11726  000ED4  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11727  000ED6                     l14196:
 11728                           
 11729                           ;main.c: 2121: }
 11730                           ;main.c: 2123: if ( val & 0x04 ) {
 11731  000ED6  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11732  000ED8  D602               	goto	l13954
 11733  000EDA  D1A1               	goto	l14366
 11734  000EDC                     l14200:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;main.c: 2134: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11738  000EDC  ECA4  F024         	call	_Busy_eep	;wreg free
 11739  000EE0  D9C4               	call	PL2	;call to abstracted procedure
 11740  000EE2  EC85  F022         	call	_Write_b_eep	;wreg free
 11741                           
 11742                           ;main.c: 2135: rv = Read_b_eep(0x43 + 46 + reg);
 11743  000EE6  D9DB               	call	PL12	;call to abstracted procedure
 11744  000EE8  EC70  F024         	call	_Read_b_eep	;wreg free
 11745  000EEC  0100               	movlb	0	; () banked
 11746  000EEE  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;main.c: 2137: if ( val & 0x01 ) {
 11750  000EF0  A04F               	btfss	vscp_writeAppReg@val,0,c
 11751  000EF2  D012               	goto	l14214
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;main.c: 2139: PORTAbits.RA2 = 0;
 11755  000EF4  9480               	bcf	3968,2,c	;volatile
 11756                           
 11757                           ;main.c: 2140: bOn = 0;
 11758  000EF6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;main.c: 2142: channel_pulse_flags |= 0b0010000000;
 11762  000EF8  8F68               	bsf	_channel_pulse_flags& (0+255),7,b
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;main.c: 2143: channel_pulse_timer[ 7 ] =
 11766                           ;main.c: 2144: Read_b_eep(0x43 + 46 + 14u) * 256 +
 11767                           ;main.c: 2146: Read_b_eep(0x43 + 46 + 15u);
 11768  000EFA  6A09               	clrf	?_Read_b_eep+1,c
 11769  000EFC  0E80               	movlw	128
 11770  000EFE  6E08               	movwf	?_Read_b_eep,c
 11771  000F00  EC70  F024         	call	_Read_b_eep	;wreg free
 11772  000F04  0100               	movlb	0	; () banked
 11773  000F06  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11774  000F08  6A09               	clrf	?_Read_b_eep+1,c
 11775  000F0A  0E7F               	movlw	127
 11776  000F0C  6E08               	movwf	?_Read_b_eep,c
 11777  000F0E  EC70  F024         	call	_Read_b_eep	;wreg free
 11778  000F12  D9BE               	call	PL8	;call to abstracted procedure
 11779  000F14  D9E8               	call	PL82	;call to abstracted procedure
 11780                           
 11781                           ;main.c: 2148: }
 11782  000F16  D006               	goto	l14220
 11783  000F18                     l14214:
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;main.c: 2149: else {
 11787                           ;main.c: 2150: channel_pulse_flags &= 0b1101111111;
 11788  000F18  0E7F               	movlw	127
 11789  000F1A  1768               	andwf	_channel_pulse_flags& (0+255),f,b
 11790  000F1C  0E03               	movlw	3
 11791  000F1E  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;main.c: 2151: PORTAbits.RA2 = 0;
 11795  000F20  9480               	bcf	3968,2,c	;volatile
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;main.c: 2152: bOn = 0;
 11799  000F22  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11800  000F24                     l14220:
 11801                           
 11802                           ;main.c: 2153: }
 11803                           ;main.c: 2155: if ( val & 0x04 ) {
 11804  000F24  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11805  000F26  D60D               	goto	l13974
 11806  000F28  D17A               	goto	l14366
 11807  000F2A                     l14224:
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;main.c: 2166: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11811  000F2A  ECA4  F024         	call	_Busy_eep	;wreg free
 11812  000F2E  D99D               	call	PL2	;call to abstracted procedure
 11813  000F30  EC85  F022         	call	_Write_b_eep	;wreg free
 11814                           
 11815                           ;main.c: 2167: rv = Read_b_eep(0x43 + 46 + reg);
 11816  000F34  D9B4               	call	PL12	;call to abstracted procedure
 11817  000F36  EC70  F024         	call	_Read_b_eep	;wreg free
 11818  000F3A  0100               	movlb	0	; () banked
 11819  000F3C  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;main.c: 2169: if ( val & 0x01 ) {
 11823  000F3E  A04F               	btfss	vscp_writeAppReg@val,0,c
 11824  000F40  D012               	goto	l14238
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;main.c: 2171: PORTAbits.RA1 = 0;
 11828  000F42  9280               	bcf	3968,1,c	;volatile
 11829                           
 11830                           ;main.c: 2172: bOn = 0;
 11831  000F44  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 2174: channel_pulse_flags |= 0b0100000000;
 11835  000F46  8169               	bsf	(_channel_pulse_flags+1)& (0+255),0,b
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 2175: channel_pulse_timer[ 8 ] =
 11839                           ;main.c: 2176: Read_b_eep(0x43 + 46 + 16u) * 256 +
 11840                           ;main.c: 2178: Read_b_eep(0x43 + 46 + 17u);
 11841  000F48  6A09               	clrf	?_Read_b_eep+1,c
 11842  000F4A  0E82               	movlw	130
 11843  000F4C  6E08               	movwf	?_Read_b_eep,c
 11844  000F4E  EC70  F024         	call	_Read_b_eep	;wreg free
 11845  000F52  0100               	movlb	0	; () banked
 11846  000F54  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11847  000F56  6A09               	clrf	?_Read_b_eep+1,c
 11848  000F58  0E81               	movlw	129
 11849  000F5A  6E08               	movwf	?_Read_b_eep,c
 11850  000F5C  EC70  F024         	call	_Read_b_eep	;wreg free
 11851  000F60  D997               	call	PL8	;call to abstracted procedure
 11852  000F62  D9D6               	call	PL96	;call to abstracted procedure
 11853                           
 11854                           ;main.c: 2180: }
 11855  000F64  D004               	goto	l14244
 11856  000F66                     l14238:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;main.c: 2181: else {
 11860                           ;main.c: 2182: channel_pulse_flags &= 0b1011111111;
 11861  000F66  0E02               	movlw	2
 11862  000F68  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;main.c: 2183: PORTAbits.RA1 = 0;
 11866  000F6A  9280               	bcf	3968,1,c	;volatile
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;main.c: 2184: bOn = 0;
 11870  000F6C  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11871  000F6E                     l14244:
 11872                           
 11873                           ;main.c: 2185: }
 11874                           ;main.c: 2187: if ( val & 0x04 ) {
 11875  000F6E  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11876  000F70  D61A               	goto	l13994
 11877  000F72  D155               	goto	l14366
 11878  000F74                     l14248:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 2198: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 11882  000F74  ECA4  F024         	call	_Busy_eep	;wreg free
 11883  000F78  D978               	call	PL2	;call to abstracted procedure
 11884  000F7A  EC85  F022         	call	_Write_b_eep	;wreg free
 11885                           
 11886                           ;main.c: 2199: rv = Read_b_eep(0x43 + 46 + reg);
 11887  000F7E  D98F               	call	PL12	;call to abstracted procedure
 11888  000F80  EC70  F024         	call	_Read_b_eep	;wreg free
 11889  000F84  0100               	movlb	0	; () banked
 11890  000F86  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;main.c: 2201: if ( val & 0x01 ) {
 11894  000F88  A04F               	btfss	vscp_writeAppReg@val,0,c
 11895  000F8A  D012               	goto	l14262
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 2203: PORTAbits.RA0 = 0;
 11899  000F8C  9080               	bcf	3968,0,c	;volatile
 11900                           
 11901                           ;main.c: 2204: bOn = 0;
 11902  000F8E  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;main.c: 2206: channel_pulse_flags |= 0b1000000000;
 11906  000F90  8369               	bsf	(_channel_pulse_flags+1)& (0+255),1,b
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;main.c: 2207: channel_pulse_timer[ 9 ] =
 11910                           ;main.c: 2208: Read_b_eep(0x43 + 46 + 18u) * 256 +
 11911                           ;main.c: 2210: Read_b_eep(0x43 + 46 + 19u);
 11912  000F92  6A09               	clrf	?_Read_b_eep+1,c
 11913  000F94  0E84               	movlw	132
 11914  000F96  6E08               	movwf	?_Read_b_eep,c
 11915  000F98  EC70  F024         	call	_Read_b_eep	;wreg free
 11916  000F9C  0100               	movlb	0	; () banked
 11917  000F9E  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 11918  000FA0  6A09               	clrf	?_Read_b_eep+1,c
 11919  000FA2  0E83               	movlw	131
 11920  000FA4  6E08               	movwf	?_Read_b_eep,c
 11921  000FA6  EC70  F024         	call	_Read_b_eep	;wreg free
 11922  000FAA  D972               	call	PL8	;call to abstracted procedure
 11923  000FAC  D9AA               	call	PL90	;call to abstracted procedure
 11924                           
 11925                           ;main.c: 2212: }
 11926  000FAE  D004               	goto	l14268
 11927  000FB0                     l14262:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;main.c: 2213: else {
 11931                           ;main.c: 2214: channel_pulse_flags &= 0b0111111111;
 11932  000FB0  0E01               	movlw	1
 11933  000FB2  1769               	andwf	(_channel_pulse_flags+1)& (0+255),f,b
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;main.c: 2215: PORTAbits.RA0 = 0;
 11937  000FB4  9080               	bcf	3968,0,c	;volatile
 11938                           
 11939                           ; BSR set to: 0
 11940                           ;main.c: 2216: bOn = 0;
 11941  000FB6  6BDC               	clrf	vscp_writeAppReg@bOn& (0+255),b
 11942  000FB8                     l14268:
 11943                           
 11944                           ;main.c: 2217: }
 11945                           ;main.c: 2219: if ( val & 0x04 ) {
 11946  000FB8  B44F               	btfsc	vscp_writeAppReg@val,2,c
 11947  000FBA  D627               	goto	l14014
 11948  000FBC  D130               	goto	l14366
 11949  000FBE                     l14274:
 11950                           
 11951                           ; BSR set to: 0
 11952  000FBE  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 11953                           
 11954                           ; Switch size 1, requested type "space"
 11955                           ; Number of cases is 10, Range of values is 24 to 33
 11956                           ; switch strategies available:
 11957                           ; Name         Instructions Cycles
 11958                           ; simple_byte           31    16 (average)
 11959                           ;	Chosen strategy is simple_byte
 11960  000FC0  0A18               	xorlw	24	; case 24
 11961  000FC2  E101 D665          	bz	l14032
 11962  000FC6  0A01               	xorlw	1	; case 25
 11963  000FC8  E101 D689          	bz	l14056
 11964  000FCC  0A03               	xorlw	3	; case 26
 11965  000FCE  E101 D6C2          	bz	l14080
 11966  000FD2  0A01               	xorlw	1	; case 27
 11967  000FD4  E101 D6E6          	bz	l14104
 11968  000FD8  0A07               	xorlw	7	; case 28
 11969  000FDA  E101 D70A          	bz	l14128
 11970  000FDE  0A01               	xorlw	1	; case 29
 11971  000FE0  E101 D72E          	bz	l14152
 11972  000FE4  0A03               	xorlw	3	; case 30
 11973  000FE6  E101 D752          	bz	l14176
 11974  000FEA  0A01               	xorlw	1	; case 31
 11975  000FEC  E101 D776          	bz	l14200
 11976  000FF0  0A3F               	xorlw	63	; case 32
 11977  000FF2  E09B               	bz	l14224
 11978  000FF4  0A01               	xorlw	1	; case 33
 11979  000FF6  E0BE               	bz	l14248
 11980  000FF8  D112               	goto	l14366
 11981  000FFA                     l14276:
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;main.c: 2231: else if ( ( reg >= 34 ) &&
 11985                           ;main.c: 2232: ( reg <= 45 ) ) {
 11986  000FFA  0E21               	movlw	33
 11987  000FFC  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 11988  000FFE  D10F               	goto	l14366
 11989                           
 11990                           ; BSR set to: 0
 11991  001000  0E2E               	movlw	46
 11992  001002  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 11993  001004  D10C               	goto	l14366
 11994  001006  EF46  F003         	goto	L35
 11995  00100A                     l14286:
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;main.c: 2240: else if ( 1 == vscp_page_select ) {
 11999  00100A  0452               	decf	_vscp_page_select,w,c
 12000  00100C  1053               	iorwf	_vscp_page_select+1,w,c
 12001  00100E  E001 D0F1          	bnz	l14354
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;main.c: 2243: if ( (reg >= 0u ) &&
 12005                           ;main.c: 2244: (reg <= 19u ) ) {
 12006  001012  0E14               	movlw	20
 12007  001014  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12008  001016  D0BA               	goto	l14320
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 2247: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 12012  001018  ECA4  F024         	call	_Busy_eep	;wreg free
 12013  00101C  D926               	call	PL2	;call to abstracted procedure
 12014  00101E  EC85  F022         	call	_Write_b_eep	;wreg free
 12015                           
 12016                           ;main.c: 2248: rv = Read_b_eep(0x43 + 46 + reg);
 12017  001022  D93D               	call	PL12	;call to abstracted procedure
 12018  001024  EC70  F024         	call	_Read_b_eep	;wreg free
 12019  001028  0100               	movlb	0	; () banked
 12020  00102A  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12021                           
 12022                           ;main.c: 2252: switch ( reg ) {
 12023  00102C  D096               	goto	l14318
 12024  00102E                     l14296:
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2255: channel_pulse_timer[ 0 ] =
 12028                           ;main.c: 2256: Read_b_eep(0x43 + 46 + 0u) * 256 +
 12029                           ;main.c: 2258: Read_b_eep(0x43 + 46 + 1u);
 12030  00102E  6A09               	clrf	?_Read_b_eep+1,c
 12031  001030  0E72               	movlw	114
 12032  001032  6E08               	movwf	?_Read_b_eep,c
 12033  001034  EC70  F024         	call	_Read_b_eep	;wreg free
 12034  001038  0100               	movlb	0	; () banked
 12035  00103A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12036  00103C  6A09               	clrf	?_Read_b_eep+1,c
 12037  00103E  0E71               	movlw	113
 12038  001040  6E08               	movwf	?_Read_b_eep,c
 12039  001042  EC70  F024         	call	_Read_b_eep	;wreg free
 12040  001046  D924               	call	PL8	;call to abstracted procedure
 12041  001048  D939               	call	PL74	;call to abstracted procedure
 12042                           
 12043                           ;main.c: 2260: break;
 12044  00104A  D0E9               	goto	l14366
 12045  00104C                     l14298:
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;main.c: 2263: channel_pulse_timer[ 1 ] =
 12049                           ;main.c: 2264: Read_b_eep(0x43 + 46 + 2u) * 256 +
 12050                           ;main.c: 2266: Read_b_eep(0x43 + 46 + 3u);
 12051  00104C  6A09               	clrf	?_Read_b_eep+1,c
 12052  00104E  0E74               	movlw	116
 12053  001050  6E08               	movwf	?_Read_b_eep,c
 12054  001052  EC70  F024         	call	_Read_b_eep	;wreg free
 12055  001056  0100               	movlb	0	; () banked
 12056  001058  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12057  00105A  6A09               	clrf	?_Read_b_eep+1,c
 12058  00105C  0E73               	movlw	115
 12059  00105E  6E08               	movwf	?_Read_b_eep,c
 12060  001060  EC70  F024         	call	_Read_b_eep	;wreg free
 12061  001064  D915               	call	PL8	;call to abstracted procedure
 12062  001066  D962               	call	PL100	;call to abstracted procedure
 12063                           
 12064                           ;main.c: 2268: break;
 12065  001068  D0DA               	goto	l14366
 12066  00106A                     l14300:
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;main.c: 2271: channel_pulse_timer[ 2 ] =
 12070                           ;main.c: 2272: Read_b_eep(0x43 + 46 + 4u) * 256 +
 12071                           ;main.c: 2274: Read_b_eep(0x43 + 46 + 5u);
 12072  00106A  6A09               	clrf	?_Read_b_eep+1,c
 12073  00106C  0E76               	movlw	118
 12074  00106E  6E08               	movwf	?_Read_b_eep,c
 12075  001070  EC70  F024         	call	_Read_b_eep	;wreg free
 12076  001074  0100               	movlb	0	; () banked
 12077  001076  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12078  001078  6A09               	clrf	?_Read_b_eep+1,c
 12079  00107A  0E75               	movlw	117
 12080  00107C  6E08               	movwf	?_Read_b_eep,c
 12081  00107E  EC70  F024         	call	_Read_b_eep	;wreg free
 12082  001082  D906               	call	PL8	;call to abstracted procedure
 12083  001084  D929               	call	PL78	;call to abstracted procedure
 12084                           
 12085                           ;main.c: 2276: break;
 12086  001086  D0CB               	goto	l14366
 12087  001088                     l14302:
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;main.c: 2279: channel_pulse_timer[ 3 ] =
 12091                           ;main.c: 2280: Read_b_eep(0x43 + 46 + 6u) * 256 +
 12092                           ;main.c: 2282: Read_b_eep(0x43 + 46 + 7u);
 12093  001088  6A09               	clrf	?_Read_b_eep+1,c
 12094  00108A  0E78               	movlw	120
 12095  00108C  6E08               	movwf	?_Read_b_eep,c
 12096  00108E  EC70  F024         	call	_Read_b_eep	;wreg free
 12097  001092  0100               	movlb	0	; () banked
 12098  001094  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12099  001096  6A09               	clrf	?_Read_b_eep+1,c
 12100  001098  0E77               	movlw	119
 12101  00109A  6E08               	movwf	?_Read_b_eep,c
 12102  00109C  EC70  F024         	call	_Read_b_eep	;wreg free
 12103  0010A0  D8F7               	call	PL8	;call to abstracted procedure
 12104  0010A2  D94B               	call	PL102	;call to abstracted procedure
 12105                           
 12106                           ;main.c: 2284: break;
 12107  0010A4  D0BC               	goto	l14366
 12108  0010A6                     l14304:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;main.c: 2287: channel_pulse_timer[ 4 ] =
 12112                           ;main.c: 2288: Read_b_eep(0x43 + 46 + 8u) * 256 +
 12113                           ;main.c: 2290: Read_b_eep(0x43 + 46 + 9u);
 12114  0010A6  6A09               	clrf	?_Read_b_eep+1,c
 12115  0010A8  0E7A               	movlw	122
 12116  0010AA  6E08               	movwf	?_Read_b_eep,c
 12117  0010AC  EC70  F024         	call	_Read_b_eep	;wreg free
 12118  0010B0  0100               	movlb	0	; () banked
 12119  0010B2  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12120  0010B4  6A09               	clrf	?_Read_b_eep+1,c
 12121  0010B6  0E79               	movlw	121
 12122  0010B8  6E08               	movwf	?_Read_b_eep,c
 12123  0010BA  EC70  F024         	call	_Read_b_eep	;wreg free
 12124  0010BE  D8E8               	call	PL8	;call to abstracted procedure
 12125  0010C0  D904               	call	PL76	;call to abstracted procedure
 12126                           
 12127                           ;main.c: 2292: break;
 12128  0010C2  D0AD               	goto	l14366
 12129  0010C4                     l14306:
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;main.c: 2295: channel_pulse_timer[ 5 ] =
 12133                           ;main.c: 2296: Read_b_eep(0x43 + 46 + 10u) * 256 +
 12134                           ;main.c: 2298: Read_b_eep(0x43 + 46 + 11u);
 12135  0010C4  6A09               	clrf	?_Read_b_eep+1,c
 12136  0010C6  0E7C               	movlw	124
 12137  0010C8  6E08               	movwf	?_Read_b_eep,c
 12138  0010CA  EC70  F024         	call	_Read_b_eep	;wreg free
 12139  0010CE  0100               	movlb	0	; () banked
 12140  0010D0  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12141  0010D2  6A09               	clrf	?_Read_b_eep+1,c
 12142  0010D4  0E7B               	movlw	123
 12143  0010D6  6E08               	movwf	?_Read_b_eep,c
 12144  0010D8  EC70  F024         	call	_Read_b_eep	;wreg free
 12145  0010DC  D8D9               	call	PL8	;call to abstracted procedure
 12146  0010DE  D90A               	call	PL86	;call to abstracted procedure
 12147                           
 12148                           ;main.c: 2300: break;
 12149  0010E0  D09E               	goto	l14366
 12150  0010E2                     l14308:
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;main.c: 2303: channel_pulse_timer[ 6 ] =
 12154                           ;main.c: 2304: Read_b_eep(0x43 + 46 + 12u) * 256 +
 12155                           ;main.c: 2306: Read_b_eep(0x43 + 46 + 13u);
 12156  0010E2  6A09               	clrf	?_Read_b_eep+1,c
 12157  0010E4  0E7E               	movlw	126
 12158  0010E6  6E08               	movwf	?_Read_b_eep,c
 12159  0010E8  EC70  F024         	call	_Read_b_eep	;wreg free
 12160  0010EC  0100               	movlb	0	; () banked
 12161  0010EE  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12162  0010F0  6A09               	clrf	?_Read_b_eep+1,c
 12163  0010F2  0E7D               	movlw	125
 12164  0010F4  6E08               	movwf	?_Read_b_eep,c
 12165  0010F6  EC70  F024         	call	_Read_b_eep	;wreg free
 12166  0010FA  D8CA               	call	PL8	;call to abstracted procedure
 12167  0010FC  D910               	call	PL98	;call to abstracted procedure
 12168                           
 12169                           ;main.c: 2308: break;
 12170  0010FE  D08F               	goto	l14366
 12171  001100                     l14310:
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 2311: channel_pulse_timer[ 7 ] =
 12175                           ;main.c: 2312: Read_b_eep(0x43 + 46 + 14u) * 256 +
 12176                           ;main.c: 2314: Read_b_eep(0x43 + 46 + 15u);
 12177  001100  6A09               	clrf	?_Read_b_eep+1,c
 12178  001102  0E80               	movlw	128
 12179  001104  6E08               	movwf	?_Read_b_eep,c
 12180  001106  EC70  F024         	call	_Read_b_eep	;wreg free
 12181  00110A  0100               	movlb	0	; () banked
 12182  00110C  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12183  00110E  6A09               	clrf	?_Read_b_eep+1,c
 12184  001110  0E7F               	movlw	127
 12185  001112  6E08               	movwf	?_Read_b_eep,c
 12186  001114  EC70  F024         	call	_Read_b_eep	;wreg free
 12187  001118  D8BB               	call	PL8	;call to abstracted procedure
 12188  00111A  D8E5               	call	PL82	;call to abstracted procedure
 12189                           
 12190                           ;main.c: 2316: break;
 12191  00111C  D080               	goto	l14366
 12192  00111E                     l14312:
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;main.c: 2319: channel_pulse_timer[ 8 ] =
 12196                           ;main.c: 2320: Read_b_eep(0x43 + 46 + 16u) * 256 +
 12197                           ;main.c: 2322: Read_b_eep(0x43 + 46 + 17u);
 12198  00111E  6A09               	clrf	?_Read_b_eep+1,c
 12199  001120  0E82               	movlw	130
 12200  001122  6E08               	movwf	?_Read_b_eep,c
 12201  001124  EC70  F024         	call	_Read_b_eep	;wreg free
 12202  001128  0100               	movlb	0	; () banked
 12203  00112A  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12204  00112C  6A09               	clrf	?_Read_b_eep+1,c
 12205  00112E  0E81               	movlw	129
 12206  001130  6E08               	movwf	?_Read_b_eep,c
 12207  001132  EC70  F024         	call	_Read_b_eep	;wreg free
 12208  001136  D8AC               	call	PL8	;call to abstracted procedure
 12209  001138  D8EB               	call	PL96	;call to abstracted procedure
 12210                           
 12211                           ;main.c: 2324: break;
 12212  00113A  D071               	goto	l14366
 12213  00113C                     l14314:
 12214                           
 12215                           ; BSR set to: 0
 12216                           ;main.c: 2327: channel_pulse_timer[ 9 ] =
 12217                           ;main.c: 2328: Read_b_eep(0x43 + 46 + 18u) * 256 +
 12218                           ;main.c: 2330: Read_b_eep(0x43 + 46 + 19u);
 12219  00113C  6A09               	clrf	?_Read_b_eep+1,c
 12220  00113E  0E84               	movlw	132
 12221  001140  6E08               	movwf	?_Read_b_eep,c
 12222  001142  EC70  F024         	call	_Read_b_eep	;wreg free
 12223  001146  0100               	movlb	0	; () banked
 12224  001148  6FD2               	movwf	??_vscp_writeAppReg& (0+255),b
 12225  00114A  6A09               	clrf	?_Read_b_eep+1,c
 12226  00114C  0E83               	movlw	131
 12227  00114E  6E08               	movwf	?_Read_b_eep,c
 12228  001150  EC70  F024         	call	_Read_b_eep	;wreg free
 12229  001154  D89D               	call	PL8	;call to abstracted procedure
 12230  001156  D8D5               	call	PL90	;call to abstracted procedure
 12231                           
 12232                           ;main.c: 2332: break;
 12233  001158  D062               	goto	l14366
 12234  00115A                     l14318:
 12235                           
 12236                           ; BSR set to: 0
 12237  00115A  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12238                           
 12239                           ; Switch size 1, requested type "space"
 12240                           ; Number of cases is 10, Range of values is 1 to 19
 12241                           ; switch strategies available:
 12242                           ; Name         Instructions Cycles
 12243                           ; simple_byte           31    16 (average)
 12244                           ;	Chosen strategy is simple_byte
 12245  00115C  0A01               	xorlw	1	; case 1
 12246  00115E  E101 D766          	bz	l14296
 12247  001162  0A02               	xorlw	2	; case 3
 12248  001164  E101 D772          	bz	l14298
 12249  001168  0A06               	xorlw	6	; case 5
 12250  00116A  E101 D77E          	bz	l14300
 12251  00116E  0A02               	xorlw	2	; case 7
 12252  001170  E08B               	bz	l14302
 12253  001172  0A0E               	xorlw	14	; case 9
 12254  001174  E098               	bz	l14304
 12255  001176  0A02               	xorlw	2	; case 11
 12256  001178  E0A5               	bz	l14306
 12257  00117A  0A06               	xorlw	6	; case 13
 12258  00117C  E0B2               	bz	l14308
 12259  00117E  0A02               	xorlw	2	; case 15
 12260  001180  E0BF               	bz	l14310
 12261  001182  0A1E               	xorlw	30	; case 17
 12262  001184  E0CC               	bz	l14312
 12263  001186  0A02               	xorlw	2	; case 19
 12264  001188  E0D9               	bz	l14314
 12265  00118A  D049               	goto	l14366
 12266  00118C                     l14320:
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;main.c: 2340: else if ( ( reg >= 20u ) &&
 12270                           ;main.c: 2341: ( reg <= 39u ) ) {
 12271  00118C  0E13               	movlw	19
 12272  00118E  65DD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
 12273  001190  D046               	goto	l14366
 12274                           
 12275                           ; BSR set to: 0
 12276  001192  0E28               	movlw	40
 12277  001194  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12278  001196  D043               	goto	l14366
 12279                           
 12280                           ; BSR set to: 0
 12281                           ;main.c: 2344: (Busy_eep(), Write_b_eep(0x43 + 46 + reg,val));
 12282  001198  ECA4  F024         	call	_Busy_eep	;wreg free
 12283  00119C  D866               	call	PL2	;call to abstracted procedure
 12284  00119E  EC85  F022         	call	_Write_b_eep	;wreg free
 12285                           
 12286                           ;main.c: 2345: rv = Read_b_eep(0x43 + 46 + reg);
 12287  0011A2  D87D               	call	PL12	;call to abstracted procedure
 12288  0011A4  EC70  F024         	call	_Read_b_eep	;wreg free
 12289  0011A8  0100               	movlb	0	; () banked
 12290  0011AA  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12291                           
 12292                           ; BSR set to: 0
 12293                           
 12294                           ;main.c: 2347: switch ( reg ) {
 12295  0011AC  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12296                           
 12297                           ; Switch size 1, requested type "space"
 12298                           ; Number of cases is 10, Range of values is 21 to 39
 12299                           ; switch strategies available:
 12300                           ; Name         Instructions Cycles
 12301                           ; simple_byte           31    16 (average)
 12302                           ;	Chosen strategy is simple_byte
 12303  0011AE  0A15               	xorlw	21	; case 21
 12304  0011B0  E102 EF3F  F004    	bz	l13834
 12305  0011B6  0A02               	xorlw	2	; case 23
 12306  0011B8  E102 EF76  F004    	bz	l13854
 12307  0011BE  0A0E               	xorlw	14	; case 25
 12308  0011C0  E102 EFA1  F004    	bz	l13874
 12309  0011C6  0A02               	xorlw	2	; case 27
 12310  0011C8  E102 EFD6  F004    	bz	l13894
 12311  0011CE  0A06               	xorlw	6	; case 29
 12312  0011D0  E101 D421          	bz	l13914
 12313  0011D4  0A02               	xorlw	2	; case 31
 12314  0011D6  E101 D450          	bz	l13934
 12315  0011DA  0A3E               	xorlw	62	; case 33
 12316  0011DC  E101 D47F          	bz	l13954
 12317  0011E0  0A02               	xorlw	2	; case 35
 12318  0011E2  E101 D4AE          	bz	l13974
 12319  0011E6  0A06               	xorlw	6	; case 37
 12320  0011E8  E101 D4DD          	bz	l13994
 12321  0011EC  0A02               	xorlw	2	; case 39
 12322  0011EE  E101 D50C          	bz	l14014
 12323  0011F2  D015               	goto	l14366
 12324  0011F4                     l14354:
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;main.c: 2438: else if ( 2 == vscp_page_select ) {
 12328  0011F4  5052               	movf	_vscp_page_select,w,c
 12329  0011F6  0A02               	xorlw	2
 12330  0011F8  1053               	iorwf	_vscp_page_select+1,w,c
 12331  0011FA  E111               	bnz	l14366
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;main.c: 2440: if ( reg < (0 + 8 * 8) ) {
 12335  0011FC  0E40               	movlw	64
 12336  0011FE  61DD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
 12337  001200  D00E               	goto	l14366
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;main.c: 2441: (Busy_eep(), Write_b_eep(0x43 + 46 + 40u + reg,val));
 12341  001202  ECA4  F024         	call	_Busy_eep	;wreg free
 12342  001206  0E99               	movlw	153
 12343  001208  D83A               	call	PL4	;call to abstracted procedure
 12344  00120A  EC85  F022         	call	_Write_b_eep	;wreg free
 12345                           
 12346                           ;main.c: 2442: calculateSetFilterMask();
 12347  00120E  EC1E  F012         	call	_calculateSetFilterMask	;wreg free
 12348                           
 12349                           ;main.c: 2443: rv = Read_b_eep(0x43 + 46 + 40u + reg);
 12350  001212  0E99               	movlw	153
 12351  001214  D84C               	call	PL14	;call to abstracted procedure
 12352  001216  EC70  F024         	call	_Read_b_eep	;wreg free
 12353  00121A                     L32:
 12354  00121A  0100               	movlb	0	; () banked
 12355  00121C                     L33:
 12356  00121C  6FDB               	movwf	vscp_writeAppReg@rv& (0+255),b
 12357  00121E                     l14366:
 12358                           
 12359                           ;main.c: 2444: }
 12360                           ;main.c: 2446: }
 12361                           ;main.c: 2452: if ( bInfoEvent ) {
 12362  00121E  0100               	movlb	0	; () banked
 12363  001220  51DA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
 12364  001222  E021               	bz	l14378
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;main.c: 2454: unsigned char val;
 12368                           ;main.c: 2455: val = Read_b_eep(0x43 + 14 + ( reg - 14 ));
 12369  001224  0E43               	movlw	67
 12370  001226  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12371  001228  6E08               	movwf	?_Read_b_eep,c
 12372  00122A  6A09               	clrf	?_Read_b_eep+1,c
 12373  00122C  0E00               	movlw	0
 12374  00122E  2209               	addwfc	?_Read_b_eep+1,f,c
 12375  001230  EC70  F024         	call	_Read_b_eep	;wreg free
 12376  001234  0100               	movlb	0	; () banked
 12377  001236  6FD9               	movwf	vscp_writeAppReg@val_1262& (0+255),b
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;main.c: 2459: if ( bOn ) {
 12381  001238  51DC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
 12382  00123A  E00B               	bz	l847
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;main.c: 2461: if ( val & 0x08 ) {
 12386  00123C  A7D9               	btfss	vscp_writeAppReg@val_1262& (0+255),3,b
 12387  00123E  D013               	goto	l14378
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;main.c: 2462: SendInformationEvent( reg - 14,
 12391                           ;main.c: 2463: 20,
 12392                           ;main.c: 2464: 3 );
 12393  001240  0E14               	movlw	20
 12394  001242  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12395  001244  0E03               	movlw	3
 12396  001246  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12397  001248  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12398  00124A  0FF2               	addlw	242
 12399  00124C  ECB2  F021         	call	_SendInformationEvent
 12400  001250  D00A               	goto	l14378
 12401  001252                     l847:
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;main.c: 2468: else {
 12405                           ;main.c: 2470: if ( val & 0x10 ) {
 12406  001252  A9D9               	btfss	vscp_writeAppReg@val_1262& (0+255),4,b
 12407  001254  D008               	goto	l14378
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;main.c: 2471: SendInformationEvent( reg - 14,
 12411                           ;main.c: 2472: 20,
 12412                           ;main.c: 2473: 4 );
 12413  001256  0E14               	movlw	20
 12414  001258  6FD0               	movwf	?_SendInformationEvent& (0+255),b
 12415  00125A  0E04               	movlw	4
 12416  00125C  6FD1               	movwf	(?_SendInformationEvent+1)& (0+255),b
 12417  00125E  51DD               	movf	vscp_writeAppReg@reg& (0+255),w,b
 12418  001260  0FF2               	addlw	242
 12419  001262  ECB2  F021         	call	_SendInformationEvent
 12420  001266                     l14378:
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;main.c: 2474: }
 12424                           ;main.c: 2476: }
 12425                           ;main.c: 2477: }
 12426                           ;main.c: 2479: return rv;
 12427  001266  51DB               	movf	vscp_writeAppReg@rv& (0+255),w,b
 12428                           
 12429                           ; BSR set to: 0
 12430  001268  0012               	return	
 12431  00126A                     __end_of_vscp_writeAppReg:
 12432                           	opt stack 0
 12433  00126A                     PL2:
 12434                           	opt stack 20
 12435  00126A  0E71               	movlw	113
 12436  00126C  0100               	movlb	0	; () banked
 12437  00126E  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12438  001270  6E08               	movwf	?_Write_b_eep,c
 12439  001272  6A09               	clrf	?_Write_b_eep+1,c
 12440  001274  0E00               	movlw	0
 12441  001276  2209               	addwfc	?_Write_b_eep+1,f,c
 12442  001278  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 12443  00127C  0C00               	retlw	0
 12444  00127E                     __end_ofPL2:
 12445                           	opt stack 0
 12446  00127E                     PL4:
 12447                           	opt stack 20
 12448  00127E  0100               	movlb	0	; () banked
 12449  001280  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12450  001282  6E08               	movwf	?_Write_b_eep,c
 12451  001284  6A09               	clrf	?_Write_b_eep+1,c
 12452  001286  0E00               	movlw	0
 12453  001288  2209               	addwfc	?_Write_b_eep+1,f,c
 12454  00128A  C04F  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 12455  00128E  0C00               	retlw	0
 12456  001290                     __end_ofPL4:
 12457                           	opt stack 0
 12458  001290                     PL8:
 12459                           	opt stack 20
 12460  001290  0100               	movlb	0	; () banked
 12461  001292  6FD4               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
 12462  001294  6BD3               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
 12463  001296  51D2               	movf	??_vscp_writeAppReg& (0+255),w,b
 12464  001298  25D3               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
 12465  00129A  0101               	movlb	1	; () banked
 12466  00129C  0012               	return	
 12467  00129E                     __end_ofPL8:
 12468                           	opt stack 0
 12469  00129E                     PL12:
 12470                           	opt stack 20
 12471  00129E  0E71               	movlw	113
 12472  0012A0  0100               	movlb	0	; () banked
 12473  0012A2  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12474  0012A4  6E08               	movwf	?_Read_b_eep,c
 12475  0012A6  6A09               	clrf	?_Read_b_eep+1,c
 12476  0012A8  0E00               	movlw	0
 12477  0012AA  2209               	addwfc	?_Read_b_eep+1,f,c
 12478  0012AC  0C00               	retlw	0
 12479  0012AE                     __end_ofPL12:
 12480                           	opt stack 0
 12481  0012AE                     PL14:
 12482                           	opt stack 20
 12483  0012AE  0100               	movlb	0	; () banked
 12484  0012B0  25DD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
 12485  0012B2  6E08               	movwf	?_Read_b_eep,c
 12486  0012B4  6A09               	clrf	?_Read_b_eep+1,c
 12487  0012B6  0E00               	movlw	0
 12488  0012B8  2209               	addwfc	?_Read_b_eep+1,f,c
 12489  0012BA  0C00               	retlw	0
 12490  0012BC                     __end_ofPL14:
 12491                           	opt stack 0
 12492  0012BC                     PL74:
 12493                           	opt stack 20
 12494  0012BC  6F00               	movwf	_channel_pulse_timer& (0+255),b
 12495  0012BE  0100               	movlb	0	; () banked
 12496  0012C0  0E00               	movlw	0
 12497  0012C2  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12498  0012C4  0101               	movlb	1	; () banked
 12499  0012C6  6F01               	movwf	(_channel_pulse_timer+1)& (0+255),b
 12500  0012C8  0012               	return	
 12501  0012CA                     __end_ofPL74:
 12502                           	opt stack 0
 12503  0012CA                     PL76:
 12504                           	opt stack 20
 12505  0012CA  6F08               	movwf	(_channel_pulse_timer+8)& (0+255),b
 12506  0012CC  0100               	movlb	0	; () banked
 12507  0012CE  0E00               	movlw	0
 12508  0012D0  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12509  0012D2  0101               	movlb	1	; () banked
 12510  0012D4  6F09               	movwf	(_channel_pulse_timer+9)& (0+255),b
 12511  0012D6  0012               	return	
 12512  0012D8                     __end_ofPL76:
 12513                           	opt stack 0
 12514  0012D8                     PL78:
 12515                           	opt stack 20
 12516  0012D8  6F04               	movwf	(_channel_pulse_timer+4)& (0+255),b
 12517  0012DA  0100               	movlb	0	; () banked
 12518  0012DC  0E00               	movlw	0
 12519  0012DE  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12520  0012E0  0101               	movlb	1	; () banked
 12521  0012E2  6F05               	movwf	(_channel_pulse_timer+5)& (0+255),b
 12522  0012E4  0012               	return	
 12523  0012E6                     __end_ofPL78:
 12524                           	opt stack 0
 12525  0012E6                     PL82:
 12526                           	opt stack 20
 12527  0012E6  6F0E               	movwf	(_channel_pulse_timer+14)& (0+255),b
 12528  0012E8  0100               	movlb	0	; () banked
 12529  0012EA  0E00               	movlw	0
 12530  0012EC  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12531  0012EE  0101               	movlb	1	; () banked
 12532  0012F0  6F0F               	movwf	(_channel_pulse_timer+15)& (0+255),b
 12533  0012F2  0012               	return	
 12534  0012F4                     __end_ofPL82:
 12535                           	opt stack 0
 12536  0012F4                     PL86:
 12537                           	opt stack 20
 12538  0012F4  6F0A               	movwf	(_channel_pulse_timer+10)& (0+255),b
 12539  0012F6  0100               	movlb	0	; () banked
 12540  0012F8  0E00               	movlw	0
 12541  0012FA  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12542  0012FC  0101               	movlb	1	; () banked
 12543  0012FE  6F0B               	movwf	(_channel_pulse_timer+11)& (0+255),b
 12544  001300  0012               	return	
 12545  001302                     __end_ofPL86:
 12546                           	opt stack 0
 12547  001302                     PL90:
 12548                           	opt stack 20
 12549  001302  6F12               	movwf	(_channel_pulse_timer+18)& (0+255),b
 12550  001304  0100               	movlb	0	; () banked
 12551  001306  0E00               	movlw	0
 12552  001308  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12553  00130A  0101               	movlb	1	; () banked
 12554  00130C  6F13               	movwf	(_channel_pulse_timer+19)& (0+255),b
 12555  00130E  0012               	return	
 12556  001310                     __end_ofPL90:
 12557                           	opt stack 0
 12558  001310                     PL96:
 12559                           	opt stack 20
 12560  001310  6F10               	movwf	(_channel_pulse_timer+16)& (0+255),b
 12561  001312  0100               	movlb	0	; () banked
 12562  001314  0E00               	movlw	0
 12563  001316  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12564  001318  0101               	movlb	1	; () banked
 12565  00131A  6F11               	movwf	(_channel_pulse_timer+17)& (0+255),b
 12566  00131C  0012               	return	
 12567  00131E                     __end_ofPL96:
 12568                           	opt stack 0
 12569  00131E                     PL98:
 12570                           	opt stack 20
 12571  00131E  6F0C               	movwf	(_channel_pulse_timer+12)& (0+255),b
 12572  001320  0100               	movlb	0	; () banked
 12573  001322  0E00               	movlw	0
 12574  001324  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12575  001326  0101               	movlb	1	; () banked
 12576  001328  6F0D               	movwf	(_channel_pulse_timer+13)& (0+255),b
 12577  00132A  0012               	return	
 12578  00132C                     __end_ofPL98:
 12579                           	opt stack 0
 12580  00132C                     PL100:
 12581                           	opt stack 20
 12582  00132C  6F02               	movwf	(_channel_pulse_timer+2)& (0+255),b
 12583  00132E  0100               	movlb	0	; () banked
 12584  001330  0E00               	movlw	0
 12585  001332  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12586  001334  0101               	movlb	1	; () banked
 12587  001336  6F03               	movwf	(_channel_pulse_timer+3)& (0+255),b
 12588  001338  0012               	return	
 12589  00133A                     __end_ofPL100:
 12590                           	opt stack 0
 12591  00133A                     PL102:
 12592                           	opt stack 20
 12593  00133A  6F06               	movwf	(_channel_pulse_timer+6)& (0+255),b
 12594  00133C  0100               	movlb	0	; () banked
 12595  00133E  0E00               	movlw	0
 12596  001340  21D4               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
 12597  001342  0101               	movlb	1	; () banked
 12598  001344  6F07               	movwf	(_channel_pulse_timer+7)& (0+255),b
 12599  001346  0012               	return	
 12600  001348                     __end_ofPL102:
 12601                           	opt stack 0
 12602                           tblptru	equ	0xFF8
 12603                           tblptrh	equ	0xFF7
 12604                           tblptrl	equ	0xFF6
 12605                           tablat	equ	0xFF5
 12606                           prodh	equ	0xFF4
 12607                           prodl	equ	0xFF3
 12608                           intcon	equ	0xFF2
 12609                           intcon2	equ	0xFF1
 12610                           postinc0	equ	0xFEE
 12611                           wreg	equ	0xFE8
 12612                           indf1	equ	0xFE7
 12613                           fsr1h	equ	0xFE2
 12614                           fsr1l	equ	0xFE1
 12615                           indf2	equ	0xFDF
 12616                           postinc2	equ	0xFDE
 12617                           postdec2	equ	0xFDD
 12618                           plusw2	equ	0xFDB
 12619                           fsr2h	equ	0xFDA
 12620                           fsr2l	equ	0xFD9
 12621                           status	equ	0xFD8
 12622                           
 12623 ;; *************** function _calculateSetFilterMask *****************
 12624 ;; Defined at:
 12625 ;;		line 3674 in file "../main.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;		None
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  rowfilter       4   61[COMRAM] unsigned long 
 12630 ;;  filter          4   57[COMRAM] unsigned long 
 12631 ;;  mask            4   53[COMRAM] unsigned long 
 12632 ;;  rowmask         4   48[COMRAM] unsigned long 
 12633 ;;  i               1   66[COMRAM] unsigned char 
 12634 ;;  j               1   65[COMRAM] unsigned char 
 12635 ;;  lastOID         1   52[COMRAM] unsigned char 
 12636 ;; Return value:  Size  Location     Type
 12637 ;;		None               void
 12638 ;; Registers used:
 12639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12645 ;;      Params:         0       0       0       0       0       0       0
 12646 ;;      Locals:        19       0       0       0       0       0       0
 12647 ;;      Temps:         31       0       0       0       0       0       0
 12648 ;;      Totals:        50       0       0       0       0       0       0
 12649 ;;Total ram usage:       50 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    3
 12652 ;; This function calls:
 12653 ;;		_ECANSetOperationMode
 12654 ;;		__CANIDToRegs
 12655 ;;		_Read_b_eep
 12656 ;; This function is called by:
 12657 ;;		_vscp_writeAppReg
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text26
 12662  00243C                     __ptext26:
 12663                           	opt stack 0
 12664  00243C                     _calculateSetFilterMask:
 12665                           	opt stack 23
 12666                           
 12667                           ;main.c: 3675: uint8_t i,j;
 12668                           ;main.c: 3676: uint8_t lastOID;
 12669                           ;main.c: 3677: uint32_t rowmask;
 12670                           ;main.c: 3678: uint32_t rowfilter;
 12671                           ;main.c: 3681: uint32_t mask = 0xffffffff;
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;incstack = 0
 12675                           ;incstack = 0
 12676  00243C  6836               	setf	calculateSetFilterMask@mask,c
 12677  00243E  6837               	setf	calculateSetFilterMask@mask+1,c
 12678  002440  6838               	setf	calculateSetFilterMask@mask+2,c
 12679  002442  6839               	setf	calculateSetFilterMask@mask+3,c
 12680                           
 12681                           ;main.c: 3682: uint32_t filter = 0;
 12682  002444  6A3A               	clrf	calculateSetFilterMask@filter,c
 12683  002446  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 12684  002448  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 12685  00244A  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 12686                           
 12687                           ;main.c: 3685: for ( i=0; i < 8; i++ ) {
 12688  00244C  6A43               	clrf	calculateSetFilterMask@i,c
 12689  00244E                     l14388:
 12690                           
 12691                           ;main.c: 3688: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 12692  00244E  5043               	movf	calculateSetFilterMask@i,w,c
 12693  002450  D972               	call	PL24	;call to abstracted procedure
 12694  002452  0E44               	movlw	68
 12695  002454  2412               	addwf	??_calculateSetFilterMask,w,c
 12696  002456  6E08               	movwf	?_Read_b_eep,c
 12697  002458  0E00               	movlw	0
 12698  00245A  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12699  00245C  6E09               	movwf	?_Read_b_eep+1,c
 12700  00245E  EC70  F024         	call	_Read_b_eep	;wreg free
 12701  002462  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 12702  002464  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 12703  002466  D11A               	goto	l14432
 12704                           
 12705                           ;main.c: 3697: rowmask =
 12706                           ;main.c: 3699: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 12707                           ;main.c: 3701: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 12708                           ;main.c: 3703: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 12709                           ;main.c: 3705: 0xff;
 12710  002468  5043               	movf	calculateSetFilterMask@i,w,c
 12711  00246A  D965               	call	PL24	;call to abstracted procedure
 12712  00246C  0E47               	movlw	71
 12713  00246E  2412               	addwf	??_calculateSetFilterMask,w,c
 12714  002470  6E08               	movwf	?_Read_b_eep,c
 12715  002472  0E00               	movlw	0
 12716  002474  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12717  002476  6E09               	movwf	?_Read_b_eep+1,c
 12718  002478  EC70  F024         	call	_Read_b_eep	;wreg free
 12719  00247C  D968               	call	PL26	;call to abstracted procedure
 12720  00247E  0E45               	movlw	69
 12721  002480  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12722  002482  6E08               	movwf	?_Read_b_eep,c
 12723  002484  0E00               	movlw	0
 12724  002486  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12725  002488  6E09               	movwf	?_Read_b_eep+1,c
 12726  00248A  EC70  F024         	call	_Read_b_eep	;wreg free
 12727  00248E  D934               	call	PL20	;call to abstracted procedure
 12728  002490  EC70  F024         	call	_Read_b_eep	;wreg free
 12729  002494  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12730  002496  0E02               	movlw	2
 12731  002498  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12732  00249A  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12733  00249E  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12734  0024A0  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12735  0024A2  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12736  0024A4  0E17               	movlw	23
 12737  0024A6                     u18825:
 12738  0024A6  90D8               	bcf	status,0,c
 12739  0024A8  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 12740  0024AA  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 12741  0024AC  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 12742  0024AE  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 12743  0024B0  2EE8               	decfsz	wreg,f,c
 12744  0024B2  D7F9               	goto	u18825
 12745  0024B4  501C               	movf	??_calculateSetFilterMask+10,w,c
 12746  0024B6  D965               	call	PL30	;call to abstracted procedure
 12747  0024B8  0EFF               	movlw	255
 12748  0024BA  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12749  0024BC  6E31               	movwf	calculateSetFilterMask@rowmask,c
 12750  0024BE  502C               	movf	??_calculateSetFilterMask+26,w,c
 12751  0024C0  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 12752  0024C2  502D               	movf	??_calculateSetFilterMask+27,w,c
 12753  0024C4  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 12754  0024C6  502E               	movf	??_calculateSetFilterMask+28,w,c
 12755  0024C8  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 12756                           
 12757                           ;main.c: 3706: ;
 12758                           ;main.c: 3711: rowfilter =
 12759                           ;main.c: 3713: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 12760                           ;main.c: 3715: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 12761                           ;main.c: 3717: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 12762                           ;main.c: 3720: Read_b_eep(0x43 + 8*i);
 12763  0024CA  5043               	movf	calculateSetFilterMask@i,w,c
 12764  0024CC  D934               	call	PL24	;call to abstracted procedure
 12765  0024CE  0E48               	movlw	72
 12766  0024D0  2412               	addwf	??_calculateSetFilterMask,w,c
 12767  0024D2  6E08               	movwf	?_Read_b_eep,c
 12768  0024D4  0E00               	movlw	0
 12769  0024D6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 12770  0024D8  6E09               	movwf	?_Read_b_eep+1,c
 12771  0024DA  EC70  F024         	call	_Read_b_eep	;wreg free
 12772  0024DE  D937               	call	PL26	;call to abstracted procedure
 12773  0024E0  0E46               	movlw	70
 12774  0024E2  2419               	addwf	??_calculateSetFilterMask+7,w,c
 12775  0024E4  6E08               	movwf	?_Read_b_eep,c
 12776  0024E6  0E00               	movlw	0
 12777  0024E8  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 12778  0024EA  6E09               	movwf	?_Read_b_eep+1,c
 12779  0024EC  EC70  F024         	call	_Read_b_eep	;wreg free
 12780  0024F0  D903               	call	PL20	;call to abstracted procedure
 12781  0024F2  EC70  F024         	call	_Read_b_eep	;wreg free
 12782  0024F6  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 12783  0024F8  0E01               	movlw	1
 12784  0024FA  1622               	andwf	??_calculateSetFilterMask+16,f,c
 12785  0024FC  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 12786  002500  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 12787  002502  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 12788  002504  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 12789  002506  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 12790  00250A  6A25               	clrf	??_calculateSetFilterMask+19,c
 12791  00250C  6A24               	clrf	??_calculateSetFilterMask+18,c
 12792  00250E  6A23               	clrf	??_calculateSetFilterMask+17,c
 12793  002510  501C               	movf	??_calculateSetFilterMask+10,w,c
 12794  002512  D937               	call	PL30	;call to abstracted procedure
 12795  002514  5043               	movf	calculateSetFilterMask@i,w,c
 12796  002516  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 12797  002518  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 12798  00251A  90D8               	bcf	status,0,c
 12799  00251C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12800  00251E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12801  002520  90D8               	bcf	status,0,c
 12802  002522  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12803  002524  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12804  002526  90D8               	bcf	status,0,c
 12805  002528  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 12806  00252A  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 12807  00252C  0E43               	movlw	67
 12808  00252E  242F               	addwf	??_calculateSetFilterMask+29,w,c
 12809  002530  6E08               	movwf	?_Read_b_eep,c
 12810  002532  0E00               	movlw	0
 12811  002534  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 12812  002536  6E09               	movwf	?_Read_b_eep+1,c
 12813  002538  EC70  F024         	call	_Read_b_eep	;wreg free
 12814  00253C  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 12815  00253E  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 12816  002540  502C               	movf	??_calculateSetFilterMask+26,w,c
 12817  002542  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 12818  002544  502D               	movf	??_calculateSetFilterMask+27,w,c
 12819  002546  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 12820  002548  502E               	movf	??_calculateSetFilterMask+28,w,c
 12821  00254A  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 12822                           
 12823                           ;main.c: 3722: if ( 0 == i ) filter = rowfilter;
 12824  00254C  6643               	tstfsz	calculateSetFilterMask@i,c
 12825  00254E  D008               	goto	l14396
 12826  002550  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 12827  002554  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 12828  002558  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 12829  00255C  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 12830  002560                     l14396:
 12831                           
 12832                           ;main.c: 3726: mask &= rowmask;
 12833  002560  5031               	movf	calculateSetFilterMask@rowmask,w,c
 12834  002562  1636               	andwf	calculateSetFilterMask@mask,f,c
 12835  002564  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 12836  002566  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 12837  002568  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 12838  00256A  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 12839  00256C  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 12840  00256E  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 12841                           
 12842                           ;main.c: 3731: for ( j=0; j<32; j++ ) {
 12843  002570  6A42               	clrf	calculateSetFilterMask@j,c
 12844  002572                     l14404:
 12845                           
 12846                           ;main.c: 3733: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 12847  002572  5042               	movf	calculateSetFilterMask@j,w,c
 12848  002574  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 12849  002578  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 12850  00257C  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 12851  002580  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 12852  002584  2AE8               	incf	wreg,f,c
 12853  002586  D005               	goto	u18840
 12854  002588                     u18845:
 12855  002588  90D8               	bcf	status,0,c
 12856  00258A  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12857  00258C  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 12858  00258E  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 12859  002590  3212               	rrcf	??_calculateSetFilterMask,f,c
 12860  002592                     u18840:
 12861  002592  2EE8               	decfsz	wreg,f,c
 12862  002594  D7F9               	goto	u18845
 12863  002596  0E01               	movlw	1
 12864  002598  1612               	andwf	??_calculateSetFilterMask,f,c
 12865  00259A  5042               	movf	calculateSetFilterMask@j,w,c
 12866  00259C  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 12867  0025A0  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 12868  0025A4  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 12869  0025A8  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 12870  0025AC  2AE8               	incf	wreg,f,c
 12871  0025AE  D005               	goto	u18850
 12872  0025B0                     u18855:
 12873  0025B0  90D8               	bcf	status,0,c
 12874  0025B2  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 12875  0025B4  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 12876  0025B6  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12877  0025B8  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 12878  0025BA                     u18850:
 12879  0025BA  2EE8               	decfsz	wreg,f,c
 12880  0025BC  D7F9               	goto	u18855
 12881  0025BE  5016               	movf	??_calculateSetFilterMask+4,w,c
 12882  0025C0  0B01               	andlw	1
 12883  0025C2  1812               	xorwf	??_calculateSetFilterMask,w,c
 12884  0025C4  E010               	bz	l14408
 12885                           
 12886                           ;main.c: 3734: mask &= ~(1<<j);
 12887  0025C6  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 12888  0025CA  D8FD               	call	PL116	;call to abstracted procedure
 12889  0025CC  D001               	goto	u18874
 12890  0025CE                     u18875:
 12891  0025CE  D900               	call	PL120	;call to abstracted procedure
 12892  0025D0                     u18874:
 12893  0025D0  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12894  0025D2  D7FD               	goto	u18875
 12895  0025D4  1C13               	comf	??_calculateSetFilterMask+1,w,c
 12896  0025D6  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12897  0025D8  1C14               	comf	??_calculateSetFilterMask+2,w,c
 12898  0025DA  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 12899  0025DC  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 12900  0025DE  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12901  0025E0  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 12902  0025E2  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 12903  0025E4  D8E6               	call	PL62	;call to abstracted procedure
 12904  0025E6                     l14408:
 12905  0025E6  2A42               	incf	calculateSetFilterMask@j,f,c
 12906  0025E8  0E1F               	movlw	31
 12907  0025EA  6442               	cpfsgt	calculateSetFilterMask@j,c
 12908  0025EC  D7C2               	goto	l14404
 12909                           
 12910                           ;main.c: 3735: }
 12911                           ;main.c: 3736: }
 12912                           ;main.c: 3742: filter &= rowfilter;
 12913  0025EE  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 12914  0025F0  163A               	andwf	calculateSetFilterMask@filter,f,c
 12915  0025F2  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 12916  0025F4  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 12917  0025F6  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 12918  0025F8  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 12919  0025FA  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 12920  0025FC  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 12921                           
 12922                           ;main.c: 3750: }
 12923                           ;main.c: 3752: if (i) {
 12924                           
 12925                           ;main.c: 3745: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 12926  0025FE  5043               	movf	calculateSetFilterMask@i,w,c
 12927  002600  E042               	bz	l14428
 12928                           
 12929                           ;main.c: 3755: for (j = 0; j < 8; j++) {
 12930  002602  6A42               	clrf	calculateSetFilterMask@j,c
 12931  002604                     l14422:
 12932                           
 12933                           ;main.c: 3756: if ((lastOID >> i & 1)
 12934                           ;main.c: 3757: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 12935  002604  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12936  002608  5043               	movf	calculateSetFilterMask@i,w,c
 12937  00260A  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 12938  00260C  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 12939  00260E  90D8               	bcf	status,0,c
 12940  002610  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12941  002612  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12942  002614  90D8               	bcf	status,0,c
 12943  002616  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12944  002618  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12945  00261A  90D8               	bcf	status,0,c
 12946  00261C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 12947  00261E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 12948  002620  0E43               	movlw	67
 12949  002622  2413               	addwf	??_calculateSetFilterMask+1,w,c
 12950  002624  6E08               	movwf	?_Read_b_eep,c
 12951  002626  0E00               	movlw	0
 12952  002628  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 12953  00262A  6E09               	movwf	?_Read_b_eep+1,c
 12954  00262C  EC70  F024         	call	_Read_b_eep	;wreg free
 12955  002630  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 12956  002632  2A12               	incf	??_calculateSetFilterMask,f,c
 12957  002634  D002               	goto	u18904
 12958  002636                     u18905:
 12959  002636  90D8               	bcf	status,0,c
 12960  002638  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 12961  00263A                     u18904:
 12962  00263A  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12963  00263C  D7FC               	goto	u18905
 12964  00263E  0E01               	movlw	1
 12965  002640  1615               	andwf	??_calculateSetFilterMask+3,f,c
 12966  002642  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 12967  002646  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 12968  00264A  2A16               	incf	??_calculateSetFilterMask+4,f,c
 12969  00264C  D002               	goto	u18914
 12970  00264E                     u18915:
 12971  00264E  90D8               	bcf	status,0,c
 12972  002650  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 12973  002652                     u18914:
 12974  002652  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 12975  002654  D7FC               	goto	u18915
 12976  002656  5017               	movf	??_calculateSetFilterMask+5,w,c
 12977  002658  0B01               	andlw	1
 12978  00265A  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 12979  00265C  E010               	bz	l14426
 12980                           
 12981                           ;main.c: 3758: mask &= (1 << i);
 12982  00265E  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 12983  002662  D8B1               	call	PL116	;call to abstracted procedure
 12984  002664  D001               	goto	u18934
 12985  002666                     u18935:
 12986  002666  D8B4               	call	PL120	;call to abstracted procedure
 12987  002668                     u18934:
 12988  002668  2E12               	decfsz	??_calculateSetFilterMask,f,c
 12989  00266A  D7FD               	goto	u18935
 12990  00266C  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 12991  002670  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 12992  002674  0E00               	movlw	0
 12993  002676  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 12994  002678  0EFF               	movlw	255
 12995  00267A  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 12996  00267C  D89A               	call	PL62	;call to abstracted procedure
 12997  00267E                     l14426:
 12998  00267E  2A42               	incf	calculateSetFilterMask@j,f,c
 12999  002680  0E07               	movlw	7
 13000  002682  6442               	cpfsgt	calculateSetFilterMask@j,c
 13001  002684  D7BF               	goto	l14422
 13002  002686                     l14428:
 13003                           
 13004                           ;main.c: 3759: }
 13005                           ;main.c: 3760: }
 13006                           ;main.c: 3762: lastOID = Read_b_eep(0x43 + 8 * i);
 13007  002686  5043               	movf	calculateSetFilterMask@i,w,c
 13008  002688  D856               	call	PL24	;call to abstracted procedure
 13009  00268A  0E43               	movlw	67
 13010  00268C  2412               	addwf	??_calculateSetFilterMask,w,c
 13011  00268E  6E08               	movwf	?_Read_b_eep,c
 13012  002690  0E00               	movlw	0
 13013  002692  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 13014  002694  6E09               	movwf	?_Read_b_eep+1,c
 13015  002696  EC70  F024         	call	_Read_b_eep	;wreg free
 13016  00269A  6E35               	movwf	calculateSetFilterMask@lastOID,c
 13017  00269C                     l14432:
 13018  00269C  2A43               	incf	calculateSetFilterMask@i,f,c
 13019  00269E  0E07               	movlw	7
 13020  0026A0  6443               	cpfsgt	calculateSetFilterMask@i,c
 13021  0026A2  D6D5               	goto	l14388
 13022                           
 13023                           ;main.c: 3768: }
 13024                           ;main.c: 3770: }
 13025                           ;main.c: 3771: }
 13026                           ;main.c: 3774: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 13027  0026A4  0E80               	movlw	128
 13028  0026A6  EC1C  F024         	call	_ECANSetOperationMode
 13029                           
 13030                           ;main.c: 3777: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 13031  0026AA  010F               	movlb	15	; () banked
 13032  0026AC  0E0F               	movlw	15	;volatile
 13033  0026AE  6E09               	movwf	?__CANIDToRegs+1,c
 13034  0026B0  0E1C               	movlw	28	;volatile
 13035  0026B2  6E08               	movwf	?__CANIDToRegs,c
 13036  0026B4  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 13037  0026B8  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 13038  0026BC  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 13039  0026C0  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 13040  0026C4  0E01               	movlw	1
 13041  0026C6  6E0E               	movwf	?__CANIDToRegs+6,c
 13042  0026C8  EC41  F01E         	call	__CANIDToRegs	;wreg free
 13043                           
 13044                           ;main.c: 3780: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 13045  0026CC  010D               	movlb	13	; () banked
 13046  0026CE  83D4               	bsf	212,1,b	;volatile
 13047                           
 13048                           ; BSR set to: 13
 13049  0026D0  010F               	movlb	15	; () banked
 13050  0026D2  0E0F               	movlw	15	;volatile
 13051  0026D4  6E09               	movwf	?__CANIDToRegs+1,c
 13052  0026D6  0E04               	movlw	4	;volatile
 13053  0026D8  6E08               	movwf	?__CANIDToRegs,c
 13054  0026DA  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 13055  0026DE  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 13056  0026E2  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 13057  0026E6  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 13058  0026EA  0E01               	movlw	1
 13059  0026EC  6E0E               	movwf	?__CANIDToRegs+6,c
 13060  0026EE  EC41  F01E         	call	__CANIDToRegs	;wreg free
 13061                           
 13062                           ;main.c: 3783: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 13063  0026F2  0E00               	movlw	0
 13064  0026F4  EF1C  F024         	goto	_ECANSetOperationMode
 13065  0026F8                     __end_of_calculateSetFilterMask:
 13066                           	opt stack 0
 13067  0026F8                     PL20:
 13068                           	opt stack 23
 13069  0026F8  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 13070  0026FA  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 13071  0026FE  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 13072  002700  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 13073  002702  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 13074  002704  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 13075  002708  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 13076  00270C  6A1D               	clrf	??_calculateSetFilterMask+11,c
 13077  00270E  6A1C               	clrf	??_calculateSetFilterMask+10,c
 13078  002710  5043               	movf	calculateSetFilterMask@i,w,c
 13079  002712  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 13080  002714  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 13081  002716  90D8               	bcf	status,0,c
 13082  002718  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 13083  00271A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 13084  00271C  90D8               	bcf	status,0,c
 13085  00271E  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 13086  002720  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 13087  002722  90D8               	bcf	status,0,c
 13088  002724  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 13089  002726  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 13090  002728  0E44               	movlw	68
 13091  00272A  2420               	addwf	??_calculateSetFilterMask+14,w,c
 13092  00272C  6E08               	movwf	?_Read_b_eep,c
 13093  00272E  0E00               	movlw	0
 13094  002730  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 13095  002732  6E09               	movwf	?_Read_b_eep+1,c
 13096  002734  0012               	return	
 13097  002736                     __end_ofPL20:
 13098                           	opt stack 0
 13099  002736                     PL24:
 13100                           	opt stack 23
 13101  002736  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 13102  002738  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 13103  00273A  90D8               	bcf	status,0,c
 13104  00273C  3612               	rlcf	??_calculateSetFilterMask,f,c
 13105  00273E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13106  002740  90D8               	bcf	status,0,c
 13107  002742  3612               	rlcf	??_calculateSetFilterMask,f,c
 13108  002744  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13109  002746  90D8               	bcf	status,0,c
 13110  002748  3612               	rlcf	??_calculateSetFilterMask,f,c
 13111  00274A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13112  00274C  0012               	return	
 13113  00274E                     __end_ofPL24:
 13114                           	opt stack 0
 13115  00274E                     PL26:
 13116                           	opt stack 23
 13117  00274E  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 13118  002750  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 13119  002754  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 13120  002756  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 13121  002758  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 13122  00275A  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 13123  00275E  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 13124  002762  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 13125  002766  6A15               	clrf	??_calculateSetFilterMask+3,c
 13126  002768  5043               	movf	calculateSetFilterMask@i,w,c
 13127  00276A  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 13128  00276C  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 13129  00276E  90D8               	bcf	status,0,c
 13130  002770  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 13131  002772  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 13132  002774  90D8               	bcf	status,0,c
 13133  002776  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 13134  002778  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 13135  00277A  90D8               	bcf	status,0,c
 13136  00277C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 13137  00277E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 13138  002780  0012               	return	
 13139  002782                     __end_ofPL26:
 13140                           	opt stack 0
 13141  002782                     PL30:
 13142                           	opt stack 23
 13143  002782  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 13144  002784  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 13145  002786  501D               	movf	??_calculateSetFilterMask+11,w,c
 13146  002788  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 13147  00278A  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 13148  00278C  501E               	movf	??_calculateSetFilterMask+12,w,c
 13149  00278E  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 13150  002790  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 13151  002792  501F               	movf	??_calculateSetFilterMask+13,w,c
 13152  002794  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 13153  002796  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 13154  002798  5015               	movf	??_calculateSetFilterMask+3,w,c
 13155  00279A  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 13156  00279C  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 13157  00279E  5016               	movf	??_calculateSetFilterMask+4,w,c
 13158  0027A0  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 13159  0027A2  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 13160  0027A4  5017               	movf	??_calculateSetFilterMask+5,w,c
 13161  0027A6  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 13162  0027A8  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 13163  0027AA  5018               	movf	??_calculateSetFilterMask+6,w,c
 13164  0027AC  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 13165  0027AE  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 13166  0027B0  0012               	return	
 13167  0027B2                     __end_ofPL30:
 13168                           	opt stack 0
 13169  0027B2                     PL62:
 13170                           	opt stack 23
 13171  0027B2  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 13172  0027B4  5015               	movf	??_calculateSetFilterMask+3,w,c
 13173  0027B6  1636               	andwf	calculateSetFilterMask@mask,f,c
 13174  0027B8  5016               	movf	??_calculateSetFilterMask+4,w,c
 13175  0027BA  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 13176  0027BC  5017               	movf	??_calculateSetFilterMask+5,w,c
 13177  0027BE  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 13178  0027C0  5018               	movf	??_calculateSetFilterMask+6,w,c
 13179  0027C2  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 13180  0027C4  0012               	return	
 13181  0027C6                     __end_ofPL62:
 13182                           	opt stack 0
 13183  0027C6                     PL116:
 13184                           	opt stack 23
 13185  0027C6  0E01               	movlw	1
 13186  0027C8  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 13187  0027CA  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 13188  0027CC  2A12               	incf	??_calculateSetFilterMask,f,c
 13189  0027CE  0012               	return	
 13190  0027D0                     __end_ofPL116:
 13191                           	opt stack 0
 13192  0027D0                     PL120:
 13193                           	opt stack 23
 13194  0027D0  90D8               	bcf	status,0,c
 13195  0027D2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 13196  0027D4  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 13197  0027D6  0012               	return	
 13198  0027D8                     __end_ofPL120:
 13199                           	opt stack 0
 13200                           tblptru	equ	0xFF8
 13201                           tblptrh	equ	0xFF7
 13202                           tblptrl	equ	0xFF6
 13203                           tablat	equ	0xFF5
 13204                           prodh	equ	0xFF4
 13205                           prodl	equ	0xFF3
 13206                           intcon	equ	0xFF2
 13207                           intcon2	equ	0xFF1
 13208                           postinc0	equ	0xFEE
 13209                           wreg	equ	0xFE8
 13210                           indf1	equ	0xFE7
 13211                           fsr1h	equ	0xFE2
 13212                           fsr1l	equ	0xFE1
 13213                           indf2	equ	0xFDF
 13214                           postinc2	equ	0xFDE
 13215                           postdec2	equ	0xFDD
 13216                           plusw2	equ	0xFDB
 13217                           fsr2h	equ	0xFDA
 13218                           fsr2l	equ	0xFD9
 13219                           status	equ	0xFD8
 13220                           
 13221 ;; *************** function _SendInformationEvent *****************
 13222 ;; Defined at:
 13223 ;;		line 2508 in file "../main.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;  idx             1    wreg     unsigned char 
 13226 ;;  eventClass      1   20[BANK0 ] unsigned char 
 13227 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  idx             1   77[COMRAM] unsigned char 
 13230 ;;  data            3   74[COMRAM] unsigned char [3]
 13231 ;; Return value:  Size  Location     Type
 13232 ;;		None               void
 13233 ;; Registers used:
 13234 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13235 ;; Tracked objects:
 13236 ;;		On entry : E/0
 13237 ;;		On exit  : F/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13240 ;;      Params:         0       2       0       0       0       0       0
 13241 ;;      Locals:         4       0       0       0       0       0       0
 13242 ;;      Temps:          0       0       0       0       0       0       0
 13243 ;;      Totals:         4       2       0       0       0       0       0
 13244 ;;Total ram usage:        6 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; Hardware stack levels required when called:    6
 13247 ;; This function calls:
 13248 ;;		_Read_b_eep
 13249 ;;		_sendVSCPFrame
 13250 ;; This function is called by:
 13251 ;;		_main
 13252 ;;		_doApplicationOneSecondWork
 13253 ;;		_vscp_writeAppReg
 13254 ;;		_doActionOn
 13255 ;;		_doActionOff
 13256 ;;		_doActionStatus
 13257 ;;		_doActionToggle
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           	psect	text27
 13262  004364                     __ptext27:
 13263                           	opt stack 0
 13264  004364                     _SendInformationEvent:
 13265                           	opt stack 21
 13266                           
 13267                           ;incstack = 0
 13268                           ;incstack = 0
 13269                           ;SendInformationEvent@idx stored from wreg
 13270  004364  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
 13271                           
 13272                           ;main.c: 2509: uint8_t data[3];
 13273                           ;main.c: 2511: data[ 0 ] = idx;
 13274  004368  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
 13275                           
 13276                           ;main.c: 2512: data[ 1 ] = Read_b_eep(0x43 + 0);
 13277  00436C  6A09               	clrf	?_Read_b_eep+1,c
 13278  00436E  0E43               	movlw	67
 13279  004370  6E08               	movwf	?_Read_b_eep,c
 13280  004372  EC70  F024         	call	_Read_b_eep	;wreg free
 13281  004376  6E4C               	movwf	SendInformationEvent@data+1,c
 13282                           
 13283                           ;main.c: 2513: data[ 2 ] = Read_b_eep(0x43 + 2 + idx);
 13284  004378  0E45               	movlw	69
 13285  00437A  244E               	addwf	SendInformationEvent@idx,w,c
 13286  00437C  6E08               	movwf	?_Read_b_eep,c
 13287  00437E  6A09               	clrf	?_Read_b_eep+1,c
 13288  004380  0E00               	movlw	0
 13289  004382  2209               	addwfc	?_Read_b_eep+1,f,c
 13290  004384  EC70  F024         	call	_Read_b_eep	;wreg free
 13291  004388  6E4D               	movwf	SendInformationEvent@data+2,c
 13292                           
 13293                           ;main.c: 2514: sendVSCPFrame( eventClass,
 13294                           ;main.c: 2515: eventTypeId,
 13295                           ;main.c: 2516: vscp_nickname,
 13296                           ;main.c: 2517: 0x03,
 13297                           ;main.c: 2518: 3,
 13298                           ;main.c: 2519: data );
 13299  00438A  C0D0  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 13300  00438E  6A40               	clrf	?_sendVSCPFrame+1,c
 13301  004390  C0D1  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 13302  004394  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13303  004398  0E03               	movlw	3
 13304  00439A  6E43               	movwf	?_sendVSCPFrame+4,c
 13305  00439C  6E44               	movwf	?_sendVSCPFrame+5,c
 13306  00439E  0E4B               	movlw	low SendInformationEvent@data
 13307  0043A0  6E45               	movwf	?_sendVSCPFrame+6,c
 13308  0043A2  0E00               	movlw	high SendInformationEvent@data
 13309  0043A4  6E46               	movwf	?_sendVSCPFrame+7,c
 13310  0043A6  0E0F               	movlw	15
 13311  0043A8  6E46               	movwf	?_sendVSCPFrame+7,c
 13312  0043AA  0E5F               	movlw	__accesstop+-1
 13313  0043AC  6445               	cpfsgt	?_sendVSCPFrame+6,c
 13314  0043AE  6A46               	clrf	?_sendVSCPFrame+7,c
 13315  0043B0  EF94  F020         	goto	_sendVSCPFrame	;wreg free
 13316  0043B4                     __end_of_SendInformationEvent:
 13317                           	opt stack 0
 13318                           tblptru	equ	0xFF8
 13319                           tblptrh	equ	0xFF7
 13320                           tblptrl	equ	0xFF6
 13321                           tablat	equ	0xFF5
 13322                           prodh	equ	0xFF4
 13323                           prodl	equ	0xFF3
 13324                           intcon	equ	0xFF2
 13325                           intcon2	equ	0xFF1
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           indf1	equ	0xFE7
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           plusw2	equ	0xFDB
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function _vscp_readRegister *****************
 13340 ;; Defined at:
 13341 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  reg             1    wreg     unsigned char 
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;  reg             1   28[COMRAM] unsigned char 
 13346 ;; Return value:  Size  Location     Type
 13347 ;;                  1    wreg      unsigned char 
 13348 ;; Registers used:
 13349 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13350 ;; Tracked objects:
 13351 ;;		On entry : F/0
 13352 ;;		On exit  : 0/0
 13353 ;;		Unchanged: 0/0
 13354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13355 ;;      Params:         0       0       0       0       0       0       0
 13356 ;;      Locals:         1       0       0       0       0       0       0
 13357 ;;      Temps:          0       0       0       0       0       0       0
 13358 ;;      Totals:         1       0       0       0       0       0       0
 13359 ;;Total ram usage:        1 bytes
 13360 ;; Hardware stack levels used:    1
 13361 ;; Hardware stack levels required when called:    5
 13362 ;; This function calls:
 13363 ;;		_vscp_readAppReg
 13364 ;;		_vscp_readStdReg
 13365 ;; This function is called by:
 13366 ;;		_vscp_handleProtocolEvent
 13367 ;; This function uses a non-reentrant model
 13368 ;;
 13369                           
 13370                           	psect	text28
 13371  004806                     __ptext28:
 13372                           	opt stack 0
 13373  004806                     _vscp_readRegister:
 13374                           	opt stack 23
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;incstack = 0
 13378                           ;incstack = 0
 13379                           ;vscp_readRegister@reg stored from wreg
 13380  004806  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 13384  00480A  0E7F               	movlw	127
 13385  00480C  641D               	cpfsgt	vscp_readRegister@reg,c
 13386  00480E  D004               	goto	l14912
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 13390  004810  501D               	movf	vscp_readRegister@reg,w,c
 13391  004812  ECEB  F01A         	call	_vscp_readStdReg
 13392  004816  D003               	goto	l1331
 13393  004818                     l14912:
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;vscp_firmware.c: 565: else {
 13397                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 13398  004818  501D               	movf	vscp_readRegister@reg,w,c
 13399  00481A  EC16  F01A         	call	_vscp_readAppReg
 13400  00481E                     l1331:
 13401  00481E  0012               	return	
 13402  004820                     __end_of_vscp_readRegister:
 13403                           	opt stack 0
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           intcon2	equ	0xFF1
 13412                           postinc0	equ	0xFEE
 13413                           wreg	equ	0xFE8
 13414                           indf1	equ	0xFE7
 13415                           fsr1h	equ	0xFE2
 13416                           fsr1l	equ	0xFE1
 13417                           indf2	equ	0xFDF
 13418                           postinc2	equ	0xFDE
 13419                           postdec2	equ	0xFDD
 13420                           plusw2	equ	0xFDB
 13421                           fsr2h	equ	0xFDA
 13422                           fsr2l	equ	0xFD9
 13423                           status	equ	0xFD8
 13424                           
 13425 ;; *************** function _vscp_readStdReg *****************
 13426 ;; Defined at:
 13427 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;  reg             1    wreg     unsigned char 
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;  reg             1   27[COMRAM] unsigned char 
 13432 ;;  code            4   20[COMRAM] unsigned long 
 13433 ;;  idx             1   25[COMRAM] unsigned char 
 13434 ;;  code            4   16[COMRAM] unsigned long 
 13435 ;;  idx             1   24[COMRAM] unsigned char 
 13436 ;;  rv              1   26[COMRAM] unsigned char 
 13437 ;; Return value:  Size  Location     Type
 13438 ;;                  1    wreg      unsigned char 
 13439 ;; Registers used:
 13440 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13441 ;; Tracked objects:
 13442 ;;		On entry : F/0
 13443 ;;		On exit  : 0/0
 13444 ;;		Unchanged: 0/0
 13445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13446 ;;      Params:         0       0       0       0       0       0       0
 13447 ;;      Locals:        12       0       0       0       0       0       0
 13448 ;;      Temps:          5       0       0       0       0       0       0
 13449 ;;      Totals:        17       0       0       0       0       0       0
 13450 ;;Total ram usage:       17 bytes
 13451 ;; Hardware stack levels used:    1
 13452 ;; Hardware stack levels required when called:    4
 13453 ;; This function calls:
 13454 ;;		_vscp_getMajorVersion
 13455 ;;		_vscp_getMinorVersion
 13456 ;;		_vscp_getSubMinorVersion
 13457 ;;		_vscp_getGUID
 13458 ;;		_vscp_getMDF_URL
 13459 ;;		_vscp_getUserID
 13460 ;;		_vscp_getManufacturerId
 13461 ;;		_vscp_getBootLoaderAlgorithm
 13462 ;;		_vscp_getBufferSize
 13463 ;;		_vscp_getFamilyCode
 13464 ;;		_vscp_getFamilyType
 13465 ;;		_vscp_getRegisterPagesUsed
 13466 ;; This function is called by:
 13467 ;;		_vscp_readRegister
 13468 ;;		_vscp_handleProtocolEvent
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	text29
 13473  0035D6                     __ptext29:
 13474                           	opt stack 0
 13475  0035D6                     _vscp_readStdReg:
 13476                           	opt stack 24
 13477                           
 13478                           ;incstack = 0
 13479                           ;incstack = 0
 13480                           ;vscp_readStdReg@reg stored from wreg
 13481  0035D6  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 13485  0035DA  6A1B               	clrf	vscp_readStdReg@rv,c
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 13489  0035DC  501C               	movf	vscp_readStdReg@reg,w,c
 13490  0035DE  0A80               	xorlw	128
 13491  0035E0  E104               	bnz	l14922
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 13495  0035E2  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13496                           
 13497                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 13498  0035E6  6A55               	clrf	_vscp_alarmstatus,c
 13499                           
 13500                           ;vscp_firmware.c: 584: }
 13501  0035E8  D0B3               	goto	l15010
 13502  0035EA                     l14922:
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 13506  0035EA  501C               	movf	vscp_readStdReg@reg,w,c
 13507  0035EC  0A81               	xorlw	129
 13508  0035EE  E102               	bnz	l14926
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;vscp_firmware.c: 588: rv = 1;
 13512  0035F0  0E01               	movlw	1
 13513  0035F2  D075               	goto	L47
 13514  0035F4                     l14926:
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 13518  0035F4  501C               	movf	vscp_readStdReg@reg,w,c
 13519  0035F6  0A82               	xorlw	130
 13520  0035F8  E102               	bnz	l14930
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;vscp_firmware.c: 594: rv = 5;
 13524  0035FA  0E05               	movlw	5
 13525  0035FC  D070               	goto	L47
 13526  0035FE                     l14930:
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13530  0035FE  501C               	movf	vscp_readStdReg@reg,w,c
 13531  003600  0A83               	xorlw	131
 13532  003602  E102               	bnz	l14934
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;vscp_firmware.c: 600: rv = 0;
 13536  003604  6A1B               	clrf	vscp_readStdReg@rv,c
 13537                           
 13538                           ;vscp_firmware.c: 602: }
 13539  003606  D0A4               	goto	l15010
 13540  003608                     l14934:
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13544  003608  501C               	movf	vscp_readStdReg@reg,w,c
 13545  00360A  0A94               	xorlw	148
 13546  00360C  E103               	bnz	l14938
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13550  00360E  ECAF  F024         	call	_vscp_getMajorVersion	;wreg free
 13551  003612  D065               	goto	L47
 13552  003614                     l14938:
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13556  003614  501C               	movf	vscp_readStdReg@reg,w,c
 13557  003616  0A95               	xorlw	149
 13558  003618  E103               	bnz	l14942
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13562  00361A  ECAE  F024         	call	_vscp_getMinorVersion	;wreg free
 13563  00361E  D05F               	goto	L47
 13564  003620                     l14942:
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13568  003620  501C               	movf	vscp_readStdReg@reg,w,c
 13569  003622  0A96               	xorlw	150
 13570  003624  E103               	bnz	l14946
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13574  003626  ECAD  F024         	call	_vscp_getSubMinorVersion	;wreg free
 13575  00362A  D059               	goto	L47
 13576  00362C                     l14946:
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13580  00362C  0E89               	movlw	137
 13581  00362E  601C               	cpfslt	vscp_readStdReg@reg,c
 13582  003630  D005               	goto	l14950
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13586  003632  501C               	movf	vscp_readStdReg@reg,w,c
 13587  003634  0F7C               	addlw	124
 13588  003636  EC53  F024         	call	_vscp_getUserID
 13589  00363A  D051               	goto	L47
 13590  00363C                     l14950:
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13594                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13595  00363C  0E88               	movlw	136
 13596  00363E  641C               	cpfsgt	vscp_readStdReg@reg,c
 13597  003640  D008               	goto	l14956
 13598                           
 13599                           ; BSR set to: 0
 13600  003642  0E91               	movlw	145
 13601  003644  601C               	cpfslt	vscp_readStdReg@reg,c
 13602  003646  D005               	goto	l14956
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13606  003648  501C               	movf	vscp_readStdReg@reg,w,c
 13607  00364A  0F77               	addlw	119
 13608  00364C  EC49  F024         	call	_vscp_getManufacturerId
 13609  003650  D046               	goto	L47
 13610  003652                     l14956:
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13614  003652  501C               	movf	vscp_readStdReg@reg,w,c
 13615  003654  0A91               	xorlw	145
 13616  003656  E103               	bnz	l14960
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13620  003658  C07E  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 13621                           
 13622                           ;vscp_firmware.c: 639: }
 13623  00365C  D079               	goto	l15010
 13624  00365E                     l14960:
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13628  00365E  501C               	movf	vscp_readStdReg@reg,w,c
 13629  003660  0A93               	xorlw	147
 13630  003662  E103               	bnz	l14964
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13634  003664  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 13635                           
 13636                           ;vscp_firmware.c: 645: }
 13637  003668  D073               	goto	l15010
 13638  00366A                     l14964:
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13642  00366A  501C               	movf	vscp_readStdReg@reg,w,c
 13643  00366C  0A92               	xorlw	146
 13644  00366E  E102               	bnz	l14968
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13648  003670  5053               	movf	_vscp_page_select+1,w,c
 13649  003672  D035               	goto	L47
 13650  003674                     l14968:
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13654  003674  501C               	movf	vscp_readStdReg@reg,w,c
 13655  003676  0A97               	xorlw	151
 13656  003678  E103               	bnz	l14972
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13660  00367A  ECAC  F024         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13661  00367E  D02F               	goto	L47
 13662  003680                     l14972:
 13663                           
 13664                           ; BSR set to: 0
 13665                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13666  003680  501C               	movf	vscp_readStdReg@reg,w,c
 13667  003682  0A98               	xorlw	152
 13668  003684  E103               	bnz	l14976
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13672  003686  ECAB  F024         	call	_vscp_getBufferSize	;wreg free
 13673  00368A  D029               	goto	L47
 13674  00368C                     l14976:
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13678  00368C  501C               	movf	vscp_readStdReg@reg,w,c
 13679  00368E  0A99               	xorlw	153
 13680  003690  E103               	bnz	l14980
 13681                           
 13682                           ; BSR set to: 0
 13683                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13684  003692  ECAA  F024         	call	_vscp_getRegisterPagesUsed	;wreg free
 13685  003696  D023               	goto	L47
 13686  003698                     l14980:
 13687                           
 13688                           ; BSR set to: 0
 13689                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13690                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13691  003698  0E99               	movlw	153
 13692  00369A  641C               	cpfsgt	vscp_readStdReg@reg,c
 13693  00369C  D022               	goto	l14990
 13694                           
 13695                           ; BSR set to: 0
 13696  00369E  0E9E               	movlw	158
 13697  0036A0  601C               	cpfslt	vscp_readStdReg@reg,c
 13698  0036A2  D01F               	goto	l14990
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13702  0036A4  EC91  F024         	call	_vscp_getFamilyCode	;wreg free
 13703  0036A8  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13704  0036AC  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13705  0036B0  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13706  0036B4  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13707                           
 13708                           ; BSR set to: 0
 13709                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13710  0036B8  501C               	movf	vscp_readStdReg@reg,w,c
 13711  0036BA  0F66               	addlw	102
 13712  0036BC  6E19               	movwf	vscp_readStdReg@idx,c
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13716  0036BE  5019               	movf	vscp_readStdReg@idx,w,c
 13717  0036C0  D849               	call	PL66	;call to abstracted procedure
 13718  0036C2  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13719  0036C6  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13720  0036CA  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13721  0036CE  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13722  0036D2  2AE8               	incf	wreg,f,c
 13723  0036D4  D001               	goto	u19860
 13724  0036D6                     u19865:
 13725  0036D6  D848               	call	PL112	;call to abstracted procedure
 13726  0036D8                     u19860:
 13727  0036D8  2EE8               	decfsz	wreg,f,c
 13728  0036DA  D7FD               	goto	u19865
 13729  0036DC  D024               	goto	L48
 13730  0036DE                     L47:
 13731  0036DE  6E1B               	movwf	vscp_readStdReg@rv,c
 13732                           
 13733                           ;vscp_firmware.c: 671: }
 13734  0036E0  D037               	goto	l15010
 13735  0036E2                     l14990:
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13739                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13740  0036E2  0E9D               	movlw	157
 13741  0036E4  641C               	cpfsgt	vscp_readStdReg@reg,c
 13742  0036E6  D021               	goto	l15000
 13743                           
 13744                           ; BSR set to: 0
 13745  0036E8  0EA2               	movlw	162
 13746  0036EA  601C               	cpfslt	vscp_readStdReg@reg,c
 13747  0036EC  D01E               	goto	l15000
 13748                           
 13749                           ; BSR set to: 0
 13750                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13751  0036EE  EC8C  F024         	call	_vscp_getFamilyType	;wreg free
 13752  0036F2  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1473+3
 13753  0036F6  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1473+2
 13754  0036FA  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1473+1
 13755  0036FE  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1473
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13759  003702  501C               	movf	vscp_readStdReg@reg,w,c
 13760  003704  0F62               	addlw	98
 13761  003706  6E1A               	movwf	vscp_readStdReg@idx_1474,c
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13765  003708  501A               	movf	vscp_readStdReg@idx_1474,w,c
 13766  00370A  D824               	call	PL66	;call to abstracted procedure
 13767  00370C  C015  F00D         	movff	vscp_readStdReg@code_1473,??_vscp_readStdReg+1
 13768  003710  C016  F00E         	movff	vscp_readStdReg@code_1473+1,??_vscp_readStdReg+2
 13769  003714  C017  F00F         	movff	vscp_readStdReg@code_1473+2,??_vscp_readStdReg+3
 13770  003718  C018  F010         	movff	vscp_readStdReg@code_1473+3,??_vscp_readStdReg+4
 13771  00371C  2AE8               	incf	wreg,f,c
 13772  00371E  D001               	goto	u19890
 13773  003720                     u19895:
 13774  003720  D823               	call	PL112	;call to abstracted procedure
 13775  003722                     u19890:
 13776  003722  2EE8               	decfsz	wreg,f,c
 13777  003724  D7FD               	goto	u19895
 13778  003726                     L48:
 13779  003726  500D               	movf	??_vscp_readStdReg+1,w,c
 13780  003728  D7DA               	goto	L47
 13781  00372A                     l15000:
 13782                           
 13783                           ; BSR set to: 0
 13784                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13785                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13786  00372A  0ECF               	movlw	207
 13787  00372C  641C               	cpfsgt	vscp_readStdReg@reg,c
 13788  00372E  D008               	goto	l15006
 13789                           
 13790                           ; BSR set to: 0
 13791  003730  0EE0               	movlw	224
 13792  003732  601C               	cpfslt	vscp_readStdReg@reg,c
 13793  003734  D005               	goto	l15006
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13797  003736  501C               	movf	vscp_readStdReg@reg,w,c
 13798  003738  0F30               	addlw	48
 13799  00373A  EC5D  F024         	call	_vscp_getGUID
 13800  00373E  D7CF               	goto	L47
 13801  003740                     l15006:
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13805  003740  0EDF               	movlw	223
 13806  003742  641C               	cpfsgt	vscp_readStdReg@reg,c
 13807  003744  D005               	goto	l15010
 13808                           
 13809                           ; BSR set to: 0
 13810                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13811  003746  501C               	movf	vscp_readStdReg@reg,w,c
 13812  003748  0F20               	addlw	32
 13813  00374A  EC10  F024         	call	_vscp_getMDF_URL
 13814  00374E  D7C7               	goto	L47
 13815  003750                     l15010:
 13816                           
 13817                           ;vscp_firmware.c: 691: }
 13818                           ;vscp_firmware.c: 693: return rv;
 13819  003750  501B               	movf	vscp_readStdReg@rv,w,c
 13820  003752  0012               	return	
 13821  003754                     __end_of_vscp_readStdReg:
 13822                           	opt stack 0
 13823  003754                     PL66:
 13824                           	opt stack 24
 13825  003754  0803               	sublw	3
 13826  003756  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 13827  003758  90D8               	bcf	status,0,c
 13828  00375A  360C               	rlcf	??_vscp_readStdReg,f,c
 13829  00375C  90D8               	bcf	status,0,c
 13830  00375E  360C               	rlcf	??_vscp_readStdReg,f,c
 13831  003760  90D8               	bcf	status,0,c
 13832  003762  360C               	rlcf	??_vscp_readStdReg,f,c
 13833  003764  500C               	movf	??_vscp_readStdReg,w,c
 13834  003766  0012               	return	
 13835  003768                     __end_ofPL66:
 13836                           	opt stack 0
 13837  003768                     PL112:
 13838                           	opt stack 24
 13839  003768  90D8               	bcf	status,0,c
 13840  00376A  3210               	rrcf	??_vscp_readStdReg+4,f,c
 13841  00376C  320F               	rrcf	??_vscp_readStdReg+3,f,c
 13842  00376E  320E               	rrcf	??_vscp_readStdReg+2,f,c
 13843  003770  320D               	rrcf	??_vscp_readStdReg+1,f,c
 13844  003772  0012               	return	
 13845  003774                     __end_ofPL112:
 13846                           	opt stack 0
 13847                           tblptru	equ	0xFF8
 13848                           tblptrh	equ	0xFF7
 13849                           tblptrl	equ	0xFF6
 13850                           tablat	equ	0xFF5
 13851                           prodh	equ	0xFF4
 13852                           prodl	equ	0xFF3
 13853                           intcon	equ	0xFF2
 13854                           intcon2	equ	0xFF1
 13855                           postinc0	equ	0xFEE
 13856                           wreg	equ	0xFE8
 13857                           indf1	equ	0xFE7
 13858                           fsr1h	equ	0xFE2
 13859                           fsr1l	equ	0xFE1
 13860                           indf2	equ	0xFDF
 13861                           postinc2	equ	0xFDE
 13862                           postdec2	equ	0xFDD
 13863                           plusw2	equ	0xFDB
 13864                           fsr2h	equ	0xFDA
 13865                           fsr2l	equ	0xFD9
 13866                           status	equ	0xFD8
 13867                           
 13868 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13869 ;; Defined at:
 13870 ;;		line 3564 in file "../main.c"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;		None
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;		None
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      unsigned char 
 13877 ;; Registers used:
 13878 ;;		wreg
 13879 ;; Tracked objects:
 13880 ;;		On entry : F/0
 13881 ;;		On exit  : F/0
 13882 ;;		Unchanged: F/0
 13883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13884 ;;      Params:         0       0       0       0       0       0       0
 13885 ;;      Locals:         0       0       0       0       0       0       0
 13886 ;;      Temps:          0       0       0       0       0       0       0
 13887 ;;      Totals:         0       0       0       0       0       0       0
 13888 ;;Total ram usage:        0 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    2
 13891 ;; This function calls:
 13892 ;;		Nothing
 13893 ;; This function is called by:
 13894 ;;		_vscp_readStdReg
 13895 ;; This function uses a non-reentrant model
 13896 ;;
 13897                           
 13898                           	psect	text30
 13899  004954                     __ptext30:
 13900                           	opt stack 0
 13901  004954                     _vscp_getRegisterPagesUsed:
 13902                           	opt stack 25
 13903                           
 13904                           ; BSR set to: 0
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;main.c: 3565: return 3;
 13908                           
 13909                           ;incstack = 0
 13910                           ;incstack = 0
 13911  004954  0C03               	retlw	3
 13912  004956                     __end_of_vscp_getRegisterPagesUsed:
 13913                           	opt stack 0
 13914                           tblptru	equ	0xFF8
 13915                           tblptrh	equ	0xFF7
 13916                           tblptrl	equ	0xFF6
 13917                           tablat	equ	0xFF5
 13918                           prodh	equ	0xFF4
 13919                           prodl	equ	0xFF3
 13920                           intcon	equ	0xFF2
 13921                           intcon2	equ	0xFF1
 13922                           postinc0	equ	0xFEE
 13923                           wreg	equ	0xFE8
 13924                           indf1	equ	0xFE7
 13925                           fsr1h	equ	0xFE2
 13926                           fsr1l	equ	0xFE1
 13927                           indf2	equ	0xFDF
 13928                           postinc2	equ	0xFDE
 13929                           postdec2	equ	0xFDD
 13930                           plusw2	equ	0xFDB
 13931                           fsr2h	equ	0xFDA
 13932                           fsr2l	equ	0xFD9
 13933                           status	equ	0xFD8
 13934                           
 13935 ;; *************** function _vscp_getFamilyType *****************
 13936 ;; Defined at:
 13937 ;;		line 3545 in file "../main.c"
 13938 ;; Parameters:    Size  Location     Type
 13939 ;;		None
 13940 ;; Auto vars:     Size  Location     Type
 13941 ;;		None
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  4    7[COMRAM] unsigned long 
 13944 ;; Registers used:
 13945 ;;		None
 13946 ;; Tracked objects:
 13947 ;;		On entry : F/0
 13948 ;;		On exit  : F/0
 13949 ;;		Unchanged: F/0
 13950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13951 ;;      Params:         4       0       0       0       0       0       0
 13952 ;;      Locals:         0       0       0       0       0       0       0
 13953 ;;      Temps:          0       0       0       0       0       0       0
 13954 ;;      Totals:         4       0       0       0       0       0       0
 13955 ;;Total ram usage:        4 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:    2
 13958 ;; This function calls:
 13959 ;;		Nothing
 13960 ;; This function is called by:
 13961 ;;		_vscp_readStdReg
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           	psect	text31
 13966  004918                     __ptext31:
 13967                           	opt stack 0
 13968  004918                     _vscp_getFamilyType:
 13969                           	opt stack 25
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;main.c: 3546: return 0;
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;incstack = 0
 13976                           ;incstack = 0
 13977  004918  6A08               	clrf	?_vscp_getFamilyType,c
 13978  00491A  6A09               	clrf	?_vscp_getFamilyType+1,c
 13979  00491C  6A0A               	clrf	?_vscp_getFamilyType+2,c
 13980  00491E  6A0B               	clrf	?_vscp_getFamilyType+3,c
 13981                           
 13982                           ; BSR set to: 0
 13983  004920  0012               	return	
 13984  004922                     __end_of_vscp_getFamilyType:
 13985                           	opt stack 0
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           postinc0	equ	0xFEE
 13995                           wreg	equ	0xFE8
 13996                           indf1	equ	0xFE7
 13997                           fsr1h	equ	0xFE2
 13998                           fsr1l	equ	0xFE1
 13999                           indf2	equ	0xFDF
 14000                           postinc2	equ	0xFDE
 14001                           postdec2	equ	0xFDD
 14002                           plusw2	equ	0xFDB
 14003                           fsr2h	equ	0xFDA
 14004                           fsr2l	equ	0xFD9
 14005                           status	equ	0xFD8
 14006                           
 14007 ;; *************** function _vscp_getFamilyCode *****************
 14008 ;; Defined at:
 14009 ;;		line 3536 in file "../main.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;		None
 14012 ;; Auto vars:     Size  Location     Type
 14013 ;;		None
 14014 ;; Return value:  Size  Location     Type
 14015 ;;                  4    7[COMRAM] unsigned long 
 14016 ;; Registers used:
 14017 ;;		None
 14018 ;; Tracked objects:
 14019 ;;		On entry : F/0
 14020 ;;		On exit  : F/0
 14021 ;;		Unchanged: F/0
 14022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14023 ;;      Params:         4       0       0       0       0       0       0
 14024 ;;      Locals:         0       0       0       0       0       0       0
 14025 ;;      Temps:          0       0       0       0       0       0       0
 14026 ;;      Totals:         4       0       0       0       0       0       0
 14027 ;;Total ram usage:        4 bytes
 14028 ;; Hardware stack levels used:    1
 14029 ;; Hardware stack levels required when called:    2
 14030 ;; This function calls:
 14031 ;;		Nothing
 14032 ;; This function is called by:
 14033 ;;		_vscp_readStdReg
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text32
 14038  004922                     __ptext32:
 14039                           	opt stack 0
 14040  004922                     _vscp_getFamilyCode:
 14041                           	opt stack 25
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;main.c: 3537: return 0L;
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;incstack = 0
 14048                           ;incstack = 0
 14049  004922  6A08               	clrf	?_vscp_getFamilyCode,c
 14050  004924  6A09               	clrf	?_vscp_getFamilyCode+1,c
 14051  004926  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 14052  004928  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 14053                           
 14054                           ; BSR set to: 0
 14055  00492A  0012               	return	
 14056  00492C                     __end_of_vscp_getFamilyCode:
 14057                           	opt stack 0
 14058                           tblptru	equ	0xFF8
 14059                           tblptrh	equ	0xFF7
 14060                           tblptrl	equ	0xFF6
 14061                           tablat	equ	0xFF5
 14062                           prodh	equ	0xFF4
 14063                           prodl	equ	0xFF3
 14064                           intcon	equ	0xFF2
 14065                           intcon2	equ	0xFF1
 14066                           postinc0	equ	0xFEE
 14067                           wreg	equ	0xFE8
 14068                           indf1	equ	0xFE7
 14069                           fsr1h	equ	0xFE2
 14070                           fsr1l	equ	0xFE1
 14071                           indf2	equ	0xFDF
 14072                           postinc2	equ	0xFDE
 14073                           postdec2	equ	0xFDD
 14074                           plusw2	equ	0xFDB
 14075                           fsr2h	equ	0xFDA
 14076                           fsr2l	equ	0xFD9
 14077                           status	equ	0xFD8
 14078                           
 14079 ;; *************** function _vscp_getBufferSize *****************
 14080 ;; Defined at:
 14081 ;;		line 3397 in file "../main.c"
 14082 ;; Parameters:    Size  Location     Type
 14083 ;;		None
 14084 ;; Auto vars:     Size  Location     Type
 14085 ;;		None
 14086 ;; Return value:  Size  Location     Type
 14087 ;;                  1    wreg      unsigned char 
 14088 ;; Registers used:
 14089 ;;		wreg
 14090 ;; Tracked objects:
 14091 ;;		On entry : F/0
 14092 ;;		On exit  : F/0
 14093 ;;		Unchanged: F/0
 14094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14095 ;;      Params:         0       0       0       0       0       0       0
 14096 ;;      Locals:         0       0       0       0       0       0       0
 14097 ;;      Temps:          0       0       0       0       0       0       0
 14098 ;;      Totals:         0       0       0       0       0       0       0
 14099 ;;Total ram usage:        0 bytes
 14100 ;; Hardware stack levels used:    1
 14101 ;; Hardware stack levels required when called:    2
 14102 ;; This function calls:
 14103 ;;		Nothing
 14104 ;; This function is called by:
 14105 ;;		_vscp_readStdReg
 14106 ;; This function uses a non-reentrant model
 14107 ;;
 14108                           
 14109                           	psect	text33
 14110  004956                     __ptext33:
 14111                           	opt stack 0
 14112  004956                     _vscp_getBufferSize:
 14113                           	opt stack 25
 14114                           
 14115                           ; BSR set to: 0
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;main.c: 3398: return 8;
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;incstack = 0
 14122                           ;incstack = 0
 14123  004956  0C08               	retlw	8
 14124  004958                     __end_of_vscp_getBufferSize:
 14125                           	opt stack 0
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           intcon	equ	0xFF2
 14133                           intcon2	equ	0xFF1
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           fsr1h	equ	0xFE2
 14138                           fsr1l	equ	0xFE1
 14139                           indf2	equ	0xFDF
 14140                           postinc2	equ	0xFDE
 14141                           postdec2	equ	0xFDD
 14142                           plusw2	equ	0xFDB
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 14148 ;; Defined at:
 14149 ;;		line 3388 in file "../main.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;		None
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;		None
 14154 ;; Return value:  Size  Location     Type
 14155 ;;                  1    wreg      unsigned char 
 14156 ;; Registers used:
 14157 ;;		wreg
 14158 ;; Tracked objects:
 14159 ;;		On entry : F/0
 14160 ;;		On exit  : F/0
 14161 ;;		Unchanged: F/0
 14162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14163 ;;      Params:         0       0       0       0       0       0       0
 14164 ;;      Locals:         0       0       0       0       0       0       0
 14165 ;;      Temps:          0       0       0       0       0       0       0
 14166 ;;      Totals:         0       0       0       0       0       0       0
 14167 ;;Total ram usage:        0 bytes
 14168 ;; Hardware stack levels used:    1
 14169 ;; Hardware stack levels required when called:    2
 14170 ;; This function calls:
 14171 ;;		Nothing
 14172 ;; This function is called by:
 14173 ;;		_vscp_readStdReg
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           	psect	text34
 14178  004958                     __ptext34:
 14179                           	opt stack 0
 14180  004958                     _vscp_getBootLoaderAlgorithm:
 14181                           	opt stack 25
 14182                           
 14183                           ; BSR set to: 0
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;main.c: 3389: return 0x01;
 14187                           
 14188                           ; BSR set to: 0
 14189                           ;incstack = 0
 14190                           ;incstack = 0
 14191  004958  0C01               	retlw	1
 14192  00495A                     __end_of_vscp_getBootLoaderAlgorithm:
 14193                           	opt stack 0
 14194                           tblptru	equ	0xFF8
 14195                           tblptrh	equ	0xFF7
 14196                           tblptrl	equ	0xFF6
 14197                           tablat	equ	0xFF5
 14198                           prodh	equ	0xFF4
 14199                           prodl	equ	0xFF3
 14200                           intcon	equ	0xFF2
 14201                           intcon2	equ	0xFF1
 14202                           postinc0	equ	0xFEE
 14203                           wreg	equ	0xFE8
 14204                           indf1	equ	0xFE7
 14205                           fsr1h	equ	0xFE2
 14206                           fsr1l	equ	0xFE1
 14207                           indf2	equ	0xFDF
 14208                           postinc2	equ	0xFDE
 14209                           postdec2	equ	0xFDD
 14210                           plusw2	equ	0xFDB
 14211                           fsr2h	equ	0xFDA
 14212                           fsr2l	equ	0xFD9
 14213                           status	equ	0xFD8
 14214                           
 14215 ;; *************** function _vscp_getManufacturerId *****************
 14216 ;; Defined at:
 14217 ;;		line 3379 in file "../main.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  idx             1    wreg     unsigned char 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;  idx             1    9[COMRAM] unsigned char 
 14222 ;; Return value:  Size  Location     Type
 14223 ;;                  1    wreg      unsigned char 
 14224 ;; Registers used:
 14225 ;;		wreg, status,2, status,0, cstack
 14226 ;; Tracked objects:
 14227 ;;		On entry : 0/0
 14228 ;;		On exit  : 0/0
 14229 ;;		Unchanged: 0/0
 14230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14231 ;;      Params:         0       0       0       0       0       0       0
 14232 ;;      Locals:         1       0       0       0       0       0       0
 14233 ;;      Temps:          0       0       0       0       0       0       0
 14234 ;;      Totals:         1       0       0       0       0       0       0
 14235 ;;Total ram usage:        1 bytes
 14236 ;; Hardware stack levels used:    1
 14237 ;; Hardware stack levels required when called:    3
 14238 ;; This function calls:
 14239 ;;		_Read_b_eep
 14240 ;; This function is called by:
 14241 ;;		_vscp_readStdReg
 14242 ;;		_vscp_writeStdReg
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           	psect	text35
 14247  004892                     __ptext35:
 14248                           	opt stack 0
 14249  004892                     _vscp_getManufacturerId:
 14250                           	opt stack 24
 14251                           
 14252                           ; BSR set to: 0
 14253                           ;incstack = 0
 14254                           ;incstack = 0
 14255                           ;vscp_getManufacturerId@idx stored from wreg
 14256  004892  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 14257                           
 14258                           ;main.c: 3380: return Read_b_eep(0x0B + idx);
 14259  004896  0E0B               	movlw	11
 14260  004898  240A               	addwf	vscp_getManufacturerId@idx,w,c
 14261  00489A  6E08               	movwf	?_Read_b_eep,c
 14262  00489C  6A09               	clrf	?_Read_b_eep+1,c
 14263  00489E  0E00               	movlw	0
 14264  0048A0  2209               	addwfc	?_Read_b_eep+1,f,c
 14265  0048A2  EF70  F024         	goto	_Read_b_eep	;wreg free
 14266  0048A6                     __end_of_vscp_getManufacturerId:
 14267                           	opt stack 0
 14268                           tblptru	equ	0xFF8
 14269                           tblptrh	equ	0xFF7
 14270                           tblptrl	equ	0xFF6
 14271                           tablat	equ	0xFF5
 14272                           prodh	equ	0xFF4
 14273                           prodl	equ	0xFF3
 14274                           intcon	equ	0xFF2
 14275                           intcon2	equ	0xFF1
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           fsr1h	equ	0xFE2
 14280                           fsr1l	equ	0xFE1
 14281                           indf2	equ	0xFDF
 14282                           postinc2	equ	0xFDE
 14283                           postdec2	equ	0xFDD
 14284                           plusw2	equ	0xFDB
 14285                           fsr2h	equ	0xFDA
 14286                           fsr2l	equ	0xFD9
 14287                           status	equ	0xFD8
 14288                           
 14289 ;; *************** function _vscp_getUserID *****************
 14290 ;; Defined at:
 14291 ;;		line 3359 in file "../main.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;  idx             1    wreg     unsigned char 
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;  idx             1    9[COMRAM] unsigned char 
 14296 ;; Return value:  Size  Location     Type
 14297 ;;                  1    wreg      unsigned char 
 14298 ;; Registers used:
 14299 ;;		wreg, status,2, status,0, cstack
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14305 ;;      Params:         0       0       0       0       0       0       0
 14306 ;;      Locals:         1       0       0       0       0       0       0
 14307 ;;      Temps:          0       0       0       0       0       0       0
 14308 ;;      Totals:         1       0       0       0       0       0       0
 14309 ;;Total ram usage:        1 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    3
 14312 ;; This function calls:
 14313 ;;		_Read_b_eep
 14314 ;; This function is called by:
 14315 ;;		_vscp_readStdReg
 14316 ;;		_vscp_writeStdReg
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           	psect	text36
 14321  0048A6                     __ptext36:
 14322                           	opt stack 0
 14323  0048A6                     _vscp_getUserID:
 14324                           	opt stack 24
 14325                           
 14326                           ;incstack = 0
 14327                           ;incstack = 0
 14328                           ;vscp_getUserID@idx stored from wreg
 14329  0048A6  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 14330                           
 14331                           ;main.c: 3360: return Read_b_eep(0x06 + idx);
 14332  0048AA  0E06               	movlw	6
 14333  0048AC  240A               	addwf	vscp_getUserID@idx,w,c
 14334  0048AE  6E08               	movwf	?_Read_b_eep,c
 14335  0048B0  6A09               	clrf	?_Read_b_eep+1,c
 14336  0048B2  0E00               	movlw	0
 14337  0048B4  2209               	addwfc	?_Read_b_eep+1,f,c
 14338  0048B6  EF70  F024         	goto	_Read_b_eep	;wreg free
 14339  0048BA                     __end_of_vscp_getUserID:
 14340                           	opt stack 0
 14341                           tblptru	equ	0xFF8
 14342                           tblptrh	equ	0xFF7
 14343                           tblptrl	equ	0xFF6
 14344                           tablat	equ	0xFF5
 14345                           prodh	equ	0xFF4
 14346                           prodl	equ	0xFF3
 14347                           intcon	equ	0xFF2
 14348                           intcon2	equ	0xFF1
 14349                           postinc0	equ	0xFEE
 14350                           wreg	equ	0xFE8
 14351                           indf1	equ	0xFE7
 14352                           fsr1h	equ	0xFE2
 14353                           fsr1l	equ	0xFE1
 14354                           indf2	equ	0xFDF
 14355                           postinc2	equ	0xFDE
 14356                           postdec2	equ	0xFDD
 14357                           plusw2	equ	0xFDB
 14358                           fsr2h	equ	0xFDA
 14359                           fsr2l	equ	0xFD9
 14360                           status	equ	0xFD8
 14361                           
 14362 ;; *************** function _vscp_getMDF_URL *****************
 14363 ;; Defined at:
 14364 ;;		line 3350 in file "../main.c"
 14365 ;; Parameters:    Size  Location     Type
 14366 ;;  idx             1    wreg     unsigned char 
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;  idx             1    8[COMRAM] unsigned char 
 14369 ;; Return value:  Size  Location     Type
 14370 ;;                  1    wreg      unsigned char 
 14371 ;; Registers used:
 14372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14373 ;; Tracked objects:
 14374 ;;		On entry : F/0
 14375 ;;		On exit  : F/0
 14376 ;;		Unchanged: F/0
 14377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14378 ;;      Params:         0       0       0       0       0       0       0
 14379 ;;      Locals:         1       0       0       0       0       0       0
 14380 ;;      Temps:          1       0       0       0       0       0       0
 14381 ;;      Totals:         2       0       0       0       0       0       0
 14382 ;;Total ram usage:        2 bytes
 14383 ;; Hardware stack levels used:    1
 14384 ;; Hardware stack levels required when called:    2
 14385 ;; This function calls:
 14386 ;;		Nothing
 14387 ;; This function is called by:
 14388 ;;		_vscp_readStdReg
 14389 ;;		_vscp_handleProtocolEvent
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text37
 14394  004820                     __ptext37:
 14395                           	opt stack 0
 14396  004820                     _vscp_getMDF_URL:
 14397                           	opt stack 25
 14398                           
 14399                           ;incstack = 0
 14400                           ;incstack = 0
 14401                           ;vscp_getMDF_URL@idx stored from wreg
 14402  004820  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 14403                           
 14404                           ; BSR set to: 0
 14405                           ;main.c: 3351: return vscp_deviceURL[ idx ];
 14406  004824  5009               	movf	vscp_getMDF_URL@idx,w,c
 14407  004826  0F00               	addlw	low _vscp_deviceURL
 14408  004828  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 14409  00482A  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 14410  00482E  0E06               	movlw	high __smallconst
 14411  004830  6EF7               	movwf	tblptrh,c
 14412  004832  0008               	tblrd		*
 14413  004834  50F5               	movf	tablat,w,c
 14414                           
 14415                           ; BSR set to: 0
 14416  004836  0012               	return	
 14417  004838                     __end_of_vscp_getMDF_URL:
 14418                           	opt stack 0
 14419                           tblptru	equ	0xFF8
 14420                           tblptrh	equ	0xFF7
 14421                           tblptrl	equ	0xFF6
 14422                           tablat	equ	0xFF5
 14423                           prodh	equ	0xFF4
 14424                           prodl	equ	0xFF3
 14425                           intcon	equ	0xFF2
 14426                           intcon2	equ	0xFF1
 14427                           postinc0	equ	0xFEE
 14428                           wreg	equ	0xFE8
 14429                           indf1	equ	0xFE7
 14430                           fsr1h	equ	0xFE2
 14431                           fsr1l	equ	0xFE1
 14432                           indf2	equ	0xFDF
 14433                           postinc2	equ	0xFDE
 14434                           postdec2	equ	0xFDD
 14435                           plusw2	equ	0xFDB
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _vscp_getGUID *****************
 14441 ;; Defined at:
 14442 ;;		line 3338 in file "../main.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  idx             1    wreg     unsigned char 
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;  idx             1    9[COMRAM] unsigned char 
 14447 ;; Return value:  Size  Location     Type
 14448 ;;                  1    wreg      unsigned char 
 14449 ;; Registers used:
 14450 ;;		wreg, status,2, status,0, cstack
 14451 ;; Tracked objects:
 14452 ;;		On entry : 0/0
 14453 ;;		On exit  : 0/0
 14454 ;;		Unchanged: 0/0
 14455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14456 ;;      Params:         0       0       0       0       0       0       0
 14457 ;;      Locals:         1       0       0       0       0       0       0
 14458 ;;      Temps:          0       0       0       0       0       0       0
 14459 ;;      Totals:         1       0       0       0       0       0       0
 14460 ;;Total ram usage:        1 bytes
 14461 ;; Hardware stack levels used:    1
 14462 ;; Hardware stack levels required when called:    3
 14463 ;; This function calls:
 14464 ;;		_Read_b_eep
 14465 ;; This function is called by:
 14466 ;;		_vscp_readStdReg
 14467 ;;		_vscp_writeStdReg
 14468 ;;		_vscp_handleProtocolEvent
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           	psect	text38
 14473  0048BA                     __ptext38:
 14474                           	opt stack 0
 14475  0048BA                     _vscp_getGUID:
 14476                           	opt stack 24
 14477                           
 14478                           ; BSR set to: 0
 14479                           ;incstack = 0
 14480                           ;incstack = 0
 14481                           ;vscp_getGUID@idx stored from wreg
 14482  0048BA  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 14483                           
 14484                           ;main.c: 3339: return Read_b_eep(0x13 + idx);
 14485  0048BE  0E13               	movlw	19
 14486  0048C0  240A               	addwf	vscp_getGUID@idx,w,c
 14487  0048C2  6E08               	movwf	?_Read_b_eep,c
 14488  0048C4  6A09               	clrf	?_Read_b_eep+1,c
 14489  0048C6  0E00               	movlw	0
 14490  0048C8  2209               	addwfc	?_Read_b_eep+1,f,c
 14491  0048CA  EF70  F024         	goto	_Read_b_eep	;wreg free
 14492  0048CE                     __end_of_vscp_getGUID:
 14493                           	opt stack 0
 14494                           tblptru	equ	0xFF8
 14495                           tblptrh	equ	0xFF7
 14496                           tblptrl	equ	0xFF6
 14497                           tablat	equ	0xFF5
 14498                           prodh	equ	0xFF4
 14499                           prodl	equ	0xFF3
 14500                           intcon	equ	0xFF2
 14501                           intcon2	equ	0xFF1
 14502                           postinc0	equ	0xFEE
 14503                           wreg	equ	0xFE8
 14504                           indf1	equ	0xFE7
 14505                           fsr1h	equ	0xFE2
 14506                           fsr1l	equ	0xFE1
 14507                           indf2	equ	0xFDF
 14508                           postinc2	equ	0xFDE
 14509                           postdec2	equ	0xFDD
 14510                           plusw2	equ	0xFDB
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           
 14515 ;; *************** function _vscp_getSubMinorVersion *****************
 14516 ;; Defined at:
 14517 ;;		line 3327 in file "../main.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;		None
 14520 ;; Auto vars:     Size  Location     Type
 14521 ;;		None
 14522 ;; Return value:  Size  Location     Type
 14523 ;;                  1    wreg      unsigned char 
 14524 ;; Registers used:
 14525 ;;		wreg
 14526 ;; Tracked objects:
 14527 ;;		On entry : F/0
 14528 ;;		On exit  : F/0
 14529 ;;		Unchanged: F/0
 14530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14531 ;;      Params:         0       0       0       0       0       0       0
 14532 ;;      Locals:         0       0       0       0       0       0       0
 14533 ;;      Temps:          0       0       0       0       0       0       0
 14534 ;;      Totals:         0       0       0       0       0       0       0
 14535 ;;Total ram usage:        0 bytes
 14536 ;; Hardware stack levels used:    1
 14537 ;; Hardware stack levels required when called:    2
 14538 ;; This function calls:
 14539 ;;		Nothing
 14540 ;; This function is called by:
 14541 ;;		_vscp_readStdReg
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           	psect	text39
 14546  00495A                     __ptext39:
 14547                           	opt stack 0
 14548  00495A                     _vscp_getSubMinorVersion:
 14549                           	opt stack 25
 14550                           
 14551                           ; BSR set to: 0
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;main.c: 3328: return 0;
 14555                           
 14556                           ;incstack = 0
 14557                           ;incstack = 0
 14558  00495A  0C00               	retlw	0
 14559  00495C                     __end_of_vscp_getSubMinorVersion:
 14560                           	opt stack 0
 14561                           tblptru	equ	0xFF8
 14562                           tblptrh	equ	0xFF7
 14563                           tblptrl	equ	0xFF6
 14564                           tablat	equ	0xFF5
 14565                           prodh	equ	0xFF4
 14566                           prodl	equ	0xFF3
 14567                           intcon	equ	0xFF2
 14568                           intcon2	equ	0xFF1
 14569                           postinc0	equ	0xFEE
 14570                           wreg	equ	0xFE8
 14571                           indf1	equ	0xFE7
 14572                           fsr1h	equ	0xFE2
 14573                           fsr1l	equ	0xFE1
 14574                           indf2	equ	0xFDF
 14575                           postinc2	equ	0xFDE
 14576                           postdec2	equ	0xFDD
 14577                           plusw2	equ	0xFDB
 14578                           fsr2h	equ	0xFDA
 14579                           fsr2l	equ	0xFD9
 14580                           status	equ	0xFD8
 14581                           
 14582 ;; *************** function _vscp_getMinorVersion *****************
 14583 ;; Defined at:
 14584 ;;		line 3318 in file "../main.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;		None
 14587 ;; Auto vars:     Size  Location     Type
 14588 ;;		None
 14589 ;; Return value:  Size  Location     Type
 14590 ;;                  1    wreg      unsigned char 
 14591 ;; Registers used:
 14592 ;;		wreg
 14593 ;; Tracked objects:
 14594 ;;		On entry : F/0
 14595 ;;		On exit  : F/0
 14596 ;;		Unchanged: F/0
 14597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14598 ;;      Params:         0       0       0       0       0       0       0
 14599 ;;      Locals:         0       0       0       0       0       0       0
 14600 ;;      Temps:          0       0       0       0       0       0       0
 14601 ;;      Totals:         0       0       0       0       0       0       0
 14602 ;;Total ram usage:        0 bytes
 14603 ;; Hardware stack levels used:    1
 14604 ;; Hardware stack levels required when called:    2
 14605 ;; This function calls:
 14606 ;;		Nothing
 14607 ;; This function is called by:
 14608 ;;		_vscp_readStdReg
 14609 ;; This function uses a non-reentrant model
 14610 ;;
 14611                           
 14612                           	psect	text40
 14613  00495C                     __ptext40:
 14614                           	opt stack 0
 14615  00495C                     _vscp_getMinorVersion:
 14616                           	opt stack 25
 14617                           
 14618                           ; BSR set to: 0
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;main.c: 3319: return 0;
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;incstack = 0
 14625                           ;incstack = 0
 14626  00495C  0C00               	retlw	0
 14627  00495E                     __end_of_vscp_getMinorVersion:
 14628                           	opt stack 0
 14629                           tblptru	equ	0xFF8
 14630                           tblptrh	equ	0xFF7
 14631                           tblptrl	equ	0xFF6
 14632                           tablat	equ	0xFF5
 14633                           prodh	equ	0xFF4
 14634                           prodl	equ	0xFF3
 14635                           intcon	equ	0xFF2
 14636                           intcon2	equ	0xFF1
 14637                           postinc0	equ	0xFEE
 14638                           wreg	equ	0xFE8
 14639                           indf1	equ	0xFE7
 14640                           fsr1h	equ	0xFE2
 14641                           fsr1l	equ	0xFE1
 14642                           indf2	equ	0xFDF
 14643                           postinc2	equ	0xFDE
 14644                           postdec2	equ	0xFDD
 14645                           plusw2	equ	0xFDB
 14646                           fsr2h	equ	0xFDA
 14647                           fsr2l	equ	0xFD9
 14648                           status	equ	0xFD8
 14649                           
 14650 ;; *************** function _vscp_getMajorVersion *****************
 14651 ;; Defined at:
 14652 ;;		line 3309 in file "../main.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;		None
 14655 ;; Auto vars:     Size  Location     Type
 14656 ;;		None
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  1    wreg      unsigned char 
 14659 ;; Registers used:
 14660 ;;		wreg
 14661 ;; Tracked objects:
 14662 ;;		On entry : F/0
 14663 ;;		On exit  : F/0
 14664 ;;		Unchanged: F/0
 14665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14666 ;;      Params:         0       0       0       0       0       0       0
 14667 ;;      Locals:         0       0       0       0       0       0       0
 14668 ;;      Temps:          0       0       0       0       0       0       0
 14669 ;;      Totals:         0       0       0       0       0       0       0
 14670 ;;Total ram usage:        0 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:    2
 14673 ;; This function calls:
 14674 ;;		Nothing
 14675 ;; This function is called by:
 14676 ;;		_vscp_readStdReg
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           	psect	text41
 14681  00495E                     __ptext41:
 14682                           	opt stack 0
 14683  00495E                     _vscp_getMajorVersion:
 14684                           	opt stack 25
 14685                           
 14686                           ; BSR set to: 0
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;main.c: 3310: return 1;
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;incstack = 0
 14693                           ;incstack = 0
 14694  00495E  0C01               	retlw	1
 14695  004960                     __end_of_vscp_getMajorVersion:
 14696                           	opt stack 0
 14697                           tblptru	equ	0xFF8
 14698                           tblptrh	equ	0xFF7
 14699                           tblptrl	equ	0xFF6
 14700                           tablat	equ	0xFF5
 14701                           prodh	equ	0xFF4
 14702                           prodl	equ	0xFF3
 14703                           intcon	equ	0xFF2
 14704                           intcon2	equ	0xFF1
 14705                           postinc0	equ	0xFEE
 14706                           wreg	equ	0xFE8
 14707                           indf1	equ	0xFE7
 14708                           fsr1h	equ	0xFE2
 14709                           fsr1l	equ	0xFE1
 14710                           indf2	equ	0xFDF
 14711                           postinc2	equ	0xFDE
 14712                           postdec2	equ	0xFDD
 14713                           plusw2	equ	0xFDB
 14714                           fsr2h	equ	0xFDA
 14715                           fsr2l	equ	0xFD9
 14716                           status	equ	0xFD8
 14717                           
 14718 ;; *************** function _vscp_newNodeOnline *****************
 14719 ;; Defined at:
 14720 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14721 ;; Parameters:    Size  Location     Type
 14722 ;;		None
 14723 ;; Auto vars:     Size  Location     Type
 14724 ;;		None
 14725 ;; Return value:  Size  Location     Type
 14726 ;;		None               void
 14727 ;; Registers used:
 14728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : F/0
 14731 ;;		On exit  : F/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14734 ;;      Params:         0       0       0       0       0       0       0
 14735 ;;      Locals:         0       0       0       0       0       0       0
 14736 ;;      Temps:          1       0       0       0       0       0       0
 14737 ;;      Totals:         1       0       0       0       0       0       0
 14738 ;;Total ram usage:        1 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    7
 14741 ;; This function calls:
 14742 ;;		_vscp_sendEvent
 14743 ;; This function is called by:
 14744 ;;		_vscp_handleProtocolEvent
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           	psect	text42
 14749  0045F4                     __ptext42:
 14750                           	opt stack 0
 14751  0045F4                     _vscp_newNodeOnline:
 14752                           	opt stack 21
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14756                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;incstack = 0
 14760                           ;incstack = 0
 14761  0045F4  C097  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14762  0045F8  0E0F               	movlw	15
 14763  0045FA  164C               	andwf	??_vscp_newNodeOnline,f,c
 14764  0045FC  044C               	decf	??_vscp_newNodeOnline,w,c
 14765  0045FE  E10E               	bnz	l1318
 14766                           
 14767                           ; BSR set to: 0
 14768  004600  517E               	movf	_vscp_nickname& (0+255),w,b
 14769  004602  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14770  004606  62DF               	cpfseq	indf2,c
 14771  004608  D009               	goto	l1318
 14772                           
 14773                           ; BSR set to: 0
 14774                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14775  00460A  0E80               	movlw	128
 14776  00460C  6FA5               	movwf	_vscp_omsg& (0+255),b
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14780  00460E  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14784  004610  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 14785  004612  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 14786                           
 14787                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14788  004614  0E03               	movlw	3
 14789  004616  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 14790                           
 14791                           ; BSR set to: 0
 14792                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14793  004618  EC71  F023         	call	_vscp_sendEvent	;wreg free
 14794  00461C                     l1318:
 14795                           
 14796                           ; BSR set to: 0
 14797  00461C  0012               	return	
 14798  00461E                     __end_of_vscp_newNodeOnline:
 14799                           	opt stack 0
 14800                           tblptru	equ	0xFF8
 14801                           tblptrh	equ	0xFF7
 14802                           tblptrl	equ	0xFF6
 14803                           tablat	equ	0xFF5
 14804                           prodh	equ	0xFF4
 14805                           prodl	equ	0xFF3
 14806                           intcon	equ	0xFF2
 14807                           intcon2	equ	0xFF1
 14808                           postinc0	equ	0xFEE
 14809                           wreg	equ	0xFE8
 14810                           indf1	equ	0xFE7
 14811                           fsr1h	equ	0xFE2
 14812                           fsr1l	equ	0xFE1
 14813                           indf2	equ	0xFDF
 14814                           postinc2	equ	0xFDE
 14815                           postdec2	equ	0xFDD
 14816                           plusw2	equ	0xFDB
 14817                           fsr2h	equ	0xFDA
 14818                           fsr2l	equ	0xFD9
 14819                           status	equ	0xFD8
 14820                           
 14821 ;; *************** function _vscp_handleDropNickname *****************
 14822 ;; Defined at:
 14823 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14824 ;; Parameters:    Size  Location     Type
 14825 ;;		None
 14826 ;; Auto vars:     Size  Location     Type
 14827 ;;  bytes           1   12[COMRAM] unsigned char 
 14828 ;; Return value:  Size  Location     Type
 14829 ;;		None               void
 14830 ;; Registers used:
 14831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14832 ;; Tracked objects:
 14833 ;;		On entry : F/0
 14834 ;;		On exit  : F/0
 14835 ;;		Unchanged: 0/0
 14836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14837 ;;      Params:         0       0       0       0       0       0       0
 14838 ;;      Locals:         1       0       0       0       0       0       0
 14839 ;;      Temps:          0       0       0       0       0       0       0
 14840 ;;      Totals:         1       0       0       0       0       0       0
 14841 ;;Total ram usage:        1 bytes
 14842 ;; Hardware stack levels used:    1
 14843 ;; Hardware stack levels required when called:    5
 14844 ;; This function calls:
 14845 ;;		_vscp_init
 14846 ;;		_vscp_writeNicknamePermanent
 14847 ;; This function is called by:
 14848 ;;		_vscp_handleProtocolEvent
 14849 ;; This function uses a non-reentrant model
 14850 ;;
 14851                           
 14852                           	psect	text43
 14853  00453E                     __ptext43:
 14854                           	opt stack 0
 14855  00453E                     _vscp_handleDropNickname:
 14856                           	opt stack 23
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;incstack = 0
 14863                           ;incstack = 0
 14864  00453E  5197               	movf	_vscp_imsg& (0+255),w,b
 14865  004540  0B0F               	andlw	15
 14866  004542  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14870  004544  500D               	movf	vscp_handleDropNickname@bytes,w,c
 14871  004546  E012               	bz	l1314
 14872                           
 14873                           ; BSR set to: 0
 14874  004548  517E               	movf	_vscp_nickname& (0+255),w,b
 14875  00454A  EE20  F09D         	lfsr	2,_vscp_imsg+6
 14876  00454E  62DF               	cpfseq	indf2,c
 14877  004550  D00D               	goto	l1314
 14878                           
 14879                           ; BSR set to: 0
 14880                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14881  004552  040D               	decf	vscp_handleDropNickname@bytes,w,c
 14882  004554  E005               	bz	l1313
 14883                           
 14884                           ; BSR set to: 0
 14885  004556  0E01               	movlw	1
 14886  004558  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 14887  00455A  D008               	goto	l1314
 14888                           
 14889                           ; BSR set to: 0
 14890  00455C  679E               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14891  00455E  D006               	goto	l1314
 14892  004560                     l1313:
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14896  004560  697E               	setf	_vscp_nickname& (0+255),b
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14900  004562  0EFF               	movlw	255
 14901  004564  EC3E  F024         	call	_vscp_writeNicknamePermanent
 14902                           
 14903                           ;vscp_firmware.c: 481: vscp_init();
 14904  004568  EC01  F022         	call	_vscp_init	;wreg free
 14905  00456C                     l1314:
 14906                           
 14907                           ; BSR set to: 0
 14908  00456C  0012               	return	
 14909  00456E                     __end_of_vscp_handleDropNickname:
 14910                           	opt stack 0
 14911                           tblptru	equ	0xFF8
 14912                           tblptrh	equ	0xFF7
 14913                           tblptrl	equ	0xFF6
 14914                           tablat	equ	0xFF5
 14915                           prodh	equ	0xFF4
 14916                           prodl	equ	0xFF3
 14917                           intcon	equ	0xFF2
 14918                           intcon2	equ	0xFF1
 14919                           postinc0	equ	0xFEE
 14920                           wreg	equ	0xFE8
 14921                           indf1	equ	0xFE7
 14922                           fsr1h	equ	0xFE2
 14923                           fsr1l	equ	0xFE1
 14924                           indf2	equ	0xFDF
 14925                           postinc2	equ	0xFDE
 14926                           postdec2	equ	0xFDD
 14927                           plusw2	equ	0xFDB
 14928                           fsr2h	equ	0xFDA
 14929                           fsr2l	equ	0xFD9
 14930                           status	equ	0xFD8
 14931                           
 14932 ;; *************** function _vscp_init *****************
 14933 ;; Defined at:
 14934 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;		None
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;		None
 14939 ;; Return value:  Size  Location     Type
 14940 ;;		None               void
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : F/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14948 ;;      Params:         0       0       0       0       0       0       0
 14949 ;;      Locals:         0       0       0       0       0       0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0
 14951 ;;      Totals:         0       0       0       0       0       0       0
 14952 ;;Total ram usage:        0 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    4
 14955 ;; This function calls:
 14956 ;;		_vscp_readNicknamePermanent
 14957 ;; This function is called by:
 14958 ;;		_main
 14959 ;;		_vscp_handleDropNickname
 14960 ;;		_vscp_handleProtocolEvent
 14961 ;; This function uses a non-reentrant model
 14962 ;;
 14963                           
 14964                           	psect	text44
 14965  004402                     __ptext44:
 14966                           	opt stack 0
 14967  004402                     _vscp_init:
 14968                           	opt stack 23
 14969                           
 14970                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;incstack = 0
 14974                           ;incstack = 0
 14975  004402  0E02               	movlw	2
 14976  004404  6E56               	movwf	_vscp_initledfunc,c
 14977                           
 14978                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14979  004406  EC96  F024         	call	_vscp_readNicknamePermanent	;wreg free
 14980  00440A  0100               	movlb	0	; () banked
 14981  00440C  6F7E               	movwf	_vscp_nickname& (0+255),b
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14985  00440E  677E               	tstfsz	_vscp_nickname& (0+255),b
 14986  004410  D001               	goto	l1255
 14987                           
 14988                           ; BSR set to: 0
 14989  004412  697E               	setf	_vscp_nickname& (0+255),b
 14990  004414                     l1255:
 14991                           
 14992                           ; BSR set to: 0
 14993                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14994  004414  6B97               	clrf	_vscp_imsg& (0+255),b
 14995                           
 14996                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14997  004416  6B98               	clrf	(_vscp_imsg+1)& (0+255),b
 14998                           
 14999                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 15000  004418  6B99               	clrf	(_vscp_imsg+2)& (0+255),b
 15001  00441A  6B9A               	clrf	(_vscp_imsg+3)& (0+255),b
 15002                           
 15003                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 15004  00441C  6B9B               	clrf	(_vscp_imsg+4)& (0+255),b
 15005                           
 15006                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 15007  00441E  6BA5               	clrf	_vscp_omsg& (0+255),b
 15008                           
 15009                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 15010  004420  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15011                           
 15012                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 15013  004422  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15014  004424  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15015                           
 15016                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 15017  004426  6BA9               	clrf	(_vscp_omsg+4)& (0+255),b
 15018                           
 15019                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 15020  004428  6A55               	clrf	_vscp_alarmstatus,c
 15021                           
 15022                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 15023  00442A  6A57               	clrf	_vscp_probe_address,c
 15024                           
 15025                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 15026  00442C  6B7F               	clrf	_vscp_node_state& (0+255),b
 15027                           
 15028                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 15029  00442E  6B80               	clrf	_vscp_node_substate& (0+255),b
 15030                           
 15031                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 15032  004430  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15033                           
 15034                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 15035  004432  6A52               	clrf	_vscp_page_select,c
 15036  004434  6A53               	clrf	_vscp_page_select+1,c
 15037                           
 15038                           ;vscp_firmware.c: 153: vscp_timer = 0;
 15039  004436  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15040  004438  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15041                           
 15042                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 15043  00443A  6B6C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 15044  00443C  6B6D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 15045                           
 15046                           ;vscp_firmware.c: 155: vscp_second = 0;
 15047  00443E  6B82               	clrf	_vscp_second& (0+255),b
 15048                           
 15049                           ;vscp_firmware.c: 156: vscp_minute = 0;
 15050  004440  6B7D               	clrf	_vscp_minute& (0+255),b
 15051                           
 15052                           ;vscp_firmware.c: 157: vscp_hour = 0;
 15053  004442  6B7B               	clrf	_vscp_hour& (0+255),b
 15054                           
 15055                           ; BSR set to: 0
 15056  004444  0012               	return	
 15057  004446                     __end_of_vscp_init:
 15058                           	opt stack 0
 15059                           tblptru	equ	0xFF8
 15060                           tblptrh	equ	0xFF7
 15061                           tblptrl	equ	0xFF6
 15062                           tablat	equ	0xFF5
 15063                           prodh	equ	0xFF4
 15064                           prodl	equ	0xFF3
 15065                           intcon	equ	0xFF2
 15066                           intcon2	equ	0xFF1
 15067                           postinc0	equ	0xFEE
 15068                           wreg	equ	0xFE8
 15069                           indf1	equ	0xFE7
 15070                           fsr1h	equ	0xFE2
 15071                           fsr1l	equ	0xFE1
 15072                           indf2	equ	0xFDF
 15073                           postinc2	equ	0xFDE
 15074                           postdec2	equ	0xFDD
 15075                           plusw2	equ	0xFDB
 15076                           fsr2h	equ	0xFDA
 15077                           fsr2l	equ	0xFD9
 15078                           status	equ	0xFD8
 15079                           
 15080 ;; *************** function _vscp_readNicknamePermanent *****************
 15081 ;; Defined at:
 15082 ;;		line 1376 in file "../main.c"
 15083 ;; Parameters:    Size  Location     Type
 15084 ;;		None
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;		None
 15087 ;; Return value:  Size  Location     Type
 15088 ;;                  1    wreg      unsigned char 
 15089 ;; Registers used:
 15090 ;;		wreg, status,2, cstack
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15096 ;;      Params:         0       0       0       0       0       0       0
 15097 ;;      Locals:         0       0       0       0       0       0       0
 15098 ;;      Temps:          0       0       0       0       0       0       0
 15099 ;;      Totals:         0       0       0       0       0       0       0
 15100 ;;Total ram usage:        0 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    3
 15103 ;; This function calls:
 15104 ;;		_Read_b_eep
 15105 ;; This function is called by:
 15106 ;;		_vscp_init
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text45
 15111  00492C                     __ptext45:
 15112                           	opt stack 0
 15113  00492C                     _vscp_readNicknamePermanent:
 15114                           	opt stack 23
 15115                           
 15116                           ;main.c: 1377: return Read_b_eep(0x01);
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;incstack = 0
 15120                           ;incstack = 0
 15121  00492C  6A09               	clrf	?_Read_b_eep+1,c
 15122  00492E  0E01               	movlw	1
 15123  004930  6E08               	movwf	?_Read_b_eep,c
 15124  004932  EF70  F024         	goto	_Read_b_eep	;wreg free
 15125  004936                     __end_of_vscp_readNicknamePermanent:
 15126                           	opt stack 0
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           intcon2	equ	0xFF1
 15135                           postinc0	equ	0xFEE
 15136                           wreg	equ	0xFE8
 15137                           indf1	equ	0xFE7
 15138                           fsr1h	equ	0xFE2
 15139                           fsr1l	equ	0xFE1
 15140                           indf2	equ	0xFDF
 15141                           postinc2	equ	0xFDE
 15142                           postdec2	equ	0xFDD
 15143                           plusw2	equ	0xFDB
 15144                           fsr2h	equ	0xFDA
 15145                           fsr2l	equ	0xFD9
 15146                           status	equ	0xFD8
 15147                           
 15148 ;; *************** function _vscp_handleSetNickname *****************
 15149 ;; Defined at:
 15150 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;		None
 15155 ;; Return value:  Size  Location     Type
 15156 ;;		None               void
 15157 ;; Registers used:
 15158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15159 ;; Tracked objects:
 15160 ;;		On entry : F/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15164 ;;      Params:         0       0       0       0       0       0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    4
 15171 ;; This function calls:
 15172 ;;		_vscp_writeNicknamePermanent
 15173 ;;		_vscp_setSegmentCRC
 15174 ;; This function is called by:
 15175 ;;		_vscp_handleProtocolEvent
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           	psect	text46
 15180  004708                     __ptext46:
 15181                           	opt stack 0
 15182  004708                     _vscp_handleSetNickname:
 15183                           	opt stack 24
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 15187                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 15188                           
 15189                           ;incstack = 0
 15190                           ;incstack = 0
 15191  004708  5197               	movf	_vscp_imsg& (0+255),w,b
 15192  00470A  0B0F               	andlw	15
 15193  00470C  0A02               	xorlw	2
 15194  00470E  E10D               	bnz	l1307
 15195                           
 15196                           ; BSR set to: 0
 15197  004710  517E               	movf	_vscp_nickname& (0+255),w,b
 15198  004712  EE20  F09D         	lfsr	2,_vscp_imsg+6
 15199  004716  62DF               	cpfseq	indf2,c
 15200  004718  D008               	goto	l1307
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 15204  00471A  C09E  F07E         	movff	_vscp_imsg+7,_vscp_nickname
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 15208  00471E  517E               	movf	_vscp_nickname& (0+255),w,b
 15209  004720  EC3E  F024         	call	_vscp_writeNicknamePermanent
 15210                           
 15211                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 15212  004724  0E40               	movlw	64
 15213  004726  EC33  F024         	call	_vscp_setSegmentCRC
 15214  00472A                     l1307:
 15215  00472A  0012               	return	
 15216  00472C                     __end_of_vscp_handleSetNickname:
 15217                           	opt stack 0
 15218                           tblptru	equ	0xFF8
 15219                           tblptrh	equ	0xFF7
 15220                           tblptrl	equ	0xFF6
 15221                           tablat	equ	0xFF5
 15222                           prodh	equ	0xFF4
 15223                           prodl	equ	0xFF3
 15224                           intcon	equ	0xFF2
 15225                           intcon2	equ	0xFF1
 15226                           postinc0	equ	0xFEE
 15227                           wreg	equ	0xFE8
 15228                           indf1	equ	0xFE7
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           plusw2	equ	0xFDB
 15235                           fsr2h	equ	0xFDA
 15236                           fsr2l	equ	0xFD9
 15237                           status	equ	0xFD8
 15238                           
 15239 ;; *************** function _vscp_handleHeartbeat *****************
 15240 ;; Defined at:
 15241 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 15242 ;; Parameters:    Size  Location     Type
 15243 ;;		None
 15244 ;; Auto vars:     Size  Location     Type
 15245 ;;		None
 15246 ;; Return value:  Size  Location     Type
 15247 ;;		None               void
 15248 ;; Registers used:
 15249 ;;		wreg, status,2, status,0, cstack
 15250 ;; Tracked objects:
 15251 ;;		On entry : F/0
 15252 ;;		On exit  : 0/0
 15253 ;;		Unchanged: 0/0
 15254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15255 ;;      Params:         0       0       0       0       0       0       0
 15256 ;;      Locals:         0       0       0       0       0       0       0
 15257 ;;      Temps:          0       0       0       0       0       0       0
 15258 ;;      Totals:         0       0       0       0       0       0       0
 15259 ;;Total ram usage:        0 bytes
 15260 ;; Hardware stack levels used:    1
 15261 ;; Hardware stack levels required when called:    4
 15262 ;; This function calls:
 15263 ;;		_vscp_writeNicknamePermanent
 15264 ;;		_vscp_getSegmentCRC
 15265 ;;		_vscp_setSegmentCRC
 15266 ;; This function is called by:
 15267 ;;		_vscp_handleProtocolEvent
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           	psect	text47
 15272  0044CC                     __ptext47:
 15273                           	opt stack 0
 15274  0044CC                     _vscp_handleHeartbeat:
 15275                           	opt stack 24
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 15279                           
 15280                           ;incstack = 0
 15281                           ;incstack = 0
 15282  0044CC  EC9B  F024         	call	_vscp_getSegmentCRC	;wreg free
 15283  0044D0  0900               	iorlw	0
 15284  0044D2  E116               	bnz	l14868
 15285                           
 15286                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 15287                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 15288  0044D4  0100               	movlb	0	; () banked
 15289  0044D6  5197               	movf	_vscp_imsg& (0+255),w,b
 15290  0044D8  0B0F               	andlw	15
 15291  0044DA  0A05               	xorlw	5
 15292  0044DC  E115               	bnz	l1303
 15293                           
 15294                           ; BSR set to: 0
 15295  0044DE  EC9B  F024         	call	_vscp_getSegmentCRC	;wreg free
 15296  0044E2  0100               	movlb	0	; () banked
 15297  0044E4  199D               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 15298  0044E6  E010               	bz	l1303
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15302  0044E8  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15303  0044EA  EC33  F024         	call	_vscp_setSegmentCRC
 15304                           
 15305                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 15306  0044EE  0100               	movlb	0	; () banked
 15307  0044F0  697E               	setf	_vscp_nickname& (0+255),b
 15308                           
 15309                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 15310  0044F2  0EFF               	movlw	255
 15311  0044F4  EC3E  F024         	call	_vscp_writeNicknamePermanent
 15312                           
 15313                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 15314  0044F8  0E01               	movlw	1
 15315  0044FA  0100               	movlb	0	; () banked
 15316  0044FC  6F7F               	movwf	_vscp_node_state& (0+255),b
 15317  0044FE  D004               	goto	l1303
 15318  004500                     l14868:
 15319                           
 15320                           ;vscp_firmware.c: 411: else {
 15321                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 15322  004500  0100               	movlb	0	; () banked
 15323  004502  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 15324  004504  EC33  F024         	call	_vscp_setSegmentCRC
 15325  004508                     l1303:
 15326  004508  0012               	return	
 15327  00450A                     __end_of_vscp_handleHeartbeat:
 15328                           	opt stack 0
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           intcon2	equ	0xFF1
 15337                           postinc0	equ	0xFEE
 15338                           wreg	equ	0xFE8
 15339                           indf1	equ	0xFE7
 15340                           fsr1h	equ	0xFE2
 15341                           fsr1l	equ	0xFE1
 15342                           indf2	equ	0xFDF
 15343                           postinc2	equ	0xFDE
 15344                           postdec2	equ	0xFDD
 15345                           plusw2	equ	0xFDB
 15346                           fsr2h	equ	0xFDA
 15347                           fsr2l	equ	0xFD9
 15348                           status	equ	0xFD8
 15349                           
 15350 ;; *************** function _vscp_getMatrixInfo *****************
 15351 ;; Defined at:
 15352 ;;		line 3519 in file "../main.c"
 15353 ;; Parameters:    Size  Location     Type
 15354 ;;  pData           1    wreg     PTR unsigned char 
 15355 ;;		 -> vscp_omsg(13), 
 15356 ;; Auto vars:     Size  Location     Type
 15357 ;;  pData           1    0[COMRAM] PTR unsigned char 
 15358 ;;		 -> vscp_omsg(13), 
 15359 ;;  i               1    7[COMRAM] unsigned char 
 15360 ;; Return value:  Size  Location     Type
 15361 ;;		None               void
 15362 ;; Registers used:
 15363 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15364 ;; Tracked objects:
 15365 ;;		On entry : F/0
 15366 ;;		On exit  : F/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15369 ;;      Params:         0       0       0       0       0       0       0
 15370 ;;      Locals:         1       0       0       0       0       0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0
 15372 ;;      Totals:         1       0       0       0       0       0       0
 15373 ;;Total ram usage:        1 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    2
 15376 ;; This function calls:
 15377 ;;		Nothing
 15378 ;; This function is called by:
 15379 ;;		_vscp_handleProtocolEvent
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           	psect	text48
 15384  004772                     __ptext48:
 15385                           	opt stack 0
 15386  004772                     _vscp_getMatrixInfo:
 15387                           	opt stack 26
 15388                           
 15389                           ; BSR set to: 0
 15390                           ;main.c: 3520: uint8_t i;
 15391                           ;main.c: 3522: vscp_omsg.data[ 0 ] = 7;
 15392                           
 15393                           ;incstack = 0
 15394                           ;incstack = 0
 15395  004772  0E07               	movlw	7
 15396  004774  6FAA               	movwf	(_vscp_omsg+5)& (0+255),b
 15397                           
 15398                           ;main.c: 3523: vscp_omsg.data[ 1 ] = 72;
 15399  004776  0E48               	movlw	72
 15400  004778  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
 15401                           
 15402                           ;main.c: 3526: for ( i = 2; i < 8; i++ ) {
 15403  00477A  0E02               	movlw	2
 15404  00477C  6E08               	movwf	vscp_getMatrixInfo@i,c
 15405  00477E                     l14774:
 15406                           
 15407                           ; BSR set to: 0
 15408                           ;main.c: 3527: vscp_omsg.data[ i ] = 0;
 15409  00477E  5008               	movf	vscp_getMatrixInfo@i,w,c
 15410  004780  0FAA               	addlw	low (_vscp_omsg+5)
 15411  004782  6ED9               	movwf	fsr2l,c
 15412  004784  6ADA               	clrf	fsr2h,c
 15413  004786  6ADF               	clrf	indf2,c
 15414                           
 15415                           ; BSR set to: 0
 15416  004788  2A08               	incf	vscp_getMatrixInfo@i,f,c
 15417                           
 15418                           ; BSR set to: 0
 15419  00478A  0E07               	movlw	7
 15420  00478C  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 15421  00478E  D7F7               	goto	l14774
 15422                           
 15423                           ; BSR set to: 0
 15424  004790  0C07               	retlw	7
 15425  004792                     __end_of_vscp_getMatrixInfo:
 15426                           	opt stack 0
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           intcon2	equ	0xFF1
 15435                           postinc0	equ	0xFEE
 15436                           wreg	equ	0xFE8
 15437                           indf1	equ	0xFE7
 15438                           fsr1h	equ	0xFE2
 15439                           fsr1l	equ	0xFE1
 15440                           indf2	equ	0xFDF
 15441                           postinc2	equ	0xFDE
 15442                           postdec2	equ	0xFDD
 15443                           plusw2	equ	0xFDB
 15444                           fsr2h	equ	0xFDA
 15445                           fsr2l	equ	0xFD9
 15446                           status	equ	0xFD8
 15447                           
 15448 ;; *************** function _vscp_goBootloaderMode *****************
 15449 ;; Defined at:
 15450 ;;		line 3503 in file "../main.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;  algorithm       1    wreg     unsigned char 
 15453 ;; Auto vars:     Size  Location     Type
 15454 ;;  algorithm       1   11[COMRAM] unsigned char 
 15455 ;; Return value:  Size  Location     Type
 15456 ;;		None               void
 15457 ;; Registers used:
 15458 ;;		wreg, status,2, status,0, cstack
 15459 ;; Tracked objects:
 15460 ;;		On entry : F/0
 15461 ;;		On exit  : 0/0
 15462 ;;		Unchanged: 0/0
 15463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15464 ;;      Params:         0       0       0       0       0       0       0
 15465 ;;      Locals:         1       0       0       0       0       0       0
 15466 ;;      Temps:          0       0       0       0       0       0       0
 15467 ;;      Totals:         1       0       0       0       0       0       0
 15468 ;;Total ram usage:        1 bytes
 15469 ;; Hardware stack levels used:    1
 15470 ;; Hardware stack levels required when called:    3
 15471 ;; This function calls:
 15472 ;;		_Busy_eep
 15473 ;;		_Write_b_eep
 15474 ;; This function is called by:
 15475 ;;		_vscp_handleProtocolEvent
 15476 ;; This function uses a non-reentrant model
 15477 ;;
 15478                           
 15479                           	psect	text49
 15480  0047EA                     __ptext49:
 15481                           	opt stack 0
 15482  0047EA                     _vscp_goBootloaderMode:
 15483                           	opt stack 25
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;incstack = 0
 15487                           ;incstack = 0
 15488                           ;vscp_goBootloaderMode@algorithm stored from wreg
 15489  0047EA  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 15490                           
 15491                           ; BSR set to: 0
 15492                           ;main.c: 3504: if ( 0x01 != algorithm ) return;
 15493  0047EE  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 15494  0047F0  E109               	bnz	l1093
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;main.c: 3508: (Busy_eep(), Write_b_eep(0x00,0xff));
 15498  0047F2  ECA4  F024         	call	_Busy_eep	;wreg free
 15499  0047F6  6A09               	clrf	?_Write_b_eep+1,c
 15500  0047F8  6A08               	clrf	?_Write_b_eep,c
 15501  0047FA  0EFF               	movlw	255
 15502  0047FC  680A               	setf	?_Write_b_eep+2,c
 15503  0047FE  EC85  F022         	call	_Write_b_eep	;wreg free
 15504  004802  00FF               	reset		;# 
 15505  004804                     l1093:
 15506  004804  0012               	return	
 15507  004806                     __end_of_vscp_goBootloaderMode:
 15508                           	opt stack 0
 15509                           tblptru	equ	0xFF8
 15510                           tblptrh	equ	0xFF7
 15511                           tblptrl	equ	0xFF6
 15512                           tablat	equ	0xFF5
 15513                           prodh	equ	0xFF4
 15514                           prodl	equ	0xFF3
 15515                           intcon	equ	0xFF2
 15516                           intcon2	equ	0xFF1
 15517                           postinc0	equ	0xFEE
 15518                           wreg	equ	0xFE8
 15519                           indf1	equ	0xFE7
 15520                           fsr1h	equ	0xFE2
 15521                           fsr1l	equ	0xFE1
 15522                           indf2	equ	0xFDF
 15523                           postinc2	equ	0xFDE
 15524                           postdec2	equ	0xFDD
 15525                           plusw2	equ	0xFDB
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function _vscp_handleProbeState *****************
 15531 ;; Defined at:
 15532 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;		None
 15535 ;; Auto vars:     Size  Location     Type
 15536 ;;		None
 15537 ;; Return value:  Size  Location     Type
 15538 ;;		None               void
 15539 ;; Registers used:
 15540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15541 ;; Tracked objects:
 15542 ;;		On entry : 0/0
 15543 ;;		On exit  : F/0
 15544 ;;		Unchanged: 0/0
 15545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15546 ;;      Params:         0       0       0       0       0       0       0
 15547 ;;      Locals:         0       0       0       0       0       0       0
 15548 ;;      Temps:          0       0       0       0       0       0       0
 15549 ;;      Totals:         0       0       0       0       0       0       0
 15550 ;;Total ram usage:        0 bytes
 15551 ;; Hardware stack levels used:    1
 15552 ;; Hardware stack levels required when called:    8
 15553 ;; This function calls:
 15554 ;;		_vscp_goActiveState
 15555 ;;		_vscp_writeNicknamePermanent
 15556 ;;		_vscp_sendEvent
 15557 ;;		_vscp_setSegmentCRC
 15558 ;; This function is called by:
 15559 ;;		_main
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           	psect	text50
 15564  00406E                     __ptext50:
 15565                           	opt stack 0
 15566  00406E                     _vscp_handleProbeState:
 15567                           	opt stack 21
 15568                           
 15569                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15570                           
 15571                           ;incstack = 0
 15572                           ;incstack = 0
 15573  00406E  D053               	goto	l12842
 15574  004070                     l12772:
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15578  004070  2857               	incf	_vscp_probe_address,w,c
 15579  004072  E010               	bz	l12788
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15583  004074  0E81               	movlw	129
 15584  004076  6FA5               	movwf	_vscp_omsg& (0+255),b
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15588  004078  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15589                           
 15590                           ; BSR set to: 0
 15591                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15592  00407A  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15593  00407C  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15594                           
 15595                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15596  00407E  0E02               	movlw	2
 15597  004080  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15601  004082  C057  F0AA         	movff	_vscp_probe_address,_vscp_omsg+5
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15605  004086  EC71  F023         	call	_vscp_sendEvent	;wreg free
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15609  00408A  0E01               	movlw	1
 15610  00408C  6F80               	movwf	_vscp_node_substate& (0+255),b
 15611  00408E                     l12786:
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15615  00408E  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15616  004090  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15617                           
 15618                           ;vscp_firmware.c: 221: }
 15619  004092  D048               	goto	l1270
 15620  004094                     l12788:
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;vscp_firmware.c: 222: else {
 15624                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15625  004094  0E04               	movlw	4
 15626  004096  6F7F               	movwf	_vscp_node_state& (0+255),b
 15627                           
 15628                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15629  004098  0E81               	movlw	129
 15630  00409A  6FA5               	movwf	_vscp_omsg& (0+255),b
 15631                           
 15632                           ; BSR set to: 0
 15633                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15634  00409C  69AA               	setf	(_vscp_omsg+5)& (0+255),b
 15635                           
 15636                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15637  00409E  0E07               	movlw	7
 15638  0040A0  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15642  0040A2  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15643  0040A4  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15644                           
 15645                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15646  0040A6  0E03               	movlw	3
 15647  0040A8  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15651  0040AA  EC71  F023         	call	_vscp_sendEvent	;wreg free
 15652  0040AE  D03A               	goto	l1270
 15653  0040B0                     l1271:
 15654                           
 15655                           ; BSR set to: 0
 15656                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15657  0040B0  AF97               	btfss	_vscp_imsg& (0+255),7,b
 15658  0040B2  D00F               	goto	l12812
 15659                           
 15660                           ; BSR set to: 0
 15661                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15662                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15663  0040B4  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
 15664  0040B6  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15665  0040B8  E135               	bnz	l1270
 15666                           
 15667                           ; BSR set to: 0
 15668  0040BA  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
 15669  0040BC  0A03               	xorlw	3
 15670  0040BE  E132               	bnz	l1270
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15674  0040C0  6657               	tstfsz	_vscp_probe_address,c
 15675  0040C2  D003               	goto	l12806
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15679  0040C4  0E02               	movlw	2
 15680  0040C6  6F7F               	movwf	_vscp_node_state& (0+255),b
 15681  0040C8  D7E2               	goto	l12786
 15682  0040CA                     l12806:
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;vscp_firmware.c: 257: else {
 15686                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15687  0040CA  2A57               	incf	_vscp_probe_address,f,c
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15691  0040CC  6B80               	clrf	_vscp_node_substate& (0+255),b
 15692  0040CE                     l12810:
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15696  0040CE  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15697  0040D0  D029               	goto	l1270
 15698  0040D2                     l12812:
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;vscp_firmware.c: 267: else {
 15702                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15703  0040D2  0EE9               	movlw	233
 15704  0040D4  5D6E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15705  0040D6  0E03               	movlw	3
 15706  0040D8  596F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15707  0040DA  E324               	bnc	l1270
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15711  0040DC  2B81               	incf	_vscp_probe_cnt& (0+255),f,b
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15715  0040DE  0E02               	movlw	2
 15716  0040E0  6581               	cpfsgt	_vscp_probe_cnt& (0+255),b
 15717  0040E2  D017               	goto	l1278
 15718                           
 15719                           ; BSR set to: 0
 15720                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15721  0040E4  6657               	tstfsz	_vscp_probe_address,c
 15722  0040E6  D005               	goto	l1279
 15723                           
 15724                           ; BSR set to: 0
 15725                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15726  0040E8  2A57               	incf	_vscp_probe_address,f,c
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15730  0040EA  6B80               	clrf	_vscp_node_substate& (0+255),b
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15734  0040EC  6B6E               	clrf	_vscp_timer& (0+255),b	;volatile
 15735  0040EE  6B6F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15736  0040F0  D7EE               	goto	l12810
 15737  0040F2                     l1279:
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;vscp_firmware.c: 285: else {
 15741                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15742  0040F2  C057  F07E         	movff	_vscp_probe_address,_vscp_nickname
 15743                           
 15744                           ; BSR set to: 0
 15745                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15746  0040F6  0E03               	movlw	3
 15747  0040F8  6F7F               	movwf	_vscp_node_state& (0+255),b
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15751  0040FA  6B80               	clrf	_vscp_node_substate& (0+255),b
 15752                           
 15753                           ; BSR set to: 0
 15754                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15755  0040FC  517E               	movf	_vscp_nickname& (0+255),w,b
 15756  0040FE  EC3E  F024         	call	_vscp_writeNicknamePermanent
 15757                           
 15758                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15759  004102  0E40               	movlw	64
 15760  004104  EC33  F024         	call	_vscp_setSegmentCRC
 15761                           
 15762                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15763  004108  0100               	movlb	0	; () banked
 15764  00410A  6B81               	clrf	_vscp_probe_cnt& (0+255),b
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15768  00410C  ECC9  F023         	call	_vscp_goActiveState	;wreg free
 15769  004110  D009               	goto	l1270
 15770  004112                     l1278:
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;vscp_firmware.c: 300: else {
 15774                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15775  004112  6B80               	clrf	_vscp_node_substate& (0+255),b
 15776  004114  D007               	goto	l1270
 15777  004116                     l12842:
 15778  004116  0100               	movlb	0	; () banked
 15779  004118  5180               	movf	_vscp_node_substate& (0+255),w,b
 15780                           
 15781                           ; Switch size 1, requested type "space"
 15782                           ; Number of cases is 3, Range of values is 0 to 2
 15783                           ; switch strategies available:
 15784                           ; Name         Instructions Cycles
 15785                           ; simple_byte           10     6 (average)
 15786                           ;	Chosen strategy is simple_byte
 15787  00411A  E0AA               	bz	l12772
 15788  00411C  0A01               	xorlw	1	; case 1
 15789  00411E  E0C8               	bz	l1271
 15790  004120  0A03               	xorlw	3	; case 2
 15791  004122  E1F7               	bnz	l1278
 15792  004124                     l1270:
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15796  004124  6B97               	clrf	_vscp_imsg& (0+255),b
 15797                           
 15798                           ; BSR set to: 0
 15799  004126  0012               	return	
 15800  004128                     __end_of_vscp_handleProbeState:
 15801                           	opt stack 0
 15802                           tblptru	equ	0xFF8
 15803                           tblptrh	equ	0xFF7
 15804                           tblptrl	equ	0xFF6
 15805                           tablat	equ	0xFF5
 15806                           prodh	equ	0xFF4
 15807                           prodl	equ	0xFF3
 15808                           intcon	equ	0xFF2
 15809                           intcon2	equ	0xFF1
 15810                           postinc0	equ	0xFEE
 15811                           wreg	equ	0xFE8
 15812                           indf1	equ	0xFE7
 15813                           fsr1h	equ	0xFE2
 15814                           fsr1l	equ	0xFE1
 15815                           indf2	equ	0xFDF
 15816                           postinc2	equ	0xFDE
 15817                           postdec2	equ	0xFDD
 15818                           plusw2	equ	0xFDB
 15819                           fsr2h	equ	0xFDA
 15820                           fsr2l	equ	0xFD9
 15821                           status	equ	0xFD8
 15822                           
 15823 ;; *************** function _vscp_goActiveState *****************
 15824 ;; Defined at:
 15825 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15826 ;; Parameters:    Size  Location     Type
 15827 ;;		None
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;		None
 15830 ;; Return value:  Size  Location     Type
 15831 ;;		None               void
 15832 ;; Registers used:
 15833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15834 ;; Tracked objects:
 15835 ;;		On entry : 0/0
 15836 ;;		On exit  : F/0
 15837 ;;		Unchanged: 0/0
 15838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15839 ;;      Params:         0       0       0       0       0       0       0
 15840 ;;      Locals:         0       0       0       0       0       0       0
 15841 ;;      Temps:          0       0       0       0       0       0       0
 15842 ;;      Totals:         0       0       0       0       0       0       0
 15843 ;;Total ram usage:        0 bytes
 15844 ;; Hardware stack levels used:    1
 15845 ;; Hardware stack levels required when called:    7
 15846 ;; This function calls:
 15847 ;;		_vscp_sendEvent
 15848 ;; This function is called by:
 15849 ;;		_main
 15850 ;;		_vscp_handleProbeState
 15851 ;; This function uses a non-reentrant model
 15852 ;;
 15853                           
 15854                           	psect	text51
 15855  004792                     __ptext51:
 15856                           	opt stack 0
 15857  004792                     _vscp_goActiveState:
 15858                           	opt stack 21
 15859                           
 15860                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;incstack = 0
 15864                           ;incstack = 0
 15865  004792  0E81               	movlw	129
 15866  004794  0100               	movlb	0	; () banked
 15867  004796  6FA5               	movwf	_vscp_omsg& (0+255),b
 15868                           
 15869                           ; BSR set to: 0
 15870                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15871  004798  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15875  00479A  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 15876  00479C  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 15877                           
 15878                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15879  00479E  0E02               	movlw	2
 15880  0047A0  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15884  0047A2  C07E  F0AA         	movff	_vscp_nickname,_vscp_omsg+5
 15885                           
 15886                           ; BSR set to: 0
 15887                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15888  0047A6  EC71  F023         	call	_vscp_sendEvent	;wreg free
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15892  0047AA  0E01               	movlw	1
 15893  0047AC  6E56               	movwf	_vscp_initledfunc,c
 15894                           
 15895                           ; BSR set to: 0
 15896  0047AE  0C01               	retlw	1
 15897  0047B0                     __end_of_vscp_goActiveState:
 15898                           	opt stack 0
 15899                           tblptru	equ	0xFF8
 15900                           tblptrh	equ	0xFF7
 15901                           tblptrl	equ	0xFF6
 15902                           tablat	equ	0xFF5
 15903                           prodh	equ	0xFF4
 15904                           prodl	equ	0xFF3
 15905                           intcon	equ	0xFF2
 15906                           intcon2	equ	0xFF1
 15907                           postinc0	equ	0xFEE
 15908                           wreg	equ	0xFE8
 15909                           indf1	equ	0xFE7
 15910                           fsr1h	equ	0xFE2
 15911                           fsr1l	equ	0xFE1
 15912                           indf2	equ	0xFDF
 15913                           postinc2	equ	0xFDE
 15914                           postdec2	equ	0xFDD
 15915                           plusw2	equ	0xFDB
 15916                           fsr2h	equ	0xFDA
 15917                           fsr2l	equ	0xFD9
 15918                           status	equ	0xFD8
 15919                           
 15920 ;; *************** function _vscp_sendEvent *****************
 15921 ;; Defined at:
 15922 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15923 ;; Parameters:    Size  Location     Type
 15924 ;;		None
 15925 ;; Auto vars:     Size  Location     Type
 15926 ;;  rv              1    0        unsigned char 
 15927 ;; Return value:  Size  Location     Type
 15928 ;;                  1    wreg      unsigned char 
 15929 ;; Registers used:
 15930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15931 ;; Tracked objects:
 15932 ;;		On entry : F/0
 15933 ;;		On exit  : F/0
 15934 ;;		Unchanged: 0/0
 15935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15936 ;;      Params:         0       0       0       0       0       0       0
 15937 ;;      Locals:         1       0       0       0       0       0       0
 15938 ;;      Temps:          0       0       0       0       0       0       0
 15939 ;;      Totals:         1       0       0       0       0       0       0
 15940 ;;Total ram usage:        1 bytes
 15941 ;; Hardware stack levels used:    1
 15942 ;; Hardware stack levels required when called:    6
 15943 ;; This function calls:
 15944 ;;		_sendVSCPFrame
 15945 ;; This function is called by:
 15946 ;;		_vscp_handleProbeState
 15947 ;;		_vscp_goActiveState
 15948 ;;		_vscp_sendHeartBeat
 15949 ;;		_vscp_newNodeOnline
 15950 ;;		_vscp_handleProtocolEvent
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           	psect	text52
 15955  0046E2                     __ptext52:
 15956                           	opt stack 0
 15957  0046E2                     _vscp_sendEvent:
 15958                           	opt stack 21
 15959                           
 15960                           ; BSR set to: 0
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;incstack = 0
 15964                           ;incstack = 0
 15965  0046E2  C0A7  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15966  0046E6  C0A8  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15967  0046EA  C0A9  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15968  0046EE  C07E  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15969  0046F2  C0A6  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15970  0046F6  51A5               	movf	_vscp_omsg& (0+255),w,b
 15971  0046F8  0B0F               	andlw	15
 15972  0046FA  6E44               	movwf	?_sendVSCPFrame+5,c
 15973  0046FC  0E00               	movlw	high (_vscp_omsg+5)
 15974  0046FE  6E46               	movwf	?_sendVSCPFrame+7,c
 15975  004700  0EAA               	movlw	low (_vscp_omsg+5)
 15976  004702  6E45               	movwf	?_sendVSCPFrame+6,c
 15977  004704  EF94  F020         	goto	_sendVSCPFrame	;wreg free
 15978  004708                     __end_of_vscp_sendEvent:
 15979                           	opt stack 0
 15980                           tblptru	equ	0xFF8
 15981                           tblptrh	equ	0xFF7
 15982                           tblptrl	equ	0xFF6
 15983                           tablat	equ	0xFF5
 15984                           prodh	equ	0xFF4
 15985                           prodl	equ	0xFF3
 15986                           intcon	equ	0xFF2
 15987                           intcon2	equ	0xFF1
 15988                           postinc0	equ	0xFEE
 15989                           wreg	equ	0xFE8
 15990                           indf1	equ	0xFE7
 15991                           fsr1h	equ	0xFE2
 15992                           fsr1l	equ	0xFE1
 15993                           indf2	equ	0xFDF
 15994                           postinc2	equ	0xFDE
 15995                           postdec2	equ	0xFDD
 15996                           plusw2	equ	0xFDB
 15997                           fsr2h	equ	0xFDA
 15998                           fsr2l	equ	0xFD9
 15999                           status	equ	0xFD8
 16000                           
 16001 ;; *************** function _sendVSCPFrame *****************
 16002 ;; Defined at:
 16003 ;;		line 3578 in file "../main.c"
 16004 ;; Parameters:    Size  Location     Type
 16005 ;;  vscpclass       2   62[COMRAM] unsigned short 
 16006 ;;  vscptype        1   64[COMRAM] unsigned char 
 16007 ;;  nodeid          1   65[COMRAM] unsigned char 
 16008 ;;  priority        1   66[COMRAM] unsigned char 
 16009 ;;  size            1   67[COMRAM] unsigned char 
 16010 ;;  pData           2   68[COMRAM] PTR unsigned char 
 16011 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16012 ;; Auto vars:     Size  Location     Type
 16013 ;;  id              4   70[COMRAM] unsigned long 
 16014 ;; Return value:  Size  Location     Type
 16015 ;;                  1    wreg      unsigned char 
 16016 ;; Registers used:
 16017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16018 ;; Tracked objects:
 16019 ;;		On entry : E/1
 16020 ;;		On exit  : F/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16023 ;;      Params:         8       0       0       0       0       0       0
 16024 ;;      Locals:         4       0       0       0       0       0       0
 16025 ;;      Temps:          0      20       0       0       0       0       0
 16026 ;;      Totals:        12      20       0       0       0       0       0
 16027 ;;Total ram usage:       32 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    5
 16030 ;; This function calls:
 16031 ;;		_sendCANFrame
 16032 ;; This function is called by:
 16033 ;;		_doApplicationOneSecondWork
 16034 ;;		_SendInformationEvent
 16035 ;;		_vscp_sendEvent
 16036 ;; This function uses a non-reentrant model
 16037 ;;
 16038                           
 16039                           	psect	text53
 16040  004128                     __ptext53:
 16041                           	opt stack 0
 16042  004128                     _sendVSCPFrame:
 16043                           	opt stack 23
 16044                           
 16045                           ;main.c: 3579: uint32_t id = ( (uint32_t)priority << 26 ) |
 16046                           ;main.c: 3580: ( (uint32_t)vscpclass << 16 ) |
 16047                           ;main.c: 3581: ( (uint32_t)vscptype << 8 ) |
 16048                           ;main.c: 3582: nodeid;
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;incstack = 0
 16052                           ;incstack = 0
 16053  004128  C041  F0BC         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 16054  00412C  0100               	movlb	0	; () banked
 16055  00412E  6BBD               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 16056  004130  6BBE               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 16057  004132  6BBF               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 16058  004134  C0BE  F0BF         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 16059  004138  C0BD  F0BE         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 16060  00413C  C0BC  F0BD         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 16061  004140  6BBC               	clrf	??_sendVSCPFrame& (0+255),b
 16062  004142  503F               	movf	sendVSCPFrame@vscpclass,w,c
 16063  004144  6FC0               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 16064  004146  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 16065  004148  6FC1               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 16066  00414A  6BC2               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 16067  00414C  6BC3               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 16068  00414E  C0C1  F0C3         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 16069  004152  C0C0  F0C2         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 16070  004156  6BC1               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 16071  004158  6BC0               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 16072  00415A  C043  F0C4         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 16073  00415E  6BC5               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 16074  004160  6BC6               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 16075  004162  6BC7               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 16076  004164  0E1A               	movlw	26
 16077  004166                     u17785:
 16078  004166  90D8               	bcf	status,0,c
 16079  004168  37C4               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 16080  00416A  37C5               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 16081  00416C  37C6               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 16082  00416E  37C7               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 16083  004170  2EE8               	decfsz	wreg,f,c
 16084  004172  D7F9               	goto	u17785
 16085  004174  51C0               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 16086  004176  11C4               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 16087  004178  6FC8               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 16088  00417A  51C1               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 16089  00417C  11C5               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 16090  00417E  6FC9               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 16091  004180  51C2               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 16092  004182  11C6               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 16093  004184  6FCA               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 16094  004186  51C3               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 16095  004188  11C7               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 16096  00418A  6FCB               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 16097  00418C  51BC               	movf	??_sendVSCPFrame& (0+255),w,b
 16098  00418E  11C8               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 16099  004190  6FCC               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 16100  004192  51BD               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 16101  004194  11C9               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 16102  004196  6FCD               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 16103  004198  51BE               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 16104  00419A  11CA               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 16105  00419C  6FCE               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 16106  00419E  51BF               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 16107  0041A0  11CB               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 16108  0041A2  6FCF               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 16109  0041A4  5042               	movf	sendVSCPFrame@nodeid,w,c
 16110  0041A6  11CC               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 16111  0041A8  6E47               	movwf	sendVSCPFrame@id,c
 16112  0041AA  51CD               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 16113  0041AC  6E48               	movwf	sendVSCPFrame@id+1,c
 16114  0041AE  51CE               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 16115  0041B0  6E49               	movwf	sendVSCPFrame@id+2,c
 16116  0041B2  51CF               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 16117  0041B4  6E4A               	movwf	sendVSCPFrame@id+3,c
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;main.c: 3584: if ( !sendCANFrame( id, size, pData ) ) {
 16121  0041B6  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 16122  0041BA  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 16123  0041BE  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 16124  0041C2  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 16125  0041C6  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 16126  0041CA  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 16127  0041CE  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 16128  0041D2  EC45  F022         	call	_sendCANFrame	;wreg free
 16129  0041D6  0900               	iorlw	0
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;main.c: 3585: return 0;
 16133  0041D8  0E00               	movlw	0
 16134  0041DA  A4D8               	btfss	status,2,c
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;main.c: 3586: }
 16138                           ;main.c: 3588: return 1;
 16139  0041DC  0E01               	movlw	1
 16140                           
 16141                           ; BSR set to: 0
 16142  0041DE  0012               	return	
 16143  0041E0                     __end_of_sendVSCPFrame:
 16144                           	opt stack 0
 16145                           tblptru	equ	0xFF8
 16146                           tblptrh	equ	0xFF7
 16147                           tblptrl	equ	0xFF6
 16148                           tablat	equ	0xFF5
 16149                           prodh	equ	0xFF4
 16150                           prodl	equ	0xFF3
 16151                           intcon	equ	0xFF2
 16152                           intcon2	equ	0xFF1
 16153                           postinc0	equ	0xFEE
 16154                           wreg	equ	0xFE8
 16155                           indf1	equ	0xFE7
 16156                           fsr1h	equ	0xFE2
 16157                           fsr1l	equ	0xFE1
 16158                           indf2	equ	0xFDF
 16159                           postinc2	equ	0xFDE
 16160                           postdec2	equ	0xFDD
 16161                           plusw2	equ	0xFDB
 16162                           fsr2h	equ	0xFDA
 16163                           fsr2l	equ	0xFD9
 16164                           status	equ	0xFD8
 16165                           
 16166 ;; *************** function _sendCANFrame *****************
 16167 ;; Defined at:
 16168 ;;		line 3623 in file "../main.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;  id              4   54[COMRAM] unsigned long 
 16171 ;;  dlc             1   58[COMRAM] unsigned char 
 16172 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 16173 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;  rv              1   61[COMRAM] unsigned char 
 16176 ;; Return value:  Size  Location     Type
 16177 ;;                  1    wreg      unsigned char 
 16178 ;; Registers used:
 16179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : F/0
 16182 ;;		On exit  : F/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16185 ;;      Params:         7       0       0       0       0       0       0
 16186 ;;      Locals:         1       0       0       0       0       0       0
 16187 ;;      Temps:          0       0       0       0       0       0       0
 16188 ;;      Totals:         8       0       0       0       0       0       0
 16189 ;;Total ram usage:        8 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    4
 16192 ;; This function calls:
 16193 ;;		_ECANSendMessage
 16194 ;; This function is called by:
 16195 ;;		_sendVSCPFrame
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           	psect	text54
 16200  00448A                     __ptext54:
 16201                           	opt stack 0
 16202  00448A                     _sendCANFrame:
 16203                           	opt stack 23
 16204                           
 16205                           ; BSR set to: 0
 16206                           ;main.c: 3624: uint8_t rv = 0;
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;incstack = 0
 16210                           ;incstack = 0
 16211  00448A  6A3E               	clrf	sendCANFrame@rv,c
 16212                           
 16213                           ;main.c: 3625: sendTimer = 0;
 16214  00448C  6B79               	clrf	_sendTimer& (0+255),b
 16215                           
 16216                           ;main.c: 3627: while ( sendTimer < 1 ) {
 16217  00448E  D017               	goto	l14798
 16218  004490                     l14794:
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;main.c: 3628: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16222  004490  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 16223  004494  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16224  004498  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16225  00449C  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16226  0044A0  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16227  0044A4  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16228  0044A8  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16229  0044AC  0E20               	movlw	32
 16230  0044AE  6E19               	movwf	?_ECANSendMessage+7,c
 16231  0044B0  ECBA  F01B         	call	_ECANSendMessage	;wreg free
 16232  0044B4  0900               	iorlw	0
 16233  0044B6  E003               	bz	l14798
 16234                           
 16235                           ;main.c: 3629: rv = 1;
 16236  0044B8  0E01               	movlw	1
 16237  0044BA  6E3E               	movwf	sendCANFrame@rv,c
 16238                           
 16239                           ;main.c: 3630: break;
 16240  0044BC  D003               	goto	l1124
 16241  0044BE                     l14798:
 16242  0044BE  0100               	movlb	0	; () banked
 16243  0044C0  5179               	movf	_sendTimer& (0+255),w,b
 16244  0044C2  E0E6               	bz	l14794
 16245  0044C4                     l1124:
 16246                           
 16247                           ;main.c: 3631: }
 16248                           ;main.c: 3632: }
 16249                           ;main.c: 3634: vscp_omsg.flags = 0;
 16250  0044C4  0100               	movlb	0	; () banked
 16251  0044C6  6BA5               	clrf	_vscp_omsg& (0+255),b
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;main.c: 3636: return rv;
 16255  0044C8  503E               	movf	sendCANFrame@rv,w,c
 16256                           
 16257                           ; BSR set to: 0
 16258  0044CA  0012               	return	
 16259  0044CC                     __end_of_sendCANFrame:
 16260                           	opt stack 0
 16261                           tblptru	equ	0xFF8
 16262                           tblptrh	equ	0xFF7
 16263                           tblptrl	equ	0xFF6
 16264                           tablat	equ	0xFF5
 16265                           prodh	equ	0xFF4
 16266                           prodl	equ	0xFF3
 16267                           intcon	equ	0xFF2
 16268                           intcon2	equ	0xFF1
 16269                           postinc0	equ	0xFEE
 16270                           wreg	equ	0xFE8
 16271                           indf1	equ	0xFE7
 16272                           fsr1h	equ	0xFE2
 16273                           fsr1l	equ	0xFE1
 16274                           indf2	equ	0xFDF
 16275                           postinc2	equ	0xFDE
 16276                           postdec2	equ	0xFDD
 16277                           plusw2	equ	0xFDB
 16278                           fsr2h	equ	0xFDA
 16279                           fsr2l	equ	0xFD9
 16280                           status	equ	0xFD8
 16281                           
 16282 ;; *************** function _ECANSendMessage *****************
 16283 ;; Defined at:
 16284 ;;		line 617 in file "../ECAN.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;  id              4   17[COMRAM] unsigned long 
 16287 ;;  data            2   21[COMRAM] PTR unsigned char 
 16288 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), doApplicationOneSecondWork@data(3), 
 16289 ;;  dataLen         1   23[COMRAM] unsigned char 
 16290 ;;  msgFlags        1   24[COMRAM] enum E16315
 16291 ;; Auto vars:     Size  Location     Type
 16292 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 16293 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16294 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16295 ;;		 -> B0CON(1), 
 16296 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 16297 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16298 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16299 ;;		 -> B0CON(1), 
 16300 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 16301 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16302 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16303 ;;		 -> B0CON(1), 
 16304 ;;  i               1   51[COMRAM] unsigned char 
 16305 ;;  temp            1   50[COMRAM] unsigned char 
 16306 ;;  tempBSEL0       1   47[COMRAM] struct .
 16307 ;;  j               1   46[COMRAM] unsigned char 
 16308 ;;  buffers         1   45[COMRAM] unsigned char 
 16309 ;;  mode            1   44[COMRAM] unsigned char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      enum E15660
 16312 ;; Registers used:
 16313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : F/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16319 ;;      Params:         8       0       0       0       0       0       0
 16320 ;;      Locals:        28       0       0       0       0       0       0
 16321 ;;      Temps:          1       0       0       0       0       0       0
 16322 ;;      Totals:        37       0       0       0       0       0       0
 16323 ;;Total ram usage:       37 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    3
 16326 ;; This function calls:
 16327 ;;		__CANIDToRegs
 16328 ;; This function is called by:
 16329 ;;		_sendCANFrame
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333                           	psect	text55
 16334  003774                     __ptext55:
 16335                           	opt stack 0
 16336  003774                     _ECANSendMessage:
 16337                           	opt stack 23
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;ECAN.c: 619: BYTE mode;
 16341                           ;ECAN.c: 620: BYTE buffers;
 16342                           ;ECAN.c: 628: BYTE i,j;
 16343                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16344                           ;ECAN.c: 630: BYTE* pb[9];
 16345                           ;ECAN.c: 631: BYTE temp;
 16346                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16347                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;incstack = 0
 16351                           ;incstack = 0
 16352  003774  0E0F               	movlw	15	;volatile
 16353  003776  6E1C               	movwf	ECANSendMessage@pb+1,c
 16354  003778  0E40               	movlw	64	;volatile
 16355  00377A  6E1B               	movwf	ECANSendMessage@pb,c
 16356                           
 16357                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16358  00377C  0E0F               	movlw	15	;volatile
 16359  00377E  6E1E               	movwf	ECANSendMessage@pb+3,c
 16360  003780  0E30               	movlw	48	;volatile
 16361  003782  6E1D               	movwf	ECANSendMessage@pb+2,c
 16362                           
 16363                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16364  003784  0E0F               	movlw	15	;volatile
 16365  003786  6E20               	movwf	ECANSendMessage@pb+5,c
 16366  003788  0E20               	movlw	32	;volatile
 16367  00378A  6E1F               	movwf	ECANSendMessage@pb+4,c
 16368                           
 16369                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16370  00378C  0E0E               	movlw	14	;volatile
 16371  00378E  6E22               	movwf	ECANSendMessage@pb+7,c
 16372  003790  0E20               	movlw	32	;volatile
 16373  003792  6E21               	movwf	ECANSendMessage@pb+6,c
 16374                           
 16375                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16376  003794  0E0E               	movlw	14	;volatile
 16377  003796  6E24               	movwf	ECANSendMessage@pb+9,c
 16378  003798  0E30               	movlw	48	;volatile
 16379  00379A  6E23               	movwf	ECANSendMessage@pb+8,c
 16380                           
 16381                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16382  00379C  0E0E               	movlw	14	;volatile
 16383  00379E  6E26               	movwf	ECANSendMessage@pb+11,c
 16384  0037A0  0E40               	movlw	64	;volatile
 16385  0037A2  6E25               	movwf	ECANSendMessage@pb+10,c
 16386                           
 16387                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16388  0037A4  0E0E               	movlw	14	;volatile
 16389  0037A6  6E28               	movwf	ECANSendMessage@pb+13,c
 16390  0037A8  0E50               	movlw	80	;volatile
 16391  0037AA  6E27               	movwf	ECANSendMessage@pb+12,c
 16392                           
 16393                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16394  0037AC  0E0E               	movlw	14	;volatile
 16395  0037AE  6E2A               	movwf	ECANSendMessage@pb+15,c
 16396  0037B0  0E60               	movlw	96	;volatile
 16397  0037B2  6E29               	movwf	ECANSendMessage@pb+14,c
 16398                           
 16399                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16400  0037B4  0E0E               	movlw	14	;volatile
 16401  0037B6  6E2C               	movwf	ECANSendMessage@pb+17,c
 16402  0037B8  0E70               	movlw	112	;volatile
 16403  0037BA  6E2B               	movwf	ECANSendMessage@pb+16,c
 16404                           
 16405                           ; BSR set to: 14
 16406                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16407  0037BC  5077               	movf	3959,w,c	;volatile
 16408  0037BE  0BC0               	andlw	192
 16409  0037C0  6E2D               	movwf	ECANSendMessage@mode,c
 16410                           
 16411                           ; BSR set to: 14
 16412                           ;ECAN.c: 660: if ( mode == 0x00 )
 16413  0037C2  662D               	tstfsz	ECANSendMessage@mode,c
 16414  0037C4  D002               	goto	l12036
 16415                           
 16416                           ; BSR set to: 14
 16417                           ;ECAN.c: 661: buffers = 2;
 16418  0037C6  0E02               	movlw	2
 16419  0037C8  D001               	goto	L49
 16420  0037CA                     l12036:
 16421                           
 16422                           ; BSR set to: 14
 16423                           ;ECAN.c: 662: else
 16424                           ;ECAN.c: 663: buffers = 8;
 16425  0037CA  0E08               	movlw	8
 16426  0037CC                     L49:
 16427  0037CC  6E2E               	movwf	ECANSendMessage@buffers,c
 16428                           
 16429                           ; BSR set to: 14
 16430                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16431  0037CE  010D               	movlb	13	; () banked
 16432  0037D0  90D8               	bcf	status,0,c
 16433  0037D2  31F8               	rrcf	248,w,b	;volatile
 16434  0037D4  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 16435                           
 16436                           ; BSR set to: 13
 16437                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16438  0037D6  6A34               	clrf	ECANSendMessage@i,c
 16439  0037D8  D07D               	goto	l12096
 16440  0037DA                     l12042:
 16441                           
 16442                           ;ECAN.c: 688: {
 16443                           ;ECAN.c: 693: ptr = pb[i];
 16444  0037DA  5034               	movf	ECANSendMessage@i,w,c
 16445  0037DC  0D02               	mullw	2
 16446  0037DE  50F3               	movf	prodl,w,c
 16447  0037E0  0F1B               	addlw	low ECANSendMessage@pb
 16448  0037E2  6ED9               	movwf	fsr2l,c
 16449  0037E4  6ADA               	clrf	fsr2h,c
 16450  0037E6  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 16451  0037EA  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 16452                           
 16453                           ;ECAN.c: 694: tempPtr = ptr;
 16454  0037EE  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16455  0037F2  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16456                           
 16457                           ;ECAN.c: 702: if ( i > 2 )
 16458  0037F6  0E02               	movlw	2
 16459  0037F8  6434               	cpfsgt	ECANSendMessage@i,c
 16460  0037FA  D004               	goto	l12054
 16461                           
 16462                           ;ECAN.c: 703: {
 16463                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16464  0037FC  90D8               	bcf	status,0,c
 16465  0037FE  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16466                           
 16467                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16468  003800  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 16469  003802  D067               	goto	l12094
 16470  003804                     l12054:
 16471                           
 16472                           ;ECAN.c: 714: }
 16473                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16474  003804  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16475  003808  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16476  00380C  50DF               	movf	indf2,w,c
 16477  00380E  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16478  003810  B61A               	btfsc	??_ECANSendMessage,3,c
 16479  003812  D05F               	goto	l12094
 16480                           
 16481                           ;ECAN.c: 721: {
 16482                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16483  003814  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16484  003818  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16485  00381C  0EFC               	movlw	252
 16486  00381E  16DF               	andwf	indf2,f,c
 16487                           
 16488                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16489  003820  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16490  003824  0E03               	movlw	3
 16491  003826  161A               	andwf	??_ECANSendMessage,f,c
 16492  003828  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16493  00382C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16494  003830  501A               	movf	??_ECANSendMessage,w,c
 16495  003832  12DF               	iorwf	indf2,f,c
 16496                           
 16497                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16498  003834  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 16499  003836  D004               	goto	l168
 16500                           
 16501                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16502  003838  5018               	movf	ECANSendMessage@dataLen,w,c
 16503  00383A  0940               	iorlw	64
 16504  00383C  6E33               	movwf	ECANSendMessage@temp,c
 16505  00383E  D002               	goto	l12064
 16506  003840                     l168:
 16507                           
 16508                           ;ECAN.c: 729: else
 16509                           ;ECAN.c: 730: temp = dataLen;
 16510  003840  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16511  003844                     l12064:
 16512                           
 16513                           ;ECAN.c: 732: *(ptr+5) = temp;
 16514  003844  EE20 F005          	lfsr	2,5
 16515  003848  5035               	movf	ECANSendMessage@ptr,w,c
 16516  00384A  26D9               	addwf	fsr2l,f,c
 16517  00384C  5036               	movf	ECANSendMessage@ptr+1,w,c
 16518  00384E  22DA               	addwfc	fsr2h,f,c
 16519  003850  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 16520                           
 16521                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16522  003854  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 16523  003856  D003               	goto	l170
 16524                           
 16525                           ;ECAN.c: 736: temp = 1;
 16526  003858  0E01               	movlw	1
 16527  00385A  6E33               	movwf	ECANSendMessage@temp,c
 16528  00385C  D001               	goto	l12070
 16529  00385E                     l170:
 16530                           
 16531                           ;ECAN.c: 738: else
 16532                           ;ECAN.c: 739: temp = 0;
 16533  00385E  6A33               	clrf	ECANSendMessage@temp,c
 16534  003860                     l12070:
 16535                           
 16536                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16537  003860  2835               	incf	ECANSendMessage@ptr,w,c
 16538  003862  6E08               	movwf	?__CANIDToRegs,c
 16539  003864  0E00               	movlw	0
 16540  003866  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 16541  003868  6E09               	movwf	?__CANIDToRegs+1,c
 16542  00386A  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16543  00386E  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16544  003872  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16545  003876  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16546  00387A  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16547  00387E  EC41  F01E         	call	__CANIDToRegs	;wreg free
 16548                           
 16549                           ;ECAN.c: 745: ptr += 6;
 16550  003882  0E06               	movlw	6
 16551  003884  2635               	addwf	ECANSendMessage@ptr,f,c
 16552  003886  0E00               	movlw	0
 16553  003888  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 16554                           
 16555                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16556  00388A  6A2F               	clrf	ECANSendMessage@j,c
 16557  00388C  D00F               	goto	l12084
 16558  00388E                     l12076:
 16559                           
 16560                           ;ECAN.c: 748: *ptr++ = *data++;
 16561  00388E  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 16562  003892  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16563  003896  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16564  00389A  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16565  00389E  CFDF FFE7          	movff	indf2,indf1
 16566  0038A2  4A16               	infsnz	ECANSendMessage@data,f,c
 16567  0038A4  2A17               	incf	ECANSendMessage@data+1,f,c
 16568  0038A6  4A35               	infsnz	ECANSendMessage@ptr,f,c
 16569  0038A8  2A36               	incf	ECANSendMessage@ptr+1,f,c
 16570  0038AA  2A2F               	incf	ECANSendMessage@j,f,c
 16571  0038AC                     l12084:
 16572  0038AC  5018               	movf	ECANSendMessage@dataLen,w,c
 16573  0038AE  5C2F               	subwf	ECANSendMessage@j,w,c
 16574  0038B0  E3EE               	bnc	l12076
 16575                           
 16576                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16577  0038B2  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16578  0038B6  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16579  0038BA  50DF               	movf	indf2,w,c
 16580  0038BC  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 16581  0038BE  B41A               	btfsc	??_ECANSendMessage,2,c
 16582  0038C0  D006               	goto	l12090
 16583                           
 16584                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16585  0038C2  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16586  0038C6  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16587  0038CA  0E00               	movlw	0
 16588  0038CC  86DB               	bsf	plusw2,3,c
 16589  0038CE                     l12090:
 16590                           
 16591                           ;ECAN.c: 755: return TRUE;
 16592  0038CE  0E01               	movlw	1
 16593  0038D0  D005               	goto	l176
 16594  0038D2                     l12094:
 16595  0038D2  2A34               	incf	ECANSendMessage@i,f,c
 16596  0038D4                     l12096:
 16597  0038D4  502E               	movf	ECANSendMessage@buffers,w,c
 16598  0038D6  5C34               	subwf	ECANSendMessage@i,w,c
 16599  0038D8  E380               	bnc	l12042
 16600                           
 16601                           ;ECAN.c: 756: }
 16602                           ;ECAN.c: 757: }
 16603                           ;ECAN.c: 760: return FALSE;
 16604  0038DA  0E00               	movlw	0
 16605  0038DC                     l176:
 16606  0038DC  0012               	return	
 16607  0038DE                     __end_of_ECANSendMessage:
 16608                           	opt stack 0
 16609                           tblptru	equ	0xFF8
 16610                           tblptrh	equ	0xFF7
 16611                           tblptrl	equ	0xFF6
 16612                           tablat	equ	0xFF5
 16613                           prodh	equ	0xFF4
 16614                           prodl	equ	0xFF3
 16615                           intcon	equ	0xFF2
 16616                           intcon2	equ	0xFF1
 16617                           postinc0	equ	0xFEE
 16618                           wreg	equ	0xFE8
 16619                           indf1	equ	0xFE7
 16620                           fsr1h	equ	0xFE2
 16621                           fsr1l	equ	0xFE1
 16622                           indf2	equ	0xFDF
 16623                           postinc2	equ	0xFDE
 16624                           postdec2	equ	0xFDD
 16625                           plusw2	equ	0xFDB
 16626                           fsr2h	equ	0xFDA
 16627                           fsr2l	equ	0xFD9
 16628                           status	equ	0xFD8
 16629                           
 16630 ;; *************** function __CANIDToRegs *****************
 16631 ;; Defined at:
 16632 ;;		line 1099 in file "../ECAN.c"
 16633 ;; Parameters:    Size  Location     Type
 16634 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 16635 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), RXM1SIDH(1), 
 16636 ;;		 -> RXF1SIDH(1), B5CON(1), B4CON(1), B3CON(1), 
 16637 ;;		 -> B2CON(1), B1CON(1), B0CON(1), 
 16638 ;;  val             4    9[COMRAM] unsigned long 
 16639 ;;  type            1   13[COMRAM] unsigned char 
 16640 ;; Auto vars:     Size  Location     Type
 16641 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 16642 ;;		 -> _CANIDToRegs@val(4), 
 16643 ;; Return value:  Size  Location     Type
 16644 ;;		None               void
 16645 ;; Registers used:
 16646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16647 ;; Tracked objects:
 16648 ;;		On entry : 0/F
 16649 ;;		On exit  : 0/0
 16650 ;;		Unchanged: 0/0
 16651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16652 ;;      Params:         7       0       0       0       0       0       0
 16653 ;;      Locals:         1       0       0       0       0       0       0
 16654 ;;      Temps:          2       0       0       0       0       0       0
 16655 ;;      Totals:        10       0       0       0       0       0       0
 16656 ;;Total ram usage:       10 bytes
 16657 ;; Hardware stack levels used:    1
 16658 ;; Hardware stack levels required when called:    2
 16659 ;; This function calls:
 16660 ;;		Nothing
 16661 ;; This function is called by:
 16662 ;;		_ECANSendMessage
 16663 ;;		_calculateSetFilterMask
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           	psect	text56
 16668  003C82                     __ptext56:
 16669                           	opt stack 0
 16670  003C82                     __CANIDToRegs:
 16671                           	opt stack 23
 16672                           
 16673                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16674                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16675                           
 16676                           ;incstack = 0
 16677                           ;incstack = 0
 16678  003C82  0E0A               	movlw	low __CANIDToRegs@val
 16679  003C84  6E11               	movwf	__CANIDToRegs@Value,c
 16680                           
 16681                           ;ECAN.c: 1104: if ( type == 0 )
 16682  003C86  660E               	tstfsz	__CANIDToRegs@type,c
 16683  003C88  D022               	goto	l12112
 16684                           
 16685                           ;ECAN.c: 1105: {
 16686                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16687  003C8A  5011               	movf	__CANIDToRegs@Value,w,c
 16688  003C8C  6ED9               	movwf	fsr2l,c
 16689  003C8E  6ADA               	clrf	fsr2h,c
 16690  003C90  50DF               	movf	indf2,w,c
 16691  003C92  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16692  003C94  90D8               	bcf	status,0,c
 16693  003C96  320F               	rrcf	??__CANIDToRegs,f,c
 16694  003C98  90D8               	bcf	status,0,c
 16695  003C9A  320F               	rrcf	??__CANIDToRegs,f,c
 16696  003C9C  90D8               	bcf	status,0,c
 16697  003C9E  300F               	rrcf	??__CANIDToRegs,w,c
 16698                           
 16699                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16700  003CA0  D862               	call	PL48	;call to abstracted procedure
 16701  003CA2  2AD9               	incf	fsr2l,f,c
 16702  003CA4  6ADA               	clrf	fsr2h,c
 16703  003CA6  D872               	call	PL110	;call to abstracted procedure
 16704  003CA8                     u15235:
 16705  003CA8  90D8               	bcf	status,0,c
 16706  003CAA  360F               	rlcf	??__CANIDToRegs,f,c
 16707  003CAC  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16708  003CAE  D7FC               	goto	u15235
 16709  003CB0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16710                           
 16711                           ;ECAN.c: 1109: ptr++;
 16712                           
 16713                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16714  003CB4  D846               	call	PL34	;call to abstracted procedure
 16715  003CB6  D86A               	call	PL110	;call to abstracted procedure
 16716  003CB8                     u15245:
 16717  003CB8  90D8               	bcf	status,0,c
 16718  003CBA  360F               	rlcf	??__CANIDToRegs,f,c
 16719  003CBC  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16720  003CBE  D7FC               	goto	u15245
 16721  003CC0  500F               	movf	??__CANIDToRegs,w,c
 16722  003CC2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16723  003CC6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16724  003CCA  6EDF               	movwf	indf2,c
 16725                           
 16726                           ;ECAN.c: 1111: }
 16727  003CCC  D039               	goto	l230
 16728  003CCE                     l12112:
 16729                           
 16730                           ;ECAN.c: 1112: else
 16731                           ;ECAN.c: 1113: {
 16732                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16733  003CCE  5011               	movf	__CANIDToRegs@Value,w,c
 16734  003CD0  D842               	call	PL44	;call to abstracted procedure
 16735  003CD2  0E05               	movlw	5
 16736  003CD4  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16737  003CD6                     u15255:
 16738  003CD6  90D8               	bcf	status,0,c
 16739  003CD8  320F               	rrcf	??__CANIDToRegs,f,c
 16740  003CDA  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16741  003CDC  D7FC               	goto	u15255
 16742  003CDE  500F               	movf	??__CANIDToRegs,w,c
 16743                           
 16744                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16745  003CE0  D842               	call	PL48	;call to abstracted procedure
 16746  003CE2  0E03               	movlw	3
 16747  003CE4  D849               	call	PL64	;call to abstracted procedure
 16748  003CE6  360F               	rlcf	??__CANIDToRegs,f,c
 16749  003CE8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16750                           
 16751                           ;ECAN.c: 1117: ptr++;
 16752                           
 16753                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16754  003CEC  D82A               	call	PL34	;call to abstracted procedure
 16755  003CEE  0E02               	movlw	2
 16756  003CF0  D843               	call	PL64	;call to abstracted procedure
 16757  003CF2  340F               	rlcf	??__CANIDToRegs,w,c
 16758  003CF4  0BE0               	andlw	224
 16759  003CF6  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16760  003CFA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16761  003CFE  6EDF               	movwf	indf2,c
 16762                           
 16763                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16764  003D00  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16765  003D04  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16766  003D08  0E00               	movlw	0
 16767  003D0A  86DB               	bsf	plusw2,3,c
 16768                           
 16769                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16770  003D0C  5011               	movf	__CANIDToRegs@Value,w,c
 16771  003D0E  D823               	call	PL44	;call to abstracted procedure
 16772  003D10  0E03               	movlw	3
 16773  003D12  160F               	andwf	??__CANIDToRegs,f,c
 16774  003D14  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16775                           
 16776                           ;ECAN.c: 1122: ptr++;
 16777                           
 16778                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16779  003D18  D814               	call	PL34	;call to abstracted procedure
 16780  003D1A  2AD9               	incf	fsr2l,f,c
 16781  003D1C  6ADA               	clrf	fsr2h,c
 16782  003D1E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16783  003D22  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16784  003D26  CFDF FFE7          	movff	indf2,indf1
 16785                           
 16786                           ;ECAN.c: 1124: ptr++;
 16787  003D2A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16788  003D2C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16789                           
 16790                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16791  003D2E  5011               	movf	__CANIDToRegs@Value,w,c
 16792  003D30  6ED9               	movwf	fsr2l,c
 16793  003D32  6ADA               	clrf	fsr2h,c
 16794  003D34  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16795  003D38  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16796  003D3C  CFDF FFE7          	movff	indf2,indf1
 16797  003D40                     l230:
 16798  003D40  0012               	return	
 16799  003D42                     __end_of__CANIDToRegs:
 16800                           	opt stack 0
 16801  003D42                     PL34:
 16802                           	opt stack 23
 16803  003D42  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16804  003D46  500F               	movf	??__CANIDToRegs,w,c
 16805  003D48  12DF               	iorwf	indf2,f,c
 16806  003D4A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 16807  003D4C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 16808  003D4E  5011               	movf	__CANIDToRegs@Value,w,c
 16809  003D50  6ED9               	movwf	fsr2l,c
 16810  003D52  6ADA               	clrf	fsr2h,c
 16811  003D54  0012               	return	
 16812  003D56                     __end_ofPL34:
 16813                           	opt stack 0
 16814  003D56                     PL44:
 16815                           	opt stack 23
 16816  003D56  6ED9               	movwf	fsr2l,c
 16817  003D58  6ADA               	clrf	fsr2h,c
 16818  003D5A  0E02               	movlw	2
 16819  003D5C  26D9               	addwf	fsr2l,f,c
 16820  003D5E  6ADA               	clrf	fsr2h,c
 16821  003D60  50DF               	movf	indf2,w,c
 16822  003D62  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16823  003D64  0012               	return	
 16824  003D66                     __end_ofPL44:
 16825                           	opt stack 0
 16826  003D66                     PL48:
 16827                           	opt stack 23
 16828  003D66  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16829  003D6A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16830  003D6E  6EDF               	movwf	indf2,c
 16831  003D70  5011               	movf	__CANIDToRegs@Value,w,c
 16832  003D72  6ED9               	movwf	fsr2l,c
 16833  003D74  6ADA               	clrf	fsr2h,c
 16834  003D76  0012               	return	
 16835  003D78                     __end_ofPL48:
 16836                           	opt stack 0
 16837  003D78                     PL64:
 16838                           	opt stack 23
 16839  003D78  26D9               	addwf	fsr2l,f,c
 16840  003D7A  6ADA               	clrf	fsr2h,c
 16841  003D7C  50DF               	movf	indf2,w,c
 16842  003D7E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16843  003D80  90D8               	bcf	status,0,c
 16844  003D82  360F               	rlcf	??__CANIDToRegs,f,c
 16845  003D84  90D8               	bcf	status,0,c
 16846  003D86  360F               	rlcf	??__CANIDToRegs,f,c
 16847  003D88  90D8               	bcf	status,0,c
 16848  003D8A  0012               	return	
 16849  003D8C                     __end_ofPL64:
 16850                           	opt stack 0
 16851  003D8C                     PL110:
 16852                           	opt stack 23
 16853  003D8C  50DF               	movf	indf2,w,c
 16854  003D8E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 16855  003D90  0E05               	movlw	5
 16856  003D92  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16857  003D94  0C05               	retlw	5
 16858  003D96                     __end_ofPL110:
 16859                           	opt stack 0
 16860                           tblptru	equ	0xFF8
 16861                           tblptrh	equ	0xFF7
 16862                           tblptrl	equ	0xFF6
 16863                           tablat	equ	0xFF5
 16864                           prodh	equ	0xFF4
 16865                           prodl	equ	0xFF3
 16866                           intcon	equ	0xFF2
 16867                           intcon2	equ	0xFF1
 16868                           postinc0	equ	0xFEE
 16869                           wreg	equ	0xFE8
 16870                           indf1	equ	0xFE7
 16871                           fsr1h	equ	0xFE2
 16872                           fsr1l	equ	0xFE1
 16873                           indf2	equ	0xFDF
 16874                           postinc2	equ	0xFDE
 16875                           postdec2	equ	0xFDD
 16876                           plusw2	equ	0xFDB
 16877                           fsr2h	equ	0xFDA
 16878                           fsr2l	equ	0xFD9
 16879                           status	equ	0xFD8
 16880                           
 16881 ;; *************** function _vscp_getEvent *****************
 16882 ;; Defined at:
 16883 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;		None
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;  rv              1   43[COMRAM] unsigned char 
 16888 ;; Return value:  Size  Location     Type
 16889 ;;                  1    wreg      unsigned char 
 16890 ;; Registers used:
 16891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : F/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16897 ;;      Params:         0       0       0       0       0       0       0
 16898 ;;      Locals:         1       0       0       0       0       0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0
 16900 ;;      Totals:         1       0       0       0       0       0       0
 16901 ;;Total ram usage:        1 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    6
 16904 ;; This function calls:
 16905 ;;		_getVSCPFrame
 16906 ;; This function is called by:
 16907 ;;		_main
 16908 ;; This function uses a non-reentrant model
 16909 ;;
 16910                           
 16911                           	psect	text57
 16912  00461E                     __ptext57:
 16913                           	opt stack 0
 16914  00461E                     _vscp_getEvent:
 16915                           	opt stack 23
 16916                           
 16917                           ; BSR set to: 0
 16918                           ;vscp_firmware.c: 1309: int8_t rv;
 16919                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16920                           
 16921                           ;incstack = 0
 16922                           ;incstack = 0
 16923  00461E  BF97               	btfsc	_vscp_imsg& (0+255),7,b
 16924  004620  D012               	goto	l1504
 16925                           
 16926                           ; BSR set to: 0
 16927                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16928                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16929                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16930                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16931                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16932                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16933  004622  0E9B               	movlw	low (_vscp_imsg+4)
 16934  004624  6E1E               	movwf	?_getVSCPFrame,c
 16935  004626  0E9C               	movlw	low (_vscp_imsg+5)
 16936  004628  6E1F               	movwf	?_getVSCPFrame+1,c
 16937  00462A  0E98               	movlw	low (_vscp_imsg+1)
 16938  00462C  6E20               	movwf	?_getVSCPFrame+2,c
 16939  00462E  0E97               	movlw	low _vscp_imsg
 16940  004630  6E21               	movwf	?_getVSCPFrame+3,c
 16941  004632  0E9D               	movlw	low (_vscp_imsg+6)
 16942  004634  6E22               	movwf	?_getVSCPFrame+4,c
 16943  004636  0E99               	movlw	(_vscp_imsg+2)& (0+255)
 16944  004638  EC3B  F021         	call	_getVSCPFrame
 16945  00463C  6E2C               	movwf	vscp_getEvent@rv,c
 16946  00463E  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 16947  004640  E002               	bz	l1504
 16948                           
 16949                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16950  004642  0100               	movlb	0	; () banked
 16951  004644  8F97               	bsf	_vscp_imsg& (0+255),7,b
 16952  004646                     l1504:
 16953  004646  0012               	return	
 16954  004648                     __end_of_vscp_getEvent:
 16955                           	opt stack 0
 16956                           tblptru	equ	0xFF8
 16957                           tblptrh	equ	0xFF7
 16958                           tblptrl	equ	0xFF6
 16959                           tablat	equ	0xFF5
 16960                           prodh	equ	0xFF4
 16961                           prodl	equ	0xFF3
 16962                           intcon	equ	0xFF2
 16963                           intcon2	equ	0xFF1
 16964                           postinc0	equ	0xFEE
 16965                           wreg	equ	0xFE8
 16966                           indf1	equ	0xFE7
 16967                           fsr1h	equ	0xFE2
 16968                           fsr1l	equ	0xFE1
 16969                           indf2	equ	0xFDF
 16970                           postinc2	equ	0xFDE
 16971                           postdec2	equ	0xFDD
 16972                           plusw2	equ	0xFDB
 16973                           fsr2h	equ	0xFDA
 16974                           fsr2l	equ	0xFD9
 16975                           status	equ	0xFD8
 16976                           
 16977 ;; *************** function _getVSCPFrame *****************
 16978 ;; Defined at:
 16979 ;;		line 3602 in file "../main.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16982 ;;		 -> vscp_imsg(14), 
 16983 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 16984 ;;		 -> vscp_imsg(14), 
 16985 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 16986 ;;		 -> vscp_imsg(14), 
 16987 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 16988 ;;		 -> vscp_imsg(14), 
 16989 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 16990 ;;		 -> vscp_imsg(14), 
 16991 ;;  pData           1   33[COMRAM] PTR unsigned char 
 16992 ;;		 -> vscp_imsg(14), 
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 16995 ;;		 -> vscp_imsg(14), 
 16996 ;;  id              4   39[COMRAM] unsigned long 
 16997 ;; Return value:  Size  Location     Type
 16998 ;;                  1    wreg      unsigned char 
 16999 ;; Registers used:
 17000 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17001 ;; Tracked objects:
 17002 ;;		On entry : F/0
 17003 ;;		On exit  : 0/0
 17004 ;;		Unchanged: 0/0
 17005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17006 ;;      Params:         5       0       0       0       0       0       0
 17007 ;;      Locals:         5       0       0       0       0       0       0
 17008 ;;      Temps:          4       0       0       0       0       0       0
 17009 ;;      Totals:        14       0       0       0       0       0       0
 17010 ;;Total ram usage:       14 bytes
 17011 ;; Hardware stack levels used:    1
 17012 ;; Hardware stack levels required when called:    5
 17013 ;; This function calls:
 17014 ;;		_getCANFrame
 17015 ;; This function is called by:
 17016 ;;		_vscp_getEvent
 17017 ;; This function uses a non-reentrant model
 17018 ;;
 17019                           
 17020                           	psect	text58
 17021  004276                     __ptext58:
 17022                           	opt stack 0
 17023  004276                     _getVSCPFrame:
 17024                           	opt stack 23
 17025                           
 17026                           ;incstack = 0
 17027                           ;incstack = 0
 17028                           ;getVSCPFrame@pvscpclass stored from wreg
 17029  004276  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 17030                           
 17031                           ; BSR set to: 0
 17032                           ;main.c: 3603: uint32_t id;
 17033                           ;main.c: 3605: if ( !getCANFrame(&id, pSize, pData) ) {
 17034  00427A  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 17035  00427E  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 17036  004282  0E28               	movlw	getVSCPFrame@id& (0+255)
 17037  004284  ECE4  F022         	call	_getCANFrame
 17038  004288  0900               	iorlw	0
 17039  00428A  E102               	bnz	l14810
 17040                           
 17041                           ;main.c: 3606: return 0;
 17042  00428C  0E00               	movlw	0
 17043  00428E  D02E               	goto	l1118
 17044  004290                     l14810:
 17045                           
 17046                           ;main.c: 3607: }
 17047                           ;main.c: 3609: *pNodeId = id & 0x0ff;
 17048  004290  501F               	movf	getVSCPFrame@pNodeId,w,c
 17049  004292  6ED9               	movwf	fsr2l,c
 17050  004294  6ADA               	clrf	fsr2h,c
 17051  004296  C028  FFDF         	movff	getVSCPFrame@id,indf2
 17052                           
 17053                           ;main.c: 3610: *pvscptype = (id >> 8) & 0xff;
 17054  00429A  501E               	movf	getVSCPFrame@pvscptype,w,c
 17055  00429C  6ED9               	movwf	fsr2l,c
 17056  00429E  6ADA               	clrf	fsr2h,c
 17057  0042A0  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 17058                           
 17059                           ;main.c: 3611: *pvscpclass = (id >> 16) & 0x1ff;
 17060  0042A4  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 17061  0042A6  6E23               	movwf	??_getVSCPFrame& (0+255),c
 17062  0042A8  0E01               	movlw	1
 17063  0042AA  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 17064  0042AC  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 17065  0042AE  5027               	movf	getVSCPFrame@pvscpclass,w,c
 17066  0042B0  6ED9               	movwf	fsr2l,c
 17067  0042B2  6ADA               	clrf	fsr2h,c
 17068  0042B4  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 17069  0042B8  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 17070                           
 17071                           ;main.c: 3612: *pPriority = (uint16_t) (0x07 & (id >> 26));
 17072  0042BC  5020               	movf	getVSCPFrame@pPriority,w,c
 17073  0042BE  6ED9               	movwf	fsr2l,c
 17074  0042C0  6ADA               	clrf	fsr2h,c
 17075  0042C2  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 17076  0042C6  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 17077  0042CA  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 17078  0042CE  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 17079  0042D2  0E1B               	movlw	27
 17080  0042D4  D005               	goto	u19500
 17081  0042D6                     u19505:
 17082  0042D6  90D8               	bcf	status,0,c
 17083  0042D8  3226               	rrcf	??_getVSCPFrame+3,f,c
 17084  0042DA  3225               	rrcf	??_getVSCPFrame+2,f,c
 17085  0042DC  3224               	rrcf	??_getVSCPFrame+1,f,c
 17086  0042DE  3223               	rrcf	??_getVSCPFrame,f,c
 17087  0042E0                     u19500:
 17088  0042E0  2EE8               	decfsz	wreg,f,c
 17089  0042E2  D7F9               	goto	u19505
 17090  0042E4  5023               	movf	??_getVSCPFrame,w,c
 17091  0042E6  0B07               	andlw	7
 17092  0042E8  6EDF               	movwf	indf2,c
 17093                           
 17094                           ;main.c: 3614: return 1;
 17095  0042EA  0E01               	movlw	1
 17096  0042EC                     l1118:
 17097  0042EC  0012               	return	
 17098  0042EE                     __end_of_getVSCPFrame:
 17099                           	opt stack 0
 17100                           tblptru	equ	0xFF8
 17101                           tblptrh	equ	0xFF7
 17102                           tblptrl	equ	0xFF6
 17103                           tablat	equ	0xFF5
 17104                           prodh	equ	0xFF4
 17105                           prodl	equ	0xFF3
 17106                           intcon	equ	0xFF2
 17107                           intcon2	equ	0xFF1
 17108                           postinc0	equ	0xFEE
 17109                           wreg	equ	0xFE8
 17110                           indf1	equ	0xFE7
 17111                           fsr1h	equ	0xFE2
 17112                           fsr1l	equ	0xFE1
 17113                           indf2	equ	0xFDF
 17114                           postinc2	equ	0xFDE
 17115                           postdec2	equ	0xFDD
 17116                           plusw2	equ	0xFDB
 17117                           fsr2h	equ	0xFDA
 17118                           fsr2l	equ	0xFD9
 17119                           status	equ	0xFD8
 17120                           
 17121 ;; *************** function _getCANFrame *****************
 17122 ;; Defined at:
 17123 ;;		line 3644 in file "../main.c"
 17124 ;; Parameters:    Size  Location     Type
 17125 ;;  pid             1    wreg     PTR unsigned long 
 17126 ;;		 -> getVSCPFrame@id(4), 
 17127 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 17128 ;;		 -> vscp_imsg(14), 
 17129 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 17130 ;;		 -> vscp_imsg(14), 
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  pid             1   27[COMRAM] PTR unsigned long 
 17133 ;;		 -> getVSCPFrame@id(4), 
 17134 ;;  flags           1   28[COMRAM] enum E16425
 17135 ;; Return value:  Size  Location     Type
 17136 ;;                  1    wreg      unsigned char 
 17137 ;; Registers used:
 17138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17139 ;; Tracked objects:
 17140 ;;		On entry : F/0
 17141 ;;		On exit  : 0/0
 17142 ;;		Unchanged: 0/0
 17143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17144 ;;      Params:         2       0       0       0       0       0       0
 17145 ;;      Locals:         2       0       0       0       0       0       0
 17146 ;;      Temps:          0       0       0       0       0       0       0
 17147 ;;      Totals:         4       0       0       0       0       0       0
 17148 ;;Total ram usage:        4 bytes
 17149 ;; Hardware stack levels used:    1
 17150 ;; Hardware stack levels required when called:    4
 17151 ;; This function calls:
 17152 ;;		_ECANReceiveMessage
 17153 ;; This function is called by:
 17154 ;;		_getVSCPFrame
 17155 ;; This function uses a non-reentrant model
 17156 ;;
 17157                           
 17158                           	psect	text59
 17159  0045C8                     __ptext59:
 17160                           	opt stack 0
 17161  0045C8                     _getCANFrame:
 17162                           	opt stack 23
 17163                           
 17164                           ;incstack = 0
 17165                           ;incstack = 0
 17166                           ;getCANFrame@pid stored from wreg
 17167  0045C8  CFE8 F01C          	movff	wreg,getCANFrame@pid
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;main.c: 3645: ECAN_RX_MSG_FLAGS flags;
 17171                           ;main.c: 3649: if (vscp_imsg.flags & 0x80) return 0;
 17172  0045CC  AF97               	btfss	_vscp_imsg& (0+255),7,b
 17173  0045CE  D002               	goto	l14826
 17174  0045D0                     l14822:
 17175  0045D0  0E00               	movlw	0
 17176  0045D2  D00F               	goto	l1129
 17177  0045D4                     l14826:
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;main.c: 3651: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 17181  0045D4  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 17182  0045D8  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 17183  0045DC  0E1D               	movlw	low getCANFrame@flags
 17184  0045DE  6E11               	movwf	?_ECANReceiveMessage+2,c
 17185  0045E0  501C               	movf	getCANFrame@pid,w,c
 17186  0045E2  EC12  F018         	call	_ECANReceiveMessage
 17187  0045E6  0900               	iorlw	0
 17188  0045E8  E0F3               	bz	l14822
 17189                           
 17190                           ;main.c: 3654: if (flags & ECAN_RX_RTR_FRAME) return 0;
 17191  0045EA  AC1D               	btfss	getCANFrame@flags,6,c
 17192                           
 17193                           ;main.c: 3657: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 17194  0045EC  AA1D               	btfss	getCANFrame@flags,5,c
 17195  0045EE  D7F0               	goto	l14822
 17196                           
 17197                           ;main.c: 3659: return 1;
 17198  0045F0  0E01               	movlw	1
 17199  0045F2                     l1129:
 17200  0045F2  0012               	return	
 17201  0045F4                     __end_of_getCANFrame:
 17202                           	opt stack 0
 17203                           tblptru	equ	0xFF8
 17204                           tblptrh	equ	0xFF7
 17205                           tblptrl	equ	0xFF6
 17206                           tablat	equ	0xFF5
 17207                           prodh	equ	0xFF4
 17208                           prodl	equ	0xFF3
 17209                           intcon	equ	0xFF2
 17210                           intcon2	equ	0xFF1
 17211                           postinc0	equ	0xFEE
 17212                           wreg	equ	0xFE8
 17213                           indf1	equ	0xFE7
 17214                           fsr1h	equ	0xFE2
 17215                           fsr1l	equ	0xFE1
 17216                           indf2	equ	0xFDF
 17217                           postinc2	equ	0xFDE
 17218                           postdec2	equ	0xFDD
 17219                           plusw2	equ	0xFDB
 17220                           fsr2h	equ	0xFDA
 17221                           fsr2l	equ	0xFD9
 17222                           status	equ	0xFD8
 17223                           
 17224 ;; *************** function _ECANReceiveMessage *****************
 17225 ;; Defined at:
 17226 ;;		line 803 in file "../ECAN.c"
 17227 ;; Parameters:    Size  Location     Type
 17228 ;;  id              1    wreg     PTR unsigned long 
 17229 ;;		 -> getVSCPFrame@id(4), 
 17230 ;;  data            1   14[COMRAM] PTR unsigned char 
 17231 ;;		 -> vscp_imsg(14), 
 17232 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 17233 ;;		 -> vscp_imsg(14), 
 17234 ;;  msgFlags        1   16[COMRAM] PTR enum E16333
 17235 ;;		 -> getCANFrame@flags(1), 
 17236 ;; Auto vars:     Size  Location     Type
 17237 ;;  id              1   17[COMRAM] PTR unsigned long 
 17238 ;;		 -> getVSCPFrame@id(4), 
 17239 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 17240 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17241 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17242 ;;  savedPtr        2   18[COMRAM] PTR unsigned char 
 17243 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17244 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17245 ;;  temp            1   22[COMRAM] struct .
 17246 ;;  mode            1   21[COMRAM] unsigned char 
 17247 ;;  i               1   20[COMRAM] unsigned char 
 17248 ;; Return value:  Size  Location     Type
 17249 ;;                  1    wreg      enum E15660
 17250 ;; Registers used:
 17251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17252 ;; Tracked objects:
 17253 ;;		On entry : F/0
 17254 ;;		On exit  : 0/0
 17255 ;;		Unchanged: 0/0
 17256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17257 ;;      Params:         3       0       0       0       0       0       0
 17258 ;;      Locals:         8       0       0       0       0       0       0
 17259 ;;      Temps:          0       0       0       0       0       0       0
 17260 ;;      Totals:        11       0       0       0       0       0       0
 17261 ;;Total ram usage:       11 bytes
 17262 ;; Hardware stack levels used:    1
 17263 ;; Hardware stack levels required when called:    3
 17264 ;; This function calls:
 17265 ;;		__ECANPointBuffer
 17266 ;;		__RegsToCANID
 17267 ;; This function is called by:
 17268 ;;		_getCANFrame
 17269 ;; This function uses a non-reentrant model
 17270 ;;
 17271                           
 17272                           	psect	text60
 17273  003024                     __ptext60:
 17274                           	opt stack 0
 17275  003024                     _ECANReceiveMessage:
 17276                           	opt stack 23
 17277                           
 17278                           ;incstack = 0
 17279                           ;incstack = 0
 17280                           ;ECANReceiveMessage@id stored from wreg
 17281  003024  CFE8 F012          	movff	wreg,ECANReceiveMessage@id
 17282                           
 17283                           ; BSR set to: 0
 17284                           ;ECAN.c: 805: BYTE mode;
 17285                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 17286                           ;ECAN.c: 809: char i;
 17287                           ;ECAN.c: 810: BYTE_VAL temp;
 17288                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 17289  003028  6A54               	clrf	__ECANRxFilterHitInfo,c
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 17293  00302A  5077               	movf	3959,w,c	;volatile
 17294  00302C  0BC0               	andlw	192
 17295  00302E  6E16               	movwf	ECANReceiveMessage@mode,c
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;ECAN.c: 816: if ( mode == 0x00 )
 17299  003030  6616               	tstfsz	ECANReceiveMessage@mode,c
 17300  003032  D032               	goto	l12166
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;ECAN.c: 822: {
 17304                           ;ECAN.c: 824: if ( RXB0FUL )
 17305  003034  AE60               	btfss	3936,7,c	;volatile
 17306  003036  D012               	goto	l181
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;ECAN.c: 825: {
 17310                           ;ECAN.c: 827: RXB0IF = 0;
 17311  003038  90A4               	bcf	4004,0,c	;volatile
 17312                           
 17313                           ;ECAN.c: 830: if ( RXB0OVFL )
 17314  00303A  AE74               	btfss	3956,7,c	;volatile
 17315  00303C  D006               	goto	l12142
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;ECAN.c: 831: {
 17319                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 17320  00303E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17321  003040  6ED9               	movwf	fsr2l,c
 17322  003042  6ADA               	clrf	fsr2h,c
 17323  003044  0E00               	movlw	0
 17324  003046  86DB               	bsf	plusw2,3,c
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;ECAN.c: 833: RXB0OVFL = 0;
 17328  003048  9E74               	bcf	3956,7,c	;volatile
 17329  00304A                     l12142:
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;ECAN.c: 834: }
 17333                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 17334  00304A  A060               	btfss	3936,0,c	;volatile
 17335  00304C  D002               	bra	u15295
 17336  00304E  8054               	bsf	__ECANRxFilterHitInfo,0,c
 17337  003050  D001               	bra	u15297
 17338  003052                     u15295:
 17339  003052  9054               	bcf	__ECANRxFilterHitInfo,0,c
 17340  003054                     u15297:
 17341                           
 17342                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 17343  003054  0E0F               	movlw	15	;volatile
 17344  003056  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17345  003058  0E60               	movlw	96	;volatile
 17346  00305A  D01A               	goto	L50
 17347  00305C                     l181:
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 17351  00305C  010F               	movlb	15	; () banked
 17352  00305E  AF50               	btfss	80,7,b	;volatile
 17353  003060  D019               	goto	l12160
 17354                           
 17355                           ; BSR set to: 15
 17356                           ;ECAN.c: 842: {
 17357                           ;ECAN.c: 844: RXB1IF = 0;
 17358  003062  92A4               	bcf	4004,1,c	;volatile
 17359                           
 17360                           ;ECAN.c: 847: if ( RXB1OVFL )
 17361  003064  AC74               	btfss	3956,6,c	;volatile
 17362  003066  D006               	goto	l12152
 17363                           
 17364                           ; BSR set to: 15
 17365                           ;ECAN.c: 848: {
 17366                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 17367  003068  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17368  00306A  6ED9               	movwf	fsr2l,c
 17369  00306C  6ADA               	clrf	fsr2h,c
 17370  00306E  0E00               	movlw	0
 17371  003070  86DB               	bsf	plusw2,3,c
 17372                           
 17373                           ; BSR set to: 15
 17374                           ;ECAN.c: 850: RXB1OVFL = 0;
 17375  003072  9C74               	bcf	3956,6,c	;volatile
 17376  003074                     l12152:
 17377                           
 17378                           ; BSR set to: 15
 17379                           ;ECAN.c: 851: }
 17380                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 17381  003074  5150               	movf	80,w,b	;volatile
 17382  003076  0B07               	andlw	7
 17383  003078  6E54               	movwf	__ECANRxFilterHitInfo,c
 17384                           
 17385                           ; BSR set to: 15
 17386                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 17387  00307A  0E02               	movlw	2
 17388  00307C  6054               	cpfslt	__ECANRxFilterHitInfo,c
 17389  00307E  D005               	goto	l12158
 17390                           
 17391                           ; BSR set to: 15
 17392                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 17393  003080  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17394  003082  6ED9               	movwf	fsr2l,c
 17395  003084  6ADA               	clrf	fsr2h,c
 17396  003086  0E00               	movlw	0
 17397  003088  8EDB               	bsf	plusw2,7,c
 17398  00308A                     l12158:
 17399                           
 17400                           ; BSR set to: 15
 17401                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 17402  00308A  0E0F               	movlw	15	;volatile
 17403  00308C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17404  00308E  0E50               	movlw	80	;volatile
 17405  003090                     L50:
 17406  003090  6E18               	movwf	ECANReceiveMessage@ptr,c
 17407                           
 17408                           ;ECAN.c: 860: }
 17409  003092  D065               	goto	l12220
 17410  003094                     l12160:
 17411                           
 17412                           ;ECAN.c: 861: else
 17413                           ;ECAN.c: 862: return FALSE;
 17414  003094  0E00               	movlw	0
 17415  003096  D0C2               	goto	l188
 17416  003098                     l12166:
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;ECAN.c: 869: else if ( mode == 0x40 )
 17420  003098  5016               	movf	ECANReceiveMessage@mode,w,c
 17421  00309A  0A40               	xorlw	64
 17422  00309C  E146               	bnz	l191
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;ECAN.c: 875: {
 17426                           ;ECAN.c: 876: if ( RXB0FUL )
 17427  00309E  AE60               	btfss	3936,7,c	;volatile
 17428  0030A0  D004               	goto	l192
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 17432  0030A2  0E0F               	movlw	15	;volatile
 17433  0030A4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17434  0030A6  0E60               	movlw	96	;volatile
 17435  0030A8  D03E               	goto	L57
 17436  0030AA                     l192:
 17437                           
 17438                           ; BSR set to: 0
 17439                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17440  0030AA  010F               	movlb	15	; () banked
 17441  0030AC  AF50               	btfss	80,7,b	;volatile
 17442  0030AE  D004               	goto	l194
 17443                           
 17444                           ; BSR set to: 15
 17445                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17446  0030B0  0E0F               	movlw	15	;volatile
 17447  0030B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17448  0030B4  0E50               	movlw	80	;volatile
 17449  0030B6  D037               	goto	L57
 17450  0030B8                     l194:
 17451                           
 17452                           ; BSR set to: 15
 17453                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17454  0030B8  010D               	movlb	13
 17455  0030BA  B5F8               	btfsc	248,2,b	;volatile
 17456  0030BC  D007               	goto	l196
 17457  0030BE  010E               	movlb	14
 17458  0030C0  AF20               	btfss	32,7,b	;volatile
 17459  0030C2  D004               	goto	l196
 17460                           
 17461                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17462  0030C4  0E0E               	movlw	14	;volatile
 17463  0030C6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17464  0030C8  0E20               	movlw	32	;volatile
 17465  0030CA  D02D               	goto	L57
 17466  0030CC                     l196:
 17467                           
 17468                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17469  0030CC  010D               	movlb	13
 17470  0030CE  B7F8               	btfsc	248,3,b	;volatile
 17471  0030D0  D007               	goto	l198
 17472  0030D2  010E               	movlb	14
 17473  0030D4  AF30               	btfss	48,7,b	;volatile
 17474  0030D6  D004               	goto	l198
 17475                           
 17476                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17477  0030D8  0E0E               	movlw	14	;volatile
 17478  0030DA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17479  0030DC  0E30               	movlw	48	;volatile
 17480  0030DE  D023               	goto	L57
 17481  0030E0                     l198:
 17482                           
 17483                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17484  0030E0  010D               	movlb	13
 17485  0030E2  B9F8               	btfsc	248,4,b	;volatile
 17486  0030E4  D007               	goto	l200
 17487  0030E6  010E               	movlb	14
 17488  0030E8  AF40               	btfss	64,7,b	;volatile
 17489  0030EA  D004               	goto	l200
 17490                           
 17491                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17492  0030EC  0E0E               	movlw	14	;volatile
 17493  0030EE  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17494  0030F0  0E40               	movlw	64	;volatile
 17495  0030F2  D019               	goto	L57
 17496  0030F4                     l200:
 17497                           
 17498                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17499  0030F4  010D               	movlb	13
 17500  0030F6  BBF8               	btfsc	248,5,b	;volatile
 17501  0030F8  D005               	goto	l202
 17502  0030FA  010E               	movlb	14
 17503  0030FC  AF50               	btfss	80,7,b	;volatile
 17504  0030FE  D002               	goto	l202
 17505                           
 17506                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17507  003100  0E0E               	movlw	14	;volatile
 17508  003102  D7D7               	goto	L58
 17509  003104                     l202:
 17510                           
 17511                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17512  003104  010D               	movlb	13
 17513  003106  BDF8               	btfsc	248,6,b	;volatile
 17514  003108  D005               	goto	l204
 17515  00310A  010E               	movlb	14
 17516  00310C  AF60               	btfss	96,7,b	;volatile
 17517  00310E  D002               	goto	l204
 17518                           
 17519                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17520  003110  0E0E               	movlw	14	;volatile
 17521  003112  D7C8               	goto	L59
 17522  003114                     l204:
 17523                           
 17524                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17525  003114  010D               	movlb	13
 17526  003116  BFF8               	btfsc	248,7,b	;volatile
 17527  003118  D7BD               	goto	l12160
 17528  00311A  010E               	movlb	14
 17529  00311C  AF70               	btfss	112,7,b	;volatile
 17530  00311E  D7BA               	goto	l12160
 17531                           
 17532                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17533  003120  0E0E               	movlw	14	;volatile
 17534  003122  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 17535  003124  0E70               	movlw	112	;volatile
 17536  003126                     L57:
 17537  003126  6E18               	movwf	ECANReceiveMessage@ptr,c
 17538  003128  D00A               	goto	l12210
 17539  00312A                     l191:
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;ECAN.c: 910: else
 17543                           ;ECAN.c: 915: {
 17544                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17545  00312A  AE74               	btfss	3956,7,c	;volatile
 17546  00312C  D7B3               	goto	l12160
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;ECAN.c: 917: {
 17550                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17551  00312E  506F               	movf	3951,w,c	;volatile
 17552  003130  0B07               	andlw	7
 17553  003132  EC77  F021         	call	__ECANPointBuffer
 17554  003136  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17555  00313A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17556  00313E                     l12210:
 17557                           
 17558                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17559  00313E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17560  003142  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17561  003146  50DF               	movf	indf2,w,c
 17562  003148  0B1F               	andlw	31
 17563  00314A  6E54               	movwf	__ECANRxFilterHitInfo,c
 17564                           
 17565                           ;ECAN.c: 932: RXB1IF = 0;
 17566  00314C  92A4               	bcf	4004,1,c	;volatile
 17567                           
 17568                           ;ECAN.c: 934: if ( RXB1OVFL )
 17569  00314E  AC74               	btfss	3956,6,c	;volatile
 17570  003150  D006               	goto	l12220
 17571                           
 17572                           ;ECAN.c: 935: {
 17573                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17574  003152  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17575  003154  6ED9               	movwf	fsr2l,c
 17576  003156  6ADA               	clrf	fsr2h,c
 17577  003158  0E00               	movlw	0
 17578  00315A  86DB               	bsf	plusw2,3,c
 17579                           
 17580                           ;ECAN.c: 937: RXB1OVFL = 0;
 17581  00315C  9C74               	bcf	3956,6,c	;volatile
 17582  00315E                     l12220:
 17583                           
 17584                           ;ECAN.c: 942: savedPtr = ptr;
 17585  00315E  C018  F013         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17586  003162  C019  F014         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17587                           
 17588                           ;ECAN.c: 943: *msgFlags = 0;
 17589  003166  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17590  003168  6ED9               	movwf	fsr2l,c
 17591  00316A  6ADA               	clrf	fsr2h,c
 17592  00316C  6ADF               	clrf	indf2,c
 17593                           
 17594                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17595  00316E  EE20 F005          	lfsr	2,5
 17596  003172  D855               	call	PL106	;call to abstracted procedure
 17597                           
 17598                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17599  003174  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17600  003176  6ED9               	movwf	fsr2l,c
 17601  003178  6ADA               	clrf	fsr2h,c
 17602  00317A  5017               	movf	ECANReceiveMessage@temp,w,c
 17603  00317C  0B0F               	andlw	15
 17604  00317E  6EDF               	movwf	indf2,c
 17605                           
 17606                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17607  003180  AC17               	btfss	ECANReceiveMessage@temp,6,c
 17608  003182  D005               	goto	l212
 17609                           
 17610                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17611  003184  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17612  003186  6ED9               	movwf	fsr2l,c
 17613  003188  6ADA               	clrf	fsr2h,c
 17614  00318A  0E00               	movlw	0
 17615  00318C  8CDB               	bsf	plusw2,6,c
 17616  00318E                     l212:
 17617                           
 17618                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17619  00318E  EE20 F002          	lfsr	2,2
 17620  003192  D845               	call	PL106	;call to abstracted procedure
 17621                           
 17622                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17623  003194  A617               	btfss	ECANReceiveMessage@temp,3,c
 17624  003196  D008               	goto	l213
 17625                           
 17626                           ;ECAN.c: 956: {
 17627                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17628  003198  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17629  00319A  6ED9               	movwf	fsr2l,c
 17630  00319C  6ADA               	clrf	fsr2h,c
 17631  00319E  0E00               	movlw	0
 17632  0031A0  8ADB               	bsf	plusw2,5,c
 17633                           
 17634                           ;ECAN.c: 958: temp.Val = 1;
 17635  0031A2  0E01               	movlw	1
 17636  0031A4  6E17               	movwf	ECANReceiveMessage@temp,c
 17637                           
 17638                           ;ECAN.c: 959: }
 17639  0031A6  D001               	goto	l12238
 17640  0031A8                     l213:
 17641                           
 17642                           ;ECAN.c: 960: else
 17643                           ;ECAN.c: 961: temp.Val = 0;
 17644  0031A8  6A17               	clrf	ECANReceiveMessage@temp,c
 17645  0031AA                     l12238:
 17646                           
 17647                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17648  0031AA  2818               	incf	ECANReceiveMessage@ptr,w,c
 17649  0031AC  6E08               	movwf	?__RegsToCANID,c
 17650  0031AE  0E00               	movlw	0
 17651  0031B0  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17652  0031B2  6E09               	movwf	?__RegsToCANID+1,c
 17653  0031B4  C012  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17654  0031B8  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17655  0031BC  ECB2  F01D         	call	__RegsToCANID	;wreg free
 17656                           
 17657                           ;ECAN.c: 966: ptr += 6;
 17658  0031C0  0E06               	movlw	6
 17659  0031C2  2618               	addwf	ECANReceiveMessage@ptr,f,c
 17660  0031C4  0E00               	movlw	0
 17661  0031C6  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17662                           
 17663                           ;ECAN.c: 967: temp.Val = *dataLen;
 17664  0031C8  5010               	movf	ECANReceiveMessage@dataLen,w,c
 17665  0031CA  6ED9               	movwf	fsr2l,c
 17666  0031CC  6ADA               	clrf	fsr2h,c
 17667  0031CE  50DF               	movf	indf2,w,c
 17668  0031D0  6E17               	movwf	ECANReceiveMessage@temp,c
 17669                           
 17670                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17671  0031D2  6A15               	clrf	ECANReceiveMessage@i,c
 17672  0031D4  D00D               	goto	l12254
 17673  0031D6                     l12246:
 17674                           
 17675                           ;ECAN.c: 969: *data++ = *ptr++;
 17676  0031D6  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17677  0031DA  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17678  0031DE  500F               	movf	ECANReceiveMessage@data,w,c
 17679  0031E0  6EE1               	movwf	fsr1l,c
 17680  0031E2  6AE2               	clrf	fsr1h,c
 17681  0031E4  CFDF FFE7          	movff	indf2,indf1
 17682  0031E8  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 17683  0031EA  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 17684  0031EC  2A0F               	incf	ECANReceiveMessage@data,f,c
 17685  0031EE  2A15               	incf	ECANReceiveMessage@i,f,c
 17686  0031F0                     l12254:
 17687  0031F0  5017               	movf	ECANReceiveMessage@temp,w,c
 17688  0031F2  5C15               	subwf	ECANReceiveMessage@i,w,c
 17689  0031F4  E3F0               	bnc	l12246
 17690                           
 17691                           ;ECAN.c: 972: if ( IRXIF )
 17692  0031F6  AEA4               	btfss	4004,7,c	;volatile
 17693  0031F8  D006               	goto	l12260
 17694                           
 17695                           ;ECAN.c: 973: {
 17696                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17697  0031FA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 17698  0031FC  6ED9               	movwf	fsr2l,c
 17699  0031FE  6ADA               	clrf	fsr2h,c
 17700  003200  0E00               	movlw	0
 17701  003202  88DB               	bsf	plusw2,4,c
 17702                           
 17703                           ;ECAN.c: 975: IRXIF = 0;
 17704  003204  9EA4               	bcf	4004,7,c	;volatile
 17705  003206                     l12260:
 17706                           
 17707                           ;ECAN.c: 976: }
 17708                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17709  003206  C013  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17710  00320A  C014  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17711  00320E  0E7F               	movlw	127
 17712  003210  16DF               	andwf	indf2,f,c
 17713                           
 17714                           ;ECAN.c: 983: if ( mode == 0x80 )
 17715  003212  5016               	movf	ECANReceiveMessage@mode,w,c
 17716  003214  0A80               	xorlw	128
 17717  003216  B4D8               	btfsc	status,2,c
 17718                           
 17719                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17720  003218  9E74               	bcf	3956,7,c	;volatile
 17721                           
 17722                           ;ECAN.c: 990: return TRUE;
 17723  00321A  0E01               	movlw	1
 17724  00321C                     l188:
 17725  00321C  0012               	return	
 17726  00321E                     __end_of_ECANReceiveMessage:
 17727                           	opt stack 0
 17728  00321E                     PL106:
 17729                           	opt stack 23
 17730  00321E  5018               	movf	ECANReceiveMessage@ptr,w,c
 17731  003220  26D9               	addwf	fsr2l,f,c
 17732  003222  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 17733  003224  22DA               	addwfc	fsr2h,f,c
 17734  003226  50DF               	movf	indf2,w,c
 17735  003228  6E17               	movwf	ECANReceiveMessage@temp,c
 17736  00322A  0012               	return	
 17737  00322C                     __end_ofPL106:
 17738                           	opt stack 0
 17739                           tblptru	equ	0xFF8
 17740                           tblptrh	equ	0xFF7
 17741                           tblptrl	equ	0xFF6
 17742                           tablat	equ	0xFF5
 17743                           prodh	equ	0xFF4
 17744                           prodl	equ	0xFF3
 17745                           intcon	equ	0xFF2
 17746                           intcon2	equ	0xFF1
 17747                           postinc0	equ	0xFEE
 17748                           wreg	equ	0xFE8
 17749                           indf1	equ	0xFE7
 17750                           fsr1h	equ	0xFE2
 17751                           fsr1l	equ	0xFE1
 17752                           indf2	equ	0xFDF
 17753                           postinc2	equ	0xFDE
 17754                           postdec2	equ	0xFDD
 17755                           plusw2	equ	0xFDB
 17756                           fsr2h	equ	0xFDA
 17757                           fsr2l	equ	0xFD9
 17758                           status	equ	0xFD8
 17759                           
 17760 ;; *************** function __RegsToCANID *****************
 17761 ;; Defined at:
 17762 ;;		line 1156 in file "../ECAN.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 17765 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17766 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17767 ;;  val             1    9[COMRAM] PTR unsigned long 
 17768 ;;		 -> getVSCPFrame@id(4), 
 17769 ;;  type            1   10[COMRAM] unsigned char 
 17770 ;; Auto vars:     Size  Location     Type
 17771 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 17772 ;;		 -> getVSCPFrame@id(4), 
 17773 ;; Return value:  Size  Location     Type
 17774 ;;		None               void
 17775 ;; Registers used:
 17776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17777 ;; Tracked objects:
 17778 ;;		On entry : 0/0
 17779 ;;		On exit  : 0/0
 17780 ;;		Unchanged: 0/0
 17781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17782 ;;      Params:         4       0       0       0       0       0       0
 17783 ;;      Locals:         1       0       0       0       0       0       0
 17784 ;;      Temps:          2       0       0       0       0       0       0
 17785 ;;      Totals:         7       0       0       0       0       0       0
 17786 ;;Total ram usage:        7 bytes
 17787 ;; Hardware stack levels used:    1
 17788 ;; Hardware stack levels required when called:    2
 17789 ;; This function calls:
 17790 ;;		Nothing
 17791 ;; This function is called by:
 17792 ;;		_ECANReceiveMessage
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           	psect	text61
 17797  003B64                     __ptext61:
 17798                           	opt stack 0
 17799  003B64                     __RegsToCANID:
 17800                           	opt stack 23
 17801                           
 17802                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17803                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17804                           
 17805                           ;incstack = 0
 17806                           ;incstack = 0
 17807  003B64  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17808                           
 17809                           ;ECAN.c: 1161: if ( type == 0 )
 17810  003B68  660B               	tstfsz	__RegsToCANID@type,c
 17811  003B6A  D02B               	goto	l12304
 17812                           
 17813                           ;ECAN.c: 1162: {
 17814                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17815  003B6C  500E               	movf	__RegsToCANID@Value,w,c
 17816  003B6E  6ED9               	movwf	fsr2l,c
 17817  003B70  D862               	call	PL58	;call to abstracted procedure
 17818  003B72  360C               	rlcf	??__RegsToCANID,f,c
 17819  003B74  90D8               	bcf	status,0,c
 17820  003B76  360C               	rlcf	??__RegsToCANID,f,c
 17821  003B78  90D8               	bcf	status,0,c
 17822  003B7A  340C               	rlcf	??__RegsToCANID,w,c
 17823  003B7C  6EDF               	movwf	indf2,c
 17824                           
 17825                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17826  003B7E  500E               	movf	__RegsToCANID@Value,w,c
 17827  003B80  6ED9               	movwf	fsr2l,c
 17828  003B82  6ADA               	clrf	fsr2h,c
 17829  003B84  2AD9               	incf	fsr2l,f,c
 17830  003B86  6ADA               	clrf	fsr2h,c
 17831  003B88  D873               	call	PL70	;call to abstracted procedure
 17832  003B8A                     u15565:
 17833  003B8A  90D8               	bcf	status,0,c
 17834  003B8C  320C               	rrcf	??__RegsToCANID,f,c
 17835  003B8E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17836  003B90  D7FC               	goto	u15565
 17837  003B92  500C               	movf	??__RegsToCANID,w,c
 17838                           
 17839                           ;ECAN.c: 1166: ptr++;
 17840                           
 17841                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17842  003B94  D859               	call	PL60	;call to abstracted procedure
 17843  003B96  0E05               	movlw	5
 17844  003B98  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17845  003B9A                     u15575:
 17846  003B9A  90D8               	bcf	status,0,c
 17847  003B9C  320C               	rrcf	??__RegsToCANID,f,c
 17848  003B9E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17849  003BA0  D7FC               	goto	u15575
 17850  003BA2  500E               	movf	__RegsToCANID@Value,w,c
 17851  003BA4  6ED9               	movwf	fsr2l,c
 17852  003BA6  6ADA               	clrf	fsr2h,c
 17853  003BA8  500C               	movf	??__RegsToCANID,w,c
 17854  003BAA  12DF               	iorwf	indf2,f,c
 17855                           
 17856                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17857  003BAC  D83D               	call	PL40	;call to abstracted procedure
 17858  003BAE  6ADF               	clrf	indf2,c
 17859                           
 17860                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17861  003BB0  500E               	movf	__RegsToCANID@Value,w,c
 17862  003BB2  6ED9               	movwf	fsr2l,c
 17863  003BB4  6ADA               	clrf	fsr2h,c
 17864  003BB6  0E03               	movlw	3
 17865  003BB8  26D9               	addwf	fsr2l,f,c
 17866  003BBA  6ADA               	clrf	fsr2h,c
 17867  003BBC  0E00               	movlw	0
 17868  003BBE  6EDF               	movwf	indf2,c
 17869                           
 17870                           ;ECAN.c: 1170: }
 17871  003BC0  D032               	goto	l235
 17872  003BC2                     l12304:
 17873                           
 17874                           ;ECAN.c: 1171: else
 17875                           ;ECAN.c: 1172: {
 17876                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17877  003BC2  D832               	call	PL40	;call to abstracted procedure
 17878  003BC4  D855               	call	PL70	;call to abstracted procedure
 17879  003BC6                     u15585:
 17880  003BC6  90D8               	bcf	status,0,c
 17881  003BC8  360C               	rlcf	??__RegsToCANID,f,c
 17882  003BCA  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17883  003BCC  D7FC               	goto	u15585
 17884  003BCE  500C               	movf	??__RegsToCANID,w,c
 17885  003BD0  6EDF               	movwf	indf2,c
 17886                           
 17887                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17888  003BD2  500E               	movf	__RegsToCANID@Value,w,c
 17889  003BD4  6ED9               	movwf	fsr2l,c
 17890  003BD6  6ADA               	clrf	fsr2h,c
 17891  003BD8  0E03               	movlw	3
 17892  003BDA  26D9               	addwf	fsr2l,f,c
 17893  003BDC  D82C               	call	PL58	;call to abstracted procedure
 17894  003BDE  320C               	rrcf	??__RegsToCANID,f,c
 17895  003BE0  90D8               	bcf	status,0,c
 17896  003BE2  320C               	rrcf	??__RegsToCANID,f,c
 17897  003BE4  90D8               	bcf	status,0,c
 17898  003BE6  300C               	rrcf	??__RegsToCANID,w,c
 17899                           
 17900                           ;ECAN.c: 1176: ptr++;
 17901                           
 17902                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17903  003BE8  D82F               	call	PL60	;call to abstracted procedure
 17904  003BEA  0E03               	movlw	3
 17905  003BEC  160C               	andwf	??__RegsToCANID,f,c
 17906  003BEE  D81C               	call	PL40	;call to abstracted procedure
 17907  003BF0  500C               	movf	??__RegsToCANID,w,c
 17908  003BF2  12DF               	iorwf	indf2,f,c
 17909                           
 17910                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17911  003BF4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17912  003BF8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17913  003BFC  50DF               	movf	indf2,w,c
 17914  003BFE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17915  003C00  90D8               	bcf	status,0,c
 17916  003C02  320C               	rrcf	??__RegsToCANID,f,c
 17917  003C04  90D8               	bcf	status,0,c
 17918  003C06  320C               	rrcf	??__RegsToCANID,f,c
 17919  003C08  90D8               	bcf	status,0,c
 17920  003C0A  320C               	rrcf	??__RegsToCANID,f,c
 17921  003C0C  0E1C               	movlw	28
 17922  003C0E  160C               	andwf	??__RegsToCANID,f,c
 17923  003C10  D80B               	call	PL40	;call to abstracted procedure
 17924  003C12  500C               	movf	??__RegsToCANID,w,c
 17925  003C14  12DF               	iorwf	indf2,f,c
 17926                           
 17927                           ;ECAN.c: 1180: ptr++;
 17928                           
 17929                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17930  003C16  D822               	call	PL68	;call to abstracted procedure
 17931  003C18  2AE1               	incf	fsr1l,f,c
 17932  003C1A  6AE2               	clrf	fsr1h,c
 17933  003C1C  CFDF FFE7          	movff	indf2,indf1
 17934                           
 17935                           ;ECAN.c: 1182: ptr++;
 17936                           
 17937                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17938  003C20  D81D               	call	PL68	;call to abstracted procedure
 17939  003C22  CFDF FFE7          	movff	indf2,indf1
 17940  003C26                     l235:
 17941  003C26  0012               	return	
 17942  003C28                     __end_of__RegsToCANID:
 17943                           	opt stack 0
 17944  003C28                     PL40:
 17945                           	opt stack 23
 17946  003C28  500E               	movf	__RegsToCANID@Value,w,c
 17947  003C2A  6ED9               	movwf	fsr2l,c
 17948  003C2C  6ADA               	clrf	fsr2h,c
 17949  003C2E  0E02               	movlw	2
 17950  003C30  26D9               	addwf	fsr2l,f,c
 17951  003C32  6ADA               	clrf	fsr2h,c
 17952  003C34  0012               	return	
 17953  003C36                     __end_ofPL40:
 17954                           	opt stack 0
 17955  003C36                     PL58:
 17956                           	opt stack 23
 17957  003C36  6ADA               	clrf	fsr2h,c
 17958  003C38  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17959  003C3C  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17960  003C40  50E7               	movf	indf1,w,c
 17961  003C42  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17962  003C44  90D8               	bcf	status,0,c
 17963  003C46  0012               	return	
 17964  003C48                     __end_ofPL58:
 17965                           	opt stack 0
 17966  003C48                     PL60:
 17967                           	opt stack 23
 17968  003C48  6EDF               	movwf	indf2,c
 17969  003C4A  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17970  003C4C  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17971  003C4E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17972  003C52  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17973  003C56  50DF               	movf	indf2,w,c
 17974  003C58  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17975  003C5A  0012               	return	
 17976  003C5C                     __end_ofPL60:
 17977                           	opt stack 0
 17978  003C5C                     PL68:
 17979                           	opt stack 23
 17980  003C5C  4A08               	infsnz	__RegsToCANID@ptr,f,c
 17981  003C5E  2A09               	incf	__RegsToCANID@ptr+1,f,c
 17982  003C60  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17983  003C64  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17984  003C68  500E               	movf	__RegsToCANID@Value,w,c
 17985  003C6A  6EE1               	movwf	fsr1l,c
 17986  003C6C  6AE2               	clrf	fsr1h,c
 17987  003C6E  0012               	return	
 17988  003C70                     __end_ofPL68:
 17989                           	opt stack 0
 17990  003C70                     PL70:
 17991                           	opt stack 23
 17992  003C70  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17993  003C74  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17994  003C78  50E7               	movf	indf1,w,c
 17995  003C7A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 17996  003C7C  0E05               	movlw	5
 17997  003C7E  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 17998  003C80  0C05               	retlw	5
 17999  003C82                     __end_ofPL70:
 18000                           	opt stack 0
 18001                           tblptru	equ	0xFF8
 18002                           tblptrh	equ	0xFF7
 18003                           tblptrl	equ	0xFF6
 18004                           tablat	equ	0xFF5
 18005                           prodh	equ	0xFF4
 18006                           prodl	equ	0xFF3
 18007                           intcon	equ	0xFF2
 18008                           intcon2	equ	0xFF1
 18009                           postinc0	equ	0xFEE
 18010                           wreg	equ	0xFE8
 18011                           indf1	equ	0xFE7
 18012                           fsr1h	equ	0xFE2
 18013                           fsr1l	equ	0xFE1
 18014                           indf2	equ	0xFDF
 18015                           postinc2	equ	0xFDE
 18016                           postdec2	equ	0xFDD
 18017                           plusw2	equ	0xFDB
 18018                           fsr2h	equ	0xFDA
 18019                           fsr2l	equ	0xFD9
 18020                           status	equ	0xFD8
 18021                           
 18022 ;; *************** function __ECANPointBuffer *****************
 18023 ;; Defined at:
 18024 ;;		line 1207 in file "../ECAN.c"
 18025 ;; Parameters:    Size  Location     Type
 18026 ;;  b               1    wreg     unsigned char 
 18027 ;; Auto vars:     Size  Location     Type
 18028 ;;  b               1   10[COMRAM] unsigned char 
 18029 ;;  pt              2   11[COMRAM] PTR unsigned char 
 18030 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 18031 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 18032 ;; Return value:  Size  Location     Type
 18033 ;;                  2    7[COMRAM] PTR unsigned char 
 18034 ;; Registers used:
 18035 ;;		wreg, status,2, status,0
 18036 ;; Tracked objects:
 18037 ;;		On entry : F/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18041 ;;      Params:         3       0       0       0       0       0       0
 18042 ;;      Locals:         3       0       0       0       0       0       0
 18043 ;;      Temps:          0       0       0       0       0       0       0
 18044 ;;      Totals:         6       0       0       0       0       0       0
 18045 ;;Total ram usage:        6 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    2
 18048 ;; This function calls:
 18049 ;;		Nothing
 18050 ;; This function is called by:
 18051 ;;		_ECANReceiveMessage
 18052 ;; This function uses a non-reentrant model
 18053 ;;
 18054                           
 18055                           	psect	text62
 18056  0042EE                     __ptext62:
 18057                           	opt stack 0
 18058  0042EE                     __ECANPointBuffer:
 18059                           	opt stack 23
 18060                           
 18061                           ;incstack = 0
 18062                           ;incstack = 0
 18063                           ;__ECANPointBuffer@b stored from wreg
 18064  0042EE  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;ECAN.c: 1208: BYTE* pt;
 18068                           ;ECAN.c: 1210: switch(b)
 18069  0042F2  D024               	goto	l12290
 18070  0042F4                     l12272:
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 18074  0042F4  0E0F               	movlw	15	;volatile
 18075  0042F6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18076  0042F8  0E60               	movlw	96	;volatile
 18077  0042FA  D01E               	goto	L66
 18078  0042FC                     l12274:
 18079                           
 18080                           ; BSR set to: 0
 18081                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 18082  0042FC  010F               	movlb	15	; () banked
 18083  0042FE  0E0F               	movlw	15	;volatile
 18084  004300  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18085  004302  0E50               	movlw	80	;volatile
 18086  004304  D019               	goto	L66
 18087  004306                     l12276:
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 18091  004306  010E               	movlb	14	; () banked
 18092  004308  0E0E               	movlw	14	;volatile
 18093  00430A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18094  00430C  0E20               	movlw	32	;volatile
 18095  00430E  D014               	goto	L66
 18096  004310                     l12278:
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 18100  004310  010E               	movlb	14	; () banked
 18101  004312  0E0E               	movlw	14	;volatile
 18102  004314  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18103  004316  0E30               	movlw	48	;volatile
 18104  004318  D00F               	goto	L66
 18105  00431A                     l12280:
 18106                           
 18107                           ; BSR set to: 0
 18108                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 18109  00431A  010E               	movlb	14	; () banked
 18110  00431C  0E0E               	movlw	14	;volatile
 18111  00431E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18112  004320  0E40               	movlw	64	;volatile
 18113  004322  D00A               	goto	L66
 18114  004324                     l12282:
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 18118  004324  010E               	movlb	14	; () banked
 18119  004326  0E0E               	movlw	14	;volatile
 18120  004328  D7EB               	goto	L67
 18121  00432A                     l12284:
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 18125  00432A  010E               	movlb	14	; () banked
 18126  00432C  0E0E               	movlw	14	;volatile
 18127  00432E  D7E3               	goto	L68
 18128  004330                     l12286:
 18129                           
 18130                           ; BSR set to: 0
 18131                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 18132  004330  010E               	movlb	14	; () banked
 18133  004332  0E0E               	movlw	14	;volatile
 18134  004334  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 18135  004336  0E70               	movlw	112	;volatile
 18136  004338                     L66:
 18137  004338  6E0C               	movwf	__ECANPointBuffer@pt,c
 18138                           
 18139                           ;ECAN.c: 1235: break;
 18140  00433A  D00F               	goto	l240
 18141  00433C                     l12290:
 18142                           
 18143                           ; BSR set to: 0
 18144  00433C  500B               	movf	__ECANPointBuffer@b,w,c
 18145                           
 18146                           ; Switch size 1, requested type "space"
 18147                           ; Number of cases is 7, Range of values is 0 to 6
 18148                           ; switch strategies available:
 18149                           ; Name         Instructions Cycles
 18150                           ; simple_byte           22    12 (average)
 18151                           ;	Chosen strategy is simple_byte
 18152  00433E  E0DA               	bz	l12272
 18153  004340  0A01               	xorlw	1	; case 1
 18154  004342  E0DC               	bz	l12274
 18155  004344  0A03               	xorlw	3	; case 2
 18156  004346  E0DF               	bz	l12276
 18157  004348  0A01               	xorlw	1	; case 3
 18158  00434A  E0E2               	bz	l12278
 18159  00434C  0A07               	xorlw	7	; case 4
 18160  00434E  E0E5               	bz	l12280
 18161  004350  0A01               	xorlw	1	; case 5
 18162  004352  E0E8               	bz	l12282
 18163  004354  0A03               	xorlw	3	; case 6
 18164  004356  E0E9               	bz	l12284
 18165  004358  D7EB               	goto	l12286
 18166  00435A                     l240:
 18167                           
 18168                           ;ECAN.c: 1237: return (pt);
 18169  00435A  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 18170  00435E  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 18171  004362  0012               	return	
 18172  004364                     __end_of__ECANPointBuffer:
 18173                           	opt stack 0
 18174                           tblptru	equ	0xFF8
 18175                           tblptrh	equ	0xFF7
 18176                           tblptrl	equ	0xFF6
 18177                           tablat	equ	0xFF5
 18178                           prodh	equ	0xFF4
 18179                           prodl	equ	0xFF3
 18180                           intcon	equ	0xFF2
 18181                           intcon2	equ	0xFF1
 18182                           postinc0	equ	0xFEE
 18183                           wreg	equ	0xFE8
 18184                           indf1	equ	0xFE7
 18185                           fsr1h	equ	0xFE2
 18186                           fsr1l	equ	0xFE1
 18187                           indf2	equ	0xFDF
 18188                           postinc2	equ	0xFDE
 18189                           postdec2	equ	0xFDD
 18190                           plusw2	equ	0xFDB
 18191                           fsr2h	equ	0xFDA
 18192                           fsr2l	equ	0xFD9
 18193                           status	equ	0xFD8
 18194                           
 18195 ;; *************** function _vscp_check_pstorage *****************
 18196 ;; Defined at:
 18197 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 18198 ;; Parameters:    Size  Location     Type
 18199 ;;		None
 18200 ;; Auto vars:     Size  Location     Type
 18201 ;;		None
 18202 ;; Return value:  Size  Location     Type
 18203 ;;                  1    wreg      unsigned char 
 18204 ;; Registers used:
 18205 ;;		wreg, status,2, status,0, cstack
 18206 ;; Tracked objects:
 18207 ;;		On entry : 0/0
 18208 ;;		On exit  : 0/0
 18209 ;;		Unchanged: 0/0
 18210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18211 ;;      Params:         0       0       0       0       0       0       0
 18212 ;;      Locals:         0       0       0       0       0       0       0
 18213 ;;      Temps:          0       0       0       0       0       0       0
 18214 ;;      Totals:         0       0       0       0       0       0       0
 18215 ;;Total ram usage:        0 bytes
 18216 ;; Hardware stack levels used:    1
 18217 ;; Hardware stack levels required when called:    4
 18218 ;; This function calls:
 18219 ;;		_vscp_writeNicknamePermanent
 18220 ;;		_vscp_getSegmentCRC
 18221 ;;		_vscp_setSegmentCRC
 18222 ;;		_vscp_setControlByte
 18223 ;; This function is called by:
 18224 ;;		_main
 18225 ;; This function uses a non-reentrant model
 18226 ;;
 18227                           
 18228                           	psect	text63
 18229  00472C                     __ptext63:
 18230                           	opt stack 0
 18231  00472C                     _vscp_check_pstorage:
 18232                           	opt stack 25
 18233                           
 18234                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 18235                           
 18236                           ;incstack = 0
 18237                           ;incstack = 0
 18238  00472C  EC9B  F024         	call	_vscp_getSegmentCRC	;wreg free
 18239  004730  0BC0               	andlw	192
 18240  004732  0A40               	xorlw	64
 18241  004734  E102               	bnz	l12584
 18242                           
 18243                           ;vscp_firmware.c: 172: return !0;
 18244  004736  0E01               	movlw	1
 18245  004738  D00A               	goto	l1260
 18246  00473A                     l12584:
 18247                           
 18248                           ;vscp_firmware.c: 173: }
 18249                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 18250  00473A  0EFF               	movlw	255
 18251  00473C  EC3E  F024         	call	_vscp_writeNicknamePermanent
 18252                           
 18253                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 18254  004740  0E00               	movlw	0
 18255  004742  EC33  F024         	call	_vscp_setSegmentCRC
 18256                           
 18257                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 18258  004746  0EA0               	movlw	160
 18259  004748  EC28  F024         	call	_vscp_setControlByte
 18260                           
 18261                           ;vscp_firmware.c: 185: return 0;
 18262  00474C  0E00               	movlw	0
 18263  00474E                     l1260:
 18264  00474E  0012               	return	
 18265  004750                     __end_of_vscp_check_pstorage:
 18266                           	opt stack 0
 18267                           tblptru	equ	0xFF8
 18268                           tblptrh	equ	0xFF7
 18269                           tblptrl	equ	0xFF6
 18270                           tablat	equ	0xFF5
 18271                           prodh	equ	0xFF4
 18272                           prodl	equ	0xFF3
 18273                           intcon	equ	0xFF2
 18274                           intcon2	equ	0xFF1
 18275                           postinc0	equ	0xFEE
 18276                           wreg	equ	0xFE8
 18277                           indf1	equ	0xFE7
 18278                           fsr1h	equ	0xFE2
 18279                           fsr1l	equ	0xFE1
 18280                           indf2	equ	0xFDF
 18281                           postinc2	equ	0xFDE
 18282                           postdec2	equ	0xFDD
 18283                           plusw2	equ	0xFDB
 18284                           fsr2h	equ	0xFDA
 18285                           fsr2l	equ	0xFD9
 18286                           status	equ	0xFD8
 18287                           
 18288 ;; *************** function _vscp_setControlByte *****************
 18289 ;; Defined at:
 18290 ;;		line 3443 in file "../main.c"
 18291 ;; Parameters:    Size  Location     Type
 18292 ;;  ctrl            1    wreg     unsigned char 
 18293 ;; Auto vars:     Size  Location     Type
 18294 ;;  ctrl            1   11[COMRAM] unsigned char 
 18295 ;; Return value:  Size  Location     Type
 18296 ;;		None               void
 18297 ;; Registers used:
 18298 ;;		wreg, status,2, cstack
 18299 ;; Tracked objects:
 18300 ;;		On entry : 0/0
 18301 ;;		On exit  : 0/0
 18302 ;;		Unchanged: 0/0
 18303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18304 ;;      Params:         0       0       0       0       0       0       0
 18305 ;;      Locals:         1       0       0       0       0       0       0
 18306 ;;      Temps:          0       0       0       0       0       0       0
 18307 ;;      Totals:         1       0       0       0       0       0       0
 18308 ;;Total ram usage:        1 bytes
 18309 ;; Hardware stack levels used:    1
 18310 ;; Hardware stack levels required when called:    3
 18311 ;; This function calls:
 18312 ;;		_Busy_eep
 18313 ;;		_Write_b_eep
 18314 ;; This function is called by:
 18315 ;;		_vscp_check_pstorage
 18316 ;; This function uses a non-reentrant model
 18317 ;;
 18318                           
 18319                           	psect	text64
 18320  004850                     __ptext64:
 18321                           	opt stack 0
 18322  004850                     _vscp_setControlByte:
 18323                           	opt stack 25
 18324                           
 18325                           ;incstack = 0
 18326                           ;incstack = 0
 18327                           ;vscp_setControlByte@ctrl stored from wreg
 18328  004850  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 18329                           
 18330                           ;main.c: 3444: (Busy_eep(), Write_b_eep(0x03,ctrl));
 18331  004854  ECA4  F024         	call	_Busy_eep	;wreg free
 18332  004858  6A09               	clrf	?_Write_b_eep+1,c
 18333  00485A  0E03               	movlw	3
 18334  00485C  6E08               	movwf	?_Write_b_eep,c
 18335  00485E  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18336  004862  EF85  F022         	goto	_Write_b_eep	;wreg free
 18337  004866                     __end_of_vscp_setControlByte:
 18338                           	opt stack 0
 18339                           tblptru	equ	0xFF8
 18340                           tblptrh	equ	0xFF7
 18341                           tblptrl	equ	0xFF6
 18342                           tablat	equ	0xFF5
 18343                           prodh	equ	0xFF4
 18344                           prodl	equ	0xFF3
 18345                           intcon	equ	0xFF2
 18346                           intcon2	equ	0xFF1
 18347                           postinc0	equ	0xFEE
 18348                           wreg	equ	0xFE8
 18349                           indf1	equ	0xFE7
 18350                           fsr1h	equ	0xFE2
 18351                           fsr1l	equ	0xFE1
 18352                           indf2	equ	0xFDF
 18353                           postinc2	equ	0xFDE
 18354                           postdec2	equ	0xFDD
 18355                           plusw2	equ	0xFDB
 18356                           fsr2h	equ	0xFDA
 18357                           fsr2l	equ	0xFD9
 18358                           status	equ	0xFD8
 18359                           
 18360 ;; *************** function _vscp_setSegmentCRC *****************
 18361 ;; Defined at:
 18362 ;;		line 3434 in file "../main.c"
 18363 ;; Parameters:    Size  Location     Type
 18364 ;;  crc             1    wreg     unsigned char 
 18365 ;; Auto vars:     Size  Location     Type
 18366 ;;  crc             1   11[COMRAM] unsigned char 
 18367 ;; Return value:  Size  Location     Type
 18368 ;;		None               void
 18369 ;; Registers used:
 18370 ;;		wreg, status,2, cstack
 18371 ;; Tracked objects:
 18372 ;;		On entry : 0/0
 18373 ;;		On exit  : 0/0
 18374 ;;		Unchanged: 0/0
 18375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18376 ;;      Params:         0       0       0       0       0       0       0
 18377 ;;      Locals:         1       0       0       0       0       0       0
 18378 ;;      Temps:          0       0       0       0       0       0       0
 18379 ;;      Totals:         1       0       0       0       0       0       0
 18380 ;;Total ram usage:        1 bytes
 18381 ;; Hardware stack levels used:    1
 18382 ;; Hardware stack levels required when called:    3
 18383 ;; This function calls:
 18384 ;;		_Busy_eep
 18385 ;;		_Write_b_eep
 18386 ;; This function is called by:
 18387 ;;		_vscp_check_pstorage
 18388 ;;		_vscp_handleProbeState
 18389 ;;		_vscp_handleHeartbeat
 18390 ;;		_vscp_handleSetNickname
 18391 ;; This function uses a non-reentrant model
 18392 ;;
 18393                           
 18394                           	psect	text65
 18395  004866                     __ptext65:
 18396                           	opt stack 0
 18397  004866                     _vscp_setSegmentCRC:
 18398                           	opt stack 24
 18399                           
 18400                           ;incstack = 0
 18401                           ;incstack = 0
 18402                           ;vscp_setSegmentCRC@crc stored from wreg
 18403  004866  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 18404                           
 18405                           ;main.c: 3435: (Busy_eep(), Write_b_eep(0x02,crc));
 18406  00486A  ECA4  F024         	call	_Busy_eep	;wreg free
 18407  00486E  6A09               	clrf	?_Write_b_eep+1,c
 18408  004870  0E02               	movlw	2
 18409  004872  6E08               	movwf	?_Write_b_eep,c
 18410  004874  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 18411  004878  EF85  F022         	goto	_Write_b_eep	;wreg free
 18412  00487C                     __end_of_vscp_setSegmentCRC:
 18413                           	opt stack 0
 18414                           tblptru	equ	0xFF8
 18415                           tblptrh	equ	0xFF7
 18416                           tblptrl	equ	0xFF6
 18417                           tablat	equ	0xFF5
 18418                           prodh	equ	0xFF4
 18419                           prodl	equ	0xFF3
 18420                           intcon	equ	0xFF2
 18421                           intcon2	equ	0xFF1
 18422                           postinc0	equ	0xFEE
 18423                           wreg	equ	0xFE8
 18424                           indf1	equ	0xFE7
 18425                           fsr1h	equ	0xFE2
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           plusw2	equ	0xFDB
 18431                           fsr2h	equ	0xFDA
 18432                           fsr2l	equ	0xFD9
 18433                           status	equ	0xFD8
 18434                           
 18435 ;; *************** function _vscp_getSegmentCRC *****************
 18436 ;; Defined at:
 18437 ;;		line 3425 in file "../main.c"
 18438 ;; Parameters:    Size  Location     Type
 18439 ;;		None
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;		None
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  1    wreg      unsigned char 
 18444 ;; Registers used:
 18445 ;;		wreg, status,2, cstack
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18451 ;;      Params:         0       0       0       0       0       0       0
 18452 ;;      Locals:         0       0       0       0       0       0       0
 18453 ;;      Temps:          0       0       0       0       0       0       0
 18454 ;;      Totals:         0       0       0       0       0       0       0
 18455 ;;Total ram usage:        0 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    3
 18458 ;; This function calls:
 18459 ;;		_Read_b_eep
 18460 ;; This function is called by:
 18461 ;;		_vscp_check_pstorage
 18462 ;;		_vscp_handleHeartbeat
 18463 ;; This function uses a non-reentrant model
 18464 ;;
 18465                           
 18466                           	psect	text66
 18467  004936                     __ptext66:
 18468                           	opt stack 0
 18469  004936                     _vscp_getSegmentCRC:
 18470                           	opt stack 24
 18471                           
 18472                           ;main.c: 3426: return Read_b_eep(0x02);
 18473                           
 18474                           ;incstack = 0
 18475                           ;incstack = 0
 18476  004936  6A09               	clrf	?_Read_b_eep+1,c
 18477  004938  0E02               	movlw	2
 18478  00493A  6E08               	movwf	?_Read_b_eep,c
 18479  00493C  EF70  F024         	goto	_Read_b_eep	;wreg free
 18480  004940                     __end_of_vscp_getSegmentCRC:
 18481                           	opt stack 0
 18482                           tblptru	equ	0xFF8
 18483                           tblptrh	equ	0xFF7
 18484                           tblptrl	equ	0xFF6
 18485                           tablat	equ	0xFF5
 18486                           prodh	equ	0xFF4
 18487                           prodl	equ	0xFF3
 18488                           intcon	equ	0xFF2
 18489                           intcon2	equ	0xFF1
 18490                           postinc0	equ	0xFEE
 18491                           wreg	equ	0xFE8
 18492                           indf1	equ	0xFE7
 18493                           fsr1h	equ	0xFE2
 18494                           fsr1l	equ	0xFE1
 18495                           indf2	equ	0xFDF
 18496                           postinc2	equ	0xFDE
 18497                           postdec2	equ	0xFDD
 18498                           plusw2	equ	0xFDB
 18499                           fsr2h	equ	0xFDA
 18500                           fsr2l	equ	0xFD9
 18501                           status	equ	0xFD8
 18502                           
 18503 ;; *************** function _vscp_writeNicknamePermanent *****************
 18504 ;; Defined at:
 18505 ;;		line 1385 in file "../main.c"
 18506 ;; Parameters:    Size  Location     Type
 18507 ;;  nickname        1    wreg     unsigned char 
 18508 ;; Auto vars:     Size  Location     Type
 18509 ;;  nickname        1   11[COMRAM] unsigned char 
 18510 ;; Return value:  Size  Location     Type
 18511 ;;		None               void
 18512 ;; Registers used:
 18513 ;;		wreg, status,2, cstack
 18514 ;; Tracked objects:
 18515 ;;		On entry : 0/0
 18516 ;;		On exit  : 0/0
 18517 ;;		Unchanged: 0/0
 18518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18519 ;;      Params:         0       0       0       0       0       0       0
 18520 ;;      Locals:         1       0       0       0       0       0       0
 18521 ;;      Temps:          0       0       0       0       0       0       0
 18522 ;;      Totals:         1       0       0       0       0       0       0
 18523 ;;Total ram usage:        1 bytes
 18524 ;; Hardware stack levels used:    1
 18525 ;; Hardware stack levels required when called:    3
 18526 ;; This function calls:
 18527 ;;		_Busy_eep
 18528 ;;		_Write_b_eep
 18529 ;; This function is called by:
 18530 ;;		_vscp_check_pstorage
 18531 ;;		_vscp_handleProbeState
 18532 ;;		_vscp_handleHeartbeat
 18533 ;;		_vscp_handleSetNickname
 18534 ;;		_vscp_handleDropNickname
 18535 ;; This function uses a non-reentrant model
 18536 ;;
 18537                           
 18538                           	psect	text67
 18539  00487C                     __ptext67:
 18540                           	opt stack 0
 18541  00487C                     _vscp_writeNicknamePermanent:
 18542                           	opt stack 24
 18543                           
 18544                           ;incstack = 0
 18545                           ;incstack = 0
 18546                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18547  00487C  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18548                           
 18549                           ;main.c: 1386: (Busy_eep(), Write_b_eep(0x01,nickname));
 18550  004880  ECA4  F024         	call	_Busy_eep	;wreg free
 18551  004884  6A09               	clrf	?_Write_b_eep+1,c
 18552  004886  0E01               	movlw	1
 18553  004888  6E08               	movwf	?_Write_b_eep,c
 18554  00488A  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18555  00488E  EF85  F022         	goto	_Write_b_eep	;wreg free
 18556  004892                     __end_of_vscp_writeNicknamePermanent:
 18557                           	opt stack 0
 18558                           tblptru	equ	0xFF8
 18559                           tblptrh	equ	0xFF7
 18560                           tblptrl	equ	0xFF6
 18561                           tablat	equ	0xFF5
 18562                           prodh	equ	0xFF4
 18563                           prodl	equ	0xFF3
 18564                           intcon	equ	0xFF2
 18565                           intcon2	equ	0xFF1
 18566                           postinc0	equ	0xFEE
 18567                           wreg	equ	0xFE8
 18568                           indf1	equ	0xFE7
 18569                           fsr1h	equ	0xFE2
 18570                           fsr1l	equ	0xFE1
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           plusw2	equ	0xFDB
 18575                           fsr2h	equ	0xFDA
 18576                           fsr2l	equ	0xFD9
 18577                           status	equ	0xFD8
 18578                           
 18579 ;; *************** function _Write_b_eep *****************
 18580 ;; Defined at:
 18581 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 18582 ;; Parameters:    Size  Location     Type
 18583 ;;  badd            2    7[COMRAM] unsigned int 
 18584 ;;  bdat            1    9[COMRAM] unsigned char 
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 18587 ;; Return value:  Size  Location     Type
 18588 ;;		None               void
 18589 ;; Registers used:
 18590 ;;		wreg, status,2
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18596 ;;      Params:         3       0       0       0       0       0       0
 18597 ;;      Locals:         1       0       0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0
 18599 ;;      Totals:         4       0       0       0       0       0       0
 18600 ;;Total ram usage:        4 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    2
 18603 ;; This function calls:
 18604 ;;		Nothing
 18605 ;; This function is called by:
 18606 ;;		_main
 18607 ;;		_init_app_eeprom
 18608 ;;		_vscp_setGUID
 18609 ;;		_vscp_setManufacturerId
 18610 ;;		_vscp_writeNicknamePermanent
 18611 ;;		_vscp_writeAppReg
 18612 ;;		_vscp_setUserID
 18613 ;;		_vscp_setSegmentCRC
 18614 ;;		_vscp_setControlByte
 18615 ;;		_vscp_goBootloaderMode
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           	psect	text68
 18620  00450A                     __ptext68:
 18621                           	opt stack 0
 18622  00450A                     _Write_b_eep:
 18623                           	opt stack 23
 18624                           
 18625                           ;incstack = 0
 18626                           ;incstack = 0
 18627  00450A  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 18628  00450E  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 18629  004512  9EA6               	bcf	4006,7,c	;volatile
 18630  004514  9CA6               	bcf	4006,6,c	;volatile
 18631  004516  84A6               	bsf	4006,2,c	;volatile
 18632  004518  0E00               	movlw	0
 18633  00451A  BEF2               	btfsc	intcon,7,c	;volatile
 18634  00451C  0E01               	movlw	1
 18635  00451E  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18636  004520  9EF2               	bcf	intcon,7,c	;volatile
 18637  004522  0E55               	movlw	85
 18638  004524  6EA7               	movwf	4007,c	;volatile
 18639  004526  0EAA               	movlw	170
 18640  004528  6EA7               	movwf	4007,c	;volatile
 18641  00452A  82A6               	bsf	4006,1,c	;volatile
 18642  00452C                     l1535:
 18643  00452C  B2A6               	btfsc	4006,1,c	;volatile
 18644  00452E  D7FE               	goto	l1535
 18645  004530  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18646  004532  D002               	bra	u16265
 18647  004534  9EF2               	bcf	intcon,7,c	;volatile
 18648  004536  D001               	bra	u16266
 18649  004538                     u16265:
 18650  004538  8EF2               	bsf	intcon,7,c	;volatile
 18651  00453A                     u16266:
 18652  00453A  94A6               	bcf	4006,2,c	;volatile
 18653  00453C  0012               	return	
 18654  00453E                     __end_of_Write_b_eep:
 18655                           	opt stack 0
 18656                           tblptru	equ	0xFF8
 18657                           tblptrh	equ	0xFF7
 18658                           tblptrl	equ	0xFF6
 18659                           tablat	equ	0xFF5
 18660                           prodh	equ	0xFF4
 18661                           prodl	equ	0xFF3
 18662                           intcon	equ	0xFF2
 18663                           intcon2	equ	0xFF1
 18664                           postinc0	equ	0xFEE
 18665                           wreg	equ	0xFE8
 18666                           indf1	equ	0xFE7
 18667                           fsr1h	equ	0xFE2
 18668                           fsr1l	equ	0xFE1
 18669                           indf2	equ	0xFDF
 18670                           postinc2	equ	0xFDE
 18671                           postdec2	equ	0xFDD
 18672                           plusw2	equ	0xFDB
 18673                           fsr2h	equ	0xFDA
 18674                           fsr2l	equ	0xFD9
 18675                           status	equ	0xFD8
 18676                           
 18677 ;; *************** function _Busy_eep *****************
 18678 ;; Defined at:
 18679 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 18680 ;; Parameters:    Size  Location     Type
 18681 ;;		None
 18682 ;; Auto vars:     Size  Location     Type
 18683 ;;		None
 18684 ;; Return value:  Size  Location     Type
 18685 ;;		None               void
 18686 ;; Registers used:
 18687 ;;		None
 18688 ;; Tracked objects:
 18689 ;;		On entry : 0/0
 18690 ;;		On exit  : 0/0
 18691 ;;		Unchanged: 0/0
 18692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18693 ;;      Params:         0       0       0       0       0       0       0
 18694 ;;      Locals:         0       0       0       0       0       0       0
 18695 ;;      Temps:          0       0       0       0       0       0       0
 18696 ;;      Totals:         0       0       0       0       0       0       0
 18697 ;;Total ram usage:        0 bytes
 18698 ;; Hardware stack levels used:    1
 18699 ;; Hardware stack levels required when called:    2
 18700 ;; This function calls:
 18701 ;;		Nothing
 18702 ;; This function is called by:
 18703 ;;		_main
 18704 ;;		_init_app_eeprom
 18705 ;;		_vscp_setGUID
 18706 ;;		_vscp_setManufacturerId
 18707 ;;		_vscp_writeNicknamePermanent
 18708 ;;		_vscp_writeAppReg
 18709 ;;		_vscp_setUserID
 18710 ;;		_vscp_setSegmentCRC
 18711 ;;		_vscp_setControlByte
 18712 ;;		_vscp_goBootloaderMode
 18713 ;; This function uses a non-reentrant model
 18714 ;;
 18715                           
 18716                           	psect	text69
 18717  004948                     __ptext69:
 18718                           	opt stack 0
 18719  004948                     _Busy_eep:
 18720                           	opt stack 23
 18721  004948                     l1510:
 18722  004948  A2A6               	btfss	4006,1,c	;volatile
 18723  00494A  0012               	return	
 18724  00494C  D7FD               	goto	l1510
 18725  00494E                     __end_of_Busy_eep:
 18726                           	opt stack 0
 18727                           tblptru	equ	0xFF8
 18728                           tblptrh	equ	0xFF7
 18729                           tblptrl	equ	0xFF6
 18730                           tablat	equ	0xFF5
 18731                           prodh	equ	0xFF4
 18732                           prodl	equ	0xFF3
 18733                           intcon	equ	0xFF2
 18734                           intcon2	equ	0xFF1
 18735                           postinc0	equ	0xFEE
 18736                           wreg	equ	0xFE8
 18737                           indf1	equ	0xFE7
 18738                           fsr1h	equ	0xFE2
 18739                           fsr1l	equ	0xFE1
 18740                           indf2	equ	0xFDF
 18741                           postinc2	equ	0xFDE
 18742                           postdec2	equ	0xFDD
 18743                           plusw2	equ	0xFDB
 18744                           fsr2h	equ	0xFDA
 18745                           fsr2l	equ	0xFD9
 18746                           status	equ	0xFD8
 18747                           
 18748 ;; *************** function _init *****************
 18749 ;; Defined at:
 18750 ;;		line 641 in file "../main.c"
 18751 ;; Parameters:    Size  Location     Type
 18752 ;;		None
 18753 ;; Auto vars:     Size  Location     Type
 18754 ;;  dir             1    0        unsigned char 
 18755 ;; Return value:  Size  Location     Type
 18756 ;;		None               void
 18757 ;; Registers used:
 18758 ;;		wreg, status,2, status,0, cstack
 18759 ;; Tracked objects:
 18760 ;;		On entry : 0/0
 18761 ;;		On exit  : 0/0
 18762 ;;		Unchanged: 0/0
 18763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18764 ;;      Params:         0       0       0       0       0       0       0
 18765 ;;      Locals:         0       0       0       0       0       0       0
 18766 ;;      Temps:          0       0       0       0       0       0       0
 18767 ;;      Totals:         0       0       0       0       0       0       0
 18768 ;;Total ram usage:        0 bytes
 18769 ;; Hardware stack levels used:    1
 18770 ;; Hardware stack levels required when called:    4
 18771 ;; This function calls:
 18772 ;;		_ECANInitialize
 18773 ;;		_WriteTimer0
 18774 ;;		_OpenTimer0
 18775 ;; This function is called by:
 18776 ;;		_main
 18777 ;; This function uses a non-reentrant model
 18778 ;;
 18779                           
 18780                           	psect	text70
 18781  004446                     __ptext70:
 18782                           	opt stack 0
 18783  004446                     _init:
 18784                           	opt stack 25
 18785                           
 18786                           ;main.c: 642: unsigned char dir;
 18787                           ;main.c: 650: ADCON1 = 0x0f;
 18788                           
 18789                           ;incstack = 0
 18790                           ;incstack = 0
 18791  004446  0E0F               	movlw	15
 18792  004448  6EC1               	movwf	4033,c	;volatile
 18793                           
 18794                           ;main.c: 660: TRISA = 0b00000000;
 18795  00444A  6A92               	clrf	3986,c	;volatile
 18796                           
 18797                           ;main.c: 661: PORTA = 0x00;
 18798  00444C  6A80               	clrf	3968,c	;volatile
 18799                           
 18800                           ;main.c: 673: TRISB = 0b00001000;
 18801  00444E  0E08               	movlw	8
 18802  004450  6E93               	movwf	3987,c	;volatile
 18803                           
 18804                           ;main.c: 674: PORTB = 0x00;
 18805  004452  6A81               	clrf	3969,c	;volatile
 18806                           
 18807                           ;main.c: 684: TRISC = 0b00000001;
 18808  004454  0E01               	movlw	1
 18809  004456  6E94               	movwf	3988,c	;volatile
 18810                           
 18811                           ;main.c: 685: PORTC = 0x00;
 18812  004458  6A82               	clrf	3970,c	;volatile
 18813                           
 18814                           ;main.c: 711: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 18815  00445A  0E92               	movlw	146
 18816  00445C  ECD8  F023         	call	_OpenTimer0
 18817                           
 18818                           ;main.c: 712: WriteTimer0( 0xfb1d );
 18819  004460  0EFB               	movlw	251
 18820  004462  6E09               	movwf	?_WriteTimer0+1,c
 18821  004464  0E1D               	movlw	29
 18822  004466  6E08               	movwf	?_WriteTimer0,c
 18823  004468  EC67  F024         	call	_WriteTimer0	;wreg free
 18824                           
 18825                           ;main.c: 715: PORTBbits.RB0 = 0;
 18826  00446C  9081               	bcf	3969,0,c	;volatile
 18827                           
 18828                           ;main.c: 716: PORTBbits.RB1 = 0;
 18829  00446E  9281               	bcf	3969,1,c	;volatile
 18830                           
 18831                           ;main.c: 717: PORTCbits.RC3 = 0;
 18832  004470  9682               	bcf	3970,3,c	;volatile
 18833                           
 18834                           ;main.c: 718: PORTCbits.RC4 = 0;
 18835  004472  9882               	bcf	3970,4,c	;volatile
 18836                           
 18837                           ;main.c: 719: PORTCbits.RC5 = 0;
 18838  004474  9A82               	bcf	3970,5,c	;volatile
 18839                           
 18840                           ;main.c: 720: PORTCbits.RC6 = 0;
 18841  004476  9C82               	bcf	3970,6,c	;volatile
 18842                           
 18843                           ;main.c: 721: PORTCbits.RC7 = 0;
 18844  004478  9E82               	bcf	3970,7,c	;volatile
 18845                           
 18846                           ;main.c: 722: PORTAbits.RA2 = 0;
 18847  00447A  9480               	bcf	3968,2,c	;volatile
 18848                           
 18849                           ;main.c: 723: PORTAbits.RA1 = 0;
 18850  00447C  9280               	bcf	3968,1,c	;volatile
 18851                           
 18852                           ;main.c: 724: PORTAbits.RA0 = 0;
 18853  00447E  9080               	bcf	3968,0,c	;volatile
 18854                           
 18855                           ;main.c: 727: ECANInitialize();
 18856  004480  ECF0  F020         	call	_ECANInitialize	;wreg free
 18857                           
 18858                           ;main.c: 748: INTCONbits.PEIE = 1;
 18859  004484  8CF2               	bsf	intcon,6,c	;volatile
 18860                           
 18861                           ;main.c: 751: INTCONbits.GIE = 1;
 18862  004486  8EF2               	bsf	intcon,7,c	;volatile
 18863  004488  0012               	return	
 18864  00448A                     __end_of_init:
 18865                           	opt stack 0
 18866                           tblptru	equ	0xFF8
 18867                           tblptrh	equ	0xFF7
 18868                           tblptrl	equ	0xFF6
 18869                           tablat	equ	0xFF5
 18870                           prodh	equ	0xFF4
 18871                           prodl	equ	0xFF3
 18872                           intcon	equ	0xFF2
 18873                           intcon2	equ	0xFF1
 18874                           postinc0	equ	0xFEE
 18875                           wreg	equ	0xFE8
 18876                           indf1	equ	0xFE7
 18877                           fsr1h	equ	0xFE2
 18878                           fsr1l	equ	0xFE1
 18879                           indf2	equ	0xFDF
 18880                           postinc2	equ	0xFDE
 18881                           postdec2	equ	0xFDD
 18882                           plusw2	equ	0xFDB
 18883                           fsr2h	equ	0xFDA
 18884                           fsr2l	equ	0xFD9
 18885                           status	equ	0xFD8
 18886                           
 18887 ;; *************** function _OpenTimer0 *****************
 18888 ;; Defined at:
 18889 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18890 ;; Parameters:    Size  Location     Type
 18891 ;;  config          1    wreg     unsigned char 
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;  config          1    7[COMRAM] unsigned char 
 18894 ;; Return value:  Size  Location     Type
 18895 ;;		None               void
 18896 ;; Registers used:
 18897 ;;		wreg, status,2, status,0
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18903 ;;      Params:         0       0       0       0       0       0       0
 18904 ;;      Locals:         1       0       0       0       0       0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0
 18906 ;;      Totals:         1       0       0       0       0       0       0
 18907 ;;Total ram usage:        1 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    2
 18910 ;; This function calls:
 18911 ;;		Nothing
 18912 ;; This function is called by:
 18913 ;;		_init
 18914 ;; This function uses a non-reentrant model
 18915 ;;
 18916                           
 18917                           	psect	text71
 18918  0047B0                     __ptext71:
 18919                           	opt stack 0
 18920  0047B0                     _OpenTimer0:
 18921                           	opt stack 26
 18922                           
 18923                           ;incstack = 0
 18924                           ;incstack = 0
 18925                           ;OpenTimer0@config stored from wreg
 18926  0047B0  CFE8 F008          	movff	wreg,OpenTimer0@config
 18927  0047B4  5008               	movf	OpenTimer0@config,w,c
 18928  0047B6  0B7F               	andlw	127
 18929  0047B8  6ED5               	movwf	4053,c	;volatile
 18930  0047BA  6AD7               	clrf	4055,c	;volatile
 18931  0047BC  6AD6               	clrf	4054,c	;volatile
 18932  0047BE  94F2               	bcf	intcon,2,c	;volatile
 18933  0047C0  AE08               	btfss	OpenTimer0@config,7,c
 18934  0047C2  D002               	goto	l1551
 18935  0047C4  8AF2               	bsf	intcon,5,c	;volatile
 18936  0047C6  D001               	goto	l1552
 18937  0047C8                     l1551:
 18938  0047C8  9AF2               	bcf	intcon,5,c	;volatile
 18939  0047CA                     l1552:
 18940  0047CA  8ED5               	bsf	4053,7,c	;volatile
 18941  0047CC  0012               	return	
 18942  0047CE                     __end_of_OpenTimer0:
 18943                           	opt stack 0
 18944                           tblptru	equ	0xFF8
 18945                           tblptrh	equ	0xFF7
 18946                           tblptrl	equ	0xFF6
 18947                           tablat	equ	0xFF5
 18948                           prodh	equ	0xFF4
 18949                           prodl	equ	0xFF3
 18950                           intcon	equ	0xFF2
 18951                           intcon2	equ	0xFF1
 18952                           postinc0	equ	0xFEE
 18953                           wreg	equ	0xFE8
 18954                           indf1	equ	0xFE7
 18955                           fsr1h	equ	0xFE2
 18956                           fsr1l	equ	0xFE1
 18957                           indf2	equ	0xFDF
 18958                           postinc2	equ	0xFDE
 18959                           postdec2	equ	0xFDD
 18960                           plusw2	equ	0xFDB
 18961                           fsr2h	equ	0xFDA
 18962                           fsr2l	equ	0xFD9
 18963                           status	equ	0xFD8
 18964                           
 18965 ;; *************** function _WriteTimer0 *****************
 18966 ;; Defined at:
 18967 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18968 ;; Parameters:    Size  Location     Type
 18969 ;;  timer0          2    7[COMRAM] unsigned int 
 18970 ;; Auto vars:     Size  Location     Type
 18971 ;;  timer           2    9[COMRAM] struct Timers
 18972 ;; Return value:  Size  Location     Type
 18973 ;;		None               void
 18974 ;; Registers used:
 18975 ;;		None
 18976 ;; Tracked objects:
 18977 ;;		On entry : 0/0
 18978 ;;		On exit  : 0/0
 18979 ;;		Unchanged: 0/0
 18980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18981 ;;      Params:         2       0       0       0       0       0       0
 18982 ;;      Locals:         2       0       0       0       0       0       0
 18983 ;;      Temps:          0       0       0       0       0       0       0
 18984 ;;      Totals:         4       0       0       0       0       0       0
 18985 ;;Total ram usage:        4 bytes
 18986 ;; Hardware stack levels used:    1
 18987 ;; Hardware stack levels required when called:    2
 18988 ;; This function calls:
 18989 ;;		Nothing
 18990 ;; This function is called by:
 18991 ;;		_init
 18992 ;; This function uses a non-reentrant model
 18993 ;;
 18994                           
 18995                           	psect	text72
 18996  0048CE                     __ptext72:
 18997                           	opt stack 0
 18998  0048CE                     _WriteTimer0:
 18999                           	opt stack 26
 19000                           
 19001                           ;incstack = 0
 19002                           ;incstack = 0
 19003  0048CE  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19004  0048D2  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19005  0048D6  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19006  0048DA  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19007  0048DE  0012               	return	
 19008  0048E0                     __end_of_WriteTimer0:
 19009                           	opt stack 0
 19010                           tblptru	equ	0xFF8
 19011                           tblptrh	equ	0xFF7
 19012                           tblptrl	equ	0xFF6
 19013                           tablat	equ	0xFF5
 19014                           prodh	equ	0xFF4
 19015                           prodl	equ	0xFF3
 19016                           intcon	equ	0xFF2
 19017                           intcon2	equ	0xFF1
 19018                           postinc0	equ	0xFEE
 19019                           wreg	equ	0xFE8
 19020                           indf1	equ	0xFE7
 19021                           fsr1h	equ	0xFE2
 19022                           fsr1l	equ	0xFE1
 19023                           indf2	equ	0xFDF
 19024                           postinc2	equ	0xFDE
 19025                           postdec2	equ	0xFDD
 19026                           plusw2	equ	0xFDB
 19027                           fsr2h	equ	0xFDA
 19028                           fsr2l	equ	0xFD9
 19029                           status	equ	0xFD8
 19030                           
 19031 ;; *************** function _ECANInitialize *****************
 19032 ;; Defined at:
 19033 ;;		line 168 in file "../ECAN.c"
 19034 ;; Parameters:    Size  Location     Type
 19035 ;;		None
 19036 ;; Auto vars:     Size  Location     Type
 19037 ;;		None
 19038 ;; Return value:  Size  Location     Type
 19039 ;;		None               void
 19040 ;; Registers used:
 19041 ;;		wreg, status,2, status,0, cstack
 19042 ;; Tracked objects:
 19043 ;;		On entry : 0/0
 19044 ;;		On exit  : 0/0
 19045 ;;		Unchanged: 0/0
 19046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19047 ;;      Params:         0       0       0       0       0       0       0
 19048 ;;      Locals:         0       0       0       0       0       0       0
 19049 ;;      Temps:          0       0       0       0       0       0       0
 19050 ;;      Totals:         0       0       0       0       0       0       0
 19051 ;;Total ram usage:        0 bytes
 19052 ;; Hardware stack levels used:    1
 19053 ;; Hardware stack levels required when called:    3
 19054 ;; This function calls:
 19055 ;;		_ECANSetOperationMode
 19056 ;; This function is called by:
 19057 ;;		_init
 19058 ;; This function uses a non-reentrant model
 19059 ;;
 19060                           
 19061                           	psect	text73
 19062  0041E0                     __ptext73:
 19063                           	opt stack 0
 19064  0041E0                     _ECANInitialize:
 19065                           	opt stack 25
 19066                           
 19067                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 19068                           
 19069                           ;incstack = 0
 19070                           ;incstack = 0
 19071  0041E0  0E80               	movlw	128
 19072  0041E2  EC1C  F024         	call	_ECANSetOperationMode
 19073                           
 19074                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 19075  0041E6  0E09               	movlw	9
 19076  0041E8  6E70               	movwf	3952,c	;volatile
 19077                           
 19078                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 19079  0041EA  0EFC               	movlw	252
 19080  0041EC  6E71               	movwf	3953,c	;volatile
 19081                           
 19082                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 19083                           ;ECAN.c: 181: (0 << 6) |
 19084                           ;ECAN.c: 182: (2-1);
 19085  0041EE  0E01               	movlw	1
 19086  0041F0  6E72               	movwf	3954,c	;volatile
 19087                           
 19088                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 19089  0041F2  0E20               	movlw	32
 19090  0041F4  6E73               	movwf	3955,c	;volatile
 19091                           
 19092                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 19093  0041F6  8E77               	bsf	3959,7,c	;volatile
 19094                           
 19095                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 19096  0041F8  9C77               	bcf	3959,6,c	;volatile
 19097                           
 19098                           ;ECAN.c: 205: RXB0CON = 0;
 19099  0041FA  6A60               	clrf	3936,c	;volatile
 19100                           
 19101                           ;ECAN.c: 211: RXB1CON = 0;
 19102  0041FC  010F               	movlb	15	; () banked
 19103  0041FE  6B50               	clrf	80,b	;volatile
 19104                           
 19105                           ; BSR set to: 15
 19106                           ;ECAN.c: 221: B0CON = 0;
 19107  004200  010E               	movlb	14	; () banked
 19108  004202  6B20               	clrf	32,b	;volatile
 19109                           
 19110                           ; BSR set to: 14
 19111                           ;ECAN.c: 231: B1CON = 0;
 19112  004204  6B30               	clrf	48,b	;volatile
 19113                           
 19114                           ; BSR set to: 14
 19115                           ;ECAN.c: 241: B2CON = 0;
 19116  004206  6B40               	clrf	64,b	;volatile
 19117                           
 19118                           ; BSR set to: 14
 19119                           ;ECAN.c: 254: B3CON = 0 << 2;
 19120  004208  6B50               	clrf	80,b	;volatile
 19121                           
 19122                           ; BSR set to: 14
 19123                           ;ECAN.c: 264: B4CON = 0 << 2;
 19124  00420A  6B60               	clrf	96,b	;volatile
 19125                           
 19126                           ; BSR set to: 14
 19127                           ;ECAN.c: 274: B5CON = 0 << 2;
 19128  00420C  6B70               	clrf	112,b	;volatile
 19129                           
 19130                           ; BSR set to: 14
 19131                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 19132  00420E  0EE0               	movlw	224
 19133  004210  010D               	movlb	13	; () banked
 19134  004212  6FF8               	movwf	248,b	;volatile
 19135                           
 19136                           ; BSR set to: 13
 19137                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 19138  004214  010F               	movlb	15	; () banked
 19139  004216  6B00               	clrf	0,b	;volatile
 19140                           
 19141                           ; BSR set to: 15
 19142  004218  0E08               	movlw	8
 19143  00421A  6F01               	movwf	1,b	;volatile
 19144                           
 19145                           ; BSR set to: 15
 19146  00421C  6B02               	clrf	2,b	;volatile
 19147                           
 19148                           ; BSR set to: 15
 19149  00421E  6B03               	clrf	3,b	;volatile
 19150                           
 19151                           ; BSR set to: 15
 19152                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 19153  004220  6B04               	clrf	4,b	;volatile
 19154                           
 19155                           ; BSR set to: 15
 19156  004222  0EE8               	movlw	232
 19157  004224  6F05               	movwf	5,b	;volatile
 19158                           
 19159                           ; BSR set to: 15
 19160  004226  0E1A               	movlw	26
 19161  004228  6F06               	movwf	6,b	;volatile
 19162                           
 19163                           ; BSR set to: 15
 19164  00422A  6B07               	clrf	7,b	;volatile
 19165                           
 19166                           ; BSR set to: 15
 19167                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 19168  00422C  0E03               	movlw	3
 19169  00422E  010D               	movlb	13	; () banked
 19170  004230  6FD4               	movwf	212,b	;volatile
 19171                           
 19172                           ; BSR set to: 13
 19173                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 19174  004232  6BD5               	clrf	213,b	;volatile
 19175                           
 19176                           ; BSR set to: 13
 19177                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 19178  004234  6BE0               	clrf	224,b	;volatile
 19179                           
 19180                           ; BSR set to: 13
 19181                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 19182  004236  0E11               	movlw	17
 19183  004238  6FE1               	movwf	225,b	;volatile
 19184                           
 19185                           ; BSR set to: 13
 19186                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 19187  00423A  6FE2               	movwf	226,b	;volatile
 19188                           
 19189                           ; BSR set to: 13
 19190                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 19191  00423C  6BE3               	clrf	227,b	;volatile
 19192                           
 19193                           ; BSR set to: 13
 19194                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 19195  00423E  6BE4               	clrf	228,b	;volatile
 19196                           
 19197                           ; BSR set to: 13
 19198                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 19199  004240  6BE5               	clrf	229,b	;volatile
 19200                           
 19201                           ; BSR set to: 13
 19202                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 19203  004242  6BE6               	clrf	230,b	;volatile
 19204                           
 19205                           ; BSR set to: 13
 19206                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 19207  004244  6BE7               	clrf	231,b	;volatile
 19208                           
 19209                           ; BSR set to: 13
 19210                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 19211  004246  0E54               	movlw	84
 19212  004248  6FF0               	movwf	240,b	;volatile
 19213                           
 19214                           ; BSR set to: 13
 19215                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 19216  00424A  0E05               	movlw	5
 19217  00424C  6FF1               	movwf	241,b	;volatile
 19218                           
 19219                           ; BSR set to: 13
 19220                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19221  00424E  6BF2               	clrf	242,b	;volatile
 19222                           
 19223                           ; BSR set to: 13
 19224                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 19225  004250  6BF2               	clrf	242,b	;volatile
 19226                           
 19227                           ; BSR set to: 13
 19228                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 19229  004252  0E0F               	movlw	15
 19230  004254  010F               	movlb	15	; () banked
 19231  004256  6F18               	movwf	24,b	;volatile
 19232                           
 19233                           ; BSR set to: 15
 19234  004258  0EE0               	movlw	224
 19235  00425A  6F19               	movwf	25,b	;volatile
 19236                           
 19237                           ; BSR set to: 15
 19238  00425C  6B1A               	clrf	26,b	;volatile
 19239                           
 19240                           ; BSR set to: 15
 19241  00425E  6B1B               	clrf	27,b	;volatile
 19242                           
 19243                           ; BSR set to: 15
 19244                           ;ECAN.c: 482: RXM0EXIDM = 1;
 19245  004260  8719               	bsf	25,3,b	;volatile
 19246                           
 19247                           ; BSR set to: 15
 19248                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 19249  004262  0E0F               	movlw	15
 19250  004264  6F1C               	movwf	28,b	;volatile
 19251                           
 19252                           ; BSR set to: 15
 19253  004266  0EE0               	movlw	224
 19254  004268  6F1D               	movwf	29,b	;volatile
 19255                           
 19256                           ; BSR set to: 15
 19257  00426A  691E               	setf	30,b	;volatile
 19258                           
 19259                           ; BSR set to: 15
 19260  00426C  6B1F               	clrf	31,b	;volatile
 19261                           
 19262                           ; BSR set to: 15
 19263                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 19264  00426E  871D               	bsf	29,3,b	;volatile
 19265                           
 19266                           ; BSR set to: 15
 19267                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 19268  004270  0E00               	movlw	0
 19269  004272  EF1C  F024         	goto	_ECANSetOperationMode
 19270  004276                     __end_of_ECANInitialize:
 19271                           	opt stack 0
 19272                           tblptru	equ	0xFF8
 19273                           tblptrh	equ	0xFF7
 19274                           tblptrl	equ	0xFF6
 19275                           tablat	equ	0xFF5
 19276                           prodh	equ	0xFF4
 19277                           prodl	equ	0xFF3
 19278                           intcon	equ	0xFF2
 19279                           intcon2	equ	0xFF1
 19280                           postinc0	equ	0xFEE
 19281                           wreg	equ	0xFE8
 19282                           indf1	equ	0xFE7
 19283                           fsr1h	equ	0xFE2
 19284                           fsr1l	equ	0xFE1
 19285                           indf2	equ	0xFDF
 19286                           postinc2	equ	0xFDE
 19287                           postdec2	equ	0xFDD
 19288                           plusw2	equ	0xFDB
 19289                           fsr2h	equ	0xFDA
 19290                           fsr2l	equ	0xFD9
 19291                           status	equ	0xFD8
 19292                           
 19293 ;; *************** function _ECANSetOperationMode *****************
 19294 ;; Defined at:
 19295 ;;		line 1012 in file "../ECAN.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;  mode            1    wreg     enum E16346
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;  mode            1    7[COMRAM] enum E16346
 19300 ;; Return value:  Size  Location     Type
 19301 ;;		None               void
 19302 ;; Registers used:
 19303 ;;		wreg, status,2, status,0
 19304 ;; Tracked objects:
 19305 ;;		On entry : 0/0
 19306 ;;		On exit  : 0/0
 19307 ;;		Unchanged: 0/0
 19308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19309 ;;      Params:         0       0       0       0       0       0       0
 19310 ;;      Locals:         1       0       0       0       0       0       0
 19311 ;;      Temps:          0       0       0       0       0       0       0
 19312 ;;      Totals:         1       0       0       0       0       0       0
 19313 ;;Total ram usage:        1 bytes
 19314 ;; Hardware stack levels used:    1
 19315 ;; Hardware stack levels required when called:    2
 19316 ;; This function calls:
 19317 ;;		Nothing
 19318 ;; This function is called by:
 19319 ;;		_ECANInitialize
 19320 ;;		_calculateSetFilterMask
 19321 ;; This function uses a non-reentrant model
 19322 ;;
 19323                           
 19324                           	psect	text74
 19325  004838                     __ptext74:
 19326                           	opt stack 0
 19327  004838                     _ECANSetOperationMode:
 19328                           	opt stack 23
 19329                           
 19330                           ;incstack = 0
 19331                           ;incstack = 0
 19332                           ;ECANSetOperationMode@mode stored from wreg
 19333  004838  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 19334                           
 19335                           ;ECAN.c: 1013: CANCON &= 0x1F;
 19336  00483C  0E1F               	movlw	31
 19337  00483E  166F               	andwf	3951,f,c	;volatile
 19338                           
 19339                           ;ECAN.c: 1014: CANCON |= mode;
 19340  004840  5008               	movf	ECANSetOperationMode@mode,w,c
 19341  004842  126F               	iorwf	3951,f,c	;volatile
 19342  004844                     l12026:
 19343  004844  506F               	movf	3951,w,c	;volatile
 19344  004846  0BE0               	andlw	224
 19345  004848  1808               	xorwf	ECANSetOperationMode@mode,w,c
 19346  00484A  B4D8               	btfsc	status,2,c
 19347  00484C  0012               	return	
 19348  00484E  D7FA               	goto	l12026
 19349  004850                     __end_of_ECANSetOperationMode:
 19350                           	opt stack 0
 19351                           tblptru	equ	0xFF8
 19352                           tblptrh	equ	0xFF7
 19353                           tblptrl	equ	0xFF6
 19354                           tablat	equ	0xFF5
 19355                           prodh	equ	0xFF4
 19356                           prodl	equ	0xFF3
 19357                           intcon	equ	0xFF2
 19358                           intcon2	equ	0xFF1
 19359                           postinc0	equ	0xFEE
 19360                           wreg	equ	0xFE8
 19361                           indf1	equ	0xFE7
 19362                           fsr1h	equ	0xFE2
 19363                           fsr1l	equ	0xFE1
 19364                           indf2	equ	0xFDF
 19365                           postinc2	equ	0xFDE
 19366                           postdec2	equ	0xFDD
 19367                           plusw2	equ	0xFDB
 19368                           fsr2h	equ	0xFDA
 19369                           fsr2l	equ	0xFD9
 19370                           status	equ	0xFD8
 19371                           
 19372 ;; *************** function _vscp_readAppReg *****************
 19373 ;; Defined at:
 19374 ;;		line 1425 in file "../main.c"
 19375 ;; Parameters:    Size  Location     Type
 19376 ;;  reg             1    wreg     unsigned char 
 19377 ;; Auto vars:     Size  Location     Type
 19378 ;;  reg             1   17[COMRAM] unsigned char 
 19379 ;;  rv              1   16[COMRAM] unsigned char 
 19380 ;; Return value:  Size  Location     Type
 19381 ;;                  1    wreg      unsigned char 
 19382 ;; Registers used:
 19383 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19384 ;; Tracked objects:
 19385 ;;		On entry : F/0
 19386 ;;		On exit  : 0/0
 19387 ;;		Unchanged: 0/0
 19388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19389 ;;      Params:         0       0       0       0       0       0       0
 19390 ;;      Locals:         2       0       0       0       0       0       0
 19391 ;;      Temps:          7       0       0       0       0       0       0
 19392 ;;      Totals:         9       0       0       0       0       0       0
 19393 ;;Total ram usage:        9 bytes
 19394 ;; Hardware stack levels used:    1
 19395 ;; Hardware stack levels required when called:    3
 19396 ;; This function calls:
 19397 ;;		_Read_b_eep
 19398 ;; This function is called by:
 19399 ;;		_vscp_readRegister
 19400 ;;		_vscp_handleProtocolEvent
 19401 ;; This function uses a non-reentrant model
 19402 ;;
 19403                           
 19404                           	psect	text75
 19405  00342C                     __ptext75:
 19406                           	opt stack 0
 19407  00342C                     _vscp_readAppReg:
 19408                           	opt stack 24
 19409                           
 19410                           ;incstack = 0
 19411                           ;incstack = 0
 19412                           ;vscp_readAppReg@reg stored from wreg
 19413  00342C  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 19414                           
 19415                           ; BSR set to: 0
 19416                           ;main.c: 1426: uint8_t rv;
 19417                           ;main.c: 1428: rv = 0x00;
 19418  003430  6A11               	clrf	vscp_readAppReg@rv,c
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;main.c: 1431: if ( 0 == vscp_page_select ) {
 19422  003432  5053               	movf	_vscp_page_select+1,w,c
 19423  003434  1052               	iorwf	_vscp_page_select,w,c
 19424  003436  E001 D0AD          	bnz	l13736
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;main.c: 1434: if ( reg == 0 ) {
 19428  00343A  6612               	tstfsz	vscp_readAppReg@reg,c
 19429  00343C  D006               	goto	l13682
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;main.c: 1435: rv = Read_b_eep(0x43 + 0);
 19433  00343E  6A09               	clrf	?_Read_b_eep+1,c
 19434  003440  0E43               	movlw	67
 19435  003442  6E08               	movwf	?_Read_b_eep,c
 19436  003444  EC70  F024         	call	_Read_b_eep	;wreg free
 19437  003448  D0C3               	goto	L69
 19438  00344A                     l13682:
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;main.c: 1437: else if ( reg == 1 ) {
 19442  00344A  0412               	decf	vscp_readAppReg@reg,w,c
 19443  00344C  E106               	bnz	l13686
 19444                           
 19445                           ; BSR set to: 0
 19446                           ;main.c: 1438: rv = Read_b_eep(0x43 + 1);
 19447  00344E  6A09               	clrf	?_Read_b_eep+1,c
 19448  003450  0E44               	movlw	68
 19449  003452  6E08               	movwf	?_Read_b_eep,c
 19450  003454  EC70  F024         	call	_Read_b_eep	;wreg free
 19451  003458  D0BB               	goto	L69
 19452  00345A                     l13686:
 19453                           
 19454                           ; BSR set to: 0
 19455                           ;main.c: 1440: else if ( ( reg >= 2 ) &&
 19456                           ;main.c: 1441: ( reg <= 11 ) ) {
 19457  00345A  0E01               	movlw	1
 19458  00345C  6412               	cpfsgt	vscp_readAppReg@reg,c
 19459  00345E  D00C               	goto	l13692
 19460                           
 19461                           ; BSR set to: 0
 19462  003460  0E0C               	movlw	12
 19463  003462  6012               	cpfslt	vscp_readAppReg@reg,c
 19464  003464  D009               	goto	l13692
 19465  003466                     
 19466                           ; BSR set to: 0
 19467                           ;main.c: 1442: rv = Read_b_eep(0x43 + 2 + ( reg - 2 ));
 19468  003466  0E43               	movlw	67
 19469  003468  2412               	addwf	vscp_readAppReg@reg,w,c
 19470  00346A  6E08               	movwf	?_Read_b_eep,c
 19471  00346C  6A09               	clrf	?_Read_b_eep+1,c
 19472  00346E  0E00               	movlw	0
 19473  003470  2209               	addwfc	?_Read_b_eep+1,f,c
 19474  003472  EC70  F024         	call	_Read_b_eep	;wreg free
 19475  003476  D0AC               	goto	L69
 19476  003478                     l13692:
 19477                           
 19478                           ; BSR set to: 0
 19479                           ;main.c: 1446: else if ( reg == 12 ) {
 19480  003478  5012               	movf	vscp_readAppReg@reg,w,c
 19481  00347A  0A0C               	xorlw	12
 19482  00347C  E108               	bnz	l13696
 19483                           
 19484                           ; BSR set to: 0
 19485                           ;main.c: 1447: rv = ( TRISAbits.TRISA0 << 1 ) +
 19486                           ;main.c: 1448: TRISAbits.TRISA1;
 19487  00347E  3092               	rrcf	3986,w,c	;volatile
 19488  003480  0B01               	andlw	1
 19489  003482  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19490  003484  5092               	movf	3986,w,c	;volatile
 19491  003486  0B01               	andlw	1
 19492  003488  0D02               	mullw	2
 19493  00348A  50F3               	movf	prodl,w,c
 19494  00348C  D035               	goto	L71
 19495  00348E                     l13696:
 19496                           
 19497                           ; BSR set to: 0
 19498                           ;main.c: 1450: else if ( reg == 13 ) {
 19499  00348E  5012               	movf	vscp_readAppReg@reg,w,c
 19500  003490  0A0D               	xorlw	13
 19501  003492  E134               	bnz	l13700
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;main.c: 1451: rv = ( TRISAbits.TRISA2 << 7 ) +
 19505                           ;main.c: 1452: ( TRISCbits.TRISC7 << 6 ) +
 19506                           ;main.c: 1453: ( TRISCbits.TRISC6 << 5 ) +
 19507                           ;main.c: 1454: ( TRISCbits.TRISC5 << 4 ) +
 19508                           ;main.c: 1455: ( TRISCbits.TRISC4 << 3 ) +
 19509                           ;main.c: 1456: ( TRISCbits.TRISC3 << 2 ) +
 19510                           ;main.c: 1457: ( TRISBbits.TRISB1 << 1 ) +
 19511                           ;main.c: 1458: TRISBbits.TRISB0;
 19512  003494  5093               	movf	3987,w,c	;volatile
 19513  003496  0B01               	andlw	1
 19514  003498  6E0A               	movwf	??_vscp_readAppReg& (0+255),c
 19515  00349A  3093               	rrcf	3987,w,c	;volatile
 19516  00349C  0B01               	andlw	1
 19517  00349E  0D02               	mullw	2
 19518  0034A0  CFF3 F00B          	movff	prodl,??_vscp_readAppReg+1
 19519  0034A4  3094               	rrcf	3988,w,c	;volatile
 19520  0034A6  32E8               	rrcf	wreg,f,c
 19521  0034A8  32E8               	rrcf	wreg,f,c
 19522  0034AA  0B01               	andlw	1
 19523  0034AC  0D04               	mullw	4
 19524  0034AE  CFF3 F00C          	movff	prodl,??_vscp_readAppReg+2
 19525  0034B2  3894               	swapf	3988,w,c	;volatile
 19526  0034B4  0B01               	andlw	1
 19527  0034B6  0D08               	mullw	8
 19528  0034B8  CFF3 F00D          	movff	prodl,??_vscp_readAppReg+3
 19529  0034BC  3894               	swapf	3988,w,c	;volatile
 19530  0034BE  32E8               	rrcf	wreg,f,c
 19531  0034C0  0B01               	andlw	1
 19532  0034C2  0D10               	mullw	16
 19533  0034C4  CFF3 F00E          	movff	prodl,??_vscp_readAppReg+4
 19534  0034C8  3894               	swapf	3988,w,c	;volatile
 19535  0034CA  32E8               	rrcf	wreg,f,c
 19536  0034CC  32E8               	rrcf	wreg,f,c
 19537  0034CE  0B01               	andlw	1
 19538  0034D0  0D20               	mullw	32
 19539  0034D2  CFF3 F00F          	movff	prodl,??_vscp_readAppReg+5
 19540  0034D6  3494               	rlcf	3988,w,c	;volatile
 19541  0034D8  36E8               	rlcf	wreg,f,c
 19542  0034DA  0B01               	andlw	1
 19543  0034DC  0D40               	mullw	64
 19544  0034DE  CFF3 F010          	movff	prodl,??_vscp_readAppReg+6
 19545  0034E2  3092               	rrcf	3986,w,c	;volatile
 19546  0034E4  32E8               	rrcf	wreg,f,c
 19547  0034E6  0B01               	andlw	1
 19548  0034E8  0D80               	mullw	128
 19549  0034EA  50F3               	movf	prodl,w,c
 19550  0034EC  2410               	addwf	??_vscp_readAppReg+6,w,c
 19551  0034EE  240F               	addwf	??_vscp_readAppReg+5,w,c
 19552  0034F0  240E               	addwf	??_vscp_readAppReg+4,w,c
 19553  0034F2  240D               	addwf	??_vscp_readAppReg+3,w,c
 19554  0034F4  240C               	addwf	??_vscp_readAppReg+2,w,c
 19555  0034F6  240B               	addwf	??_vscp_readAppReg+1,w,c
 19556  0034F8                     L71:
 19557  0034F8  240A               	addwf	??_vscp_readAppReg,w,c
 19558  0034FA  D06A               	goto	L69
 19559  0034FC                     l13700:
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;main.c: 1460: else if ( ( reg >= 14 ) &&
 19563                           ;main.c: 1461: ( reg <= 23 ) ) {
 19564  0034FC  0E0D               	movlw	13
 19565  0034FE  6412               	cpfsgt	vscp_readAppReg@reg,c
 19566  003500  D042               	goto	l13730
 19567                           
 19568                           ; BSR set to: 0
 19569  003502  0E18               	movlw	24
 19570  003504  6012               	cpfslt	vscp_readAppReg@reg,c
 19571  003506  D03F               	goto	l13730
 19572  003508  D028               	goto	l13728
 19573  00350A                     l13706:
 19574                           
 19575                           ; BSR set to: 0
 19576                           ;main.c: 1467: rv = PORTBbits.RB0;
 19577  00350A  0E00               	movlw	0
 19578  00350C  B081               	btfsc	3969,0,c	;volatile
 19579  00350E  0E01               	movlw	1
 19580  003510  D05F               	goto	L69
 19581  003512                     l13708:
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;main.c: 1472: rv = PORTBbits.RB1;
 19585  003512  0E00               	movlw	0
 19586  003514  B281               	btfsc	3969,1,c	;volatile
 19587  003516  0E01               	movlw	1
 19588  003518  D05B               	goto	L69
 19589  00351A                     l13710:
 19590                           
 19591                           ; BSR set to: 0
 19592                           ;main.c: 1477: rv = PORTCbits.RC3;
 19593  00351A  0E00               	movlw	0
 19594  00351C  B682               	btfsc	3970,3,c	;volatile
 19595  00351E  0E01               	movlw	1
 19596  003520  D057               	goto	L69
 19597  003522                     l13712:
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;main.c: 1482: rv = PORTCbits.RC4;
 19601  003522  0E00               	movlw	0
 19602  003524  B882               	btfsc	3970,4,c	;volatile
 19603  003526  0E01               	movlw	1
 19604  003528  D053               	goto	L69
 19605  00352A                     l13714:
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;main.c: 1487: rv = PORTCbits.RC5;
 19609  00352A  0E00               	movlw	0
 19610  00352C  BA82               	btfsc	3970,5,c	;volatile
 19611  00352E  0E01               	movlw	1
 19612  003530  D04F               	goto	L69
 19613  003532                     l13716:
 19614                           
 19615                           ; BSR set to: 0
 19616                           ;main.c: 1492: rv = PORTCbits.RC6;
 19617  003532  0E00               	movlw	0
 19618  003534  BC82               	btfsc	3970,6,c	;volatile
 19619  003536  0E01               	movlw	1
 19620  003538  D04B               	goto	L69
 19621  00353A                     l13718:
 19622                           
 19623                           ; BSR set to: 0
 19624                           ;main.c: 1497: rv = PORTCbits.RC7;
 19625  00353A  0E00               	movlw	0
 19626  00353C  BE82               	btfsc	3970,7,c	;volatile
 19627  00353E  0E01               	movlw	1
 19628  003540  D047               	goto	L69
 19629  003542                     l13720:
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;main.c: 1502: rv = PORTAbits.RA2;
 19633  003542  0E00               	movlw	0
 19634  003544  B480               	btfsc	3968,2,c	;volatile
 19635  003546  0E01               	movlw	1
 19636  003548  D043               	goto	L69
 19637  00354A                     l13722:
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;main.c: 1507: rv = PORTAbits.RA1;
 19641  00354A  0E00               	movlw	0
 19642  00354C  B280               	btfsc	3968,1,c	;volatile
 19643  00354E  0E01               	movlw	1
 19644  003550  D03F               	goto	L69
 19645  003552                     l13724:
 19646                           
 19647                           ; BSR set to: 0
 19648                           ;main.c: 1512: rv = PORTAbits.RA0;
 19649  003552  0E00               	movlw	0
 19650  003554  B080               	btfsc	3968,0,c	;volatile
 19651  003556  0E01               	movlw	1
 19652  003558  D03B               	goto	L69
 19653  00355A                     l13728:
 19654                           
 19655                           ; BSR set to: 0
 19656  00355A  5012               	movf	vscp_readAppReg@reg,w,c
 19657                           
 19658                           ; Switch size 1, requested type "space"
 19659                           ; Number of cases is 10, Range of values is 14 to 23
 19660                           ; switch strategies available:
 19661                           ; Name         Instructions Cycles
 19662                           ; simple_byte           31    16 (average)
 19663                           ;	Chosen strategy is simple_byte
 19664  00355C  0A0E               	xorlw	14	; case 14
 19665  00355E  E0D5               	bz	l13706
 19666  003560  0A01               	xorlw	1	; case 15
 19667  003562  E0D7               	bz	l13708
 19668  003564  0A1F               	xorlw	31	; case 16
 19669  003566  E0D9               	bz	l13710
 19670  003568  0A01               	xorlw	1	; case 17
 19671  00356A  E0DB               	bz	l13712
 19672  00356C  0A03               	xorlw	3	; case 18
 19673  00356E  E0DD               	bz	l13714
 19674  003570  0A01               	xorlw	1	; case 19
 19675  003572  E0DF               	bz	l13716
 19676  003574  0A07               	xorlw	7	; case 20
 19677  003576  E0E1               	bz	l13718
 19678  003578  0A01               	xorlw	1	; case 21
 19679  00357A  E0E3               	bz	l13720
 19680  00357C  0A03               	xorlw	3	; case 22
 19681  00357E  E0E5               	bz	l13722
 19682  003580  0A01               	xorlw	1	; case 23
 19683  003582  E0E7               	bz	l13724
 19684  003584  D026               	goto	l13748
 19685  003586                     l13730:
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;main.c: 1517: else if ( ( reg >= 24 ) &&
 19689                           ;main.c: 1518: ( reg < 46 ) ) {
 19690  003586  0E17               	movlw	23
 19691  003588  6412               	cpfsgt	vscp_readAppReg@reg,c
 19692  00358A  D023               	goto	l13748
 19693                           
 19694                           ; BSR set to: 0
 19695  00358C  0E2E               	movlw	46
 19696  00358E  6012               	cpfslt	vscp_readAppReg@reg,c
 19697  003590  D020               	goto	l13748
 19698  003592  D769               	goto	L70
 19699  003594                     l13736:
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;main.c: 1525: else if ( 1 == vscp_page_select ) {
 19703  003594  0452               	decf	_vscp_page_select,w,c
 19704  003596  1053               	iorwf	_vscp_page_select+1,w,c
 19705  003598  E10C               	bnz	l13742
 19706                           
 19707                           ; BSR set to: 0
 19708                           ;main.c: 1526: if ( reg < 40u ) {
 19709  00359A  0E28               	movlw	40
 19710  00359C  6012               	cpfslt	vscp_readAppReg@reg,c
 19711  00359E  D019               	goto	l13748
 19712                           
 19713                           ; BSR set to: 0
 19714                           ;main.c: 1527: rv = Read_b_eep(0x43 + 46 + reg);
 19715  0035A0  0E71               	movlw	113
 19716  0035A2  2412               	addwf	vscp_readAppReg@reg,w,c
 19717  0035A4  6E08               	movwf	?_Read_b_eep,c
 19718  0035A6  6A09               	clrf	?_Read_b_eep+1,c
 19719  0035A8  0E00               	movlw	0
 19720  0035AA  2209               	addwfc	?_Read_b_eep+1,f,c
 19721  0035AC  EC70  F024         	call	_Read_b_eep	;wreg free
 19722  0035B0  D00F               	goto	L69
 19723  0035B2                     l13742:
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;main.c: 1531: else if ( 2 == vscp_page_select ) {
 19727  0035B2  5052               	movf	_vscp_page_select,w,c
 19728  0035B4  0A02               	xorlw	2
 19729  0035B6  1053               	iorwf	_vscp_page_select+1,w,c
 19730  0035B8  E10C               	bnz	l13748
 19731                           
 19732                           ; BSR set to: 0
 19733                           ;main.c: 1532: if ( reg < 8*8 ) {
 19734  0035BA  0E40               	movlw	64
 19735  0035BC  6012               	cpfslt	vscp_readAppReg@reg,c
 19736  0035BE  D009               	goto	l13748
 19737                           
 19738                           ; BSR set to: 0
 19739                           ;main.c: 1533: rv = Read_b_eep(0x43 + 46 + 40u + reg);
 19740  0035C0  0E99               	movlw	153
 19741  0035C2  2412               	addwf	vscp_readAppReg@reg,w,c
 19742  0035C4  6E08               	movwf	?_Read_b_eep,c
 19743  0035C6  6A09               	clrf	?_Read_b_eep+1,c
 19744  0035C8  0E00               	movlw	0
 19745  0035CA  2209               	addwfc	?_Read_b_eep+1,f,c
 19746  0035CC  EC70  F024         	call	_Read_b_eep	;wreg free
 19747  0035D0                     L69:
 19748  0035D0  6E11               	movwf	vscp_readAppReg@rv,c
 19749  0035D2                     l13748:
 19750                           
 19751                           ;main.c: 1534: }
 19752                           ;main.c: 1535: }
 19753                           ;main.c: 1537: return rv;
 19754  0035D2  5011               	movf	vscp_readAppReg@rv,w,c
 19755  0035D4  0012               	return	
 19756  0035D6                     __end_of_vscp_readAppReg:
 19757                           	opt stack 0
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           intcon2	equ	0xFF1
 19766                           postinc0	equ	0xFEE
 19767                           wreg	equ	0xFE8
 19768                           indf1	equ	0xFE7
 19769                           fsr1h	equ	0xFE2
 19770                           fsr1l	equ	0xFE1
 19771                           indf2	equ	0xFDF
 19772                           postinc2	equ	0xFDE
 19773                           postdec2	equ	0xFDD
 19774                           plusw2	equ	0xFDB
 19775                           fsr2h	equ	0xFDA
 19776                           fsr2l	equ	0xFD9
 19777                           status	equ	0xFD8
 19778                           
 19779 ;; *************** function _Read_b_eep *****************
 19780 ;; Defined at:
 19781 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 19782 ;; Parameters:    Size  Location     Type
 19783 ;;  badd            2    7[COMRAM] unsigned int 
 19784 ;; Auto vars:     Size  Location     Type
 19785 ;;		None
 19786 ;; Return value:  Size  Location     Type
 19787 ;;                  1    wreg      unsigned char 
 19788 ;; Registers used:
 19789 ;;		wreg, status,2
 19790 ;; Tracked objects:
 19791 ;;		On entry : 0/0
 19792 ;;		On exit  : 0/0
 19793 ;;		Unchanged: 0/0
 19794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19795 ;;      Params:         2       0       0       0       0       0       0
 19796 ;;      Locals:         0       0       0       0       0       0       0
 19797 ;;      Temps:          0       0       0       0       0       0       0
 19798 ;;      Totals:         2       0       0       0       0       0       0
 19799 ;;Total ram usage:        2 bytes
 19800 ;; Hardware stack levels used:    1
 19801 ;; Hardware stack levels required when called:    2
 19802 ;; This function calls:
 19803 ;;		Nothing
 19804 ;; This function is called by:
 19805 ;;		_main
 19806 ;;		_init_app_ram
 19807 ;;		_doApplicationOneSecondWork
 19808 ;;		_vscp_readNicknamePermanent
 19809 ;;		_vscp_getZone
 19810 ;;		_vscp_getSubzone
 19811 ;;		_vscp_readAppReg
 19812 ;;		_vscp_writeAppReg
 19813 ;;		_SendInformationEvent
 19814 ;;		_doDM
 19815 ;;		_doActionOn
 19816 ;;		_doActionOff
 19817 ;;		_doActionPulse
 19818 ;;		_doActionStatus
 19819 ;;		_doActionToggle
 19820 ;;		_vscp_getGUID
 19821 ;;		_vscp_getUserID
 19822 ;;		_vscp_getManufacturerId
 19823 ;;		_vscp_getSegmentCRC
 19824 ;;		_calculateSetFilterMask
 19825 ;; This function uses a non-reentrant model
 19826 ;;
 19827                           
 19828                           	psect	text76
 19829  0048E0                     __ptext76:
 19830                           	opt stack 0
 19831  0048E0                     _Read_b_eep:
 19832                           	opt stack 24
 19833                           
 19834                           ;incstack = 0
 19835                           ;incstack = 0
 19836  0048E0  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 19837  0048E4  9CA6               	bcf	4006,6,c	;volatile
 19838  0048E6  9EA6               	bcf	4006,7,c	;volatile
 19839  0048E8  80A6               	bsf	4006,0,c	;volatile
 19840  0048EA  F000               	nop		;# 
 19841  0048EC  F000               	nop		;# 
 19842  0048EE  50A8               	movf	4008,w,c	;volatile
 19843  0048F0  0012               	return	
 19844  0048F2                     __end_of_Read_b_eep:
 19845                           	opt stack 0
 19846                           tblptru	equ	0xFF8
 19847                           tblptrh	equ	0xFF7
 19848                           tblptrl	equ	0xFF6
 19849                           tablat	equ	0xFF5
 19850                           prodh	equ	0xFF4
 19851                           prodl	equ	0xFF3
 19852                           intcon	equ	0xFF2
 19853                           intcon2	equ	0xFF1
 19854                           postinc0	equ	0xFEE
 19855                           wreg	equ	0xFE8
 19856                           indf1	equ	0xFE7
 19857                           fsr1h	equ	0xFE2
 19858                           fsr1l	equ	0xFE1
 19859                           indf2	equ	0xFDF
 19860                           postinc2	equ	0xFDE
 19861                           postdec2	equ	0xFDD
 19862                           plusw2	equ	0xFDB
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867 ;; *************** function _interrupt_at_low_vector *****************
 19868 ;; Defined at:
 19869 ;;		line 140 in file "../main.c"
 19870 ;; Parameters:    Size  Location     Type
 19871 ;;		None
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;		None
 19874 ;; Return value:  Size  Location     Type
 19875 ;;		None               void
 19876 ;; Registers used:
 19877 ;;		wreg, status,2, status,0, cstack
 19878 ;; Tracked objects:
 19879 ;;		On entry : 0/0
 19880 ;;		On exit  : 0/0
 19881 ;;		Unchanged: 0/0
 19882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19883 ;;      Params:         0       0       0       0       0       0       0
 19884 ;;      Locals:         0       0       0       0       0       0       0
 19885 ;;      Temps:          3       0       0       0       0       0       0
 19886 ;;      Totals:         3       0       0       0       0       0       0
 19887 ;;Total ram usage:        3 bytes
 19888 ;; Hardware stack levels used:    1
 19889 ;; Hardware stack levels required when called:    1
 19890 ;; This function calls:
 19891 ;;		i1_WriteTimer0
 19892 ;; This function is called by:
 19893 ;;		Interrupt level 1
 19894 ;; This function uses a non-reentrant model
 19895 ;;
 19896                           
 19897                           	psect	intcodelo
 19898  000018                     __pintcodelo:
 19899                           	opt stack 0
 19900  000018                     _interrupt_at_low_vector:
 19901                           	opt stack 20
 19902                           
 19903                           ;incstack = 0
 19904  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 19905  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 19906  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 19907  000024                     
 19908                           ;main.c: 142: if ( INTCONbits.TMR0IF ) {
 19909  000024  A4F2               	btfss	intcon,2,c	;volatile
 19910  000026  D001               	goto	i1u1006_21
 19911  000028  D001               	goto	i1u1006_20
 19912  00002A                     i1u1006_21:
 19913  00002A  D046               	goto	i1l417
 19914  00002C                     i1u1006_20:
 19915  00002C                     
 19916                           ;main.c: 145: WriteTimer0(0xfb1d);
 19917  00002C  0EFB               	movlw	251
 19918  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 19919  000030  0E1D               	movlw	29
 19920  000032  6E01               	movwf	?i1_WriteTimer0,c
 19921  000034  EC79  F024         	call	i1_WriteTimer0	;wreg free
 19922  000038                     
 19923                           ;main.c: 147: vscp_timer++;
 19924  000038  0100               	movlb	0	; () banked
 19925  00003A  4B6E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 19926  00003C  2B6F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 19927  00003E                     
 19928                           ; BSR set to: 0
 19929                           ;main.c: 148: vscp_configtimer++;
 19930  00003E  4B6C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 19931  000040  2B6D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 19932  000042                     
 19933                           ; BSR set to: 0
 19934                           ;main.c: 149: measurement_clock_10ms++;
 19935  000042  0E01               	movlw	1
 19936  000044  2760               	addwf	_measurement_clock_10ms& (0+255),f,b	;volatile
 19937  000046  0E00               	movlw	0
 19938  000048  2361               	addwfc	(_measurement_clock_10ms+1)& (0+255),f,b	;volatile
 19939  00004A  0E00               	movlw	0
 19940  00004C  2362               	addwfc	(_measurement_clock_10ms+2)& (0+255),f,b	;volatile
 19941  00004E  0E00               	movlw	0
 19942  000050  2363               	addwfc	(_measurement_clock_10ms+3)& (0+255),f,b	;volatile
 19943  000052                     
 19944                           ; BSR set to: 0
 19945                           ;main.c: 150: measurement_clock_sec++;
 19946  000052  0E01               	movlw	1
 19947  000054  2764               	addwf	_measurement_clock_sec& (0+255),f,b	;volatile
 19948  000056  0E00               	movlw	0
 19949  000058  2365               	addwfc	(_measurement_clock_sec+1)& (0+255),f,b	;volatile
 19950  00005A  0E00               	movlw	0
 19951  00005C  2366               	addwfc	(_measurement_clock_sec+2)& (0+255),f,b	;volatile
 19952  00005E  0E00               	movlw	0
 19953  000060  2367               	addwfc	(_measurement_clock_sec+3)& (0+255),f,b	;volatile
 19954  000062                     
 19955                           ; BSR set to: 0
 19956                           ;main.c: 153: if ( PORTCbits.RC0 ) {
 19957  000062  A082               	btfss	3970,0,c	;volatile
 19958  000064  D001               	goto	i1u1007_21
 19959  000066  D001               	goto	i1u1007_20
 19960  000068                     i1u1007_21:
 19961  000068  D002               	goto	i1l8670
 19962  00006A                     i1u1007_20:
 19963  00006A                     
 19964                           ; BSR set to: 0
 19965                           ;main.c: 154: vscp_initbtncnt = 0;
 19966  00006A  6B7C               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 19967                           
 19968                           ;main.c: 155: }
 19969  00006C  D001               	goto	i1l409
 19970  00006E                     i1l8670:
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;main.c: 156: else {
 19974                           ;main.c: 158: vscp_initbtncnt++;
 19975  00006E  2B7C               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 19976  000070                     i1l409:
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;main.c: 159: }
 19980                           ;main.c: 162: vscp_statuscnt++;
 19981  000070  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 19982  000072                     
 19983                           ; BSR set to: 0
 19984                           ;main.c: 163: if ( ( 0x02 == vscp_initledfunc ) &&
 19985                           ;main.c: 164: ( vscp_statuscnt > 100 ) ) {
 19986  000072  5056               	movf	_vscp_initledfunc,w,c
 19987  000074  0A02               	xorlw	2
 19988  000076  A4D8               	btfss	status,2,c
 19989  000078  D001               	goto	i1u1008_21
 19990  00007A  D001               	goto	i1u1008_20
 19991  00007C                     i1u1008_21:
 19992  00007C  D00E               	goto	i1l8680
 19993  00007E                     i1u1008_20:
 19994  00007E                     
 19995                           ; BSR set to: 0
 19996  00007E  0E64               	movlw	100
 19997  000080  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 19998  000082  D001               	goto	i1u1009_21
 19999  000084  D001               	goto	i1u1009_20
 20000  000086                     i1u1009_21:
 20001  000086  D009               	goto	i1l8680
 20002  000088                     i1u1009_20:
 20003  000088                     
 20004                           ; BSR set to: 0
 20005                           ;main.c: 166: if ( PORTCbits.RC1 ) {
 20006  000088  A282               	btfss	3970,1,c	;volatile
 20007  00008A  D001               	goto	i1u1010_21
 20008  00008C  D001               	goto	i1u1010_20
 20009  00008E                     i1u1010_21:
 20010  00008E  D002               	goto	i1l411
 20011  000090                     i1u1010_20:
 20012  000090                     
 20013                           ; BSR set to: 0
 20014                           ;main.c: 167: PORTCbits.RC1 = 0;
 20015  000090  9282               	bcf	3970,1,c	;volatile
 20016                           
 20017                           ;main.c: 168: }
 20018  000092  D001               	goto	i1l412
 20019  000094                     i1l411:
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;main.c: 169: else {
 20023                           ;main.c: 170: PORTCbits.RC1 = 1;
 20024  000094  8282               	bsf	3970,1,c	;volatile
 20025  000096                     i1l412:
 20026                           
 20027                           ; BSR set to: 0
 20028                           ;main.c: 171: }
 20029                           ;main.c: 173: vscp_statuscnt = 0;
 20030  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 20031                           
 20032                           ;main.c: 175: }
 20033  000098  D00E               	goto	i1l413
 20034  00009A                     i1l8680:
 20035                           
 20036                           ; BSR set to: 0
 20037                           ;main.c: 176: else if (0x01 == vscp_initledfunc) {
 20038  00009A  0456               	decf	_vscp_initledfunc,w,c
 20039  00009C  A4D8               	btfss	status,2,c
 20040  00009E  D001               	goto	i1u1011_21
 20041  0000A0  D001               	goto	i1u1011_20
 20042  0000A2                     i1u1011_21:
 20043  0000A2  D003               	goto	i1l414
 20044  0000A4                     i1u1011_20:
 20045  0000A4                     
 20046                           ; BSR set to: 0
 20047                           ;main.c: 177: PORTCbits.RC1 = 1;
 20048  0000A4  8282               	bsf	3970,1,c	;volatile
 20049                           
 20050                           ;main.c: 178: vscp_statuscnt = 0;
 20051  0000A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 20052                           
 20053                           ;main.c: 179: }
 20054  0000A8  D006               	goto	i1l413
 20055  0000AA                     i1l414:
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;main.c: 180: else if (0x00 == vscp_initledfunc) {
 20059  0000AA  6656               	tstfsz	_vscp_initledfunc,c
 20060  0000AC  D001               	goto	i1u1012_21
 20061  0000AE  D001               	goto	i1u1012_20
 20062  0000B0                     i1u1012_21:
 20063  0000B0  D002               	goto	i1l413
 20064  0000B2                     i1u1012_20:
 20065  0000B2                     
 20066                           ; BSR set to: 0
 20067                           ;main.c: 181: PORTCbits.RC1 = 0;
 20068  0000B2  9282               	bcf	3970,1,c	;volatile
 20069                           
 20070                           ;main.c: 182: vscp_statuscnt = 0;
 20071  0000B4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 20072  0000B6                     i1l413:
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;main.c: 183: }
 20076                           ;main.c: 185: INTCONbits.TMR0IF = 0;
 20077  0000B6  94F2               	bcf	intcon,2,c	;volatile
 20078  0000B8                     i1l417:
 20079  0000B8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 20080  0000BC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 20081  0000C0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 20082  0000C4  0010               	retfie	
 20083  0000C6                     __end_of_interrupt_at_low_vector:
 20084                           	opt stack 0
 20085                           tblptru	equ	0xFF8
 20086                           tblptrh	equ	0xFF7
 20087                           tblptrl	equ	0xFF6
 20088                           tablat	equ	0xFF5
 20089                           prodh	equ	0xFF4
 20090                           prodl	equ	0xFF3
 20091                           intcon	equ	0xFF2
 20092                           intcon2	equ	0xFF1
 20093                           postinc0	equ	0xFEE
 20094                           wreg	equ	0xFE8
 20095                           indf1	equ	0xFE7
 20096                           fsr1h	equ	0xFE2
 20097                           fsr1l	equ	0xFE1
 20098                           bsr	equ	0xFE0
 20099                           indf2	equ	0xFDF
 20100                           postinc2	equ	0xFDE
 20101                           postdec2	equ	0xFDD
 20102                           plusw2	equ	0xFDB
 20103                           fsr2h	equ	0xFDA
 20104                           fsr2l	equ	0xFD9
 20105                           status	equ	0xFD8
 20106                           
 20107 ;; *************** function i1_WriteTimer0 *****************
 20108 ;; Defined at:
 20109 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 20110 ;; Parameters:    Size  Location     Type
 20111 ;;  timer0          2    0[COMRAM] unsigned int 
 20112 ;; Auto vars:     Size  Location     Type
 20113 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 20114 ;; Return value:  Size  Location     Type
 20115 ;;		None               void
 20116 ;; Registers used:
 20117 ;;		None
 20118 ;; Tracked objects:
 20119 ;;		On entry : 0/0
 20120 ;;		On exit  : 0/0
 20121 ;;		Unchanged: 0/0
 20122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20123 ;;      Params:         2       0       0       0       0       0       0
 20124 ;;      Locals:         2       0       0       0       0       0       0
 20125 ;;      Temps:          0       0       0       0       0       0       0
 20126 ;;      Totals:         4       0       0       0       0       0       0
 20127 ;;Total ram usage:        4 bytes
 20128 ;; Hardware stack levels used:    1
 20129 ;; This function calls:
 20130 ;;		Nothing
 20131 ;; This function is called by:
 20132 ;;		_interrupt_at_low_vector
 20133 ;; This function uses a non-reentrant model
 20134 ;;
 20135                           
 20136                           	psect	text78
 20137  0048F2                     __ptext78:
 20138                           	opt stack 0
 20139  0048F2                     i1_WriteTimer0:
 20140                           	opt stack 20
 20141                           
 20142                           ;incstack = 0
 20143                           ;incstack = 0
 20144  0048F2  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 20145  0048F6  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 20146  0048FA  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 20147  0048FE  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 20148  004902  0012               	return	
 20149  004904                     __end_ofi1_WriteTimer0:
 20150                           	opt stack 0
 20151                           tblptru	equ	0xFF8
 20152                           tblptrh	equ	0xFF7
 20153                           tblptrl	equ	0xFF6
 20154                           tablat	equ	0xFF5
 20155                           prodh	equ	0xFF4
 20156                           prodl	equ	0xFF3
 20157                           intcon	equ	0xFF2
 20158                           intcon2	equ	0xFF1
 20159                           postinc0	equ	0xFEE
 20160                           wreg	equ	0xFE8
 20161                           indf1	equ	0xFE7
 20162                           fsr1h	equ	0xFE2
 20163                           fsr1l	equ	0xFE1
 20164                           bsr	equ	0xFE0
 20165                           indf2	equ	0xFDF
 20166                           postinc2	equ	0xFDE
 20167                           postdec2	equ	0xFDD
 20168                           plusw2	equ	0xFDB
 20169                           fsr2h	equ	0xFDA
 20170                           fsr2l	equ	0xFD9
 20171                           status	equ	0xFD8
 20172                           tblptru	equ	0xFF8
 20173                           tblptrh	equ	0xFF7
 20174                           tblptrl	equ	0xFF6
 20175                           tablat	equ	0xFF5
 20176                           prodh	equ	0xFF4
 20177                           prodl	equ	0xFF3
 20178                           intcon	equ	0xFF2
 20179                           intcon2	equ	0xFF1
 20180                           postinc0	equ	0xFEE
 20181                           wreg	equ	0xFE8
 20182                           indf1	equ	0xFE7
 20183                           fsr1h	equ	0xFE2
 20184                           fsr1l	equ	0xFE1
 20185                           bsr	equ	0xFE0
 20186                           indf2	equ	0xFDF
 20187                           postinc2	equ	0xFDE
 20188                           postdec2	equ	0xFDD
 20189                           plusw2	equ	0xFDB
 20190                           fsr2h	equ	0xFDA
 20191                           fsr2l	equ	0xFD9
 20192                           status	equ	0xFD8
 20193                           
 20194                           	psect	rparam
 20195  0000                     tblptru	equ	0xFF8
 20196                           tblptrh	equ	0xFF7
 20197                           tblptrl	equ	0xFF6
 20198                           tablat	equ	0xFF5
 20199                           prodh	equ	0xFF4
 20200                           prodl	equ	0xFF3
 20201                           intcon	equ	0xFF2
 20202                           intcon2	equ	0xFF1
 20203                           postinc0	equ	0xFEE
 20204                           wreg	equ	0xFE8
 20205                           indf1	equ	0xFE7
 20206                           fsr1h	equ	0xFE2
 20207                           fsr1l	equ	0xFE1
 20208                           bsr	equ	0xFE0
 20209                           indf2	equ	0xFDF
 20210                           postinc2	equ	0xFDE
 20211                           postdec2	equ	0xFDD
 20212                           plusw2	equ	0xFDB
 20213                           fsr2h	equ	0xFDA
 20214                           fsr2l	equ	0xFD9
 20215                           status	equ	0xFD8
 20216                           tblptru	equ	0xFF8
 20217                           tblptrh	equ	0xFF7
 20218                           tblptrl	equ	0xFF6
 20219                           tablat	equ	0xFF5
 20220                           prodh	equ	0xFF4
 20221                           prodl	equ	0xFF3
 20222                           intcon	equ	0xFF2
 20223                           intcon2	equ	0xFF1
 20224                           postinc0	equ	0xFEE
 20225                           wreg	equ	0xFE8
 20226                           indf1	equ	0xFE7
 20227                           fsr1h	equ	0xFE2
 20228                           fsr1l	equ	0xFE1
 20229                           bsr	equ	0xFE0
 20230                           indf2	equ	0xFDF
 20231                           postinc2	equ	0xFDE
 20232                           postdec2	equ	0xFDD
 20233                           plusw2	equ	0xFDB
 20234                           fsr2h	equ	0xFDA
 20235                           fsr2l	equ	0xFD9
 20236                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         119
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     66     159
    BANK1           256      9      29
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?_memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    memset@p1	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    memset@p	PTR unsigned char  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK1[3]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK1[3]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> channel_protection_timer(BANK0[20]), channel_pulse_timer(BANK1[20]), debounce_cnt(BANK0[10]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), RXM1SIDH(ABS[1]), 
		 -> RXF1SIDH(ABS[1]), B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), 
		 -> B2CON(ABS[1]), B1CON(ABS[1]), B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), doApplicationOneSecondWork@data(BANK1[3]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_ram->_memset
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doApplicationOneSecondWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  105202
                                             63 BANK0      3     3      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                         _Read_b_eep
               _SendInformationEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                          45    45      0   13644
                                             25 BANK0     36    36      0
                                              0 BANK1      9     9      0
                         _Read_b_eep
               _SendInformationEvent
                        _doActionOff
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    3314
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    3230
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                16    16      0   18444
                                             28 BANK0     16    16      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    4236
                                             78 COMRAM     3     2      1
                                             22 BANK0      4     4      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    4176
                                             78 COMRAM     3     2      1
                                             22 BANK0      4     4      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     438
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    4026
                                             78 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    4026
                                             78 COMRAM     3     2      1
                                             22 BANK0      3     3      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   49982
                                             35 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     324
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   16658
                                             79 COMRAM     1     1      0
                                             34 BANK0      1     0      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4202
                                             53 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1994
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                        38    38      0     848
                                             15 COMRAM    38    38      0
                         _Read_b_eep
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     188
                                              7 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    1146
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     222
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     264
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                    13    12      1   12246
                                             78 COMRAM     1     0      1
                                             22 BANK0     12    12      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    2586
                                             17 COMRAM    50    50      0
               _ECANSetOperationMode
                       __CANIDToRegs
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    3504
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2904
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1866
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      42
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      84
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    3146
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     354
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      42
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     360
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     402
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0     138
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    6652
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    3146
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    3146
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPFrame                                       32    24      8    3132
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendCANFrame                                         8     1      7    2832
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (4) _ECANSendMessage                                     37    29      8    2652
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (5) __CANIDToRegs                                        10     3      7     966
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    3356
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    3342
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    2748
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    2400
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     954
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3     132
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     582
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     180
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3     138
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 1     1      0     314
                     _ECANInitialize
                        _WriteTimer0
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     146
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      84
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      9     9      0     912
                                              9 COMRAM     9     9      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _ECANInitialize
       _ECANSetOperationMode
     _WriteTimer0
     _OpenTimer0
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
     _memset
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _ECANSetOperationMode
         __CANIDToRegs
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _ECANSetOperationMode
           __CANIDToRegs
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
             _memset
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
           _memset
     ___lbmod
   _Read_b_eep
   _SendInformationEvent
     _Read_b_eep
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      9      1D       6       11.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     42      9F       4       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114      15        0.0%
DATA                 0      0     120      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Jul 02 23:42:41 2015

                      doActionToggle@val 00D3                  __end_of_vscp_readAppReg 35D6  
                  __end_of_sendVSCPFrame 41E0                                       PL2 126A  
                                     PL4 127E                                       PL6 2414  
                                     PL8 1290             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000C                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 3754                    doActionToggle@dmflags 00D2  
                                    PL10 242A                                      PL20 26F8  
                                    PL12 129E                                      PL30 2782  
                                    PL22 3400                                      PL14 12AE  
                                    PL40 3C28                                      PL32 1928  
                                    PL24 2736                                      PL16 18E8  
                                    PL50 3414                                      PL42 1968  
                                    PL34 3D42                                      PL26 274E  
                                    PL18 190C                                      PL60 3C48  
                                    PL52 1976                                      PL44 3D56  
                                    PL36 1948                                      PL28 1916  
                                    PL70 3C70                                      PL62 27B2  
                                    PL54 1984                                      PL46 1FA6  
                                    PL38 195A                                      PL80 1992  
                                    PL72 2D90                                      PL64 3D78  
                                    PL56 1FBE                                      PL48 3D66  
                                    PL90 1302                                      PL82 12E6  
                                    PL74 12BC                                      PL66 3754  
                                    PL58 3C36                                      PL92 19AE  
                                    PL84 19A0                                      PL76 12CA  
                                    PL68 3C5C                                      PL94 19BC  
                                    PL86 12F4                                      PL78 12D8  
                                    PL96 1310                                      PL88 1FD2  
                                    PL98 131E                                      l200 30F4  
                                    l202 3104                                      l212 318E  
                                    l204 3114                                      l213 31A8  
                                    l230 3D40                                      l240 435A  
                                    l170 385E                                      l235 3C26  
                                    l500 23A2                                      l181 305C  
                                    l421 2002                                      l430 204A  
                                    l191 312A                                      l192 30AA  
                                    l176 38DC                                      l168 3840  
                                    l600 15F6                       vscp_readStdReg@idx 0019  
                                    l194 30B8                                      l602 15FA  
                                    l450 217A                                      l611 161E  
                                    l603 1602                                      l196 30CC  
                                    l188 321C                                      l532 39DE  
                                    l612 1626                                      l444 213E  
                                    l605 1606                                      l437 20F4  
                                    l198 30E0                                      l614 162A  
                                    l606 160E                                      l462 21F2  
                                    l615 1634                                      l608 1612  
                                    l480 22A6                                      l456 21B6  
                                    l641 46BA                                      l617 16D4  
                                    l609 161A                                      l722 0906  
                                    l546 144C                                      l474 226A  
                                    l732 09DA                                      l716 08AC  
                                    l492 231E                                      l468 222E  
                                    l637 46E0                                      l901 2930  
                                    l742 0AA6                                      l590 15CA  
                                    l486 22E2                                      l727 0970  
                                    l911 2A70                                      l903 2970  
                                    l591 15D2                                      l752 0B6E  
                                    l737 0A42                                      l905 29B0  
                                    l593 15D6                                      l762 0C36  
                                    l930 4012                                      l594 15DE  
                                    l586 15BA                                      l498 235A  
                                    l747 0B0A                                      l931 4016  
                                    l907 29F0                                      l587 15C2  
                      doActionStatus@bOn 00D4                                      l932 401A  
                                    l596 15E2                                      l757 0BD2  
                                    l933 401E                                      l925 4002  
                                    l909 2A30                                      l861 33FE  
                                    l597 15EA                                      l934 4022  
                                    l926 4052                                      l950 2E36  
                     vscp_readStdReg@reg 001C                                      l847 1252  
                                    l935 4026                                      l927 4006  
                                    l951 2E66                                      l599 15EE  
                                    l928 400A                                      l952 2E96  
                                    l929 400E                                      l953 2EC6  
                                    l865 3272                                      l954 2EF6  
                                    l955 2F26                                      l867 328C  
                                    l892 2830                                      l956 2F56  
                                    l948 2E06                                      l980 3E8C  
                                    l957 2F86                                      l894 2AE6  
                                    l958 2FB6                                      l895 2870  
                                    l897 28B0                                      l899 28F0  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 004F                           getVSCPFrame@id 0028  
                      doActionStatus@val 00D3            __end_of_vscp_handleProbeState 4128  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                                      prod 000FF3  
                 _calculateSetFilterMask 243C                                      wreg 000FE8  
                 _measurement_clock_10ms 0060                                     PL100 132C  
                                   PL110 3D8C                                     PL102 133A  
                                   PL120 27D0                                     PL112 3768  
                                   PL104 3A28                                     PL114 19CA  
                                   PL106 321E              ?_doApplicationOneSecondWork 0001  
                                   PL116 27C6                                     PL108 2DA2  
                                   PL118 1FE0                             __CFG_LVP$OFF 000000  
                           __CFG_WDT$OFF 000000                                     l1010 3AA6  
                                   l1011 3AAE                                     l1003 3A8A  
                                   l1020 3AD2                                     l1004 3A92  
                                   l1013 3AB2                                     l1022 3AD6  
                                   l1014 3ABA                                     l1031 3AFA  
                                   l1023 3ADE                                     l1007 3A9A  
                                   l1032 3B04                                     l1016 3ABE  
                                   l1008 3AA2                                     l1025 3AE2  
                                   l1017 3AC6                                     l1034 3B48  
                                   l1026 3AEA                                     l1019 3ACA  
                                   l1124 44C4                                     l1028 3AEE  
                   __size_of_doActionOff 00C0                                     l1029 3AF6  
                                   l1118 42EC                                     l1303 4508  
                                   l1129 45F2                                     l1313 4560  
                                   l1314 456C                                     l1402 3FA8  
                                   l1307 472A                                     l1331 481E  
                                   l1260 474E                                     l1093 4804  
                                   l1510 4948                                     l1270 4124  
                                   l1318 461C                                     l1271 40B0  
                                   l1255 4414                                     l1327 4400  
                                   l1504 4646                                     l1460 1D14  
                                   l1436 1B98                                     l1461 1D28  
                                   l1278 4112                                     l1462 1D64  
                                   l1551 47C8                                     l1535 452C  
                                   l1279 40F2                                     l1471 1DA0  
                                   l1552 47CA                                     l1376 4770  
                                   l1496 1FA4                      vscp_readStdReg@code 0011  
              vscp_getManufacturerId@idx 000A              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                           sendCANFrame@rv 003E  
                       ??_ECANInitialize 0009                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 000D                                     ___IT 000101  
                                   _doDM 322C                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 1FEA  
                                   _init 4446                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 007D                              _vscp_second 0082  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00C6                     doActionPulse@dmflags 000E  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 3EA8  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 42EE              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l12112 3CCE  
                                  _B0CON 000E20                                    l12026 4844  
                                  l12210 313E                                    l12042 37DA  
                                  l13002 1C3E                                    l12220 315E  
                                  l12036 37CA                                    l13100 1D2A  
                                  l13020 1C66                                    l12142 304A  
                                  l12070 3860                                    l12054 3804  
                                  l13030 1C8A                                    l13022 1C70  
                                  l12304 3BC2                                    l12152 3074  
                                  l12160 3094                                    l12064 3844  
                                  l13112 1D50                                    _B1CON 000E30  
                                  ?_doDM 0001                                    l12090 38CE  
                                  l14002 0BE2                                    l13210 1E40  
                                  l13130 1D80                                    l13018 1C64  
                                  l12260 3206                                    l12076 388E  
                                  l12084 38AC                                    l14100 0D9E  
                                  l13116 1D58                                    l13108 1D48  
                                  l13036 1CB6                                    l12500 239C  
                                  l12340 2028                                    l12246 31D6  
                                  l12254 31F0                                    l12238 31AA  
                                  l12158 308A                                    l12166 3098  
                                  l12094 38D2                                    l14014 0C0A  
                                  l13222 1E88                                    l13214 1E5A  
                                  l13126 1D66                                    l12430 221E  
                                  l12406 21A6                                    l12350 203E  
                                  l12280 431A                                    l12272 42F4  
                                  l12096 38D4                                    l15000 372A  
                                  l14200 0EDC                                    l14104 0DA4  
                                  l14032 0C90                                    l14024 0C46  
                                  l13240 1ECC                                    l13232 1EB2  
                                  l13152 1DA2                                    l13080 1D08  
                                  l13064 1CE8                                    l13048 1CC8  
                                  l12360 205A                                    l12352 2044  
                                  l12344 2030                                    l12504 23A6  
                                  _B2CON 000E40                                    l12282 4324  
                                  l12274 42FC                                    l12290 433C  
                                  l15010 3750                                    l14026 0C82  
                                  l12602 3904                                    l13218 1E70  
                                  l13330 3370                                    l13410 13DE  
                                  l12530 2406                                    l12442 225A  
                                  l12418 21E2                                    l12506 23C6  
                                  l12284 432A                                    l12276 4306  
                                  l14300 106A                                    l14220 0F24  
                                  l14124 0DEC                                    l14052 0CD8  
                                  l12620 394A                                    l13244 1EF4  
                                  l13420 1410                                    l13412 13E8  
                                  l13404 13C0                                    l12348 203A  
                                  l12286 4330                                    l12278 4310  
                                  l15006 3740                                    l14310 1100  
                                  l14302 1088                                    l14214 0F18  
                                  l14142 0E2E                                    l14118 0DE0  
                                  l14070 0D1A                                    l14046 0CCC  
                                  l12630 396C                                    l12702 2BEA  
                                  l15022 4766                                    l13166 1DCA  
                                  l13342 33B2                                    l13334 3386  
                                  l13326 335A                                    l13318 32A6  
                                  l13350 33F4                                    l13422 141A  
                                  l13414 13F2                                    l13406 13CA  
                                  l12534 240E                                    l12518 23F2  
                                  l12454 2296                                    l12382 2120  
                                  l14312 111E                                    l14304 10A6  
                                  l14320 118C                                    l14224 0F2A  
                                  l14152 0E40                                    l14128 0DF2  
                                  l14080 0D56                                    l14056 0CDE  
                                  l15040 3EF2                                    l15104 4668  
                                  l13192 1E2A                                    l13176 1DEC  
                                  l13416 13FC                                    l13408 13D4  
                                  l12384 2130                                    _B3CON 000E50  
                                  l12810 40CE                                    l14314 113C  
                                  l14306 10C4                                    l15034 3ED2  
                                  l13194 1E30                                    l13266 1F44  
                                  l13338 339C                                    l13506 15C4  
                                  l13450 14B0                                    l13418 1406  
                                  l13426 1424                                    l12490 234A  
                                  l12466 22D2                                    l12394 216A  
                                  l13700 34FC                                    l12812 40D2  
                                  l14404 2572                                    l14308 10E2  
                                  l14244 0F6E                                    l14172 0E88  
                                  l14148 0E3A                                    l14076 0D26  
                                  l13188 1E18                                    l13348 33C8  
                                  l13436 1476                                    l13710 351A  
                                  l12806 40CA                                    l14422 2604  
                                  l14318 115A                                    l14262 0FB0  
                                  l14238 0F66                                    l14190 0ECA  
                                  l14166 0E7C                                    l14094 0D92  
                                  l15070 3F7A                                    l15054 3F2C  
                                  l15046 3F0E                                    l12910 1A60  
                                  l13622 402A                                    l13614 3FE8  
                                  l13606 3FB4                                    l13374 43E0  
                                  l13470 14E8                                    l13462 14D2  
                                  l13438 147E                                    l12478 230E  
                                  l13720 3542                                    l13712 3522  
                                  l12584 473A                                    l14408 25E6  
                                  l14432 269C                                    l14248 0F74  
                                  l14176 0E8E                                    l12672 39E0  
                                  l12648 39B2                                    l15056 3F30  
                                  l14512 2AF8                                    l14600 3DE8  
                                  l13296 3236                                    l13368 43D6  
                                  l13448 14A8                                    l13392 137E  
                                  l12496 235E                                    _B4CON 000E60  
                                  l13722 354A                                    l13714 352A  
                                  l13706 350A                                    l13730 3586  
                                  l12842 4116            __size_of_SendInformationEvent 0050  
                                  l14426 267E                                    l14354 11F4  
                                  l14274 0FBE                                    l12658 39C8  
                                  l15058 3F46                                    l12850 19E2  
                                  l13626 4064                                    l14530 2DEE  
                                  l14522 2DB6                                    l14610 3E1A  
                                  l14602 3DF2                                    l13378 43E8  
                                  l13546 1638                                    l13562 16E2  
                                  l13458 14C8                                    l13474 14F4  
                                  l12498 2396                                    l13724 3552  
                                  l13716 3532                                    l13708 3512  
                                  l12772 4070            __size_of_vscp_getMajorVersion 0002  
                                  l14428 2686                                    l14268 0FB8  
                                  l14196 0ED6                                    l14276 0FFA  
                                  l12692 2B34                                    l12940 1AC8  
                                  l12924 1A6C                                    l12852 19E8  
                                  l14508 2AB0                                    l14460 2816  
                                  l14452 27DE                                    l14612 3E24  
                                  l14604 3DFC                                    l13556 16C4  
                                  l13548 1660                                    l13492 1560  
                                  l13564 170E                                    l13396 1386  
                                  l13742 35B2                                    l13718 353A  
                                  l13902 09EC                                    l13822 0854  
                                  l13814 082C                                    l14366 121E  
                                  l14286 100A                                    l13646 46C8  
                                  l13654 46A2                                    l15078 3F8E  
                                  l12950 1AFC                                    l12854 19EE  
                                  l14614 3E2E                                    l14606 3E06  
                                  l14622 3E4C                                    l13494 1564  
                                  l13728 355A                                    l13736 3594  
                                  l14296 102E                                    l13840 08BC  
                                  l15088 3FAA                                    l15096 4652  
                                  l12960 1B30                                    l12856 19F4  
                                  l12848 19DC                                    l14616 3E38  
                                  l14608 3E10                                    l14624 3E74  
                                  l14632 3E9E                                    l14704 3B5A  
                                  l13576 17BE                                    l13496 157C  
                                  l13568 1714                                    _B5CON 000E70  
                                  l13682 344A                                    l14810 4290  
                                  l12786 408E                                    l14378 1266  
                                  l14298 104C                                    l13922 0A52  
                                  l13914 0A16                                    l13842 08C2  
                                  l13834 087E                                    l13594 45A6  
                                  l12698 2BA2                                    l12970 1B64  
                                  l12890 1A3A                                    l12874 1A2C  
                                  l14618 3E42                                    l14650 3A74  
                                  l14642 3A3E                                    l13692 3478  
                                  l13748 35D2                                    l12788 4094  
                                  l14396 2560                                    l14388 244E  
                                  l13772 0680                                    l13764 065C  
                                  l12876 1A32                                    l14580 301A  
                                  l13686 345A                                    l14822 45D0  
                                  l13942 0AB6                                    l13934 0A7A  
                                  l13862 0918                                    l13854 08EC  
                                  l13790 06FA                                    l13782 06A8  
                                  l13598 45B6                                    l12982 1B9C  
                                  l14590 3D9E                                    l14654 3A94  
                                  l13696 348E                                    l14912 4818  
                                  l12992 1BE2                                    l12984 1BBA  
                                  l14826 45D4                                    l14930 35FE  
                                  l14922 35EA                                    l13962 0B1A  
                                  l13954 0ADE                                    l13882 0982  
                                  l13874 0942                                    l14578 2FE6  
                                  l12988 1BCA                                    l14774 477E  
                                  l14950 363C                                    l14942 3620  
                                  l14934 3608                                    l14926 35F4  
                                  l13982 0B7E                                    l13974 0B42  
                                  l13894 09AC                                    l12998 1C28  
                                  l14598 3DD2                                    l14694 3B08  
                                  l14960 365E                                    l14696 3B30  
                                  l14794 4490                                    l14946 362C  
                                  l14938 3614                                    l13994 0BA6  
                                  l14868 4500                                    l14980 3698  
                                  l14972 3680                                    l14964 366A  
                                  l14956 3652                                    l14798 44BE  
                                  l14990 36E2                                    l14976 368C  
                                  l14968 3674               __end_of_vscp_goActiveState 47B0  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 48F2                                    _EEADR 000FA9  
                        __end_of___lbmod 4670                  _vscp_handleDropNickname 453E  
                                  _BSEL0 000DF8                                    _T0CON 000FD5  
                                  u15235 3CA8                                    u15245 3CB8  
                                  u16205 2CE6                                    u15255 3CD6  
                                  u16215 2CFC                                    u16225 2D18  
                                  u16154 2B5E                                    u16155 2B58  
                                  u15295 3052                                    u17224 18FA  
                                  u16265 4538                                    u15297 3054  
                                  u17225 18F4                                    u16266 453A  
                                  u16195 2CD0                                    u15565 3B8A  
                                  u17174 1392                                    u15575 3B9A  
                                  u17175 1390                                    u15664 2096  
                                  u15585 3BC6                                    u15665 2092  
                                  u15674 20B6                                    u15675 20B2  
                                  u17444 1544                                    u17445 1540  
                                  u19134 2DC6                                    u19135 2DC2  
                                  u17464 1588                                    u17465 1586  
                                  u17714 3FC4                                    u17715 3FC0  
                                  u19500 42E0                                    u17655 1828  
                                  u19505 42D6                                    u17665 183E  
                                  u19194 3DAE                                    u19274 3A4E  
                                  u19195 3DAA                                    u19275 3A4A  
                                  u17675 1854                                    u17685 1870  
                                  u18904 263A                                    u18840 2592  
                                  u17785 4166                                    u18905 2636  
                                  u18825 24A6                                    u18914 2652  
                                  u18850 25BA                                    u18915 264E  
                                  u18845 2588                                    u18934 2668  
                                  u18935 2666                                    u18855 25B0  
                                  u18874 25D0                                    i1l411 0094  
                                  u18875 25CE                                    i1l412 0096  
                                  u19860 36D8                                    u18964 27EE  
                                  i1l413 00B6                                    u18965 27EA  
                                  i1l414 00AA                                    i1l409 0070  
                                  i1l417 00B8                                    u19865 36D6  
                                  u19890 3722                                    u19895 3720  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 4936  
             _vscp_readNicknamePermanent 492C                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 48BA                                    doDM@i 00E7  
                          __CFG_WRTD$OFF 000000                           Read_b_eep@badd 0008  
                         __CFG_EBTRB$OFF 000000                   Write_b_eep@GIE_BIT_VAL 000B  
                           _vscp_getZone 490E                       vscp_writeAppReg@rv 00DB  
                                  _hours 0076                _vscp_getRegisterPagesUsed 4954  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 46BC  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 495A  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 4696                             __end_ofPL100 133A  
                           __end_ofPL110 3D96                             __end_ofPL102 1348  
                           __end_ofPL120 27D8                             __end_ofPL112 3774  
                           __end_ofPL104 3A36                             __end_ofPL114 19D2  
                           __end_ofPL106 322C                             __end_ofPL116 27D0  
                           __end_ofPL108 2DB0                             __end_ofPL118 1FEA  
                   _ECANSetOperationMode 4838                          __initialization 456E  
                           __end_of_doDM 3400                             __end_of_main 2414  
                           __end_of_init 448A                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 48E0                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 494E                           doDM@class_mask 00DD  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00D8  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0036                                   ??_main 00FB  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 19D2                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 011A                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON1 000FC1                   __size_of_doActionPulse 0274  
             ECANReceiveMessage@savedPtr 0013                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                            doDM@type_mask 00E0  
                    _channel_pulse_flags 0068                       vscp_writeStdReg@rv 003B  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 47B0  
                                 i1l8660 003E                                   i1l8670 006E  
                                 i1l8662 0042                                   i1l8654 0024  
                                 i1l8680 009A                                   i1l8672 0072  
                                 i1l8664 0052                                   i1l8656 002C  
                                 i1l8682 00A4                                   i1l8674 007E  
                                 i1l8666 0062                                   i1l8658 0038  
                                 i1l8684 00B2                                   i1l8676 0088  
                                 i1l8668 006A                                   i1l8678 0090  
                        _init_app_eeprom 38DE                      _channel_pulse_timer 0100  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 45F4                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1500 00E8  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 461E  
                                 _doWork 4952                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00DC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00DD  
             __end_of_vscp_setSegmentCRC 487C                      vscp_writeAppReg@val 004F  
                                 _memset 459C                                   clear_0 4574  
                                 clear_1 4580                                   clear_2 458C  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00F5  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 007E  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0010  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00D5                               __accesstop 0060  
                __end_of__initialization 4592                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00D5  
                        _current_iostate 006A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 4750                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2DB0  
            __end_of_vscp_check_pstorage 4750                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00DE                               __end_ofPL2 127E  
                             __end_ofPL4 1290                               __end_ofPL6 242A  
                             __end_ofPL8 129E                           ??_sendCANFrame 003E  
                             _doActionOn 27D8                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 492C  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01FA  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 4922  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00DE  
        __size_of_vscp_setManufacturerId 0026                 __end_of_vscp_writeAppReg 126A  
                           _debounce_cnt 00B2                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 3A28              __end_of_vscp_setControlByte 4866  
               __end_of_vscp_writeStdReg 3FAE            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0050  
        __end_of_vscp_handleDropNickname 456E                             _getVSCPFrame 4276  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 4958  
                              ?_Busy_eep 0001                    vscp_writeRegister@reg 0050  
                 ??_ECANSetOperationMode 0008                             __IT_INT_MASK 0070  
                           __IT_SAVE_BSR 0071       __size_of_vscp_getRegisterPagesUsed 0002  
                         ?_doActionPulse 000A          __end_of_vscp_getSubMinorVersion 495C  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 26F8                  __size_of_doActionToggle 012E  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 0112  
                                _ECANCON 000F77                                  ?_memset 0008  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00D0  
                    vscp_writeStdReg@reg 003C             __end_of_vscp_doOneSecondWork 4402  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 0050          __end_of_interrupt_at_low_vector 00C6  
               vscp_readStdReg@code_1473 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 406E                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 42EE               __end_of_vscp_getMatrixInfo 4792  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00D2  
                     _vscp_goActiveState 4792                   __size_of_sendVSCPFrame 00B8  
           __end_of_SendInformationEvent 43B4             __end_of_vscp_getMajorVersion 4960  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 4892                   _vscp_setManufacturerId 4696  
                        _ECANSendMessage 3774                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0080  
             __end_of_vscp_getSegmentCRC 4940               ??_vscp_handleProtocolEvent 00DF  
                          ??_getCANFrame 001C                             doActionOff@i 00D4  
      __end_of_vscp_getRegisterPagesUsed 4956                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 4648                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 2D90  
                     _vscp_sendHeartBeat 4670                                  __pcinit 456E  
                         _vscp_deviceURL 0600                          __size_of_memset 002C  
                            ?_doActionOn 004F                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 1FEA  
                                __ptext1 4952                                  __ptext2 1348  
                                __ptext3 43B4                                  __ptext4 4670  
                                __ptext5 4904                                  __ptext6 490E  
                                __ptext7 494E                                  __ptext8 322C  
                                __ptext9 3A36                           _vscp_getUserID 48A6  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 0036                      ?_vscp_sendHeartBeat 00D0  
               ??_vscp_handleSetNickname 000D                                  _minutes 0077  
                                _seconds 0078                      __end_of_WriteTimer0 48E0  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 453E  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
                                main@dir 00FD            vscp_handleProtocolEvent@bytes 00EC  
                   end_of_initialization 4592                          init_app_ram@dir 0034  
                    __end_of_doActionOff 406E             __end_of_vscp_handleHeartbeat 450A  
                              i1u1010_20 0090                                i1u1010_21 008E  
                              i1u1011_20 00A4                                i1u1011_21 00A2  
                              i1u1012_20 00B2                                i1u1012_21 00B0  
                              i1u1006_20 002C                                i1u1006_21 002A  
                              i1u1007_20 006A                                i1u1007_21 0068  
                              i1u1008_20 007E                                i1u1008_21 007C  
                              i1u1009_20 0088                                i1u1009_21 0086  
               __size_of_vscp_getSubzone 000A                                  memset@c 000A  
                                memset@n 000C                                  memset@p 000E  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 44CC  
              vscp_handleProtocolEvent@i 00F9                vscp_handleProtocolEvent@j 00FA  
              vscp_handleProtocolEvent@k 00F3                          ??_doActionPulse 000B  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 46E2  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 47CE                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 4892              _vscp_writeNicknamePermanent 487C  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 4128  
                 __end_of_vscp_getUserID 48BA             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4446  
                         _vscp_probe_cnt 0081                                _PORTAbits 000F80  
       doApplicationOneSecondWork@bInput 0119                                _PORTBbits 000F81  
                       _current_debounce 0075                                _PORTCbits 000F82  
                    __end_of_getCANFrame 45F4            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 01AA  
                       ___lbmod@dividend 0009                                _TRISAbits 000F92  
                              _TRISBbits 000F93                                _TRISCbits 000F94  
                       doActionPulse@arg 000A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                         doActionPulse@val 000F  
                     _vscp_setSegmentCRC 4866               vscp_handleProtocolEvent@cb 00F1  
                __end_of_ECANSendMessage 38DE                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00E6                     __end_of__RegsToCANID 3C28  
                  _measurement_clock_sec 0064                      __size_of_doActionOn 032A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 4708  
                             _vscp_error 494E                     _vscp_doOneSecondWork 43B4  
                     i1WriteTimer0@timer 0003                               _vscp_timer 006E  
                 __end_of_vscp_setUserID 47EA                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 011C                           _doActionToggle 3A36  
                         _doActionStatus 3D96                          ?_vscp_getUserID 0001  
                         __end_of_doWork 4954             __end_of_vscp_getMinorVersion 495E  
                            _WriteTimer0 48CE                     _SendInformationEvent 4364  
                   _vscp_getMajorVersion 495E                              _Write_b_eep 450A  
                         __end_of_memset 45C8                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                              ___DCDelay 00FE                              __end_ofPL10 243C  
                            __end_ofPL20 2736                              __end_ofPL12 12AE  
                      ?_vscp_writeAppReg 004F                              __end_ofPL30 27B2  
                            __end_ofPL22 3414                              __end_ofPL14 12BC  
                            __end_ofPL40 3C36                              __end_ofPL32 1948  
                            __end_ofPL24 274E                              __end_ofPL16 190C  
                            __end_ofPL50 342C                              __end_ofPL42 1976  
                            __end_ofPL34 3D56                              __end_ofPL26 2782  
                            __end_ofPL18 1916                              __end_ofPL60 3C5C  
                            __end_ofPL52 1984                              __end_ofPL44 3D66  
                            __end_ofPL36 195A                              __end_ofPL28 1928  
                            __end_ofPL70 3C82                              __end_ofPL62 27C6  
                            __end_ofPL54 1992                              __end_ofPL46 1FBE  
                            __end_ofPL38 1968                              __end_ofPL80 19A0  
                            __end_ofPL72 2DA2                              __end_ofPL64 3D8C  
                            __end_ofPL56 1FD2                              __end_ofPL48 3D78  
                            __end_ofPL90 1310                              __end_ofPL82 12F4  
                            __end_ofPL74 12CA                              __end_ofPL66 3768  
                            __end_ofPL58 3C48                              __end_ofPL92 19BC  
                            __end_ofPL84 19AE                              __end_ofPL76 12D8  
                            __end_ofPL68 3C70                              __end_ofPL94 19CA  
                            __end_ofPL86 1302                              __end_ofPL78 12E6  
                            __end_ofPL96 131E                              __end_ofPL88 1FE0  
                            __end_ofPL98 132C                      start_initialization 456E  
                            _doActionOff 3FAE          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00D2                        ?_vscp_writeStdReg 0036  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0037  
                     _vscp_getFamilyCode 4922                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 4918                 _channel_protection_timer 0083  
                       doDM@class_filter 00DB                       __end_of_Read_b_eep 48F2  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 4806  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00F0  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1FA6  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                              _doDM$2383 00E1                                _doDM$2384 00E2  
                              _doDM$2385 00E3                                _doDM$2386 00E4  
                              _doDM$2387 00E5                    __size_of_init_app_ram 028E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3B64  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 3EA8  
               __end_of__ECANPointBuffer 4364                        __CANIDToRegs@type 000E  
                            _getCANFrame 45C8                                 ??_doWork 0008  
                     _vscp_getBufferSize 4956              vscp_handleProtocolEvent@len 00ED  
                         doActionOff@arg 004F              vscp_handleProtocolEvent@pos 00EB  
             __end_of_ECANReceiveMessage 321E                           doActionOff@val 00D3  
                    ??_vscp_readRegister 001D                                 ??_memset 000E  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00D0  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 4904  
          __end_of_vscp_goBootloaderMode 4806                     _vscp_handleHeartbeat 44CC  
                     __end_of_OpenTimer0 47CE      __size_of_doApplicationOneSecondWork 05A0  
                    ?_vscp_getBufferSize 0001                           doActionPulse@i 0010  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                          __IT_SAVE_STATUS 0072  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00BC  
                          __pcstackBANK1 0114                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0042  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 4820  
                           _init_app_ram 2B02             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                __pnvBANK0 00FE  
                          __IT_SAVE_WREG 0073                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 4772                   _vscp_handleSetNickname 4708  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00BC  
                        ?_doActionToggle 004F                           _ECANInitialize 41E0  
                        ?_doActionStatus 004F                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0018                             ??_doActionOn 00D2  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1490 00EF  
                vscp_readStdReg@idx_1474 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 448A                              __smallconst 0600  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 4936  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
                            doActionOn@i 00D7           __end_of_vscp_getManufacturerId 48A6  
         __end_of_vscp_setManufacturerId 46BC                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1489 00EE                          doDM@type_filter 00DF  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 006C  
        SendInformationEvent@eventTypeId 00D1                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 495C  
                              _sendTimer 0079                       __end_of_doActionOn 2B02  
                 __end_of_ECANInitialize 4276                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 4648  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000A  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000C                     __end_of__CANIDToRegs 3D42  
                           __RegsToCANID 3B64                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
                     doActionOff@dmflags 00D2              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 4402  
                              _vscp_imsg 0097                                _vscp_hour 007B  
                              _vscp_omsg 00A5                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 05D4                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 18E8  
             _doApplicationOneSecondWork 1348                         _vscp_page_select 0052  
                            _INTCON2bits 000FF1               __size_of_vscp_readRegister 001A  
                               ___DCByte 0074                                 _Busy_eep 4948  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 014A  
           __end_of_vscp_restoreDefaults 4948                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0012  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 4820                                 __Lrparam 0000  
                  __end_of_doActionPulse 3024                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 004F  
                          doActionOn@val 00D6   doApplicationOneSecondWork@iodirections 0114  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                 vscp_writeAppReg@val_1262 00D9  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
             vscp_writeAppReg@bInfoEvent 00DA                               ?_vscp_init 0001  
                           ?_doActionOff 004F                                 __ptext10 3D96  
                               __ptext11 2DB0                                 __ptext20 459C  
                               __ptext12 27D8                                 __ptext21 38DE  
                               __ptext13 3FAE                                 __ptext30 4954  
                               __ptext22 47CE                                 __ptext14 19D2  
                               __ptext31 4918                                 __ptext23 4696  
                               __ptext15 4648                                 __ptext40 495C  
                               __ptext32 4922                                 __ptext24 46BC  
                               __ptext16 4750                                 __ptext41 495E  
                               __ptext33 4956                                 __ptext25 0622  
                               __ptext17 3EA8                                 __ptext50 406E  
                               __ptext42 45F4                                 __ptext34 4958  
                               __ptext26 243C                                 __ptext18 4940  
                               __ptext51 4792                                 __ptext43 453E  
                               __ptext35 4892                                 __ptext27 4364  
                               __ptext19 2B02                                 __ptext60 3024  
                               __ptext52 46E2                                 __ptext44 4402  
                               __ptext36 48A6                                 __ptext28 4806  
                               __ptext61 3B64                                 __ptext53 4128  
                               __ptext45 492C                                 __ptext37 4820  
                               __ptext29 35D6                                 __ptext70 4446  
                               __ptext62 42EE                                 __ptext54 448A  
                               __ptext46 4708                                 __ptext38 48BA  
                               __ptext71 47B0                                 __ptext63 472C  
                               __ptext55 3774                                 __ptext47 44CC  
                               __ptext39 495A                                 __ptext72 48CE  
                               __ptext64 4850                                 __ptext56 3C82  
                               __ptext48 4772                                 __ptext73 41E0  
                               __ptext65 4866                                 __ptext57 461E  
                               __ptext49 47EA                                 __ptext74 4838  
                               __ptext66 4936                                 __ptext58 4276  
                               __ptext75 342C                                 __ptext67 487C  
                               __ptext59 45C8                                 __ptext76 48E0  
                               __ptext68 450A                                 __ptext69 4948  
                               __ptext78 48F2           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00D0                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 4904  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000D  
                          __size_of_doDM 01D4                            __size_of_main 042A  
                          __size_of_init 0044                __size_of_vscp_writeAppReg 0C48  
                    _vscp_check_pstorage 472C                            init_app_ram@i 0035  
         vscp_handleProtocolEvent@i_1491 00F8           vscp_handleProtocolEvent@i_1488 00F4  
         vscp_handleProtocolEvent@i_1499 00F2                     __end_of_vscp_getGUID 48CE  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 4918  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00D5                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 46E2                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00EA  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                       init_app_eeprom@i 000F                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 4850              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 342C                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 007A  
                        _vscp_readStdReg 35D6             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 461E                       _ECANReceiveMessage 3024  
                               memset@p1 0008                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 007C                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 4838  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 0050  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 0050  
                        _vscp_node_state 007F                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019           doApplicationOneSecondWork@data 0116  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 02BC  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 00C0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 495A  
            _vscp_getBootLoaderAlgorithm 4958         __size_of_interrupt_at_low_vector 00AE  
                 ECANSendMessage@dataLen 0018                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000D  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 47EA  
           __end_of_ECANSetOperationMode 4850                     _vscp_restoreDefaults 4940  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000A  
                __end_of_vscp_getSubzone 490E              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 4772  
                     __end_of_vscp_error 4952                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 472C       vscp_handleProtocolEvent@bytes_1495 00F6  
                  ??_vscp_setControlByte 000C                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00D5                             __CANIDToRegs 3C82  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00E6  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 011B  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00D4  
                      doActionToggle@arg 004F  
